{
  "address": "0x10b883b100A7F5aA9A7687C7799C976BdDfd659f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifierContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "commitment",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "secret",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "encryptedVaultId",
          "type": "bytes32"
        }
      ],
      "name": "depositETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "encryptedVaultId",
          "type": "bytes32"
        }
      ],
      "name": "depositToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "encryptedVaultId",
          "type": "bytes32"
        }
      ],
      "name": "getEthDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "encryptedVaultId",
          "type": "bytes32"
        }
      ],
      "name": "getTokenDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifierContract",
          "type": "address"
        }
      ],
      "name": "setVerifierContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifierContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "sismoConnectResponse",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_nonce",
          "type": "bytes32"
        }
      ],
      "name": "withdrawETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "sismoConnectResponse",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_nonce",
          "type": "bytes32"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_secret",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "sismoConnectResponse",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_nonce",
          "type": "bytes32"
        }
      ],
      "name": "withdrawWithSecret",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x8234875033db7b78e1cc314e8be6dfe6833d221f7f58eab69a671faf09f1ea8f",
  "receipt": {
    "to": null,
    "from": "0x8aA5F726d9F868a21a8bd748E2f1E43bA31eb670",
    "contractAddress": "0x10b883b100A7F5aA9A7687C7799C976BdDfd659f",
    "transactionIndex": 1,
    "gasUsed": "980956",
    "logsBloom": "0x
    "blockHash": "0x94c862345ea662538e327dbde11b6f78bb034461fb4134b31be1b51f56dbdba1",
    "transactionHash": "0x8234875033db7b78e1cc314e8be6dfe6833d221f7f58eab69a671faf09f1ea8f",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 10840138,
        "transactionHash": "0x8234875033db7b78e1cc314e8be6dfe6833d221f7f58eab69a671faf09f1ea8f",
        "address": "0x10b883b100A7F5aA9A7687C7799C976BdDfd659f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008aa5f726d9f868a21a8bd748e2f1e43ba31eb670"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x94c862345ea662538e327dbde11b6f78bb034461fb4134b31be1b51f56dbdba1"
      }
    ],
    "blockNumber": 10840138,
    "cumulativeGasUsed": "1027809",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8CFb40101Fbd1a04b8F460CC5d419E94eFe0c74D"
  ],
  "numDeployments": 12,
  "solcInputHash": "c68c70da44f48ac7b190166a0758b91d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifierContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"secret\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"encryptedVaultId\",\"type\":\"bytes32\"}],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"encryptedVaultId\",\"type\":\"bytes32\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"encryptedVaultId\",\"type\":\"bytes32\"}],\"name\":\"getEthDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"encryptedVaultId\",\"type\":\"bytes32\"}],\"name\":\"getTokenDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifierContract\",\"type\":\"address\"}],\"name\":\"setVerifierContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifierContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_secret\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"withdrawWithSecret\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MecenateVault.sol\":\"MecenateVault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/MecenateVault.sol\":{\"content\":\"/**\\n * @title MecenateVault\\n * @dev This contract allows users to deposit and withdraw ETH and ERC20 tokens, and pay ETH and ERC20 tokens to other addresses.\\n * It also keeps track of the deposited balances for each user using a commitment hash.\\n */\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./interfaces/IMecenateVerifier.sol\\\";\\nimport \\\"./interfaces/IMecenateFeedFactory.sol\\\";\\n\\ncontract MecenateVault is Ownable, ReentrancyGuard {\\n    using Address for address;\\n    using Address for address payable;\\n\\n    mapping(bytes32 => uint256) private ethDeposits;\\n    mapping(bytes32 => mapping(address => uint256)) private tokenDeposits;\\n\\n    address public verifierContract;\\n\\n    event Withdrawn(\\n        bytes32 indexed commitment,\\n        uint256 amount,\\n        string secret,\\n        address token\\n    );\\n\\n    constructor(address _verifierContract) {\\n        verifierContract = _verifierContract;\\n    }\\n\\n    function depositETH(bytes32 encryptedVaultId) public payable nonReentrant {\\n        // 1. Add the deposit to the correct deposit mapping\\n        ethDeposits[encryptedVaultId] += msg.value;\\n    }\\n\\n    function depositToken(\\n        address _token,\\n        uint256 _amount,\\n        bytes32 encryptedVaultId\\n    ) external {\\n        require(_token != address(0), \\\"Token address cannot be 0\\\");\\n\\n        require(_amount > 0, \\\"Amount must be greater than zero\\\");\\n\\n        IERC20 token = IERC20(_token);\\n\\n        require(\\n            token.transferFrom(msg.sender, address(this), _amount),\\n            \\\"Token transfer failed\\\"\\n        );\\n\\n        // Add the deposited amount to the tokenDeposits mapping\\n        tokenDeposits[encryptedVaultId][_token] += _amount;\\n    }\\n\\n    function withdrawETH(\\n        uint256 _amount,\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce\\n    ) public nonReentrant {\\n        (\\n            bytes memory vaultId,\\n            ,\\n            ,\\n            bytes memory signedMessage\\n        ) = IMecenateVerifier(verifierContract).sismoVerify(\\n                sismoConnectResponse,\\n                _to,\\n                _nonce\\n            );\\n\\n        (address to, bytes32 nonce) = abi.decode(\\n            signedMessage,\\n            (address, bytes32)\\n        );\\n\\n        require(to == _to, \\\"Not Same Address\\\");\\n\\n        require(nonce == _nonce, \\\"Not Same Nonce\\\");\\n\\n        bytes32 encryptedVaultId = keccak256(vaultId);\\n\\n        require(ethDeposits[encryptedVaultId] > 0, \\\"Commitment does not exist\\\");\\n\\n        require(_amount > 0, \\\"Amount must be greater than zero\\\");\\n\\n        require(ethDeposits[encryptedVaultId] >= _amount, \\\"Not enough balance\\\");\\n\\n        (bool result, ) = payable(to).call{value: _amount}(\\\"\\\");\\n\\n        ethDeposits[encryptedVaultId] -= _amount;\\n\\n        require(result, \\\"ETH transfer failed\\\");\\n    }\\n\\n    function withdrawWithSecret(\\n        string memory _secret,\\n        address _token,\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce\\n    ) public nonReentrant {\\n        bytes32 commitment = keccak256(abi.encodePacked(_secret));\\n        uint256 amount;\\n\\n        if (_token == address(0)) {\\n            amount = ethDeposits[commitment];\\n            require(amount > 0, \\\"No ETH deposit for this secret\\\");\\n            ethDeposits[commitment] = 0;\\n            payable(_to).transfer(amount);\\n        } else {\\n            amount = tokenDeposits[commitment][_token];\\n            require(amount > 0, \\\"No Token deposit for this secret\\\");\\n            tokenDeposits[commitment][_token] = 0;\\n            IERC20(_token).transfer(_to, amount);\\n        }\\n\\n        emit Withdrawn(commitment, amount, _secret, _token);\\n    }\\n\\n    function withdrawToken(\\n        address _token,\\n        uint256 _amount,\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce\\n    ) public nonReentrant {\\n        (\\n            bytes memory vaultId,\\n            ,\\n            ,\\n            bytes memory signedMessage\\n        ) = IMecenateVerifier(verifierContract).sismoVerify(\\n                sismoConnectResponse,\\n                _to,\\n                _nonce\\n            );\\n\\n        (address to, bytes32 nonce) = abi.decode(\\n            signedMessage,\\n            (address, bytes32)\\n        );\\n\\n        require(to == _to, \\\"Not Same Address\\\");\\n\\n        require(nonce == _nonce, \\\"Not Same Nonce\\\");\\n\\n        // Check if the commitment exists\\n        // and the amount is greater than the deposit.\\n        require(\\n            tokenDeposits[keccak256(vaultId)][_token] >= _amount,\\n            \\\"Not enough token balance\\\"\\n        );\\n\\n        // Decrease the token balance for the commitment.\\n        tokenDeposits[keccak256(vaultId)][_token] -= _amount;\\n\\n        // Transfer the tokens to msg.sender or operator.\\n        IERC20(_token).transfer(to, _amount);\\n    }\\n\\n    function getEthDeposit(\\n        bytes32 encryptedVaultId\\n    ) public view returns (uint256) {\\n        return ethDeposits[encryptedVaultId];\\n    }\\n\\n    receive() external payable {\\n        revert(\\\"Use depositETH function\\\");\\n    }\\n\\n    fallback() external payable {\\n        require(msg.data.length > 0, \\\"Data required for Sismo verification.\\\");\\n        bytes32 encryptedVaultId = abi.decode(msg.data, (bytes32));\\n        ethDeposits[encryptedVaultId] += msg.value;\\n    }\\n\\n    function getTokenDeposit(\\n        address _token,\\n        bytes32 encryptedVaultId\\n    ) public view returns (uint256) {\\n        return tokenDeposits[encryptedVaultId][_token];\\n    }\\n\\n    function setVerifierContract(address _verifierContract) external onlyOwner {\\n        verifierContract = _verifierContract;\\n    }\\n}\\n\",\"keccak256\":\"0xc6c3e8a9e0879c136baff70f93189df9b6250a4b7fe7d4bb064f81f5089d994d\",\"license\":\"MIT\"},\"contracts/interfaces/IMecenateFeedFactory.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\ninterface IMecenateFeedFactory {\\n    function owner() external view returns (address payable);\\n\\n    function treasuryContract() external view returns (address payable);\\n\\n    function identityContract() external view returns (address);\\n\\n    function feeds() external view returns (address[] memory);\\n\\n    function contractCounter() external view returns (uint256);\\n\\n    function isFeed(address _feed) external view returns (bool);\\n\\n    function museToken() external view returns (address);\\n\\n    function wethToken() external view returns (address);\\n\\n    function daiToken() external view returns (address);\\n\\n    function router() external view returns (address);\\n\\n    function getRouterFee(uint8 tokenId) external view returns (uint24);\\n\\n    function burnEnabled() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xdd450940a0ca82107600cd8046bb8d0d20964660b42ba84fb0e26c4c0585a1ac\"},\"contracts/interfaces/IMecenateVerifier.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateVerifier {\\r\\n    function sismoVerify(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) external view returns (bytes memory, uint256, uint256, bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x46733b039d06e66a1f438c4fcc490eea06ed1ba2ddff7d5a0059d9e799f03d8d\"}},\"version\":1}",
  "bytecode": "0x6080346100ab57601f61104438819003918201601f19168301916001600160401b038311848410176100b0578084926020946040528339810103126100ab57516001600160a01b0390818116908190036100ab5760005460018060a01b0319903382821617600055604051933391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3600180556004541617600455610f7d90816100c78239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe604060808152600480361015610083575b361561004157506020361261003c576000356000526002602052600020610038348254610cb7565b9055005b600080fd5b6020606492519162461bcd60e51b8352820152601760248201527f557365206465706f7369744554482066756e6374696f6e0000000000000000006044820152fd5b6000803560e01c806310d5700e1461095f5780631378f5d91461075057806320491915146107275780635e0cd92f146106e5578063715018a61461068857806384abac95146105445780638da5cb5b1461051c578063a25da83c146104d7578063bda7193a14610238578063cf6956881461020f578063d68d9d4e146101da5763f2fde38b146101135750610010565b9190346101d65760203660031901126101d65761012e610c33565b90610137610c5f565b6001600160a01b0391821692831561018457505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b50919060203660031901126101d6576101f1610cda565b35825260026020528120610206348254610cb7565b90556001805580f35b509190346101d657826003193601126101d6575490516001600160a01b03909116815260209150f35b5091346101d65760a03660031901126101d65767ffffffffffffffff82358181116104d357366023820112156104d35761027b9036906024818701359101610bde565b926001600160a01b03602435818116949193908590036104cf576044359081116104cf576102ac9036908401610c15565b506102b5610c49565b936102be610cda565b815193602094858101906102eb8782816102de8d87815193849201610d93565b8101038084520182610b8a565b51902095826103ba5786895260028652838920549485156103775750888086819482948b845260028b5283898120551682f11561036d5761035f7fa5ecd7cf58f2f1e36e387c6442f5dea0a47926654ed49e6d1d9eb06d0406424495965b6060845196879687528601526060850190610e46565b918301520390a26001805580f35b81513d88823e3d90fd5b845162461bcd60e51b8152908101879052601e60248201527f4e6f20455448206465706f73697420666f7220746869732073656372657400006044820152606490fd5b90508588526003855282882082895285528288205493841561048e5786895260038652838920838a528652838920899055835163a9059cbb60e01b81526001600160a01b039092169082019081526020810185905285908290819060400103818b865af18015610484579661035f917fa5ecd7cf58f2f1e36e387c6442f5dea0a47926654ed49e6d1d9eb06d040642449798610457575b50610349565b61047690873d891161047d575b61046e8183610b8a565b810190610d7b565b5038610451565b503d610464565b83513d8a823e3d90fd5b606490868086519262461bcd60e51b845283015260248201527f4e6f20546f6b656e206465706f73697420666f722074686973207365637265746044820152fd5b8680fd5b8480fd5b509034610518576020366003190112610518576104f2610c33565b6104fa610c5f565b81546001600160a01b0319166001600160a01b039190911617905580f35b5080fd5b508234610518578160031936011261051857905490516001600160a01b039091168152602090f35b5082346105185760603660031901126105185761055f610c33565b60243591906001600160a01b031680156106455761057e831515610d30565b81516323b872dd60e01b815233868201523060248201526044810184905260209590868160648189875af190811561063b57869161061e575b50156105e357506105de929394604435865260038152828620918652528320918254610cb7565b905580f35b825162461bcd60e51b81529081018690526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b6044820152606490fd5b6106359150873d891161047d5761046e8183610b8a565b876105b7565b84513d88823e3d90fd5b815162461bcd60e51b8152602081870152601960248201527f546f6b656e20616464726573732063616e6e6f742062652030000000000000006044820152606490fd5b50346106e257806003193601126106e2576106a1610c5f565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b50823461051857806003193601126105185780602092610703610c33565b6024358252600385528282206001600160a01b039091168252845220549051908152f35b509190346101d65760203660031901126101d65760209282913581526002845220549051908152f35b5091346101d65760a03660031901126101d65761076b610c33565b6024359060443567ffffffffffffffff811161095b5761078e9036908601610c15565b93610797610c49565b90608435956107a4610cda565b81548651637276069d60e01b81526001600160a01b039290918a918391851690829081906107d8908e908b90848c01610e6b565b03915afa9788156109515789918a99610923575b5061081b90836108158161080a60209d8e8082518301019101610e97565b931698168814610ebe565b14610efd565b8051918882019283208a5260038952878a20951694858a52885285878a2054106108e0578794926108a0979694928a92519020825260038652868220848352865286822061086a868254610f3a565b9055865163a9059cbb60e01b81526001600160a01b03909316908301908152602081019490945290958693849291839160400190565b03925af19081156108d757506108b9575b826001805580f35b816108cf92903d1061047d5761046e8183610b8a565b5038806108b1565b513d85823e3d90fd5b865162461bcd60e51b8152808401899052601860248201527f4e6f7420656e6f75676820746f6b656e2062616c616e636500000000000000006044820152606490fd5b61094591995061081b92503d808c833e61093d8183610b8a565b810190610df8565b9a929391506107ec9050565b87513d8b823e3d90fd5b8580fd5b5091346101d65760803660031901126101d65781359060243567ffffffffffffffff81116104d3576109949036908501610c15565b6001600160a01b039260443584811692838203610b8657876064359283926109ba610cda565b888a5416908a6109dd8a5197889586948594637276069d60e01b86528501610e6b565b03915afa958615610b7c5788928997610b54575b5090610a1891610815610a0e6020998a8082518301019101610e97565b9216968714610ebe565b84815191012091828752600285528387205415610b1157610a3a821515610d30565b82875260028552818488205410610ad9578680808481945af1913d15610ad4573d610a6481610bc2565b90610a7186519283610b8a565b815287863d92013e5b865260028452610a8e838720918254610f3a565b905515610a9d57836001805580f35b5162461bcd60e51b8152918201526013602482015272115512081d1c985b9cd9995c8819985a5b1959606a1b604482015260649150fd5b610a7a565b835162461bcd60e51b815280870186905260126024820152714e6f7420656e6f7567682062616c616e636560701b6044820152606490fd5b835162461bcd60e51b8152808701869052601960248201527f436f6d6d69746d656e7420646f6573206e6f74206578697374000000000000006044820152606490fd5b610b6f919750610a189293503d808b833e61093d8183610b8a565b9892949391506109f19050565b85513d8a823e3d90fd5b8780fd5b90601f8019910116810190811067ffffffffffffffff821117610bac57604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff8111610bac57601f01601f191660200190565b929192610bea82610bc2565b91610bf86040519384610b8a565b82948184528183011161003c578281602093846000960137010152565b9080601f8301121561003c57816020610c3093359101610bde565b90565b600435906001600160a01b038216820361003c57565b606435906001600160a01b038216820361003c57565b6000546001600160a01b03163303610c7357565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b91908201809211610cc457565b634e487b7160e01b600052601160045260246000fd5b600260015414610ceb576002600155565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b15610d3757565b606460405162461bcd60e51b815260206004820152602060248201527f416d6f756e74206d7573742062652067726561746572207468616e207a65726f6044820152fd5b9081602091031261003c5751801515810361003c5790565b60005b838110610da65750506000910152565b8181015183820152602001610d96565b81601f8201121561003c578051610dcc81610bc2565b92610dda6040519485610b8a565b8184526020828401011161003c57610c309160208085019101610d93565b9160808383031261003c5782519067ffffffffffffffff9182811161003c5783610e23918601610db6565b93602081015193604082015193606083015190811161003c57610c309201610db6565b90602091610e5f81518092818552858086019101610d93565b601f01601f1916010190565b610e8360409295949395606083526060830190610e46565b6001600160a01b0390951660208201520152565b919082604091031261003c5781516001600160a01b038116810361003c5760209092015190565b15610ec557565b60405162461bcd60e51b815260206004820152601060248201526f4e6f742053616d65204164647265737360801b6044820152606490fd5b15610f0457565b60405162461bcd60e51b815260206004820152600e60248201526d4e6f742053616d65204e6f6e636560901b6044820152606490fd5b91908203918211610cc45756fea2646970667358221220816ed504d8e6c08b883286ebfaeed1d899bd3b3cb6f9b1dbff911e1252e6c2c264736f6c63430008130033",
  "deployedBytecode": "0x604060808152600480361015610083575b361561004157506020361261003c576000356000526002602052600020610038348254610cb7565b9055005b600080fd5b6020606492519162461bcd60e51b8352820152601760248201527f557365206465706f7369744554482066756e6374696f6e0000000000000000006044820152fd5b6000803560e01c806310d5700e1461095f5780631378f5d91461075057806320491915146107275780635e0cd92f146106e5578063715018a61461068857806384abac95146105445780638da5cb5b1461051c578063a25da83c146104d7578063bda7193a14610238578063cf6956881461020f578063d68d9d4e146101da5763f2fde38b146101135750610010565b9190346101d65760203660031901126101d65761012e610c33565b90610137610c5f565b6001600160a01b0391821692831561018457505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b50919060203660031901126101d6576101f1610cda565b35825260026020528120610206348254610cb7565b90556001805580f35b509190346101d657826003193601126101d6575490516001600160a01b03909116815260209150f35b5091346101d65760a03660031901126101d65767ffffffffffffffff82358181116104d357366023820112156104d35761027b9036906024818701359101610bde565b926001600160a01b03602435818116949193908590036104cf576044359081116104cf576102ac9036908401610c15565b506102b5610c49565b936102be610cda565b815193602094858101906102eb8782816102de8d87815193849201610d93565b8101038084520182610b8a565b51902095826103ba5786895260028652838920549485156103775750888086819482948b845260028b5283898120551682f11561036d5761035f7fa5ecd7cf58f2f1e36e387c6442f5dea0a47926654ed49e6d1d9eb06d0406424495965b6060845196879687528601526060850190610e46565b918301520390a26001805580f35b81513d88823e3d90fd5b845162461bcd60e51b8152908101879052601e60248201527f4e6f20455448206465706f73697420666f7220746869732073656372657400006044820152606490fd5b90508588526003855282882082895285528288205493841561048e5786895260038652838920838a528652838920899055835163a9059cbb60e01b81526001600160a01b039092169082019081526020810185905285908290819060400103818b865af18015610484579661035f917fa5ecd7cf58f2f1e36e387c6442f5dea0a47926654ed49e6d1d9eb06d040642449798610457575b50610349565b61047690873d891161047d575b61046e8183610b8a565b810190610d7b565b5038610451565b503d610464565b83513d8a823e3d90fd5b606490868086519262461bcd60e51b845283015260248201527f4e6f20546f6b656e206465706f73697420666f722074686973207365637265746044820152fd5b8680fd5b8480fd5b509034610518576020366003190112610518576104f2610c33565b6104fa610c5f565b81546001600160a01b0319166001600160a01b039190911617905580f35b5080fd5b508234610518578160031936011261051857905490516001600160a01b039091168152602090f35b5082346105185760603660031901126105185761055f610c33565b60243591906001600160a01b031680156106455761057e831515610d30565b81516323b872dd60e01b815233868201523060248201526044810184905260209590868160648189875af190811561063b57869161061e575b50156105e357506105de929394604435865260038152828620918652528320918254610cb7565b905580f35b825162461bcd60e51b81529081018690526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b6044820152606490fd5b6106359150873d891161047d5761046e8183610b8a565b876105b7565b84513d88823e3d90fd5b815162461bcd60e51b8152602081870152601960248201527f546f6b656e20616464726573732063616e6e6f742062652030000000000000006044820152606490fd5b50346106e257806003193601126106e2576106a1610c5f565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b50823461051857806003193601126105185780602092610703610c33565b6024358252600385528282206001600160a01b039091168252845220549051908152f35b509190346101d65760203660031901126101d65760209282913581526002845220549051908152f35b5091346101d65760a03660031901126101d65761076b610c33565b6024359060443567ffffffffffffffff811161095b5761078e9036908601610c15565b93610797610c49565b90608435956107a4610cda565b81548651637276069d60e01b81526001600160a01b039290918a918391851690829081906107d8908e908b90848c01610e6b565b03915afa9788156109515789918a99610923575b5061081b90836108158161080a60209d8e8082518301019101610e97565b931698168814610ebe565b14610efd565b8051918882019283208a5260038952878a20951694858a52885285878a2054106108e0578794926108a0979694928a92519020825260038652868220848352865286822061086a868254610f3a565b9055865163a9059cbb60e01b81526001600160a01b03909316908301908152602081019490945290958693849291839160400190565b03925af19081156108d757506108b9575b826001805580f35b816108cf92903d1061047d5761046e8183610b8a565b5038806108b1565b513d85823e3d90fd5b865162461bcd60e51b8152808401899052601860248201527f4e6f7420656e6f75676820746f6b656e2062616c616e636500000000000000006044820152606490fd5b61094591995061081b92503d808c833e61093d8183610b8a565b810190610df8565b9a929391506107ec9050565b87513d8b823e3d90fd5b8580fd5b5091346101d65760803660031901126101d65781359060243567ffffffffffffffff81116104d3576109949036908501610c15565b6001600160a01b039260443584811692838203610b8657876064359283926109ba610cda565b888a5416908a6109dd8a5197889586948594637276069d60e01b86528501610e6b565b03915afa958615610b7c5788928997610b54575b5090610a1891610815610a0e6020998a8082518301019101610e97565b9216968714610ebe565b84815191012091828752600285528387205415610b1157610a3a821515610d30565b82875260028552818488205410610ad9578680808481945af1913d15610ad4573d610a6481610bc2565b90610a7186519283610b8a565b815287863d92013e5b865260028452610a8e838720918254610f3a565b905515610a9d57836001805580f35b5162461bcd60e51b8152918201526013602482015272115512081d1c985b9cd9995c8819985a5b1959606a1b604482015260649150fd5b610a7a565b835162461bcd60e51b815280870186905260126024820152714e6f7420656e6f7567682062616c616e636560701b6044820152606490fd5b835162461bcd60e51b8152808701869052601960248201527f436f6d6d69746d656e7420646f6573206e6f74206578697374000000000000006044820152606490fd5b610b6f919750610a189293503d808b833e61093d8183610b8a565b9892949391506109f19050565b85513d8a823e3d90fd5b8780fd5b90601f8019910116810190811067ffffffffffffffff821117610bac57604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff8111610bac57601f01601f191660200190565b929192610bea82610bc2565b91610bf86040519384610b8a565b82948184528183011161003c578281602093846000960137010152565b9080601f8301121561003c57816020610c3093359101610bde565b90565b600435906001600160a01b038216820361003c57565b606435906001600160a01b038216820361003c57565b6000546001600160a01b03163303610c7357565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b91908201809211610cc457565b634e487b7160e01b600052601160045260246000fd5b600260015414610ceb576002600155565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b15610d3757565b606460405162461bcd60e51b815260206004820152602060248201527f416d6f756e74206d7573742062652067726561746572207468616e207a65726f6044820152fd5b9081602091031261003c5751801515810361003c5790565b60005b838110610da65750506000910152565b8181015183820152602001610d96565b81601f8201121561003c578051610dcc81610bc2565b92610dda6040519485610b8a565b8184526020828401011161003c57610c309160208085019101610d93565b9160808383031261003c5782519067ffffffffffffffff9182811161003c5783610e23918601610db6565b93602081015193604082015193606083015190811161003c57610c309201610db6565b90602091610e5f81518092818552858086019101610d93565b601f01601f1916010190565b610e8360409295949395606083526060830190610e46565b6001600160a01b0390951660208201520152565b919082604091031261003c5781516001600160a01b038116810361003c5760209092015190565b15610ec557565b60405162461bcd60e51b815260206004820152601060248201526f4e6f742053616d65204164647265737360801b6044820152606490fd5b15610f0457565b60405162461bcd60e51b815260206004820152600e60248201526d4e6f742053616d65204e6f6e636560901b6044820152606490fd5b91908203918211610cc45756fea2646970667358221220816ed504d8e6c08b883286ebfaeed1d899bd3b3cb6f9b1dbff911e1252e6c2c264736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/MecenateVault.sol:MecenateVault",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/MecenateVault.sol:MecenateVault",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 5565,
        "contract": "contracts/MecenateVault.sol:MecenateVault",
        "label": "ethDeposits",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 5571,
        "contract": "contracts/MecenateVault.sol:MecenateVault",
        "label": "tokenDeposits",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 5573,
        "contract": "contracts/MecenateVault.sol:MecenateVault",
        "label": "verifierContract",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}