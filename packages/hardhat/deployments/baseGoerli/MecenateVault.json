{
  "address": "0x94a6693E74b93c4e97Ec6A5C042744F88dA7017E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifierContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factoryContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bayContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usersContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_relayer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "relayerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "functionSignature",
          "type": "bytes"
        }
      ],
      "name": "MetaTransactionExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "commitment",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "secret",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "DAI",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_RELAYER_FEE_PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MUSE",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_feed",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "encryptedVaultId",
          "type": "bytes32"
        }
      ],
      "name": "approveTokenToFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newRelayerFeePercentage",
          "type": "uint256"
        }
      ],
      "name": "changeRelayerFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "encryptedVaultId",
          "type": "bytes32"
        }
      ],
      "name": "depositETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "encryptedVaultId",
          "type": "bytes32"
        }
      ],
      "name": "depositToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_encryptedVaultId",
          "type": "bytes32"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factoryContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "encryptedVaultId",
          "type": "bytes32"
        }
      ],
      "name": "getEthDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "encryptedVaultId",
          "type": "bytes32"
        }
      ],
      "name": "getTokenDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mecenateBay",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mecenateUsers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relayerFeePercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factoryContract",
          "type": "address"
        }
      ],
      "name": "setFactoryContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mecenateBay",
          "type": "address"
        }
      ],
      "name": "setMecenateBay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mecenateUsers",
          "type": "address"
        }
      ],
      "name": "setMecenateUsers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_relayer",
          "type": "address"
        }
      ],
      "name": "setRelayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_DAI",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_USDC",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_MUSE",
          "type": "address"
        }
      ],
      "name": "setTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifierContract",
          "type": "address"
        }
      ],
      "name": "setVerifierContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifierContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "sismoConnectResponse",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_nonce",
          "type": "bytes32"
        }
      ],
      "name": "withdrawETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "sismoConnectResponse",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_nonce",
          "type": "bytes32"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_secret",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "sismoConnectResponse",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_nonce",
          "type": "bytes32"
        }
      ],
      "name": "withdrawWithSecret",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x4e2262acb81d05046bb167b36170367cdc530ec36fb9d3541776d572da0e567d",
  "receipt": {
    "to": null,
    "from": "0x8aA5F726d9F868a21a8bd748E2f1E43bA31eb670",
    "contractAddress": "0x94a6693E74b93c4e97Ec6A5C042744F88dA7017E",
    "transactionIndex": 1,
    "gasUsed": "1888592",
    "logsBloom": "0x
    "blockHash": "0xf4f1c8d4fa2ab442af0a77358a7a4ce3d73012a23cbb4c5b4299fce9badc60b8",
    "transactionHash": "0x4e2262acb81d05046bb167b36170367cdc530ec36fb9d3541776d572da0e567d",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 10803231,
        "transactionHash": "0x4e2262acb81d05046bb167b36170367cdc530ec36fb9d3541776d572da0e567d",
        "address": "0x94a6693E74b93c4e97Ec6A5C042744F88dA7017E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008aa5f726d9f868a21a8bd748e2f1e43ba31eb670"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xf4f1c8d4fa2ab442af0a77358a7a4ce3d73012a23cbb4c5b4299fce9badc60b8"
      }
    ],
    "blockNumber": 10803231,
    "cumulativeGasUsed": "1935445",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8CFb40101Fbd1a04b8F460CC5d419E94eFe0c74D",
    "0x604346aC71597A9F2d3906A1708bcA50Cd66d275",
    "0x0000000000000000000000000000000000000000",
    "0x805E6e2887C62B86aD3B667F68DC6c0EFa9A91d4",
    "0x3db5E84e0eBBEa945a0a82E879DcB7E1D1a587B4"
  ],
  "numDeployments": 7,
  "solcInputHash": "8341693507071e3b47f1711b242a0405",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifierContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factoryContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bayContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usersContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"relayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"secret\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DAI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_RELAYER_FEE_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MUSE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feed\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"encryptedVaultId\",\"type\":\"bytes32\"}],\"name\":\"approveTokenToFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newRelayerFeePercentage\",\"type\":\"uint256\"}],\"name\":\"changeRelayerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"encryptedVaultId\",\"type\":\"bytes32\"}],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"encryptedVaultId\",\"type\":\"bytes32\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_encryptedVaultId\",\"type\":\"bytes32\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"encryptedVaultId\",\"type\":\"bytes32\"}],\"name\":\"getEthDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"encryptedVaultId\",\"type\":\"bytes32\"}],\"name\":\"getTokenDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mecenateBay\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mecenateUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relayerFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factoryContract\",\"type\":\"address\"}],\"name\":\"setFactoryContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mecenateBay\",\"type\":\"address\"}],\"name\":\"setMecenateBay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mecenateUsers\",\"type\":\"address\"}],\"name\":\"setMecenateUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"}],\"name\":\"setRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_DAI\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_USDC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_MUSE\",\"type\":\"address\"}],\"name\":\"setTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifierContract\",\"type\":\"address\"}],\"name\":\"setVerifierContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifierContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_secret\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"withdrawWithSecret\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MecenateVault.sol\":\"MecenateVault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/MecenateVault.sol\":{\"content\":\"/**\\n * @title MecenateVault\\n * @dev This contract allows users to deposit and withdraw ETH and ERC20 tokens, and pay ETH and ERC20 tokens to other addresses.\\n * It also keeps track of the deposited balances for each user using a commitment hash.\\n */\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./interfaces/IMecenateVerifier.sol\\\";\\nimport \\\"./interfaces/IMecenateFeedFactory.sol\\\";\\n\\ncontract MecenateVault is Ownable, ReentrancyGuard {\\n    using Address for address;\\n    using Address for address payable;\\n\\n    mapping(bytes32 => uint256) private ethDeposits;\\n    mapping(bytes32 => mapping(address => uint256)) private tokenDeposits;\\n\\n    address public WETH;\\n    address public DAI;\\n    address public USDC;\\n    address public MUSE;\\n    address public verifierContract;\\n    address public factoryContract;\\n    address public mecenateBay;\\n    address public mecenateUsers;\\n    address private relayer;\\n\\n    uint256 public relayerFeePercentage = 200;\\n    uint256 public constant MAX_RELAYER_FEE_PERCENTAGE = 500;\\n\\n    event MetaTransactionExecuted(\\n        address userAddress,\\n        address relayerAddress,\\n        bytes functionSignature\\n    );\\n\\n    event Withdrawn(\\n        bytes32 indexed commitment,\\n        uint256 amount,\\n        string secret,\\n        address token\\n    );\\n\\n    modifier onlyRelayer() {\\n        require(msg.sender == relayer, \\\"Not relayer\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _verifierContract,\\n        address _factoryContract,\\n        address _bayContract,\\n        address _usersContract,\\n        address _relayer\\n    ) {\\n        verifierContract = _verifierContract;\\n        factoryContract = _factoryContract;\\n        mecenateBay = _bayContract;\\n        mecenateUsers = _usersContract;\\n        relayer = _relayer;\\n    }\\n\\n    function setTokens(\\n        address _WETH,\\n        address _DAI,\\n        address _USDC,\\n        address _MUSE\\n    ) external onlyOwner {\\n        WETH = _WETH;\\n        DAI = _DAI;\\n        USDC = _USDC;\\n        MUSE = _MUSE;\\n    }\\n\\n    function changeRelayerFee(\\n        uint256 _newRelayerFeePercentage\\n    ) external onlyOwner {\\n        require(\\n            _newRelayerFeePercentage <= MAX_RELAYER_FEE_PERCENTAGE,\\n            \\\"New relayer fee percentage is too high\\\"\\n        );\\n        relayerFeePercentage = _newRelayerFeePercentage;\\n    }\\n\\n    function depositETH(bytes32 encryptedVaultId) public payable nonReentrant {\\n        // 1. Add the deposit to the correct deposit mapping\\n        ethDeposits[encryptedVaultId] += msg.value;\\n    }\\n\\n    function approveTokenToFeed(\\n        address _token,\\n        uint256 _amount,\\n        address _feed,\\n        bytes32 encryptedVaultId\\n    ) public {\\n        require(_token != address(0), \\\"Token address cannot be 0\\\");\\n        require(_amount > 0, \\\"Amount must be greater than zero\\\");\\n        require(\\n            _token == WETH || _token == DAI || _token == USDC || _token == MUSE,\\n            \\\"Token not supported\\\"\\n        );\\n        require(\\n            tokenDeposits[encryptedVaultId][_token] >= _amount,\\n            \\\"Not enough balance\\\"\\n        );\\n\\n        require(\\n            IMecenateFeedFactory(factoryContract).isFeed(_feed) ||\\n                _feed == mecenateBay,\\n            \\\"Not a feed\\\"\\n        );\\n\\n        // The user must first approve the token transfer\\n        // to this contract\\n        IERC20 token = IERC20(_token);\\n        // Approve the token to the feed\\n        token.approve(_feed, _amount);\\n    }\\n\\n    function depositToken(\\n        address _token,\\n        uint256 _amount,\\n        bytes32 encryptedVaultId\\n    ) external {\\n        require(_token != address(0), \\\"Token address cannot be 0\\\");\\n\\n        require(_amount > 0, \\\"Amount must be greater than zero\\\");\\n\\n        require(\\n            _token == WETH || _token == DAI || _token == USDC || _token == MUSE,\\n            \\\"Token not supported\\\"\\n        );\\n\\n        // The user must first approve the token transfer\\n        // to this contract\\n        IERC20 token = IERC20(_token);\\n\\n        require(\\n            token.transferFrom(msg.sender, address(this), _amount),\\n            \\\"Token transfer failed\\\"\\n        );\\n\\n        // Add the deposited amount to the tokenDeposits mapping\\n        tokenDeposits[encryptedVaultId][_token] += _amount;\\n    }\\n\\n    function withdrawETH(\\n        uint256 _amount,\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce\\n    ) public onlyRelayer nonReentrant {\\n        uint256 initialGas = gasleft();\\n\\n        (\\n            bytes memory vaultId,\\n            ,\\n            ,\\n            bytes memory signedMessage\\n        ) = IMecenateVerifier(verifierContract).sismoVerify(\\n                sismoConnectResponse,\\n                _to,\\n                _nonce\\n            );\\n\\n        (address to, bytes32 nonce) = abi.decode(\\n            signedMessage,\\n            (address, bytes32)\\n        );\\n\\n        require(to == _to, \\\"Not Same Address\\\");\\n\\n        require(nonce == _nonce, \\\"Not Same Nonce\\\");\\n\\n        bytes32 encryptedVaultId = keccak256(vaultId);\\n\\n        uint256 totalRequired = _amount; // Initialize with _value\\n\\n        totalRequired -= tx.gasprice * initialGas; // Add maximum possible gas cost\\n\\n        require(\\n            ethDeposits[encryptedVaultId] >= totalRequired,\\n            \\\"Not enough balance\\\"\\n        );\\n\\n        // 1. Verify that the commitment exists and the amount is not zero\\n        require(ethDeposits[encryptedVaultId] > 0, \\\"Commitment does not exist\\\");\\n\\n        require(_amount > 0, \\\"Amount must be greater than zero\\\");\\n\\n        // 2. Verify that the commitment has enough balance to withdraw from\\n        require(ethDeposits[encryptedVaultId] >= _amount, \\\"Not enough balance\\\");\\n\\n        //decode signedMessage as address\\n        ethDeposits[encryptedVaultId] -= _amount;\\n\\n        uint256 gasUsed = initialGas - gasleft();\\n\\n        uint256 gasCost = gasUsed * tx.gasprice;\\n\\n        uint256 relayerFee = (gasCost * relayerFeePercentage) / 10000;\\n\\n        require(_amount >= gasCost + relayerFee, \\\"Not enough balance for gas\\\");\\n\\n        uint256 newAmount = _amount - gasCost - relayerFee;\\n\\n        (bool result, ) = payable(to).call{value: newAmount}(\\\"\\\");\\n\\n        require(result, \\\"ETH transfer failed\\\");\\n\\n        (bool result2, ) = payable(msg.sender).call{\\n            value: gasCost + relayerFee\\n        }(\\\"\\\");\\n\\n        require(result2, \\\"ETH transfer failed with gas\\\");\\n    }\\n\\n    function withdrawWithSecret(\\n        string memory _secret,\\n        address _token,\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce\\n    ) public onlyRelayer nonReentrant {\\n        bytes32 commitment = keccak256(abi.encodePacked(_secret));\\n        uint256 amount;\\n\\n        if (_token == address(0)) {\\n            amount = ethDeposits[commitment];\\n            require(amount > 0, \\\"No ETH deposit for this secret\\\");\\n            ethDeposits[commitment] = 0;\\n            payable(_to).transfer(amount);\\n        } else {\\n            amount = tokenDeposits[commitment][_token];\\n            require(amount > 0, \\\"No Token deposit for this secret\\\");\\n            tokenDeposits[commitment][_token] = 0;\\n            IERC20(_token).transfer(_to, amount);\\n        }\\n\\n        emit Withdrawn(commitment, amount, _secret, _token);\\n    }\\n\\n    function withdrawToken(\\n        address _token,\\n        uint256 _amount,\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce\\n    ) public onlyRelayer nonReentrant {\\n        uint256 initialGas = gasleft();\\n\\n        uint256 totalRequired = tx.gasprice * initialGas;\\n\\n        (\\n            bytes memory vaultId,\\n            ,\\n            ,\\n            bytes memory signedMessage\\n        ) = IMecenateVerifier(verifierContract).sismoVerify(\\n                sismoConnectResponse,\\n                _to,\\n                _nonce\\n            );\\n\\n        (address to, bytes32 nonce) = abi.decode(\\n            signedMessage,\\n            (address, bytes32)\\n        );\\n\\n        require(\\n            ethDeposits[keccak256(vaultId)] >= totalRequired,\\n            \\\"Not enough ETH for gas required\\\"\\n        );\\n\\n        require(to == _to, \\\"Not Same Address\\\");\\n\\n        require(nonce == _nonce, \\\"Not Same Nonce\\\");\\n\\n        // Check if the commitment exists\\n        // and the amount is greater than the deposit.\\n        require(\\n            tokenDeposits[keccak256(vaultId)][_token] >= _amount,\\n            \\\"Not enough token balance\\\"\\n        );\\n\\n        // Decrease the token balance for the commitment.\\n        tokenDeposits[keccak256(vaultId)][_token] -= _amount;\\n\\n        // Transfer the tokens to msg.sender or operator.\\n        IERC20(_token).transfer(to, _amount);\\n\\n        uint256 gasUsed = initialGas - gasleft();\\n\\n        uint256 gasCost = gasUsed * tx.gasprice;\\n\\n        uint256 relayerFee = (gasCost * relayerFeePercentage) / 10000;\\n\\n        require(\\n            ethDeposits[keccak256(vaultId)] >= gasCost + relayerFee,\\n            \\\"Not enough balance for gas used\\\"\\n        );\\n\\n        ethDeposits[keccak256(vaultId)] -= gasCost + relayerFee;\\n\\n        (bool result, ) = payable(msg.sender).call{value: gasCost + relayerFee}(\\n            \\\"\\\"\\n        );\\n\\n        require(result, \\\"ETH transfer failed with gas\\\");\\n    }\\n\\n    function getEthDeposit(\\n        bytes32 encryptedVaultId\\n    ) public view returns (uint256) {\\n        return ethDeposits[encryptedVaultId];\\n    }\\n\\n    receive() external payable {\\n        revert(\\\"Use depositETH function\\\");\\n    }\\n\\n    fallback() external payable {\\n        require(msg.data.length > 0, \\\"Data required for Sismo verification.\\\");\\n        bytes32 encryptedVaultId = abi.decode(msg.data, (bytes32));\\n        ethDeposits[encryptedVaultId] += msg.value;\\n    }\\n\\n    function getTokenDeposit(\\n        address _token,\\n        bytes32 encryptedVaultId\\n    ) public view returns (uint256) {\\n        return tokenDeposits[encryptedVaultId][_token];\\n    }\\n\\n    function execute(\\n        address _target,\\n        bytes calldata _data,\\n        uint256 _value,\\n        bytes32 _encryptedVaultId\\n    ) external onlyRelayer nonReentrant returns (bool) {\\n        uint256 availableBalance = ethDeposits[_encryptedVaultId];\\n\\n        uint256 ethBalanceB4 = address(this).balance;\\n        uint256 daiBalanceB4 = IERC20(DAI).balanceOf(address(this));\\n        uint256 museBalanceB4 = IERC20(MUSE).balanceOf(address(this));\\n\\n        uint256 totalRequired = _value + (tx.gasprice * gasleft());\\n\\n        require(availableBalance >= totalRequired, \\\"Insufficient ETH balance\\\");\\n\\n        bool success; // variabile per verificare il successo delle transazioni\\n        bytes memory retData; // dati di ritorno dalle transazioni\\n\\n        if (_data.length == 0) {\\n            (success, ) = payable(_target).call{value: _value}(\\\"\\\");\\n        } else {\\n            if (_value == 0) {\\n                (success, retData) = _target.call(_data);\\n            } else {\\n                (success, retData) = _target.call{value: _value}(_data);\\n            }\\n        }\\n\\n        require(success, \\\"Transaction failed\\\");\\n\\n        uint256 gasUsed = totalRequired - _value - (tx.gasprice * gasleft());\\n\\n        uint256 relayerFee = (gasUsed * relayerFeePercentage) / 10000;\\n\\n        require(\\n            availableBalance >= gasUsed + relayerFee,\\n            \\\"Insufficient balance for gas and fee\\\"\\n        );\\n\\n        uint256 daiBalance = IERC20(DAI).balanceOf(address(this));\\n        uint256 museBalance = IERC20(MUSE).balanceOf(address(this));\\n\\n        uint256 diffDai;\\n        uint256 diffMuse;\\n\\n        if (_value > 0) {\\n            ethDeposits[_encryptedVaultId] -= _value;\\n        }\\n\\n        ethDeposits[_encryptedVaultId] = gasUsed - relayerFee;\\n\\n        (success, ) = payable(msg.sender).call{value: gasUsed + relayerFee}(\\\"\\\");\\n\\n        require(success, \\\"ETH transfer failed\\\");\\n\\n        if (daiBalanceB4 > daiBalance) {\\n            diffDai = daiBalanceB4 - daiBalance;\\n\\n            if (diffDai > 0 && daiBalanceB4 != 0) {\\n                tokenDeposits[_encryptedVaultId][DAI] -= diffDai;\\n            }\\n        }\\n\\n        if (museBalanceB4 > museBalance) {\\n            diffMuse = museBalanceB4 - museBalance;\\n\\n            if (diffMuse > 0 && museBalanceB4 != 0) {\\n                tokenDeposits[_encryptedVaultId][MUSE] -= diffMuse;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    function setRelayer(address _relayer) external onlyOwner {\\n        relayer = _relayer;\\n    }\\n\\n    function setVerifierContract(address _verifierContract) external onlyOwner {\\n        verifierContract = _verifierContract;\\n    }\\n\\n    function setFactoryContract(address _factoryContract) external onlyOwner {\\n        factoryContract = _factoryContract;\\n    }\\n\\n    function setMecenateBay(address _mecenateBay) external onlyOwner {\\n        mecenateBay = _mecenateBay;\\n    }\\n\\n    function setMecenateUsers(address _mecenateUsers) external onlyOwner {\\n        mecenateUsers = _mecenateUsers;\\n    }\\n}\\n\",\"keccak256\":\"0xc366ff2abbc899da8ab42b6c6dffeaf0087521a55c144610cdd8f798b57819e0\",\"license\":\"MIT\"},\"contracts/interfaces/IMecenateFeedFactory.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\ninterface IMecenateFeedFactory {\\n    function owner() external view returns (address payable);\\n\\n    function treasuryContract() external view returns (address payable);\\n\\n    function identityContract() external view returns (address);\\n\\n    function feeds() external view returns (address[] memory);\\n\\n    function contractCounter() external view returns (uint256);\\n\\n    function isFeed(address _feed) external view returns (bool);\\n\\n    function museToken() external view returns (address);\\n\\n    function wethToken() external view returns (address);\\n\\n    function daiToken() external view returns (address);\\n\\n    function router() external view returns (address);\\n\\n    function getRouterFee(uint8 tokenId) external view returns (uint24);\\n\\n    function burnEnabled() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xdd450940a0ca82107600cd8046bb8d0d20964660b42ba84fb0e26c4c0585a1ac\"},\"contracts/interfaces/IMecenateVerifier.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateVerifier {\\r\\n    function sismoVerify(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) external view returns (bytes memory, uint256, uint256, bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x46733b039d06e66a1f438c4fcc490eea06ed1ba2ddff7d5a0059d9e799f03d8d\"}},\"version\":1}",
  "bytecode": "0x6080346200012057601f62001f8138819003918201601f19168301916001600160401b03831184841017620001255780849260a09460405283398101031262000120576200004d816200013b565b906200005c602082016200013b565b6200006a604083016200013b565b926200008760806200007f606086016200013b565b94016200013b565b906000549360018060a01b03199433868216176000556040519660018060a01b0380968180968195823391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a36001805560c8600d5516896008541617600855168760095416176009551685600a541617600a551683600b541617600b551690600c541617600c55611e309081620001518239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620001205756fe604060808152600480361015610083575b361561004157506020361261003c576000356000526002602052600020610038348254611990565b9055005b600080fd5b6020606492519162461bcd60e51b8352820152601760248201527f557365206465706f7369744554482066756e6374696f6e0000000000000000006044820152fd5b6000803560e01c806310d5700e146115d55780631378f5d914611269578063139e3c541461124057806317d026e6146111be578063204919151461119557806324ebc145146111555780632fe4f4c1146111155780633f16a3bb146110ec5780635262712f146110c3578063537820bf146110435780635e0cd92f146110015780636548e9bc14610fc15780636961b36114610fa45780636ff6158514610dd7578063715018a614610d7d57806384abac9514610c2457806385e66df414610c0557806389a3027114610bdc5780638da5cb5b14610bb45780639926ad87146106a2578063a25da83c14610662578063ad5c464814610639578063bda7193a1461038c578063cf69568814610363578063d424134114610320578063d68d9d4e146102eb578063de11c94a146102c2578063e0bab4c4146102955763f2fde38b146101ce5750610010565b919034610291576020366003190112610291576101e96118f6565b906101f2611938565b6001600160a01b0391821692831561023f57505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b5082346102be57816003193601126102be5760055490516001600160a01b039091168152602090f35b5080fd5b5082346102be57816003193601126102be5760095490516001600160a01b039091168152602090f35b5091906020366003190112610291576103026119b3565b35825260026020528120610317348254611990565b90556001805580f35b50346103605760203660031901126103605761033a6118f6565b610342611938565b60018060a01b03166001600160601b0360a01b600954161760095580f35b80fd5b5082346102be57816003193601126102be5760085490516001600160a01b039091168152602090f35b5091346102915760a03660031901126102915767ffffffffffffffff9082358281116106355736602382011215610635576103d0903690602481870135910161188b565b926103d9611922565b92604435908111610631576103f190369083016118c2565b506103fa61190c565b600c546001600160a01b039391906104159085163314611b3b565b61041d6119b3565b815193808760209661044b88828161043e8183019687815193849201611b75565b8101038084520182611837565b5190209616918261051c5786895260028652838920549485156104d95750888086819482948b845260028b5283898120551682f1156104cf576104c17fa5ecd7cf58f2f1e36e387c6442f5dea0a47926654ed49e6d1d9eb06d0406424495965b6060845196879687528601526060850190611c28565b918301520390a26001805580f35b81513d88823e3d90fd5b845162461bcd60e51b8152908101879052601e60248201527f4e6f20455448206465706f73697420666f7220746869732073656372657400006044820152606490fd5b9050858852600385528288208289528552828820549384156105f05786895260038652838920838a528652838920899055835163a9059cbb60e01b81526001600160a01b039092169082019081526020810185905285908290819060400103818b865af180156105e657966104c1917fa5ecd7cf58f2f1e36e387c6442f5dea0a47926654ed49e6d1d9eb06d0406424497986105b9575b506104ab565b6105d890873d89116105df575b6105d08183611837565b810190611b23565b50386105b3565b503d6105c6565b83513d8a823e3d90fd5b606490868086519262461bcd60e51b845283015260248201527f4e6f20546f6b656e206465706f73697420666f722074686973207365637265746044820152fd5b8580fd5b8480fd5b509190346102915782600319360112610291575490516001600160a01b03909116815260209150f35b50346103605760203660031901126103605761067c6118f6565b610684611938565b60018060a01b03166001600160601b0360a01b600854161760085580f35b509134610291576080366003190112610291576106bd6118f6565b9260249067ffffffffffffffff9082358281116102be57366023820112156102be57808601359283116102be5783810190848436920101116102be57604435966064359360018060a01b039261071884600c54163314611b3b565b6107206119b3565b85855260209860028a5288862054918560055416948a51948c868c816370a0823160e01b9a8b825230898301525afa958615610a1957908b95949392918a97610b79575b508d8d8a6007541690519d8e80928c825230898301525afa9b8c15610b6f578a9c610b32575b5061079f8f6107995a3a611d1c565b90611990565b92838610610aed57918f8b93908f859485938e928215600014610aa7575050508293165af16107cc611d3c565b505b15610a70576107e08d6107f092611d2f565b6107ea5a3a611d1c565b90611d2f565b90612710610800600d5484611d1c565b049261080c8484611990565b11610a2357838c88600554168d51968780928b825230878301525afa948515610a1957908d92918a966109e2575b508860075416978d519889938492835230908301525afa9485156109d857978b8b9c9d829b9c9a8a9861098e575b506108986108a9958b9586958e60028897878998610972575b5061088c8686611d2f565b93885252852055611990565b335af16108a3611d3c565b50611d6c565b80821161091e575b50508086116108c8575b8784600180555160018152f35b6108d29086611d2f565b948515159081610914575b506108e9575b806108bb565b6109089382526003875282822090600754168252865220918254611d2f565b905538808281806108e3565b90501515386108dd565b6109289082611d2f565b908115159081610968575b5061093f575b806108b1565b85845260038952848420836005541685528952610960858520918254611d2f565b905538610939565b9050151538610933565b848952828252610986848a20918254611d2f565b905538610881565b93949596975097989950905081813d83116109d1575b6109ae8183611837565b810103126109cd57518a97969590949392919089908d90610898610868565b8780fd5b503d6109a4565b8a513d89823e3d90fd5b838193949297503d8311610a12575b6109fb8183611837565b81010312610a0e57908c9151943861083a565b8880fd5b503d6109f1565b8c513d8b823e3d90fd5b608490848d8d519262461bcd60e51b8452830152808201527f496e73756666696369656e742062616c616e636520666f722067617320616e646044820152632066656560e01b6064820152fd5b8a5162461bcd60e51b81528083018d905260128186015271151c985b9cd858dd1a5bdb8819985a5b195960721b6044820152606490fd5b9092508382959415600014610ad45750519384928337810182815203925af1610ace611d3c565b506107ce565b9350519384928337810185815203925af1610ace611d3c565b50508b5162461bcd60e51b81528084018e90526018818701527f496e73756666696369656e74204554482062616c616e63650000000000000000604482015260649150fd5b9e9d8f819e9d50813d8311610b68575b610b4c8183611837565b81010312610b64579d519c9d9b9c9a9b61079f61078a565b8980fd5b503d610b42565b8d513d8c823e3d90fd5b8e80929850819394959697503d8311610bad575b610b978183611837565b81010312610a0e57908a94939291519538610764565b503d610b8d565b5082346102be57816003193601126102be57905490516001600160a01b039091168152602090f35b5082346102be57816003193601126102be5760065490516001600160a01b039091168152602090f35b5082346102be57816003193601126102be57602090600d549051908152f35b5082346102be5760603660031901126102be57610c3f6118f6565b60243591906001600160a01b0390811690610c8c90610c5f831515611a09565b610c6a851515611a55565b808754168314908115610d6f575b8115610d61575b8115610d53575b50611aa0565b81516323b872dd60e01b815233868201523060248201526044810184905260209590868160648189875af1908115610d49578691610d2c575b5015610cf15750610cec929394604435865260038152828620918652528320918254611990565b905580f35b825162461bcd60e51b81529081018690526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b6044820152606490fd5b610d439150873d89116105df576105d08183611837565b87610cc5565b84513d88823e3d90fd5b905060075416821487610c86565b600654811684149150610c7f565b600554811684149150610c78565b5034610360578060031936011261036057610d96611938565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5082346102be5760803660031901126102be57610df26118f6565b9060243593610dff6118e0565b6001600160a01b0393841691610e16831515611a09565b610e21871515611a55565b8481541683148015610f97575b8015610f8a575b8015610f7d575b610e4590611aa0565b6064358652602094600386528487208488528652610e6888868920541015611ae2565b8060095416855191633963f74160e21b835287836024818489169586898301525afa928315610f73578993610f54575b508215610f46575b505015610f1657835163095ea7b360e01b81526001600160a01b0390921690820190815260208101879052909291849184919082908890829060400103925af1908115610f0d5750610ef0578280f35b81610f0692903d106105df576105d08183611837565b5081808280f35b513d85823e3d90fd5b835162461bcd60e51b8152908101859052600a602482015269139bdd0818481999595960b21b6044820152606490fd5b600a54161490508880610ea0565b610f6c919350883d8a116105df576105d08183611837565b918a610e98565b87513d8b823e3d90fd5b5060075485168314610e3c565b5084600654168314610e35565b5084600554168314610e2e565b5082346102be57816003193601126102be57602090516101f48152f35b503461036057602036600319011261036057610fdb6118f6565b610fe3611938565b60018060a01b03166001600160601b0360a01b600c541617600c5580f35b5082346102be57806003193601126102be578060209261101f6118f6565b6024358252600385528282206001600160a01b039091168252845220549051908152f35b5090346102be5760803660031901126102be5761105e6118f6565b90611067611922565b906110706118e0565b9061107961190c565b91611082611938565b60018060a01b0380948193826001600160601b0360a01b98168882541617905516856005541617600555168360065416176006551690600754161760075580f35b5082346102be57816003193601126102be5760075490516001600160a01b039091168152602090f35b5082346102be57816003193601126102be57600a5490516001600160a01b039091168152602090f35b50346103605760203660031901126103605761112f6118f6565b611137611938565b60018060a01b03166001600160601b0360a01b600b541617600b5580f35b50346103605760203660031901126103605761116f6118f6565b611177611938565b60018060a01b03166001600160601b0360a01b600a541617600a5580f35b509190346102915760203660031901126102915760209282913581526002845220549051908152f35b50919034610291576020366003190112610291578035916111dd611938565b6101f483116111ee575050600d5580f35b906020608492519162461bcd60e51b8352820152602660248201527f4e65772072656c61796572206665652070657263656e7461676520697320746f6044820152650de40d0d2ced60d31b6064820152fd5b5082346102be57816003193601126102be57600b5490516001600160a01b039091168152602090f35b5091346102915760a0366003190112610291576112846118f6565b906024359060443567ffffffffffffffff8111610631576112a890369086016118c2565b916112b161190c565b906084359460018060a01b036112cc81600c54163314611b3b565b6112d46119b3565b865a948a816112e3883a611d1c565b998560085416908d6113088c519e8f9586948594637276069d60e01b86528501611c4d565b03915afa9788156115cb578b80998190611585575b8a9b50928a94928a8795936113439b9a99989460209c818e808094518301019101611c79565b961698519f019e8f20815260028c52205410611542579061136b846113719493168614611ca0565b14611cdf565b875189208b5260038652868b20921691828b52855282868b2054106114ff579184916113ef9388518a208c5260038452878c20828d528452878c206113b7848254611d2f565b9055875163a9059cbb60e01b81526001600160a01b03909116818c01908152602081019390935293849283918d918391604090910190565b03925af180156114f5579061141692916114d8575b506114113a915a90611d2f565b611d1c565b93612710611426600d5487611d1c565b049584518220885260028352838820546114408888611990565b11611495578761148e8180808061147d8d8d8d6114768e60028f8f6114658888611990565b955190208952528620918254611d2f565b9055611990565b335af1611488611d3c565b50611dae565b6001805580f35b835162461bcd60e51b8152908101839052601f60248201527f4e6f7420656e6f7567682062616c616e636520666f72206761732075736564006044820152606490fd5b6114ee90843d86116105df576105d08183611837565b5038611404565b84513d8a823e3d90fd5b855162461bcd60e51b8152808a01869052601860248201527f4e6f7420656e6f75676820746f6b656e2062616c616e636500000000000000006044820152606490fd5b895162461bcd60e51b8152808e018a9052601f60248201527f4e6f7420656e6f7567682045544820666f7220676173207265717569726564006044820152606490fd5b509850918361134397969594926115af8a9c8c3d8091833e6115a78183611837565b810190611bda565b97929150509c8d9c8d97939650939798999a505092945061131d565b87513d8d823e3d90fd5b509190346102915760803660031901126102915780359060243567ffffffffffffffff81116106355761160b90369083016118c2565b916116146118e0565b916064359361166160018060a01b039561163387600c54163314611b3b565b61163b6119b3565b88815a94888a60085416918c5196879485938493637276069d60e01b85528c8501611c4d565b03915afa96871561182d5789928a98611805575b50908161136b61169e9361169360209b8c8082518301019101611c79565b931699168914611ca0565b8581519101206116cc6116ba6116b4843a611d1c565b86611d2f565b828a5260028852888a20541015611ae2565b8088526002865286882054156117c25790611724916116ec851515611a55565b8089526002875261170285898b20541015611ae2565b885260028652868820611716858254611d2f565b90556114113a915a90611d2f565b93612710611734600d5487611d1c565b04956117408787611990565b8410611781575050508461147d858561177c84808080809b9a61177161148e9e61176c849e859e611d2f565b611d2f565b905af16108a3611d3c565b611990565b5162461bcd60e51b815291820152601a60248201527f4e6f7420656e6f7567682062616c616e636520666f7220676173000000000000604482015260649150fd5b865162461bcd60e51b8152808401879052601960248201527f436f6d6d69746d656e7420646f6573206e6f74206578697374000000000000006044820152606490fd5b61182091985061169e9293503d808c833e6115a78183611837565b9992949391506116759050565b88513d8b823e3d90fd5b90601f8019910116810190811067ffffffffffffffff82111761185957604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161185957601f01601f191660200190565b9291926118978261186f565b916118a56040519384611837565b82948184528183011161003c578281602093846000960137010152565b9080601f8301121561003c578160206118dd9335910161188b565b90565b604435906001600160a01b038216820361003c57565b600435906001600160a01b038216820361003c57565b606435906001600160a01b038216820361003c57565b602435906001600160a01b038216820361003c57565b6000546001600160a01b0316330361194c57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b9190820180921161199d57565b634e487b7160e01b600052601160045260246000fd5b6002600154146119c4576002600155565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b15611a1057565b60405162461bcd60e51b815260206004820152601960248201527f546f6b656e20616464726573732063616e6e6f742062652030000000000000006044820152606490fd5b15611a5c57565b606460405162461bcd60e51b815260206004820152602060248201527f416d6f756e74206d7573742062652067726561746572207468616e207a65726f6044820152fd5b15611aa757565b60405162461bcd60e51b8152602060048201526013602482015272151bdad95b881b9bdd081cdd5c1c1bdc9d1959606a1b6044820152606490fd5b15611ae957565b60405162461bcd60e51b81526020600482015260126024820152714e6f7420656e6f7567682062616c616e636560701b6044820152606490fd5b9081602091031261003c5751801515810361003c5790565b15611b4257565b60405162461bcd60e51b815260206004820152600b60248201526a2737ba103932b630bcb2b960a91b6044820152606490fd5b60005b838110611b885750506000910152565b8181015183820152602001611b78565b81601f8201121561003c578051611bae8161186f565b92611bbc6040519485611837565b8184526020828401011161003c576118dd9160208085019101611b75565b9160808383031261003c5782519067ffffffffffffffff9182811161003c5783611c05918601611b98565b93602081015193604082015193606083015190811161003c576118dd9201611b98565b90602091611c4181518092818552858086019101611b75565b601f01601f1916010190565b611c6560409295949395606083526060830190611c28565b6001600160a01b0390951660208201520152565b919082604091031261003c5781516001600160a01b038116810361003c5760209092015190565b15611ca757565b60405162461bcd60e51b815260206004820152601060248201526f4e6f742053616d65204164647265737360801b6044820152606490fd5b15611ce657565b60405162461bcd60e51b815260206004820152600e60248201526d4e6f742053616d65204e6f6e636560901b6044820152606490fd5b8181029291811591840414171561199d57565b9190820391821161199d57565b3d15611d67573d90611d4d8261186f565b91611d5b6040519384611837565b82523d6000602084013e565b606090565b15611d7357565b60405162461bcd60e51b8152602060048201526013602482015272115512081d1c985b9cd9995c8819985a5b1959606a1b6044820152606490fd5b15611db557565b60405162461bcd60e51b815260206004820152601c60248201527f455448207472616e73666572206661696c6564207769746820676173000000006044820152606490fdfea2646970667358221220141a5c029ad7dbdc44e230e3c5c2ee5d0f7af9b33646464e245c5c4a7e9a159564736f6c63430008130033",
  "deployedBytecode": "0x604060808152600480361015610083575b361561004157506020361261003c576000356000526002602052600020610038348254611990565b9055005b600080fd5b6020606492519162461bcd60e51b8352820152601760248201527f557365206465706f7369744554482066756e6374696f6e0000000000000000006044820152fd5b6000803560e01c806310d5700e146115d55780631378f5d914611269578063139e3c541461124057806317d026e6146111be578063204919151461119557806324ebc145146111555780632fe4f4c1146111155780633f16a3bb146110ec5780635262712f146110c3578063537820bf146110435780635e0cd92f146110015780636548e9bc14610fc15780636961b36114610fa45780636ff6158514610dd7578063715018a614610d7d57806384abac9514610c2457806385e66df414610c0557806389a3027114610bdc5780638da5cb5b14610bb45780639926ad87146106a2578063a25da83c14610662578063ad5c464814610639578063bda7193a1461038c578063cf69568814610363578063d424134114610320578063d68d9d4e146102eb578063de11c94a146102c2578063e0bab4c4146102955763f2fde38b146101ce5750610010565b919034610291576020366003190112610291576101e96118f6565b906101f2611938565b6001600160a01b0391821692831561023f57505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b5082346102be57816003193601126102be5760055490516001600160a01b039091168152602090f35b5080fd5b5082346102be57816003193601126102be5760095490516001600160a01b039091168152602090f35b5091906020366003190112610291576103026119b3565b35825260026020528120610317348254611990565b90556001805580f35b50346103605760203660031901126103605761033a6118f6565b610342611938565b60018060a01b03166001600160601b0360a01b600954161760095580f35b80fd5b5082346102be57816003193601126102be5760085490516001600160a01b039091168152602090f35b5091346102915760a03660031901126102915767ffffffffffffffff9082358281116106355736602382011215610635576103d0903690602481870135910161188b565b926103d9611922565b92604435908111610631576103f190369083016118c2565b506103fa61190c565b600c546001600160a01b039391906104159085163314611b3b565b61041d6119b3565b815193808760209661044b88828161043e8183019687815193849201611b75565b8101038084520182611837565b5190209616918261051c5786895260028652838920549485156104d95750888086819482948b845260028b5283898120551682f1156104cf576104c17fa5ecd7cf58f2f1e36e387c6442f5dea0a47926654ed49e6d1d9eb06d0406424495965b6060845196879687528601526060850190611c28565b918301520390a26001805580f35b81513d88823e3d90fd5b845162461bcd60e51b8152908101879052601e60248201527f4e6f20455448206465706f73697420666f7220746869732073656372657400006044820152606490fd5b9050858852600385528288208289528552828820549384156105f05786895260038652838920838a528652838920899055835163a9059cbb60e01b81526001600160a01b039092169082019081526020810185905285908290819060400103818b865af180156105e657966104c1917fa5ecd7cf58f2f1e36e387c6442f5dea0a47926654ed49e6d1d9eb06d0406424497986105b9575b506104ab565b6105d890873d89116105df575b6105d08183611837565b810190611b23565b50386105b3565b503d6105c6565b83513d8a823e3d90fd5b606490868086519262461bcd60e51b845283015260248201527f4e6f20546f6b656e206465706f73697420666f722074686973207365637265746044820152fd5b8580fd5b8480fd5b509190346102915782600319360112610291575490516001600160a01b03909116815260209150f35b50346103605760203660031901126103605761067c6118f6565b610684611938565b60018060a01b03166001600160601b0360a01b600854161760085580f35b509134610291576080366003190112610291576106bd6118f6565b9260249067ffffffffffffffff9082358281116102be57366023820112156102be57808601359283116102be5783810190848436920101116102be57604435966064359360018060a01b039261071884600c54163314611b3b565b6107206119b3565b85855260209860028a5288862054918560055416948a51948c868c816370a0823160e01b9a8b825230898301525afa958615610a1957908b95949392918a97610b79575b508d8d8a6007541690519d8e80928c825230898301525afa9b8c15610b6f578a9c610b32575b5061079f8f6107995a3a611d1c565b90611990565b92838610610aed57918f8b93908f859485938e928215600014610aa7575050508293165af16107cc611d3c565b505b15610a70576107e08d6107f092611d2f565b6107ea5a3a611d1c565b90611d2f565b90612710610800600d5484611d1c565b049261080c8484611990565b11610a2357838c88600554168d51968780928b825230878301525afa948515610a1957908d92918a966109e2575b508860075416978d519889938492835230908301525afa9485156109d857978b8b9c9d829b9c9a8a9861098e575b506108986108a9958b9586958e60028897878998610972575b5061088c8686611d2f565b93885252852055611990565b335af16108a3611d3c565b50611d6c565b80821161091e575b50508086116108c8575b8784600180555160018152f35b6108d29086611d2f565b948515159081610914575b506108e9575b806108bb565b6109089382526003875282822090600754168252865220918254611d2f565b905538808281806108e3565b90501515386108dd565b6109289082611d2f565b908115159081610968575b5061093f575b806108b1565b85845260038952848420836005541685528952610960858520918254611d2f565b905538610939565b9050151538610933565b848952828252610986848a20918254611d2f565b905538610881565b93949596975097989950905081813d83116109d1575b6109ae8183611837565b810103126109cd57518a97969590949392919089908d90610898610868565b8780fd5b503d6109a4565b8a513d89823e3d90fd5b838193949297503d8311610a12575b6109fb8183611837565b81010312610a0e57908c9151943861083a565b8880fd5b503d6109f1565b8c513d8b823e3d90fd5b608490848d8d519262461bcd60e51b8452830152808201527f496e73756666696369656e742062616c616e636520666f722067617320616e646044820152632066656560e01b6064820152fd5b8a5162461bcd60e51b81528083018d905260128186015271151c985b9cd858dd1a5bdb8819985a5b195960721b6044820152606490fd5b9092508382959415600014610ad45750519384928337810182815203925af1610ace611d3c565b506107ce565b9350519384928337810185815203925af1610ace611d3c565b50508b5162461bcd60e51b81528084018e90526018818701527f496e73756666696369656e74204554482062616c616e63650000000000000000604482015260649150fd5b9e9d8f819e9d50813d8311610b68575b610b4c8183611837565b81010312610b64579d519c9d9b9c9a9b61079f61078a565b8980fd5b503d610b42565b8d513d8c823e3d90fd5b8e80929850819394959697503d8311610bad575b610b978183611837565b81010312610a0e57908a94939291519538610764565b503d610b8d565b5082346102be57816003193601126102be57905490516001600160a01b039091168152602090f35b5082346102be57816003193601126102be5760065490516001600160a01b039091168152602090f35b5082346102be57816003193601126102be57602090600d549051908152f35b5082346102be5760603660031901126102be57610c3f6118f6565b60243591906001600160a01b0390811690610c8c90610c5f831515611a09565b610c6a851515611a55565b808754168314908115610d6f575b8115610d61575b8115610d53575b50611aa0565b81516323b872dd60e01b815233868201523060248201526044810184905260209590868160648189875af1908115610d49578691610d2c575b5015610cf15750610cec929394604435865260038152828620918652528320918254611990565b905580f35b825162461bcd60e51b81529081018690526015602482015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b6044820152606490fd5b610d439150873d89116105df576105d08183611837565b87610cc5565b84513d88823e3d90fd5b905060075416821487610c86565b600654811684149150610c7f565b600554811684149150610c78565b5034610360578060031936011261036057610d96611938565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5082346102be5760803660031901126102be57610df26118f6565b9060243593610dff6118e0565b6001600160a01b0393841691610e16831515611a09565b610e21871515611a55565b8481541683148015610f97575b8015610f8a575b8015610f7d575b610e4590611aa0565b6064358652602094600386528487208488528652610e6888868920541015611ae2565b8060095416855191633963f74160e21b835287836024818489169586898301525afa928315610f73578993610f54575b508215610f46575b505015610f1657835163095ea7b360e01b81526001600160a01b0390921690820190815260208101879052909291849184919082908890829060400103925af1908115610f0d5750610ef0578280f35b81610f0692903d106105df576105d08183611837565b5081808280f35b513d85823e3d90fd5b835162461bcd60e51b8152908101859052600a602482015269139bdd0818481999595960b21b6044820152606490fd5b600a54161490508880610ea0565b610f6c919350883d8a116105df576105d08183611837565b918a610e98565b87513d8b823e3d90fd5b5060075485168314610e3c565b5084600654168314610e35565b5084600554168314610e2e565b5082346102be57816003193601126102be57602090516101f48152f35b503461036057602036600319011261036057610fdb6118f6565b610fe3611938565b60018060a01b03166001600160601b0360a01b600c541617600c5580f35b5082346102be57806003193601126102be578060209261101f6118f6565b6024358252600385528282206001600160a01b039091168252845220549051908152f35b5090346102be5760803660031901126102be5761105e6118f6565b90611067611922565b906110706118e0565b9061107961190c565b91611082611938565b60018060a01b0380948193826001600160601b0360a01b98168882541617905516856005541617600555168360065416176006551690600754161760075580f35b5082346102be57816003193601126102be5760075490516001600160a01b039091168152602090f35b5082346102be57816003193601126102be57600a5490516001600160a01b039091168152602090f35b50346103605760203660031901126103605761112f6118f6565b611137611938565b60018060a01b03166001600160601b0360a01b600b541617600b5580f35b50346103605760203660031901126103605761116f6118f6565b611177611938565b60018060a01b03166001600160601b0360a01b600a541617600a5580f35b509190346102915760203660031901126102915760209282913581526002845220549051908152f35b50919034610291576020366003190112610291578035916111dd611938565b6101f483116111ee575050600d5580f35b906020608492519162461bcd60e51b8352820152602660248201527f4e65772072656c61796572206665652070657263656e7461676520697320746f6044820152650de40d0d2ced60d31b6064820152fd5b5082346102be57816003193601126102be57600b5490516001600160a01b039091168152602090f35b5091346102915760a0366003190112610291576112846118f6565b906024359060443567ffffffffffffffff8111610631576112a890369086016118c2565b916112b161190c565b906084359460018060a01b036112cc81600c54163314611b3b565b6112d46119b3565b865a948a816112e3883a611d1c565b998560085416908d6113088c519e8f9586948594637276069d60e01b86528501611c4d565b03915afa9788156115cb578b80998190611585575b8a9b50928a94928a8795936113439b9a99989460209c818e808094518301019101611c79565b961698519f019e8f20815260028c52205410611542579061136b846113719493168614611ca0565b14611cdf565b875189208b5260038652868b20921691828b52855282868b2054106114ff579184916113ef9388518a208c5260038452878c20828d528452878c206113b7848254611d2f565b9055875163a9059cbb60e01b81526001600160a01b03909116818c01908152602081019390935293849283918d918391604090910190565b03925af180156114f5579061141692916114d8575b506114113a915a90611d2f565b611d1c565b93612710611426600d5487611d1c565b049584518220885260028352838820546114408888611990565b11611495578761148e8180808061147d8d8d8d6114768e60028f8f6114658888611990565b955190208952528620918254611d2f565b9055611990565b335af1611488611d3c565b50611dae565b6001805580f35b835162461bcd60e51b8152908101839052601f60248201527f4e6f7420656e6f7567682062616c616e636520666f72206761732075736564006044820152606490fd5b6114ee90843d86116105df576105d08183611837565b5038611404565b84513d8a823e3d90fd5b855162461bcd60e51b8152808a01869052601860248201527f4e6f7420656e6f75676820746f6b656e2062616c616e636500000000000000006044820152606490fd5b895162461bcd60e51b8152808e018a9052601f60248201527f4e6f7420656e6f7567682045544820666f7220676173207265717569726564006044820152606490fd5b509850918361134397969594926115af8a9c8c3d8091833e6115a78183611837565b810190611bda565b97929150509c8d9c8d97939650939798999a505092945061131d565b87513d8d823e3d90fd5b509190346102915760803660031901126102915780359060243567ffffffffffffffff81116106355761160b90369083016118c2565b916116146118e0565b916064359361166160018060a01b039561163387600c54163314611b3b565b61163b6119b3565b88815a94888a60085416918c5196879485938493637276069d60e01b85528c8501611c4d565b03915afa96871561182d5789928a98611805575b50908161136b61169e9361169360209b8c8082518301019101611c79565b931699168914611ca0565b8581519101206116cc6116ba6116b4843a611d1c565b86611d2f565b828a5260028852888a20541015611ae2565b8088526002865286882054156117c25790611724916116ec851515611a55565b8089526002875261170285898b20541015611ae2565b885260028652868820611716858254611d2f565b90556114113a915a90611d2f565b93612710611734600d5487611d1c565b04956117408787611990565b8410611781575050508461147d858561177c84808080809b9a61177161148e9e61176c849e859e611d2f565b611d2f565b905af16108a3611d3c565b611990565b5162461bcd60e51b815291820152601a60248201527f4e6f7420656e6f7567682062616c616e636520666f7220676173000000000000604482015260649150fd5b865162461bcd60e51b8152808401879052601960248201527f436f6d6d69746d656e7420646f6573206e6f74206578697374000000000000006044820152606490fd5b61182091985061169e9293503d808c833e6115a78183611837565b9992949391506116759050565b88513d8b823e3d90fd5b90601f8019910116810190811067ffffffffffffffff82111761185957604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161185957601f01601f191660200190565b9291926118978261186f565b916118a56040519384611837565b82948184528183011161003c578281602093846000960137010152565b9080601f8301121561003c578160206118dd9335910161188b565b90565b604435906001600160a01b038216820361003c57565b600435906001600160a01b038216820361003c57565b606435906001600160a01b038216820361003c57565b602435906001600160a01b038216820361003c57565b6000546001600160a01b0316330361194c57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b9190820180921161199d57565b634e487b7160e01b600052601160045260246000fd5b6002600154146119c4576002600155565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b15611a1057565b60405162461bcd60e51b815260206004820152601960248201527f546f6b656e20616464726573732063616e6e6f742062652030000000000000006044820152606490fd5b15611a5c57565b606460405162461bcd60e51b815260206004820152602060248201527f416d6f756e74206d7573742062652067726561746572207468616e207a65726f6044820152fd5b15611aa757565b60405162461bcd60e51b8152602060048201526013602482015272151bdad95b881b9bdd081cdd5c1c1bdc9d1959606a1b6044820152606490fd5b15611ae957565b60405162461bcd60e51b81526020600482015260126024820152714e6f7420656e6f7567682062616c616e636560701b6044820152606490fd5b9081602091031261003c5751801515810361003c5790565b15611b4257565b60405162461bcd60e51b815260206004820152600b60248201526a2737ba103932b630bcb2b960a91b6044820152606490fd5b60005b838110611b885750506000910152565b8181015183820152602001611b78565b81601f8201121561003c578051611bae8161186f565b92611bbc6040519485611837565b8184526020828401011161003c576118dd9160208085019101611b75565b9160808383031261003c5782519067ffffffffffffffff9182811161003c5783611c05918601611b98565b93602081015193604082015193606083015190811161003c576118dd9201611b98565b90602091611c4181518092818552858086019101611b75565b601f01601f1916010190565b611c6560409295949395606083526060830190611c28565b6001600160a01b0390951660208201520152565b919082604091031261003c5781516001600160a01b038116810361003c5760209092015190565b15611ca757565b60405162461bcd60e51b815260206004820152601060248201526f4e6f742053616d65204164647265737360801b6044820152606490fd5b15611ce657565b60405162461bcd60e51b815260206004820152600e60248201526d4e6f742053616d65204e6f6e636560901b6044820152606490fd5b8181029291811591840414171561199d57565b9190820391821161199d57565b3d15611d67573d90611d4d8261186f565b91611d5b6040519384611837565b82523d6000602084013e565b606090565b15611d7357565b60405162461bcd60e51b8152602060048201526013602482015272115512081d1c985b9cd9995c8819985a5b1959606a1b6044820152606490fd5b15611db557565b60405162461bcd60e51b815260206004820152601c60248201527f455448207472616e73666572206661696c6564207769746820676173000000006044820152606490fdfea2646970667358221220141a5c029ad7dbdc44e230e3c5c2ee5d0f7af9b33646464e245c5c4a7e9a159564736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/MecenateVault.sol:MecenateVault",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/MecenateVault.sol:MecenateVault",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 629,
        "contract": "contracts/MecenateVault.sol:MecenateVault",
        "label": "ethDeposits",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 635,
        "contract": "contracts/MecenateVault.sol:MecenateVault",
        "label": "tokenDeposits",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 637,
        "contract": "contracts/MecenateVault.sol:MecenateVault",
        "label": "WETH",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 639,
        "contract": "contracts/MecenateVault.sol:MecenateVault",
        "label": "DAI",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 641,
        "contract": "contracts/MecenateVault.sol:MecenateVault",
        "label": "USDC",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 643,
        "contract": "contracts/MecenateVault.sol:MecenateVault",
        "label": "MUSE",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 645,
        "contract": "contracts/MecenateVault.sol:MecenateVault",
        "label": "verifierContract",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 647,
        "contract": "contracts/MecenateVault.sol:MecenateVault",
        "label": "factoryContract",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 649,
        "contract": "contracts/MecenateVault.sol:MecenateVault",
        "label": "mecenateBay",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 651,
        "contract": "contracts/MecenateVault.sol:MecenateVault",
        "label": "mecenateUsers",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 653,
        "contract": "contracts/MecenateVault.sol:MecenateVault",
        "label": "relayer",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 656,
        "contract": "contracts/MecenateVault.sol:MecenateVault",
        "label": "relayerFeePercentage",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}