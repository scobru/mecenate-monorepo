{
  "address": "0xf2E39EE7c49fBc40f84495197C7B9EdaB929D4a2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifierContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factoryContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bayContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usersContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_relayer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "relayerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "functionSignature",
          "type": "bytes"
        }
      ],
      "name": "MetaTransactionExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "commitment",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "secret",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "DAI",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_RELAYER_FEE_PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MUSE",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_feed",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "encryptedVaultId",
          "type": "bytes32"
        }
      ],
      "name": "approveTokenToFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newRelayerFeePercentage",
          "type": "uint256"
        }
      ],
      "name": "changeRelayerFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "encryptedVaultId",
          "type": "bytes32"
        }
      ],
      "name": "depositETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "encryptedVaultId",
          "type": "bytes32"
        }
      ],
      "name": "depositToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_encryptedVaultId",
          "type": "bytes32"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factoryContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "encryptedVaultId",
          "type": "bytes32"
        }
      ],
      "name": "getEthDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "encryptedVaultId",
          "type": "bytes32"
        }
      ],
      "name": "getTokenDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mecenateBay",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mecenateUsers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relayerFeePercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factoryContract",
          "type": "address"
        }
      ],
      "name": "setFactoryContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mecenateBay",
          "type": "address"
        }
      ],
      "name": "setMecenateBay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mecenateUsers",
          "type": "address"
        }
      ],
      "name": "setMecenateUsers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_relayer",
          "type": "address"
        }
      ],
      "name": "setRelayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_DAI",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_USDC",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_MUSE",
          "type": "address"
        }
      ],
      "name": "setTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifierContract",
          "type": "address"
        }
      ],
      "name": "setVerifierContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifierContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "sismoConnectResponse",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_nonce",
          "type": "bytes32"
        }
      ],
      "name": "withdrawETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "sismoConnectResponse",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_nonce",
          "type": "bytes32"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_secret",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "sismoConnectResponse",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_nonce",
          "type": "bytes32"
        }
      ],
      "name": "withdrawWithSecret",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xc4e4de91aaa9103b7b5f24f9ed8f16c463ae91c715171e2d37cec3855cf3e15a",
  "receipt": {
    "to": null,
    "from": "0x8aA5F726d9F868a21a8bd748E2f1E43bA31eb670",
    "contractAddress": "0xf2E39EE7c49fBc40f84495197C7B9EdaB929D4a2",
    "transactionIndex": 1,
    "gasUsed": "2258581",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000100000000000000000000004000000000000000000000000000000000000000000000001000000000000000000000000200000000000020000000000000000000800000000000000000000004000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000002000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x9a186e9027f406a755d4ba676a3050cecae3b1c6bc198023e7ae27796869539d",
    "transactionHash": "0xc4e4de91aaa9103b7b5f24f9ed8f16c463ae91c715171e2d37cec3855cf3e15a",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 10630662,
        "transactionHash": "0xc4e4de91aaa9103b7b5f24f9ed8f16c463ae91c715171e2d37cec3855cf3e15a",
        "address": "0xf2E39EE7c49fBc40f84495197C7B9EdaB929D4a2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008aa5f726d9f868a21a8bd748e2f1e43ba31eb670"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x9a186e9027f406a755d4ba676a3050cecae3b1c6bc198023e7ae27796869539d"
      }
    ],
    "blockNumber": 10630662,
    "cumulativeGasUsed": "2305434",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA3Aa50BC3980B5a05dAe85C2A11f657d0c52Fb2f",
    "0xDEC5913ee13023dB0b83e2A0fb70f5D18c5b6ad0",
    "0x0000000000000000000000000000000000000000",
    "0x2A6D216e3053344C0FEeAED5e6503289Ade2Dab0",
    "0x3db5E84e0eBBEa945a0a82E879DcB7E1D1a587B4"
  ],
  "numDeployments": 1,
  "solcInputHash": "a9ff469b4dc9c1829628556d6121bf42",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifierContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factoryContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bayContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usersContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"relayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"secret\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DAI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_RELAYER_FEE_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MUSE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feed\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"encryptedVaultId\",\"type\":\"bytes32\"}],\"name\":\"approveTokenToFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newRelayerFeePercentage\",\"type\":\"uint256\"}],\"name\":\"changeRelayerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"encryptedVaultId\",\"type\":\"bytes32\"}],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"encryptedVaultId\",\"type\":\"bytes32\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_encryptedVaultId\",\"type\":\"bytes32\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"encryptedVaultId\",\"type\":\"bytes32\"}],\"name\":\"getEthDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"encryptedVaultId\",\"type\":\"bytes32\"}],\"name\":\"getTokenDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mecenateBay\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mecenateUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relayerFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factoryContract\",\"type\":\"address\"}],\"name\":\"setFactoryContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mecenateBay\",\"type\":\"address\"}],\"name\":\"setMecenateBay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mecenateUsers\",\"type\":\"address\"}],\"name\":\"setMecenateUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"}],\"name\":\"setRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_DAI\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_USDC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_MUSE\",\"type\":\"address\"}],\"name\":\"setTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifierContract\",\"type\":\"address\"}],\"name\":\"setVerifierContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifierContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_secret\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"withdrawWithSecret\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MecenateVault.sol\":\"MecenateVault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/MecenateVault.sol\":{\"content\":\"/**\\n * @title MecenateVault\\n * @dev This contract allows users to deposit and withdraw ETH and ERC20 tokens, and pay ETH and ERC20 tokens to other addresses.\\n * It also keeps track of the deposited balances for each user using a commitment hash.\\n */\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./interfaces/IMecenateVerifier.sol\\\";\\nimport \\\"./interfaces/IMecenateFeedFactory.sol\\\";\\n\\ncontract MecenateVault is Ownable, ReentrancyGuard {\\n    using Address for address;\\n    using Address for address payable;\\n\\n    mapping(bytes32 => uint256) private ethDeposits;\\n    mapping(bytes32 => mapping(address => uint256)) private tokenDeposits;\\n\\n    address public WETH;\\n    address public DAI;\\n    address public USDC;\\n    address public MUSE;\\n    address public verifierContract;\\n    address public factoryContract;\\n    address public mecenateBay;\\n    address public mecenateUsers;\\n    address private relayer;\\n\\n    uint256 public relayerFeePercentage = 200;\\n    uint256 public constant MAX_RELAYER_FEE_PERCENTAGE = 500;\\n\\n    event MetaTransactionExecuted(\\n        address userAddress,\\n        address relayerAddress,\\n        bytes functionSignature\\n    );\\n\\n    event Withdrawn(\\n        bytes32 indexed commitment,\\n        uint256 amount,\\n        string secret,\\n        address token\\n    );\\n\\n    modifier onlyRelayer() {\\n        require(msg.sender == relayer, \\\"Not relayer\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _verifierContract,\\n        address _factoryContract,\\n        address _bayContract,\\n        address _usersContract,\\n        address _relayer\\n    ) {\\n        verifierContract = _verifierContract;\\n        factoryContract = _factoryContract;\\n        mecenateBay = _bayContract;\\n        mecenateUsers = _usersContract;\\n        relayer = _relayer;\\n    }\\n\\n    function setTokens(\\n        address _WETH,\\n        address _DAI,\\n        address _USDC,\\n        address _MUSE\\n    ) external onlyOwner {\\n        WETH = _WETH;\\n        DAI = _DAI;\\n        USDC = _USDC;\\n        MUSE = _MUSE;\\n    }\\n\\n    function changeRelayerFee(\\n        uint256 _newRelayerFeePercentage\\n    ) external onlyOwner {\\n        require(\\n            _newRelayerFeePercentage <= MAX_RELAYER_FEE_PERCENTAGE,\\n            \\\"New relayer fee percentage is too high\\\"\\n        );\\n        relayerFeePercentage = _newRelayerFeePercentage;\\n    }\\n\\n    function depositETH(bytes32 encryptedVaultId) public payable nonReentrant {\\n        // 1. Add the deposit to the correct deposit mapping\\n        ethDeposits[encryptedVaultId] += msg.value;\\n    }\\n\\n    function approveTokenToFeed(\\n        address _token,\\n        uint256 _amount,\\n        address _feed,\\n        bytes32 encryptedVaultId\\n    ) public {\\n        require(_token != address(0), \\\"Token address cannot be 0\\\");\\n        require(_amount > 0, \\\"Amount must be greater than zero\\\");\\n        require(\\n            _token == WETH || _token == DAI || _token == USDC || _token == MUSE,\\n            \\\"Token not supported\\\"\\n        );\\n        require(\\n            tokenDeposits[encryptedVaultId][_token] >= _amount,\\n            \\\"Not enough balance\\\"\\n        );\\n        require(\\n            IMecenateFeedFactory(factoryContract).isFeed(_feed),\\n            \\\"Not a feed\\\"\\n        );\\n\\n        // The user must first approve the token transfer\\n        // to this contract\\n        IERC20 token = IERC20(_token);\\n        // Approve the token to the feed\\n        token.approve(_feed, _amount);\\n    }\\n\\n    function depositToken(\\n        address _token,\\n        uint256 _amount,\\n        bytes32 encryptedVaultId\\n    ) external {\\n        require(_token != address(0), \\\"Token address cannot be 0\\\");\\n        require(_amount > 0, \\\"Amount must be greater than zero\\\");\\n\\n        require(\\n            _token == WETH || _token == DAI || _token == USDC || _token == MUSE,\\n            \\\"Token not supported\\\"\\n        );\\n\\n        // The user must first approve the token transfer\\n        // to this contract\\n        IERC20 token = IERC20(_token);\\n\\n        require(\\n            token.transferFrom(msg.sender, address(this), _amount),\\n            \\\"Token transfer failed\\\"\\n        );\\n\\n        // Add the deposited amount to the tokenDeposits mapping\\n        tokenDeposits[encryptedVaultId][_token] += _amount;\\n    }\\n\\n    function withdrawETH(\\n        uint256 _amount,\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce\\n    ) public onlyRelayer nonReentrant {\\n        uint256 initialGas = gasleft();\\n\\n        (\\n            bytes memory vaultId,\\n            ,\\n            ,\\n            bytes memory signedMessage\\n        ) = IMecenateVerifier(verifierContract).sismoVerify(\\n                sismoConnectResponse,\\n                _to,\\n                _nonce\\n            );\\n\\n        (address to, bytes32 nonce) = abi.decode(\\n            signedMessage,\\n            (address, bytes32)\\n        );\\n\\n        require(to == _to, \\\"Not Same Address\\\");\\n\\n        require(nonce == _nonce, \\\"Not Same Nonce\\\");\\n\\n        bytes32 encryptedVaultId = keccak256(vaultId);\\n\\n        uint256 totalRequired = _amount; // Initialize with _value\\n\\n        totalRequired -= tx.gasprice * initialGas; // Add maximum possible gas cost\\n\\n        require(\\n            ethDeposits[encryptedVaultId] >= totalRequired,\\n            \\\"Not enough balance\\\"\\n        );\\n\\n        // 1. Verify that the commitment exists and the amount is not zero\\n        require(ethDeposits[encryptedVaultId] > 0, \\\"Commitment does not exist\\\");\\n\\n        require(_amount > 0, \\\"Amount must be greater than zero\\\");\\n\\n        // 2. Verify that the commitment has enough balance to withdraw from\\n        require(ethDeposits[encryptedVaultId] >= _amount, \\\"Not enough balance\\\");\\n\\n        //decode signedMessage as address\\n        ethDeposits[encryptedVaultId] -= _amount;\\n\\n        uint256 gasUsed = initialGas - gasleft();\\n\\n        uint256 gasCost = gasUsed * tx.gasprice;\\n\\n        uint256 relayerFee = (gasCost * relayerFeePercentage) / 10000;\\n\\n        require(_amount >= gasCost + relayerFee, \\\"Not enough balance for gas\\\");\\n\\n        uint256 newAmount = _amount - gasCost - relayerFee;\\n\\n        (bool result, ) = payable(to).call{value: newAmount}(\\\"\\\");\\n        require(result, \\\"ETH transfer failed\\\");\\n\\n        (bool result2, ) = payable(msg.sender).call{\\n            value: gasCost + relayerFee\\n        }(\\\"\\\");\\n\\n        require(result2, \\\"ETH transfer failed with gas\\\");\\n    }\\n\\n    function withdrawWithSecret(\\n        string memory _secret,\\n        address _token,\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce\\n    ) public onlyRelayer nonReentrant {\\n        bytes32 commitment = keccak256(abi.encodePacked(_secret));\\n        uint256 amount;\\n\\n        if (_token == address(0)) {\\n            amount = ethDeposits[commitment];\\n            require(amount > 0, \\\"No ETH deposit for this secret\\\");\\n            ethDeposits[commitment] = 0;\\n            payable(_to).transfer(amount);\\n        } else {\\n            amount = tokenDeposits[commitment][_token];\\n            require(amount > 0, \\\"No Token deposit for this secret\\\");\\n            tokenDeposits[commitment][_token] = 0;\\n            IERC20(_token).transfer(_to, amount);\\n        }\\n\\n        emit Withdrawn(commitment, amount, _secret, _token);\\n    }\\n\\n    function withdrawToken(\\n        address _token,\\n        uint256 _amount,\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce\\n    ) public onlyRelayer nonReentrant {\\n        uint256 initialGas = gasleft();\\n\\n        uint256 totalRequired = tx.gasprice * initialGas;\\n\\n        (\\n            bytes memory vaultId,\\n            ,\\n            ,\\n            bytes memory signedMessage\\n        ) = IMecenateVerifier(verifierContract).sismoVerify(\\n                sismoConnectResponse,\\n                _to,\\n                _nonce\\n            );\\n\\n        (address to, bytes32 nonce) = abi.decode(\\n            signedMessage,\\n            (address, bytes32)\\n        );\\n\\n        require(\\n            ethDeposits[keccak256(vaultId)] >= totalRequired,\\n            \\\"Not enough ETH for gas required\\\"\\n        );\\n\\n        require(to == _to, \\\"Not Same Address\\\");\\n\\n        require(nonce == _nonce, \\\"Not Same Nonce\\\");\\n\\n        // Check if the commitment exists\\n        // and the amount is greater than the deposit.\\n        require(\\n            tokenDeposits[keccak256(vaultId)][_token] >= _amount,\\n            \\\"Not enough token balance\\\"\\n        );\\n\\n        // Decrease the token balance for the commitment.\\n        tokenDeposits[keccak256(vaultId)][_token] -= _amount;\\n\\n        // Transfer the tokens to msg.sender or operator.\\n        IERC20(_token).transfer(to, _amount);\\n\\n        uint256 gasUsed = initialGas - gasleft();\\n\\n        uint256 gasCost = gasUsed * tx.gasprice;\\n\\n        uint256 relayerFee = (gasCost * relayerFeePercentage) / 10000;\\n\\n        require(\\n            ethDeposits[keccak256(vaultId)] >= gasCost + relayerFee,\\n            \\\"Not enough balance for gas used\\\"\\n        );\\n\\n        ethDeposits[keccak256(vaultId)] -= gasCost + relayerFee;\\n\\n        (bool result, ) = payable(msg.sender).call{value: gasCost + relayerFee}(\\n            \\\"\\\"\\n        );\\n\\n        require(result, \\\"ETH transfer failed with gas\\\");\\n    }\\n\\n    function getEthDeposit(\\n        bytes32 encryptedVaultId\\n    ) public view returns (uint256) {\\n        return ethDeposits[encryptedVaultId];\\n    }\\n\\n    receive() external payable {\\n        revert(\\\"Use depositETH function\\\");\\n    }\\n\\n    fallback() external payable {\\n        require(msg.data.length > 0, \\\"Data required for Sismo verification.\\\");\\n        bytes32 encryptedVaultId = abi.decode(msg.data, (bytes32));\\n        ethDeposits[encryptedVaultId] += msg.value;\\n    }\\n\\n    function getTokenDeposit(\\n        address _token,\\n        bytes32 encryptedVaultId\\n    ) public view returns (uint256) {\\n        return tokenDeposits[encryptedVaultId][_token];\\n    }\\n\\n    function execute(\\n        address _target,\\n        bytes calldata _data,\\n        uint256 _value,\\n        bytes32 _encryptedVaultId\\n    ) external onlyRelayer nonReentrant returns (bool) {\\n        // Reduce storage reads by using a memory variable\\n        uint256 availableBalance = ethDeposits[_encryptedVaultId];\\n\\n        uint256 daiBalanceB4 = IERC20(DAI).balanceOf(address(this));\\n        uint256 museBalanceB4 = IERC20(MUSE).balanceOf(address(this));\\n\\n        // Estimate total required balance\\n        uint256 totalRequired = _value + (tx.gasprice * gasleft());\\n\\n        // Check if the vault has enough balance\\n        require(availableBalance >= totalRequired, \\\"Insufficient ETH balance\\\");\\n\\n        // Execute the call\\n        if (_data.length == 0) {\\n            payable(_target).sendValue(_value);\\n        } else {\\n            if (_value == 0) {\\n                _target.functionCall(_data);\\n            } else {\\n                _target.functionCallWithValue(_data, _value);\\n            }\\n        }\\n\\n        // Update available balance\\n        availableBalance -= _value;\\n\\n        // Calculate gas costs and relayer fee\\n        uint256 gasUsed = totalRequired - _value - (tx.gasprice * gasleft());\\n        uint256 relayerFee = (gasUsed * relayerFeePercentage) / 10000;\\n\\n        // Check again if the vault has enough balance to cover the gas and relayer fee\\n        require(\\n            availableBalance >= gasUsed + relayerFee,\\n            \\\"Insufficient balance for gas and fee\\\"\\n        );\\n\\n        // Update storage only once to reflect all changes\\n        ethDeposits[_encryptedVaultId] =\\n            availableBalance -\\n            gasUsed -\\n            relayerFee;\\n\\n        // Transfer fee to the relayer\\n        (bool result, ) = payable(msg.sender).call{value: gasUsed + relayerFee}(\\n            \\\"\\\"\\n        );\\n        require(result, \\\"ETH transfer failed\\\");\\n\\n        uint256 daiBalance = IERC20(DAI).balanceOf(address(this));\\n\\n        uint256 museBalance = IERC20(MUSE).balanceOf(address(this));\\n\\n        if (daiBalanceB4 != daiBalance) {\\n            uint256 diff = daiBalanceB4 - daiBalance;\\n            tokenDeposits[_encryptedVaultId][DAI] -= diff;\\n        } else if (museBalanceB4 != museBalance) {\\n            uint256 diff = museBalanceB4 - museBalance;\\n            tokenDeposits[_encryptedVaultId][MUSE] -= diff;\\n        }\\n\\n        return true;\\n    }\\n\\n    function setRelayer(address _relayer) external onlyOwner {\\n        relayer = _relayer;\\n    }\\n\\n    function setVerifierContract(address _verifierContract) external onlyOwner {\\n        verifierContract = _verifierContract;\\n    }\\n\\n    function setFactoryContract(address _factoryContract) external onlyOwner {\\n        factoryContract = _factoryContract;\\n    }\\n\\n    function setMecenateBay(address _mecenateBay) external onlyOwner {\\n        mecenateBay = _mecenateBay;\\n    }\\n\\n    function setMecenateUsers(address _mecenateUsers) external onlyOwner {\\n        mecenateUsers = _mecenateUsers;\\n    }\\n}\\n\",\"keccak256\":\"0x7298a624da1c9b8b7b67d078e7536dd4a9aa506d75a5bfdb0f0e17d4fc25b78b\",\"license\":\"MIT\"},\"contracts/interfaces/IMecenateFeedFactory.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateFeedFactory {\\r\\n    function owner() external view returns (address payable);\\r\\n\\r\\n    function treasuryContract() external view returns (address payable);\\r\\n\\r\\n    function identityContract() external view returns (address);\\r\\n\\r\\n    function feeds() external view returns (address[] memory);\\r\\n\\r\\n    function contractCounter() external view returns (uint256);\\r\\n\\r\\n    function isFeed(address _feed) external view returns (bool);\\r\\n\\r\\n    function museToken() external view returns (address);\\r\\n\\r\\n    function wethToken() external view returns (address);\\r\\n\\r\\n    function daiToken() external view returns (address);\\r\\n\\r\\n    function router() external view returns (address);\\r\\n\\r\\n    function getRouterFee(uint8 tokenId) external view returns (uint256);\\r\\n\\r\\n    function burnEnabled() external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x34f3a2c8cf73055546c1f92b163f179731c34a1814dbd7babc3b20841d8944ec\"},\"contracts/interfaces/IMecenateVerifier.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateVerifier {\\r\\n    function sismoVerify(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) external view returns (bytes memory, uint256, uint256, bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x46733b039d06e66a1f438c4fcc490eea06ed1ba2ddff7d5a0059d9e799f03d8d\"}},\"version\":1}",
  "bytecode": "0x6080346200012057601f6200266638819003918201601f19168301916001600160401b03831184841017620001255780849260a09460405283398101031262000120576200004d816200013b565b906200005c602082016200013b565b6200006a604083016200013b565b926200008760806200007f606086016200013b565b94016200013b565b906000549360018060a01b03199433868216176000556040519660018060a01b0380968180968195823391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a36001805560c8600d5516896008541617600855168760095416176009551685600a541617600a551683600b541617600b551690600c541617600c556125159081620001518239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620001205756fe60806040526004361015610084575b3615610040576020361261003b5760003560005260026020526040600020610037348254611f45565b9055005b600080fd5b606460405162461bcd60e51b815260206004820152601760248201527f557365206465706f7369744554482066756e6374696f6e0000000000000000006044820152fd5b60003560e01c806310d5700e14611af95780631378f5d914611762578063139e3c541461172e57806317d026e61461169a578063204919151461166e57806324ebc145146116095780632fe4f4c1146115a45780633f16a3bb146115705780635262712f1461153c578063537820bf146114985780635e0cd92f146114425780636548e9bc146113dd5780636961b361146113c05780636ff61585146111c8578063715018a61461114a57806384abac9514610fcf57806385e66df414610fb157806389a3027114610f7d5780638da5cb5b14610f495780639926ad8714610771578063a25da83c1461070c578063ad5c4648146106d8578063bda7193a146103fd578063cf695688146103c9578063d424134114610364578063d68d9d4e1461032d578063de11c94a146102f9578063e0bab4c4146102c55763f2fde38b0361000e573461003b57602060031936011261003b576101e1611e77565b6101e9611ee0565b73ffffffffffffffffffffffffffffffffffffffff80911690811561025b57600054827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b608460405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b3461003b57600060031936011261003b57602073ffffffffffffffffffffffffffffffffffffffff60055416604051908152f35b3461003b57600060031936011261003b57602073ffffffffffffffffffffffffffffffffffffffff60095416604051908152f35b602060031936011261003b57610341611f81565b6004356000526002602052604060002061035c348254611f45565b905560018055005b3461003b57602060031936011261003b5773ffffffffffffffffffffffffffffffffffffffff610392611e77565b61039a611ee0565b167fffffffffffffffffffffffff00000000000000000000000000000000000000006009541617600955600080f35b3461003b57600060031936011261003b57602073ffffffffffffffffffffffffffffffffffffffff60085416604051908152f35b3461003b5760a060031936011261003b5767ffffffffffffffff60043581811161003b573660238201121561003b57610440903690602481600401359101611dff565b610448611ebd565b9160443590811161003b57610461903690600401611e36565b5061046a611e9a565b73ffffffffffffffffffffffffffffffffffffffff9061048f82600c5416331461211a565b610497611f81565b6040519180602093848101906104c68682816104b98b87815193849201612165565b8101038084520182611d84565b5190209516908161059f57856000526002845260406000205492831561055b5760008085819482948b845260028a528360408120551682f11561054f576105407fa5ecd7cf58f2f1e36e387c6442f5dea0a47926654ed49e6d1d9eb06d04064244945b606060405195869586528501526060840190612218565b9060408301520390a260018055005b6040513d6000823e3d90fd5b6064856040519062461bcd60e51b82526004820152601e60248201527f4e6f20455448206465706f73697420666f7220746869732073656372657400006044820152fd5b506000858152600384526040808220838352855290205491949382156106955760008581526003855260408082208483528652808220829055517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff97909716600488015260248701849052949594849086906044908290865af190811561054f577fa5ecd7cf58f2f1e36e387c6442f5dea0a47926654ed49e6d1d9eb06d040642449561054092610668575b50610529565b61068790863d881161068e575b61067f8183611d84565b810190612102565b5087610662565b503d610675565b6064846040519062461bcd60e51b825280600483015260248201527f4e6f20546f6b656e206465706f73697420666f722074686973207365637265746044820152fd5b3461003b57600060031936011261003b57602073ffffffffffffffffffffffffffffffffffffffff60045416604051908152f35b3461003b57602060031936011261003b5773ffffffffffffffffffffffffffffffffffffffff61073a611e77565b610742611ee0565b167fffffffffffffffffffffffff00000000000000000000000000000000000000006008541617600855600080f35b3461003b57608060031936011261003b5761078a611e77565b67ffffffffffffffff6024351161003b5736602360243501121561003b5767ffffffffffffffff602435600401351161003b57366024803560040135813501011161003b576024906107f573ffffffffffffffffffffffffffffffffffffffff600c5416331461211a565b6107fd611f81565b6064356000526002602052604060002054602073ffffffffffffffffffffffffffffffffffffffff60055416604051948580927f70a082310000000000000000000000000000000000000000000000000000000082523060048301525afa90811561054f57600091610f14575b60249350602073ffffffffffffffffffffffffffffffffffffffff60075416604051958680927f70a082310000000000000000000000000000000000000000000000000000000082523060048301525afa93841561054f57600094610ee0575b506108e06108d85a3a61235d565b604435611f45565b92838210610e9c5760046024350135610cae576044354710610c6a5760008080809373ffffffffffffffffffffffffffffffffffffffff60443591165af161092661237d565b5015610c005761094a61094061095a925b60443590612370565b9360443590612370565b6109545a3a61235d565b90612370565b612710610969600d548361235d565b04906109758282611f45565b8410610b9757600080806109b1858561099d6109c298610998869960249d612370565b612370565b606435855260026020526040852055611f45565b335af16109bc61237d565b506123ad565b602073ffffffffffffffffffffffffffffffffffffffff60055416604051938480927f70a082310000000000000000000000000000000000000000000000000000000082523060048301525afa91821561054f57600092610b63575b5073ffffffffffffffffffffffffffffffffffffffff60075416926040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152602081602481885afa90811561054f57600091610b31575b50828414610ae2575050610a919250612370565b6064356000526003602052604060002073ffffffffffffffffffffffffffffffffffffffff60055416600052602052610ad06040600020918254612370565b90555b60018055602060405160018152f35b91509150808203610af6575b505050610ad3565b610aff91612370565b906064356000526003602052604060002090600052602052610b276040600020918254612370565b9055808080610aee565b90506020813d602011610b5b575b81610b4c60209383611d84565b8101031261003b575185610a7d565b3d9150610b3f565b9091506020813d602011610b8f575b81610b7f60209383611d84565b8101031261003b57519083610a1e565b3d9150610b72565b608460405162461bcd60e51b8152602060048201526024808201527f496e73756666696369656e742062616c616e636520666f722067617320616e6460448201527f20666565000000000000000000000000000000000000000000000000000000006064820152fd5b608460405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152fd5b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152fd5b90604435610d7957610ccb36602435600401356024803501611dff565b916040519182604081011067ffffffffffffffff604085011117610d4a57610d44836109409360008061095a98604061094a9901604052601e85527f416464726573733a206c6f772d6c6576656c2063616c6c206661696c65640000602086015260208151910182855af1610d3e61237d565b91612443565b50610937565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d8e36602435600401356024803501611dff565b916040519182606081011067ffffffffffffffff606085011117610d4a5760608301604052602983527f416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c60208401527f7565206661696c6564000000000000000000000000000000000000000000000060408401526044354710610e3257610d4461094a936109409360008088602061095a9a519101604435855af1610d3e61237d565b608460405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152fd5b606460405162461bcd60e51b815260206004820152601860248201527f496e73756666696369656e74204554482062616c616e636500000000000000006044820152fd5b9093506020813d602011610f0c575b81610efc60209383611d84565b8101031261003b575192846108ca565b3d9150610eef565b90506020833d602011610f41575b81610f2f60209383611d84565b8101031261003b57602492519061086a565b3d9150610f22565b3461003b57600060031936011261003b57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b3461003b57600060031936011261003b57602073ffffffffffffffffffffffffffffffffffffffff60065416604051908152f35b3461003b57600060031936011261003b576020600d54604051908152f35b3461003b57606060031936011261003b57610fe8611e77565b6024359061104173ffffffffffffffffffffffffffffffffffffffff80921691611013831515611fd6565b61101e841515612021565b8060045416831490811561113c575b811561112e575b8115611120575b5061206c565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015230602482015282604482015260209081816064816000875af190811561054f57600091611103575b50156110bf5760443560005260038152604060002091600052526100376040600020918254611f45565b6064906040519062461bcd60e51b82526004820152601560248201527f546f6b656e207472616e73666572206661696c656400000000000000000000006044820152fd5b61111a9150823d841161068e5761067f8183611d84565b84611095565b90506007541682148461103b565b600654811684149150611034565b60055481168414915061102d565b3461003b57600060031936011261003b57611163611ee0565b600073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461003b57608060031936011261003b576111e1611e77565b6024356111ec611e54565b73ffffffffffffffffffffffffffffffffffffffff80931690611210821515611fd6565b61121b831515612021565b8360045416821480156113b3575b80156113a6575b8015611399575b6112409061206c565b6064356000526020936003855260406000208360005285526112698460406000205410156120b7565b848160095416916024604051809481937fe58fdd04000000000000000000000000000000000000000000000000000000008352871660048301525afa90811561054f5760009161137c575b5015611338576040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91909116600482015260248101929092528290829060449082906000905af1801561054f5761132057005b8161133692903d1061068e5761067f8183611d84565b005b6064846040519062461bcd60e51b82526004820152600a60248201527f4e6f7420612066656564000000000000000000000000000000000000000000006044820152fd5b6113939150853d871161068e5761067f8183611d84565b856112b4565b5060075484168214611237565b5083600654168214611230565b5083600554168214611229565b3461003b57600060031936011261003b5760206040516101f48152f35b3461003b57602060031936011261003b5773ffffffffffffffffffffffffffffffffffffffff61140b611e77565b611413611ee0565b167fffffffffffffffffffffffff0000000000000000000000000000000000000000600c541617600c55600080f35b3461003b57604060031936011261003b5761145b611e77565b602435600052600360205273ffffffffffffffffffffffffffffffffffffffff604060002091166000526020526020604060002054604051908152f35b3461003b57608060031936011261003b576114b1611e77565b6114b9611ebd565b6114c1611e54565b906114ca611e9a565b906114d3611ee0565b73ffffffffffffffffffffffffffffffffffffffff92838092817fffffffffffffffffffffffff00000000000000000000000000000000000000009716876004541617600455168560055416176005551683600654161760065516906007541617600755600080f35b3461003b57600060031936011261003b57602073ffffffffffffffffffffffffffffffffffffffff60075416604051908152f35b3461003b57600060031936011261003b57602073ffffffffffffffffffffffffffffffffffffffff600a5416604051908152f35b3461003b57602060031936011261003b5773ffffffffffffffffffffffffffffffffffffffff6115d2611e77565b6115da611ee0565b167fffffffffffffffffffffffff0000000000000000000000000000000000000000600b541617600b55600080f35b3461003b57602060031936011261003b5773ffffffffffffffffffffffffffffffffffffffff611637611e77565b61163f611ee0565b167fffffffffffffffffffffffff0000000000000000000000000000000000000000600a541617600a55600080f35b3461003b57602060031936011261003b5760043560005260026020526020604060002054604051908152f35b3461003b57602060031936011261003b576004356116b6611ee0565b6101f481116116c457600d55005b608460405162461bcd60e51b815260206004820152602660248201527f4e65772072656c61796572206665652070657263656e7461676520697320746f60448201527f6f206869676800000000000000000000000000000000000000000000000000006064820152fd5b3461003b57600060031936011261003b57602073ffffffffffffffffffffffffffffffffffffffff600b5416604051908152f35b3461003b5760a060031936011261003b5761177b611e77565b60243560443567ffffffffffffffff811161003b576117a1611829913690600401611e36565b916117aa611e9a565b906084359473ffffffffffffffffffffffffffffffffffffffff926117d484600c5416331461211a565b6117dc611f81565b5a936000886117eb873a61235d565b98848460085416916040519a8b94859384937f7276069d0000000000000000000000000000000000000000000000000000000085526004850161225b565b03915afa97881561054f57600096600099611acb575b508161185560209a8b8082518301019101612293565b9116938851998b8a019a8b2060005260028c5260406000205410611a8757906118858461188b94931686146122c7565b14612312565b855187206000526003885260406000209216918260005287528260406000205410611a435791869161193a94938651882060005260038452604060002082600052845260406000206118de848254612370565b905560006040518097819582947fa9059cbb000000000000000000000000000000000000000000000000000000008452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af191821561054f5761196092611a26575b5061195b3a915a90612370565b61235d565b90612710611970600d548461235d565b0492815181206000526002855260406000205461198d8585611f45565b116119e2576000806119cb8686839660028b86986119ae866119dc9d611f45565b935190208752526119c460408620918254612370565b9055611f45565b335af16119d661237d565b506123f8565b60018055005b6064856040519062461bcd60e51b82526004820152601f60248201527f4e6f7420656e6f7567682062616c616e636520666f72206761732075736564006044820152fd5b611a3c90863d881161068e5761067f8183611d84565b508561194e565b6064876040519062461bcd60e51b82526004820152601860248201527f4e6f7420656e6f75676820746f6b656e2062616c616e636500000000000000006044820152fd5b60648b6040519062461bcd60e51b82526004820152601f60248201527f4e6f7420656e6f7567682045544820666f7220676173207265717569726564006044820152fd5b909850611aec9196503d806000833e611ae48183611d84565b8101906121ca565b979291505095978961183f565b3461003b57608060031936011261003b5760043560243567ffffffffffffffff811161003b57611b2d903690600401611e36565b611b35611e54565b9160643591611bac73ffffffffffffffffffffffffffffffffffffffff93611b6285600c5416331461211a565b611b6a611f81565b6000815a9488886008541691604051968794859384937f7276069d0000000000000000000000000000000000000000000000000000000085526004850161225b565b03915afa94851561054f57600092600096611d5b575b509081611885611beb93611be06020998a8082518301019101612293565b9316991689146122c7565b838151910120611c1c611c07611c01843a61235d565b85612370565b826000526002865260406000205410156120b7565b806000526002845260406000205415611d175790611c7d91611c3f841515612021565b8060005260028552611c588460406000205410156120b7565b600052600284526040600020611c6f848254612370565b905561195b3a915a90612370565b90612710611c8d600d548461235d565b0492611c998484611f45565b8210611cd3575060006119cb8484611cce848080806119dc9c611cc3829d610998849e859e612370565b905af16109bc61237d565b611f45565b6064906040519062461bcd60e51b82526004820152601a60248201527f4e6f7420656e6f7567682062616c616e636520666f72206761730000000000006044820152fd5b6064846040519062461bcd60e51b82526004820152601960248201527f436f6d6d69746d656e7420646f6573206e6f74206578697374000000000000006044820152fd5b611d77919650611beb9293503d806000833e611ae48183611d84565b979294939150611bc29050565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610d4a57604052565b67ffffffffffffffff8111610d4a57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b929192611e0b82611dc5565b91611e196040519384611d84565b82948184528183011161003b578281602093846000960137010152565b9080601f8301121561003b57816020611e5193359101611dff565b90565b6044359073ffffffffffffffffffffffffffffffffffffffff8216820361003b57565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361003b57565b6064359073ffffffffffffffffffffffffffffffffffffffff8216820361003b57565b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361003b57565b73ffffffffffffffffffffffffffffffffffffffff600054163303611f0157565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b91908201809211611f5257565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600260015414611f92576002600155565b606460405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152fd5b15611fdd57565b606460405162461bcd60e51b815260206004820152601960248201527f546f6b656e20616464726573732063616e6e6f742062652030000000000000006044820152fd5b1561202857565b606460405162461bcd60e51b815260206004820152602060248201527f416d6f756e74206d7573742062652067726561746572207468616e207a65726f6044820152fd5b1561207357565b606460405162461bcd60e51b815260206004820152601360248201527f546f6b656e206e6f7420737570706f72746564000000000000000000000000006044820152fd5b156120be57565b606460405162461bcd60e51b815260206004820152601260248201527f4e6f7420656e6f7567682062616c616e636500000000000000000000000000006044820152fd5b9081602091031261003b5751801515810361003b5790565b1561212157565b606460405162461bcd60e51b815260206004820152600b60248201527f4e6f742072656c617965720000000000000000000000000000000000000000006044820152fd5b60005b8381106121785750506000910152565b8181015183820152602001612168565b81601f8201121561003b57805161219e81611dc5565b926121ac6040519485611d84565b8184526020828401011161003b57611e519160208085019101612165565b9160808383031261003b5782519067ffffffffffffffff9182811161003b57836121f5918601612188565b93602081015193604082015193606083015190811161003b57611e519201612188565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f60209361225481518092818752878088019101612165565b0116010190565b73ffffffffffffffffffffffffffffffffffffffff61228860409396959496606084526060840190612218565b951660208201520152565b919082604091031261003b57815173ffffffffffffffffffffffffffffffffffffffff8116810361003b5760209092015190565b156122ce57565b606460405162461bcd60e51b815260206004820152601060248201527f4e6f742053616d652041646472657373000000000000000000000000000000006044820152fd5b1561231957565b606460405162461bcd60e51b815260206004820152600e60248201527f4e6f742053616d65204e6f6e63650000000000000000000000000000000000006044820152fd5b81810292918115918404141715611f5257565b91908203918211611f5257565b3d156123a8573d9061238e82611dc5565b9161239c6040519384611d84565b82523d6000602084013e565b606090565b156123b457565b606460405162461bcd60e51b815260206004820152601360248201527f455448207472616e73666572206661696c6564000000000000000000000000006044820152fd5b156123ff57565b606460405162461bcd60e51b815260206004820152601c60248201527f455448207472616e73666572206661696c6564207769746820676173000000006044820152fd5b919290156124a45750815115612457575090565b3b156124605790565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156124b75750805190602001fd5b6124db9060405191829162461bcd60e51b8352602060048401526024830190612218565b0390fdfea2646970667358221220eaa7bee03c516fc364e741eb8ce83ea960db5cf8fbe4145de7dc9cda8aaac8b164736f6c63430008130033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 291,
        "contract": "contracts/MecenateVault.sol:MecenateVault",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 642,
        "contract": "contracts/MecenateVault.sol:MecenateVault",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 9905,
        "contract": "contracts/MecenateVault.sol:MecenateVault",
        "label": "ethDeposits",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 9911,
        "contract": "contracts/MecenateVault.sol:MecenateVault",
        "label": "tokenDeposits",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 9913,
        "contract": "contracts/MecenateVault.sol:MecenateVault",
        "label": "WETH",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 9915,
        "contract": "contracts/MecenateVault.sol:MecenateVault",
        "label": "DAI",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 9917,
        "contract": "contracts/MecenateVault.sol:MecenateVault",
        "label": "USDC",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 9919,
        "contract": "contracts/MecenateVault.sol:MecenateVault",
        "label": "MUSE",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 9921,
        "contract": "contracts/MecenateVault.sol:MecenateVault",
        "label": "verifierContract",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 9923,
        "contract": "contracts/MecenateVault.sol:MecenateVault",
        "label": "factoryContract",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 9925,
        "contract": "contracts/MecenateVault.sol:MecenateVault",
        "label": "mecenateBay",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 9927,
        "contract": "contracts/MecenateVault.sol:MecenateVault",
        "label": "mecenateUsers",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 9929,
        "contract": "contracts/MecenateVault.sol:MecenateVault",
        "label": "relayer",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 9932,
        "contract": "contracts/MecenateVault.sol:MecenateVault",
        "label": "relayerFeePercentage",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}