{
  "address": "0x28D3b730A155B76B48857E52291Af6248557FCf9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifierContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "encryptedVaultId",
          "type": "bytes32"
        }
      ],
      "name": "ForwarderCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_encryptedVaultId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_dai",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_muse",
          "type": "address"
        }
      ],
      "name": "createforwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "forwardersMapping",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_user",
          "type": "bytes32"
        }
      ],
      "name": "getforwarders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifierContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd53adb726410867aef0060349162b02ef2d1c72a8925e0e902fb621bf408613e",
  "receipt": {
    "to": null,
    "from": "0x8aA5F726d9F868a21a8bd748E2f1E43bA31eb670",
    "contractAddress": "0x28D3b730A155B76B48857E52291Af6248557FCf9",
    "transactionIndex": 1,
    "gasUsed": "904909",
    "logsBloom": "0x
    "blockHash": "0xd78ff986891c10cf1d37d3c6a0da1dbd2040aaf35ca3f2d04f46db870ce034f6",
    "transactionHash": "0xd53adb726410867aef0060349162b02ef2d1c72a8925e0e902fb621bf408613e",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 10841026,
        "transactionHash": "0xd53adb726410867aef0060349162b02ef2d1c72a8925e0e902fb621bf408613e",
        "address": "0x28D3b730A155B76B48857E52291Af6248557FCf9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008aa5f726d9f868a21a8bd748e2f1e43ba31eb670"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd78ff986891c10cf1d37d3c6a0da1dbd2040aaf35ca3f2d04f46db870ce034f6"
      }
    ],
    "blockNumber": 10841026,
    "cumulativeGasUsed": "951762",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8CFb40101Fbd1a04b8F460CC5d419E94eFe0c74D"
  ],
  "numDeployments": 13,
  "solcInputHash": "006e59e67d7abfd2a97d2dd307652f22",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifierContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"encryptedVaultId\",\"type\":\"bytes32\"}],\"name\":\"ForwarderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_encryptedVaultId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_dai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_muse\",\"type\":\"address\"}],\"name\":\"createforwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"forwardersMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_user\",\"type\":\"bytes32\"}],\"name\":\"getforwarders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifierContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/factories/MecenateForwarderFactory.sol\":\"MecenateForwarderFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/MecenateForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n//Objective:\\n//Anyone can send Ethers\\n//Only owner can withdraw\\n//Anyone can check wallet balance\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"./interfaces/IMecenateVerifier.sol\\\";\\n// import IERC20\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract MecenateForwarder {\\n    address public verifierContract;\\n    address public dai;\\n    address public muse;\\n\\n    constructor(address _verifierContract, address _dai, address _muse) {\\n        verifierContract = _verifierContract;\\n        dai = _dai;\\n        muse = _muse;\\n    }\\n\\n    receive() external payable {}\\n\\n    //Verify Owner or Not\\n    modifier verifyOwner(\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce\\n    ) {\\n        (\\n            bytes memory vaultId,\\n            ,\\n            ,\\n            bytes memory signedMessage\\n        ) = IMecenateVerifier(verifierContract).sismoVerify(\\n                sismoConnectResponse,\\n                _to,\\n                _nonce\\n            );\\n\\n        (address to, bytes32 nonce) = abi.decode(\\n            signedMessage,\\n            (address, bytes32)\\n        );\\n\\n        require(to == _to, \\\"Not Same Address\\\");\\n        require(nonce == _nonce, \\\"Not Same Nonce\\\");\\n        _;\\n    }\\n\\n    //Transfer the amount from caller's account to this wallet (smart contract)\\n    function withdraw(\\n        uint _amount,\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce\\n    ) external verifyOwner(sismoConnectResponse, _to, _nonce) {\\n        payable(_to).transfer(_amount);\\n    }\\n\\n    function withdrawToken(\\n        address _token,\\n        uint _amount,\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce\\n    ) external verifyOwner(sismoConnectResponse, _to, _nonce) {\\n        IERC20(_token).transfer(_to, _amount);\\n    }\\n\\n    //To know the wallet balance\\n    function getETHBalance() external view returns (uint) {\\n        return address(this).balance;\\n    }\\n\\n    function getDAIBalance() external view returns (uint) {\\n        return IERC20(dai).balanceOf(address(this));\\n    }\\n\\n    function getMUSEBalance() external view returns (uint) {\\n        return IERC20(muse).balanceOf(address(this));\\n    }\\n\\n    function execute(\\n        address _target,\\n        bytes calldata _data,\\n        uint256 _value,\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce\\n    ) external verifyOwner(sismoConnectResponse, _to, _nonce) returns (bool) {\\n        bool success;\\n        bytes memory retData;\\n        string memory revertReason;\\n\\n        if (_data.length == 0) {\\n            (success, retData) = payable(_target).call{value: _value}(\\\"\\\");\\n        } else {\\n            if (_value == 0) {\\n                (success, retData) = _target.call(_data);\\n            } else {\\n                (success, retData) = _target.call{value: _value}(_data);\\n            }\\n        }\\n\\n        if (!success) {\\n            // Estrai il motivo del revert dal payload di ritorno\\n            if (retData.length > 0) {\\n                // Nota: Solidity memorizza il motivo del revert come un \\\"Error(string)\\\"\\n                // che \\u00e8 un selettore di funzione di 4 byte seguito dalla lunghezza della stringa\\n                // e dai dati della stringa stessa.\\n                assembly {\\n                    revertReason := add(retData, 0x24)\\n                }\\n            }\\n            require(false, revertReason);\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0x6cdb45d275b7628e0b90edf415818948afe16c5f04c8a3a942758b141a7f8c97\",\"license\":\"GPL-3.0\"},\"contracts/factories/MecenateForwarderFactory.sol\":{\"content\":\"import \\\"../MecenateForwarder.sol\\\";\\n\\n// import Ownable\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract MecenateForwarderFactory is Ownable {\\n    mapping(bytes32 => address) public forwardersMapping;\\n\\n    address public verifierContract;\\n\\n    constructor(address _verifierContract) {\\n        verifierContract = _verifierContract;\\n    }\\n\\n    event ForwarderCreated(address indexed forwarder, bytes32 encryptedVaultId);\\n\\n    function createforwarder(\\n        bytes32 _encryptedVaultId,\\n        address _dai,\\n        address _muse\\n    ) public returns (address) {\\n        require(\\n            forwardersMapping[_encryptedVaultId] == address(0),\\n            \\\"forwarder already created\\\"\\n        );\\n\\n        MecenateForwarder forwarder = new MecenateForwarder(\\n            verifierContract,\\n            _dai,\\n            _muse\\n        );\\n\\n        forwardersMapping[_encryptedVaultId] = address(forwarder);\\n\\n        return address(forwarder);\\n    }\\n\\n    function getforwarders(bytes32 _user) public view returns (address) {\\n        return forwardersMapping[_user];\\n    }\\n}\\n\",\"keccak256\":\"0x864f7307be3137ad32a1df24a5be3d87913f7a9303722361f56b27ef79a2ad56\"},\"contracts/interfaces/IMecenateVerifier.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateVerifier {\\r\\n    function sismoVerify(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) external view returns (bytes memory, uint256, uint256, bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x46733b039d06e66a1f438c4fcc490eea06ed1ba2ddff7d5a0059d9e799f03d8d\"}},\"version\":1}",
  "bytecode": "0x6080346100a757601f610f4738819003918201601f19168301916001600160401b038311848410176100ac578084926020946040528339810103126100a757516001600160a01b0390818116908190036100a75760005460018060a01b0319903382821617600055604051933391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a36002541617600255610e8490816100c38239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608060408181526004908136101561001657600080fd5b600092833560e01c90816305d45fad146103495750806307c0e602146103165780632ee478bf146101ef578063715018a6146101925780638da5cb5b1461016a578063cf6956881461013d5763f2fde38b1461007157600080fd5b34610139576020366003190112610139576001600160a01b03823581811693919290849003610135576100a261037a565b83156100e357505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8480fd5b8280fd5b83823461016657816003193601126101665760025490516001600160a01b039091168152602090f35b5080fd5b838234610166578160031936011261016657905490516001600160a01b039091168152602090f35b83346101ec57806003193601126101ec576101ab61037a565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b5034610139576060366003190112610139578135916001600160a01b039060243582811691908290036103125760443583811680910361030e5785875260016020528385882054166102cb57836002541692855193610a7c8086019486861067ffffffffffffffff8711176102b8575091859391606095936103d38639835260208301528682015203019085f080156102ae57938291602095169381526001855220826bffffffffffffffffffffffff60a01b82541617905551908152f35b82513d86823e3d90fd5b634e487b7160e01b8b526041905260248afd5b845162461bcd60e51b8152602081840152601960248201527f666f7277617264657220616c72656164792063726561746564000000000000006044820152606490fd5b8680fd5b8580fd5b5090346101395760203660031901126101395735825260016020908152918190205490516001600160a01b039091168152f35b9184915034610166576020366003190112610166579235815260016020908152929020546001600160a01b03168152f35b6000546001600160a01b0316330361038e57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fdfe6080346100a057601f610a7c38819003918201601f19168301916001600160401b038311848410176100a5578084926060946040528339810103126100a057610047816100bb565b906100606040610059602084016100bb565b92016100bb565b60018060a01b0380928160018060a01b0319951685600054161760005516836001541617600155169060025416176002556040516109ac90816100d08239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036100a05756fe6080604052600436101561001b575b361561001957600080fd5b005b6000803560e01c9081630ede84b5146100ae575080631378f5d9146100a957806368d9dd7d146100a45780636e9472981461009f578063ab55d1cc1461009a578063bbd0094f14610095578063cf69568814610090578063f4b9fa751461008b5763f8e1f51e0361000e57610578565b61054f565b610526565b610481565b6103f1565b6103d5565b61031a565b61021d565b346101325780600319360112610132576002546370a0823160e01b60809081523060845260209160249082906001600160a01b03165afa90811561012d57906100fd575b602090604051908152f35b5060203d8111610126575b61011f81610117602093610170565b6080016107ec565b90506100f2565b503d610108565b6106a8565b80fd5b6001600160a01b0381160361014657565b600080fd5b6084359061015882610135565b565b634e487b7160e01b600052604160045260246000fd5b601f80199101166080016080811067ffffffffffffffff82111761019357604052565b61015a565b90601f8019910116810190811067ffffffffffffffff82111761019357604052565b67ffffffffffffffff811161019357601f01601f191660200190565b81601f82011215610146578035906101ed826101ba565b926101fb6040519485610198565b8284526020838301011161014657816000926020809301838601378301015290565b346101465760a03660031901126101465760043561023a81610135565b60443567ffffffffffffffff81116101465761025a9036906004016101d6565b60643561026681610135565b6000805490936001600160a01b039390916102a6916084359187918391879089165b9160405196879485938493637276069d60e01b85526004850161067c565b03915afa94851561012d576102e26102d66102f1976102e8958a916102f4575b50602080825183010191016106b4565b928088169116146106d3565b14610712565b6024359061077c565b80f35b61031091503d808c833e6103088183610198565b810190610609565b92505050386102c6565b346101465760803660031901126101465760243567ffffffffffffffff81116101465761034b9036906004016101d6565b6044359061035882610135565b6000805490926001600160a01b0392909161037e91606435918691839186908816610288565b03915afa93841561012d576102e26103ad6102f1966103b99589916103c15750602080825183010191016106b4565b928087169116146106d3565b60043561074f565b61031091503d808b833e6103088183610198565b3461014657600036600319011261014657602047604051908152f35b3461014657600080600319360112610132576001546040516370a0823160e01b815230600482015290602090829060249082906001600160a01b03165afa90811561012d578291610448575b602082604051908152f35b90506020813d8211610479575b8161046260209383610198565b810103126104755760209150513861043d565b5080fd5b3d9150610455565b346101465760c03660031901126101465760043561049e81610135565b6024359067ffffffffffffffff9081831161014657366023840112156101465782600401358281116101465736602482860101116101465760643592831161014657610522936104f56105109436906004016101d6565b906104fe61014b565b9260a4359460246044359301906107fe565b60405190151581529081906020820190565b0390f35b34610146576000366003190112610146576000546040516001600160a01b039091168152602090f35b34610146576000366003190112610146576001546040516001600160a01b039091168152602090f35b34610146576000366003190112610146576002546040516001600160a01b039091168152602090f35b60005b8381106105b45750506000910152565b81810151838201526020016105a4565b81601f820112156101465780516105da816101ba565b926105e86040519485610198565b818452602082840101116101465761060691602080850191016105a1565b90565b916080838303126101465782519067ffffffffffffffff9182811161014657836106349186016105c4565b9360208101519360408201519360608301519081116101465761060692016105c4565b90602091610670815180928185528580860191016105a1565b601f01601f1916010190565b61069460409295949395606083526060830190610657565b6001600160a01b0390951660208201520152565b6040513d6000823e3d90fd5b919082604091031261014657602082516106cd81610135565b92015190565b156106da57565b60405162461bcd60e51b815260206004820152601060248201526f4e6f742053616d65204164647265737360801b6044820152606490fd5b1561071957565b60405162461bcd60e51b815260206004820152600e60248201526d4e6f742053616d65204e6f6e636560901b6044820152606490fd5b600080809392819382908215610772575b6001600160a01b031690f11561012d57565b6108fc9150610760565b60446020926000604051958694859363a9059cbb60e01b855260018060a01b0380931660048601526024850152165af1801561012d576107b95750565b6020813d82116107e4575b816107d160209383610198565b8101031261014657518015150361014657565b3d91506107c4565b602090607f1901126101465760805190565b929095949361083992869560018060a01b03926000988991838684541691604051998a9485938493637276069d60e01b85526004850161067c565b03915afa96871561012d57836102e2610875938261086a8d9c8d9b8c916108fc5750602080825183010191016106b4565b9491169116146106d3565b606097816108b05750508293165af19061088d61091e565b821561089857505090565b80516108a5575b5061094e565b60249150018161089f565b9150929180156000146108df57506108cd60405180948193610910565b03925af1906108da61091e565b61088d565b9150826040519384928337810185815203925af1906108da61091e565b61031091503d808e833e6103088183610198565b908092918237016000815290565b3d15610949573d9061092f826101ba565b9161093d6040519384610198565b82523d6000602084013e565b606090565b60405162461bcd60e51b815260206004820152908190610972906024830190610657565b0390fdfea26469706673582212203a4c54d0ef2a55411ff88fb12575a02f6674d2954fe17f5e821a9350654158cf64736f6c63430008130033a2646970667358221220936931abd84ea715ea151a0a1ed09d626eaee9dffb1d3238e7916e01914d61f464736f6c63430008130033",
  "deployedBytecode": "0x608060408181526004908136101561001657600080fd5b600092833560e01c90816305d45fad146103495750806307c0e602146103165780632ee478bf146101ef578063715018a6146101925780638da5cb5b1461016a578063cf6956881461013d5763f2fde38b1461007157600080fd5b34610139576020366003190112610139576001600160a01b03823581811693919290849003610135576100a261037a565b83156100e357505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8480fd5b8280fd5b83823461016657816003193601126101665760025490516001600160a01b039091168152602090f35b5080fd5b838234610166578160031936011261016657905490516001600160a01b039091168152602090f35b83346101ec57806003193601126101ec576101ab61037a565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b5034610139576060366003190112610139578135916001600160a01b039060243582811691908290036103125760443583811680910361030e5785875260016020528385882054166102cb57836002541692855193610a7c8086019486861067ffffffffffffffff8711176102b8575091859391606095936103d38639835260208301528682015203019085f080156102ae57938291602095169381526001855220826bffffffffffffffffffffffff60a01b82541617905551908152f35b82513d86823e3d90fd5b634e487b7160e01b8b526041905260248afd5b845162461bcd60e51b8152602081840152601960248201527f666f7277617264657220616c72656164792063726561746564000000000000006044820152606490fd5b8680fd5b8580fd5b5090346101395760203660031901126101395735825260016020908152918190205490516001600160a01b039091168152f35b9184915034610166576020366003190112610166579235815260016020908152929020546001600160a01b03168152f35b6000546001600160a01b0316330361038e57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fdfe6080346100a057601f610a7c38819003918201601f19168301916001600160401b038311848410176100a5578084926060946040528339810103126100a057610047816100bb565b906100606040610059602084016100bb565b92016100bb565b60018060a01b0380928160018060a01b0319951685600054161760005516836001541617600155169060025416176002556040516109ac90816100d08239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036100a05756fe6080604052600436101561001b575b361561001957600080fd5b005b6000803560e01c9081630ede84b5146100ae575080631378f5d9146100a957806368d9dd7d146100a45780636e9472981461009f578063ab55d1cc1461009a578063bbd0094f14610095578063cf69568814610090578063f4b9fa751461008b5763f8e1f51e0361000e57610578565b61054f565b610526565b610481565b6103f1565b6103d5565b61031a565b61021d565b346101325780600319360112610132576002546370a0823160e01b60809081523060845260209160249082906001600160a01b03165afa90811561012d57906100fd575b602090604051908152f35b5060203d8111610126575b61011f81610117602093610170565b6080016107ec565b90506100f2565b503d610108565b6106a8565b80fd5b6001600160a01b0381160361014657565b600080fd5b6084359061015882610135565b565b634e487b7160e01b600052604160045260246000fd5b601f80199101166080016080811067ffffffffffffffff82111761019357604052565b61015a565b90601f8019910116810190811067ffffffffffffffff82111761019357604052565b67ffffffffffffffff811161019357601f01601f191660200190565b81601f82011215610146578035906101ed826101ba565b926101fb6040519485610198565b8284526020838301011161014657816000926020809301838601378301015290565b346101465760a03660031901126101465760043561023a81610135565b60443567ffffffffffffffff81116101465761025a9036906004016101d6565b60643561026681610135565b6000805490936001600160a01b039390916102a6916084359187918391879089165b9160405196879485938493637276069d60e01b85526004850161067c565b03915afa94851561012d576102e26102d66102f1976102e8958a916102f4575b50602080825183010191016106b4565b928088169116146106d3565b14610712565b6024359061077c565b80f35b61031091503d808c833e6103088183610198565b810190610609565b92505050386102c6565b346101465760803660031901126101465760243567ffffffffffffffff81116101465761034b9036906004016101d6565b6044359061035882610135565b6000805490926001600160a01b0392909161037e91606435918691839186908816610288565b03915afa93841561012d576102e26103ad6102f1966103b99589916103c15750602080825183010191016106b4565b928087169116146106d3565b60043561074f565b61031091503d808b833e6103088183610198565b3461014657600036600319011261014657602047604051908152f35b3461014657600080600319360112610132576001546040516370a0823160e01b815230600482015290602090829060249082906001600160a01b03165afa90811561012d578291610448575b602082604051908152f35b90506020813d8211610479575b8161046260209383610198565b810103126104755760209150513861043d565b5080fd5b3d9150610455565b346101465760c03660031901126101465760043561049e81610135565b6024359067ffffffffffffffff9081831161014657366023840112156101465782600401358281116101465736602482860101116101465760643592831161014657610522936104f56105109436906004016101d6565b906104fe61014b565b9260a4359460246044359301906107fe565b60405190151581529081906020820190565b0390f35b34610146576000366003190112610146576000546040516001600160a01b039091168152602090f35b34610146576000366003190112610146576001546040516001600160a01b039091168152602090f35b34610146576000366003190112610146576002546040516001600160a01b039091168152602090f35b60005b8381106105b45750506000910152565b81810151838201526020016105a4565b81601f820112156101465780516105da816101ba565b926105e86040519485610198565b818452602082840101116101465761060691602080850191016105a1565b90565b916080838303126101465782519067ffffffffffffffff9182811161014657836106349186016105c4565b9360208101519360408201519360608301519081116101465761060692016105c4565b90602091610670815180928185528580860191016105a1565b601f01601f1916010190565b61069460409295949395606083526060830190610657565b6001600160a01b0390951660208201520152565b6040513d6000823e3d90fd5b919082604091031261014657602082516106cd81610135565b92015190565b156106da57565b60405162461bcd60e51b815260206004820152601060248201526f4e6f742053616d65204164647265737360801b6044820152606490fd5b1561071957565b60405162461bcd60e51b815260206004820152600e60248201526d4e6f742053616d65204e6f6e636560901b6044820152606490fd5b600080809392819382908215610772575b6001600160a01b031690f11561012d57565b6108fc9150610760565b60446020926000604051958694859363a9059cbb60e01b855260018060a01b0380931660048601526024850152165af1801561012d576107b95750565b6020813d82116107e4575b816107d160209383610198565b8101031261014657518015150361014657565b3d91506107c4565b602090607f1901126101465760805190565b929095949361083992869560018060a01b03926000988991838684541691604051998a9485938493637276069d60e01b85526004850161067c565b03915afa96871561012d57836102e2610875938261086a8d9c8d9b8c916108fc5750602080825183010191016106b4565b9491169116146106d3565b606097816108b05750508293165af19061088d61091e565b821561089857505090565b80516108a5575b5061094e565b60249150018161089f565b9150929180156000146108df57506108cd60405180948193610910565b03925af1906108da61091e565b61088d565b9150826040519384928337810185815203925af1906108da61091e565b61031091503d808e833e6103088183610198565b908092918237016000815290565b3d15610949573d9061092f826101ba565b9161093d6040519384610198565b82523d6000602084013e565b606090565b60405162461bcd60e51b815260206004820152908190610972906024830190610657565b0390fdfea26469706673582212203a4c54d0ef2a55411ff88fb12575a02f6674d2954fe17f5e821a9350654158cf64736f6c63430008130033a2646970667358221220936931abd84ea715ea151a0a1ed09d626eaee9dffb1d3238e7916e01914d61f464736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/factories/MecenateForwarderFactory.sol:MecenateForwarderFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 502,
        "contract": "contracts/factories/MecenateForwarderFactory.sol:MecenateForwarderFactory",
        "label": "forwardersMapping",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 504,
        "contract": "contracts/factories/MecenateForwarderFactory.sol:MecenateForwarderFactory",
        "label": "verifierContract",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}