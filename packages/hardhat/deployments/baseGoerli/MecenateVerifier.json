{
  "address": "0x88528D12EA8BE35f446282745048DDC81ba51914",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes16",
          "name": "_appId",
          "type": "bytes16"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "enum AuthType",
          "name": "authType",
          "type": "uint8"
        }
      ],
      "name": "AuthTypeNotFoundInVerifiedResult",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ADDRESSES_PROVIDER_V2",
      "outputs": [
        {
          "internalType": "contract IAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "APP_ID",
      "outputs": [
        {
          "internalType": "bytes16",
          "name": "",
          "type": "bytes16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IS_IMPERSONATION_MODE",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SISMO_CONNECT_LIB_VERSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "appId",
      "outputs": [
        {
          "internalType": "bytes16",
          "name": "",
          "type": "bytes16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "config",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes16",
              "name": "appId",
              "type": "bytes16"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "isImpersonationMode",
                  "type": "bool"
                }
              ],
              "internalType": "struct VaultConfig",
              "name": "vault",
              "type": "tuple"
            }
          ],
          "internalType": "struct SismoConnectConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "sismoConnectResponse",
          "type": "bytes"
        }
      ],
      "name": "sismoVerify",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3d10f4d5f2e69661b5599cce5220b9532774e39cc9f0b8988400c1a8e76c6752",
  "receipt": {
    "to": null,
    "from": "0x8aA5F726d9F868a21a8bd748E2f1E43bA31eb670",
    "contractAddress": "0x88528D12EA8BE35f446282745048DDC81ba51914",
    "transactionIndex": 2,
    "gasUsed": "2139415",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x3757bb632a198221f9894cdb29318ba9f1ebf29fee5d16a9ac28641206209264",
    "transactionHash": "0x3d10f4d5f2e69661b5599cce5220b9532774e39cc9f0b8988400c1a8e76c6752",
    "logs": [],
    "blockNumber": 11181393,
    "cumulativeGasUsed": "2294297",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6c434d2de6efa3e7169bc58843b74d74"
  ],
  "numDeployments": 8,
  "solcInputHash": "1df1e5248ce6cfac956a4b387ea3e358",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"_appId\",\"type\":\"bytes16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"enum AuthType\",\"name\":\"authType\",\"type\":\"uint8\"}],\"name\":\"AuthTypeNotFoundInVerifiedResult\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ADDRESSES_PROVIDER_V2\",\"outputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"APP_ID\",\"outputs\":[{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IS_IMPERSONATION_MODE\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SISMO_CONNECT_LIB_VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes16\",\"name\":\"appId\",\"type\":\"bytes16\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isImpersonationMode\",\"type\":\"bool\"}],\"internalType\":\"struct VaultConfig\",\"name\":\"vault\",\"type\":\"tuple\"}],\"internalType\":\"struct SismoConnectConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"}],\"name\":\"sismoVerify\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MecenateVerifier.sol\":\"MecenateVerifier\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/MecenateVerifier.sol\":{\"content\":\"/**\\n * @title MecenateVerifier\\n * @dev Contract that verifies user identity using SismoConnect and returns user's vaultId, twitterId and telegramId.\\n */\\npragma solidity ^0.8.17;\\nimport \\\"./helpers/sismo/SismoConnectLib.sol\\\";\\n\\ncontract MecenateVerifier is SismoConnect {\\n    bytes16 public appId;\\n\\n    constructor(bytes16 _appId) SismoConnect(buildConfig(_appId)) {\\n        appId = _appId;\\n    }\\n\\n    function sismoVerify(\\n        bytes memory sismoConnectResponse\\n    ) external view returns (bytes memory) {\\n        require(sismoConnectResponse.length > 0, \\\"empty response\\\");\\n\\n        // Build authorization requests\\n        AuthRequest[] memory auths = new AuthRequest[](4);\\n\\n        auths[0] = buildAuth(AuthType.VAULT);\\n\\n        auths[1] = buildAuth({\\n            authType: AuthType.TWITTER,\\n            isOptional: false,\\n            isSelectableByUser: false\\n        });\\n\\n        auths[2] = buildAuth({\\n            authType: AuthType.TELEGRAM,\\n            isOptional: true,\\n            isSelectableByUser: true\\n        });\\n\\n        auths[3] = buildAuth({\\n            authType: AuthType.GITHUB,\\n            isOptional: true,\\n            isSelectableByUser: true\\n        });\\n\\n        // Verify the response\\n        SismoConnectVerifiedResult memory result = verify({\\n            responseBytes: sismoConnectResponse,\\n            auths: auths,\\n            signature: buildSignature({message: abi.encode(\\\"I Love Sismo!\\\")})\\n        });\\n\\n        bytes memory signedMessage = SismoConnectHelper.getSignedMessage(\\n            result\\n        );\\n\\n        string memory message = abi.decode(signedMessage, (string));\\n\\n        require(\\n            keccak256(abi.encodePacked(message)) ==\\n                keccak256(abi.encodePacked(\\\"I Love Sismo!\\\")),\\n            \\\"Invalid signature\\\"\\n        );\\n\\n        // Store the verified auths\\n        VerifiedAuth[] memory _verifiedAuths = new VerifiedAuth[](\\n            result.auths.length\\n        );\\n\\n        for (uint256 i = 0; i < result.auths.length; i++) {\\n            _verifiedAuths[i] = result.auths[i];\\n        }\\n\\n        // Get the vaultId of the user\\n        // --> vaultId = hash(userVaultSecret, appId)\\n        uint256 vaultId = SismoConnectHelper.getUserId(result, AuthType.VAULT);\\n\\n        // Convert the vaultId to bytes\\n        bytes memory vaultIdBytes = abi.encodePacked(vaultId);\\n\\n        return (vaultIdBytes);\\n    }\\n}\\n\",\"keccak256\":\"0x167bc973ba56a9dc8ed05657e92a23383049983f0fed162ad574d4508d1404ce\"},\"contracts/helpers/sismo/SismoConnectLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport {RequestBuilder, SismoConnectRequest, SismoConnectResponse, SismoConnectConfig} from \\\"./utils/RequestBuilder.sol\\\";\\r\\nimport {AuthRequestBuilder, AuthRequest, Auth, VerifiedAuth, AuthType} from \\\"./utils/AuthRequestBuilder.sol\\\";\\r\\nimport {ClaimRequestBuilder, ClaimRequest, Claim, VerifiedClaim, ClaimType} from \\\"./utils/ClaimRequestBuilder.sol\\\";\\r\\nimport {SignatureBuilder, SignatureRequest, Signature} from \\\"./utils/SignatureBuilder.sol\\\";\\r\\nimport {VaultConfig} from \\\"./utils/Structs.sol\\\";\\r\\nimport {ISismoConnectVerifier, SismoConnectVerifiedResult} from \\\"./interfaces/ISismoConnectVerifier.sol\\\";\\r\\nimport {IAddressesProvider} from \\\"./interfaces/IAddressesProvider.sol\\\";\\r\\nimport {SismoConnectHelper} from \\\"./utils/SismoConnectHelper.sol\\\";\\r\\n\\r\\ncontract SismoConnect {\\r\\n    uint256 public constant SISMO_CONNECT_LIB_VERSION = 2;\\r\\n\\r\\n    IAddressesProvider public constant ADDRESSES_PROVIDER_V2 =\\r\\n        IAddressesProvider(0x3Cd5334eB64ebBd4003b72022CC25465f1BFcEe6);\\r\\n\\r\\n    ISismoConnectVerifier immutable _sismoConnectVerifier;\\r\\n\\r\\n    // external libraries\\r\\n    AuthRequestBuilder immutable _authRequestBuilder;\\r\\n    ClaimRequestBuilder immutable _claimRequestBuilder;\\r\\n    SignatureBuilder immutable _signatureBuilder;\\r\\n    RequestBuilder immutable _requestBuilder;\\r\\n\\r\\n    // config\\r\\n    bytes16 public immutable APP_ID;\\r\\n    bool public immutable IS_IMPERSONATION_MODE;\\r\\n\\r\\n    constructor(SismoConnectConfig memory _config) {\\r\\n        APP_ID = _config.appId;\\r\\n        IS_IMPERSONATION_MODE = _config.vault.isImpersonationMode;\\r\\n\\r\\n        _sismoConnectVerifier = ISismoConnectVerifier(\\r\\n            ADDRESSES_PROVIDER_V2.get(string(\\\"sismoConnectVerifier-v1.2\\\"))\\r\\n        );\\r\\n        // external libraries\\r\\n        _authRequestBuilder = AuthRequestBuilder(\\r\\n            ADDRESSES_PROVIDER_V2.get(string(\\\"authRequestBuilder-v1.1\\\"))\\r\\n        );\\r\\n        _claimRequestBuilder = ClaimRequestBuilder(\\r\\n            ADDRESSES_PROVIDER_V2.get(string(\\\"claimRequestBuilder-v1.1\\\"))\\r\\n        );\\r\\n        _signatureBuilder = SignatureBuilder(\\r\\n            ADDRESSES_PROVIDER_V2.get(string(\\\"signatureBuilder-v1.1\\\"))\\r\\n        );\\r\\n        _requestBuilder = RequestBuilder(\\r\\n            ADDRESSES_PROVIDER_V2.get(string(\\\"requestBuilder-v1.1\\\"))\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // public function because it needs to be used by this contract and can be used by other contracts\\r\\n    function config() public view returns (SismoConnectConfig memory) {\\r\\n        return buildConfig(APP_ID);\\r\\n    }\\r\\n\\r\\n    function buildConfig(\\r\\n        bytes16 appId\\r\\n    ) internal pure returns (SismoConnectConfig memory) {\\r\\n        SismoConnectConfig memory result = SismoConnectConfig({\\r\\n            appId: appId,\\r\\n            vault: buildVaultConfig()\\r\\n        });\\r\\n        require(appId != bytes16(0), \\\"appId cannot be empty\\\");\\r\\n        require(\\r\\n            result.vault.isImpersonationMode == false,\\r\\n            \\\"impersonation mode is not supported\\\"\\r\\n        );\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function buildVaultConfig() internal pure returns (VaultConfig memory) {\\r\\n        return VaultConfig({isImpersonationMode: false});\\r\\n    }\\r\\n\\r\\n    function verify(\\r\\n        bytes memory responseBytes,\\r\\n        AuthRequest[] memory auths,\\r\\n        SignatureRequest memory signature\\r\\n    ) internal view returns (SismoConnectVerifiedResult memory) {\\r\\n        SismoConnectResponse memory response = abi.decode(\\r\\n            responseBytes,\\r\\n            (SismoConnectResponse)\\r\\n        );\\r\\n        SismoConnectRequest memory request = buildRequest(auths, signature);\\r\\n        return _sismoConnectVerifier.verify(response, request, config());\\r\\n    }\\r\\n\\r\\n    function buildAuth(\\r\\n        AuthType authType,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser\\r\\n    ) internal view returns (AuthRequest memory) {\\r\\n        return\\r\\n            _authRequestBuilder.build(authType, isOptional, isSelectableByUser);\\r\\n    }\\r\\n\\r\\n    function buildAuth(\\r\\n        AuthType authType\\r\\n    ) internal view returns (AuthRequest memory) {\\r\\n        return _authRequestBuilder.build(authType);\\r\\n    }\\r\\n\\r\\n    function buildSignature(\\r\\n        bytes memory message\\r\\n    ) internal view returns (SignatureRequest memory) {\\r\\n        return _signatureBuilder.build(message);\\r\\n    }\\r\\n\\r\\n    function buildRequest(\\r\\n        AuthRequest[] memory auths,\\r\\n        SignatureRequest memory signature\\r\\n    ) internal view returns (SismoConnectRequest memory) {\\r\\n        return _requestBuilder.build(auths, signature);\\r\\n    }\\r\\n\\r\\n    function _GET_EMPTY_SIGNATURE_REQUEST()\\r\\n        internal\\r\\n        view\\r\\n        returns (SignatureRequest memory)\\r\\n    {\\r\\n        return _signatureBuilder.buildEmpty();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x48046d8c04bc18e540fe4c28285d6adab2d992fb53c941f91e4d479363acd7bb\",\"license\":\"MIT\"},\"contracts/helpers/sismo/interfaces/IAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface IAddressesProvider {\\r\\n    /**\\r\\n     * @dev Sets the address of a contract.\\r\\n     * @param contractAddress Address of the contract.\\r\\n     * @param contractName Name of the contract.\\r\\n     */\\r\\n    function set(address contractAddress, string memory contractName) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the address of multiple contracts.\\r\\n     * @param contractAddresses Addresses of the contracts.\\r\\n     * @param contractNames Names of the contracts.\\r\\n     */\\r\\n    function setBatch(\\r\\n        address[] calldata contractAddresses,\\r\\n        string[] calldata contractNames\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of a contract.\\r\\n     * @param contractName Name of the contract (string).\\r\\n     * @return Address of the contract.\\r\\n     */\\r\\n    function get(string memory contractName) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of a contract.\\r\\n     * @param contractNameHash Hash of the name of the contract (bytes32).\\r\\n     * @return Address of the contract.\\r\\n     */\\r\\n    function get(bytes32 contractNameHash) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addresses of all contracts inputed.\\r\\n     * @param contractNames Names of the contracts as strings.\\r\\n     */\\r\\n    function getBatch(\\r\\n        string[] calldata contractNames\\r\\n    ) external view returns (address[] memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addresses of all contracts inputed.\\r\\n     * @param contractNamesHash Names of the contracts as strings.\\r\\n     */\\r\\n    function getBatch(\\r\\n        bytes32[] calldata contractNamesHash\\r\\n    ) external view returns (address[] memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addresses of all contracts in `_contractNames`\\r\\n     * @return Names, Hashed Names and Addresses of all contracts.\\r\\n     */\\r\\n    function getAll()\\r\\n        external\\r\\n        view\\r\\n        returns (string[] memory, bytes32[] memory, address[] memory);\\r\\n}\\r\\n\",\"keccak256\":\"0xa58b350d38576b547693bb6bc17044578ae5e91d02344403d674df990e6486ab\",\"license\":\"MIT\"},\"contracts/helpers/sismo/interfaces/ISismoConnectVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"../utils/Structs.sol\\\";\\r\\n\\r\\ninterface ISismoConnectVerifier {\\r\\n    event VerifierSet(bytes32, address);\\r\\n\\r\\n    error AppIdMismatch(bytes16 receivedAppId, bytes16 expectedAppId);\\r\\n    error NamespaceMismatch(\\r\\n        bytes16 receivedNamespace,\\r\\n        bytes16 expectedNamespace\\r\\n    );\\r\\n    error VersionMismatch(bytes32 requestVersion, bytes32 responseVersion);\\r\\n    error SignatureMessageMismatch(\\r\\n        bytes requestMessageSignature,\\r\\n        bytes responseMessageSignature\\r\\n    );\\r\\n\\r\\n    function verify(\\r\\n        SismoConnectResponse memory response,\\r\\n        SismoConnectRequest memory request,\\r\\n        SismoConnectConfig memory config\\r\\n    ) external view returns (SismoConnectVerifiedResult memory);\\r\\n\\r\\n    function SISMO_CONNECT_VERSION() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0x082a1b89e3ae4a3a7e7494a81aa7a5e8cb9cab21a81ce14c7e6ae8335061d18c\",\"license\":\"MIT\"},\"contracts/helpers/sismo/utils/AuthRequestBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./Structs.sol\\\";\\r\\n\\r\\ncontract AuthRequestBuilder {\\r\\n    // default values for Auth Request\\r\\n    bool public constant DEFAULT_AUTH_REQUEST_IS_ANON = false;\\r\\n    uint256 public constant DEFAULT_AUTH_REQUEST_USER_ID = 0;\\r\\n    bool public constant DEFAULT_AUTH_REQUEST_IS_OPTIONAL = false;\\r\\n    bytes public constant DEFAULT_AUTH_REQUEST_EXTRA_DATA = \\\"\\\";\\r\\n\\r\\n    error InvalidUserIdAndIsSelectableByUserAuthType();\\r\\n    error InvalidUserIdAndAuthType();\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        bool isAnon,\\r\\n        uint256 userId,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: isAnon,\\r\\n                userId: userId,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        bool isAnon,\\r\\n        uint256 userId,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: isAnon,\\r\\n                userId: userId,\\r\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthType authType\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\r\\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\\r\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\r\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        bool isAnon\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: isAnon,\\r\\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\\r\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\r\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        uint256 userId\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\r\\n                userId: userId,\\r\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\r\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\r\\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\\r\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        bool isAnon,\\r\\n        uint256 userId\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: isAnon,\\r\\n                userId: userId,\\r\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\r\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        bool isAnon,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: isAnon,\\r\\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\\r\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        uint256 userId,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\r\\n                userId: userId,\\r\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    // allow dev to choose for isOptional\\r\\n    // the user is ask to choose isSelectableByUser to avoid the function signature collision\\r\\n    // between build(AuthType authType, bool isOptional) and build(AuthType authType, bool isAnon)\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\r\\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser,\\r\\n        uint256 userId\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\r\\n                userId: userId,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    // the user is ask to choose isSelectableByUser to avoid the function signature collision\\r\\n    // between build(AuthType authType, bool isAnon, bool isOptional) and build(AuthType authType, bool isOptional, bool isSelectableByUser)\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        bool isAnon,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: isAnon,\\r\\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        uint256 userId,\\r\\n        bool isOptional\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\r\\n                userId: userId,\\r\\n                isOptional: isOptional,\\r\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        bool isAnon,\\r\\n        uint256 userId,\\r\\n        bool isOptional\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: isAnon,\\r\\n                userId: userId,\\r\\n                isOptional: isOptional,\\r\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function _build(\\r\\n        AuthType authType,\\r\\n        bool isAnon,\\r\\n        uint256 userId,\\r\\n        bool isOptional,\\r\\n        bytes memory extraData\\r\\n    ) internal pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: isAnon,\\r\\n                userId: userId,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: _authIsSelectableDefaultValue(\\r\\n                    authType,\\r\\n                    userId\\r\\n                ),\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function _build(\\r\\n        AuthType authType,\\r\\n        bool isAnon,\\r\\n        uint256 userId,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser,\\r\\n        bytes memory extraData\\r\\n    ) internal pure returns (AuthRequest memory) {\\r\\n        // When `userId` is 0, it means the app does not require a specific auth account and the user needs\\r\\n        // to choose the account they want to use for the app.\\r\\n        // When `isSelectableByUser` is true, the user can select the account they want to use.\\r\\n        // The combination of `userId = 0` and `isSelectableByUser = false` does not make sense and should not be used.\\r\\n        // If this combination is detected, the function will revert with an error.\\r\\n        if (\\r\\n            authType != AuthType.VAULT &&\\r\\n            userId == 0 &&\\r\\n            isSelectableByUser == false\\r\\n        ) {\\r\\n            revert InvalidUserIdAndIsSelectableByUserAuthType();\\r\\n        }\\r\\n        // When requesting an authType VAULT, the `userId` must be 0 and isSelectableByUser must be true.\\r\\n        if (\\r\\n            authType == AuthType.VAULT &&\\r\\n            userId != 0 &&\\r\\n            isSelectableByUser == false\\r\\n        ) {\\r\\n            revert InvalidUserIdAndAuthType();\\r\\n        }\\r\\n        return\\r\\n            AuthRequest({\\r\\n                authType: authType,\\r\\n                isAnon: isAnon,\\r\\n                userId: userId,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function _authIsSelectableDefaultValue(\\r\\n        AuthType authType,\\r\\n        uint256 requestedUserId\\r\\n    ) internal pure returns (bool) {\\r\\n        // isSelectableByUser value should always be false in case of VAULT authType.\\r\\n        // This is because the user can't select the account they want to use for the app.\\r\\n        // the userId = Hash(VaultSecret, AppId) in the case of VAULT authType.\\r\\n        if (authType == AuthType.VAULT) {\\r\\n            return false;\\r\\n        }\\r\\n        // When `requestedUserId` is 0, it means no specific auth account is requested by the app,\\r\\n        // so we want the default value for `isSelectableByUser` to be `true`.\\r\\n        if (requestedUserId == 0) {\\r\\n            return true;\\r\\n        }\\r\\n        // When `requestedUserId` is not 0, it means a specific auth account is requested by the app,\\r\\n        // so we want the default value for `isSelectableByUser` to be `false`.\\r\\n        else {\\r\\n            return false;\\r\\n        }\\r\\n        // However, the dev can still override this default value by setting `isSelectableByUser` to `true`.\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf66737a67a424a42db5a6356fa577712ca07e5a89a2667a7ef3bb2abfc054913\",\"license\":\"MIT\"},\"contracts/helpers/sismo/utils/ClaimRequestBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./Structs.sol\\\";\\r\\n\\r\\ncontract ClaimRequestBuilder {\\r\\n    // default value for Claim Request\\r\\n    bytes16 public constant DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP =\\r\\n        bytes16(\\\"latest\\\");\\r\\n    uint256 public constant DEFAULT_CLAIM_REQUEST_VALUE = 1;\\r\\n    ClaimType public constant DEFAULT_CLAIM_REQUEST_TYPE = ClaimType.GTE;\\r\\n    bool public constant DEFAULT_CLAIM_REQUEST_IS_OPTIONAL = false;\\r\\n    bool public constant DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER = true;\\r\\n    bytes public constant DEFAULT_CLAIM_REQUEST_EXTRA_DATA = \\\"\\\";\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        uint256 value,\\r\\n        ClaimType claimType,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                claimType: claimType,\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: value,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        uint256 value,\\r\\n        ClaimType claimType,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                claimType: claimType,\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: value,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        uint256 value\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: value,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        ClaimType claimType\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: claimType,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        uint256 value\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: value,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        ClaimType claimType\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: claimType,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        uint256 value,\\r\\n        ClaimType claimType\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: value,\\r\\n                claimType: claimType,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        uint256 value,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: value,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        ClaimType claimType,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: claimType,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        uint256 value,\\r\\n        ClaimType claimType\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: value,\\r\\n                claimType: claimType,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        uint256 value,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: value,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        ClaimType claimType,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: claimType,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        uint256 value,\\r\\n        ClaimType claimType,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: value,\\r\\n                claimType: claimType,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    // allow dev to choose for isOptional\\r\\n    // we force to also set isSelectableByUser\\r\\n    // otherwise function signatures would be colliding\\r\\n    // between build(bytes16 groupId, bool isOptional) and build(bytes16 groupId, bool isSelectableByUser)\\r\\n    // we keep this logic for all function signature combinations\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        uint256 value,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: value,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        ClaimType claimType,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: claimType,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        uint256 value,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: value,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        ClaimType claimType,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: claimType,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        uint256 value,\\r\\n        ClaimType claimType,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: value,\\r\\n                claimType: claimType,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        uint256 value,\\r\\n        ClaimType claimType,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: value,\\r\\n                claimType: claimType,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7a20ce58960f47744184c31a821bf398214081669b4d766d638db3340eb9264e\",\"license\":\"MIT\"},\"contracts/helpers/sismo/utils/RequestBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./Structs.sol\\\";\\r\\nimport {SignatureBuilder} from \\\"./SignatureBuilder.sol\\\";\\r\\n\\r\\ncontract RequestBuilder {\\r\\n    // default value for namespace\\r\\n    bytes16 public constant DEFAULT_NAMESPACE = bytes16(keccak256(\\\"main\\\"));\\r\\n    // default value for a signature request\\r\\n    SignatureRequest DEFAULT_SIGNATURE_REQUEST =\\r\\n        SignatureRequest({\\r\\n            message: \\\"MESSAGE_SELECTED_BY_USER\\\",\\r\\n            isSelectableByUser: false,\\r\\n            extraData: \\\"\\\"\\r\\n        });\\r\\n\\r\\n    function build(\\r\\n        AuthRequest memory auth,\\r\\n        ClaimRequest memory claim,\\r\\n        SignatureRequest memory signature,\\r\\n        bytes16 namespace\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\r\\n        auths[0] = auth;\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\r\\n        claims[0] = claim;\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest memory auth,\\r\\n        ClaimRequest memory claim,\\r\\n        bytes16 namespace\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\r\\n        auths[0] = auth;\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\r\\n        claims[0] = claim;\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        ClaimRequest memory claim,\\r\\n        SignatureRequest memory signature,\\r\\n        bytes16 namespace\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\r\\n        claims[0] = claim;\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        ClaimRequest memory claim,\\r\\n        bytes16 namespace\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\r\\n        claims[0] = claim;\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest memory auth,\\r\\n        SignatureRequest memory signature,\\r\\n        bytes16 namespace\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\r\\n        auths[0] = auth;\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest memory auth,\\r\\n        bytes16 namespace\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\r\\n        auths[0] = auth;\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest memory auth,\\r\\n        ClaimRequest memory claim,\\r\\n        SignatureRequest memory signature\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\r\\n        auths[0] = auth;\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\r\\n        claims[0] = claim;\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest memory auth,\\r\\n        ClaimRequest memory claim\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\r\\n        auths[0] = auth;\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\r\\n        claims[0] = claim;\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest memory auth,\\r\\n        SignatureRequest memory signature\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\r\\n        auths[0] = auth;\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest memory auth\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\r\\n        auths[0] = auth;\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        ClaimRequest memory claim,\\r\\n        SignatureRequest memory signature\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\r\\n        claims[0] = claim;\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        ClaimRequest memory claim\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\r\\n        claims[0] = claim;\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // build with arrays for auths and claims\\r\\n    function build(\\r\\n        AuthRequest[] memory auths,\\r\\n        ClaimRequest[] memory claims,\\r\\n        SignatureRequest memory signature,\\r\\n        bytes16 namespace\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest[] memory auths,\\r\\n        ClaimRequest[] memory claims,\\r\\n        bytes16 namespace\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        ClaimRequest[] memory claims,\\r\\n        SignatureRequest memory signature,\\r\\n        bytes16 namespace\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        ClaimRequest[] memory claims,\\r\\n        bytes16 namespace\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest[] memory auths,\\r\\n        SignatureRequest memory signature,\\r\\n        bytes16 namespace\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest[] memory auths,\\r\\n        bytes16 namespace\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest[] memory auths,\\r\\n        ClaimRequest[] memory claims,\\r\\n        SignatureRequest memory signature\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest[] memory auths,\\r\\n        ClaimRequest[] memory claims\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest[] memory auths,\\r\\n        SignatureRequest memory signature\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest[] memory auths\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        ClaimRequest[] memory claims,\\r\\n        SignatureRequest memory signature\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        ClaimRequest[] memory claims\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xed1a2ba47be3b4a971b949842363c0e14180ebcf10d808075091a2330e5973fd\",\"license\":\"MIT\"},\"contracts/helpers/sismo/utils/SignatureBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./Structs.sol\\\";\\r\\n\\r\\ncontract SignatureBuilder {\\r\\n    // default values for Signature Request\\r\\n    bytes public constant DEFAULT_SIGNATURE_REQUEST_MESSAGE =\\r\\n        \\\"MESSAGE_SELECTED_BY_USER\\\";\\r\\n    bool public constant DEFAULT_SIGNATURE_REQUEST_IS_SELECTABLE_BY_USER =\\r\\n        false;\\r\\n    bytes public constant DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA = \\\"\\\";\\r\\n\\r\\n    function build(\\r\\n        bytes memory message\\r\\n    ) external pure returns (SignatureRequest memory) {\\r\\n        return\\r\\n            SignatureRequest({\\r\\n                message: message,\\r\\n                isSelectableByUser: DEFAULT_SIGNATURE_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes memory message,\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (SignatureRequest memory) {\\r\\n        return\\r\\n            SignatureRequest({\\r\\n                message: message,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes memory message,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (SignatureRequest memory) {\\r\\n        return\\r\\n            SignatureRequest({\\r\\n                message: message,\\r\\n                isSelectableByUser: DEFAULT_SIGNATURE_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes memory message,\\r\\n        bool isSelectableByUser,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (SignatureRequest memory) {\\r\\n        return\\r\\n            SignatureRequest({\\r\\n                message: message,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (SignatureRequest memory) {\\r\\n        return\\r\\n            SignatureRequest({\\r\\n                message: DEFAULT_SIGNATURE_REQUEST_MESSAGE,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bool isSelectableByUser,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (SignatureRequest memory) {\\r\\n        return\\r\\n            SignatureRequest({\\r\\n                message: DEFAULT_SIGNATURE_REQUEST_MESSAGE,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function buildEmpty() external pure returns (SignatureRequest memory) {\\r\\n        return\\r\\n            SignatureRequest({\\r\\n                message: DEFAULT_SIGNATURE_REQUEST_MESSAGE,\\r\\n                isSelectableByUser: DEFAULT_SIGNATURE_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1ddc35c54605315cefa153e2752c5efc9970072bae955420b527cf2711fa89b0\",\"license\":\"MIT\"},\"contracts/helpers/sismo/utils/SismoConnectHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./Structs.sol\\\";\\r\\n\\r\\nlibrary SismoConnectHelper {\\r\\n    error AuthTypeNotFoundInVerifiedResult(AuthType authType);\\r\\n\\r\\n    function getUserId(\\r\\n        SismoConnectVerifiedResult memory result,\\r\\n        AuthType authType\\r\\n    ) internal pure returns (uint256) {\\r\\n        // get the first userId that matches the authType\\r\\n        for (uint256 i = 0; i < result.auths.length; i++) {\\r\\n            if (result.auths[i].authType == authType) {\\r\\n                return result.auths[i].userId;\\r\\n            }\\r\\n        }\\r\\n        revert AuthTypeNotFoundInVerifiedResult(authType);\\r\\n    }\\r\\n\\r\\n    function getUserIds(\\r\\n        SismoConnectVerifiedResult memory result,\\r\\n        AuthType authType\\r\\n    ) internal pure returns (uint256[] memory) {\\r\\n        // get all userIds that match the authType\\r\\n        uint256[] memory userIds = new uint256[](result.auths.length);\\r\\n        for (uint256 i = 0; i < result.auths.length; i++) {\\r\\n            if (result.auths[i].authType == authType) {\\r\\n                userIds[i] = result.auths[i].userId;\\r\\n            }\\r\\n        }\\r\\n        return userIds;\\r\\n    }\\r\\n\\r\\n    function getSignedMessage(\\r\\n        SismoConnectVerifiedResult memory result\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        return result.signedMessage;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x08c39ecd8cf8b6ed3028f1b135cd20b3a2b5acf961728a6f7ab5622a66f1fcde\",\"license\":\"MIT\"},\"contracts/helpers/sismo/utils/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nstruct SismoConnectRequest {\\r\\n    bytes16 namespace;\\r\\n    AuthRequest[] auths;\\r\\n    ClaimRequest[] claims;\\r\\n    SignatureRequest signature;\\r\\n}\\r\\n\\r\\nstruct SismoConnectConfig {\\r\\n    bytes16 appId;\\r\\n    VaultConfig vault;\\r\\n}\\r\\n\\r\\nstruct VaultConfig {\\r\\n    bool isImpersonationMode;\\r\\n}\\r\\n\\r\\nstruct AuthRequest {\\r\\n    AuthType authType;\\r\\n    uint256 userId; // default: 0\\r\\n    // flags\\r\\n    bool isAnon; // default: false -> true not supported yet, need to throw if true\\r\\n    bool isOptional; // default: false\\r\\n    bool isSelectableByUser; // default: true\\r\\n    //\\r\\n    bytes extraData; // default: \\\"\\\"\\r\\n}\\r\\n\\r\\nstruct ClaimRequest {\\r\\n    ClaimType claimType; // default: GTE\\r\\n    bytes16 groupId;\\r\\n    bytes16 groupTimestamp; // default: bytes16(\\\"latest\\\")\\r\\n    uint256 value; // default: 1\\r\\n    // flags\\r\\n    bool isOptional; // default: false\\r\\n    bool isSelectableByUser; // default: true\\r\\n    //\\r\\n    bytes extraData; // default: \\\"\\\"\\r\\n}\\r\\n\\r\\nstruct SignatureRequest {\\r\\n    bytes message; // default: \\\"MESSAGE_SELECTED_BY_USER\\\"\\r\\n    bool isSelectableByUser; // default: false\\r\\n    bytes extraData; // default: \\\"\\\"\\r\\n}\\r\\n\\r\\nenum AuthType {\\r\\n    VAULT,\\r\\n    GITHUB,\\r\\n    TWITTER,\\r\\n    EVM_ACCOUNT,\\r\\n    TELEGRAM,\\r\\n    DISCORD\\r\\n}\\r\\n\\r\\nenum ClaimType {\\r\\n    GTE,\\r\\n    GT,\\r\\n    EQ,\\r\\n    LT,\\r\\n    LTE\\r\\n}\\r\\n\\r\\nstruct Auth {\\r\\n    AuthType authType;\\r\\n    bool isAnon;\\r\\n    bool isSelectableByUser;\\r\\n    uint256 userId;\\r\\n    bytes extraData;\\r\\n}\\r\\n\\r\\nstruct Claim {\\r\\n    ClaimType claimType;\\r\\n    bytes16 groupId;\\r\\n    bytes16 groupTimestamp;\\r\\n    bool isSelectableByUser;\\r\\n    uint256 value;\\r\\n    bytes extraData;\\r\\n}\\r\\n\\r\\nstruct Signature {\\r\\n    bytes message;\\r\\n    bytes extraData;\\r\\n}\\r\\n\\r\\nstruct SismoConnectResponse {\\r\\n    bytes16 appId;\\r\\n    bytes16 namespace;\\r\\n    bytes32 version;\\r\\n    bytes signedMessage;\\r\\n    SismoConnectProof[] proofs;\\r\\n}\\r\\n\\r\\nstruct SismoConnectProof {\\r\\n    Auth[] auths;\\r\\n    Claim[] claims;\\r\\n    bytes32 provingScheme;\\r\\n    bytes proofData;\\r\\n    bytes extraData;\\r\\n}\\r\\n\\r\\nstruct SismoConnectVerifiedResult {\\r\\n    bytes16 appId;\\r\\n    bytes16 namespace;\\r\\n    bytes32 version;\\r\\n    VerifiedAuth[] auths;\\r\\n    VerifiedClaim[] claims;\\r\\n    bytes signedMessage;\\r\\n}\\r\\n\\r\\nstruct VerifiedAuth {\\r\\n    AuthType authType;\\r\\n    bool isAnon;\\r\\n    uint256 userId;\\r\\n    bytes extraData;\\r\\n    bytes proofData;\\r\\n}\\r\\n\\r\\nstruct VerifiedClaim {\\r\\n    ClaimType claimType;\\r\\n    bytes16 groupId;\\r\\n    bytes16 groupTimestamp;\\r\\n    uint256 value;\\r\\n    bytes extraData;\\r\\n    uint256 proofId;\\r\\n    bytes proofData;\\r\\n}\\r\\n\",\"keccak256\":\"0x0d7238088b9d4b679f489531b76e4dbf851e7c33a2a8b50a786273125aa0e623\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610160604081815234620004d7578162002a4480380380916200002382856200052a565b8339602093849181010312620004d757516001600160801b03198082169290838303620004d7578151906200005882620004dc565b600091828152868451916200006d836200050e565b848352015281835162000080816200050e565b528251946200008f866200050e565b828652835190620000a082620004dc565b8082528782019687521562000493578551516200044357819051169461012095865251511515936101409485528351620000da81620004dc565b601981527f7369736d6f436f6e6e65637456657269666965722d76312e320000000000000088820152845190816200012163349f642f60e11b92838352600483016200056f565b038983733cd5334eb64ebbd4003b72022cc25465f1bfcee69281845afa9283156200043957869362000415575b506001600160a01b039283166080528651620001ad908b906200017181620004dc565b601781527f61757468526571756573744275696c6465722d76312e3100000000000000000082820152895180938192878352600483016200056f565b0381855afa908115620003c7579084918891620003f3575b501660a052620002188a8851620001dc81620004dc565b601881527f636c61696d526571756573744275696c6465722d76312e31000000000000000082820152895180938192878352600483016200056f565b0381855afa908115620003c7579084918891620003d1575b501660c052620002838a88516200024781620004dc565b601581527f7369676e61747572654275696c6465722d76312e31000000000000000000000082820152895180938192878352600483016200056f565b0381855afa908115620003c7579184620002f294928d948a91620003a5575b501660e052885191620002b583620004dc565b601383527f726571756573744275696c6465722d76312e31000000000000000000000000008484015289518095819482938352600483016200056f565b03915afa9889156200039b57859962000365575b50506101009716875260801c9082541617905551916124899384620005bb853960805184610fd4015260a05184610379015260c05184505060e051846105ac01525183610d8a0152518281816101000152611fd40152518161015a0152f35b6200038a929950803d1062000393575b6200038181836200052a565b8101906200054e565b96388062000306565b503d62000375565b86513d87823e3d90fd5b620003c09150853d871162000393576200038181836200052a565b38620002a2565b88513d89823e3d90fd5b620003ec91508c8d3d1062000393576200038181836200052a565b3862000230565b6200040e91508c8d3d1062000393576200038181836200052a565b38620001c5565b620004319193508a3d8c1162000393576200038181836200052a565b91386200014e565b87513d88823e3d90fd5b835162461bcd60e51b815260048101889052602360248201527f696d706572736f6e6174696f6e206d6f6465206973206e6f7420737570706f726044820152621d195960ea1b6064820152608490fd5b835162461bcd60e51b815260048101889052601560248201527f61707049642063616e6e6f7420626520656d70747900000000000000000000006044820152606490fd5b600080fd5b604081019081106001600160401b03821117620004f857604052565b634e487b7160e01b600052604160045260246000fd5b602081019081106001600160401b03821117620004f857604052565b601f909101601f19168101906001600160401b03821190821017620004f857604052565b90816020910312620004d757516001600160a01b0381168103620004d75790565b6020808252825181830181905290939260005b828110620005a557505060409293506000838284010152601f8019910116010190565b8181018601518482016040015285016200058256fe6101e0604052600436101561001357600080fd5b60003560e01c8063119f0991146102a3578063469163011461025657806379502c55146101e057806380afdea81461017f578063a183dc2714610124578063c187bbc1146100a95763c9512d991461006a57600080fd5b346100a45760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100a457602060405160028152f35b600080fd5b346100a45760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100a45760206040517fffffffffffffffffffffffffffffffff000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000168152f35b346100a45760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100a45760206040517f000000000000000000000000000000000000000000000000000000000000000015158152f35b346100a45760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100a457602060005460801b7fffffffffffffffffffffffffffffffff0000000000000000000000000000000060405191168152f35b346100a45760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100a4576040610219611f73565b61025482518092602080917fffffffffffffffffffffffffffffffff0000000000000000000000000000000081511684520151511515910152565bf35b346100a45760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100a4576020604051733cd5334eb64ebbd4003b72022cc25465f1bfcee68152f35b346100a45760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100a45760043567ffffffffffffffff81116100a457366023820112156100a45780600401359061030d61030183611d87565b60405180608052611d64565b816080515236602483830101116100a457816000926024602093018360805101376080510101526080515115611c135760405161034981611cbc565b6004815260005b60808110611bfc5750610361611e03565b5073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166040517f3a0ba6ff00000000000000000000000000000000000000000000000000000000815260006004820152600081602481855afa9081156115b057600091611be1575b506103e883611e38565b526103f282611e38565b506103fb611e03565b506040517fc3bcacd00000000000000000000000000000000000000000000000000000000090818152600260048201526000602482015260006044820152600081606481865afa9081156115b057600091611bc6575b5061045b84611e74565b5261046583611e74565b5061046e611e03565b50604051908082526004808301526001602483015260016044830152600082606481865afa80156115b0576000928391611bac575b506104ad85611e84565b526104b784611e84565b506104c0611e03565b5060646040518094819382526001600483015260016024830152600160448301525afa9081156115b057600091611b89575b506104fc82611e94565b5261050681611e94565b506105936000604051602080820152600d60408201527f49204c6f7665205369736d6f210000000000000000000000000000000000000060608201526060815261054f81611cd8565b610557612319565b50604051809381927f6835f32c000000000000000000000000000000000000000000000000000000008352602060048401526024830190611dc6565b038173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa9081156115b057600091611b47575b50606060a06040516105ee81611c71565b6000815260006020820152600060408201528280820152826080820152015260805180518101610140526020816101405103126100a45760208101516101005267ffffffffffffffff61010051116100a45760a09061010051016101405103126100a45760405161065e81611cbc565b61067160206101005160805101016120ee565b815261068660406101005160805101016120ee565b60208201526060610100516080510101516040820152610100516080510160808101519067ffffffffffffffff82116100a45760206106cd9281610140510192010161211b565b6060820152610100516080510160a081015160c05267ffffffffffffffff60c051116100a45760206101405101603f60c05183010112156100a45760c05101602001519161071a83611deb565b936107286040519586611d64565b838552602085019460c0516101005160805101016020610140510160408760051b830101116100a457604001610120529194935b60c05161010051608051010160408260051b820101610120511015610cca5761012051516101c05267ffffffffffffffff6101c051116100a457601f1960a0916101c05101610140510301126100a4576040516101a0526107bf6101a051611cbc565b6101c05160c05161010051608051010101604081015160e05267ffffffffffffffff60e051116100a45760206101405101605f60e05183010112156100a45760409060e0510101516101605261081761016051611deb565b956108256040519788611d64565b610160518752602087019260e0516101c05160c05161010051608051010101016020610140510160606101605160051b830101116100a457606001935b60e0516101c05160c05161010051608051010101019060606101605160051b8301018610156109c25785519167ffffffffffffffff83116100a4577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08360a09201610140510301126100a457604051916108db83611cbc565b60608160e0516101c05160c051610100516080510101010101015160068110156100a457835261092260808260e0516101c05160c051610100518551010101010101612138565b602084015261094960a08260e0516101c05160c05161010051608051010101010101612138565b604084015260c08160e0516101c05183516101005160805101010101010151606084015260e0516101c05160c0516101005160805101010101019060e08201519267ffffffffffffffff84116100a4576109b2602094936060869586610140510192010161211b565b6080820152815201940193610862565b5050939196909492506101a051526101c05160c05161010051608051010101606081015160a05267ffffffffffffffff60a051116100a45760206101405101605f60a05183010112156100a45760409060a05101015161018052610a2861018051611deb565b95610a366040519788611d64565b610180518752602087019260a0516101c05160c05161010051608051010101016020610140510160606101805160051b830101116100a457606001935b60a0516101c05160c05161010051608051010101019060606101805160051b830101861015610bfa5785519167ffffffffffffffff83116100a4577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08360c09201610140510301126100a45760405191610aec83611c71565b60608160a0516101c05160c051610100516080510101010101015160058110156100a4578352610b3360808260a0516101c05160c0516101005185510101010101016120ee565b6020840152610b5960a08281516101c05160c051610100516080510101010101016120ee565b6040840152610b7f60c08260a0516101c051835161010051608051010101010101612138565b606084015260e08160a0516101c05160c0516101005160805101010101010151608084015260a0516101c05160c051610100516080510101010101906101008201519267ffffffffffffffff84116100a457610bea602094936060869586610140510192010161211b565b60a0820152815201940193610a73565b50509493925094909560206101a051015260806101c05160c051610100518351010101015160406101a05101526101c05160c0516101005160805101010160a08101519067ffffffffffffffff82116100a4576040610c62926020610140510192010161211b565b60606101a05101526101c05160c051610100516080510101019060c082015167ffffffffffffffff81116100a4576020926040610ca79285610140510192010161211b565b60806101a05101526101a05181520194602061012051016101205291949361075c565b84876000610d4186886080860152604051610ce481611cd8565b83815260606020820152606060408201526060610cff612319565b910152610d7160405194859384937f2ceb1e8d00000000000000000000000000000000000000000000000000000000855260406004860152604485019061218e565b907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc848303016024850152612231565b038173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa9081156115b05760009161187c575b5090610dc5611f73565b906040519283917f12b037ff000000000000000000000000000000000000000000000000000000008352608060048401527fffffffffffffffffffffffffffffffff0000000000000000000000000000000081511660848401527fffffffffffffffffffffffffffffffff0000000000000000000000000000000060208201511660a4840152604081015160c48401526080610e71606083015160a060e4870152610124860190611dc6565b910151907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7c84820301610104850152815180825260208201916020808360051b8301019401926000915b8383106116845750505050507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8382030160248401527fffffffffffffffffffffffffffffffff000000000000000000000000000000008251168152610f30602083015160806020840152608083019061218e565b916040810151928281036040840152835180825260208201916020808360051b8301019601926000915b8383106115bc5788600081808d610fbb610f828e8e60608f0151906060818403910152612231565b82517fffffffffffffffffffffffffffffffff000000000000000000000000000000001660448501526020909201515115156064840152565b038173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa9081156115b057600091611204575b5060a081015180518101906020818184019303126100a45760208101519067ffffffffffffffff82116100a457019080603f830112156100a457602082015161105092604001611eb8565b60405161107a6020828161106d8183019687815193849201611da3565b8101038084520182611d64565b51902060405160208101907f49204c6f7665205369736d6f21000000000000000000000000000000000000008252600d81526110b581611d10565b519020036111a65760608101805151601f196110e96110d383611deb565b926110e16040519485611d64565b808452611deb565b0160005b81811061116d57505060005b8251805182101561113357906111128161112e93611ea4565b5161111d8285611ea4565b526111288184611ea4565b50611eef565b6110f9565b61116961113f866123a0565b6040519060208201526020815261115581611d10565b604051918291602083526020830190611dc6565b0390f35b60209060405161117c81611cbc565b600081526000838201526000604082015260608082015260606080820152828286010152016110ed565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f496e76616c6964207369676e61747572650000000000000000000000000000006044820152fd5b90503d806000833e6112168183611d64565b60208282810103126100a45781519167ffffffffffffffff83116100a45760c083820183830103126100a4576040519261124f84611c71565b61125a8183016120ee565b845261126a6020828401016120ee565b6020850152818101604081810151908601526060015167ffffffffffffffff81116100a457838301601f82848601010112156100a4578082840101516112af81611deb565b916112bd6040519384611d64565b8183526020830186860160208460051b84888a01010101116100a4576020828688010101905b60208460051b84888a0101010182106114c3575050505060608501526080818301015167ffffffffffffffff81116100a457838301601f82848601010112156100a45780828401015161133581611deb565b916113436040519384611d64565b8183526020830186860160208460051b84888a01010101116100a4576020828688010101905b60208460051b84888a0101010182106113b55750505050608085015260a081830101519067ffffffffffffffff82116100a4576113aa93830192010161211b565b60a082015281611005565b815167ffffffffffffffff81116100a45760e0601f1982868a8c0101018b8b010301126100a457604051916113e983611cf4565b602082868a8c010101015160058110156100a4578352611411604083878b8d010101016120ee565b6020840152611428606083878b8d010101016120ee565b6040840152888801850182016080810151606085015260a0015167ffffffffffffffff81116100a457611469908b8b01908a8c01880185010160200161211b565b60808401528888018501820160c081015160a085015260e001519067ffffffffffffffff82116100a4576020936114b18b868096958f968b8f8499860195010101010161211b565b60c08201528152019201919050611369565b815167ffffffffffffffff81116100a45760a0601f1982868a8c0101018b8b010301126100a457604051916114f783611cbc565b602082868a8c010101015160068110156100a457835261151f604083878b8d01010101612138565b602084015288880185018201606081015160408501526080015167ffffffffffffffff81116100a457611560908b8b01908a8c01880185010160200161211b565b606084015260a082868a8c01010101519067ffffffffffffffff82116100a45760209361159e8b868096958f968b8f8499860195010101010161211b565b608082015281520192019190506112e3565b6040513d6000823e3d90fd5b919397509193949560208061167083601f19866001960301875260e08c51916115e6818451612181565b7fffffffffffffffffffffffffffffffff000000000000000000000000000000008584015116858201527fffffffffffffffffffffffffffffffff0000000000000000000000000000000060408401511660408201526060830151606082015260808301511515608082015260a0830151151560a08201528160c080940151938201520190611dc6565b990193019301909289979695949293610f5a565b91939596509193601f1982820301835285519060a0810182519060a08352815180915260c08301602060c08360051b86010193019160005b8181106117fb575050505060208301519082810360208401528151808252602082016020808360051b85010194019260005b83811061174a575050505050611737836020936080611726869560406001990151604085015260608501518482036060860152611dc6565b920151906080818403910152611dc6565b9701930193019092889695949293610ebb565b90919293946020806117ee83601f19876001960301885260c060a08b51611772848251612181565b7fffffffffffffffffffffffffffffffff000000000000000000000000000000008682015116868501527fffffffffffffffffffffffffffffffff000000000000000000000000000000006040820151166040850152606081015115156060850152608081015160808501520151918160a08201520190611dc6565b97019594019291016116ee565b90919293602080611870837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff408a6001960301885260a060808a51611840848251612145565b85810151151586850152604081015115156040850152606081015160608501520151918160808201520190611dc6565b960194019291016116bc565b90503d806000833e61188e8183611d64565b60208282810103126100a45781519167ffffffffffffffff83116100a457608083820183830103126100a457604051926118c784611cd8565b6118d28183016120ee565b84526020818301015167ffffffffffffffff81116100a457838301601f82848601010112156100a45780828401015161190a81611deb565b916119186040519384611d64565b8183526020830186860160208460051b84888a01010101116100a4576020828688010101905b60208460051b84888a010101018210611b0c575050505060208501526040818301015167ffffffffffffffff81116100a457838301601f82848601010112156100a45780828401015161199081611deb565b9161199e6040519384611d64565b8183526020830186860160208460051b84888a01010101116100a4576020828688010101905b60208460051b84888a010101018210611a1057505050506040850152606081830101519067ffffffffffffffff82116100a457611a05938301920101612339565b606082015282610dbb565b815167ffffffffffffffff81116100a45760e0601f1982868a8c0101018b8b010301126100a45760405191611a4483611cf4565b602082868a8c010101015160058110156100a4578352611a6c604083878b8d010101016120ee565b6020840152611a83606083878b8d010101016120ee565b60408401528888018501820160808101516060850152611aa59060a001612138565b6080840152611abc60c083878b8d01010101612138565b60a084015260e082868a8c01010101519067ffffffffffffffff82116100a457602093611afa8b868096958f968b8f8499860195010101010161211b565b60c082015281520192019190506119c4565b81519067ffffffffffffffff82116100a4576020809291611b3a8a838095898f8e9085019401010101612267565b815201920191905061193e565b3d9150816000823e611b598282611d64565b60208183810103126100a457805167ffffffffffffffff81116100a457611b839282019101612339565b826105dd565b611ba691503d806000833e611b9e8183611d64565b8101906122f3565b826104f2565b611bc091503d8085833e611b9e8183611d64565b856104a3565b611bdb91503d806000833e611b9e8183611d64565b84610451565b611bf691503d806000833e611b9e8183611d64565b836103de565b602090611c07611e03565b82828501015201610350565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f656d70747920726573706f6e73650000000000000000000000000000000000006044820152fd5b60c0810190811067ffffffffffffffff821117611c8d57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60a0810190811067ffffffffffffffff821117611c8d57604052565b6080810190811067ffffffffffffffff821117611c8d57604052565b60e0810190811067ffffffffffffffff821117611c8d57604052565b6040810190811067ffffffffffffffff821117611c8d57604052565b6020810190811067ffffffffffffffff821117611c8d57604052565b6060810190811067ffffffffffffffff821117611c8d57604052565b90601f601f19910116810190811067ffffffffffffffff821117611c8d57604052565b67ffffffffffffffff8111611c8d57601f01601f191660200190565b60005b838110611db65750506000910152565b8181015183820152602001611da6565b90601f19601f602093611de481518092818752878088019101611da3565b0116010190565b67ffffffffffffffff8111611c8d5760051b60200190565b60405190611e1082611c71565b606060a083600081526000602082015260006040820152600083820152600060808201520152565b805115611e455760200190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b805160011015611e455760400190565b805160021015611e455760600190565b805160031015611e455760800190565b8051821015611e455760209160051b010190565b90929192611ec581611d87565b91611ed36040519384611d64565b8294828452828201116100a4576020611eed930190611da3565b565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114611f1c5760010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60405190611f5882611d10565b60008252604051602083611f6b83611d2c565b600083520152565b611f7b611f4b565b50611f84611f4b565b506000604051611f9381611d2c565b52604051611fa081611d2c565b6000815260405190611fb182611d10565b7fffffffffffffffffffffffffffffffff000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000016808352602083019182521561209057515161200c5790565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f696d706572736f6e6174696f6e206d6f6465206973206e6f7420737570706f7260448201527f74656400000000000000000000000000000000000000000000000000000000006064820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f61707049642063616e6e6f7420626520656d70747900000000000000000000006044820152fd5b51907fffffffffffffffffffffffffffffffff00000000000000000000000000000000821682036100a457565b9080601f830112156100a457815161213592602001611eb8565b90565b519081151582036100a457565b9060068210156121525752565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9060058210156121525752565b908082519081815260208091019281808460051b8301019501936000915b8483106121bc5750505050505090565b909192939495848061222183601f1986600196030187528a516121e0828251612145565b838101518483015260408082015115159083015260608082015115159083015260808082015115159083015260a0809101519160c080928201520190611dc6565b98019301930191949392906121ac565b61213591604061224a8351606084526060840190611dc6565b926020810151151560208401520151906040818403910152611dc6565b919060c0838203126100a4576040519061228082611c71565b8193805160068110156100a4578352602081015160208401526122a560408201612138565b60408401526122b660608201612138565b60608401526122c760808201612138565b608084015260a08101519167ffffffffffffffff83116100a45760a0926122ee920161211b565b910152565b906020828203126100a457815167ffffffffffffffff81116100a4576121359201612267565b6040519061232682611d48565b6060604083828152600060208201520152565b91906060838203126100a4576040519061235282611d48565b819380519167ffffffffffffffff928381116100a4578161237491840161211b565b845261238260208301612138565b602085015260408201519283116100a4576040926122ee920161211b565b6000805b606083018051805183101561242257826123bd91611ea4565b515160068110156123f557156123e057506123d9606091611eef565b90506123a4565b604093506123ef925051611ea4565b51015190565b6024847f4e487b710000000000000000000000000000000000000000000000000000000081526021600452fd5b602484604051907f267ac2cf0000000000000000000000000000000000000000000000000000000082526004820152fdfea2646970667358221220a18284b1c6084451bfe3785d9d9293ee7995b561a7295b43ee25a7ec2d82a88764736f6c63430008130033",
  "deployedBytecode": "0x6101e0604052600436101561001357600080fd5b60003560e01c8063119f0991146102a3578063469163011461025657806379502c55146101e057806380afdea81461017f578063a183dc2714610124578063c187bbc1146100a95763c9512d991461006a57600080fd5b346100a45760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100a457602060405160028152f35b600080fd5b346100a45760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100a45760206040517fffffffffffffffffffffffffffffffff000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000168152f35b346100a45760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100a45760206040517f000000000000000000000000000000000000000000000000000000000000000015158152f35b346100a45760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100a457602060005460801b7fffffffffffffffffffffffffffffffff0000000000000000000000000000000060405191168152f35b346100a45760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100a4576040610219611f73565b61025482518092602080917fffffffffffffffffffffffffffffffff0000000000000000000000000000000081511684520151511515910152565bf35b346100a45760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100a4576020604051733cd5334eb64ebbd4003b72022cc25465f1bfcee68152f35b346100a45760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100a45760043567ffffffffffffffff81116100a457366023820112156100a45780600401359061030d61030183611d87565b60405180608052611d64565b816080515236602483830101116100a457816000926024602093018360805101376080510101526080515115611c135760405161034981611cbc565b6004815260005b60808110611bfc5750610361611e03565b5073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166040517f3a0ba6ff00000000000000000000000000000000000000000000000000000000815260006004820152600081602481855afa9081156115b057600091611be1575b506103e883611e38565b526103f282611e38565b506103fb611e03565b506040517fc3bcacd00000000000000000000000000000000000000000000000000000000090818152600260048201526000602482015260006044820152600081606481865afa9081156115b057600091611bc6575b5061045b84611e74565b5261046583611e74565b5061046e611e03565b50604051908082526004808301526001602483015260016044830152600082606481865afa80156115b0576000928391611bac575b506104ad85611e84565b526104b784611e84565b506104c0611e03565b5060646040518094819382526001600483015260016024830152600160448301525afa9081156115b057600091611b89575b506104fc82611e94565b5261050681611e94565b506105936000604051602080820152600d60408201527f49204c6f7665205369736d6f210000000000000000000000000000000000000060608201526060815261054f81611cd8565b610557612319565b50604051809381927f6835f32c000000000000000000000000000000000000000000000000000000008352602060048401526024830190611dc6565b038173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa9081156115b057600091611b47575b50606060a06040516105ee81611c71565b6000815260006020820152600060408201528280820152826080820152015260805180518101610140526020816101405103126100a45760208101516101005267ffffffffffffffff61010051116100a45760a09061010051016101405103126100a45760405161065e81611cbc565b61067160206101005160805101016120ee565b815261068660406101005160805101016120ee565b60208201526060610100516080510101516040820152610100516080510160808101519067ffffffffffffffff82116100a45760206106cd9281610140510192010161211b565b6060820152610100516080510160a081015160c05267ffffffffffffffff60c051116100a45760206101405101603f60c05183010112156100a45760c05101602001519161071a83611deb565b936107286040519586611d64565b838552602085019460c0516101005160805101016020610140510160408760051b830101116100a457604001610120529194935b60c05161010051608051010160408260051b820101610120511015610cca5761012051516101c05267ffffffffffffffff6101c051116100a457601f1960a0916101c05101610140510301126100a4576040516101a0526107bf6101a051611cbc565b6101c05160c05161010051608051010101604081015160e05267ffffffffffffffff60e051116100a45760206101405101605f60e05183010112156100a45760409060e0510101516101605261081761016051611deb565b956108256040519788611d64565b610160518752602087019260e0516101c05160c05161010051608051010101016020610140510160606101605160051b830101116100a457606001935b60e0516101c05160c05161010051608051010101019060606101605160051b8301018610156109c25785519167ffffffffffffffff83116100a4577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08360a09201610140510301126100a457604051916108db83611cbc565b60608160e0516101c05160c051610100516080510101010101015160068110156100a457835261092260808260e0516101c05160c051610100518551010101010101612138565b602084015261094960a08260e0516101c05160c05161010051608051010101010101612138565b604084015260c08160e0516101c05183516101005160805101010101010151606084015260e0516101c05160c0516101005160805101010101019060e08201519267ffffffffffffffff84116100a4576109b2602094936060869586610140510192010161211b565b6080820152815201940193610862565b5050939196909492506101a051526101c05160c05161010051608051010101606081015160a05267ffffffffffffffff60a051116100a45760206101405101605f60a05183010112156100a45760409060a05101015161018052610a2861018051611deb565b95610a366040519788611d64565b610180518752602087019260a0516101c05160c05161010051608051010101016020610140510160606101805160051b830101116100a457606001935b60a0516101c05160c05161010051608051010101019060606101805160051b830101861015610bfa5785519167ffffffffffffffff83116100a4577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08360c09201610140510301126100a45760405191610aec83611c71565b60608160a0516101c05160c051610100516080510101010101015160058110156100a4578352610b3360808260a0516101c05160c0516101005185510101010101016120ee565b6020840152610b5960a08281516101c05160c051610100516080510101010101016120ee565b6040840152610b7f60c08260a0516101c051835161010051608051010101010101612138565b606084015260e08160a0516101c05160c0516101005160805101010101010151608084015260a0516101c05160c051610100516080510101010101906101008201519267ffffffffffffffff84116100a457610bea602094936060869586610140510192010161211b565b60a0820152815201940193610a73565b50509493925094909560206101a051015260806101c05160c051610100518351010101015160406101a05101526101c05160c0516101005160805101010160a08101519067ffffffffffffffff82116100a4576040610c62926020610140510192010161211b565b60606101a05101526101c05160c051610100516080510101019060c082015167ffffffffffffffff81116100a4576020926040610ca79285610140510192010161211b565b60806101a05101526101a05181520194602061012051016101205291949361075c565b84876000610d4186886080860152604051610ce481611cd8565b83815260606020820152606060408201526060610cff612319565b910152610d7160405194859384937f2ceb1e8d00000000000000000000000000000000000000000000000000000000855260406004860152604485019061218e565b907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc848303016024850152612231565b038173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa9081156115b05760009161187c575b5090610dc5611f73565b906040519283917f12b037ff000000000000000000000000000000000000000000000000000000008352608060048401527fffffffffffffffffffffffffffffffff0000000000000000000000000000000081511660848401527fffffffffffffffffffffffffffffffff0000000000000000000000000000000060208201511660a4840152604081015160c48401526080610e71606083015160a060e4870152610124860190611dc6565b910151907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7c84820301610104850152815180825260208201916020808360051b8301019401926000915b8383106116845750505050507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8382030160248401527fffffffffffffffffffffffffffffffff000000000000000000000000000000008251168152610f30602083015160806020840152608083019061218e565b916040810151928281036040840152835180825260208201916020808360051b8301019601926000915b8383106115bc5788600081808d610fbb610f828e8e60608f0151906060818403910152612231565b82517fffffffffffffffffffffffffffffffff000000000000000000000000000000001660448501526020909201515115156064840152565b038173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa9081156115b057600091611204575b5060a081015180518101906020818184019303126100a45760208101519067ffffffffffffffff82116100a457019080603f830112156100a457602082015161105092604001611eb8565b60405161107a6020828161106d8183019687815193849201611da3565b8101038084520182611d64565b51902060405160208101907f49204c6f7665205369736d6f21000000000000000000000000000000000000008252600d81526110b581611d10565b519020036111a65760608101805151601f196110e96110d383611deb565b926110e16040519485611d64565b808452611deb565b0160005b81811061116d57505060005b8251805182101561113357906111128161112e93611ea4565b5161111d8285611ea4565b526111288184611ea4565b50611eef565b6110f9565b61116961113f866123a0565b6040519060208201526020815261115581611d10565b604051918291602083526020830190611dc6565b0390f35b60209060405161117c81611cbc565b600081526000838201526000604082015260608082015260606080820152828286010152016110ed565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f496e76616c6964207369676e61747572650000000000000000000000000000006044820152fd5b90503d806000833e6112168183611d64565b60208282810103126100a45781519167ffffffffffffffff83116100a45760c083820183830103126100a4576040519261124f84611c71565b61125a8183016120ee565b845261126a6020828401016120ee565b6020850152818101604081810151908601526060015167ffffffffffffffff81116100a457838301601f82848601010112156100a4578082840101516112af81611deb565b916112bd6040519384611d64565b8183526020830186860160208460051b84888a01010101116100a4576020828688010101905b60208460051b84888a0101010182106114c3575050505060608501526080818301015167ffffffffffffffff81116100a457838301601f82848601010112156100a45780828401015161133581611deb565b916113436040519384611d64565b8183526020830186860160208460051b84888a01010101116100a4576020828688010101905b60208460051b84888a0101010182106113b55750505050608085015260a081830101519067ffffffffffffffff82116100a4576113aa93830192010161211b565b60a082015281611005565b815167ffffffffffffffff81116100a45760e0601f1982868a8c0101018b8b010301126100a457604051916113e983611cf4565b602082868a8c010101015160058110156100a4578352611411604083878b8d010101016120ee565b6020840152611428606083878b8d010101016120ee565b6040840152888801850182016080810151606085015260a0015167ffffffffffffffff81116100a457611469908b8b01908a8c01880185010160200161211b565b60808401528888018501820160c081015160a085015260e001519067ffffffffffffffff82116100a4576020936114b18b868096958f968b8f8499860195010101010161211b565b60c08201528152019201919050611369565b815167ffffffffffffffff81116100a45760a0601f1982868a8c0101018b8b010301126100a457604051916114f783611cbc565b602082868a8c010101015160068110156100a457835261151f604083878b8d01010101612138565b602084015288880185018201606081015160408501526080015167ffffffffffffffff81116100a457611560908b8b01908a8c01880185010160200161211b565b606084015260a082868a8c01010101519067ffffffffffffffff82116100a45760209361159e8b868096958f968b8f8499860195010101010161211b565b608082015281520192019190506112e3565b6040513d6000823e3d90fd5b919397509193949560208061167083601f19866001960301875260e08c51916115e6818451612181565b7fffffffffffffffffffffffffffffffff000000000000000000000000000000008584015116858201527fffffffffffffffffffffffffffffffff0000000000000000000000000000000060408401511660408201526060830151606082015260808301511515608082015260a0830151151560a08201528160c080940151938201520190611dc6565b990193019301909289979695949293610f5a565b91939596509193601f1982820301835285519060a0810182519060a08352815180915260c08301602060c08360051b86010193019160005b8181106117fb575050505060208301519082810360208401528151808252602082016020808360051b85010194019260005b83811061174a575050505050611737836020936080611726869560406001990151604085015260608501518482036060860152611dc6565b920151906080818403910152611dc6565b9701930193019092889695949293610ebb565b90919293946020806117ee83601f19876001960301885260c060a08b51611772848251612181565b7fffffffffffffffffffffffffffffffff000000000000000000000000000000008682015116868501527fffffffffffffffffffffffffffffffff000000000000000000000000000000006040820151166040850152606081015115156060850152608081015160808501520151918160a08201520190611dc6565b97019594019291016116ee565b90919293602080611870837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff408a6001960301885260a060808a51611840848251612145565b85810151151586850152604081015115156040850152606081015160608501520151918160808201520190611dc6565b960194019291016116bc565b90503d806000833e61188e8183611d64565b60208282810103126100a45781519167ffffffffffffffff83116100a457608083820183830103126100a457604051926118c784611cd8565b6118d28183016120ee565b84526020818301015167ffffffffffffffff81116100a457838301601f82848601010112156100a45780828401015161190a81611deb565b916119186040519384611d64565b8183526020830186860160208460051b84888a01010101116100a4576020828688010101905b60208460051b84888a010101018210611b0c575050505060208501526040818301015167ffffffffffffffff81116100a457838301601f82848601010112156100a45780828401015161199081611deb565b9161199e6040519384611d64565b8183526020830186860160208460051b84888a01010101116100a4576020828688010101905b60208460051b84888a010101018210611a1057505050506040850152606081830101519067ffffffffffffffff82116100a457611a05938301920101612339565b606082015282610dbb565b815167ffffffffffffffff81116100a45760e0601f1982868a8c0101018b8b010301126100a45760405191611a4483611cf4565b602082868a8c010101015160058110156100a4578352611a6c604083878b8d010101016120ee565b6020840152611a83606083878b8d010101016120ee565b60408401528888018501820160808101516060850152611aa59060a001612138565b6080840152611abc60c083878b8d01010101612138565b60a084015260e082868a8c01010101519067ffffffffffffffff82116100a457602093611afa8b868096958f968b8f8499860195010101010161211b565b60c082015281520192019190506119c4565b81519067ffffffffffffffff82116100a4576020809291611b3a8a838095898f8e9085019401010101612267565b815201920191905061193e565b3d9150816000823e611b598282611d64565b60208183810103126100a457805167ffffffffffffffff81116100a457611b839282019101612339565b826105dd565b611ba691503d806000833e611b9e8183611d64565b8101906122f3565b826104f2565b611bc091503d8085833e611b9e8183611d64565b856104a3565b611bdb91503d806000833e611b9e8183611d64565b84610451565b611bf691503d806000833e611b9e8183611d64565b836103de565b602090611c07611e03565b82828501015201610350565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f656d70747920726573706f6e73650000000000000000000000000000000000006044820152fd5b60c0810190811067ffffffffffffffff821117611c8d57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60a0810190811067ffffffffffffffff821117611c8d57604052565b6080810190811067ffffffffffffffff821117611c8d57604052565b60e0810190811067ffffffffffffffff821117611c8d57604052565b6040810190811067ffffffffffffffff821117611c8d57604052565b6020810190811067ffffffffffffffff821117611c8d57604052565b6060810190811067ffffffffffffffff821117611c8d57604052565b90601f601f19910116810190811067ffffffffffffffff821117611c8d57604052565b67ffffffffffffffff8111611c8d57601f01601f191660200190565b60005b838110611db65750506000910152565b8181015183820152602001611da6565b90601f19601f602093611de481518092818752878088019101611da3565b0116010190565b67ffffffffffffffff8111611c8d5760051b60200190565b60405190611e1082611c71565b606060a083600081526000602082015260006040820152600083820152600060808201520152565b805115611e455760200190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b805160011015611e455760400190565b805160021015611e455760600190565b805160031015611e455760800190565b8051821015611e455760209160051b010190565b90929192611ec581611d87565b91611ed36040519384611d64565b8294828452828201116100a4576020611eed930190611da3565b565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114611f1c5760010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60405190611f5882611d10565b60008252604051602083611f6b83611d2c565b600083520152565b611f7b611f4b565b50611f84611f4b565b506000604051611f9381611d2c565b52604051611fa081611d2c565b6000815260405190611fb182611d10565b7fffffffffffffffffffffffffffffffff000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000016808352602083019182521561209057515161200c5790565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f696d706572736f6e6174696f6e206d6f6465206973206e6f7420737570706f7260448201527f74656400000000000000000000000000000000000000000000000000000000006064820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f61707049642063616e6e6f7420626520656d70747900000000000000000000006044820152fd5b51907fffffffffffffffffffffffffffffffff00000000000000000000000000000000821682036100a457565b9080601f830112156100a457815161213592602001611eb8565b90565b519081151582036100a457565b9060068210156121525752565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9060058210156121525752565b908082519081815260208091019281808460051b8301019501936000915b8483106121bc5750505050505090565b909192939495848061222183601f1986600196030187528a516121e0828251612145565b838101518483015260408082015115159083015260608082015115159083015260808082015115159083015260a0809101519160c080928201520190611dc6565b98019301930191949392906121ac565b61213591604061224a8351606084526060840190611dc6565b926020810151151560208401520151906040818403910152611dc6565b919060c0838203126100a4576040519061228082611c71565b8193805160068110156100a4578352602081015160208401526122a560408201612138565b60408401526122b660608201612138565b60608401526122c760808201612138565b608084015260a08101519167ffffffffffffffff83116100a45760a0926122ee920161211b565b910152565b906020828203126100a457815167ffffffffffffffff81116100a4576121359201612267565b6040519061232682611d48565b6060604083828152600060208201520152565b91906060838203126100a4576040519061235282611d48565b819380519167ffffffffffffffff928381116100a4578161237491840161211b565b845261238260208301612138565b602085015260408201519283116100a4576040926122ee920161211b565b6000805b606083018051805183101561242257826123bd91611ea4565b515160068110156123f557156123e057506123d9606091611eef565b90506123a4565b604093506123ef925051611ea4565b51015190565b6024847f4e487b710000000000000000000000000000000000000000000000000000000081526021600452fd5b602484604051907f267ac2cf0000000000000000000000000000000000000000000000000000000082526004820152fdfea2646970667358221220a18284b1c6084451bfe3785d9d9293ee7995b561a7295b43ee25a7ec2d82a88764736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9655,
        "contract": "contracts/MecenateVerifier.sol:MecenateVerifier",
        "label": "appId",
        "offset": 0,
        "slot": "0",
        "type": "t_bytes16"
      }
    ],
    "types": {
      "t_bytes16": {
        "encoding": "inplace",
        "label": "bytes16",
        "numberOfBytes": "16"
      }
    }
  }
}