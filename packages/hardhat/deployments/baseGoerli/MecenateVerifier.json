{
  "address": "0xA3Aa50BC3980B5a05dAe85C2A11f657d0c52Fb2f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes16",
          "name": "_appId",
          "type": "bytes16"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "enum AuthType",
          "name": "authType",
          "type": "uint8"
        }
      ],
      "name": "AuthTypeNotFoundInVerifiedResult",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ADDRESSES_PROVIDER_V2",
      "outputs": [
        {
          "internalType": "contract IAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "APP_ID",
      "outputs": [
        {
          "internalType": "bytes16",
          "name": "",
          "type": "bytes16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IS_IMPERSONATION_MODE",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SISMO_CONNECT_LIB_VERSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "appId",
      "outputs": [
        {
          "internalType": "bytes16",
          "name": "",
          "type": "bytes16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "config",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes16",
              "name": "appId",
              "type": "bytes16"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "isImpersonationMode",
                  "type": "bool"
                }
              ],
              "internalType": "struct VaultConfig",
              "name": "vault",
              "type": "tuple"
            }
          ],
          "internalType": "struct SismoConnectConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "sismoConnectResponse",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_nonce",
          "type": "bytes32"
        }
      ],
      "name": "sismoVerify",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6402d72972c5478e421b1511d4e044bf89df13f7c7e9c0b6bf09bd2388c7e713",
  "receipt": {
    "to": null,
    "from": "0x8aA5F726d9F868a21a8bd748E2f1E43bA31eb670",
    "contractAddress": "0xA3Aa50BC3980B5a05dAe85C2A11f657d0c52Fb2f",
    "transactionIndex": 1,
    "gasUsed": "2044254",
    "logsBloom": "0x
    "blockHash": "0x7487ff2f91c7fb75553d164001e3b17d2d037b6894a1c5ec0b5eeab534bf2196",
    "transactionHash": "0x6402d72972c5478e421b1511d4e044bf89df13f7c7e9c0b6bf09bd2388c7e713",
    "logs": [],
    "blockNumber": 10630625,
    "cumulativeGasUsed": "2091107",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6c434d2de6efa3e7169bc58843b74d74"
  ],
  "numDeployments": 1,
  "solcInputHash": "a9ff469b4dc9c1829628556d6121bf42",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"_appId\",\"type\":\"bytes16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"enum AuthType\",\"name\":\"authType\",\"type\":\"uint8\"}],\"name\":\"AuthTypeNotFoundInVerifiedResult\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ADDRESSES_PROVIDER_V2\",\"outputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"APP_ID\",\"outputs\":[{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IS_IMPERSONATION_MODE\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SISMO_CONNECT_LIB_VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes16\",\"name\":\"appId\",\"type\":\"bytes16\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isImpersonationMode\",\"type\":\"bool\"}],\"internalType\":\"struct VaultConfig\",\"name\":\"vault\",\"type\":\"tuple\"}],\"internalType\":\"struct SismoConnectConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"sismoVerify\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MecenateVerifier.sol\":\"MecenateVerifier\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/MecenateVerifier.sol\":{\"content\":\"/**\\r\\n * @title MecenateVerifier\\r\\n * @dev Contract that verifies user identity using SismoConnect and returns user's vaultId, twitterId and telegramId.\\r\\n */\\r\\npragma solidity ^0.8.17;\\r\\nimport \\\"./helpers/SismoConnectLib.sol\\\";\\r\\n\\r\\ncontract MecenateVerifier is SismoConnect {\\r\\n    bytes16 public appId;\\r\\n\\r\\n    constructor(bytes16 _appId) SismoConnect(buildConfig(_appId)) {\\r\\n        appId = _appId;\\r\\n    }\\r\\n\\r\\n    function sismoVerify(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) external view returns (bytes memory, uint256, uint256, bytes memory) {\\r\\n        require(sismoConnectResponse.length > 0, \\\"empty response\\\");\\r\\n\\r\\n        // Build authorization requests\\r\\n        AuthRequest[] memory auths = new AuthRequest[](3);\\r\\n\\r\\n        auths[0] = buildAuth(AuthType.VAULT);\\r\\n\\r\\n        auths[1] = buildAuth({\\r\\n            authType: AuthType.TWITTER,\\r\\n            isOptional: true,\\r\\n            isSelectableByUser: true\\r\\n        });\\r\\n\\r\\n        auths[2] = buildAuth({\\r\\n            authType: AuthType.TELEGRAM,\\r\\n            isOptional: true,\\r\\n            isSelectableByUser: true\\r\\n        });\\r\\n\\r\\n        // Verify the response\\r\\n        SismoConnectVerifiedResult memory result = verify({\\r\\n            responseBytes: sismoConnectResponse,\\r\\n            auths: auths,\\r\\n            signature: buildSignature({message: abi.encode(_to, _nonce)})\\r\\n        });\\r\\n\\r\\n        bytes memory signedMessage = SismoConnectHelper.getSignedMessage(\\r\\n            result\\r\\n        );\\r\\n\\r\\n        // Store the verified auths\\r\\n        VerifiedAuth[] memory _verifiedAuths = new VerifiedAuth[](\\r\\n            result.auths.length\\r\\n        );\\r\\n\\r\\n        for (uint256 i = 0; i < result.auths.length; i++) {\\r\\n            _verifiedAuths[i] = result.auths[i];\\r\\n        }\\r\\n\\r\\n        // Get the vaultId of the user\\r\\n        // --> vaultId = hash(userVaultSecret, appId)\\r\\n        uint256 vaultId = SismoConnectHelper.getUserId(result, AuthType.VAULT);\\r\\n\\r\\n        // Convert the vaultId to bytes\\r\\n        bytes memory vaultIdBytes = abi.encodePacked(vaultId);\\r\\n\\r\\n        // Get the userId of the user\\r\\n        uint256 twitterId = 0;\\r\\n        uint256 telegramId = 0;\\r\\n\\r\\n        for (uint256 i = 0; i < _verifiedAuths.length; i++) {\\r\\n            if (_verifiedAuths[i].authType == AuthType.TWITTER) {\\r\\n                twitterId = SismoConnectHelper.getUserId(\\r\\n                    result,\\r\\n                    AuthType.TWITTER\\r\\n                );\\r\\n            } else if (_verifiedAuths[i].authType == AuthType.TELEGRAM) {\\r\\n                telegramId = SismoConnectHelper.getUserId(\\r\\n                    result,\\r\\n                    AuthType.TELEGRAM\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return (vaultIdBytes, twitterId, telegramId, signedMessage);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x77a23db979cb04afb3b07b27975ac1aaf2826a6d70a67f6b4fc795a5a0b2454d\"},\"contracts/helpers/SismoConnectLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport {RequestBuilder, SismoConnectRequest, SismoConnectResponse, SismoConnectConfig} from \\\"./utils/RequestBuilder.sol\\\";\\r\\nimport {AuthRequestBuilder, AuthRequest, Auth, VerifiedAuth, AuthType} from \\\"./utils/AuthRequestBuilder.sol\\\";\\r\\nimport {ClaimRequestBuilder, ClaimRequest, Claim, VerifiedClaim, ClaimType} from \\\"./utils/ClaimRequestBuilder.sol\\\";\\r\\nimport {SignatureBuilder, SignatureRequest, Signature} from \\\"./utils/SignatureBuilder.sol\\\";\\r\\nimport {VaultConfig} from \\\"./utils/Structs.sol\\\";\\r\\nimport {ISismoConnectVerifier, SismoConnectVerifiedResult} from \\\"./interfaces/ISismoConnectVerifier.sol\\\";\\r\\nimport {IAddressesProvider} from \\\"./interfaces/IAddressesProvider.sol\\\";\\r\\nimport {SismoConnectHelper} from \\\"./utils/SismoConnectHelper.sol\\\";\\r\\n\\r\\ncontract SismoConnect {\\r\\n    uint256 public constant SISMO_CONNECT_LIB_VERSION = 2;\\r\\n\\r\\n    IAddressesProvider public constant ADDRESSES_PROVIDER_V2 =\\r\\n        IAddressesProvider(0x3Cd5334eB64ebBd4003b72022CC25465f1BFcEe6);\\r\\n\\r\\n    ISismoConnectVerifier immutable _sismoConnectVerifier;\\r\\n\\r\\n    // external libraries\\r\\n    AuthRequestBuilder immutable _authRequestBuilder;\\r\\n    ClaimRequestBuilder immutable _claimRequestBuilder;\\r\\n    SignatureBuilder immutable _signatureBuilder;\\r\\n    RequestBuilder immutable _requestBuilder;\\r\\n\\r\\n    // config\\r\\n    bytes16 public immutable APP_ID;\\r\\n    bool public immutable IS_IMPERSONATION_MODE;\\r\\n\\r\\n    constructor(SismoConnectConfig memory _config) {\\r\\n        APP_ID = _config.appId;\\r\\n        IS_IMPERSONATION_MODE = _config.vault.isImpersonationMode;\\r\\n\\r\\n        _sismoConnectVerifier = ISismoConnectVerifier(\\r\\n            ADDRESSES_PROVIDER_V2.get(string(\\\"sismoConnectVerifier-v1.2\\\"))\\r\\n        );\\r\\n        // external libraries\\r\\n        _authRequestBuilder = AuthRequestBuilder(\\r\\n            ADDRESSES_PROVIDER_V2.get(string(\\\"authRequestBuilder-v1.1\\\"))\\r\\n        );\\r\\n        _claimRequestBuilder = ClaimRequestBuilder(\\r\\n            ADDRESSES_PROVIDER_V2.get(string(\\\"claimRequestBuilder-v1.1\\\"))\\r\\n        );\\r\\n        _signatureBuilder = SignatureBuilder(\\r\\n            ADDRESSES_PROVIDER_V2.get(string(\\\"signatureBuilder-v1.1\\\"))\\r\\n        );\\r\\n        _requestBuilder = RequestBuilder(\\r\\n            ADDRESSES_PROVIDER_V2.get(string(\\\"requestBuilder-v1.1\\\"))\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // public function because it needs to be used by this contract and can be used by other contracts\\r\\n    function config() public view returns (SismoConnectConfig memory) {\\r\\n        return buildConfig(APP_ID);\\r\\n    }\\r\\n\\r\\n    function buildConfig(\\r\\n        bytes16 appId\\r\\n    ) internal pure returns (SismoConnectConfig memory) {\\r\\n        SismoConnectConfig memory result = SismoConnectConfig({\\r\\n            appId: appId,\\r\\n            vault: buildVaultConfig()\\r\\n        });\\r\\n        require(appId != bytes16(0), \\\"appId cannot be empty\\\");\\r\\n        require(\\r\\n            result.vault.isImpersonationMode == false,\\r\\n            \\\"impersonation mode is not supported\\\"\\r\\n        );\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function buildVaultConfig() internal pure returns (VaultConfig memory) {\\r\\n        return VaultConfig({isImpersonationMode: false});\\r\\n    }\\r\\n\\r\\n    function verify(\\r\\n        bytes memory responseBytes,\\r\\n        AuthRequest[] memory auths,\\r\\n        SignatureRequest memory signature\\r\\n    ) internal view returns (SismoConnectVerifiedResult memory) {\\r\\n        SismoConnectResponse memory response = abi.decode(\\r\\n            responseBytes,\\r\\n            (SismoConnectResponse)\\r\\n        );\\r\\n        SismoConnectRequest memory request = buildRequest(auths, signature);\\r\\n        return _sismoConnectVerifier.verify(response, request, config());\\r\\n    }\\r\\n\\r\\n    function buildAuth(\\r\\n        AuthType authType,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser\\r\\n    ) internal view returns (AuthRequest memory) {\\r\\n        return\\r\\n            _authRequestBuilder.build(authType, isOptional, isSelectableByUser);\\r\\n    }\\r\\n\\r\\n    function buildAuth(\\r\\n        AuthType authType\\r\\n    ) internal view returns (AuthRequest memory) {\\r\\n        return _authRequestBuilder.build(authType);\\r\\n    }\\r\\n\\r\\n    function buildSignature(\\r\\n        bytes memory message\\r\\n    ) internal view returns (SignatureRequest memory) {\\r\\n        return _signatureBuilder.build(message);\\r\\n    }\\r\\n\\r\\n    function buildRequest(\\r\\n        AuthRequest[] memory auths,\\r\\n        SignatureRequest memory signature\\r\\n    ) internal view returns (SismoConnectRequest memory) {\\r\\n        return _requestBuilder.build(auths, signature);\\r\\n    }\\r\\n\\r\\n    function _GET_EMPTY_SIGNATURE_REQUEST()\\r\\n        internal\\r\\n        view\\r\\n        returns (SignatureRequest memory)\\r\\n    {\\r\\n        return _signatureBuilder.buildEmpty();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x48046d8c04bc18e540fe4c28285d6adab2d992fb53c941f91e4d479363acd7bb\",\"license\":\"MIT\"},\"contracts/helpers/interfaces/IAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface IAddressesProvider {\\r\\n    /**\\r\\n     * @dev Sets the address of a contract.\\r\\n     * @param contractAddress Address of the contract.\\r\\n     * @param contractName Name of the contract.\\r\\n     */\\r\\n    function set(address contractAddress, string memory contractName) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the address of multiple contracts.\\r\\n     * @param contractAddresses Addresses of the contracts.\\r\\n     * @param contractNames Names of the contracts.\\r\\n     */\\r\\n    function setBatch(\\r\\n        address[] calldata contractAddresses,\\r\\n        string[] calldata contractNames\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of a contract.\\r\\n     * @param contractName Name of the contract (string).\\r\\n     * @return Address of the contract.\\r\\n     */\\r\\n    function get(string memory contractName) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of a contract.\\r\\n     * @param contractNameHash Hash of the name of the contract (bytes32).\\r\\n     * @return Address of the contract.\\r\\n     */\\r\\n    function get(bytes32 contractNameHash) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addresses of all contracts inputed.\\r\\n     * @param contractNames Names of the contracts as strings.\\r\\n     */\\r\\n    function getBatch(\\r\\n        string[] calldata contractNames\\r\\n    ) external view returns (address[] memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addresses of all contracts inputed.\\r\\n     * @param contractNamesHash Names of the contracts as strings.\\r\\n     */\\r\\n    function getBatch(\\r\\n        bytes32[] calldata contractNamesHash\\r\\n    ) external view returns (address[] memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addresses of all contracts in `_contractNames`\\r\\n     * @return Names, Hashed Names and Addresses of all contracts.\\r\\n     */\\r\\n    function getAll()\\r\\n        external\\r\\n        view\\r\\n        returns (string[] memory, bytes32[] memory, address[] memory);\\r\\n}\\r\\n\",\"keccak256\":\"0xa58b350d38576b547693bb6bc17044578ae5e91d02344403d674df990e6486ab\",\"license\":\"MIT\"},\"contracts/helpers/interfaces/ISismoConnectVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"../utils/Structs.sol\\\";\\r\\n\\r\\ninterface ISismoConnectVerifier {\\r\\n    event VerifierSet(bytes32, address);\\r\\n\\r\\n    error AppIdMismatch(bytes16 receivedAppId, bytes16 expectedAppId);\\r\\n    error NamespaceMismatch(\\r\\n        bytes16 receivedNamespace,\\r\\n        bytes16 expectedNamespace\\r\\n    );\\r\\n    error VersionMismatch(bytes32 requestVersion, bytes32 responseVersion);\\r\\n    error SignatureMessageMismatch(\\r\\n        bytes requestMessageSignature,\\r\\n        bytes responseMessageSignature\\r\\n    );\\r\\n\\r\\n    function verify(\\r\\n        SismoConnectResponse memory response,\\r\\n        SismoConnectRequest memory request,\\r\\n        SismoConnectConfig memory config\\r\\n    ) external view returns (SismoConnectVerifiedResult memory);\\r\\n\\r\\n    function SISMO_CONNECT_VERSION() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0x082a1b89e3ae4a3a7e7494a81aa7a5e8cb9cab21a81ce14c7e6ae8335061d18c\",\"license\":\"MIT\"},\"contracts/helpers/utils/AuthRequestBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./Structs.sol\\\";\\r\\n\\r\\ncontract AuthRequestBuilder {\\r\\n    // default values for Auth Request\\r\\n    bool public constant DEFAULT_AUTH_REQUEST_IS_ANON = false;\\r\\n    uint256 public constant DEFAULT_AUTH_REQUEST_USER_ID = 0;\\r\\n    bool public constant DEFAULT_AUTH_REQUEST_IS_OPTIONAL = false;\\r\\n    bytes public constant DEFAULT_AUTH_REQUEST_EXTRA_DATA = \\\"\\\";\\r\\n\\r\\n    error InvalidUserIdAndIsSelectableByUserAuthType();\\r\\n    error InvalidUserIdAndAuthType();\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        bool isAnon,\\r\\n        uint256 userId,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: isAnon,\\r\\n                userId: userId,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        bool isAnon,\\r\\n        uint256 userId,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: isAnon,\\r\\n                userId: userId,\\r\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthType authType\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\r\\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\\r\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\r\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        bool isAnon\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: isAnon,\\r\\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\\r\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\r\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        uint256 userId\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\r\\n                userId: userId,\\r\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\r\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\r\\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\\r\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        bool isAnon,\\r\\n        uint256 userId\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: isAnon,\\r\\n                userId: userId,\\r\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\r\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        bool isAnon,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: isAnon,\\r\\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\\r\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        uint256 userId,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\r\\n                userId: userId,\\r\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    // allow dev to choose for isOptional\\r\\n    // the user is ask to choose isSelectableByUser to avoid the function signature collision\\r\\n    // between build(AuthType authType, bool isOptional) and build(AuthType authType, bool isAnon)\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\r\\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser,\\r\\n        uint256 userId\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\r\\n                userId: userId,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    // the user is ask to choose isSelectableByUser to avoid the function signature collision\\r\\n    // between build(AuthType authType, bool isAnon, bool isOptional) and build(AuthType authType, bool isOptional, bool isSelectableByUser)\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        bool isAnon,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: isAnon,\\r\\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        uint256 userId,\\r\\n        bool isOptional\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\r\\n                userId: userId,\\r\\n                isOptional: isOptional,\\r\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        bool isAnon,\\r\\n        uint256 userId,\\r\\n        bool isOptional\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: isAnon,\\r\\n                userId: userId,\\r\\n                isOptional: isOptional,\\r\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function _build(\\r\\n        AuthType authType,\\r\\n        bool isAnon,\\r\\n        uint256 userId,\\r\\n        bool isOptional,\\r\\n        bytes memory extraData\\r\\n    ) internal pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: isAnon,\\r\\n                userId: userId,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: _authIsSelectableDefaultValue(\\r\\n                    authType,\\r\\n                    userId\\r\\n                ),\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function _build(\\r\\n        AuthType authType,\\r\\n        bool isAnon,\\r\\n        uint256 userId,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser,\\r\\n        bytes memory extraData\\r\\n    ) internal pure returns (AuthRequest memory) {\\r\\n        // When `userId` is 0, it means the app does not require a specific auth account and the user needs\\r\\n        // to choose the account they want to use for the app.\\r\\n        // When `isSelectableByUser` is true, the user can select the account they want to use.\\r\\n        // The combination of `userId = 0` and `isSelectableByUser = false` does not make sense and should not be used.\\r\\n        // If this combination is detected, the function will revert with an error.\\r\\n        if (\\r\\n            authType != AuthType.VAULT &&\\r\\n            userId == 0 &&\\r\\n            isSelectableByUser == false\\r\\n        ) {\\r\\n            revert InvalidUserIdAndIsSelectableByUserAuthType();\\r\\n        }\\r\\n        // When requesting an authType VAULT, the `userId` must be 0 and isSelectableByUser must be true.\\r\\n        if (\\r\\n            authType == AuthType.VAULT &&\\r\\n            userId != 0 &&\\r\\n            isSelectableByUser == false\\r\\n        ) {\\r\\n            revert InvalidUserIdAndAuthType();\\r\\n        }\\r\\n        return\\r\\n            AuthRequest({\\r\\n                authType: authType,\\r\\n                isAnon: isAnon,\\r\\n                userId: userId,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function _authIsSelectableDefaultValue(\\r\\n        AuthType authType,\\r\\n        uint256 requestedUserId\\r\\n    ) internal pure returns (bool) {\\r\\n        // isSelectableByUser value should always be false in case of VAULT authType.\\r\\n        // This is because the user can't select the account they want to use for the app.\\r\\n        // the userId = Hash(VaultSecret, AppId) in the case of VAULT authType.\\r\\n        if (authType == AuthType.VAULT) {\\r\\n            return false;\\r\\n        }\\r\\n        // When `requestedUserId` is 0, it means no specific auth account is requested by the app,\\r\\n        // so we want the default value for `isSelectableByUser` to be `true`.\\r\\n        if (requestedUserId == 0) {\\r\\n            return true;\\r\\n        }\\r\\n        // When `requestedUserId` is not 0, it means a specific auth account is requested by the app,\\r\\n        // so we want the default value for `isSelectableByUser` to be `false`.\\r\\n        else {\\r\\n            return false;\\r\\n        }\\r\\n        // However, the dev can still override this default value by setting `isSelectableByUser` to `true`.\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf66737a67a424a42db5a6356fa577712ca07e5a89a2667a7ef3bb2abfc054913\",\"license\":\"MIT\"},\"contracts/helpers/utils/ClaimRequestBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./Structs.sol\\\";\\r\\n\\r\\ncontract ClaimRequestBuilder {\\r\\n    // default value for Claim Request\\r\\n    bytes16 public constant DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP =\\r\\n        bytes16(\\\"latest\\\");\\r\\n    uint256 public constant DEFAULT_CLAIM_REQUEST_VALUE = 1;\\r\\n    ClaimType public constant DEFAULT_CLAIM_REQUEST_TYPE = ClaimType.GTE;\\r\\n    bool public constant DEFAULT_CLAIM_REQUEST_IS_OPTIONAL = false;\\r\\n    bool public constant DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER = true;\\r\\n    bytes public constant DEFAULT_CLAIM_REQUEST_EXTRA_DATA = \\\"\\\";\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        uint256 value,\\r\\n        ClaimType claimType,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                claimType: claimType,\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: value,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        uint256 value,\\r\\n        ClaimType claimType,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                claimType: claimType,\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: value,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        uint256 value\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: value,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        ClaimType claimType\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: claimType,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        uint256 value\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: value,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        ClaimType claimType\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: claimType,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        uint256 value,\\r\\n        ClaimType claimType\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: value,\\r\\n                claimType: claimType,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        uint256 value,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: value,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        ClaimType claimType,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: claimType,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        uint256 value,\\r\\n        ClaimType claimType\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: value,\\r\\n                claimType: claimType,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        uint256 value,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: value,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        ClaimType claimType,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: claimType,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        uint256 value,\\r\\n        ClaimType claimType,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: value,\\r\\n                claimType: claimType,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    // allow dev to choose for isOptional\\r\\n    // we force to also set isSelectableByUser\\r\\n    // otherwise function signatures would be colliding\\r\\n    // between build(bytes16 groupId, bool isOptional) and build(bytes16 groupId, bool isSelectableByUser)\\r\\n    // we keep this logic for all function signature combinations\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        uint256 value,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: value,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        ClaimType claimType,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: claimType,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        uint256 value,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: value,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        ClaimType claimType,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: claimType,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        uint256 value,\\r\\n        ClaimType claimType,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: value,\\r\\n                claimType: claimType,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        uint256 value,\\r\\n        ClaimType claimType,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: value,\\r\\n                claimType: claimType,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7a20ce58960f47744184c31a821bf398214081669b4d766d638db3340eb9264e\",\"license\":\"MIT\"},\"contracts/helpers/utils/RequestBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./Structs.sol\\\";\\r\\nimport {SignatureBuilder} from \\\"./SignatureBuilder.sol\\\";\\r\\n\\r\\ncontract RequestBuilder {\\r\\n    // default value for namespace\\r\\n    bytes16 public constant DEFAULT_NAMESPACE = bytes16(keccak256(\\\"main\\\"));\\r\\n    // default value for a signature request\\r\\n    SignatureRequest DEFAULT_SIGNATURE_REQUEST =\\r\\n        SignatureRequest({\\r\\n            message: \\\"MESSAGE_SELECTED_BY_USER\\\",\\r\\n            isSelectableByUser: false,\\r\\n            extraData: \\\"\\\"\\r\\n        });\\r\\n\\r\\n    function build(\\r\\n        AuthRequest memory auth,\\r\\n        ClaimRequest memory claim,\\r\\n        SignatureRequest memory signature,\\r\\n        bytes16 namespace\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\r\\n        auths[0] = auth;\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\r\\n        claims[0] = claim;\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest memory auth,\\r\\n        ClaimRequest memory claim,\\r\\n        bytes16 namespace\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\r\\n        auths[0] = auth;\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\r\\n        claims[0] = claim;\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        ClaimRequest memory claim,\\r\\n        SignatureRequest memory signature,\\r\\n        bytes16 namespace\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\r\\n        claims[0] = claim;\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        ClaimRequest memory claim,\\r\\n        bytes16 namespace\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\r\\n        claims[0] = claim;\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest memory auth,\\r\\n        SignatureRequest memory signature,\\r\\n        bytes16 namespace\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\r\\n        auths[0] = auth;\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest memory auth,\\r\\n        bytes16 namespace\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\r\\n        auths[0] = auth;\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest memory auth,\\r\\n        ClaimRequest memory claim,\\r\\n        SignatureRequest memory signature\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\r\\n        auths[0] = auth;\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\r\\n        claims[0] = claim;\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest memory auth,\\r\\n        ClaimRequest memory claim\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\r\\n        auths[0] = auth;\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\r\\n        claims[0] = claim;\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest memory auth,\\r\\n        SignatureRequest memory signature\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\r\\n        auths[0] = auth;\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest memory auth\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\r\\n        auths[0] = auth;\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        ClaimRequest memory claim,\\r\\n        SignatureRequest memory signature\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\r\\n        claims[0] = claim;\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        ClaimRequest memory claim\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\r\\n        claims[0] = claim;\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // build with arrays for auths and claims\\r\\n    function build(\\r\\n        AuthRequest[] memory auths,\\r\\n        ClaimRequest[] memory claims,\\r\\n        SignatureRequest memory signature,\\r\\n        bytes16 namespace\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest[] memory auths,\\r\\n        ClaimRequest[] memory claims,\\r\\n        bytes16 namespace\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        ClaimRequest[] memory claims,\\r\\n        SignatureRequest memory signature,\\r\\n        bytes16 namespace\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        ClaimRequest[] memory claims,\\r\\n        bytes16 namespace\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest[] memory auths,\\r\\n        SignatureRequest memory signature,\\r\\n        bytes16 namespace\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest[] memory auths,\\r\\n        bytes16 namespace\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest[] memory auths,\\r\\n        ClaimRequest[] memory claims,\\r\\n        SignatureRequest memory signature\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest[] memory auths,\\r\\n        ClaimRequest[] memory claims\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest[] memory auths,\\r\\n        SignatureRequest memory signature\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest[] memory auths\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        ClaimRequest[] memory claims,\\r\\n        SignatureRequest memory signature\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        ClaimRequest[] memory claims\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xed1a2ba47be3b4a971b949842363c0e14180ebcf10d808075091a2330e5973fd\",\"license\":\"MIT\"},\"contracts/helpers/utils/SignatureBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./Structs.sol\\\";\\r\\n\\r\\ncontract SignatureBuilder {\\r\\n    // default values for Signature Request\\r\\n    bytes public constant DEFAULT_SIGNATURE_REQUEST_MESSAGE =\\r\\n        \\\"MESSAGE_SELECTED_BY_USER\\\";\\r\\n    bool public constant DEFAULT_SIGNATURE_REQUEST_IS_SELECTABLE_BY_USER =\\r\\n        false;\\r\\n    bytes public constant DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA = \\\"\\\";\\r\\n\\r\\n    function build(\\r\\n        bytes memory message\\r\\n    ) external pure returns (SignatureRequest memory) {\\r\\n        return\\r\\n            SignatureRequest({\\r\\n                message: message,\\r\\n                isSelectableByUser: DEFAULT_SIGNATURE_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes memory message,\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (SignatureRequest memory) {\\r\\n        return\\r\\n            SignatureRequest({\\r\\n                message: message,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes memory message,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (SignatureRequest memory) {\\r\\n        return\\r\\n            SignatureRequest({\\r\\n                message: message,\\r\\n                isSelectableByUser: DEFAULT_SIGNATURE_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes memory message,\\r\\n        bool isSelectableByUser,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (SignatureRequest memory) {\\r\\n        return\\r\\n            SignatureRequest({\\r\\n                message: message,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (SignatureRequest memory) {\\r\\n        return\\r\\n            SignatureRequest({\\r\\n                message: DEFAULT_SIGNATURE_REQUEST_MESSAGE,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bool isSelectableByUser,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (SignatureRequest memory) {\\r\\n        return\\r\\n            SignatureRequest({\\r\\n                message: DEFAULT_SIGNATURE_REQUEST_MESSAGE,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function buildEmpty() external pure returns (SignatureRequest memory) {\\r\\n        return\\r\\n            SignatureRequest({\\r\\n                message: DEFAULT_SIGNATURE_REQUEST_MESSAGE,\\r\\n                isSelectableByUser: DEFAULT_SIGNATURE_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1ddc35c54605315cefa153e2752c5efc9970072bae955420b527cf2711fa89b0\",\"license\":\"MIT\"},\"contracts/helpers/utils/SismoConnectHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./Structs.sol\\\";\\r\\n\\r\\nlibrary SismoConnectHelper {\\r\\n    error AuthTypeNotFoundInVerifiedResult(AuthType authType);\\r\\n\\r\\n    function getUserId(\\r\\n        SismoConnectVerifiedResult memory result,\\r\\n        AuthType authType\\r\\n    ) internal pure returns (uint256) {\\r\\n        // get the first userId that matches the authType\\r\\n        for (uint256 i = 0; i < result.auths.length; i++) {\\r\\n            if (result.auths[i].authType == authType) {\\r\\n                return result.auths[i].userId;\\r\\n            }\\r\\n        }\\r\\n        revert AuthTypeNotFoundInVerifiedResult(authType);\\r\\n    }\\r\\n\\r\\n    function getUserIds(\\r\\n        SismoConnectVerifiedResult memory result,\\r\\n        AuthType authType\\r\\n    ) internal pure returns (uint256[] memory) {\\r\\n        // get all userIds that match the authType\\r\\n        uint256[] memory userIds = new uint256[](result.auths.length);\\r\\n        for (uint256 i = 0; i < result.auths.length; i++) {\\r\\n            if (result.auths[i].authType == authType) {\\r\\n                userIds[i] = result.auths[i].userId;\\r\\n            }\\r\\n        }\\r\\n        return userIds;\\r\\n    }\\r\\n\\r\\n    function getSignedMessage(\\r\\n        SismoConnectVerifiedResult memory result\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        return result.signedMessage;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x08c39ecd8cf8b6ed3028f1b135cd20b3a2b5acf961728a6f7ab5622a66f1fcde\",\"license\":\"MIT\"},\"contracts/helpers/utils/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nstruct SismoConnectRequest {\\r\\n    bytes16 namespace;\\r\\n    AuthRequest[] auths;\\r\\n    ClaimRequest[] claims;\\r\\n    SignatureRequest signature;\\r\\n}\\r\\n\\r\\nstruct SismoConnectConfig {\\r\\n    bytes16 appId;\\r\\n    VaultConfig vault;\\r\\n}\\r\\n\\r\\nstruct VaultConfig {\\r\\n    bool isImpersonationMode;\\r\\n}\\r\\n\\r\\nstruct AuthRequest {\\r\\n    AuthType authType;\\r\\n    uint256 userId; // default: 0\\r\\n    // flags\\r\\n    bool isAnon; // default: false -> true not supported yet, need to throw if true\\r\\n    bool isOptional; // default: false\\r\\n    bool isSelectableByUser; // default: true\\r\\n    //\\r\\n    bytes extraData; // default: \\\"\\\"\\r\\n}\\r\\n\\r\\nstruct ClaimRequest {\\r\\n    ClaimType claimType; // default: GTE\\r\\n    bytes16 groupId;\\r\\n    bytes16 groupTimestamp; // default: bytes16(\\\"latest\\\")\\r\\n    uint256 value; // default: 1\\r\\n    // flags\\r\\n    bool isOptional; // default: false\\r\\n    bool isSelectableByUser; // default: true\\r\\n    //\\r\\n    bytes extraData; // default: \\\"\\\"\\r\\n}\\r\\n\\r\\nstruct SignatureRequest {\\r\\n    bytes message; // default: \\\"MESSAGE_SELECTED_BY_USER\\\"\\r\\n    bool isSelectableByUser; // default: false\\r\\n    bytes extraData; // default: \\\"\\\"\\r\\n}\\r\\n\\r\\nenum AuthType {\\r\\n    VAULT,\\r\\n    GITHUB,\\r\\n    TWITTER,\\r\\n    EVM_ACCOUNT,\\r\\n    TELEGRAM,\\r\\n    DISCORD\\r\\n}\\r\\n\\r\\nenum ClaimType {\\r\\n    GTE,\\r\\n    GT,\\r\\n    EQ,\\r\\n    LT,\\r\\n    LTE\\r\\n}\\r\\n\\r\\nstruct Auth {\\r\\n    AuthType authType;\\r\\n    bool isAnon;\\r\\n    bool isSelectableByUser;\\r\\n    uint256 userId;\\r\\n    bytes extraData;\\r\\n}\\r\\n\\r\\nstruct Claim {\\r\\n    ClaimType claimType;\\r\\n    bytes16 groupId;\\r\\n    bytes16 groupTimestamp;\\r\\n    bool isSelectableByUser;\\r\\n    uint256 value;\\r\\n    bytes extraData;\\r\\n}\\r\\n\\r\\nstruct Signature {\\r\\n    bytes message;\\r\\n    bytes extraData;\\r\\n}\\r\\n\\r\\nstruct SismoConnectResponse {\\r\\n    bytes16 appId;\\r\\n    bytes16 namespace;\\r\\n    bytes32 version;\\r\\n    bytes signedMessage;\\r\\n    SismoConnectProof[] proofs;\\r\\n}\\r\\n\\r\\nstruct SismoConnectProof {\\r\\n    Auth[] auths;\\r\\n    Claim[] claims;\\r\\n    bytes32 provingScheme;\\r\\n    bytes proofData;\\r\\n    bytes extraData;\\r\\n}\\r\\n\\r\\nstruct SismoConnectVerifiedResult {\\r\\n    bytes16 appId;\\r\\n    bytes16 namespace;\\r\\n    bytes32 version;\\r\\n    VerifiedAuth[] auths;\\r\\n    VerifiedClaim[] claims;\\r\\n    bytes signedMessage;\\r\\n}\\r\\n\\r\\nstruct VerifiedAuth {\\r\\n    AuthType authType;\\r\\n    bool isAnon;\\r\\n    uint256 userId;\\r\\n    bytes extraData;\\r\\n    bytes proofData;\\r\\n}\\r\\n\\r\\nstruct VerifiedClaim {\\r\\n    ClaimType claimType;\\r\\n    bytes16 groupId;\\r\\n    bytes16 groupTimestamp;\\r\\n    uint256 value;\\r\\n    bytes extraData;\\r\\n    uint256 proofId;\\r\\n    bytes proofData;\\r\\n}\\r\\n\",\"keccak256\":\"0x0d7238088b9d4b679f489531b76e4dbf851e7c33a2a8b50a786273125aa0e623\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610160604081815234620004d557816200287d803803809162000023828562000528565b8339602093849181010312620004d557516001600160801b03198082169290838303620004d5578151906200005882620004da565b600091828152868451916200006d836200050c565b848352015281835162000080816200050c565b528251946200008f866200050c565b828652835190620000a082620004da565b8082528782019687521562000491578551516200044157819051169461012095865251511515936101409485528351620000da81620004da565b601981527f7369736d6f436f6e6e65637456657269666965722d76312e320000000000000088820152845190816200012163349f642f60e11b92838352600483016200056d565b038983733cd5334eb64ebbd4003b72022cc25465f1bfcee69281845afa9283156200043757869362000413575b506001600160a01b039283166080528651620001ad908b906200017181620004da565b601781527f61757468526571756573744275696c6465722d76312e3100000000000000000082820152895180938192878352600483016200056d565b0381855afa908115620003c5579084918891620003f1575b501660a052620002188a8851620001dc81620004da565b601881527f636c61696d526571756573744275696c6465722d76312e31000000000000000082820152895180938192878352600483016200056d565b0381855afa908115620003c5579084918891620003cf575b501660c052620002838a88516200024781620004da565b601581527f7369676e61747572654275696c6465722d76312e31000000000000000000000082820152895180938192878352600483016200056d565b0381855afa908115620003c5579184620002f294928d948a91620003a3575b501660e052885191620002b583620004da565b601383527f726571756573744275696c6465722d76312e31000000000000000000000000008484015289518095819482938352600483016200056d565b03915afa9889156200039957859962000363575b50506101009716875260801c9082541617905551916122c49384620005b9853960805184610ddd015260a0518461029d015260c05184505060e0518461042d01525183610bed01525182818160b80152611d3d0152518160f40152f35b62000388929950803d1062000391575b6200037f818362000528565b8101906200054c565b96388062000306565b503d62000373565b86513d87823e3d90fd5b620003be9150853d871162000391576200037f818362000528565b38620002a2565b88513d89823e3d90fd5b620003ea91508c8d3d1062000391576200037f818362000528565b3862000230565b6200040c91508c8d3d1062000391576200037f818362000528565b38620001c5565b6200042f9193508a3d8c1162000391576200037f818362000528565b91386200014e565b87513d88823e3d90fd5b835162461bcd60e51b815260048101889052602360248201527f696d706572736f6e6174696f6e206d6f6465206973206e6f7420737570706f726044820152621d195960ea1b6064820152608490fd5b835162461bcd60e51b815260048101889052601560248201527f61707049642063616e6e6f7420626520656d70747900000000000000000000006044820152606490fd5b600080fd5b604081019081106001600160401b03821117620004f657604052565b634e487b7160e01b600052604160045260246000fd5b602081019081106001600160401b03821117620004f657604052565b601f909101601f19168101906001600160401b03821190821017620004f657604052565b90816020910312620004d557516001600160a01b0381168103620004d55790565b6020808252825181830181905290939260005b828110620005a357505060409293506000838284010152601f8019910116010190565b8181018601518482016040015285016200058056fe6101e080604052600436101561001457600080fd5b60003560e01c90816346916301146119f6575080637276069d1461019657806379502c551461014d57806380afdea814610119578063a183dc27146100dc578063c187bbc11461008e5763c9512d991461006d57600080fd5b3461008957600060031936011261008957602060405160028152f35b600080fd5b346100895760006003193601126100895760206040516fffffffffffffffffffffffffffffffff197f0000000000000000000000000000000000000000000000000000000000000000168152f35b346100895760006003193601126100895760206040517f000000000000000000000000000000000000000000000000000000000000000015158152f35b3461008957600060031936011261008957602060005460801b6fffffffffffffffffffffffffffffffff1960405191168152f35b34610089576000600319360112610089576040610168611ceb565b61019482518092602080916fffffffffffffffffffffffffffffffff1981511684520151511515910152565bf35b346100895760606003193601126100895760043567ffffffffffffffff81116100895736602382011215610089578060040135906101e26101d683611b39565b60405180608052611b16565b81608051523660248383010111610089578160009260246020930183608051013760805101015260243573ffffffffffffffffffffffffffffffffffffffff8116809103610089576080515115611998576040519061024082611a8a565b6003825260005b606081106119815750610258611bb5565b506040517f3a0ba6ff0000000000000000000000000000000000000000000000000000000081526000600482015273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690600081602481855afa90811561138d57600091611966575b506102e084611bea565b526102ea83611bea565b506102f3611bb5565b506040517fc3bcacd000000000000000000000000000000000000000000000000000000000808252600260048301526001602483015260016044830152600082606481865afa801561138d57600092839161194c575b5061035386611c26565b5261035d85611c26565b50610366611bb5565b50606460405180948193825260048083015260016024830152600160448301525afa91821561138d5761041492600092839161192a575b506103a785611c36565b526103b184611c36565b506040519060208201526044356040820152604081526103d081611afa565b6103d861206c565b50604051809381927f6835f32c000000000000000000000000000000000000000000000000000000008352602060048401526024830190611b78565b038173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa90811561138d576000916118e8575b50606060a060405161046f81611a23565b6000815260006020820152600060408201528280820152826080820152015260805180518101610180526020816101805103126100895760208101516101005267ffffffffffffffff61010051116100895760a0906101005101610180510312610089576040516104df81611a6e565b6104f26020610100516080510101611e57565b81526105076040610100516080510101611e57565b60208201526060610100516080510101516040820152610100516080510160808101519067ffffffffffffffff821161008957602061054e92816101805101920101611e75565b6060820152610100516080510160a081015160c05267ffffffffffffffff60c051116100895760206101805101603f60c05183010112156100895760c05101602001519161059b83611b9d565b936105a96040519586611b16565b838552602085019460c0516101005160805101016020610180510160408760051b8301011161008957604001610120529194935b60c05161010051608051010160408260051b820101610120511015610b4b5761012051516101c05267ffffffffffffffff6101c0511161008957601f1960a0916101c0510161018051030112610089576040516101a0526106406101a051611a6e565b6101c05160c05161010051608051010101604081015160e05267ffffffffffffffff60e051116100895760206101805101605f60e05183010112156100895760409060e0510101516101405261069861014051611b9d565b956106a66040519788611b16565b610140518752602087019260e0516101c05160c05161010051608051010101016020610180510160606101405160051b8301011161008957606001935b60e0516101c05160c05161010051608051010101019060606101405160051b8301018610156108435785519167ffffffffffffffff8311610089577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08360a0920161018051030112610089576040519161075c83611a6e565b60608160e0516101c05160c051610100516080510101010101015160068110156100895783526107a360808260e0516101c05160c051610100518551010101010101611eba565b60208401526107ca60a08260e0516101c05160c05161010051608051010101010101611eba565b604084015260c08160e0516101c05183516101005160805101010101010151606084015260e0516101c05160c0516101005160805101010101019060e08201519267ffffffffffffffff8411610089576108336020949360608695866101805101920101611e75565b60808201528152019401936106e3565b5050939196909492506101a051526101c05160c05161010051608051010101606081015160a05267ffffffffffffffff60a051116100895760206101805101605f60a05183010112156100895760409060a051010151610160526108a961016051611b9d565b956108b76040519788611b16565b610160518752602087019260a0516101c05160c05161010051608051010101016020610180510160606101605160051b8301011161008957606001935b60a0516101c05160c05161010051608051010101019060606101605160051b830101861015610a7b5785519167ffffffffffffffff8311610089577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08360c0920161018051030112610089576040519161096d83611a23565b60608160a0516101c05160c051610100516080510101010101015160058110156100895783526109b460808260a0516101c05160c051610100518551010101010101611e57565b60208401526109da60a08281516101c05160c05161010051608051010101010101611e57565b6040840152610a0060c08260a0516101c051835161010051608051010101010101611eba565b606084015260e08160a0516101c05160c0516101005160805101010101010151608084015260a0516101c05160c051610100516080510101010101906101008201519267ffffffffffffffff841161008957610a6b6020949360608695866101805101920101611e75565b60a08201528152019401936108f4565b50509493925094909560206101a051015260806101c05160c051610100518351010101015160406101a05101526101c05160c0516101005160805101010160a08101519067ffffffffffffffff8211610089576040610ae39260206101805101920101611e75565b60606101a05101526101c05160c051610100516080510101019060c082015167ffffffffffffffff8111610089576020926040610b2892856101805101920101611e75565b60806101a05101526101a0518152019460206101205101610120529194936105dd565b84876000610bc286886080860152604051610b6581611a8a565b83815260606020820152606060408201526060610b8061206c565b910152610bd460405194859384937f2ceb1e8d000000000000000000000000000000000000000000000000000000008552604060048601526044850190611ee1565b90600319848303016024850152611f84565b038173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa90811561138d5760009161161d575b5090610c28611ceb565b906040519283917f12b037ff000000000000000000000000000000000000000000000000000000008352608060048401526fffffffffffffffffffffffffffffffff1981511660848401526fffffffffffffffffffffffffffffffff1960208201511660a4840152604081015160c48401526080610cb6606083015160a060e4870152610124860190611b78565b910151907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7c84820301610104850152815180825260208201916020808360051b8301019401926000915b8383106114435750505050506003198382030160248401526fffffffffffffffffffffffffffffffff198251168152610d486020830151608060208401526080830190611ee1565b916040810151928281036040840152835180825260208201916020808360051b8301019601926000915b8383106113995788600081808d610dc4610d9a8e8e60608f0151906060818403910152611f84565b82516fffffffffffffffffffffffffffffffff191660448501526020909201515115156064840152565b038173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa90811561138d57600091610fe1575b5060a081015190606081019081515192601f19610e43610e2d86611b9d565b95610e3b6040519788611b16565b808752611b9d565b0160005b818110610fa857505060005b83518051821015610e8d5790610e6c81610e8893611c46565b51610e778288611c46565b52610e828187611c46565b50611c5a565b610e53565b50509150610e9a816120f3565b60405190602082015260208152610eb081611ac2565b600080936000915b8651831015610f6e57610ed4610ece8489611c46565b51611cb6565b60069081811015610f3f57600203610f00575050610efa610ef48561221a565b92611c5a565b91610eb8565b610f10610ece858a969496611c46565b90811015610f3f57600414610f29575b610efa90611c5a565b9450610efa610f37856121a7565b959050610f20565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b610fa48491610f8c9388604051958695608087526080870190611b78565b92602086015260408501528382036060850152611b78565b0390f35b602090604051610fb781611a6e565b60008152600083820152600060408201526060808201526060608082015282828901015201610e47565b90503d806000833e610ff38183611b16565b60208282810103126100895781519167ffffffffffffffff83116100895760c08382018383010312610089576040519261102c84611a23565b611037818301611e57565b8452611047602082840101611e57565b6020850152818101604081810151908601526060015167ffffffffffffffff811161008957838301601f82848601010112156100895780828401015161108c81611b9d565b9161109a6040519384611b16565b8183526020830186860160208460051b84888a0101010111610089576020828688010101905b60208460051b84888a0101010182106112a0575050505060608501526080818301015167ffffffffffffffff811161008957838301601f82848601010112156100895780828401015161111281611b9d565b916111206040519384611b16565b8183526020830186860160208460051b84888a0101010111610089576020828688010101905b60208460051b84888a0101010182106111925750505050608085015260a081830101519067ffffffffffffffff821161008957611187938301920101611e75565b60a082015281610e0e565b815167ffffffffffffffff81116100895760e0601f1982868a8c0101018b8b0103011261008957604051916111c683611aa6565b602082868a8c010101015160058110156100895783526111ee604083878b8d01010101611e57565b6020840152611205606083878b8d01010101611e57565b6040840152888801850182016080810151606085015260a0015167ffffffffffffffff811161008957611246908b8b01908a8c018801850101602001611e75565b60808401528888018501820160c081015160a085015260e001519067ffffffffffffffff82116100895760209361128e8b868096958f968b8f84998601950101010101611e75565b60c08201528152019201919050611146565b815167ffffffffffffffff81116100895760a0601f1982868a8c0101018b8b0103011261008957604051916112d483611a6e565b602082868a8c010101015160068110156100895783526112fc604083878b8d01010101611eba565b602084015288880185018201606081015160408501526080015167ffffffffffffffff81116100895761133d908b8b01908a8c018801850101602001611e75565b606084015260a082868a8c01010101519067ffffffffffffffff82116100895760209361137b8b868096958f968b8f84998601950101010101611e75565b608082015281520192019190506110c0565b6040513d6000823e3d90fd5b919397509193949560208061142f83601f19866001960301875260e08c51916113c3818451611ed4565b6fffffffffffffffffffffffffffffffff198584015116858201526fffffffffffffffffffffffffffffffff1960408401511660408201526060830151606082015260808301511515608082015260a0830151151560a08201528160c080940151938201520190611b78565b990193019301909289979695949293610d72565b91939596509193601f1982820301835285519060a0810182519060a08352815180915260c08301602060c08360051b86010193019160005b81811061159c575050505060208301519082810360208401528151808252602082016020808360051b85010194019260005b8381106115095750505050506114f68360209360806114e5869560406001990151604085015260608501518482036060860152611b78565b920151906080818403910152611b78565b9701930193019092889695949293610d00565b909192939460208061158f83601f19876001960301885260c060a08b51611531848251611ed4565b6fffffffffffffffffffffffffffffffff198682015116868501526fffffffffffffffffffffffffffffffff196040820151166040850152606081015115156060850152608081015160808501520151918160a08201520190611b78565b97019594019291016114ad565b90919293602080611611837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff408a6001960301885260a060808a516115e1848251611ec7565b85810151151586850152604081015115156040850152606081015160608501520151918160808201520190611b78565b9601940192910161147b565b90503d806000833e61162f8183611b16565b60208282810103126100895781519167ffffffffffffffff83116100895760808382018383010312610089576040519261166884611a8a565b611673818301611e57565b84526020818301015167ffffffffffffffff811161008957838301601f8284860101011215610089578082840101516116ab81611b9d565b916116b96040519384611b16565b8183526020830186860160208460051b84888a0101010111610089576020828688010101905b60208460051b84888a0101010182106118ad575050505060208501526040818301015167ffffffffffffffff811161008957838301601f82848601010112156100895780828401015161173181611b9d565b9161173f6040519384611b16565b8183526020830186860160208460051b84888a0101010111610089576020828688010101905b60208460051b84888a0101010182106117b157505050506040850152606081830101519067ffffffffffffffff8211610089576117a693830192010161208c565b606082015282610c1e565b815167ffffffffffffffff81116100895760e0601f1982868a8c0101018b8b0103011261008957604051916117e583611aa6565b602082868a8c0101010151600581101561008957835261180d604083878b8d01010101611e57565b6020840152611824606083878b8d01010101611e57565b604084015288880185018201608081015160608501526118469060a001611eba565b608084015261185d60c083878b8d01010101611eba565b60a084015260e082868a8c01010101519067ffffffffffffffff82116100895760209361189b8b868096958f968b8f84998601950101010101611e75565b60c08201528152019201919050611765565b81519067ffffffffffffffff82116100895760208092916118db8a838095898f8e9085019401010101611fba565b81520192019190506116df565b3d9150816000823e6118fa8282611b16565b602081838101031261008957805167ffffffffffffffff811161008957611924928201910161208c565b8261045e565b61194691503d8085833e61193e8183611b16565b810190612046565b8561039d565b61196091503d8085833e61193e8183611b16565b86610349565b61197b91503d806000833e61193e8183611b16565b846102d6565b60209061198c611bb5565b82828601015201610247565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f656d70747920726573706f6e73650000000000000000000000000000000000006044820152fd5b346100895760006003193601126100895780733cd5334eb64ebbd4003b72022cc25465f1bfcee660209252f35b60c0810190811067ffffffffffffffff821117611a3f57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60a0810190811067ffffffffffffffff821117611a3f57604052565b6080810190811067ffffffffffffffff821117611a3f57604052565b60e0810190811067ffffffffffffffff821117611a3f57604052565b6040810190811067ffffffffffffffff821117611a3f57604052565b6020810190811067ffffffffffffffff821117611a3f57604052565b6060810190811067ffffffffffffffff821117611a3f57604052565b90601f601f19910116810190811067ffffffffffffffff821117611a3f57604052565b67ffffffffffffffff8111611a3f57601f01601f191660200190565b60005b838110611b685750506000910152565b8181015183820152602001611b58565b90601f19601f602093611b9681518092818752878088019101611b55565b0116010190565b67ffffffffffffffff8111611a3f5760051b60200190565b60405190611bc282611a23565b606060a083600081526000602082015260006040820152600083820152600060808201520152565b805115611bf75760200190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b805160011015611bf75760400190565b805160021015611bf75760600190565b8051821015611bf75760209160051b010190565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114611c875760010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b516006811015610f3f5790565b60405190611cd082611ac2565b60008252604051602083611ce383611ade565b600083520152565b611cf3611cc3565b50611cfc611cc3565b506000604051611d0b81611ade565b52604051611d1881611ade565b6000815260405190611d2982611ac2565b6fffffffffffffffffffffffffffffffff197f0000000000000000000000000000000000000000000000000000000000000000168083526020830191825215611df9575151611d755790565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f696d706572736f6e6174696f6e206d6f6465206973206e6f7420737570706f7260448201527f74656400000000000000000000000000000000000000000000000000000000006064820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f61707049642063616e6e6f7420626520656d70747900000000000000000000006044820152fd5b51906fffffffffffffffffffffffffffffffff198216820361008957565b81601f82011215610089578051611e8b81611b39565b92611e996040519485611b16565b8184526020828401011161008957611eb79160208085019101611b55565b90565b5190811515820361008957565b906006821015610f3f5752565b906005821015610f3f5752565b908082519081815260208091019281808460051b8301019501936000915b848310611f0f5750505050505090565b9091929394958480611f7483601f1986600196030187528a51611f33828251611ec7565b838101518483015260408082015115159083015260608082015115159083015260808082015115159083015260a0809101519160c080928201520190611b78565b9801930193019194939290611eff565b611eb7916040611f9d8351606084526060840190611b78565b926020810151151560208401520151906040818403910152611b78565b919060c0838203126100895760405190611fd382611a23565b81938051600681101561008957835260208101516020840152611ff860408201611eba565b604084015261200960608201611eba565b606084015261201a60808201611eba565b608084015260a08101519167ffffffffffffffff83116100895760a0926120419201611e75565b910152565b9060208282031261008957815167ffffffffffffffff811161008957611eb79201611fba565b6040519061207982611afa565b6060604083828152600060208201520152565b919060608382031261008957604051906120a582611afa565b819380519167ffffffffffffffff9283811161008957816120c7918401611e75565b84526120d560208301611eba565b60208501526040820151928311610089576040926120419201611e75565b6000805b606083018051805183101561217657610ece8361211392611c46565b60068110156121495715612134575061212d606091611c5a565b90506120f7565b60409350612143925051611c46565b51015190565b6024847f4e487b710000000000000000000000000000000000000000000000000000000081526021600452fd5b602484604051907f267ac2cf0000000000000000000000000000000000000000000000000000000082526004820152fd5b6000805b60608301805180518310156121ea57610ece836121c792611c46565b60068110156121495760041461213457506121e3606091611c5a565b90506121ab565b60246040517f267ac2cf000000000000000000000000000000000000000000000000000000008152600480820152fd5b6000805b606083018051805183101561225d57610ece8361223a92611c46565b6006811015612149576002146121345750612256606091611c5a565b905061221e565b60246040517f267ac2cf00000000000000000000000000000000000000000000000000000000815260026004820152fdfea2646970667358221220bfc3fce8fcf2e9815ab316ee756a99e331c74606321c9e92e5da972396bc806a64736f6c63430008130033",
  "deployedBytecode": "0x6101e080604052600436101561001457600080fd5b60003560e01c90816346916301146119f6575080637276069d1461019657806379502c551461014d57806380afdea814610119578063a183dc27146100dc578063c187bbc11461008e5763c9512d991461006d57600080fd5b3461008957600060031936011261008957602060405160028152f35b600080fd5b346100895760006003193601126100895760206040516fffffffffffffffffffffffffffffffff197f0000000000000000000000000000000000000000000000000000000000000000168152f35b346100895760006003193601126100895760206040517f000000000000000000000000000000000000000000000000000000000000000015158152f35b3461008957600060031936011261008957602060005460801b6fffffffffffffffffffffffffffffffff1960405191168152f35b34610089576000600319360112610089576040610168611ceb565b61019482518092602080916fffffffffffffffffffffffffffffffff1981511684520151511515910152565bf35b346100895760606003193601126100895760043567ffffffffffffffff81116100895736602382011215610089578060040135906101e26101d683611b39565b60405180608052611b16565b81608051523660248383010111610089578160009260246020930183608051013760805101015260243573ffffffffffffffffffffffffffffffffffffffff8116809103610089576080515115611998576040519061024082611a8a565b6003825260005b606081106119815750610258611bb5565b506040517f3a0ba6ff0000000000000000000000000000000000000000000000000000000081526000600482015273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690600081602481855afa90811561138d57600091611966575b506102e084611bea565b526102ea83611bea565b506102f3611bb5565b506040517fc3bcacd000000000000000000000000000000000000000000000000000000000808252600260048301526001602483015260016044830152600082606481865afa801561138d57600092839161194c575b5061035386611c26565b5261035d85611c26565b50610366611bb5565b50606460405180948193825260048083015260016024830152600160448301525afa91821561138d5761041492600092839161192a575b506103a785611c36565b526103b184611c36565b506040519060208201526044356040820152604081526103d081611afa565b6103d861206c565b50604051809381927f6835f32c000000000000000000000000000000000000000000000000000000008352602060048401526024830190611b78565b038173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa90811561138d576000916118e8575b50606060a060405161046f81611a23565b6000815260006020820152600060408201528280820152826080820152015260805180518101610180526020816101805103126100895760208101516101005267ffffffffffffffff61010051116100895760a0906101005101610180510312610089576040516104df81611a6e565b6104f26020610100516080510101611e57565b81526105076040610100516080510101611e57565b60208201526060610100516080510101516040820152610100516080510160808101519067ffffffffffffffff821161008957602061054e92816101805101920101611e75565b6060820152610100516080510160a081015160c05267ffffffffffffffff60c051116100895760206101805101603f60c05183010112156100895760c05101602001519161059b83611b9d565b936105a96040519586611b16565b838552602085019460c0516101005160805101016020610180510160408760051b8301011161008957604001610120529194935b60c05161010051608051010160408260051b820101610120511015610b4b5761012051516101c05267ffffffffffffffff6101c0511161008957601f1960a0916101c0510161018051030112610089576040516101a0526106406101a051611a6e565b6101c05160c05161010051608051010101604081015160e05267ffffffffffffffff60e051116100895760206101805101605f60e05183010112156100895760409060e0510101516101405261069861014051611b9d565b956106a66040519788611b16565b610140518752602087019260e0516101c05160c05161010051608051010101016020610180510160606101405160051b8301011161008957606001935b60e0516101c05160c05161010051608051010101019060606101405160051b8301018610156108435785519167ffffffffffffffff8311610089577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08360a0920161018051030112610089576040519161075c83611a6e565b60608160e0516101c05160c051610100516080510101010101015160068110156100895783526107a360808260e0516101c05160c051610100518551010101010101611eba565b60208401526107ca60a08260e0516101c05160c05161010051608051010101010101611eba565b604084015260c08160e0516101c05183516101005160805101010101010151606084015260e0516101c05160c0516101005160805101010101019060e08201519267ffffffffffffffff8411610089576108336020949360608695866101805101920101611e75565b60808201528152019401936106e3565b5050939196909492506101a051526101c05160c05161010051608051010101606081015160a05267ffffffffffffffff60a051116100895760206101805101605f60a05183010112156100895760409060a051010151610160526108a961016051611b9d565b956108b76040519788611b16565b610160518752602087019260a0516101c05160c05161010051608051010101016020610180510160606101605160051b8301011161008957606001935b60a0516101c05160c05161010051608051010101019060606101605160051b830101861015610a7b5785519167ffffffffffffffff8311610089577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08360c0920161018051030112610089576040519161096d83611a23565b60608160a0516101c05160c051610100516080510101010101015160058110156100895783526109b460808260a0516101c05160c051610100518551010101010101611e57565b60208401526109da60a08281516101c05160c05161010051608051010101010101611e57565b6040840152610a0060c08260a0516101c051835161010051608051010101010101611eba565b606084015260e08160a0516101c05160c0516101005160805101010101010151608084015260a0516101c05160c051610100516080510101010101906101008201519267ffffffffffffffff841161008957610a6b6020949360608695866101805101920101611e75565b60a08201528152019401936108f4565b50509493925094909560206101a051015260806101c05160c051610100518351010101015160406101a05101526101c05160c0516101005160805101010160a08101519067ffffffffffffffff8211610089576040610ae39260206101805101920101611e75565b60606101a05101526101c05160c051610100516080510101019060c082015167ffffffffffffffff8111610089576020926040610b2892856101805101920101611e75565b60806101a05101526101a0518152019460206101205101610120529194936105dd565b84876000610bc286886080860152604051610b6581611a8a565b83815260606020820152606060408201526060610b8061206c565b910152610bd460405194859384937f2ceb1e8d000000000000000000000000000000000000000000000000000000008552604060048601526044850190611ee1565b90600319848303016024850152611f84565b038173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa90811561138d5760009161161d575b5090610c28611ceb565b906040519283917f12b037ff000000000000000000000000000000000000000000000000000000008352608060048401526fffffffffffffffffffffffffffffffff1981511660848401526fffffffffffffffffffffffffffffffff1960208201511660a4840152604081015160c48401526080610cb6606083015160a060e4870152610124860190611b78565b910151907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7c84820301610104850152815180825260208201916020808360051b8301019401926000915b8383106114435750505050506003198382030160248401526fffffffffffffffffffffffffffffffff198251168152610d486020830151608060208401526080830190611ee1565b916040810151928281036040840152835180825260208201916020808360051b8301019601926000915b8383106113995788600081808d610dc4610d9a8e8e60608f0151906060818403910152611f84565b82516fffffffffffffffffffffffffffffffff191660448501526020909201515115156064840152565b038173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa90811561138d57600091610fe1575b5060a081015190606081019081515192601f19610e43610e2d86611b9d565b95610e3b6040519788611b16565b808752611b9d565b0160005b818110610fa857505060005b83518051821015610e8d5790610e6c81610e8893611c46565b51610e778288611c46565b52610e828187611c46565b50611c5a565b610e53565b50509150610e9a816120f3565b60405190602082015260208152610eb081611ac2565b600080936000915b8651831015610f6e57610ed4610ece8489611c46565b51611cb6565b60069081811015610f3f57600203610f00575050610efa610ef48561221a565b92611c5a565b91610eb8565b610f10610ece858a969496611c46565b90811015610f3f57600414610f29575b610efa90611c5a565b9450610efa610f37856121a7565b959050610f20565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b610fa48491610f8c9388604051958695608087526080870190611b78565b92602086015260408501528382036060850152611b78565b0390f35b602090604051610fb781611a6e565b60008152600083820152600060408201526060808201526060608082015282828901015201610e47565b90503d806000833e610ff38183611b16565b60208282810103126100895781519167ffffffffffffffff83116100895760c08382018383010312610089576040519261102c84611a23565b611037818301611e57565b8452611047602082840101611e57565b6020850152818101604081810151908601526060015167ffffffffffffffff811161008957838301601f82848601010112156100895780828401015161108c81611b9d565b9161109a6040519384611b16565b8183526020830186860160208460051b84888a0101010111610089576020828688010101905b60208460051b84888a0101010182106112a0575050505060608501526080818301015167ffffffffffffffff811161008957838301601f82848601010112156100895780828401015161111281611b9d565b916111206040519384611b16565b8183526020830186860160208460051b84888a0101010111610089576020828688010101905b60208460051b84888a0101010182106111925750505050608085015260a081830101519067ffffffffffffffff821161008957611187938301920101611e75565b60a082015281610e0e565b815167ffffffffffffffff81116100895760e0601f1982868a8c0101018b8b0103011261008957604051916111c683611aa6565b602082868a8c010101015160058110156100895783526111ee604083878b8d01010101611e57565b6020840152611205606083878b8d01010101611e57565b6040840152888801850182016080810151606085015260a0015167ffffffffffffffff811161008957611246908b8b01908a8c018801850101602001611e75565b60808401528888018501820160c081015160a085015260e001519067ffffffffffffffff82116100895760209361128e8b868096958f968b8f84998601950101010101611e75565b60c08201528152019201919050611146565b815167ffffffffffffffff81116100895760a0601f1982868a8c0101018b8b0103011261008957604051916112d483611a6e565b602082868a8c010101015160068110156100895783526112fc604083878b8d01010101611eba565b602084015288880185018201606081015160408501526080015167ffffffffffffffff81116100895761133d908b8b01908a8c018801850101602001611e75565b606084015260a082868a8c01010101519067ffffffffffffffff82116100895760209361137b8b868096958f968b8f84998601950101010101611e75565b608082015281520192019190506110c0565b6040513d6000823e3d90fd5b919397509193949560208061142f83601f19866001960301875260e08c51916113c3818451611ed4565b6fffffffffffffffffffffffffffffffff198584015116858201526fffffffffffffffffffffffffffffffff1960408401511660408201526060830151606082015260808301511515608082015260a0830151151560a08201528160c080940151938201520190611b78565b990193019301909289979695949293610d72565b91939596509193601f1982820301835285519060a0810182519060a08352815180915260c08301602060c08360051b86010193019160005b81811061159c575050505060208301519082810360208401528151808252602082016020808360051b85010194019260005b8381106115095750505050506114f68360209360806114e5869560406001990151604085015260608501518482036060860152611b78565b920151906080818403910152611b78565b9701930193019092889695949293610d00565b909192939460208061158f83601f19876001960301885260c060a08b51611531848251611ed4565b6fffffffffffffffffffffffffffffffff198682015116868501526fffffffffffffffffffffffffffffffff196040820151166040850152606081015115156060850152608081015160808501520151918160a08201520190611b78565b97019594019291016114ad565b90919293602080611611837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff408a6001960301885260a060808a516115e1848251611ec7565b85810151151586850152604081015115156040850152606081015160608501520151918160808201520190611b78565b9601940192910161147b565b90503d806000833e61162f8183611b16565b60208282810103126100895781519167ffffffffffffffff83116100895760808382018383010312610089576040519261166884611a8a565b611673818301611e57565b84526020818301015167ffffffffffffffff811161008957838301601f8284860101011215610089578082840101516116ab81611b9d565b916116b96040519384611b16565b8183526020830186860160208460051b84888a0101010111610089576020828688010101905b60208460051b84888a0101010182106118ad575050505060208501526040818301015167ffffffffffffffff811161008957838301601f82848601010112156100895780828401015161173181611b9d565b9161173f6040519384611b16565b8183526020830186860160208460051b84888a0101010111610089576020828688010101905b60208460051b84888a0101010182106117b157505050506040850152606081830101519067ffffffffffffffff8211610089576117a693830192010161208c565b606082015282610c1e565b815167ffffffffffffffff81116100895760e0601f1982868a8c0101018b8b0103011261008957604051916117e583611aa6565b602082868a8c0101010151600581101561008957835261180d604083878b8d01010101611e57565b6020840152611824606083878b8d01010101611e57565b604084015288880185018201608081015160608501526118469060a001611eba565b608084015261185d60c083878b8d01010101611eba565b60a084015260e082868a8c01010101519067ffffffffffffffff82116100895760209361189b8b868096958f968b8f84998601950101010101611e75565b60c08201528152019201919050611765565b81519067ffffffffffffffff82116100895760208092916118db8a838095898f8e9085019401010101611fba565b81520192019190506116df565b3d9150816000823e6118fa8282611b16565b602081838101031261008957805167ffffffffffffffff811161008957611924928201910161208c565b8261045e565b61194691503d8085833e61193e8183611b16565b810190612046565b8561039d565b61196091503d8085833e61193e8183611b16565b86610349565b61197b91503d806000833e61193e8183611b16565b846102d6565b60209061198c611bb5565b82828601015201610247565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f656d70747920726573706f6e73650000000000000000000000000000000000006044820152fd5b346100895760006003193601126100895780733cd5334eb64ebbd4003b72022cc25465f1bfcee660209252f35b60c0810190811067ffffffffffffffff821117611a3f57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60a0810190811067ffffffffffffffff821117611a3f57604052565b6080810190811067ffffffffffffffff821117611a3f57604052565b60e0810190811067ffffffffffffffff821117611a3f57604052565b6040810190811067ffffffffffffffff821117611a3f57604052565b6020810190811067ffffffffffffffff821117611a3f57604052565b6060810190811067ffffffffffffffff821117611a3f57604052565b90601f601f19910116810190811067ffffffffffffffff821117611a3f57604052565b67ffffffffffffffff8111611a3f57601f01601f191660200190565b60005b838110611b685750506000910152565b8181015183820152602001611b58565b90601f19601f602093611b9681518092818752878088019101611b55565b0116010190565b67ffffffffffffffff8111611a3f5760051b60200190565b60405190611bc282611a23565b606060a083600081526000602082015260006040820152600083820152600060808201520152565b805115611bf75760200190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b805160011015611bf75760400190565b805160021015611bf75760600190565b8051821015611bf75760209160051b010190565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114611c875760010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b516006811015610f3f5790565b60405190611cd082611ac2565b60008252604051602083611ce383611ade565b600083520152565b611cf3611cc3565b50611cfc611cc3565b506000604051611d0b81611ade565b52604051611d1881611ade565b6000815260405190611d2982611ac2565b6fffffffffffffffffffffffffffffffff197f0000000000000000000000000000000000000000000000000000000000000000168083526020830191825215611df9575151611d755790565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f696d706572736f6e6174696f6e206d6f6465206973206e6f7420737570706f7260448201527f74656400000000000000000000000000000000000000000000000000000000006064820152fd5b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f61707049642063616e6e6f7420626520656d70747900000000000000000000006044820152fd5b51906fffffffffffffffffffffffffffffffff198216820361008957565b81601f82011215610089578051611e8b81611b39565b92611e996040519485611b16565b8184526020828401011161008957611eb79160208085019101611b55565b90565b5190811515820361008957565b906006821015610f3f5752565b906005821015610f3f5752565b908082519081815260208091019281808460051b8301019501936000915b848310611f0f5750505050505090565b9091929394958480611f7483601f1986600196030187528a51611f33828251611ec7565b838101518483015260408082015115159083015260608082015115159083015260808082015115159083015260a0809101519160c080928201520190611b78565b9801930193019194939290611eff565b611eb7916040611f9d8351606084526060840190611b78565b926020810151151560208401520151906040818403910152611b78565b919060c0838203126100895760405190611fd382611a23565b81938051600681101561008957835260208101516020840152611ff860408201611eba565b604084015261200960608201611eba565b606084015261201a60808201611eba565b608084015260a08101519167ffffffffffffffff83116100895760a0926120419201611e75565b910152565b9060208282031261008957815167ffffffffffffffff811161008957611eb79201611fba565b6040519061207982611afa565b6060604083828152600060208201520152565b919060608382031261008957604051906120a582611afa565b819380519167ffffffffffffffff9283811161008957816120c7918401611e75565b84526120d560208301611eba565b60208501526040820151928311610089576040926120419201611e75565b6000805b606083018051805183101561217657610ece8361211392611c46565b60068110156121495715612134575061212d606091611c5a565b90506120f7565b60409350612143925051611c46565b51015190565b6024847f4e487b710000000000000000000000000000000000000000000000000000000081526021600452fd5b602484604051907f267ac2cf0000000000000000000000000000000000000000000000000000000082526004820152fd5b6000805b60608301805180518310156121ea57610ece836121c792611c46565b60068110156121495760041461213457506121e3606091611c5a565b90506121ab565b60246040517f267ac2cf000000000000000000000000000000000000000000000000000000008152600480820152fd5b6000805b606083018051805183101561225d57610ece8361223a92611c46565b6006811015612149576002146121345750612256606091611c5a565b905061221e565b60246040517f267ac2cf00000000000000000000000000000000000000000000000000000000815260026004820152fdfea2646970667358221220bfc3fce8fcf2e9815ab316ee756a99e331c74606321c9e92e5da972396bc806a64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11064,
        "contract": "contracts/MecenateVerifier.sol:MecenateVerifier",
        "label": "appId",
        "offset": 0,
        "slot": "0",
        "type": "t_bytes16"
      }
    ],
    "types": {
      "t_bytes16": {
        "encoding": "inplace",
        "label": "bytes16",
        "numberOfBytes": "16"
      }
    }
  }
}