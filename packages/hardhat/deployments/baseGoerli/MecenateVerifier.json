{
  "address": "0xE489083a791C01F2c08600dc5E12051F82Ebc57f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes16",
          "name": "_appId",
          "type": "bytes16"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "enum AuthType",
          "name": "authType",
          "type": "uint8"
        }
      ],
      "name": "AuthTypeNotFoundInVerifiedResult",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ADDRESSES_PROVIDER_V2",
      "outputs": [
        {
          "internalType": "contract IAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "APP_ID",
      "outputs": [
        {
          "internalType": "bytes16",
          "name": "",
          "type": "bytes16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IS_IMPERSONATION_MODE",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SISMO_CONNECT_LIB_VERSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "appId",
      "outputs": [
        {
          "internalType": "bytes16",
          "name": "",
          "type": "bytes16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "config",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes16",
              "name": "appId",
              "type": "bytes16"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "isImpersonationMode",
                  "type": "bool"
                }
              ],
              "internalType": "struct VaultConfig",
              "name": "vault",
              "type": "tuple"
            }
          ],
          "internalType": "struct SismoConnectConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "sismoConnectResponse",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        }
      ],
      "name": "sismoVerify",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb04fea05f4e61d3012d6e78a3661d656961d59713cbb12d5d1ecceddbc83f91c",
  "receipt": {
    "to": null,
    "from": "0x8aA5F726d9F868a21a8bd748E2f1E43bA31eb670",
    "contractAddress": "0xE489083a791C01F2c08600dc5E12051F82Ebc57f",
    "transactionIndex": 1,
    "gasUsed": "1929838",
    "logsBloom": "0x
    "blockHash": "0x4b5f479a3737072a9b58b8e8458f1964b5a4e555d7f83f32fd22daf5d7f9b561",
    "transactionHash": "0xb04fea05f4e61d3012d6e78a3661d656961d59713cbb12d5d1ecceddbc83f91c",
    "logs": [],
    "blockNumber": 11101555,
    "cumulativeGasUsed": "1976691",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6c434d2de6efa3e7169bc58843b74d74"
  ],
  "numDeployments": 5,
  "solcInputHash": "ecd027acd5b2c3f49b1ec8f0fd616964",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"_appId\",\"type\":\"bytes16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"enum AuthType\",\"name\":\"authType\",\"type\":\"uint8\"}],\"name\":\"AuthTypeNotFoundInVerifiedResult\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ADDRESSES_PROVIDER_V2\",\"outputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"APP_ID\",\"outputs\":[{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IS_IMPERSONATION_MODE\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SISMO_CONNECT_LIB_VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes16\",\"name\":\"appId\",\"type\":\"bytes16\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isImpersonationMode\",\"type\":\"bool\"}],\"internalType\":\"struct VaultConfig\",\"name\":\"vault\",\"type\":\"tuple\"}],\"internalType\":\"struct SismoConnectConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"sismoVerify\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MecenateVerifier.sol\":\"MecenateVerifier\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/MecenateVerifier.sol\":{\"content\":\"/**\\n * @title MecenateVerifier\\n * @dev Contract that verifies user identity using SismoConnect and returns user's vaultId, twitterId and telegramId.\\n */\\npragma solidity ^0.8.17;\\nimport \\\"./helpers/SismoConnectLib.sol\\\";\\n\\ncontract MecenateVerifier is SismoConnect {\\n    bytes16 public appId;\\n\\n    constructor(bytes16 _appId) SismoConnect(buildConfig(_appId)) {\\n        appId = _appId;\\n    }\\n\\n    function sismoVerify(\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        address _from\\n    ) external view returns (bytes memory, uint256, uint256) {\\n        require(sismoConnectResponse.length > 0, \\\"empty response\\\");\\n\\n        // Build authorization requests\\n        AuthRequest[] memory auths = new AuthRequest[](3);\\n\\n        auths[0] = buildAuth(AuthType.VAULT);\\n\\n        auths[1] = buildAuth({\\n            authType: AuthType.TWITTER,\\n            isOptional: true,\\n            isSelectableByUser: true\\n        });\\n\\n        auths[2] = buildAuth({\\n            authType: AuthType.TELEGRAM,\\n            isOptional: true,\\n            isSelectableByUser: true\\n        });\\n\\n        // Verify the response\\n        SismoConnectVerifiedResult memory result = verify({\\n            responseBytes: sismoConnectResponse,\\n            auths: auths,\\n            signature: buildSignature({message: abi.encode(_to)})\\n        });\\n\\n        bytes memory signedMessage = SismoConnectHelper.getSignedMessage(\\n            result\\n        );\\n\\n        (address to, address from) = abi.decode(\\n            signedMessage,\\n            (address, address)\\n        );\\n\\n        require(_from == from, \\\"WRONG_FROM_ADDRESS\\\");\\n\\n        require(to == _to, \\\"WRONG_TO_ADDRESS\\\");\\n\\n        // Store the verified auths\\n        VerifiedAuth[] memory _verifiedAuths = new VerifiedAuth[](\\n            result.auths.length\\n        );\\n\\n        for (uint256 i = 0; i < result.auths.length; i++) {\\n            _verifiedAuths[i] = result.auths[i];\\n        }\\n\\n        // Get the vaultId of the user\\n        // --> vaultId = hash(userVaultSecret, appId)\\n        uint256 vaultId = SismoConnectHelper.getUserId(result, AuthType.VAULT);\\n\\n        // Convert the vaultId to bytes\\n        bytes memory vaultIdBytes = abi.encodePacked(vaultId);\\n\\n        // Get the userId of the user\\n        uint256 twitterId = 0;\\n        uint256 telegramId = 0;\\n\\n        for (uint256 i = 0; i < _verifiedAuths.length; i++) {\\n            if (_verifiedAuths[i].authType == AuthType.TWITTER) {\\n                twitterId = SismoConnectHelper.getUserId(\\n                    result,\\n                    AuthType.TWITTER\\n                );\\n            } else if (_verifiedAuths[i].authType == AuthType.TELEGRAM) {\\n                telegramId = SismoConnectHelper.getUserId(\\n                    result,\\n                    AuthType.TELEGRAM\\n                );\\n            }\\n        }\\n\\n        return (vaultIdBytes, twitterId, telegramId);\\n    }\\n}\\n\",\"keccak256\":\"0xc176da38c8890f3b9217233f018b4ae64374069b24e7c46be09bf56e0ac1e1db\"},\"contracts/helpers/SismoConnectLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport {RequestBuilder, SismoConnectRequest, SismoConnectResponse, SismoConnectConfig} from \\\"./utils/RequestBuilder.sol\\\";\\r\\nimport {AuthRequestBuilder, AuthRequest, Auth, VerifiedAuth, AuthType} from \\\"./utils/AuthRequestBuilder.sol\\\";\\r\\nimport {ClaimRequestBuilder, ClaimRequest, Claim, VerifiedClaim, ClaimType} from \\\"./utils/ClaimRequestBuilder.sol\\\";\\r\\nimport {SignatureBuilder, SignatureRequest, Signature} from \\\"./utils/SignatureBuilder.sol\\\";\\r\\nimport {VaultConfig} from \\\"./utils/Structs.sol\\\";\\r\\nimport {ISismoConnectVerifier, SismoConnectVerifiedResult} from \\\"./interfaces/ISismoConnectVerifier.sol\\\";\\r\\nimport {IAddressesProvider} from \\\"./interfaces/IAddressesProvider.sol\\\";\\r\\nimport {SismoConnectHelper} from \\\"./utils/SismoConnectHelper.sol\\\";\\r\\n\\r\\ncontract SismoConnect {\\r\\n    uint256 public constant SISMO_CONNECT_LIB_VERSION = 2;\\r\\n\\r\\n    IAddressesProvider public constant ADDRESSES_PROVIDER_V2 =\\r\\n        IAddressesProvider(0x3Cd5334eB64ebBd4003b72022CC25465f1BFcEe6);\\r\\n\\r\\n    ISismoConnectVerifier immutable _sismoConnectVerifier;\\r\\n\\r\\n    // external libraries\\r\\n    AuthRequestBuilder immutable _authRequestBuilder;\\r\\n    ClaimRequestBuilder immutable _claimRequestBuilder;\\r\\n    SignatureBuilder immutable _signatureBuilder;\\r\\n    RequestBuilder immutable _requestBuilder;\\r\\n\\r\\n    // config\\r\\n    bytes16 public immutable APP_ID;\\r\\n    bool public immutable IS_IMPERSONATION_MODE;\\r\\n\\r\\n    constructor(SismoConnectConfig memory _config) {\\r\\n        APP_ID = _config.appId;\\r\\n        IS_IMPERSONATION_MODE = _config.vault.isImpersonationMode;\\r\\n\\r\\n        _sismoConnectVerifier = ISismoConnectVerifier(\\r\\n            ADDRESSES_PROVIDER_V2.get(string(\\\"sismoConnectVerifier-v1.2\\\"))\\r\\n        );\\r\\n        // external libraries\\r\\n        _authRequestBuilder = AuthRequestBuilder(\\r\\n            ADDRESSES_PROVIDER_V2.get(string(\\\"authRequestBuilder-v1.1\\\"))\\r\\n        );\\r\\n        _claimRequestBuilder = ClaimRequestBuilder(\\r\\n            ADDRESSES_PROVIDER_V2.get(string(\\\"claimRequestBuilder-v1.1\\\"))\\r\\n        );\\r\\n        _signatureBuilder = SignatureBuilder(\\r\\n            ADDRESSES_PROVIDER_V2.get(string(\\\"signatureBuilder-v1.1\\\"))\\r\\n        );\\r\\n        _requestBuilder = RequestBuilder(\\r\\n            ADDRESSES_PROVIDER_V2.get(string(\\\"requestBuilder-v1.1\\\"))\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // public function because it needs to be used by this contract and can be used by other contracts\\r\\n    function config() public view returns (SismoConnectConfig memory) {\\r\\n        return buildConfig(APP_ID);\\r\\n    }\\r\\n\\r\\n    function buildConfig(\\r\\n        bytes16 appId\\r\\n    ) internal pure returns (SismoConnectConfig memory) {\\r\\n        SismoConnectConfig memory result = SismoConnectConfig({\\r\\n            appId: appId,\\r\\n            vault: buildVaultConfig()\\r\\n        });\\r\\n        require(appId != bytes16(0), \\\"appId cannot be empty\\\");\\r\\n        require(\\r\\n            result.vault.isImpersonationMode == false,\\r\\n            \\\"impersonation mode is not supported\\\"\\r\\n        );\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function buildVaultConfig() internal pure returns (VaultConfig memory) {\\r\\n        return VaultConfig({isImpersonationMode: false});\\r\\n    }\\r\\n\\r\\n    function verify(\\r\\n        bytes memory responseBytes,\\r\\n        AuthRequest[] memory auths,\\r\\n        SignatureRequest memory signature\\r\\n    ) internal view returns (SismoConnectVerifiedResult memory) {\\r\\n        SismoConnectResponse memory response = abi.decode(\\r\\n            responseBytes,\\r\\n            (SismoConnectResponse)\\r\\n        );\\r\\n        SismoConnectRequest memory request = buildRequest(auths, signature);\\r\\n        return _sismoConnectVerifier.verify(response, request, config());\\r\\n    }\\r\\n\\r\\n    function buildAuth(\\r\\n        AuthType authType,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser\\r\\n    ) internal view returns (AuthRequest memory) {\\r\\n        return\\r\\n            _authRequestBuilder.build(authType, isOptional, isSelectableByUser);\\r\\n    }\\r\\n\\r\\n    function buildAuth(\\r\\n        AuthType authType\\r\\n    ) internal view returns (AuthRequest memory) {\\r\\n        return _authRequestBuilder.build(authType);\\r\\n    }\\r\\n\\r\\n    function buildSignature(\\r\\n        bytes memory message\\r\\n    ) internal view returns (SignatureRequest memory) {\\r\\n        return _signatureBuilder.build(message);\\r\\n    }\\r\\n\\r\\n    function buildRequest(\\r\\n        AuthRequest[] memory auths,\\r\\n        SignatureRequest memory signature\\r\\n    ) internal view returns (SismoConnectRequest memory) {\\r\\n        return _requestBuilder.build(auths, signature);\\r\\n    }\\r\\n\\r\\n    function _GET_EMPTY_SIGNATURE_REQUEST()\\r\\n        internal\\r\\n        view\\r\\n        returns (SignatureRequest memory)\\r\\n    {\\r\\n        return _signatureBuilder.buildEmpty();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x48046d8c04bc18e540fe4c28285d6adab2d992fb53c941f91e4d479363acd7bb\",\"license\":\"MIT\"},\"contracts/helpers/interfaces/IAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface IAddressesProvider {\\r\\n    /**\\r\\n     * @dev Sets the address of a contract.\\r\\n     * @param contractAddress Address of the contract.\\r\\n     * @param contractName Name of the contract.\\r\\n     */\\r\\n    function set(address contractAddress, string memory contractName) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the address of multiple contracts.\\r\\n     * @param contractAddresses Addresses of the contracts.\\r\\n     * @param contractNames Names of the contracts.\\r\\n     */\\r\\n    function setBatch(\\r\\n        address[] calldata contractAddresses,\\r\\n        string[] calldata contractNames\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of a contract.\\r\\n     * @param contractName Name of the contract (string).\\r\\n     * @return Address of the contract.\\r\\n     */\\r\\n    function get(string memory contractName) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of a contract.\\r\\n     * @param contractNameHash Hash of the name of the contract (bytes32).\\r\\n     * @return Address of the contract.\\r\\n     */\\r\\n    function get(bytes32 contractNameHash) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addresses of all contracts inputed.\\r\\n     * @param contractNames Names of the contracts as strings.\\r\\n     */\\r\\n    function getBatch(\\r\\n        string[] calldata contractNames\\r\\n    ) external view returns (address[] memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addresses of all contracts inputed.\\r\\n     * @param contractNamesHash Names of the contracts as strings.\\r\\n     */\\r\\n    function getBatch(\\r\\n        bytes32[] calldata contractNamesHash\\r\\n    ) external view returns (address[] memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addresses of all contracts in `_contractNames`\\r\\n     * @return Names, Hashed Names and Addresses of all contracts.\\r\\n     */\\r\\n    function getAll()\\r\\n        external\\r\\n        view\\r\\n        returns (string[] memory, bytes32[] memory, address[] memory);\\r\\n}\\r\\n\",\"keccak256\":\"0xa58b350d38576b547693bb6bc17044578ae5e91d02344403d674df990e6486ab\",\"license\":\"MIT\"},\"contracts/helpers/interfaces/ISismoConnectVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"../utils/Structs.sol\\\";\\r\\n\\r\\ninterface ISismoConnectVerifier {\\r\\n    event VerifierSet(bytes32, address);\\r\\n\\r\\n    error AppIdMismatch(bytes16 receivedAppId, bytes16 expectedAppId);\\r\\n    error NamespaceMismatch(\\r\\n        bytes16 receivedNamespace,\\r\\n        bytes16 expectedNamespace\\r\\n    );\\r\\n    error VersionMismatch(bytes32 requestVersion, bytes32 responseVersion);\\r\\n    error SignatureMessageMismatch(\\r\\n        bytes requestMessageSignature,\\r\\n        bytes responseMessageSignature\\r\\n    );\\r\\n\\r\\n    function verify(\\r\\n        SismoConnectResponse memory response,\\r\\n        SismoConnectRequest memory request,\\r\\n        SismoConnectConfig memory config\\r\\n    ) external view returns (SismoConnectVerifiedResult memory);\\r\\n\\r\\n    function SISMO_CONNECT_VERSION() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0x082a1b89e3ae4a3a7e7494a81aa7a5e8cb9cab21a81ce14c7e6ae8335061d18c\",\"license\":\"MIT\"},\"contracts/helpers/utils/AuthRequestBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./Structs.sol\\\";\\r\\n\\r\\ncontract AuthRequestBuilder {\\r\\n    // default values for Auth Request\\r\\n    bool public constant DEFAULT_AUTH_REQUEST_IS_ANON = false;\\r\\n    uint256 public constant DEFAULT_AUTH_REQUEST_USER_ID = 0;\\r\\n    bool public constant DEFAULT_AUTH_REQUEST_IS_OPTIONAL = false;\\r\\n    bytes public constant DEFAULT_AUTH_REQUEST_EXTRA_DATA = \\\"\\\";\\r\\n\\r\\n    error InvalidUserIdAndIsSelectableByUserAuthType();\\r\\n    error InvalidUserIdAndAuthType();\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        bool isAnon,\\r\\n        uint256 userId,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: isAnon,\\r\\n                userId: userId,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        bool isAnon,\\r\\n        uint256 userId,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: isAnon,\\r\\n                userId: userId,\\r\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthType authType\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\r\\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\\r\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\r\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        bool isAnon\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: isAnon,\\r\\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\\r\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\r\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        uint256 userId\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\r\\n                userId: userId,\\r\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\r\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\r\\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\\r\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        bool isAnon,\\r\\n        uint256 userId\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: isAnon,\\r\\n                userId: userId,\\r\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\r\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        bool isAnon,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: isAnon,\\r\\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\\r\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        uint256 userId,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\r\\n                userId: userId,\\r\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    // allow dev to choose for isOptional\\r\\n    // the user is ask to choose isSelectableByUser to avoid the function signature collision\\r\\n    // between build(AuthType authType, bool isOptional) and build(AuthType authType, bool isAnon)\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\r\\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser,\\r\\n        uint256 userId\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\r\\n                userId: userId,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    // the user is ask to choose isSelectableByUser to avoid the function signature collision\\r\\n    // between build(AuthType authType, bool isAnon, bool isOptional) and build(AuthType authType, bool isOptional, bool isSelectableByUser)\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        bool isAnon,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: isAnon,\\r\\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        uint256 userId,\\r\\n        bool isOptional\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\r\\n                userId: userId,\\r\\n                isOptional: isOptional,\\r\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthType authType,\\r\\n        bool isAnon,\\r\\n        uint256 userId,\\r\\n        bool isOptional\\r\\n    ) external pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: isAnon,\\r\\n                userId: userId,\\r\\n                isOptional: isOptional,\\r\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function _build(\\r\\n        AuthType authType,\\r\\n        bool isAnon,\\r\\n        uint256 userId,\\r\\n        bool isOptional,\\r\\n        bytes memory extraData\\r\\n    ) internal pure returns (AuthRequest memory) {\\r\\n        return\\r\\n            _build({\\r\\n                authType: authType,\\r\\n                isAnon: isAnon,\\r\\n                userId: userId,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: _authIsSelectableDefaultValue(\\r\\n                    authType,\\r\\n                    userId\\r\\n                ),\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function _build(\\r\\n        AuthType authType,\\r\\n        bool isAnon,\\r\\n        uint256 userId,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser,\\r\\n        bytes memory extraData\\r\\n    ) internal pure returns (AuthRequest memory) {\\r\\n        // When `userId` is 0, it means the app does not require a specific auth account and the user needs\\r\\n        // to choose the account they want to use for the app.\\r\\n        // When `isSelectableByUser` is true, the user can select the account they want to use.\\r\\n        // The combination of `userId = 0` and `isSelectableByUser = false` does not make sense and should not be used.\\r\\n        // If this combination is detected, the function will revert with an error.\\r\\n        if (\\r\\n            authType != AuthType.VAULT &&\\r\\n            userId == 0 &&\\r\\n            isSelectableByUser == false\\r\\n        ) {\\r\\n            revert InvalidUserIdAndIsSelectableByUserAuthType();\\r\\n        }\\r\\n        // When requesting an authType VAULT, the `userId` must be 0 and isSelectableByUser must be true.\\r\\n        if (\\r\\n            authType == AuthType.VAULT &&\\r\\n            userId != 0 &&\\r\\n            isSelectableByUser == false\\r\\n        ) {\\r\\n            revert InvalidUserIdAndAuthType();\\r\\n        }\\r\\n        return\\r\\n            AuthRequest({\\r\\n                authType: authType,\\r\\n                isAnon: isAnon,\\r\\n                userId: userId,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function _authIsSelectableDefaultValue(\\r\\n        AuthType authType,\\r\\n        uint256 requestedUserId\\r\\n    ) internal pure returns (bool) {\\r\\n        // isSelectableByUser value should always be false in case of VAULT authType.\\r\\n        // This is because the user can't select the account they want to use for the app.\\r\\n        // the userId = Hash(VaultSecret, AppId) in the case of VAULT authType.\\r\\n        if (authType == AuthType.VAULT) {\\r\\n            return false;\\r\\n        }\\r\\n        // When `requestedUserId` is 0, it means no specific auth account is requested by the app,\\r\\n        // so we want the default value for `isSelectableByUser` to be `true`.\\r\\n        if (requestedUserId == 0) {\\r\\n            return true;\\r\\n        }\\r\\n        // When `requestedUserId` is not 0, it means a specific auth account is requested by the app,\\r\\n        // so we want the default value for `isSelectableByUser` to be `false`.\\r\\n        else {\\r\\n            return false;\\r\\n        }\\r\\n        // However, the dev can still override this default value by setting `isSelectableByUser` to `true`.\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf66737a67a424a42db5a6356fa577712ca07e5a89a2667a7ef3bb2abfc054913\",\"license\":\"MIT\"},\"contracts/helpers/utils/ClaimRequestBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./Structs.sol\\\";\\r\\n\\r\\ncontract ClaimRequestBuilder {\\r\\n    // default value for Claim Request\\r\\n    bytes16 public constant DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP =\\r\\n        bytes16(\\\"latest\\\");\\r\\n    uint256 public constant DEFAULT_CLAIM_REQUEST_VALUE = 1;\\r\\n    ClaimType public constant DEFAULT_CLAIM_REQUEST_TYPE = ClaimType.GTE;\\r\\n    bool public constant DEFAULT_CLAIM_REQUEST_IS_OPTIONAL = false;\\r\\n    bool public constant DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER = true;\\r\\n    bytes public constant DEFAULT_CLAIM_REQUEST_EXTRA_DATA = \\\"\\\";\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        uint256 value,\\r\\n        ClaimType claimType,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                claimType: claimType,\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: value,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        uint256 value,\\r\\n        ClaimType claimType,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                claimType: claimType,\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: value,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        uint256 value\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: value,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        ClaimType claimType\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: claimType,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        uint256 value\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: value,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        ClaimType claimType\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: claimType,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        uint256 value,\\r\\n        ClaimType claimType\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: value,\\r\\n                claimType: claimType,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        uint256 value,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: value,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        ClaimType claimType,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: claimType,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        uint256 value,\\r\\n        ClaimType claimType\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: value,\\r\\n                claimType: claimType,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        uint256 value,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: value,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        ClaimType claimType,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: claimType,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        uint256 value,\\r\\n        ClaimType claimType,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: value,\\r\\n                claimType: claimType,\\r\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\r\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    // allow dev to choose for isOptional\\r\\n    // we force to also set isSelectableByUser\\r\\n    // otherwise function signatures would be colliding\\r\\n    // between build(bytes16 groupId, bool isOptional) and build(bytes16 groupId, bool isSelectableByUser)\\r\\n    // we keep this logic for all function signature combinations\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        uint256 value,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: value,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        ClaimType claimType,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: claimType,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        uint256 value,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: value,\\r\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        ClaimType claimType,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\r\\n                claimType: claimType,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        uint256 value,\\r\\n        ClaimType claimType,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\r\\n                value: value,\\r\\n                claimType: claimType,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes16 groupId,\\r\\n        bytes16 groupTimestamp,\\r\\n        uint256 value,\\r\\n        ClaimType claimType,\\r\\n        bool isOptional,\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (ClaimRequest memory) {\\r\\n        return\\r\\n            ClaimRequest({\\r\\n                groupId: groupId,\\r\\n                groupTimestamp: groupTimestamp,\\r\\n                value: value,\\r\\n                claimType: claimType,\\r\\n                isOptional: isOptional,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7a20ce58960f47744184c31a821bf398214081669b4d766d638db3340eb9264e\",\"license\":\"MIT\"},\"contracts/helpers/utils/RequestBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./Structs.sol\\\";\\r\\nimport {SignatureBuilder} from \\\"./SignatureBuilder.sol\\\";\\r\\n\\r\\ncontract RequestBuilder {\\r\\n    // default value for namespace\\r\\n    bytes16 public constant DEFAULT_NAMESPACE = bytes16(keccak256(\\\"main\\\"));\\r\\n    // default value for a signature request\\r\\n    SignatureRequest DEFAULT_SIGNATURE_REQUEST =\\r\\n        SignatureRequest({\\r\\n            message: \\\"MESSAGE_SELECTED_BY_USER\\\",\\r\\n            isSelectableByUser: false,\\r\\n            extraData: \\\"\\\"\\r\\n        });\\r\\n\\r\\n    function build(\\r\\n        AuthRequest memory auth,\\r\\n        ClaimRequest memory claim,\\r\\n        SignatureRequest memory signature,\\r\\n        bytes16 namespace\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\r\\n        auths[0] = auth;\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\r\\n        claims[0] = claim;\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest memory auth,\\r\\n        ClaimRequest memory claim,\\r\\n        bytes16 namespace\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\r\\n        auths[0] = auth;\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\r\\n        claims[0] = claim;\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        ClaimRequest memory claim,\\r\\n        SignatureRequest memory signature,\\r\\n        bytes16 namespace\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\r\\n        claims[0] = claim;\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        ClaimRequest memory claim,\\r\\n        bytes16 namespace\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\r\\n        claims[0] = claim;\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest memory auth,\\r\\n        SignatureRequest memory signature,\\r\\n        bytes16 namespace\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\r\\n        auths[0] = auth;\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest memory auth,\\r\\n        bytes16 namespace\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\r\\n        auths[0] = auth;\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest memory auth,\\r\\n        ClaimRequest memory claim,\\r\\n        SignatureRequest memory signature\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\r\\n        auths[0] = auth;\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\r\\n        claims[0] = claim;\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest memory auth,\\r\\n        ClaimRequest memory claim\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\r\\n        auths[0] = auth;\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\r\\n        claims[0] = claim;\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest memory auth,\\r\\n        SignatureRequest memory signature\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\r\\n        auths[0] = auth;\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest memory auth\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\r\\n        auths[0] = auth;\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        ClaimRequest memory claim,\\r\\n        SignatureRequest memory signature\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\r\\n        claims[0] = claim;\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        ClaimRequest memory claim\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\r\\n        claims[0] = claim;\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // build with arrays for auths and claims\\r\\n    function build(\\r\\n        AuthRequest[] memory auths,\\r\\n        ClaimRequest[] memory claims,\\r\\n        SignatureRequest memory signature,\\r\\n        bytes16 namespace\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest[] memory auths,\\r\\n        ClaimRequest[] memory claims,\\r\\n        bytes16 namespace\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        ClaimRequest[] memory claims,\\r\\n        SignatureRequest memory signature,\\r\\n        bytes16 namespace\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        ClaimRequest[] memory claims,\\r\\n        bytes16 namespace\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest[] memory auths,\\r\\n        SignatureRequest memory signature,\\r\\n        bytes16 namespace\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest[] memory auths,\\r\\n        bytes16 namespace\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: namespace,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest[] memory auths,\\r\\n        ClaimRequest[] memory claims,\\r\\n        SignatureRequest memory signature\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest[] memory auths,\\r\\n        ClaimRequest[] memory claims\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest[] memory auths,\\r\\n        SignatureRequest memory signature\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        AuthRequest[] memory auths\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        ClaimRequest[] memory claims,\\r\\n        SignatureRequest memory signature\\r\\n    ) external pure returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: signature\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        ClaimRequest[] memory claims\\r\\n    ) external view returns (SismoConnectRequest memory) {\\r\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\r\\n        return (\\r\\n            SismoConnectRequest({\\r\\n                namespace: DEFAULT_NAMESPACE,\\r\\n                auths: auths,\\r\\n                claims: claims,\\r\\n                signature: DEFAULT_SIGNATURE_REQUEST\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xed1a2ba47be3b4a971b949842363c0e14180ebcf10d808075091a2330e5973fd\",\"license\":\"MIT\"},\"contracts/helpers/utils/SignatureBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./Structs.sol\\\";\\r\\n\\r\\ncontract SignatureBuilder {\\r\\n    // default values for Signature Request\\r\\n    bytes public constant DEFAULT_SIGNATURE_REQUEST_MESSAGE =\\r\\n        \\\"MESSAGE_SELECTED_BY_USER\\\";\\r\\n    bool public constant DEFAULT_SIGNATURE_REQUEST_IS_SELECTABLE_BY_USER =\\r\\n        false;\\r\\n    bytes public constant DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA = \\\"\\\";\\r\\n\\r\\n    function build(\\r\\n        bytes memory message\\r\\n    ) external pure returns (SignatureRequest memory) {\\r\\n        return\\r\\n            SignatureRequest({\\r\\n                message: message,\\r\\n                isSelectableByUser: DEFAULT_SIGNATURE_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes memory message,\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (SignatureRequest memory) {\\r\\n        return\\r\\n            SignatureRequest({\\r\\n                message: message,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes memory message,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (SignatureRequest memory) {\\r\\n        return\\r\\n            SignatureRequest({\\r\\n                message: message,\\r\\n                isSelectableByUser: DEFAULT_SIGNATURE_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bytes memory message,\\r\\n        bool isSelectableByUser,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (SignatureRequest memory) {\\r\\n        return\\r\\n            SignatureRequest({\\r\\n                message: message,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bool isSelectableByUser\\r\\n    ) external pure returns (SignatureRequest memory) {\\r\\n        return\\r\\n            SignatureRequest({\\r\\n                message: DEFAULT_SIGNATURE_REQUEST_MESSAGE,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function build(\\r\\n        bool isSelectableByUser,\\r\\n        bytes memory extraData\\r\\n    ) external pure returns (SignatureRequest memory) {\\r\\n        return\\r\\n            SignatureRequest({\\r\\n                message: DEFAULT_SIGNATURE_REQUEST_MESSAGE,\\r\\n                isSelectableByUser: isSelectableByUser,\\r\\n                extraData: extraData\\r\\n            });\\r\\n    }\\r\\n\\r\\n    function buildEmpty() external pure returns (SignatureRequest memory) {\\r\\n        return\\r\\n            SignatureRequest({\\r\\n                message: DEFAULT_SIGNATURE_REQUEST_MESSAGE,\\r\\n                isSelectableByUser: DEFAULT_SIGNATURE_REQUEST_IS_SELECTABLE_BY_USER,\\r\\n                extraData: DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA\\r\\n            });\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1ddc35c54605315cefa153e2752c5efc9970072bae955420b527cf2711fa89b0\",\"license\":\"MIT\"},\"contracts/helpers/utils/SismoConnectHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"./Structs.sol\\\";\\r\\n\\r\\nlibrary SismoConnectHelper {\\r\\n    error AuthTypeNotFoundInVerifiedResult(AuthType authType);\\r\\n\\r\\n    function getUserId(\\r\\n        SismoConnectVerifiedResult memory result,\\r\\n        AuthType authType\\r\\n    ) internal pure returns (uint256) {\\r\\n        // get the first userId that matches the authType\\r\\n        for (uint256 i = 0; i < result.auths.length; i++) {\\r\\n            if (result.auths[i].authType == authType) {\\r\\n                return result.auths[i].userId;\\r\\n            }\\r\\n        }\\r\\n        revert AuthTypeNotFoundInVerifiedResult(authType);\\r\\n    }\\r\\n\\r\\n    function getUserIds(\\r\\n        SismoConnectVerifiedResult memory result,\\r\\n        AuthType authType\\r\\n    ) internal pure returns (uint256[] memory) {\\r\\n        // get all userIds that match the authType\\r\\n        uint256[] memory userIds = new uint256[](result.auths.length);\\r\\n        for (uint256 i = 0; i < result.auths.length; i++) {\\r\\n            if (result.auths[i].authType == authType) {\\r\\n                userIds[i] = result.auths[i].userId;\\r\\n            }\\r\\n        }\\r\\n        return userIds;\\r\\n    }\\r\\n\\r\\n    function getSignedMessage(\\r\\n        SismoConnectVerifiedResult memory result\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        return result.signedMessage;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x08c39ecd8cf8b6ed3028f1b135cd20b3a2b5acf961728a6f7ab5622a66f1fcde\",\"license\":\"MIT\"},\"contracts/helpers/utils/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nstruct SismoConnectRequest {\\r\\n    bytes16 namespace;\\r\\n    AuthRequest[] auths;\\r\\n    ClaimRequest[] claims;\\r\\n    SignatureRequest signature;\\r\\n}\\r\\n\\r\\nstruct SismoConnectConfig {\\r\\n    bytes16 appId;\\r\\n    VaultConfig vault;\\r\\n}\\r\\n\\r\\nstruct VaultConfig {\\r\\n    bool isImpersonationMode;\\r\\n}\\r\\n\\r\\nstruct AuthRequest {\\r\\n    AuthType authType;\\r\\n    uint256 userId; // default: 0\\r\\n    // flags\\r\\n    bool isAnon; // default: false -> true not supported yet, need to throw if true\\r\\n    bool isOptional; // default: false\\r\\n    bool isSelectableByUser; // default: true\\r\\n    //\\r\\n    bytes extraData; // default: \\\"\\\"\\r\\n}\\r\\n\\r\\nstruct ClaimRequest {\\r\\n    ClaimType claimType; // default: GTE\\r\\n    bytes16 groupId;\\r\\n    bytes16 groupTimestamp; // default: bytes16(\\\"latest\\\")\\r\\n    uint256 value; // default: 1\\r\\n    // flags\\r\\n    bool isOptional; // default: false\\r\\n    bool isSelectableByUser; // default: true\\r\\n    //\\r\\n    bytes extraData; // default: \\\"\\\"\\r\\n}\\r\\n\\r\\nstruct SignatureRequest {\\r\\n    bytes message; // default: \\\"MESSAGE_SELECTED_BY_USER\\\"\\r\\n    bool isSelectableByUser; // default: false\\r\\n    bytes extraData; // default: \\\"\\\"\\r\\n}\\r\\n\\r\\nenum AuthType {\\r\\n    VAULT,\\r\\n    GITHUB,\\r\\n    TWITTER,\\r\\n    EVM_ACCOUNT,\\r\\n    TELEGRAM,\\r\\n    DISCORD\\r\\n}\\r\\n\\r\\nenum ClaimType {\\r\\n    GTE,\\r\\n    GT,\\r\\n    EQ,\\r\\n    LT,\\r\\n    LTE\\r\\n}\\r\\n\\r\\nstruct Auth {\\r\\n    AuthType authType;\\r\\n    bool isAnon;\\r\\n    bool isSelectableByUser;\\r\\n    uint256 userId;\\r\\n    bytes extraData;\\r\\n}\\r\\n\\r\\nstruct Claim {\\r\\n    ClaimType claimType;\\r\\n    bytes16 groupId;\\r\\n    bytes16 groupTimestamp;\\r\\n    bool isSelectableByUser;\\r\\n    uint256 value;\\r\\n    bytes extraData;\\r\\n}\\r\\n\\r\\nstruct Signature {\\r\\n    bytes message;\\r\\n    bytes extraData;\\r\\n}\\r\\n\\r\\nstruct SismoConnectResponse {\\r\\n    bytes16 appId;\\r\\n    bytes16 namespace;\\r\\n    bytes32 version;\\r\\n    bytes signedMessage;\\r\\n    SismoConnectProof[] proofs;\\r\\n}\\r\\n\\r\\nstruct SismoConnectProof {\\r\\n    Auth[] auths;\\r\\n    Claim[] claims;\\r\\n    bytes32 provingScheme;\\r\\n    bytes proofData;\\r\\n    bytes extraData;\\r\\n}\\r\\n\\r\\nstruct SismoConnectVerifiedResult {\\r\\n    bytes16 appId;\\r\\n    bytes16 namespace;\\r\\n    bytes32 version;\\r\\n    VerifiedAuth[] auths;\\r\\n    VerifiedClaim[] claims;\\r\\n    bytes signedMessage;\\r\\n}\\r\\n\\r\\nstruct VerifiedAuth {\\r\\n    AuthType authType;\\r\\n    bool isAnon;\\r\\n    uint256 userId;\\r\\n    bytes extraData;\\r\\n    bytes proofData;\\r\\n}\\r\\n\\r\\nstruct VerifiedClaim {\\r\\n    ClaimType claimType;\\r\\n    bytes16 groupId;\\r\\n    bytes16 groupTimestamp;\\r\\n    uint256 value;\\r\\n    bytes extraData;\\r\\n    uint256 proofId;\\r\\n    bytes proofData;\\r\\n}\\r\\n\",\"keccak256\":\"0x0d7238088b9d4b679f489531b76e4dbf851e7c33a2a8b50a786273125aa0e623\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610160604081815234620004e357816200265f803803809162000023828562000536565b8339602093849181010312620004e357516001600160801b03198082169290838303620004e3578151906200005882620004e8565b600091828152868451916200006d836200051a565b848352015281835162000080816200051a565b528251946200008f866200051a565b828652835190620000a082620004e8565b808252878201968752156200049f578551516200044f57819051169461012095865251511515936101409485528351620000da81620004e8565b601981527f7369736d6f436f6e6e65637456657269666965722d76312e320000000000000088820152845190816200012163349f642f60e11b92838352600483016200057b565b038983733cd5334eb64ebbd4003b72022cc25465f1bfcee69281845afa9283156200044557869362000421575b506001600160a01b039283166080528651620001ad908b906200017181620004e8565b601781527f61757468526571756573744275696c6465722d76312e3100000000000000000082820152895180938192878352600483016200057b565b0381855afa908115620003d3579084918891620003ff575b501660a052620002188a8851620001dc81620004e8565b601881527f636c61696d526571756573744275696c6465722d76312e31000000000000000082820152895180938192878352600483016200057b565b0381855afa908115620003d3579084918891620003dd575b501660c052620002838a88516200024781620004e8565b601581527f7369676e61747572654275696c6465722d76312e31000000000000000000000082820152895180938192878352600483016200057b565b0381855afa908115620003d3579184620002f294928d948a91620003b1575b501660e052885191620002b583620004e8565b601383527f726571756573744275696c6465722d76312e31000000000000000000000000008484015289518095819482938352600483016200057b565b03915afa988915620003a757859962000371575b50506101009716875260801c9082541617905551916120989384620005c7853960805184610ce1015260a05184818161028a0152818161030b015261038c015260c05184505060e0518461042c01525183610b5601525182818160ac0152611bc90152518160e80152f35b62000396929950803d106200039f575b6200038d818362000536565b8101906200055a565b96388062000306565b503d62000381565b86513d87823e3d90fd5b620003cc9150853d87116200039f576200038d818362000536565b38620002a2565b88513d89823e3d90fd5b620003f891508c8d3d106200039f576200038d818362000536565b3862000230565b6200041a91508c8d3d106200039f576200038d818362000536565b38620001c5565b6200043d9193508a3d8c116200039f576200038d818362000536565b91386200014e565b87513d88823e3d90fd5b835162461bcd60e51b815260048101889052602360248201527f696d706572736f6e6174696f6e206d6f6465206973206e6f7420737570706f726044820152621d195960ea1b6064820152608490fd5b835162461bcd60e51b815260048101889052601560248201527f61707049642063616e6e6f7420626520656d70747900000000000000000000006044820152606490fd5b600080fd5b604081019081106001600160401b038211176200050457604052565b634e487b7160e01b600052604160045260246000fd5b602081019081106001600160401b038211176200050457604052565b601f909101601f19168101906001600160401b038211908210176200050457604052565b90816020910312620004e357516001600160a01b0381168103620004e35790565b6020808252825181830181905290939260005b828110620005b157505060409293506000838284010152601f8019910116010190565b8181018601518482016040015285016200058e56fe6101e0604052600436101561001357600080fd5b60003560e01c806307c93c8f146101a7578063469163011461017857806379502c551461013857806380afdea81461010d578063a183dc27146100d0578063c187bbc11461008b5763c9512d991461006a57600080fd5b3461008657600036600319011261008657602060405160028152f35b600080fd5b346100865760003660031901126100865760206040516001600160801b03197f0000000000000000000000000000000000000000000000000000000000000000168152f35b346100865760003660031901126100865760206040517f000000000000000000000000000000000000000000000000000000000000000015158152f35b3461008657600036600319011261008657602060005460801b604051906001600160801b0319168152f35b34610086576000366003190112610086576040610153611b89565b61017682518092602080916001600160801b031981511684520151511515910152565bf35b34610086576000366003190112610086576020604051733cd5334eb64ebbd4003b72022cc25465f1bfcee68152f35b34610086576060366003190112610086576004356001600160401b0381116100865736602382011215610086578060040135906101f26101e683611a15565b604051806080526119f4565b8160805152366024838301011161008657816000926024602093018360805101376080510101526024356001600160a01b0381168103610086576044356001600160a01b03811681036100865760805151156118eb57604051906102558261196d565b6003825260005b606081106118d4575061026d611a8f565b50604051633a0ba6ff60e01b8152600060048201819052816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa908115611325576000916118b9575b506102cd83611ac4565b526102d782611ac4565b506102e0611a8f565b50604051630c3bcacd60e41b81526002600482015260016024820181905260448201526000816064817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156113255760009161189e575b5061034e83611ae7565b5261035882611ae7565b50610361611a8f565b50604051630c3bcacd60e41b81526004808201526001602482018190526044820152906000826064817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa8015611325576104289260009161187b575b506103d284611af7565b526103dc83611af7565b50600060405160018060a01b0386166020820152602081526103fd816119a3565b610405611ea2565b5060405180948192631a0d7ccb60e21b8352602060048401526024830190611a53565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa91821561132557600092611837575b50606060a060405161047681611921565b60008152600060208201526000604082015282808201528260808201520152608051938451850161018052602085610180510312610086576020850151946001600160401b038611610086578560a0910161018051031261008657604051926104de84611952565b6104ee6020876080510101611c98565b84526105006040876080510101611c98565b6020850152606086608051010151604085015285608051016080810151906001600160401b03821161008657602061054092816101805101920101611cad565b6060850152856080510160a081015160c0526001600160401b0360c051116100865760206101805101603f60c05183010112156100865760c05101602001519461058986611a78565b61059660405191826119f4565b8061010052868152602081016101005260c0518860805101016020610180510160408960051b830101116100865760400161012052919592915b60c05188608051010160408560051b820101610120511015610ae05761012051516101c0526001600160401b036101c051116100865760a090601f19906101c0510161018051030112610086576040516101a0526106306101a051611952565b6101c05160c05189608051010101604081015160e0526001600160401b0360e051116100865760206101805101605f60e05183010112156100865760409060e0510101516101405261068461014051611a78565b9661069260405198896119f4565b610140518852602088019460e0516101c05160c0518c608051010101016020610180510160606101405160051b8301011161008657606001955b60e0516101c05160c0518d608051010101019060606101405160051b830101881015610802578751916001600160401b038311610086576101805160a09184019003603f19011261008657604051916060818e61072886611952565b60e051906101c0519060c0519060805101010101010151600681101561008657818e60c092865261076c60808360e0516101c0518751868551010101010101611cf2565b602087015261078f60a08360e0516101c051875186608051010101010101611cf2565b604087015260e051906101c0519084519060805101010101010151606084015260e0518d6101c0519060c0519060805101010101019060e0820151926001600160401b038411610086576107f26020949360608695866101805101920101611cad565b60808201528152019601956106cc565b505093979094509591959490946101a051526101c05160c05189608051010101606081015160a0526001600160401b0360a051116100865760206101805101605f60a05183010112156100865760409060a0510101516101605261086861016051611a78565b9661087660405198896119f4565b610160518852602088019460a0516101c05160c0518c608051010101016020610180510160606101605160051b8301011161008657606001955b60a0516101c05160c0518d608051010101019060606101605160051b830101881015610a0c578751916001600160401b038311610086576101805160c09184019003603f19011261008657604051916060818e61090c86611921565b60a051906101c0519060c0519060805101010101010151600581101561008657818e60e092865261095160808360a0516101c05160c051868551010101010101611c98565b602087015261097460a08381516101c05160c05186608051010101010101611c98565b604087015261099760c08360a0516101c051835186608051010101010101611cf2565b606087015260a051906101c0519060c0519060805101010101010151608084015260a0518d6101c0519060c05190608051010101010190610100820151926001600160401b038411610086576109fc6020949360608695866101805101920101611cad565b60a08201528152019601956108b0565b5050939790945095919594909460206101a051015260806101c05160c0518a8351010101015160406101a05101526101c05160c0518960805101010160a0810151906001600160401b038211610086576040610a719260206101805101920101611cad565b60606101a05101526101c05160c0518960805101010160c0810151906001600160401b038211610086576040610ab09260206101805101920101611cad565b60806101a05101526101a051610100515260206101005101610100526020610120510161012052959291956105d0565b8686858a6000610b4088886080880152604051610afc8161196d565b83815260606020820152606060408201526060610b17611ea2565b910152610b526040519485938493632ceb1e8d60e01b8552604060048601526044850190611d19565b83810360031901602485015290611dbc565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561132557600091611573575b5092610b99611b89565b906040519485916312b037ff60e01b8352608060048401526001600160801b031981511660848401526001600160801b031960208201511660a4840152604081015160c48401526080610bfc606083015160a060e4870152610124860190611a53565b9101519060831984820301610104850152815180825260208201916020808360051b8301019401926000915b8383106113c95750505050506003198382030160248401526001600160801b03198251168152610c676020830151608060208401526080830190611d19565b916040810151928281036040840152835180825260208201916020808360051b8301019601926000915b838310611331575050505050610cbc8493600096936060610cdd940151906060818403910152611dbc565b82516001600160801b03191660448501526020909201515115156064840152565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa92831561132557600093610f81575b5060a08301519160408380518101031261008657610d3a60208401611b1b565b926001600160a01b0390610d5090604001611b1b565b166001600160a01b0390911603610f47576001600160a01b03908116911603610f0f576060810180515191610d8483611a78565b92610d9260405194856119f4565b808452610da1601f1991611a78565b0160005b818110610ed657505060005b82518051821015610deb5790610dca81610de693611b07565b51610dd58287611b07565b52610de08186611b07565b50611b2f565b610db1565b8483610df681611f28565b9060405191602083015260208252610e0d826119a3565b60009182805b8551811015610ead57610e2f610e298288611b07565b51611b54565b60069081811015610e9757600203610e5b57509050610e56610e5084612006565b91611b2f565b610e13565b610e68610e298389611b07565b90811015610e9757600414610e81575b610e5690611b2f565b9350610e56610e8f84611fab565b949050610e78565b634e487b7160e01b600052602160045260246000fd5b610ec7838387604051938493606085526060850190611a53565b91602084015260408301520390f35b602090604051610ee581611952565b60008152600083820152600060408201526060808201526060608082015282828801015201610da5565b60405162461bcd60e51b815260206004820152601060248201526f57524f4e475f544f5f4144445245535360801b6044820152606490fd5b60405162461bcd60e51b815260206004820152601260248201527157524f4e475f46524f4d5f4144445245535360701b6044820152606490fd5b9092503d806000833e610f9481836119f4565b6020828281010312610086578151916001600160401b0383116100865760c083820183830103126100865760405192610fcc84611921565b610fd7818301611c98565b8452610fe7602082840101611c98565b602085015281810160408181015190860152606001516001600160401b03811161008657838301601f82848601010112156100865780828401015161102b81611a78565b9161103960405193846119f4565b8183526020830186860160208460051b84888a0101010111610086576020828688010101905b60208460051b84888a01010101821061123b57505050506060850152608081830101516001600160401b03811161008657838301601f8284860101011215610086578082840101516110b081611a78565b916110be60405193846119f4565b8183526020830186860160208460051b84888a0101010111610086576020828688010101905b60208460051b84888a0101010182106111305750505050608085015260a08183010151906001600160401b03821161008657611124938301920101611cad565b60a08201529183610d1a565b81516001600160401b0381116100865760e0888801850182018a8a0103601f190112610086576040519161116383611988565b602082868a8c0101010151600581101561008657835261118b604083878b8d01010101611c98565b60208401526111a2606083878b8d01010101611c98565b6040840152888801850182016080810151606085015260a001516001600160401b038111610086576111e2908b8b01908a8c018801850101602001611cad565b60808401528888018501820160c081015160a085015260e00151906001600160401b038211610086576020936112298b868096958f968b8f84998601950101010101611cad565b60c082015281520192019190506110e4565b81516001600160401b0381116100865760a0888801850182018a8a0103601f190112610086576040519161126e83611952565b602082868a8c01010101516006811015610086578352611296604083878b8d01010101611cf2565b60208401528888018501820160608101516040850152608001516001600160401b038111610086576112d6908b8b01908a8c018801850101602001611cad565b606084015260a082868a8c0101010151906001600160401b038211610086576020936113138b868096958f968b8f84998601950101010101611cad565b6080820152815201920191905061105f565b6040513d6000823e3d90fd5b91939750919394956020806113b5600193601f1986820301875260e08c519161135b818451611d0c565b6001600160801b03198584015116858201526001600160801b031960408401511660408201526060830151606082015260808301511515608082015260a0830151151560a08201528160c080940151938201520190611a53565b99019301930190928b979695949293610c91565b91939596509193601f1982820301835285519060a0810182519060a08352815180915260c08301602060c08360051b86010193019160005b818110611510575050505060208301519082810360208401528151808252602082016020808360051b85010194019260005b83811061148f57505050505061147c83602093608061146b869560406001990151604085015260608501518482036060860152611a53565b920151906080818403910152611a53565b97019301930190928a9695949293610c28565b9091929394602080611503600193601f1987820301885260c060a08b516114b7848251611d0c565b6001600160801b03198682015116868501526001600160801b03196040820151166040850152606081015115156060850152608081015160808501520151918160a08201520190611a53565b9701959401929101611433565b9091929360208061156760019360bf198a820301885260a060808a51611537848251611cff565b85810151151586850152604081015115156040850152606081015160608501520151918160808201520190611a53565b96019401929101611401565b90503d806000833e61158581836119f4565b6020828281010312610086578151916001600160401b038311610086576080838201838301031261008657604051926115bd8461196d565b6115c8818301611c98565b8452602081830101516001600160401b03811161008657838301601f8284860101011215610086578082840101516115ff81611a78565b9161160d60405193846119f4565b8183526020830186860160208460051b84888a0101010111610086576020828688010101905b60208460051b84888a0101010182106117fd57505050506020850152604081830101516001600160401b03811161008657838301601f82848601010112156100865780828401015161168481611a78565b9161169260405193846119f4565b8183526020830186860160208460051b84888a0101010111610086576020828688010101905b60208460051b84888a0101010182106117035750505050604085015260608183010151906001600160401b038211610086576116f8938301920101611ec2565b606082015284610b8f565b81516001600160401b0381116100865760e0888801850182018a8a0103601f190112610086576040519161173683611988565b602082868a8c0101010151600581101561008657835261175e604083878b8d01010101611c98565b6020840152611775606083878b8d01010101611c98565b604084015288880185018201608081015160608501526117979060a001611cf2565b60808401526117ae60c083878b8d01010101611cf2565b60a084015260e082868a8c0101010151906001600160401b038211610086576020936117eb8b868096958f968b8f84998601950101010101611cad565b60c082015281520192019190506116b8565b8151906001600160401b03821161008657602080929161182a8a838095898f8e9085019401010101611df2565b8152019201919050611633565b9091503d90816000823e61184b82826119f4565b60208183810103126100865780516001600160401b038111610086576118749282019101611ec2565b9084610465565b61189891503d806000833e61189081836119f4565b810190611e7d565b856103c8565b6118b391503d806000833e61189081836119f4565b84610344565b6118ce91503d806000833e61189081836119f4565b846102c3565b6020906118df611a8f565b8282860101520161025c565b60405162461bcd60e51b815260206004820152600e60248201526d656d70747920726573706f6e736560901b6044820152606490fd5b60c081019081106001600160401b0382111761193c57604052565b634e487b7160e01b600052604160045260246000fd5b60a081019081106001600160401b0382111761193c57604052565b608081019081106001600160401b0382111761193c57604052565b60e081019081106001600160401b0382111761193c57604052565b604081019081106001600160401b0382111761193c57604052565b602081019081106001600160401b0382111761193c57604052565b606081019081106001600160401b0382111761193c57604052565b90601f801991011681019081106001600160401b0382111761193c57604052565b6001600160401b03811161193c57601f01601f191660200190565b60005b838110611a435750506000910152565b8181015183820152602001611a33565b90602091611a6c81518092818552858086019101611a30565b601f01601f1916010190565b6001600160401b03811161193c5760051b60200190565b60405190611a9c82611921565b606060a083600081526000602082015260006040820152600083820152600060808201520152565b805115611ad15760200190565b634e487b7160e01b600052603260045260246000fd5b805160011015611ad15760400190565b805160021015611ad15760600190565b8051821015611ad15760209160051b010190565b51906001600160a01b038216820361008657565b6000198114611b3e5760010190565b634e487b7160e01b600052601160045260246000fd5b516006811015610e975790565b60405190611b6e826119a3565b60008252604051602083611b81836119be565b600083520152565b611b91611b61565b50611b9a611b61565b506000604051611ba9816119be565b52604051611bb6816119be565b6000815260405190611bc7826119a3565b7f00000000000000000000000000000000000000000000000000000000000000006001600160801b0319168083526020830191825215611c5b575151611c0a5790565b60405162461bcd60e51b815260206004820152602360248201527f696d706572736f6e6174696f6e206d6f6465206973206e6f7420737570706f726044820152621d195960ea1b6064820152608490fd5b60405162461bcd60e51b815260206004820152601560248201527461707049642063616e6e6f7420626520656d70747960581b6044820152606490fd5b51906001600160801b03198216820361008657565b81601f82011215610086578051611cc381611a15565b92611cd160405194856119f4565b8184526020828401011161008657611cef9160208085019101611a30565b90565b5190811515820361008657565b906006821015610e975752565b906005821015610e975752565b90808183519182825260208080809401958560051b01019501936000915b848310611d475750505050505090565b9091929394958480611dac600193601f198682030187528a51611d6b828251611cff565b838101518483015260408082015115159083015260608082015115159083015260808082015115159083015260a0809101519160c080928201520190611a53565b9801930193019194939290611d37565b611cef916040611dd58351606084526060840190611a53565b926020810151151560208401520151906040818403910152611a53565b919060c0838203126100865760405190611e0b82611921565b81938051600681101561008657835260208101516020840152611e3060408201611cf2565b6040840152611e4160608201611cf2565b6060840152611e5260808201611cf2565b608084015260a0810151916001600160401b0383116100865760a092611e789201611cad565b910152565b906020828203126100865781516001600160401b03811161008657611cef9201611df2565b60405190611eaf826119d9565b6060604083828152600060208201520152565b91906060838203126100865760405190611edb826119d9565b81938051916001600160401b03928381116100865781611efc918401611cad565b8452611f0a60208301611cf2565b6020850152604082015192831161008657604092611e789201611cad565b6000805b6060830180518051831015611f9257610e2983611f4892611b07565b6006811015611f7e5715611f695750611f62606091611b2f565b9050611f2c565b60409350611f78925051611b07565b51015190565b634e487b7160e01b84526021600452602484fd5b60405163267ac2cf60e01b815260048101859052602490fd5b6000805b6060830180518051831015611fee57610e2983611fcb92611b07565b6006811015611f7e57600414611f695750611fe7606091611b2f565b9050611faf565b60405163267ac2cf60e01b8152600480820152602490fd5b6000805b606083018051805183101561204957610e298361202692611b07565b6006811015611f7e57600214611f695750612042606091611b2f565b905061200a565b60405163267ac2cf60e01b815260026004820152602490fdfea2646970667358221220bc37be2e0bfb9463e2ed0441148eb960536f4e47cff5e20f0d8aee1ebc7a01f264736f6c63430008130033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6270,
        "contract": "contracts/MecenateVerifier.sol:MecenateVerifier",
        "label": "appId",
        "offset": 0,
        "slot": "0",
        "type": "t_bytes16"
      }
    ],
    "types": {
      "t_bytes16": {
        "encoding": "inplace",
        "label": "bytes16",
        "numberOfBytes": "16"
      }
    }
  }
}