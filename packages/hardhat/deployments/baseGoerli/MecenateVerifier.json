{
  "address": "0xA1310941ab3dA7A3ac9c54fd2328842a4B4F09A4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes16",
          "name": "_appId",
          "type": "bytes16"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "enum AuthType",
          "name": "authType",
          "type": "uint8"
        }
      ],
      "name": "AuthTypeNotFoundInVerifiedResult",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ADDRESSES_PROVIDER_V2",
      "outputs": [
        {
          "internalType": "contract IAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "APP_ID",
      "outputs": [
        {
          "internalType": "bytes16",
          "name": "",
          "type": "bytes16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IS_IMPERSONATION_MODE",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SISMO_CONNECT_LIB_VERSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "appId",
      "outputs": [
        {
          "internalType": "bytes16",
          "name": "",
          "type": "bytes16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "config",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes16",
              "name": "appId",
              "type": "bytes16"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "isImpersonationMode",
                  "type": "bool"
                }
              ],
              "internalType": "struct VaultConfig",
              "name": "vault",
              "type": "tuple"
            }
          ],
          "internalType": "struct SismoConnectConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "sismoConnectResponse",
          "type": "bytes"
        }
      ],
      "name": "sismoVerify",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8984aa38ffaeb467c1dfef79f5261b7fbd6f765843a9a67619c3c4adf00df2a2",
  "receipt": {
    "to": null,
    "from": "0x8aA5F726d9F868a21a8bd748E2f1E43bA31eb670",
    "contractAddress": "0xA1310941ab3dA7A3ac9c54fd2328842a4B4F09A4",
    "transactionIndex": 1,
    "gasUsed": "1770956",
    "logsBloom": "0x
    "blockHash": "0x9eb2f4b9c99fe4cff21c23e6601238197412a18c225822615ee596054d36935f",
    "transactionHash": "0x8984aa38ffaeb467c1dfef79f5261b7fbd6f765843a9a67619c3c4adf00df2a2",
    "logs": [],
    "blockNumber": 11646832,
    "cumulativeGasUsed": "1817809",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6c434d2de6efa3e7169bc58843b74d74"
  ],
  "numDeployments": 2,
  "solcInputHash": "b99b6e57a74dcf8377129758fc0601be",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"_appId\",\"type\":\"bytes16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"enum AuthType\",\"name\":\"authType\",\"type\":\"uint8\"}],\"name\":\"AuthTypeNotFoundInVerifiedResult\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ADDRESSES_PROVIDER_V2\",\"outputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"APP_ID\",\"outputs\":[{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IS_IMPERSONATION_MODE\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SISMO_CONNECT_LIB_VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes16\",\"name\":\"appId\",\"type\":\"bytes16\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isImpersonationMode\",\"type\":\"bool\"}],\"internalType\":\"struct VaultConfig\",\"name\":\"vault\",\"type\":\"tuple\"}],\"internalType\":\"struct SismoConnectConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"}],\"name\":\"sismoVerify\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/helpers/MecenateVerifier.sol\":\"MecenateVerifier\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/helpers/MecenateVerifier.sol\":{\"content\":\"/**\\n * @title MecenateVerifier\\n * @dev Contract that verifies user identity using SismoConnect and returns user's vaultId, twitterId and telegramId.\\n */\\npragma solidity ^0.8.17;\\nimport \\\"../helpers/sismo/SismoConnectLib.sol\\\";\\n\\ncontract MecenateVerifier is SismoConnect {\\n    bytes16 public appId;\\n\\n    constructor(bytes16 _appId) SismoConnect(buildConfig(_appId)) {\\n        appId = _appId;\\n    }\\n\\n    function sismoVerify(\\n        bytes memory sismoConnectResponse\\n    ) external view returns (bytes memory) {\\n        require(sismoConnectResponse.length > 0, \\\"empty response\\\");\\n\\n        // Build authorization requests\\n        AuthRequest[] memory auths = new AuthRequest[](2);\\n\\n        auths[0] = buildAuth(AuthType.VAULT);\\n        auths[1] = buildAuth({authType: AuthType.TWITTER});\\n\\n        // Verify the response\\n        SismoConnectVerifiedResult memory result = verify({\\n            responseBytes: sismoConnectResponse,\\n            auths: auths,\\n            signature: buildSignature({message: \\\"I Love Sismo!\\\"})\\n        });\\n\\n        // bytes memory signedMessage = SismoConnectHelper.getSignedMessage(\\n        //     result\\n        // );\\n\\n        // string memory message = abi.decode(signedMessage, (string));\\n\\n        // Store the verified auths\\n\\n        VerifiedAuth[] memory _verifiedAuths = new VerifiedAuth[](\\n            result.auths.length\\n        );\\n\\n        for (uint256 i = 0; i < result.auths.length; i++) {\\n            _verifiedAuths[i] = result.auths[i];\\n        }\\n\\n        // Get the vaultId of the user\\n        // --> vaultId = hash(userVaultSecret, appId)\\n        uint256 vaultId = SismoConnectHelper.getUserId(result, AuthType.VAULT);\\n\\n        // Convert the vaultId to bytes\\n        bytes memory vaultIdBytes = abi.encodePacked(vaultId);\\n\\n        return (vaultIdBytes);\\n    }\\n}\\n\",\"keccak256\":\"0x037452224d7486d452f5dbd89b20ef84fafed028e092156e13f0747f2c6ad0c6\"},\"contracts/helpers/sismo/SismoConnectLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {RequestBuilder, SismoConnectRequest, SismoConnectResponse, SismoConnectConfig} from \\\"./utils/RequestBuilder.sol\\\";\\nimport {AuthRequestBuilder, AuthRequest, Auth, VerifiedAuth, AuthType} from \\\"./utils/AuthRequestBuilder.sol\\\";\\nimport {ClaimRequestBuilder, ClaimRequest, Claim, VerifiedClaim, ClaimType} from \\\"./utils/ClaimRequestBuilder.sol\\\";\\nimport {SignatureBuilder, SignatureRequest, Signature} from \\\"./utils/SignatureBuilder.sol\\\";\\nimport {VaultConfig} from \\\"./utils/Structs.sol\\\";\\nimport {ISismoConnectVerifier, SismoConnectVerifiedResult} from \\\"./interfaces/ISismoConnectVerifier.sol\\\";\\nimport {IAddressesProvider} from \\\"./interfaces/IAddressesProvider.sol\\\";\\nimport {SismoConnectHelper} from \\\"./utils/SismoConnectHelper.sol\\\";\\n\\ncontract SismoConnect {\\n    uint256 public constant SISMO_CONNECT_LIB_VERSION = 2;\\n\\n    IAddressesProvider public constant ADDRESSES_PROVIDER_V2 =\\n        IAddressesProvider(0x3Cd5334eB64ebBd4003b72022CC25465f1BFcEe6);\\n\\n    ISismoConnectVerifier immutable _sismoConnectVerifier;\\n\\n    // external libraries\\n    AuthRequestBuilder immutable _authRequestBuilder;\\n    ClaimRequestBuilder immutable _claimRequestBuilder;\\n    SignatureBuilder immutable _signatureBuilder;\\n    RequestBuilder immutable _requestBuilder;\\n\\n    // config\\n    bytes16 public immutable APP_ID;\\n    bool public immutable IS_IMPERSONATION_MODE;\\n\\n    constructor(SismoConnectConfig memory _config) {\\n        APP_ID = _config.appId;\\n        IS_IMPERSONATION_MODE = _config.vault.isImpersonationMode;\\n\\n        _sismoConnectVerifier = ISismoConnectVerifier(\\n            ADDRESSES_PROVIDER_V2.get(string(\\\"sismoConnectVerifier-v1.2\\\"))\\n        );\\n        // external libraries\\n        _authRequestBuilder = AuthRequestBuilder(\\n            ADDRESSES_PROVIDER_V2.get(string(\\\"authRequestBuilder-v1.1\\\"))\\n        );\\n        _claimRequestBuilder = ClaimRequestBuilder(\\n            ADDRESSES_PROVIDER_V2.get(string(\\\"claimRequestBuilder-v1.1\\\"))\\n        );\\n        _signatureBuilder = SignatureBuilder(\\n            ADDRESSES_PROVIDER_V2.get(string(\\\"signatureBuilder-v1.1\\\"))\\n        );\\n        _requestBuilder = RequestBuilder(\\n            ADDRESSES_PROVIDER_V2.get(string(\\\"requestBuilder-v1.1\\\"))\\n        );\\n    }\\n\\n    // public function because it needs to be used by this contract and can be used by other contracts\\n    function config() public view returns (SismoConnectConfig memory) {\\n        return buildConfig(APP_ID);\\n    }\\n\\n    function buildConfig(\\n        bytes16 appId\\n    ) internal pure returns (SismoConnectConfig memory) {\\n        SismoConnectConfig memory result = SismoConnectConfig({\\n            appId: appId,\\n            vault: buildVaultConfig()\\n        });\\n        require(appId != bytes16(0), \\\"appId cannot be empty\\\");\\n        require(\\n            result.vault.isImpersonationMode == false,\\n            \\\"impersonation mode is not supported\\\"\\n        );\\n        return result;\\n    }\\n\\n    function buildVaultConfig() internal pure returns (VaultConfig memory) {\\n        return VaultConfig({isImpersonationMode: false});\\n    }\\n\\n    function verify(\\n        bytes memory responseBytes,\\n        AuthRequest[] memory auths,\\n        SignatureRequest memory signature\\n    ) internal view returns (SismoConnectVerifiedResult memory) {\\n        SismoConnectResponse memory response = abi.decode(\\n            responseBytes,\\n            (SismoConnectResponse)\\n        );\\n        SismoConnectRequest memory request = buildRequest(auths, signature);\\n        return _sismoConnectVerifier.verify(response, request, config());\\n    }\\n\\n    function buildAuth(\\n        AuthType authType,\\n        bool isOptional,\\n        bool isSelectableByUser\\n    ) internal view returns (AuthRequest memory) {\\n        return\\n            _authRequestBuilder.build(authType, isOptional, isSelectableByUser);\\n    }\\n\\n    function buildAuth(\\n        AuthType authType\\n    ) internal view returns (AuthRequest memory) {\\n        return _authRequestBuilder.build(authType);\\n    }\\n\\n    function buildSignature(\\n        bytes memory message\\n    ) internal view returns (SignatureRequest memory) {\\n        return _signatureBuilder.build(message);\\n    }\\n\\n    function buildRequest(\\n        AuthRequest[] memory auths,\\n        SignatureRequest memory signature\\n    ) internal view returns (SismoConnectRequest memory) {\\n        return _requestBuilder.build(auths, signature);\\n    }\\n\\n    function _GET_EMPTY_SIGNATURE_REQUEST()\\n        internal\\n        view\\n        returns (SignatureRequest memory)\\n    {\\n        return _signatureBuilder.buildEmpty();\\n    }\\n}\\n\",\"keccak256\":\"0x6d267a25892e4d994c0461da51e9436e76f21a20e70e74c2850f916840d4e0c8\",\"license\":\"MIT\"},\"contracts/helpers/sismo/interfaces/IAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IAddressesProvider {\\n    /**\\n     * @dev Sets the address of a contract.\\n     * @param contractAddress Address of the contract.\\n     * @param contractName Name of the contract.\\n     */\\n    function set(address contractAddress, string memory contractName) external;\\n\\n    /**\\n     * @dev Sets the address of multiple contracts.\\n     * @param contractAddresses Addresses of the contracts.\\n     * @param contractNames Names of the contracts.\\n     */\\n    function setBatch(\\n        address[] calldata contractAddresses,\\n        string[] calldata contractNames\\n    ) external;\\n\\n    /**\\n     * @dev Returns the address of a contract.\\n     * @param contractName Name of the contract (string).\\n     * @return Address of the contract.\\n     */\\n    function get(string memory contractName) external view returns (address);\\n\\n    /**\\n     * @dev Returns the address of a contract.\\n     * @param contractNameHash Hash of the name of the contract (bytes32).\\n     * @return Address of the contract.\\n     */\\n    function get(bytes32 contractNameHash) external view returns (address);\\n\\n    /**\\n     * @dev Returns the addresses of all contracts inputed.\\n     * @param contractNames Names of the contracts as strings.\\n     */\\n    function getBatch(\\n        string[] calldata contractNames\\n    ) external view returns (address[] memory);\\n\\n    /**\\n     * @dev Returns the addresses of all contracts inputed.\\n     * @param contractNamesHash Names of the contracts as strings.\\n     */\\n    function getBatch(\\n        bytes32[] calldata contractNamesHash\\n    ) external view returns (address[] memory);\\n\\n    /**\\n     * @dev Returns the addresses of all contracts in `_contractNames`\\n     * @return Names, Hashed Names and Addresses of all contracts.\\n     */\\n    function getAll()\\n        external\\n        view\\n        returns (string[] memory, bytes32[] memory, address[] memory);\\n}\\n\",\"keccak256\":\"0x5f1135d19d7813377136a0ef08c976d229e29ec7ae0889e0c8f4450cb31919be\",\"license\":\"MIT\"},\"contracts/helpers/sismo/interfaces/ISismoConnectVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"../utils/Structs.sol\\\";\\n\\ninterface ISismoConnectVerifier {\\n    event VerifierSet(bytes32, address);\\n\\n    error AppIdMismatch(bytes16 receivedAppId, bytes16 expectedAppId);\\n    error NamespaceMismatch(\\n        bytes16 receivedNamespace,\\n        bytes16 expectedNamespace\\n    );\\n    error VersionMismatch(bytes32 requestVersion, bytes32 responseVersion);\\n    error SignatureMessageMismatch(\\n        bytes requestMessageSignature,\\n        bytes responseMessageSignature\\n    );\\n\\n    function verify(\\n        SismoConnectResponse memory response,\\n        SismoConnectRequest memory request,\\n        SismoConnectConfig memory config\\n    ) external view returns (SismoConnectVerifiedResult memory);\\n\\n    function SISMO_CONNECT_VERSION() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x57cb5bc66fc79dc98111727958c9310c02fc632db0c3b1d07e2dfa8aefeb49e1\",\"license\":\"MIT\"},\"contracts/helpers/sismo/utils/AuthRequestBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Structs.sol\\\";\\n\\ncontract AuthRequestBuilder {\\n    // default values for Auth Request\\n    bool public constant DEFAULT_AUTH_REQUEST_IS_ANON = false;\\n    uint256 public constant DEFAULT_AUTH_REQUEST_USER_ID = 0;\\n    bool public constant DEFAULT_AUTH_REQUEST_IS_OPTIONAL = false;\\n    bytes public constant DEFAULT_AUTH_REQUEST_EXTRA_DATA = \\\"\\\";\\n\\n    error InvalidUserIdAndIsSelectableByUserAuthType();\\n    error InvalidUserIdAndAuthType();\\n\\n    function build(\\n        AuthType authType,\\n        bool isAnon,\\n        uint256 userId,\\n        bool isOptional,\\n        bool isSelectableByUser,\\n        bytes memory extraData\\n    ) external pure returns (AuthRequest memory) {\\n        return\\n            _build({\\n                authType: authType,\\n                isAnon: isAnon,\\n                userId: userId,\\n                isOptional: isOptional,\\n                isSelectableByUser: isSelectableByUser,\\n                extraData: extraData\\n            });\\n    }\\n\\n    function build(\\n        AuthType authType,\\n        bool isAnon,\\n        uint256 userId,\\n        bytes memory extraData\\n    ) external pure returns (AuthRequest memory) {\\n        return\\n            _build({\\n                authType: authType,\\n                isAnon: isAnon,\\n                userId: userId,\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\n                extraData: extraData\\n            });\\n    }\\n\\n    function build(\\n        AuthType authType\\n    ) external pure returns (AuthRequest memory) {\\n        return\\n            _build({\\n                authType: authType,\\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        AuthType authType,\\n        bool isAnon\\n    ) external pure returns (AuthRequest memory) {\\n        return\\n            _build({\\n                authType: authType,\\n                isAnon: isAnon,\\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        AuthType authType,\\n        uint256 userId\\n    ) external pure returns (AuthRequest memory) {\\n        return\\n            _build({\\n                authType: authType,\\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\n                userId: userId,\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        AuthType authType,\\n        bytes memory extraData\\n    ) external pure returns (AuthRequest memory) {\\n        return\\n            _build({\\n                authType: authType,\\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\n                extraData: extraData\\n            });\\n    }\\n\\n    function build(\\n        AuthType authType,\\n        bool isAnon,\\n        uint256 userId\\n    ) external pure returns (AuthRequest memory) {\\n        return\\n            _build({\\n                authType: authType,\\n                isAnon: isAnon,\\n                userId: userId,\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        AuthType authType,\\n        bool isAnon,\\n        bytes memory extraData\\n    ) external pure returns (AuthRequest memory) {\\n        return\\n            _build({\\n                authType: authType,\\n                isAnon: isAnon,\\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\n                extraData: extraData\\n            });\\n    }\\n\\n    function build(\\n        AuthType authType,\\n        uint256 userId,\\n        bytes memory extraData\\n    ) external pure returns (AuthRequest memory) {\\n        return\\n            _build({\\n                authType: authType,\\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\n                userId: userId,\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\n                extraData: extraData\\n            });\\n    }\\n\\n    // allow dev to choose for isOptional\\n    // the user is ask to choose isSelectableByUser to avoid the function signature collision\\n    // between build(AuthType authType, bool isOptional) and build(AuthType authType, bool isAnon)\\n\\n    function build(\\n        AuthType authType,\\n        bool isOptional,\\n        bool isSelectableByUser\\n    ) external pure returns (AuthRequest memory) {\\n        return\\n            _build({\\n                authType: authType,\\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\\n                isOptional: isOptional,\\n                isSelectableByUser: isSelectableByUser,\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        AuthType authType,\\n        bool isOptional,\\n        bool isSelectableByUser,\\n        uint256 userId\\n    ) external pure returns (AuthRequest memory) {\\n        return\\n            _build({\\n                authType: authType,\\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\n                userId: userId,\\n                isOptional: isOptional,\\n                isSelectableByUser: isSelectableByUser,\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    // the user is ask to choose isSelectableByUser to avoid the function signature collision\\n    // between build(AuthType authType, bool isAnon, bool isOptional) and build(AuthType authType, bool isOptional, bool isSelectableByUser)\\n\\n    function build(\\n        AuthType authType,\\n        bool isAnon,\\n        bool isOptional,\\n        bool isSelectableByUser\\n    ) external pure returns (AuthRequest memory) {\\n        return\\n            _build({\\n                authType: authType,\\n                isAnon: isAnon,\\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\\n                isOptional: isOptional,\\n                isSelectableByUser: isSelectableByUser,\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        AuthType authType,\\n        uint256 userId,\\n        bool isOptional\\n    ) external pure returns (AuthRequest memory) {\\n        return\\n            _build({\\n                authType: authType,\\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\n                userId: userId,\\n                isOptional: isOptional,\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        AuthType authType,\\n        bool isAnon,\\n        uint256 userId,\\n        bool isOptional\\n    ) external pure returns (AuthRequest memory) {\\n        return\\n            _build({\\n                authType: authType,\\n                isAnon: isAnon,\\n                userId: userId,\\n                isOptional: isOptional,\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function _build(\\n        AuthType authType,\\n        bool isAnon,\\n        uint256 userId,\\n        bool isOptional,\\n        bytes memory extraData\\n    ) internal pure returns (AuthRequest memory) {\\n        return\\n            _build({\\n                authType: authType,\\n                isAnon: isAnon,\\n                userId: userId,\\n                isOptional: isOptional,\\n                isSelectableByUser: _authIsSelectableDefaultValue(\\n                    authType,\\n                    userId\\n                ),\\n                extraData: extraData\\n            });\\n    }\\n\\n    function _build(\\n        AuthType authType,\\n        bool isAnon,\\n        uint256 userId,\\n        bool isOptional,\\n        bool isSelectableByUser,\\n        bytes memory extraData\\n    ) internal pure returns (AuthRequest memory) {\\n        // When `userId` is 0, it means the app does not require a specific auth account and the user needs\\n        // to choose the account they want to use for the app.\\n        // When `isSelectableByUser` is true, the user can select the account they want to use.\\n        // The combination of `userId = 0` and `isSelectableByUser = false` does not make sense and should not be used.\\n        // If this combination is detected, the function will revert with an error.\\n        if (\\n            authType != AuthType.VAULT &&\\n            userId == 0 &&\\n            isSelectableByUser == false\\n        ) {\\n            revert InvalidUserIdAndIsSelectableByUserAuthType();\\n        }\\n        // When requesting an authType VAULT, the `userId` must be 0 and isSelectableByUser must be true.\\n        if (\\n            authType == AuthType.VAULT &&\\n            userId != 0 &&\\n            isSelectableByUser == false\\n        ) {\\n            revert InvalidUserIdAndAuthType();\\n        }\\n        return\\n            AuthRequest({\\n                authType: authType,\\n                isAnon: isAnon,\\n                userId: userId,\\n                isOptional: isOptional,\\n                isSelectableByUser: isSelectableByUser,\\n                extraData: extraData\\n            });\\n    }\\n\\n    function _authIsSelectableDefaultValue(\\n        AuthType authType,\\n        uint256 requestedUserId\\n    ) internal pure returns (bool) {\\n        // isSelectableByUser value should always be false in case of VAULT authType.\\n        // This is because the user can't select the account they want to use for the app.\\n        // the userId = Hash(VaultSecret, AppId) in the case of VAULT authType.\\n        if (authType == AuthType.VAULT) {\\n            return false;\\n        }\\n        // When `requestedUserId` is 0, it means no specific auth account is requested by the app,\\n        // so we want the default value for `isSelectableByUser` to be `true`.\\n        if (requestedUserId == 0) {\\n            return true;\\n        }\\n        // When `requestedUserId` is not 0, it means a specific auth account is requested by the app,\\n        // so we want the default value for `isSelectableByUser` to be `false`.\\n        else {\\n            return false;\\n        }\\n        // However, the dev can still override this default value by setting `isSelectableByUser` to `true`.\\n    }\\n}\\n\",\"keccak256\":\"0xdc917673da6e3aeddd07bc734320776726a55a96b9996e1c5272202f002d1fe2\",\"license\":\"MIT\"},\"contracts/helpers/sismo/utils/ClaimRequestBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Structs.sol\\\";\\n\\ncontract ClaimRequestBuilder {\\n    // default value for Claim Request\\n    bytes16 public constant DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP =\\n        bytes16(\\\"latest\\\");\\n    uint256 public constant DEFAULT_CLAIM_REQUEST_VALUE = 1;\\n    ClaimType public constant DEFAULT_CLAIM_REQUEST_TYPE = ClaimType.GTE;\\n    bool public constant DEFAULT_CLAIM_REQUEST_IS_OPTIONAL = false;\\n    bool public constant DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER = true;\\n    bytes public constant DEFAULT_CLAIM_REQUEST_EXTRA_DATA = \\\"\\\";\\n\\n    function build(\\n        bytes16 groupId,\\n        bytes16 groupTimestamp,\\n        uint256 value,\\n        ClaimType claimType,\\n        bool isOptional,\\n        bool isSelectableByUser,\\n        bytes memory extraData\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                claimType: claimType,\\n                groupId: groupId,\\n                groupTimestamp: groupTimestamp,\\n                value: value,\\n                isOptional: isOptional,\\n                isSelectableByUser: isSelectableByUser,\\n                extraData: extraData\\n            });\\n    }\\n\\n    function build(\\n        bytes16 groupId,\\n        bytes16 groupTimestamp,\\n        uint256 value,\\n        ClaimType claimType,\\n        bytes memory extraData\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                claimType: claimType,\\n                groupId: groupId,\\n                groupTimestamp: groupTimestamp,\\n                value: value,\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n                extraData: extraData\\n            });\\n    }\\n\\n    function build(\\n        bytes16 groupId\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                groupId: groupId,\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        bytes16 groupId,\\n        bytes16 groupTimestamp\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                groupId: groupId,\\n                groupTimestamp: groupTimestamp,\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        bytes16 groupId,\\n        uint256 value\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                groupId: groupId,\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\n                value: value,\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        bytes16 groupId,\\n        ClaimType claimType\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                groupId: groupId,\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\n                claimType: claimType,\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        bytes16 groupId,\\n        bytes memory extraData\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                groupId: groupId,\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n                extraData: extraData\\n            });\\n    }\\n\\n    function build(\\n        bytes16 groupId,\\n        bytes16 groupTimestamp,\\n        uint256 value\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                groupId: groupId,\\n                groupTimestamp: groupTimestamp,\\n                value: value,\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        bytes16 groupId,\\n        bytes16 groupTimestamp,\\n        ClaimType claimType\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                groupId: groupId,\\n                groupTimestamp: groupTimestamp,\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\n                claimType: claimType,\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        bytes16 groupId,\\n        bytes16 groupTimestamp,\\n        bytes memory extraData\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                groupId: groupId,\\n                groupTimestamp: groupTimestamp,\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n                extraData: extraData\\n            });\\n    }\\n\\n    function build(\\n        bytes16 groupId,\\n        uint256 value,\\n        ClaimType claimType\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                groupId: groupId,\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\n                value: value,\\n                claimType: claimType,\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        bytes16 groupId,\\n        uint256 value,\\n        bytes memory extraData\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                groupId: groupId,\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\n                value: value,\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n                extraData: extraData\\n            });\\n    }\\n\\n    function build(\\n        bytes16 groupId,\\n        ClaimType claimType,\\n        bytes memory extraData\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                groupId: groupId,\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\n                claimType: claimType,\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n                extraData: extraData\\n            });\\n    }\\n\\n    function build(\\n        bytes16 groupId,\\n        bytes16 groupTimestamp,\\n        uint256 value,\\n        ClaimType claimType\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                groupId: groupId,\\n                groupTimestamp: groupTimestamp,\\n                value: value,\\n                claimType: claimType,\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        bytes16 groupId,\\n        bytes16 groupTimestamp,\\n        uint256 value,\\n        bytes memory extraData\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                groupId: groupId,\\n                groupTimestamp: groupTimestamp,\\n                value: value,\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n                extraData: extraData\\n            });\\n    }\\n\\n    function build(\\n        bytes16 groupId,\\n        bytes16 groupTimestamp,\\n        ClaimType claimType,\\n        bytes memory extraData\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                groupId: groupId,\\n                groupTimestamp: groupTimestamp,\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\n                claimType: claimType,\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n                extraData: extraData\\n            });\\n    }\\n\\n    function build(\\n        bytes16 groupId,\\n        uint256 value,\\n        ClaimType claimType,\\n        bytes memory extraData\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                groupId: groupId,\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\n                value: value,\\n                claimType: claimType,\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n                extraData: extraData\\n            });\\n    }\\n\\n    // allow dev to choose for isOptional\\n    // we force to also set isSelectableByUser\\n    // otherwise function signatures would be colliding\\n    // between build(bytes16 groupId, bool isOptional) and build(bytes16 groupId, bool isSelectableByUser)\\n    // we keep this logic for all function signature combinations\\n\\n    function build(\\n        bytes16 groupId,\\n        bool isOptional,\\n        bool isSelectableByUser\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                groupId: groupId,\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\n                isOptional: isOptional,\\n                isSelectableByUser: isSelectableByUser,\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        bytes16 groupId,\\n        bytes16 groupTimestamp,\\n        bool isOptional,\\n        bool isSelectableByUser\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                groupId: groupId,\\n                groupTimestamp: groupTimestamp,\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\n                isOptional: isOptional,\\n                isSelectableByUser: isSelectableByUser,\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        bytes16 groupId,\\n        uint256 value,\\n        bool isOptional,\\n        bool isSelectableByUser\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                groupId: groupId,\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\n                value: value,\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\n                isOptional: isOptional,\\n                isSelectableByUser: isSelectableByUser,\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        bytes16 groupId,\\n        ClaimType claimType,\\n        bool isOptional,\\n        bool isSelectableByUser\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                groupId: groupId,\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\n                claimType: claimType,\\n                isOptional: isOptional,\\n                isSelectableByUser: isSelectableByUser,\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        bytes16 groupId,\\n        bytes16 groupTimestamp,\\n        uint256 value,\\n        bool isOptional,\\n        bool isSelectableByUser\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                groupId: groupId,\\n                groupTimestamp: groupTimestamp,\\n                value: value,\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\n                isOptional: isOptional,\\n                isSelectableByUser: isSelectableByUser,\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        bytes16 groupId,\\n        bytes16 groupTimestamp,\\n        ClaimType claimType,\\n        bool isOptional,\\n        bool isSelectableByUser\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                groupId: groupId,\\n                groupTimestamp: groupTimestamp,\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\n                claimType: claimType,\\n                isOptional: isOptional,\\n                isSelectableByUser: isSelectableByUser,\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        bytes16 groupId,\\n        uint256 value,\\n        ClaimType claimType,\\n        bool isOptional,\\n        bool isSelectableByUser\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                groupId: groupId,\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\n                value: value,\\n                claimType: claimType,\\n                isOptional: isOptional,\\n                isSelectableByUser: isSelectableByUser,\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        bytes16 groupId,\\n        bytes16 groupTimestamp,\\n        uint256 value,\\n        ClaimType claimType,\\n        bool isOptional,\\n        bool isSelectableByUser\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                groupId: groupId,\\n                groupTimestamp: groupTimestamp,\\n                value: value,\\n                claimType: claimType,\\n                isOptional: isOptional,\\n                isSelectableByUser: isSelectableByUser,\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n            });\\n    }\\n}\\n\",\"keccak256\":\"0xba0027bff993008a781805e7ae87a07d639cfefa816c5612518ce4da53289dbc\",\"license\":\"MIT\"},\"contracts/helpers/sismo/utils/RequestBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Structs.sol\\\";\\nimport {SignatureBuilder} from \\\"./SignatureBuilder.sol\\\";\\n\\ncontract RequestBuilder {\\n    // default value for namespace\\n    bytes16 public constant DEFAULT_NAMESPACE = bytes16(keccak256(\\\"main\\\"));\\n    // default value for a signature request\\n    SignatureRequest DEFAULT_SIGNATURE_REQUEST =\\n        SignatureRequest({\\n            message: \\\"MESSAGE_SELECTED_BY_USER\\\",\\n            isSelectableByUser: false,\\n            extraData: \\\"\\\"\\n        });\\n\\n    function build(\\n        AuthRequest memory auth,\\n        ClaimRequest memory claim,\\n        SignatureRequest memory signature,\\n        bytes16 namespace\\n    ) external pure returns (SismoConnectRequest memory) {\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\n        auths[0] = auth;\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\n        claims[0] = claim;\\n        return (\\n            SismoConnectRequest({\\n                namespace: namespace,\\n                auths: auths,\\n                claims: claims,\\n                signature: signature\\n            })\\n        );\\n    }\\n\\n    function build(\\n        AuthRequest memory auth,\\n        ClaimRequest memory claim,\\n        bytes16 namespace\\n    ) external view returns (SismoConnectRequest memory) {\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\n        auths[0] = auth;\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\n        claims[0] = claim;\\n        return (\\n            SismoConnectRequest({\\n                namespace: namespace,\\n                auths: auths,\\n                claims: claims,\\n                signature: DEFAULT_SIGNATURE_REQUEST\\n            })\\n        );\\n    }\\n\\n    function build(\\n        ClaimRequest memory claim,\\n        SignatureRequest memory signature,\\n        bytes16 namespace\\n    ) external pure returns (SismoConnectRequest memory) {\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\n        claims[0] = claim;\\n        return (\\n            SismoConnectRequest({\\n                namespace: namespace,\\n                auths: auths,\\n                claims: claims,\\n                signature: signature\\n            })\\n        );\\n    }\\n\\n    function build(\\n        ClaimRequest memory claim,\\n        bytes16 namespace\\n    ) external view returns (SismoConnectRequest memory) {\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\n        claims[0] = claim;\\n        return (\\n            SismoConnectRequest({\\n                namespace: namespace,\\n                auths: auths,\\n                claims: claims,\\n                signature: DEFAULT_SIGNATURE_REQUEST\\n            })\\n        );\\n    }\\n\\n    function build(\\n        AuthRequest memory auth,\\n        SignatureRequest memory signature,\\n        bytes16 namespace\\n    ) external pure returns (SismoConnectRequest memory) {\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\n        auths[0] = auth;\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\n        return (\\n            SismoConnectRequest({\\n                namespace: namespace,\\n                auths: auths,\\n                claims: claims,\\n                signature: signature\\n            })\\n        );\\n    }\\n\\n    function build(\\n        AuthRequest memory auth,\\n        bytes16 namespace\\n    ) external view returns (SismoConnectRequest memory) {\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\n        auths[0] = auth;\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\n        return (\\n            SismoConnectRequest({\\n                namespace: namespace,\\n                auths: auths,\\n                claims: claims,\\n                signature: DEFAULT_SIGNATURE_REQUEST\\n            })\\n        );\\n    }\\n\\n    function build(\\n        AuthRequest memory auth,\\n        ClaimRequest memory claim,\\n        SignatureRequest memory signature\\n    ) external pure returns (SismoConnectRequest memory) {\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\n        auths[0] = auth;\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\n        claims[0] = claim;\\n        return (\\n            SismoConnectRequest({\\n                namespace: DEFAULT_NAMESPACE,\\n                auths: auths,\\n                claims: claims,\\n                signature: signature\\n            })\\n        );\\n    }\\n\\n    function build(\\n        AuthRequest memory auth,\\n        ClaimRequest memory claim\\n    ) external view returns (SismoConnectRequest memory) {\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\n        auths[0] = auth;\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\n        claims[0] = claim;\\n        return (\\n            SismoConnectRequest({\\n                namespace: DEFAULT_NAMESPACE,\\n                auths: auths,\\n                claims: claims,\\n                signature: DEFAULT_SIGNATURE_REQUEST\\n            })\\n        );\\n    }\\n\\n    function build(\\n        AuthRequest memory auth,\\n        SignatureRequest memory signature\\n    ) external pure returns (SismoConnectRequest memory) {\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\n        auths[0] = auth;\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\n        return (\\n            SismoConnectRequest({\\n                namespace: DEFAULT_NAMESPACE,\\n                auths: auths,\\n                claims: claims,\\n                signature: signature\\n            })\\n        );\\n    }\\n\\n    function build(\\n        AuthRequest memory auth\\n    ) external view returns (SismoConnectRequest memory) {\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\n        auths[0] = auth;\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\n        return (\\n            SismoConnectRequest({\\n                namespace: DEFAULT_NAMESPACE,\\n                auths: auths,\\n                claims: claims,\\n                signature: DEFAULT_SIGNATURE_REQUEST\\n            })\\n        );\\n    }\\n\\n    function build(\\n        ClaimRequest memory claim,\\n        SignatureRequest memory signature\\n    ) external pure returns (SismoConnectRequest memory) {\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\n        claims[0] = claim;\\n        return (\\n            SismoConnectRequest({\\n                namespace: DEFAULT_NAMESPACE,\\n                auths: auths,\\n                claims: claims,\\n                signature: signature\\n            })\\n        );\\n    }\\n\\n    function build(\\n        ClaimRequest memory claim\\n    ) external view returns (SismoConnectRequest memory) {\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\n        claims[0] = claim;\\n        return (\\n            SismoConnectRequest({\\n                namespace: DEFAULT_NAMESPACE,\\n                auths: auths,\\n                claims: claims,\\n                signature: DEFAULT_SIGNATURE_REQUEST\\n            })\\n        );\\n    }\\n\\n    // build with arrays for auths and claims\\n    function build(\\n        AuthRequest[] memory auths,\\n        ClaimRequest[] memory claims,\\n        SignatureRequest memory signature,\\n        bytes16 namespace\\n    ) external pure returns (SismoConnectRequest memory) {\\n        return (\\n            SismoConnectRequest({\\n                namespace: namespace,\\n                auths: auths,\\n                claims: claims,\\n                signature: signature\\n            })\\n        );\\n    }\\n\\n    function build(\\n        AuthRequest[] memory auths,\\n        ClaimRequest[] memory claims,\\n        bytes16 namespace\\n    ) external view returns (SismoConnectRequest memory) {\\n        return (\\n            SismoConnectRequest({\\n                namespace: namespace,\\n                auths: auths,\\n                claims: claims,\\n                signature: DEFAULT_SIGNATURE_REQUEST\\n            })\\n        );\\n    }\\n\\n    function build(\\n        ClaimRequest[] memory claims,\\n        SignatureRequest memory signature,\\n        bytes16 namespace\\n    ) external pure returns (SismoConnectRequest memory) {\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\n        return (\\n            SismoConnectRequest({\\n                namespace: namespace,\\n                auths: auths,\\n                claims: claims,\\n                signature: signature\\n            })\\n        );\\n    }\\n\\n    function build(\\n        ClaimRequest[] memory claims,\\n        bytes16 namespace\\n    ) external view returns (SismoConnectRequest memory) {\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\n        return (\\n            SismoConnectRequest({\\n                namespace: namespace,\\n                auths: auths,\\n                claims: claims,\\n                signature: DEFAULT_SIGNATURE_REQUEST\\n            })\\n        );\\n    }\\n\\n    function build(\\n        AuthRequest[] memory auths,\\n        SignatureRequest memory signature,\\n        bytes16 namespace\\n    ) external pure returns (SismoConnectRequest memory) {\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\n        return (\\n            SismoConnectRequest({\\n                namespace: namespace,\\n                auths: auths,\\n                claims: claims,\\n                signature: signature\\n            })\\n        );\\n    }\\n\\n    function build(\\n        AuthRequest[] memory auths,\\n        bytes16 namespace\\n    ) external view returns (SismoConnectRequest memory) {\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\n        return (\\n            SismoConnectRequest({\\n                namespace: namespace,\\n                auths: auths,\\n                claims: claims,\\n                signature: DEFAULT_SIGNATURE_REQUEST\\n            })\\n        );\\n    }\\n\\n    function build(\\n        AuthRequest[] memory auths,\\n        ClaimRequest[] memory claims,\\n        SignatureRequest memory signature\\n    ) external pure returns (SismoConnectRequest memory) {\\n        return (\\n            SismoConnectRequest({\\n                namespace: DEFAULT_NAMESPACE,\\n                auths: auths,\\n                claims: claims,\\n                signature: signature\\n            })\\n        );\\n    }\\n\\n    function build(\\n        AuthRequest[] memory auths,\\n        ClaimRequest[] memory claims\\n    ) external view returns (SismoConnectRequest memory) {\\n        return (\\n            SismoConnectRequest({\\n                namespace: DEFAULT_NAMESPACE,\\n                auths: auths,\\n                claims: claims,\\n                signature: DEFAULT_SIGNATURE_REQUEST\\n            })\\n        );\\n    }\\n\\n    function build(\\n        AuthRequest[] memory auths,\\n        SignatureRequest memory signature\\n    ) external pure returns (SismoConnectRequest memory) {\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\n        return (\\n            SismoConnectRequest({\\n                namespace: DEFAULT_NAMESPACE,\\n                auths: auths,\\n                claims: claims,\\n                signature: signature\\n            })\\n        );\\n    }\\n\\n    function build(\\n        AuthRequest[] memory auths\\n    ) external view returns (SismoConnectRequest memory) {\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\n        return (\\n            SismoConnectRequest({\\n                namespace: DEFAULT_NAMESPACE,\\n                auths: auths,\\n                claims: claims,\\n                signature: DEFAULT_SIGNATURE_REQUEST\\n            })\\n        );\\n    }\\n\\n    function build(\\n        ClaimRequest[] memory claims,\\n        SignatureRequest memory signature\\n    ) external pure returns (SismoConnectRequest memory) {\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\n        return (\\n            SismoConnectRequest({\\n                namespace: DEFAULT_NAMESPACE,\\n                auths: auths,\\n                claims: claims,\\n                signature: signature\\n            })\\n        );\\n    }\\n\\n    function build(\\n        ClaimRequest[] memory claims\\n    ) external view returns (SismoConnectRequest memory) {\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\n        return (\\n            SismoConnectRequest({\\n                namespace: DEFAULT_NAMESPACE,\\n                auths: auths,\\n                claims: claims,\\n                signature: DEFAULT_SIGNATURE_REQUEST\\n            })\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x0550adf7ad1ecddd6b1008913a8729f8fdda351d8ad1e91ccf971af5a625341d\",\"license\":\"MIT\"},\"contracts/helpers/sismo/utils/SignatureBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Structs.sol\\\";\\n\\ncontract SignatureBuilder {\\n    // default values for Signature Request\\n    bytes public constant DEFAULT_SIGNATURE_REQUEST_MESSAGE =\\n        \\\"MESSAGE_SELECTED_BY_USER\\\";\\n    bool public constant DEFAULT_SIGNATURE_REQUEST_IS_SELECTABLE_BY_USER =\\n        false;\\n    bytes public constant DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA = \\\"\\\";\\n\\n    function build(\\n        bytes memory message\\n    ) external pure returns (SignatureRequest memory) {\\n        return\\n            SignatureRequest({\\n                message: message,\\n                isSelectableByUser: DEFAULT_SIGNATURE_REQUEST_IS_SELECTABLE_BY_USER,\\n                extraData: DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        bytes memory message,\\n        bool isSelectableByUser\\n    ) external pure returns (SignatureRequest memory) {\\n        return\\n            SignatureRequest({\\n                message: message,\\n                isSelectableByUser: isSelectableByUser,\\n                extraData: DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        bytes memory message,\\n        bytes memory extraData\\n    ) external pure returns (SignatureRequest memory) {\\n        return\\n            SignatureRequest({\\n                message: message,\\n                isSelectableByUser: DEFAULT_SIGNATURE_REQUEST_IS_SELECTABLE_BY_USER,\\n                extraData: extraData\\n            });\\n    }\\n\\n    function build(\\n        bytes memory message,\\n        bool isSelectableByUser,\\n        bytes memory extraData\\n    ) external pure returns (SignatureRequest memory) {\\n        return\\n            SignatureRequest({\\n                message: message,\\n                isSelectableByUser: isSelectableByUser,\\n                extraData: extraData\\n            });\\n    }\\n\\n    function build(\\n        bool isSelectableByUser\\n    ) external pure returns (SignatureRequest memory) {\\n        return\\n            SignatureRequest({\\n                message: DEFAULT_SIGNATURE_REQUEST_MESSAGE,\\n                isSelectableByUser: isSelectableByUser,\\n                extraData: DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        bool isSelectableByUser,\\n        bytes memory extraData\\n    ) external pure returns (SignatureRequest memory) {\\n        return\\n            SignatureRequest({\\n                message: DEFAULT_SIGNATURE_REQUEST_MESSAGE,\\n                isSelectableByUser: isSelectableByUser,\\n                extraData: extraData\\n            });\\n    }\\n\\n    function buildEmpty() external pure returns (SignatureRequest memory) {\\n        return\\n            SignatureRequest({\\n                message: DEFAULT_SIGNATURE_REQUEST_MESSAGE,\\n                isSelectableByUser: DEFAULT_SIGNATURE_REQUEST_IS_SELECTABLE_BY_USER,\\n                extraData: DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA\\n            });\\n    }\\n}\\n\",\"keccak256\":\"0xbde2c641c6defa59a545060ff475feed58522c295c2f5f2cd0e0436f1f440216\",\"license\":\"MIT\"},\"contracts/helpers/sismo/utils/SismoConnectHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Structs.sol\\\";\\n\\nlibrary SismoConnectHelper {\\n    error AuthTypeNotFoundInVerifiedResult(AuthType authType);\\n\\n    function getUserId(\\n        SismoConnectVerifiedResult memory result,\\n        AuthType authType\\n    ) internal pure returns (uint256) {\\n        // get the first userId that matches the authType\\n        for (uint256 i = 0; i < result.auths.length; i++) {\\n            if (result.auths[i].authType == authType) {\\n                return result.auths[i].userId;\\n            }\\n        }\\n        revert AuthTypeNotFoundInVerifiedResult(authType);\\n    }\\n\\n    function getUserIds(\\n        SismoConnectVerifiedResult memory result,\\n        AuthType authType\\n    ) internal pure returns (uint256[] memory) {\\n        // get all userIds that match the authType\\n        uint256[] memory userIds = new uint256[](result.auths.length);\\n        for (uint256 i = 0; i < result.auths.length; i++) {\\n            if (result.auths[i].authType == authType) {\\n                userIds[i] = result.auths[i].userId;\\n            }\\n        }\\n        return userIds;\\n    }\\n\\n    function getSignedMessage(\\n        SismoConnectVerifiedResult memory result\\n    ) internal pure returns (bytes memory) {\\n        return result.signedMessage;\\n    }\\n}\\n\",\"keccak256\":\"0x807291f1d7bd91087b954384954f6fb88e324baa75651f807339dd5c04d2ed39\",\"license\":\"MIT\"},\"contracts/helpers/sismo/utils/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nstruct SismoConnectRequest {\\n    bytes16 namespace;\\n    AuthRequest[] auths;\\n    ClaimRequest[] claims;\\n    SignatureRequest signature;\\n}\\n\\nstruct SismoConnectConfig {\\n    bytes16 appId;\\n    VaultConfig vault;\\n}\\n\\nstruct VaultConfig {\\n    bool isImpersonationMode;\\n}\\n\\nstruct AuthRequest {\\n    AuthType authType;\\n    uint256 userId; // default: 0\\n    // flags\\n    bool isAnon; // default: false -> true not supported yet, need to throw if true\\n    bool isOptional; // default: false\\n    bool isSelectableByUser; // default: true\\n    //\\n    bytes extraData; // default: \\\"\\\"\\n}\\n\\nstruct ClaimRequest {\\n    ClaimType claimType; // default: GTE\\n    bytes16 groupId;\\n    bytes16 groupTimestamp; // default: bytes16(\\\"latest\\\")\\n    uint256 value; // default: 1\\n    // flags\\n    bool isOptional; // default: false\\n    bool isSelectableByUser; // default: true\\n    //\\n    bytes extraData; // default: \\\"\\\"\\n}\\n\\nstruct SignatureRequest {\\n    bytes message; // default: \\\"MESSAGE_SELECTED_BY_USER\\\"\\n    bool isSelectableByUser; // default: false\\n    bytes extraData; // default: \\\"\\\"\\n}\\n\\nenum AuthType {\\n    VAULT,\\n    GITHUB,\\n    TWITTER,\\n    EVM_ACCOUNT,\\n    TELEGRAM,\\n    DISCORD\\n}\\n\\nenum ClaimType {\\n    GTE,\\n    GT,\\n    EQ,\\n    LT,\\n    LTE\\n}\\n\\nstruct Auth {\\n    AuthType authType;\\n    bool isAnon;\\n    bool isSelectableByUser;\\n    uint256 userId;\\n    bytes extraData;\\n}\\n\\nstruct Claim {\\n    ClaimType claimType;\\n    bytes16 groupId;\\n    bytes16 groupTimestamp;\\n    bool isSelectableByUser;\\n    uint256 value;\\n    bytes extraData;\\n}\\n\\nstruct Signature {\\n    bytes message;\\n    bytes extraData;\\n}\\n\\nstruct SismoConnectResponse {\\n    bytes16 appId;\\n    bytes16 namespace;\\n    bytes32 version;\\n    bytes signedMessage;\\n    SismoConnectProof[] proofs;\\n}\\n\\nstruct SismoConnectProof {\\n    Auth[] auths;\\n    Claim[] claims;\\n    bytes32 provingScheme;\\n    bytes proofData;\\n    bytes extraData;\\n}\\n\\nstruct SismoConnectVerifiedResult {\\n    bytes16 appId;\\n    bytes16 namespace;\\n    bytes32 version;\\n    VerifiedAuth[] auths;\\n    VerifiedClaim[] claims;\\n    bytes signedMessage;\\n}\\n\\nstruct VerifiedAuth {\\n    AuthType authType;\\n    bool isAnon;\\n    uint256 userId;\\n    bytes extraData;\\n    bytes proofData;\\n}\\n\\nstruct VerifiedClaim {\\n    ClaimType claimType;\\n    bytes16 groupId;\\n    bytes16 groupTimestamp;\\n    uint256 value;\\n    bytes extraData;\\n    uint256 proofId;\\n    bytes proofData;\\n}\\n\",\"keccak256\":\"0xd89e74c139d4a9c6e66d446f10b494b07f699ec7122e2a5aee8140c30e7ecafb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610160604081815234620004dc57816200237980380380916200002382856200052f565b8339602093849181010312620004dc57516001600160801b03198082169290838303620004dc578151906200005882620004e1565b600091828152868451916200006d8362000513565b8483520152818351620000808162000513565b528251946200008f8662000513565b828652835190620000a082620004e1565b8082528782019687521562000498578551516200044857819051169461012095865251511515936101409485528351620000da81620004e1565b601981527f7369736d6f436f6e6e65637456657269666965722d76312e320000000000000088820152845190816200012163349f642f60e11b928383526004830162000574565b038983733cd5334eb64ebbd4003b72022cc25465f1bfcee69281845afa9283156200043e5786936200041a575b506001600160a01b039283166080528651620001ad908b906200017181620004e1565b601781527f61757468526571756573744275696c6465722d76312e31000000000000000000828201528951809381928783526004830162000574565b0381855afa908115620003cc579084918891620003f8575b501660a052620002188a8851620001dc81620004e1565b601881527f636c61696d526571756573744275696c6465722d76312e310000000000000000828201528951809381928783526004830162000574565b0381855afa908115620003cc579084918891620003d6575b501660c052620002838a88516200024781620004e1565b601581527f7369676e61747572654275696c6465722d76312e310000000000000000000000828201528951809381928783526004830162000574565b0381855afa908115620003cc579184620002f294928d948a91620003aa575b501660e052885191620002b583620004e1565b601383527f726571756573744275696c6465722d76312e310000000000000000000000000084840152895180958194829383526004830162000574565b03915afa988915620003a05785996200036a575b50506101009716875260801c908254161790555191611db99384620005c0853960805184610c5b015260a05184818161026301526102d6015260c05184505060e0518461037e01525183610ad301525182818160ac01526119b10152518160e80152f35b6200038f929950803d1062000398575b6200038681836200052f565b81019062000553565b96388062000306565b503d6200037a565b86513d87823e3d90fd5b620003c59150853d871162000398576200038681836200052f565b38620002a2565b88513d89823e3d90fd5b620003f191508c8d3d1062000398576200038681836200052f565b3862000230565b6200041391508c8d3d1062000398576200038681836200052f565b38620001c5565b620004369193508a3d8c1162000398576200038681836200052f565b91386200014e565b87513d88823e3d90fd5b835162461bcd60e51b815260048101889052602360248201527f696d706572736f6e6174696f6e206d6f6465206973206e6f7420737570706f726044820152621d195960ea1b6064820152608490fd5b835162461bcd60e51b815260048101889052601560248201527f61707049642063616e6e6f7420626520656d70747900000000000000000000006044820152606490fd5b600080fd5b604081019081106001600160401b03821117620004fd57604052565b634e487b7160e01b600052604160045260246000fd5b602081019081106001600160401b03821117620004fd57604052565b601f909101601f19168101906001600160401b03821190821017620004fd57604052565b90816020910312620004dc57516001600160a01b0381168103620004dc5790565b6020808252825181830181905290939260005b828110620005aa57505060409293506000838284010152601f8019910116010190565b8181018601518482016040015285016200058756fe6101e0604052600436101561001357600080fd5b60003560e01c8063119f0991146101a7578063469163011461017857806379502c551461013857806380afdea81461010d578063a183dc27146100d0578063c187bbc11461008b5763c9512d991461006a57600080fd5b3461008657600036600319011261008657602060405160028152f35b600080fd5b346100865760003660031901126100865760206040516001600160801b03197f0000000000000000000000000000000000000000000000000000000000000000168152f35b346100865760003660031901126100865760206040517f000000000000000000000000000000000000000000000000000000000000000015158152f35b3461008657600036600319011261008657602060005460801b604051906001600160801b0319168152f35b34610086576000366003190112610086576040610153611971565b61017682518092602080916001600160801b031981511684520151511515910152565bf35b34610086576000366003190112610086576020604051733cd5334eb64ebbd4003b72022cc25465f1bfcee68152f35b34610086576020366003190112610086576004356001600160401b0381116100865736602382011215610086578060040135906101f26101e68361182e565b6040518060805261180d565b81608051523660248383010111610086578160009260246020930183608051013760805101015260805151156117045760405161022e816117f2565b6002815260005b604081106116ed57506102466118a8565b50604051633a0ba6ff60e01b8152600060048201819052816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa908115611121576000916116af575b506102a6826118dd565b526102b0816118dd565b506102b96118a8565b50604051633a0ba6ff60e01b8152600260048201526000816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561112157600091611671575b5061031982611900565b5261032381611900565b5061037a6000604051610335816117bc565b600d81526c49204c6f7665205369736d6f2160981b6020820152610357611c7b565b5060405180938192631a0d7ccb60e21b835260206004840152602483019061186c565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561112157600091611633575b50606060a06040516103c88161173a565b600081526000602082015260006040820152828082015282608082015201526080518051810161018052602081610180510312610086576020810151610100526001600160401b0361010051116100865760a0906101005101610180510312610086576040516104378161176b565b61044a6020610100516080510101611a80565b815261045f6040610100516080510101611a80565b6020820152606061010051608051010151604082015261010051608051016080810151906001600160401b0382116100865760206104a592816101805101920101611a95565b6060820152610100516080510160a081015160c0526001600160401b0360c051116100865760206101805101603f60c05183010112156100865760c0510160200151916104f183611891565b936104ff604051958661180d565b838552602085019460c0516101005160805101016020610180510160408760051b8301011161008657604001610120529194935b60c05161010051608051010160408260051b820101610120511015610a5f5761012051516101c0526001600160401b036101c051116100865760a090601f19906101c0510161018051030112610086576040516101a0526105966101a05161176b565b6101c05160c05161010051608051010101604081015160e0526001600160401b0360e051116100865760206101805101605f60e05183010112156100865760409060e051010151610140526105ed61014051611891565b956105fb604051978861180d565b610140518752602087019260e0516101c05160c05161010051608051010101016020610180510160606101405160051b8301011161008657606001935b60e0516101c05160c05161010051608051010101019060606101405160051b830101861015610779578551916001600160401b038311610086576101805160a09184019003603f19011261008657604051916106938361176b565b60608160e0516101c05160c051610100516080510101010101015160068110156100865783526106da60808260e0516101c05160c051610100518551010101010101611ada565b602084015261070160a08260e0516101c05160c05161010051608051010101010101611ada565b604084015260c08160e0516101c05183516101005160805101010101010151606084015260e0516101c05160c0516101005160805101010101019060e0820151926001600160401b038411610086576107696020949360608695866101805101920101611a95565b6080820152815201940193610638565b5050939196909492506101a051526101c05160c05161010051608051010101606081015160a0526001600160401b0360a051116100865760206101805101605f60a05183010112156100865760409060a051010151610160526107de61016051611891565b956107ec604051978861180d565b610160518752602087019260a0516101c05160c05161010051608051010101016020610180510160606101605160051b8301011161008657606001935b60a0516101c05160c05161010051608051010101019060606101605160051b830101861015610991578551916001600160401b038311610086576101805160c09184019003603f19011261008657604051916108848361173a565b60608160a0516101c05160c051610100516080510101010101015160058110156100865783526108cb60808260a0516101c05160c051610100518551010101010101611a80565b60208401526108f160a08281516101c05160c05161010051608051010101010101611a80565b604084015261091760c08260a0516101c051835161010051608051010101010101611ada565b606084015260e08160a0516101c05160c0516101005160805101010101010151608084015260a0516101c05160c05161010051608051010101010190610100820151926001600160401b038411610086576109816020949360608695866101805101920101611a95565b60a0820152815201940193610829565b50509493925094909560206101a051015260806101c05160c051610100518351010101015160406101a05101526101c05160c0516101005160805101010160a0810151906001600160401b0382116100865760406109f89260206101805101920101611a95565b60606101a05101526101c05160c051610100516080510101019060c08201516001600160401b038111610086576020926040610a3c92856101805101920101611a95565b60806101a05101526101a051815201946020610120510161012052919493610533565b84876000610abd86886080860152604051610a7981611786565b83815260606020820152606060408201526060610a94611c7b565b910152610acf6040519485938493632ceb1e8d60e01b8552604060048601526044850190611b17565b83810360031901602485015290611bba565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156111215760009161136f575b5090610b16611971565b906040519283916312b037ff60e01b8352608060048401526001600160801b031981511660848401526001600160801b031960208201511660a4840152604081015160c48401526080610b79606083015160a060e487015261012486019061186c565b9101519060831984820301610104850152815180825260208201916020808360051b8301019401926000915b8383106111c55750505050506003198382030160248401526001600160801b03198251168152610be46020830151608060208401526080830190611b17565b916040810151928281036040840152835180825260208201916020808360051b8301019601926000915b83831061112d5788600081808d610c57610c368e8e60608f0151906060818403910152611bba565b82516001600160801b03191660448501526020909201515115156064840152565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561112157600091610d7f575b5060608101805151610ca581611891565b90610cb3604051928361180d565b808252610cc2601f1991611891565b0160005b818110610d4657505060005b82518051821015610d0c5790610ceb81610d0793611910565b51610cf68285611910565b52610d018184611910565b50611924565b610cd2565b610d42610d1886611d01565b60405190602082015260208152610d2e816117bc565b60405191829160208352602083019061186c565b0390f35b602090604051610d558161176b565b60008152600083820152600060408201526060808201526060608082015282828601015201610cc6565b90503d806000833e610d91818361180d565b6020828281010312610086578151916001600160401b0383116100865760c083820183830103126100865760405192610dc98461173a565b610dd4818301611a80565b8452610de4602082840101611a80565b602085015281810160408181015190860152606001516001600160401b03811161008657838301601f828486010101121561008657808284010151610e2881611891565b91610e36604051938461180d565b8183526020830186860160208460051b84888a0101010111610086576020828688010101905b60208460051b84888a01010101821061103757505050506060850152608081830101516001600160401b03811161008657838301601f828486010101121561008657808284010151610ead81611891565b91610ebb604051938461180d565b8183526020830186860160208460051b84888a0101010111610086576020828688010101905b60208460051b84888a010101018210610f2c5750505050608085015260a08183010151906001600160401b03821161008657610f21938301920101611a95565b60a082015281610c94565b81516001600160401b0381116100865760e0888801850182018a8a0103601f1901126100865760405191610f5f836117a1565b602082868a8c01010101516005811015610086578352610f87604083878b8d01010101611a80565b6020840152610f9e606083878b8d01010101611a80565b6040840152888801850182016080810151606085015260a001516001600160401b03811161008657610fde908b8b01908a8c018801850101602001611a95565b60808401528888018501820160c081015160a085015260e00151906001600160401b038211610086576020936110258b868096958f968b8f84998601950101010101611a95565b60c08201528152019201919050610ee1565b81516001600160401b0381116100865760a0888801850182018a8a0103601f190112610086576040519161106a8361176b565b602082868a8c01010101516006811015610086578352611092604083878b8d01010101611ada565b60208401528888018501820160608101516040850152608001516001600160401b038111610086576110d2908b8b01908a8c018801850101602001611a95565b606084015260a082868a8c0101010151906001600160401b0382116100865760209361110f8b868096958f968b8f84998601950101010101611a95565b60808201528152019201919050610e5c565b6040513d6000823e3d90fd5b91939750919394956020806111b1600193601f1986820301875260e08c5191611157818451611b0a565b6001600160801b03198584015116858201526001600160801b031960408401511660408201526060830151606082015260808301511515608082015260a0830151151560a08201528160c08094015193820152019061186c565b990193019301909289979695949293610c0e565b91939596509193601f1982820301835285519060a0810182519060a08352815180915260c08301602060c08360051b86010193019160005b81811061130c575050505060208301519082810360208401528151808252602082016020808360051b85010194019260005b83811061128b57505050505061127883602093608061126786956040600199015160408501526060850151848203606086015261186c565b92015190608081840391015261186c565b9701930193019092889695949293610ba5565b90919293946020806112ff600193601f1987820301885260c060a08b516112b3848251611b0a565b6001600160801b03198682015116868501526001600160801b03196040820151166040850152606081015115156060850152608081015160808501520151918160a0820152019061186c565b970195940192910161122f565b9091929360208061136360019360bf198a820301885260a060808a51611333848251611ae7565b8581015115158685015260408101511515604085015260608101516060850152015191816080820152019061186c565b960194019291016111fd565b90503d806000833e611381818361180d565b6020828281010312610086578151916001600160401b038311610086576080838201838301031261008657604051926113b984611786565b6113c4818301611a80565b8452602081830101516001600160401b03811161008657838301601f8284860101011215610086578082840101516113fb81611891565b91611409604051938461180d565b8183526020830186860160208460051b84888a0101010111610086576020828688010101905b60208460051b84888a0101010182106115f957505050506020850152604081830101516001600160401b03811161008657838301601f82848601010112156100865780828401015161148081611891565b9161148e604051938461180d565b8183526020830186860160208460051b84888a0101010111610086576020828688010101905b60208460051b84888a0101010182106114ff5750505050604085015260608183010151906001600160401b038211610086576114f4938301920101611c9b565b606082015282610b0c565b81516001600160401b0381116100865760e0888801850182018a8a0103601f1901126100865760405191611532836117a1565b602082868a8c0101010151600581101561008657835261155a604083878b8d01010101611a80565b6020840152611571606083878b8d01010101611a80565b604084015288880185018201608081015160608501526115939060a001611ada565b60808401526115aa60c083878b8d01010101611ada565b60a084015260e082868a8c0101010151906001600160401b038211610086576020936115e78b868096958f968b8f84998601950101010101611a95565b60c082015281520192019190506114b4565b8151906001600160401b0382116100865760208092916116268a838095898f8e9085019401010101611bf0565b815201920191905061142f565b90503d806000833e611645818361180d565b81016020828203126100865781516001600160401b0381116100865761166b9201611c9b565b826103b7565b90503d806000833e611683818361180d565b81016020828203126100865781516001600160401b038111610086576116a99201611bf0565b8261030f565b90503d806000833e6116c1818361180d565b81016020828203126100865781516001600160401b038111610086576116e79201611bf0565b8261029c565b6020906116f86118a8565b82828501015201610235565b60405162461bcd60e51b815260206004820152600e60248201526d656d70747920726573706f6e736560901b6044820152606490fd5b60c081019081106001600160401b0382111761175557604052565b634e487b7160e01b600052604160045260246000fd5b60a081019081106001600160401b0382111761175557604052565b608081019081106001600160401b0382111761175557604052565b60e081019081106001600160401b0382111761175557604052565b604081019081106001600160401b0382111761175557604052565b602081019081106001600160401b0382111761175557604052565b606081019081106001600160401b0382111761175557604052565b90601f801991011681019081106001600160401b0382111761175557604052565b6001600160401b03811161175557601f01601f191660200190565b60005b83811061185c5750506000910152565b818101518382015260200161184c565b9060209161188581518092818552858086019101611849565b601f01601f1916010190565b6001600160401b0381116117555760051b60200190565b604051906118b58261173a565b606060a083600081526000602082015260006040820152600083820152600060808201520152565b8051156118ea5760200190565b634e487b7160e01b600052603260045260246000fd5b8051600110156118ea5760400190565b80518210156118ea5760209160051b010190565b60001981146119335760010190565b634e487b7160e01b600052601160045260246000fd5b60405190611956826117bc565b60008252604051602083611969836117d7565b600083520152565b611979611949565b50611982611949565b506000604051611991816117d7565b5260405161199e816117d7565b60008152604051906119af826117bc565b7f00000000000000000000000000000000000000000000000000000000000000006001600160801b0319168083526020830191825215611a435751516119f25790565b60405162461bcd60e51b815260206004820152602360248201527f696d706572736f6e6174696f6e206d6f6465206973206e6f7420737570706f726044820152621d195960ea1b6064820152608490fd5b60405162461bcd60e51b815260206004820152601560248201527461707049642063616e6e6f7420626520656d70747960581b6044820152606490fd5b51906001600160801b03198216820361008657565b81601f82011215610086578051611aab8161182e565b92611ab9604051948561180d565b8184526020828401011161008657611ad79160208085019101611849565b90565b5190811515820361008657565b906006821015611af45752565b634e487b7160e01b600052602160045260246000fd5b906005821015611af45752565b908082519081815260208091019281808460051b8301019501936000915b848310611b455750505050505090565b9091929394958480611baa600193601f198682030187528a51611b69828251611ae7565b838101518483015260408082015115159083015260608082015115159083015260808082015115159083015260a0809101519160c08092820152019061186c565b9801930193019194939290611b35565b611ad7916040611bd3835160608452606084019061186c565b92602081015115156020840152015190604081840391015261186c565b919060c0838203126100865760405190611c098261173a565b81938051600681101561008657835260208101516020840152611c2e60408201611ada565b6040840152611c3f60608201611ada565b6060840152611c5060808201611ada565b608084015260a0810151916001600160401b0383116100865760a092611c769201611a95565b910152565b60405190611c88826117f2565b6060604083828152600060208201520152565b91906060838203126100865760405190611cb4826117f2565b81938051916001600160401b03928381116100865781611cd5918401611a95565b8452611ce360208301611ada565b6020850152604082015192831161008657604092611c769201611a95565b6000805b6060830180518051831015611d6a5782611d1e91611910565b51516006811015611d565715611d415750611d3a606091611924565b9050611d05565b60409350611d50925051611910565b51015190565b634e487b7160e01b84526021600452602484fd5b60405163267ac2cf60e01b815260048101859052602490fdfea2646970667358221220af35fc29eec1e8e4e3555ccaa7a8b4710d45dbf5944c8504d4a95365c2df09e664736f6c63430008130033",
  "deployedBytecode": "0x6101e0604052600436101561001357600080fd5b60003560e01c8063119f0991146101a7578063469163011461017857806379502c551461013857806380afdea81461010d578063a183dc27146100d0578063c187bbc11461008b5763c9512d991461006a57600080fd5b3461008657600036600319011261008657602060405160028152f35b600080fd5b346100865760003660031901126100865760206040516001600160801b03197f0000000000000000000000000000000000000000000000000000000000000000168152f35b346100865760003660031901126100865760206040517f000000000000000000000000000000000000000000000000000000000000000015158152f35b3461008657600036600319011261008657602060005460801b604051906001600160801b0319168152f35b34610086576000366003190112610086576040610153611971565b61017682518092602080916001600160801b031981511684520151511515910152565bf35b34610086576000366003190112610086576020604051733cd5334eb64ebbd4003b72022cc25465f1bfcee68152f35b34610086576020366003190112610086576004356001600160401b0381116100865736602382011215610086578060040135906101f26101e68361182e565b6040518060805261180d565b81608051523660248383010111610086578160009260246020930183608051013760805101015260805151156117045760405161022e816117f2565b6002815260005b604081106116ed57506102466118a8565b50604051633a0ba6ff60e01b8152600060048201819052816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa908115611121576000916116af575b506102a6826118dd565b526102b0816118dd565b506102b96118a8565b50604051633a0ba6ff60e01b8152600260048201526000816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561112157600091611671575b5061031982611900565b5261032381611900565b5061037a6000604051610335816117bc565b600d81526c49204c6f7665205369736d6f2160981b6020820152610357611c7b565b5060405180938192631a0d7ccb60e21b835260206004840152602483019061186c565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561112157600091611633575b50606060a06040516103c88161173a565b600081526000602082015260006040820152828082015282608082015201526080518051810161018052602081610180510312610086576020810151610100526001600160401b0361010051116100865760a0906101005101610180510312610086576040516104378161176b565b61044a6020610100516080510101611a80565b815261045f6040610100516080510101611a80565b6020820152606061010051608051010151604082015261010051608051016080810151906001600160401b0382116100865760206104a592816101805101920101611a95565b6060820152610100516080510160a081015160c0526001600160401b0360c051116100865760206101805101603f60c05183010112156100865760c0510160200151916104f183611891565b936104ff604051958661180d565b838552602085019460c0516101005160805101016020610180510160408760051b8301011161008657604001610120529194935b60c05161010051608051010160408260051b820101610120511015610a5f5761012051516101c0526001600160401b036101c051116100865760a090601f19906101c0510161018051030112610086576040516101a0526105966101a05161176b565b6101c05160c05161010051608051010101604081015160e0526001600160401b0360e051116100865760206101805101605f60e05183010112156100865760409060e051010151610140526105ed61014051611891565b956105fb604051978861180d565b610140518752602087019260e0516101c05160c05161010051608051010101016020610180510160606101405160051b8301011161008657606001935b60e0516101c05160c05161010051608051010101019060606101405160051b830101861015610779578551916001600160401b038311610086576101805160a09184019003603f19011261008657604051916106938361176b565b60608160e0516101c05160c051610100516080510101010101015160068110156100865783526106da60808260e0516101c05160c051610100518551010101010101611ada565b602084015261070160a08260e0516101c05160c05161010051608051010101010101611ada565b604084015260c08160e0516101c05183516101005160805101010101010151606084015260e0516101c05160c0516101005160805101010101019060e0820151926001600160401b038411610086576107696020949360608695866101805101920101611a95565b6080820152815201940193610638565b5050939196909492506101a051526101c05160c05161010051608051010101606081015160a0526001600160401b0360a051116100865760206101805101605f60a05183010112156100865760409060a051010151610160526107de61016051611891565b956107ec604051978861180d565b610160518752602087019260a0516101c05160c05161010051608051010101016020610180510160606101605160051b8301011161008657606001935b60a0516101c05160c05161010051608051010101019060606101605160051b830101861015610991578551916001600160401b038311610086576101805160c09184019003603f19011261008657604051916108848361173a565b60608160a0516101c05160c051610100516080510101010101015160058110156100865783526108cb60808260a0516101c05160c051610100518551010101010101611a80565b60208401526108f160a08281516101c05160c05161010051608051010101010101611a80565b604084015261091760c08260a0516101c051835161010051608051010101010101611ada565b606084015260e08160a0516101c05160c0516101005160805101010101010151608084015260a0516101c05160c05161010051608051010101010190610100820151926001600160401b038411610086576109816020949360608695866101805101920101611a95565b60a0820152815201940193610829565b50509493925094909560206101a051015260806101c05160c051610100518351010101015160406101a05101526101c05160c0516101005160805101010160a0810151906001600160401b0382116100865760406109f89260206101805101920101611a95565b60606101a05101526101c05160c051610100516080510101019060c08201516001600160401b038111610086576020926040610a3c92856101805101920101611a95565b60806101a05101526101a051815201946020610120510161012052919493610533565b84876000610abd86886080860152604051610a7981611786565b83815260606020820152606060408201526060610a94611c7b565b910152610acf6040519485938493632ceb1e8d60e01b8552604060048601526044850190611b17565b83810360031901602485015290611bba565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156111215760009161136f575b5090610b16611971565b906040519283916312b037ff60e01b8352608060048401526001600160801b031981511660848401526001600160801b031960208201511660a4840152604081015160c48401526080610b79606083015160a060e487015261012486019061186c565b9101519060831984820301610104850152815180825260208201916020808360051b8301019401926000915b8383106111c55750505050506003198382030160248401526001600160801b03198251168152610be46020830151608060208401526080830190611b17565b916040810151928281036040840152835180825260208201916020808360051b8301019601926000915b83831061112d5788600081808d610c57610c368e8e60608f0151906060818403910152611bba565b82516001600160801b03191660448501526020909201515115156064840152565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561112157600091610d7f575b5060608101805151610ca581611891565b90610cb3604051928361180d565b808252610cc2601f1991611891565b0160005b818110610d4657505060005b82518051821015610d0c5790610ceb81610d0793611910565b51610cf68285611910565b52610d018184611910565b50611924565b610cd2565b610d42610d1886611d01565b60405190602082015260208152610d2e816117bc565b60405191829160208352602083019061186c565b0390f35b602090604051610d558161176b565b60008152600083820152600060408201526060808201526060608082015282828601015201610cc6565b90503d806000833e610d91818361180d565b6020828281010312610086578151916001600160401b0383116100865760c083820183830103126100865760405192610dc98461173a565b610dd4818301611a80565b8452610de4602082840101611a80565b602085015281810160408181015190860152606001516001600160401b03811161008657838301601f828486010101121561008657808284010151610e2881611891565b91610e36604051938461180d565b8183526020830186860160208460051b84888a0101010111610086576020828688010101905b60208460051b84888a01010101821061103757505050506060850152608081830101516001600160401b03811161008657838301601f828486010101121561008657808284010151610ead81611891565b91610ebb604051938461180d565b8183526020830186860160208460051b84888a0101010111610086576020828688010101905b60208460051b84888a010101018210610f2c5750505050608085015260a08183010151906001600160401b03821161008657610f21938301920101611a95565b60a082015281610c94565b81516001600160401b0381116100865760e0888801850182018a8a0103601f1901126100865760405191610f5f836117a1565b602082868a8c01010101516005811015610086578352610f87604083878b8d01010101611a80565b6020840152610f9e606083878b8d01010101611a80565b6040840152888801850182016080810151606085015260a001516001600160401b03811161008657610fde908b8b01908a8c018801850101602001611a95565b60808401528888018501820160c081015160a085015260e00151906001600160401b038211610086576020936110258b868096958f968b8f84998601950101010101611a95565b60c08201528152019201919050610ee1565b81516001600160401b0381116100865760a0888801850182018a8a0103601f190112610086576040519161106a8361176b565b602082868a8c01010101516006811015610086578352611092604083878b8d01010101611ada565b60208401528888018501820160608101516040850152608001516001600160401b038111610086576110d2908b8b01908a8c018801850101602001611a95565b606084015260a082868a8c0101010151906001600160401b0382116100865760209361110f8b868096958f968b8f84998601950101010101611a95565b60808201528152019201919050610e5c565b6040513d6000823e3d90fd5b91939750919394956020806111b1600193601f1986820301875260e08c5191611157818451611b0a565b6001600160801b03198584015116858201526001600160801b031960408401511660408201526060830151606082015260808301511515608082015260a0830151151560a08201528160c08094015193820152019061186c565b990193019301909289979695949293610c0e565b91939596509193601f1982820301835285519060a0810182519060a08352815180915260c08301602060c08360051b86010193019160005b81811061130c575050505060208301519082810360208401528151808252602082016020808360051b85010194019260005b83811061128b57505050505061127883602093608061126786956040600199015160408501526060850151848203606086015261186c565b92015190608081840391015261186c565b9701930193019092889695949293610ba5565b90919293946020806112ff600193601f1987820301885260c060a08b516112b3848251611b0a565b6001600160801b03198682015116868501526001600160801b03196040820151166040850152606081015115156060850152608081015160808501520151918160a0820152019061186c565b970195940192910161122f565b9091929360208061136360019360bf198a820301885260a060808a51611333848251611ae7565b8581015115158685015260408101511515604085015260608101516060850152015191816080820152019061186c565b960194019291016111fd565b90503d806000833e611381818361180d565b6020828281010312610086578151916001600160401b038311610086576080838201838301031261008657604051926113b984611786565b6113c4818301611a80565b8452602081830101516001600160401b03811161008657838301601f8284860101011215610086578082840101516113fb81611891565b91611409604051938461180d565b8183526020830186860160208460051b84888a0101010111610086576020828688010101905b60208460051b84888a0101010182106115f957505050506020850152604081830101516001600160401b03811161008657838301601f82848601010112156100865780828401015161148081611891565b9161148e604051938461180d565b8183526020830186860160208460051b84888a0101010111610086576020828688010101905b60208460051b84888a0101010182106114ff5750505050604085015260608183010151906001600160401b038211610086576114f4938301920101611c9b565b606082015282610b0c565b81516001600160401b0381116100865760e0888801850182018a8a0103601f1901126100865760405191611532836117a1565b602082868a8c0101010151600581101561008657835261155a604083878b8d01010101611a80565b6020840152611571606083878b8d01010101611a80565b604084015288880185018201608081015160608501526115939060a001611ada565b60808401526115aa60c083878b8d01010101611ada565b60a084015260e082868a8c0101010151906001600160401b038211610086576020936115e78b868096958f968b8f84998601950101010101611a95565b60c082015281520192019190506114b4565b8151906001600160401b0382116100865760208092916116268a838095898f8e9085019401010101611bf0565b815201920191905061142f565b90503d806000833e611645818361180d565b81016020828203126100865781516001600160401b0381116100865761166b9201611c9b565b826103b7565b90503d806000833e611683818361180d565b81016020828203126100865781516001600160401b038111610086576116a99201611bf0565b8261030f565b90503d806000833e6116c1818361180d565b81016020828203126100865781516001600160401b038111610086576116e79201611bf0565b8261029c565b6020906116f86118a8565b82828501015201610235565b60405162461bcd60e51b815260206004820152600e60248201526d656d70747920726573706f6e736560901b6044820152606490fd5b60c081019081106001600160401b0382111761175557604052565b634e487b7160e01b600052604160045260246000fd5b60a081019081106001600160401b0382111761175557604052565b608081019081106001600160401b0382111761175557604052565b60e081019081106001600160401b0382111761175557604052565b604081019081106001600160401b0382111761175557604052565b602081019081106001600160401b0382111761175557604052565b606081019081106001600160401b0382111761175557604052565b90601f801991011681019081106001600160401b0382111761175557604052565b6001600160401b03811161175557601f01601f191660200190565b60005b83811061185c5750506000910152565b818101518382015260200161184c565b9060209161188581518092818552858086019101611849565b601f01601f1916010190565b6001600160401b0381116117555760051b60200190565b604051906118b58261173a565b606060a083600081526000602082015260006040820152600083820152600060808201520152565b8051156118ea5760200190565b634e487b7160e01b600052603260045260246000fd5b8051600110156118ea5760400190565b80518210156118ea5760209160051b010190565b60001981146119335760010190565b634e487b7160e01b600052601160045260246000fd5b60405190611956826117bc565b60008252604051602083611969836117d7565b600083520152565b611979611949565b50611982611949565b506000604051611991816117d7565b5260405161199e816117d7565b60008152604051906119af826117bc565b7f00000000000000000000000000000000000000000000000000000000000000006001600160801b0319168083526020830191825215611a435751516119f25790565b60405162461bcd60e51b815260206004820152602360248201527f696d706572736f6e6174696f6e206d6f6465206973206e6f7420737570706f726044820152621d195960ea1b6064820152608490fd5b60405162461bcd60e51b815260206004820152601560248201527461707049642063616e6e6f7420626520656d70747960581b6044820152606490fd5b51906001600160801b03198216820361008657565b81601f82011215610086578051611aab8161182e565b92611ab9604051948561180d565b8184526020828401011161008657611ad79160208085019101611849565b90565b5190811515820361008657565b906006821015611af45752565b634e487b7160e01b600052602160045260246000fd5b906005821015611af45752565b908082519081815260208091019281808460051b8301019501936000915b848310611b455750505050505090565b9091929394958480611baa600193601f198682030187528a51611b69828251611ae7565b838101518483015260408082015115159083015260608082015115159083015260808082015115159083015260a0809101519160c08092820152019061186c565b9801930193019194939290611b35565b611ad7916040611bd3835160608452606084019061186c565b92602081015115156020840152015190604081840391015261186c565b919060c0838203126100865760405190611c098261173a565b81938051600681101561008657835260208101516020840152611c2e60408201611ada565b6040840152611c3f60608201611ada565b6060840152611c5060808201611ada565b608084015260a0810151916001600160401b0383116100865760a092611c769201611a95565b910152565b60405190611c88826117f2565b6060604083828152600060208201520152565b91906060838203126100865760405190611cb4826117f2565b81938051916001600160401b03928381116100865781611cd5918401611a95565b8452611ce360208301611ada565b6020850152604082015192831161008657604092611c769201611a95565b6000805b6060830180518051831015611d6a5782611d1e91611910565b51516006811015611d565715611d415750611d3a606091611924565b9050611d05565b60409350611d50925051611910565b51015190565b634e487b7160e01b84526021600452602484fd5b60405163267ac2cf60e01b815260048101859052602490fdfea2646970667358221220af35fc29eec1e8e4e3555ccaa7a8b4710d45dbf5944c8504d4a95365c2df09e664736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5373,
        "contract": "contracts/helpers/MecenateVerifier.sol:MecenateVerifier",
        "label": "appId",
        "offset": 0,
        "slot": "0",
        "type": "t_bytes16"
      }
    ],
    "types": {
      "t_bytes16": {
        "encoding": "inplace",
        "label": "bytes16",
        "numberOfBytes": "16"
      }
    }
  }
}