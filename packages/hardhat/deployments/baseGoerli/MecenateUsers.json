{
  "address": "0x602B69dCe63dcDA1bA13b2698f98336876b60e8B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifierContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasuryContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "vaultId",
          "type": "bytes32"
        }
      ],
      "name": "UserRegistered",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "changeTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "sismoConnectResponse",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_username",
          "type": "string"
        }
      ],
      "name": "changeUserName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        }
      ],
      "name": "changeVerifier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "vaultId",
          "type": "bytes32"
        }
      ],
      "name": "checkifUserExist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endIndex",
          "type": "uint256"
        }
      ],
      "name": "getPaginatedUsers",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "users",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getUserAt",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "user",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUserCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "vaultId",
          "type": "bytes32"
        }
      ],
      "name": "getUserName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getUserVaultIdAt",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "user",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUsers",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "users",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "sismoConnectResponse",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_username",
          "type": "string"
        }
      ],
      "name": "registerUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "userNames",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifierContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3165b0bd1d7ebc36933526fd9921865b456a866ce15f58ffa041e0dab49ef378",
  "receipt": {
    "to": null,
    "from": "0x8aA5F726d9F868a21a8bd748E2f1E43bA31eb670",
    "contractAddress": "0x602B69dCe63dcDA1bA13b2698f98336876b60e8B",
    "transactionIndex": 1,
    "gasUsed": "950658",
    "logsBloom": "0x
    "blockHash": "0xfc6d153aedf2604d0db11ae6d01009f75f51a61f31b7840a465c007cafa59b42",
    "transactionHash": "0x3165b0bd1d7ebc36933526fd9921865b456a866ce15f58ffa041e0dab49ef378",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 11101559,
        "transactionHash": "0x3165b0bd1d7ebc36933526fd9921865b456a866ce15f58ffa041e0dab49ef378",
        "address": "0x602B69dCe63dcDA1bA13b2698f98336876b60e8B",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008aa5f726d9f868a21a8bd748e2f1e43ba31eb670"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xfc6d153aedf2604d0db11ae6d01009f75f51a61f31b7840a465c007cafa59b42"
      }
    ],
    "blockNumber": 11101559,
    "cumulativeGasUsed": "997511",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE489083a791C01F2c08600dc5E12051F82Ebc57f",
    "0xF72356F915232705C3bd1a1F7eD03D5c5f67Ca29"
  ],
  "numDeployments": 8,
  "solcInputHash": "ecd027acd5b2c3f49b1ec8f0fd616964",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifierContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"name\":\"UserRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"changeTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_username\",\"type\":\"string\"}],\"name\":\"changeUserName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"}],\"name\":\"changeVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"name\":\"checkifUserExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"getPaginatedUsers\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"users\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserAt\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"user\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"name\":\"getUserName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserVaultIdAt\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"user\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsers\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"users\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_username\",\"type\":\"string\"}],\"name\":\"registerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"userNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifierContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/registry/MecenateUsers.sol\":\"MecenateUsers\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/interfaces/IMecenateVerifier.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\ninterface IMecenateVerifier {\\n    function sismoVerify(\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        address _from\\n    ) external view returns (bytes memory, uint256, uint256);\\n}\\n\",\"keccak256\":\"0x49e4b2b0781bc6af8190f38864ea965b251a0ec4dc266f44bbb6f567adccabba\"},\"contracts/library/SismoStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nstruct SismoConnectRequest {\\r\\n    bytes16 namespace;\\r\\n    AuthRequest[] auths;\\r\\n    ClaimRequest[] claims;\\r\\n    SignatureRequest signature;\\r\\n}\\r\\n\\r\\nstruct SismoConnectConfig {\\r\\n    bytes16 appId;\\r\\n    VaultConfig vault;\\r\\n}\\r\\n\\r\\nstruct VaultConfig {\\r\\n    bool isImpersonationMode;\\r\\n}\\r\\n\\r\\nstruct AuthRequest {\\r\\n    AuthType authType;\\r\\n    uint256 userId; // default: 0\\r\\n    // flags\\r\\n    bool isAnon; // default: false -> true not supported yet, need to throw if true\\r\\n    bool isOptional; // default: false\\r\\n    bool isSelectableByUser; // default: true\\r\\n    //\\r\\n    bytes extraData; // default: \\\"\\\"\\r\\n}\\r\\n\\r\\nstruct ClaimRequest {\\r\\n    ClaimType claimType; // default: GTE\\r\\n    bytes16 groupId;\\r\\n    bytes16 groupTimestamp; // default: bytes16(\\\"latest\\\")\\r\\n    uint256 value; // default: 1\\r\\n    // flags\\r\\n    bool isOptional; // default: false\\r\\n    bool isSelectableByUser; // default: true\\r\\n    //\\r\\n    bytes extraData; // default: \\\"\\\"\\r\\n}\\r\\n\\r\\nstruct SignatureRequest {\\r\\n    bytes message; // default: \\\"MESSAGE_SELECTED_BY_USER\\\"\\r\\n    bool isSelectableByUser; // default: false\\r\\n    bytes extraData; // default: \\\"\\\"\\r\\n}\\r\\n\\r\\nenum AuthType {\\r\\n    VAULT,\\r\\n    GITHUB,\\r\\n    TWITTER,\\r\\n    EVM_ACCOUNT,\\r\\n    TELEGRAM,\\r\\n    DISCORD\\r\\n}\\r\\n\\r\\nenum ClaimType {\\r\\n    GTE,\\r\\n    GT,\\r\\n    EQ,\\r\\n    LT,\\r\\n    LTE\\r\\n}\\r\\n\\r\\nstruct Auth {\\r\\n    AuthType authType;\\r\\n    bool isAnon;\\r\\n    bool isSelectableByUser;\\r\\n    uint256 userId;\\r\\n    bytes extraData;\\r\\n}\\r\\n\\r\\nstruct Claim {\\r\\n    ClaimType claimType;\\r\\n    bytes16 groupId;\\r\\n    bytes16 groupTimestamp;\\r\\n    bool isSelectableByUser;\\r\\n    uint256 value;\\r\\n    bytes extraData;\\r\\n}\\r\\n\\r\\nstruct Signature {\\r\\n    bytes message;\\r\\n    bytes extraData;\\r\\n}\\r\\n\\r\\nstruct SismoConnectResponse {\\r\\n    bytes16 appId;\\r\\n    bytes16 namespace;\\r\\n    bytes32 version;\\r\\n    bytes signedMessage;\\r\\n    SismoConnectProof[] proofs;\\r\\n}\\r\\n\\r\\nstruct SismoConnectProof {\\r\\n    Auth[] auths;\\r\\n    Claim[] claims;\\r\\n    bytes32 provingScheme;\\r\\n    bytes proofData;\\r\\n    bytes extraData;\\r\\n}\\r\\n\\r\\nstruct SismoConnectVerifiedResult {\\r\\n    bytes16 appId;\\r\\n    bytes16 namespace;\\r\\n    bytes32 version;\\r\\n    VerifiedAuth[] auths;\\r\\n    VerifiedClaim[] claims;\\r\\n    bytes signedMessage;\\r\\n}\\r\\n\\r\\nstruct VerifiedAuth {\\r\\n    AuthType authType;\\r\\n    bool isAnon;\\r\\n    uint256 userId;\\r\\n    bytes extraData;\\r\\n    bytes proofData;\\r\\n}\\r\\n\\r\\nstruct VerifiedClaim {\\r\\n    ClaimType claimType;\\r\\n    bytes16 groupId;\\r\\n    bytes16 groupTimestamp;\\r\\n    uint256 value;\\r\\n    bytes extraData;\\r\\n    uint256 proofId;\\r\\n    bytes proofData;\\r\\n}\\r\\n\",\"keccak256\":\"0x0d7238088b9d4b679f489531b76e4dbf851e7c33a2a8b50a786273125aa0e623\",\"license\":\"MIT\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\n * @title Structures\\n * @dev This library defines various data structures used in the Mecenate platform.\\n */\\npragma solidity 0.8.19;\\n\\nlibrary Structures {\\n    enum PostStatus {\\n        Waiting,\\n        Proposed,\\n        Accepted,\\n        Submitted,\\n        Finalized,\\n        Punished,\\n        Revealed,\\n        Renounced\\n    }\\n    enum Tokens {\\n        NaN,\\n        MUSE,\\n        DAI\\n    }\\n    enum PostType {\\n        Text,\\n        Image,\\n        Video,\\n        Audio,\\n        File\\n    }\\n    enum PostDuration {\\n        OneDay,\\n        ThreeDays,\\n        OneWeek,\\n        TwoWeeks,\\n        OneMonth\\n    }\\n\\n    struct FeedSettings {\\n        uint256 punishmentRatio;\\n        uint256 postCount;\\n        address usersModuleContract;\\n        address factoryContract;\\n        address verifierContract;\\n        address vaultContract;\\n        address router;\\n        bytes encodedSymKey;\\n        bytes lastMessageForBuyer;\\n        bytes lastMessageForSeller;\\n        string version;\\n    }\\n\\n    struct FactorySettings {\\n        address treasuryContract;\\n        address usersModuleContract;\\n        address verifierContract;\\n        address museToken;\\n        address daiToken;\\n        address wethToken;\\n        address router;\\n    }\\n\\n    /**\\n     * @dev Struct representing a post on the Mecenate platform.\\n     */\\n    struct Post {\\n        User creator;\\n        PostData postdata;\\n    }\\n\\n    /**\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\n     */\\n    struct PostData {\\n        PostSettings settings;\\n        PostEscrow escrow;\\n        PostEncryptedData data;\\n    }\\n\\n    /**\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\n     */\\n    struct PostEncryptedData {\\n        bytes encryptedData;\\n        bytes encryptedKey;\\n        bytes decryptedData;\\n    }\\n\\n    /**\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettings {\\n        PostStatus status;\\n        PostType postType;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n        uint256 duration;\\n        Tokens tokenId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the private settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettingPrivate {\\n        bytes vaultIdSeller;\\n        uint256 sellerTwitterId;\\n        uint256 sellerTelegramId;\\n        bytes vaultIdBuyer;\\n        uint256 buyerTwitterId;\\n        uint256 buyerTelegramId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\n     */\\n    struct PostEscrow {\\n        uint256 stake;\\n        uint256 payment;\\n        uint256 punishment;\\n        uint256 penalty;\\n    }\\n\\n    /**\\n     * @dev Struct representing a user on the Mecenate platform.\\n     */\\n    struct User {\\n        bytes32 vaultId;\\n    }\\n\\n    /**\\n     * @dev Struct representing a feed on the Mecenate platform.\\n     */\\n    struct Feed {\\n        address contractAddress;\\n        bytes32 operator;\\n        uint256 sellerStake;\\n        uint256 buyerStake;\\n        uint256 totalStake;\\n        uint256 postCount;\\n        uint256 paymentRequested;\\n        uint256 stakeRequested;\\n        PostStatus status;\\n        Tokens tokenId;\\n        string version;\\n    }\\n\\n    /**\\n     * @dev Struct representing a bay request on the Mecenate platform.\\n     */\\n    struct BayRequest {\\n        bytes32 request;\\n        uint256 payment;\\n        uint256 stake;\\n        address postAddress;\\n        bool accepted;\\n        uint256 postCount;\\n        Tokens tokenId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the private settings of a bay request on the Mecenate platform.\\n     */\\n    struct BayRequestPrivate {\\n        bytes vaultIdSeller;\\n        bytes sellerResponse;\\n        bytes vaultIdBuyer;\\n        bytes buyerResponse;\\n        address buyerTo;\\n        address buyerFrom;\\n    }\\n}\\n\",\"keccak256\":\"0x6ec5a0f56708e43d4f5e48abe88175867b7f2c23c3d849362872623136b7c6c1\"},\"contracts/registry/MecenateUsers.sol\":{\"content\":\"/**\\n * @title MecenateUsers\\n * @dev This contract manages the registration of users in the Mecenate platform.\\n * It uses the IMecenateVerifier interface to verify user information and adds the user to a set of registered users.\\n * The contract also provides functions to retrieve user information and to change the treasury and verifier contracts.\\n */\\npragma solidity 0.8.19;\\n\\n// import enumerable address set from openzeppelin\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../library/Structures.sol\\\";\\nimport \\\"../interfaces/IMecenateVerifier.sol\\\";\\nimport \\\"../library/SismoStructs.sol\\\";\\n\\ncontract MecenateUsers is Ownable {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    EnumerableSet.Bytes32Set private _users;\\n\\n    Structures.User private _metadata;\\n\\n    event UserRegistered(bytes32 vaultId);\\n\\n    address public verifierContract;\\n\\n    address public treasuryContract;\\n\\n    mapping(bytes32 => string) public userNames;\\n\\n    constructor(address _verifierContract, address _treasuryContract) {\\n        verifierContract = _verifierContract;\\n\\n        treasuryContract = _treasuryContract;\\n    }\\n\\n    function changeTreasury(address _treasury) external onlyOwner {\\n        treasuryContract = _treasury;\\n    }\\n\\n    function changeVerifier(address _verifier) external onlyOwner {\\n        verifierContract = _verifier;\\n    }\\n\\n    function registerUser(\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        address _from,\\n        string memory _username\\n    ) public {\\n        (bytes memory vaultId, , ) = IMecenateVerifier(verifierContract)\\n            .sismoVerify(sismoConnectResponse, _to, _from);\\n\\n        bytes32 encryptedVaultId = keccak256(vaultId);\\n\\n        userNames[encryptedVaultId] = _username;\\n\\n        // check if user exists\\n        require(!_users.contains(encryptedVaultId), \\\"USER_ALREADY_EXISTS\\\");\\n\\n        // add user\\n        _users.add(encryptedVaultId);\\n\\n        // emit event\\n        emit UserRegistered(encryptedVaultId);\\n    }\\n\\n    function changeUserName(\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        address _from,\\n        string memory _username\\n    ) external {\\n        (bytes memory vaultId, , ) = IMecenateVerifier(verifierContract)\\n            .sismoVerify(sismoConnectResponse, _to, _from);\\n\\n        bytes32 encryptedVaultId = keccak256(vaultId);\\n\\n        require(_users.contains(encryptedVaultId), \\\"USER_ALREADY_EXISTS\\\");\\n\\n        userNames[encryptedVaultId] = _username;\\n    }\\n\\n    function getUserName(bytes32 vaultId) public view returns (string memory) {\\n        return userNames[vaultId];\\n    }\\n\\n    function getUsers() public view returns (bytes32[] memory users) {\\n        return _users.values();\\n    }\\n\\n    function getUserCount() public view returns (uint256 count) {\\n        count = _users.length();\\n    }\\n\\n    function getUserAt(uint256 index) public view returns (bytes32 user) {\\n        require(index < _users.length(), \\\"OUT_OF_RANGE\\\");\\n        user = _users.at(index);\\n    }\\n\\n    function getUserVaultIdAt(\\n        uint256 index\\n    ) public view returns (bytes32 user) {\\n        require(msg.sender == treasuryContract, \\\"ONLY_TREASURY\\\");\\n        require(index < _users.length(), \\\"OUT_OF_RANGE\\\");\\n        user = _users.at(index);\\n    }\\n\\n    function checkifUserExist(bytes32 vaultId) external view returns (bool) {\\n        return _users.contains(vaultId);\\n    }\\n\\n    // Note: startIndex is inclusive, endIndex exclusive\\n    function getPaginatedUsers(\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) public view returns (bytes32[] memory users) {\\n        require(startIndex < endIndex, \\\"START_INDEX_GREATER_THAN_END_INDEX\\\");\\n        require(endIndex <= _users.length(), \\\"OUT_OF_RANGE\\\");\\n\\n        // initialize fixed size memory array\\n        bytes32[] memory range = new bytes32[](endIndex - startIndex);\\n\\n        // Populate array with addresses in range\\n        for (uint256 i = startIndex; i < endIndex; i++) {\\n            range[i - startIndex] = _users.at(i);\\n        }\\n\\n        // return array of addresses\\n        users = range;\\n    }\\n}\\n\",\"keccak256\":\"0x2b196e314e34d82b641d597c356494b6261b905fcfb54166c3a1acfcaa4cf5e6\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604081815260048036101561001557600080fd5b600092833560e01c908162ce8e3e14610909575080630a0bcfd8146108a457806318da0011146108e057806321a11805146108a4578381632f31e8ab1461071f5750806338aad32c146106f65780635b5cf50a14610685578063715018a61461062b5780638da5cb5b14610603578063b14f2a39146105be57838163b54aae0a146103a657508063b5cb15f714610387578063c6e064ad14610349578063cf04fb9414610308578063cf5caa12146101cd578063cf695688146101a65763f2fde38b146100e157600080fd5b346101a25760203660031901126101a2576100fa610b7b565b90610103610c1d565b6001600160a01b0391821692831561015057505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b50346101a257826003193601126101a2575490516001600160a01b03909116815260209150f35b509190346103045780600319360112610304578235916024803591828510156102b7576001956102008754851115610e3e565b61020a8685610e79565b9561021487610e9c565b96610221875198896109fd565b808852610230601f1991610e9c565b019060209136838a0137805b868110610254578751806102508b82610988565b0390f35b61025d81610d54565b90546102698484610e79565b918b518310156102a55760031b1c60059190911b8a01840152600019811461029257890161023c565b5050634e487b7160e01b83525060119052fd5b634e487b7160e01b8852603287528888fd5b835162461bcd60e51b81526020818801526022818401527f53544152545f494e4445585f475245415445525f5448414e5f454e445f494e4460448201526108ab60f31b6064820152608490fd5b5080fd5b83823461030457602036600319011261030457610323610b7b565b61032b610c1d565b81546001600160a01b0319166001600160a01b039190911617905580f35b5091346103845760203660031901126103845750610376602092356103716001548210610e3e565b610d54565b91905490519160031b1c8152f35b80fd5b5050346103045781600319360112610304576020906001549051908152f35b808484346105ba576103e5916103bb36610b91565b9792909160018060a01b03865416918551978894859384936307c93c8f60e01b85528a8501610ce3565b03915afa9283156105b057849361058a575b50825160208094012091828552600684528185209086519067ffffffffffffffff8211610577575061042982546109c3565b601f8111610534575b5084601f82116001146104b157819087987f78997021e09413de1e36500ed07f9f6c73541162817fc3ea6a115e5e3d3affb998926104a6575b50508160011b916000199060031b1c19161790555b818552600283526104948186205415610d12565b61049d82610da1565b5051908152a180f35b01519050888061046b565b82875285872097601f198316885b81811061051d5750917f78997021e09413de1e36500ed07f9f6c73541162817fc3ea6a115e5e3d3affb9989991846001959410610504575b505050811b019055610480565b015160001960f88460031b161c191690558880806104f7565b838301518b556001909a01999288019288016104bf565b828752858720601f830160051c81019187841061056d575b601f0160051c01905b8181106105625750610432565b878155600101610555565b909150819061054c565b634e487b7160e01b875260419052602486fd5b6105a79193503d8086833e61059f81836109fd565b810190610c75565b505091856103f7565b81513d86823e3d90fd5b5050fd5b8334610384576020366003190112610384576105d8610b7b565b6105e0610c1d565b60018060a01b03166bffffffffffffffffffffffff60a01b600554161760055580f35b505034610304578160031936011261030457905490516001600160a01b039091168152602090f35b8334610384578060031936011261038457610644610c1d565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5082346103845760203660031901126103845750600554813591906001600160a01b031633036106c357602083610376846103716001548210610e3e565b606490602084519162461bcd60e51b8352820152600d60248201526c4f4e4c595f545245415355525960981b6044820152fd5b50346101a25760203660031901126101a257602092829135815260028452205415159051908152f35b808484346105ba57610734916103bb36610b91565b03915afa9283156105b0578493610886575b50825160208094012080855260028452610764828620541515610d12565b84526006835283209184519167ffffffffffffffff8311610873575061078a83546109c3565b601f8111610830575b5080601f83116001146107ce57508394829394926107c3575b50508160011b916000199060031b1c191617905580f35b0151905084806107ac565b90601f198316958486528286209286905b888210610818575050836001959697106107ff575b505050811b01905580f35b015160001960f88460031b161c191690558480806107f4565b806001859682949686015181550195019301906107df565b838552818520601f840160051c810191838510610869575b601f0160051c01905b81811061085e5750610793565b858155600101610851565b9091508190610848565b634e487b7160e01b855260419052602484fd5b61089b9193503d8086833e61059f81836109fd565b50509185610746565b50346101a25760203660031901126101a25781610250936108cd92358152600660205220610a35565b9051918291602083526020830190610afe565b50503461030457816003193601126103045760055490516001600160a01b039091168152602090f35b849084346101a257826003193601126101a257600180548084528185526020808501957fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf69392915b828210610973576102508787610969828c03836109fd565b5191829182610988565b84548852968701969383019390830190610951565b6020908160408183019282815285518094520193019160005b8281106109af575050505090565b8351855293810193928101926001016109a1565b90600182811c921680156109f3575b60208310146109dd57565b634e487b7160e01b600052602260045260246000fd5b91607f16916109d2565b90601f8019910116810190811067ffffffffffffffff821117610a1f57604052565b634e487b7160e01b600052604160045260246000fd5b9060405191826000825492610a49846109c3565b908184526001948581169081600014610ab85750600114610a75575b5050610a73925003836109fd565b565b9093915060005260209081600020936000915b818310610aa0575050610a7393508201013880610a65565b85548884018501529485019487945091830191610a88565b915050610a7394506020925060ff191682840152151560051b8201013880610a65565b60005b838110610aee5750506000910152565b8181015183820152602001610ade565b90602091610b1781518092818552858086019101610adb565b601f01601f1916010190565b67ffffffffffffffff8111610a1f57601f01601f191660200190565b929192610b4b82610b23565b91610b5960405193846109fd565b829481845281830111610b76578281602093846000960137010152565b600080fd5b600435906001600160a01b0382168203610b7657565b6080600319820112610b765767ffffffffffffffff90600435828111610b765781602382011215610b765781816024610bcf93600401359101610b3f565b926001600160a01b03926024358481168103610b7657936044359081168103610b765792606435918211610b765780602383011215610b7657816024610c1a93600401359101610b3f565b90565b6000546001600160a01b03163303610c3157565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90606082820312610b7657815167ffffffffffffffff8111610b7657820181601f82011215610b76578051610ca981610b23565b92610cb760405194856109fd565b81845260208284010111610b7657610cd59160208085019101610adb565b916040602083015192015190565b91610cfb604092959495606085526060850190610afe565b6001600160a01b0391821660208501529416910152565b15610d1957565b60405162461bcd60e51b8152602060048201526013602482015272555345525f414c52454144595f45584953545360681b6044820152606490fd5b600154811015610d8b5760016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60190600090565b634e487b7160e01b600052603260045260246000fd5b600081815260026020526040812054610e395760015468010000000000000000811015610e25576001810180600155811015610e115790826040927fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6015560015492815260026020522055600190565b634e487b7160e01b82526032600452602482fd5b634e487b7160e01b82526041600452602482fd5b905090565b15610e4557565b60405162461bcd60e51b815260206004820152600c60248201526b4f55545f4f465f52414e474560a01b6044820152606490fd5b91908203918211610e8657565b634e487b7160e01b600052601160045260246000fd5b67ffffffffffffffff8111610a1f5760051b6020019056fea26469706673582212207a78a44f31da2564226a69e1069df5cfdaf8aabffc782e01496ae45e4173387664736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 337,
        "contract": "contracts/registry/MecenateUsers.sol:MecenateUsers",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 15963,
        "contract": "contracts/registry/MecenateUsers.sol:MecenateUsers",
        "label": "_users",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Bytes32Set)4230_storage"
      },
      {
        "astId": 15966,
        "contract": "contracts/registry/MecenateUsers.sol:MecenateUsers",
        "label": "_metadata",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(User)11554_storage"
      },
      {
        "astId": 15972,
        "contract": "contracts/registry/MecenateUsers.sol:MecenateUsers",
        "label": "verifierContract",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 15974,
        "contract": "contracts/registry/MecenateUsers.sol:MecenateUsers",
        "label": "treasuryContract",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 15978,
        "contract": "contracts/registry/MecenateUsers.sol:MecenateUsers",
        "label": "userNames",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Bytes32Set)4230_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 4229,
            "contract": "contracts/registry/MecenateUsers.sol:MecenateUsers",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4036_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)4036_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 4031,
            "contract": "contracts/registry/MecenateUsers.sol:MecenateUsers",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4035,
            "contract": "contracts/registry/MecenateUsers.sol:MecenateUsers",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(User)11554_storage": {
        "encoding": "inplace",
        "label": "struct Structures.User",
        "members": [
          {
            "astId": 11553,
            "contract": "contracts/registry/MecenateUsers.sol:MecenateUsers",
            "label": "vaultId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}