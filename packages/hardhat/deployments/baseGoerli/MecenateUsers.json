{
  "address": "0x9F3f112e06F1685daeFe84DEBd3E98C0DC7E6C78",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "verifierContractAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "EVMAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "newPublicKey",
          "type": "bytes"
        }
      ],
      "name": "PublicKeyChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "UserRegistered",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "sismoConnectResponse",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "changeEVMAddress",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "evmAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "sismoVaultId",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "publicKey",
              "type": "bytes"
            }
          ],
          "internalType": "struct Structures.User",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "sismoConnectResponse",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "pubKey",
          "type": "bytes"
        }
      ],
      "name": "changePublicKey",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "evmAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "sismoVaultId",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "publicKey",
              "type": "bytes"
            }
          ],
          "internalType": "struct Structures.User",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "checkifUserExist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endIndex",
          "type": "uint256"
        }
      ],
      "name": "getPaginatedUsers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getUserAt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUserCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUserMetadata",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "evmAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "sismoVaultId",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "publicKey",
              "type": "bytes"
            }
          ],
          "internalType": "struct Structures.User",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUserPublicKey",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUsers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "sismoConnectResponse",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "pubKey",
          "type": "bytes"
        }
      ],
      "name": "registerUser",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "evmAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "sismoVaultId",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "publicKey",
              "type": "bytes"
            }
          ],
          "internalType": "struct Structures.User",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifierContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4934eb3bec1d94ecdd2427cb62cfd479c0fb19e631f6330a0cd12f7ca34f242d",
  "receipt": {
    "to": null,
    "from": "0x8aA5F726d9F868a21a8bd748E2f1E43bA31eb670",
    "contractAddress": "0x9F3f112e06F1685daeFe84DEBd3E98C0DC7E6C78",
    "transactionIndex": 1,
    "gasUsed": "1404933",
    "logsBloom": "0x
    "blockHash": "0x9d4869da80d789a16dc1a3a2b4d5ba7c6829c1d606f3efd9d4b7adc8847506d0",
    "transactionHash": "0x4934eb3bec1d94ecdd2427cb62cfd479c0fb19e631f6330a0cd12f7ca34f242d",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 11923974,
        "transactionHash": "0x4934eb3bec1d94ecdd2427cb62cfd479c0fb19e631f6330a0cd12f7ca34f242d",
        "address": "0x9F3f112e06F1685daeFe84DEBd3E98C0DC7E6C78",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008aa5f726d9f868a21a8bd748e2f1e43ba31eb670"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x9d4869da80d789a16dc1a3a2b4d5ba7c6829c1d606f3efd9d4b7adc8847506d0"
      }
    ],
    "blockNumber": 11923974,
    "cumulativeGasUsed": "1451786",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xAcE67077Df54247465F6928FEC271CECA0A41645"
  ],
  "numDeployments": 3,
  "solcInputHash": "d626d7b77fafbd5854c421f751c5af18",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifierContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"EVMAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newPublicKey\",\"type\":\"bytes\"}],\"name\":\"PublicKeyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"UserRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"changeEVMAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"}],\"name\":\"changePublicKey\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"checkifUserExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"getPaginatedUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserPublicKey\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"}],\"name\":\"registerUser\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifierContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/registry/MecenateUsers.sol\":\"MecenateUsers\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/interfaces/IMecenateVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IMecenateVerifier {\\n    function sismoVerify(\\n        bytes memory sismoConnectResponse\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x7b56e1acf992ac89e7dc2b0186393e2c8a68c84ab9aefff907c6efa31ab4ee15\",\"license\":\"MIT\"},\"contracts/library/Structures.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @title Structures\\n * @dev This library defines various data structures used in the Mecenate platform.\\n */\\npragma solidity 0.8.19;\\n\\nlibrary Structures {\\n    enum PostStatus {\\n        Waiting,\\n        Proposed,\\n        Accepted,\\n        Submitted,\\n        Finalized,\\n        Punished,\\n        Revealed,\\n        Renounced\\n    }\\n\\n    enum PostResult {\\n        None,\\n        Valid,\\n        Punished\\n    }\\n\\n    enum Tokens {\\n        NaN,\\n        MUSE,\\n        DAI\\n    }\\n\\n    enum PostType {\\n        Text,\\n        Image,\\n        Video,\\n        Audio,\\n        File\\n    }\\n    enum PostDuration {\\n        OneDay,\\n        ThreeDays,\\n        OneWeek,\\n        TwoWeeks,\\n        OneMonth\\n    }\\n\\n    struct PostTimestamp {\\n        PostResult postResult;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n    }\\n\\n    struct FeedSettings {\\n        uint256 punishmentRatio;\\n        uint256 postCount;\\n        address usersModuleContract;\\n        address factoryContract;\\n        address router;\\n        string version;\\n    }\\n\\n    struct FactorySettings {\\n        address treasuryContract;\\n        address usersModuleContract;\\n        address easContract;\\n        bytes32 easSchema;\\n        address museToken;\\n        address daiToken;\\n        address wethToken;\\n        address router;\\n    }\\n\\n    /**\\n     * @dev Struct representing a post on the Mecenate platform.\\n     */\\n    struct Post {\\n        User creator;\\n        PostData postdata;\\n    }\\n\\n    /**\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\n     */\\n    struct PostData {\\n        PostSettings settings;\\n        PostEscrow escrow;\\n        PostEncryptedData data;\\n    }\\n\\n    /**\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\n     */\\n    struct PostEncryptedData {\\n        bytes encryptedData;\\n        bytes encryptedKey;\\n        bytes decryptedData;\\n    }\\n\\n    /**\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettings {\\n        PostStatus status;\\n        PostType postType;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n        uint256 duration;\\n        Tokens tokenId;\\n        bytes32 postId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\n     */\\n    struct PostEscrow {\\n        address buyer;\\n        address seller;\\n        uint256 stake;\\n        uint256 payment;\\n        uint256 punishment;\\n        uint256 penalty;\\n    }\\n\\n    /**\\n     * @dev Struct representing a user on the Mecenate platform.\\n     */\\n    struct User {\\n        address evmAddress;\\n        bytes sismoVaultId;\\n        bytes publicKey;\\n    }\\n\\n    /**\\n     * @dev Struct representing a feed on the Mecenate platform.\\n     */\\n    struct Feed {\\n        address contractAddress;\\n        address owner;\\n        uint256 sellerStake;\\n        uint256 buyerStake;\\n        uint256 totalStake;\\n        uint256 postCount;\\n        uint256 paymentRequested;\\n        uint256 stakeRequested;\\n        PostStatus status;\\n        Tokens tokenId;\\n        string version;\\n        bytes32 postId;\\n    }\\n\\n    /**\\n     * @dev Struct representing a bay request on the Mecenate platform.\\n     */\\n    struct BayRequest {\\n        bytes request;\\n        uint256 payment;\\n        uint256 stake;\\n        address postAddress;\\n        bool accepted;\\n        uint256 postCount;\\n        Tokens tokenId;\\n        address buyerAddress;\\n        bytes32 postId;\\n    }\\n}\\n\",\"keccak256\":\"0xe05441a5c2a661638f860772a3cafd66c583c6d759f3486dfee1d34da6934dc4\",\"license\":\"MIT\"},\"contracts/registry/MecenateUsers.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../library/Structures.sol\\\";\\nimport \\\"../interfaces/IMecenateVerifier.sol\\\";\\n\\ncontract MecenateUsers is Ownable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    EnumerableSet.AddressSet private _users;\\n\\n    mapping(address => Structures.User) private _metadata;\\n\\n    address public verifierContract;\\n\\n    event UserRegistered(address indexed userAddress);\\n    event PublicKeyChanged(address indexed userAddress, bytes newPublicKey);\\n    event EVMAddressChanged(address indexed oldAddress, address newAddress);\\n\\n    constructor(address verifierContractAddress) {\\n        verifierContract = verifierContractAddress;\\n    }\\n\\n    function registerUser(\\n        bytes memory sismoConnectResponse,\\n        bytes memory pubKey\\n    ) external returns (Structures.User memory) {\\n        bytes memory vaultId = IMecenateVerifier(verifierContract).sismoVerify(\\n            sismoConnectResponse\\n        );\\n\\n        Structures.User memory newUser = Structures.User({\\n            evmAddress: msg.sender,\\n            sismoVaultId: vaultId,\\n            publicKey: pubKey\\n        });\\n\\n        _metadata[msg.sender] = newUser;\\n\\n        require(!_users.contains(msg.sender), \\\"USER_ALREADY_EXISTS\\\");\\n\\n        _users.add(msg.sender);\\n\\n        emit UserRegistered(msg.sender);\\n\\n        return newUser;\\n    }\\n\\n    function changePublicKey(\\n        bytes memory sismoConnectResponse,\\n        bytes memory pubKey\\n    ) external returns (Structures.User memory) {\\n        bytes memory vaultId = IMecenateVerifier(verifierContract).sismoVerify(\\n            sismoConnectResponse\\n        );\\n\\n        require(_users.contains(msg.sender), \\\"USER_DOES_NOT_EXIST\\\");\\n\\n        require(\\n            keccak256(_metadata[msg.sender].sismoVaultId) == keccak256(vaultId),\\n            \\\"VAULT_ID_MISMATCH\\\"\\n        );\\n\\n        require(\\n            keccak256(_metadata[msg.sender].publicKey) != keccak256(pubKey),\\n            \\\"SAME_PUBLIC_KEY\\\"\\n        );\\n\\n        // modify user metadata\\n        _metadata[msg.sender].sismoVaultId = vaultId;\\n\\n        _metadata[msg.sender].publicKey = pubKey;\\n\\n        emit PublicKeyChanged(msg.sender, pubKey);\\n\\n        return _metadata[msg.sender];\\n    }\\n\\n    function changeEVMAddress(\\n        bytes memory sismoConnectResponse,\\n        address newAddress\\n    ) external returns (Structures.User memory) {\\n        bytes memory vaultId = IMecenateVerifier(verifierContract).sismoVerify(\\n            sismoConnectResponse\\n        );\\n\\n        require(_users.contains(msg.sender), \\\"USER_DOES_NOT_EXIST\\\");\\n\\n        require(\\n            keccak256(_metadata[msg.sender].sismoVaultId) == keccak256(vaultId),\\n            \\\"VAULT_ID_MISMATCH\\\"\\n        );\\n\\n        require(\\n            _metadata[msg.sender].evmAddress != newAddress,\\n            \\\"SAME_EVM_ADDRESS\\\"\\n        );\\n\\n        require(!_users.contains(newAddress), \\\"USER_ALREADY_EXISTS\\\");\\n\\n        Structures.User memory newUser = Structures.User({\\n            evmAddress: newAddress,\\n            sismoVaultId: vaultId,\\n            publicKey: _metadata[msg.sender].publicKey\\n        });\\n\\n        _metadata[newAddress] = newUser;\\n        _users.add(newAddress);\\n\\n        emit EVMAddressChanged(msg.sender, newAddress);\\n\\n        // remove old user\\n        _users.remove(msg.sender);\\n        delete _metadata[msg.sender];\\n\\n        return newUser;\\n    }\\n\\n    function getUsers() public view returns (address[] memory) {\\n        return _users.values();\\n    }\\n\\n    function getUserCount() public view returns (uint256) {\\n        return _users.length();\\n    }\\n\\n    function getUserAt(uint256 index) public view returns (address) {\\n        require(index < _users.length(), \\\"OUT_OF_RANGE\\\");\\n        return _users.at(index);\\n    }\\n\\n    function checkifUserExist(\\n        address userAddress\\n    ) external view returns (bool) {\\n        return _users.contains(userAddress);\\n    }\\n\\n    function getPaginatedUsers(\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) public view returns (address[] memory) {\\n        require(startIndex < endIndex, \\\"START_INDEX_GREATER_THAN_END_INDEX\\\");\\n        require(endIndex <= _users.length(), \\\"OUT_OF_RANGE\\\");\\n\\n        address[] memory range = new address[](endIndex - startIndex);\\n        for (uint256 i = startIndex; i < endIndex; i++) {\\n            range[i - startIndex] = _users.at(i);\\n        }\\n\\n        return range;\\n    }\\n\\n    function getUserMetadata(\\n        address userAddress\\n    ) external view returns (Structures.User memory) {\\n        return _metadata[userAddress];\\n    }\\n\\n    function getUserPublicKey(\\n        address userAddress\\n    ) external view returns (bytes memory) {\\n        return _metadata[userAddress].publicKey;\\n    }\\n}\\n\",\"keccak256\":\"0xf389a0a2d61028842c19d501a2f260eeef2f1f0895147f4e1f06058236a3e849\"}},\"version\":1}",
  "bytecode": "0x6080346100a757601f61184f38819003918201601f19168301916001600160401b038311848410176100ac578084926020946040528339810103126100a757516001600160a01b0390818116908190036100a75760005460018060a01b0319903382821617600055604051933391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3600454161760045561178c90816100c38239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604081815260048036101561001557600080fd5b600092833560e01c908162ce8e3e14610fe15750806311231fe014610f8f578063470471ef14610b7b57806348990fcc14610b41578063715018a614610ae7578063899915201461072e5780638da5cb5b14610706578063b5cb15f7146106e7578063c6e064ad146106a1578063cf5caa1214610562578063cf6956881461053b578063ebc4bf8414610202578063ef2a8764146101815763f2fde38b146100bc57600080fd5b3461017d57602036600319011261017d576100d56110a4565b906100de61124c565b6001600160a01b0391821692831561012b57505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b5050346101fe5760203660031901126101fe5790816101ec60026101fa946101a76110a4565b946101b06112a4565b506001600160a01b0395861681526003602052208351946101d086611107565b81541685526101e1600182016114c7565b6020860152016114c7565b8183015251918291826111be565b0390f35b5080fd5b509190346101fe5761021336611208565b61021b6112a4565b5060018060a01b03948581541690858551809363119f099160e01b8252818061024f6020998a8884015260248301906110e2565b03915afa91821561053157869261050d575b5084519661026e88611107565b33885284880192835285880193845233875260038552858720908851166bffffffffffffffffffffffff60a01b825416178155600191828201935180519267ffffffffffffffff958685116104fa576102c78154611323565b948b8a601f97888082116104cd575b50505050898c87831160011461046a57906002958361045f575b5050600019600383901b1c191690871b1790555b01945190815194851161044c575061031c8554611323565b828111610416575b50859184116001146103ac5792806002959381936101fa9998968b946103a1575b50501b916000199060031b1c19161790555b338552526103688184205415611374565b61037133611403565b50519283927f54db7a5cb4735e1aac1f53db512d3390390bb6637bd30ad4bf9fc98667d9b9b9339180a2826111be565b015192503880610345565b8488528588209293929190601f198416895b8181106104015750916101fa9897959391856002989694106103e8575b505050811b019055610357565b015160001960f88460031b161c191690553880806103db565b828401518555938601939288019288016103be565b61043d90868a52878a208480880160051c8201928a8910610443575b0160051c019061135d565b38610324565b92508192610432565b634e487b7160e01b895260419052602488fd5b0151905038806102f0565b889291601f1983168583528d80842093905b8282106104b657505096836002981061049d575b505050811b019055610304565b015160001960f88460031b161c19169055388080610490565b838a015185558c969094019392830192018e61047c565b8284876104f19652209181860160051c8301938610610443570160051c019061135d565b8b8a38886102d6565b634e487b7160e01b8b526041845260248bfd5b61052a9192503d8088833e6105228183611139565b8101906112c4565b9038610261565b85513d88823e3d90fd5b503461017d578260031936011261017d575490516001600160a01b03909116815260209150f35b509190346101fe57806003193601126101fe57823591602480359182851015610654576001956105958754851115611703565b61059f86856115f6565b956105a98761173e565b966105b687519889611139565b8088526105c5601f199161173e565b0160209036828a0137815b8681106105e4578751806101fa8b82611060565b6105ed816113b6565b9054906105fa85846115f6565b918b518310156106425760039190911b1c6001600160a01b031660059190911b8a01830152600019811461062f5789016105d0565b5050634e487b7160e01b83525060119052fd5b634e487b7160e01b8852603287528888fd5b835162461bcd60e51b81526020818801526022818401527f53544152545f494e4445585f475245415445525f5448414e5f454e445f494e4460448201526108ab60f31b6064820152608490fd5b5091346106e45760203660031901126106e457506106ce602092356106c96001548210611703565b6113b6565b905491519160018060a01b039160031b1c168152f35b80fd5b5050346101fe57816003193601126101fe576020906001549051908152f35b5050346101fe57816003193601126101fe57905490516001600160a01b039091168152602090f35b50903461017d5761073e36611208565b936107476112a4565b5060018060a01b03938481541695828551809863119f099160e01b8252818061077b6020998a8984015260248301906110e2565b03915afa968715610add578397610ac1575b50338352600284526107a3858420541515611485565b3383526003918285526001976107d16107bf8a898820016114c7565b8781519101208251888401201461156d565b3385528386526107e56002888720016114c7565b86815191012083518785012014610a8c573385528386528887862001815167ffffffffffffffff92838211610a795781906108208454611323565b601f8111610a4b575b508990601f83116001146109e45789926109d9575b505060001982881b1c1916908b1b1790555b3385528386526002878620019183519182116109c657506108718254611323565b601f811161098d575b5085601f821160011461092057946101fa99946101ec979461090b94848b9560029a8691610915575b5060001982861b1c191690891b1790555b7f52d5d029191f3432a61da6b4abc8709ff24d4b1b39959556bba708cf8f93e5c38451878152806108e933948a8301906110e2565b0390a2338252845220928651976108ff89611107565b845416885283016114c7565b90860152016114c7565b9050830151386108a3565b82865286862090601f198316875b81811061097857509461090b948c8560029a956101fa9f9a958e986101ec9e9b10610960575b5050811b0190556108b4565b85015160001983881b60f8161c191690553880610954565b868301518455928c019291890191890161092e565b6109b690838752878720601f840160051c8101918985106109bc575b601f0160051c019061135d565b3861087a565b90915081906109a9565b634e487b7160e01b865260419052602485fd5b01519050388061083e565b848a528a8a208e94509190601f1984168b5b8d828210610a2c5750508411610a14575b505050811b019055610850565b0151600019838a1b60f8161c19169055388080610a07565b91929395968291958786015181550195019301908f95949392916109f6565b610a7390858b528b8b20601f850160051c8101918d86106109bc57601f0160051c019061135d565b38610829565b634e487b7160e01b885260418552602488fd5b865162461bcd60e51b8152808301879052600f60248201526e53414d455f5055424c49435f4b455960881b6044820152606490fd5b610ad69197503d8085833e6105228183611139565b953861078d565b85513d85823e3d90fd5b83346106e457806003193601126106e457610b0061124c565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5050346101fe5760203660031901126101fe5760209181906001600160a01b03610b696110a4565b16815260028452205415159051908152f35b50903461017d578060031936011261017d5767ffffffffffffffff8235818111610f8b57610bac9036908501611177565b6001600160a01b036024358181169290839003610f8757918693918697610bfd94610bd56112a4565b50828954168851808098819463119f099160e01b835260209e8f9084015260248301906110e2565b03915afa938415610f7d578594610f61575b5033855260028852610c25868620541515611485565b338552600392838952600194610c53610c41878a8a20016114c7565b8b815191012082518c8401201461156d565b338752848a528383898920541614610f2b5783875260028a52610c798888205415611374565b338752848a5260028888200198610ca389519a610c958c611107565b868c528c8c019384526114c7565b93898b01948552858952868c52898920908b51166bffffffffffffffffffffffff60a01b82541617815587810192519283518581116104fa57908a92918e610ceb8354611323565b96601f97888111610eff575b5081888411600114610e8e5750600295919083610e83575b5050600019828c1b1c1916908b1b1790555b01935190815193841161044c5750610d398454611323565b8b838211610e56575b50508a918311600114610de7579360029693838997946101fa9d94610dcc98610dd29c92610ddc575b505060001982871b1c191690861b1790555b610d8681611403565b5088519081527f524387b6c7262c90f5781025bfe7e5af5a981ee878053ffa078b842d32c8ad84823392a2610dba33611619565b503385525285832092835582016115ad565b016115ad565b51918291826111be565b015190503880610d6b565b8388528a88209190601f198416895b818110610e41575097846101fa9d94610dcc9894839894610dd29d9b9860029d10610e29575b505050811b019055610d7d565b015160001983891b60f8161c19169055388080610e1c565b82840151855593890193928d01928d01610df6565b610e7c91868b5284828c209181880160051c8301938810610443570160051c019061135d565b388b610d42565b015190503880610d0f565b84875280872091968e949391601f19851691905b828210610edb575050968360029810610ec3575b505050811b019055610d21565b0151600019838e1b60f8161c19169055388080610eb6565b83968a958294958394989a9b9c0151815501960194018f9593989796949291610ea2565b610f25908588528388208a80870160051c820192868810610443570160051c019061135d565b38610cf7565b875162461bcd60e51b8152808a018b9052601060248201526f53414d455f45564d5f4144445245535360801b6044820152606490fd5b610f769194503d8087833e6105228183611139565b9238610c0f565b86513d87823e3d90fd5b8680fd5b8480fd5b5050346101fe5760203660031901126101fe576101fa91610fce9060029083906001600160a01b03610fbf6110a4565b168152600360205220016114c7565b90519182916020835260208301906110e2565b8490843461017d578260031936011261017d57600180548084528185526020808501957fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf69392915b82821061104b576101fa8787611041828c0383611139565b5191829182611060565b84548852968701969383019390830190611029565b6020908160408183019282815285518094520193019160005b828110611087575050505090565b83516001600160a01b031685529381019392810192600101611079565b600435906001600160a01b03821682036110ba57565b600080fd5b60005b8381106110d25750506000910152565b81810151838201526020016110c2565b906020916110fb815180928185528580860191016110bf565b601f01601f1916010190565b6060810190811067ffffffffffffffff82111761112357604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761112357604052565b67ffffffffffffffff811161112357601f01601f191660200190565b81601f820112156110ba5780359061118e8261115b565b9261119c6040519485611139565b828452602083830101116110ba57816000926020809301838601378301015290565b90611205916020815260018060a01b03825116602082015260406111f0602084015160608385015260808401906110e2565b920151906060601f19828503019101526110e2565b90565b9060406003198301126110ba5767ffffffffffffffff6004358181116110ba578361123591600401611177565b926024359182116110ba5761120591600401611177565b6000546001600160a01b0316330361126057565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b604051906112b182611107565b6060604083600081528260208201520152565b6020818303126110ba5780519067ffffffffffffffff82116110ba570181601f820112156110ba5780516112f78161115b565b926113056040519485611139565b818452602082840101116110ba5761120591602080850191016110bf565b90600182811c92168015611353575b602083101461133d57565b634e487b7160e01b600052602260045260246000fd5b91607f1691611332565b818110611368575050565b6000815560010161135d565b1561137b57565b60405162461bcd60e51b8152602060048201526013602482015272555345525f414c52454144595f45584953545360681b6044820152606490fd5b6001548110156113ed5760016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60190600090565b634e487b7160e01b600052603260045260246000fd5b600081815260026020526040812054611480576001546801000000000000000081101561146c579082611458611441846001604096016001556113b6565b819391549060031b91821b91600019901b19161790565b905560015492815260026020522055600190565b634e487b7160e01b82526041600452602482fd5b905090565b1561148c57565b60405162461bcd60e51b81526020600482015260136024820152721554d15497d113d154d7d393d517d1561254d5606a1b6044820152606490fd5b90604051918260008254926114db84611323565b90818452600194858116908160001461154a5750600114611507575b505061150592500383611139565b565b9093915060005260209081600020936000915b818310611532575050611505935082010138806114f7565b8554888401850152948501948794509183019161151a565b91505061150594506020925060ff191682840152151560051b82010138806114f7565b1561157457565b60405162461bcd60e51b81526020600482015260116024820152700ac82aa98a8be9288be9a92a69a82a8869607b1b6044820152606490fd5b6115b78154611323565b90816115c1575050565b81601f600093116001146115d3575055565b9080839182526115f2601f60208420940160051c84016001850161135d565b5555565b9190820391821161160357565b634e487b7160e01b600052601160045260246000fd5b60008181526002602052604081205490919080156116fe57600019908082018181116116ea57600154908382019182116116d6578082036116a2575b505050600154801561168e5781019061166d826113b6565b909182549160031b1b19169055600155815260026020526040812055600190565b634e487b7160e01b84526031600452602484fd5b6116c06116b1611441936113b6565b90549060031b1c9283926113b6565b9055845260026020526040842055388080611655565b634e487b7160e01b86526011600452602486fd5b634e487b7160e01b85526011600452602485fd5b505090565b1561170a57565b60405162461bcd60e51b815260206004820152600c60248201526b4f55545f4f465f52414e474560a01b6044820152606490fd5b67ffffffffffffffff81116111235760051b6020019056fea2646970667358221220438b59b46dca186d402c4bba80ec01a36d2b10e40483137e1302d57a334c9eb764736f6c63430008130033",
  "deployedBytecode": "0x6080604081815260048036101561001557600080fd5b600092833560e01c908162ce8e3e14610fe15750806311231fe014610f8f578063470471ef14610b7b57806348990fcc14610b41578063715018a614610ae7578063899915201461072e5780638da5cb5b14610706578063b5cb15f7146106e7578063c6e064ad146106a1578063cf5caa1214610562578063cf6956881461053b578063ebc4bf8414610202578063ef2a8764146101815763f2fde38b146100bc57600080fd5b3461017d57602036600319011261017d576100d56110a4565b906100de61124c565b6001600160a01b0391821692831561012b57505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b5050346101fe5760203660031901126101fe5790816101ec60026101fa946101a76110a4565b946101b06112a4565b506001600160a01b0395861681526003602052208351946101d086611107565b81541685526101e1600182016114c7565b6020860152016114c7565b8183015251918291826111be565b0390f35b5080fd5b509190346101fe5761021336611208565b61021b6112a4565b5060018060a01b03948581541690858551809363119f099160e01b8252818061024f6020998a8884015260248301906110e2565b03915afa91821561053157869261050d575b5084519661026e88611107565b33885284880192835285880193845233875260038552858720908851166bffffffffffffffffffffffff60a01b825416178155600191828201935180519267ffffffffffffffff958685116104fa576102c78154611323565b948b8a601f97888082116104cd575b50505050898c87831160011461046a57906002958361045f575b5050600019600383901b1c191690871b1790555b01945190815194851161044c575061031c8554611323565b828111610416575b50859184116001146103ac5792806002959381936101fa9998968b946103a1575b50501b916000199060031b1c19161790555b338552526103688184205415611374565b61037133611403565b50519283927f54db7a5cb4735e1aac1f53db512d3390390bb6637bd30ad4bf9fc98667d9b9b9339180a2826111be565b015192503880610345565b8488528588209293929190601f198416895b8181106104015750916101fa9897959391856002989694106103e8575b505050811b019055610357565b015160001960f88460031b161c191690553880806103db565b828401518555938601939288019288016103be565b61043d90868a52878a208480880160051c8201928a8910610443575b0160051c019061135d565b38610324565b92508192610432565b634e487b7160e01b895260419052602488fd5b0151905038806102f0565b889291601f1983168583528d80842093905b8282106104b657505096836002981061049d575b505050811b019055610304565b015160001960f88460031b161c19169055388080610490565b838a015185558c969094019392830192018e61047c565b8284876104f19652209181860160051c8301938610610443570160051c019061135d565b8b8a38886102d6565b634e487b7160e01b8b526041845260248bfd5b61052a9192503d8088833e6105228183611139565b8101906112c4565b9038610261565b85513d88823e3d90fd5b503461017d578260031936011261017d575490516001600160a01b03909116815260209150f35b509190346101fe57806003193601126101fe57823591602480359182851015610654576001956105958754851115611703565b61059f86856115f6565b956105a98761173e565b966105b687519889611139565b8088526105c5601f199161173e565b0160209036828a0137815b8681106105e4578751806101fa8b82611060565b6105ed816113b6565b9054906105fa85846115f6565b918b518310156106425760039190911b1c6001600160a01b031660059190911b8a01830152600019811461062f5789016105d0565b5050634e487b7160e01b83525060119052fd5b634e487b7160e01b8852603287528888fd5b835162461bcd60e51b81526020818801526022818401527f53544152545f494e4445585f475245415445525f5448414e5f454e445f494e4460448201526108ab60f31b6064820152608490fd5b5091346106e45760203660031901126106e457506106ce602092356106c96001548210611703565b6113b6565b905491519160018060a01b039160031b1c168152f35b80fd5b5050346101fe57816003193601126101fe576020906001549051908152f35b5050346101fe57816003193601126101fe57905490516001600160a01b039091168152602090f35b50903461017d5761073e36611208565b936107476112a4565b5060018060a01b03938481541695828551809863119f099160e01b8252818061077b6020998a8984015260248301906110e2565b03915afa968715610add578397610ac1575b50338352600284526107a3858420541515611485565b3383526003918285526001976107d16107bf8a898820016114c7565b8781519101208251888401201461156d565b3385528386526107e56002888720016114c7565b86815191012083518785012014610a8c573385528386528887862001815167ffffffffffffffff92838211610a795781906108208454611323565b601f8111610a4b575b508990601f83116001146109e45789926109d9575b505060001982881b1c1916908b1b1790555b3385528386526002878620019183519182116109c657506108718254611323565b601f811161098d575b5085601f821160011461092057946101fa99946101ec979461090b94848b9560029a8691610915575b5060001982861b1c191690891b1790555b7f52d5d029191f3432a61da6b4abc8709ff24d4b1b39959556bba708cf8f93e5c38451878152806108e933948a8301906110e2565b0390a2338252845220928651976108ff89611107565b845416885283016114c7565b90860152016114c7565b9050830151386108a3565b82865286862090601f198316875b81811061097857509461090b948c8560029a956101fa9f9a958e986101ec9e9b10610960575b5050811b0190556108b4565b85015160001983881b60f8161c191690553880610954565b868301518455928c019291890191890161092e565b6109b690838752878720601f840160051c8101918985106109bc575b601f0160051c019061135d565b3861087a565b90915081906109a9565b634e487b7160e01b865260419052602485fd5b01519050388061083e565b848a528a8a208e94509190601f1984168b5b8d828210610a2c5750508411610a14575b505050811b019055610850565b0151600019838a1b60f8161c19169055388080610a07565b91929395968291958786015181550195019301908f95949392916109f6565b610a7390858b528b8b20601f850160051c8101918d86106109bc57601f0160051c019061135d565b38610829565b634e487b7160e01b885260418552602488fd5b865162461bcd60e51b8152808301879052600f60248201526e53414d455f5055424c49435f4b455960881b6044820152606490fd5b610ad69197503d8085833e6105228183611139565b953861078d565b85513d85823e3d90fd5b83346106e457806003193601126106e457610b0061124c565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5050346101fe5760203660031901126101fe5760209181906001600160a01b03610b696110a4565b16815260028452205415159051908152f35b50903461017d578060031936011261017d5767ffffffffffffffff8235818111610f8b57610bac9036908501611177565b6001600160a01b036024358181169290839003610f8757918693918697610bfd94610bd56112a4565b50828954168851808098819463119f099160e01b835260209e8f9084015260248301906110e2565b03915afa938415610f7d578594610f61575b5033855260028852610c25868620541515611485565b338552600392838952600194610c53610c41878a8a20016114c7565b8b815191012082518c8401201461156d565b338752848a528383898920541614610f2b5783875260028a52610c798888205415611374565b338752848a5260028888200198610ca389519a610c958c611107565b868c528c8c019384526114c7565b93898b01948552858952868c52898920908b51166bffffffffffffffffffffffff60a01b82541617815587810192519283518581116104fa57908a92918e610ceb8354611323565b96601f97888111610eff575b5081888411600114610e8e5750600295919083610e83575b5050600019828c1b1c1916908b1b1790555b01935190815193841161044c5750610d398454611323565b8b838211610e56575b50508a918311600114610de7579360029693838997946101fa9d94610dcc98610dd29c92610ddc575b505060001982871b1c191690861b1790555b610d8681611403565b5088519081527f524387b6c7262c90f5781025bfe7e5af5a981ee878053ffa078b842d32c8ad84823392a2610dba33611619565b503385525285832092835582016115ad565b016115ad565b51918291826111be565b015190503880610d6b565b8388528a88209190601f198416895b818110610e41575097846101fa9d94610dcc9894839894610dd29d9b9860029d10610e29575b505050811b019055610d7d565b015160001983891b60f8161c19169055388080610e1c565b82840151855593890193928d01928d01610df6565b610e7c91868b5284828c209181880160051c8301938810610443570160051c019061135d565b388b610d42565b015190503880610d0f565b84875280872091968e949391601f19851691905b828210610edb575050968360029810610ec3575b505050811b019055610d21565b0151600019838e1b60f8161c19169055388080610eb6565b83968a958294958394989a9b9c0151815501960194018f9593989796949291610ea2565b610f25908588528388208a80870160051c820192868810610443570160051c019061135d565b38610cf7565b875162461bcd60e51b8152808a018b9052601060248201526f53414d455f45564d5f4144445245535360801b6044820152606490fd5b610f769194503d8087833e6105228183611139565b9238610c0f565b86513d87823e3d90fd5b8680fd5b8480fd5b5050346101fe5760203660031901126101fe576101fa91610fce9060029083906001600160a01b03610fbf6110a4565b168152600360205220016114c7565b90519182916020835260208301906110e2565b8490843461017d578260031936011261017d57600180548084528185526020808501957fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf69392915b82821061104b576101fa8787611041828c0383611139565b5191829182611060565b84548852968701969383019390830190611029565b6020908160408183019282815285518094520193019160005b828110611087575050505090565b83516001600160a01b031685529381019392810192600101611079565b600435906001600160a01b03821682036110ba57565b600080fd5b60005b8381106110d25750506000910152565b81810151838201526020016110c2565b906020916110fb815180928185528580860191016110bf565b601f01601f1916010190565b6060810190811067ffffffffffffffff82111761112357604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761112357604052565b67ffffffffffffffff811161112357601f01601f191660200190565b81601f820112156110ba5780359061118e8261115b565b9261119c6040519485611139565b828452602083830101116110ba57816000926020809301838601378301015290565b90611205916020815260018060a01b03825116602082015260406111f0602084015160608385015260808401906110e2565b920151906060601f19828503019101526110e2565b90565b9060406003198301126110ba5767ffffffffffffffff6004358181116110ba578361123591600401611177565b926024359182116110ba5761120591600401611177565b6000546001600160a01b0316330361126057565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b604051906112b182611107565b6060604083600081528260208201520152565b6020818303126110ba5780519067ffffffffffffffff82116110ba570181601f820112156110ba5780516112f78161115b565b926113056040519485611139565b818452602082840101116110ba5761120591602080850191016110bf565b90600182811c92168015611353575b602083101461133d57565b634e487b7160e01b600052602260045260246000fd5b91607f1691611332565b818110611368575050565b6000815560010161135d565b1561137b57565b60405162461bcd60e51b8152602060048201526013602482015272555345525f414c52454144595f45584953545360681b6044820152606490fd5b6001548110156113ed5760016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60190600090565b634e487b7160e01b600052603260045260246000fd5b600081815260026020526040812054611480576001546801000000000000000081101561146c579082611458611441846001604096016001556113b6565b819391549060031b91821b91600019901b19161790565b905560015492815260026020522055600190565b634e487b7160e01b82526041600452602482fd5b905090565b1561148c57565b60405162461bcd60e51b81526020600482015260136024820152721554d15497d113d154d7d393d517d1561254d5606a1b6044820152606490fd5b90604051918260008254926114db84611323565b90818452600194858116908160001461154a5750600114611507575b505061150592500383611139565b565b9093915060005260209081600020936000915b818310611532575050611505935082010138806114f7565b8554888401850152948501948794509183019161151a565b91505061150594506020925060ff191682840152151560051b82010138806114f7565b1561157457565b60405162461bcd60e51b81526020600482015260116024820152700ac82aa98a8be9288be9a92a69a82a8869607b1b6044820152606490fd5b6115b78154611323565b90816115c1575050565b81601f600093116001146115d3575055565b9080839182526115f2601f60208420940160051c84016001850161135d565b5555565b9190820391821161160357565b634e487b7160e01b600052601160045260246000fd5b60008181526002602052604081205490919080156116fe57600019908082018181116116ea57600154908382019182116116d6578082036116a2575b505050600154801561168e5781019061166d826113b6565b909182549160031b1b19169055600155815260026020526040812055600190565b634e487b7160e01b84526031600452602484fd5b6116c06116b1611441936113b6565b90549060031b1c9283926113b6565b9055845260026020526040842055388080611655565b634e487b7160e01b86526011600452602486fd5b634e487b7160e01b85526011600452602485fd5b505090565b1561170a57565b60405162461bcd60e51b815260206004820152600c60248201526b4f55545f4f465f52414e474560a01b6044820152606490fd5b67ffffffffffffffff81116111235760051b6020019056fea2646970667358221220438b59b46dca186d402c4bba80ec01a36d2b10e40483137e1302d57a334c9eb764736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2573,
        "contract": "contracts/registry/MecenateUsers.sol:MecenateUsers",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 23900,
        "contract": "contracts/registry/MecenateUsers.sol:MecenateUsers",
        "label": "_users",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(AddressSet)10339_storage"
      },
      {
        "astId": 23905,
        "contract": "contracts/registry/MecenateUsers.sol:MecenateUsers",
        "label": "_metadata",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(User)19563_storage)"
      },
      {
        "astId": 23907,
        "contract": "contracts/registry/MecenateUsers.sol:MecenateUsers",
        "label": "verifierContract",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(User)19563_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Structures.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)19563_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)10339_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 10338,
            "contract": "contracts/registry/MecenateUsers.sol:MecenateUsers",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)10024_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)10024_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 10019,
            "contract": "contracts/registry/MecenateUsers.sol:MecenateUsers",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 10023,
            "contract": "contracts/registry/MecenateUsers.sol:MecenateUsers",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(User)19563_storage": {
        "encoding": "inplace",
        "label": "struct Structures.User",
        "members": [
          {
            "astId": 19558,
            "contract": "contracts/registry/MecenateUsers.sol:MecenateUsers",
            "label": "evmAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 19560,
            "contract": "contracts/registry/MecenateUsers.sol:MecenateUsers",
            "label": "sismoVaultId",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes_storage"
          },
          {
            "astId": 19562,
            "contract": "contracts/registry/MecenateUsers.sol:MecenateUsers",
            "label": "publicKey",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}