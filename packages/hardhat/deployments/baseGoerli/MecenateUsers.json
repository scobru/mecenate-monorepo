{
  "address": "0x69923B1551cd54F9084F0cf75b75DB8D7641bB33",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "verifierContractAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "UserRegistered",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "checkifUserExist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endIndex",
          "type": "uint256"
        }
      ],
      "name": "getPaginatedUsers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getUserAt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUserCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUserMetadata",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "evmAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "sismoVaultId",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "publicKey",
              "type": "bytes"
            }
          ],
          "internalType": "struct Structures.User",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUserPublicKey",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUsers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "metadata",
          "type": "bytes"
        }
      ],
      "name": "registerUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifierContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9186cedde816bd2191f179dd227096874ab95a1cd7fef7d6eba8f34f73c25e42",
  "receipt": {
    "to": null,
    "from": "0x8aA5F726d9F868a21a8bd748E2f1E43bA31eb670",
    "contractAddress": "0x69923B1551cd54F9084F0cf75b75DB8D7641bB33",
    "transactionIndex": 1,
    "gasUsed": "1098346",
    "logsBloom": "0x
    "blockHash": "0x8ea4c8dc3181590bfeab3ca8fcef006b9f9d27ec65745478cf7504ccd0d94e46",
    "transactionHash": "0x9186cedde816bd2191f179dd227096874ab95a1cd7fef7d6eba8f34f73c25e42",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 11181396,
        "transactionHash": "0x9186cedde816bd2191f179dd227096874ab95a1cd7fef7d6eba8f34f73c25e42",
        "address": "0x69923B1551cd54F9084F0cf75b75DB8D7641bB33",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008aa5f726d9f868a21a8bd748e2f1e43ba31eb670"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x8ea4c8dc3181590bfeab3ca8fcef006b9f9d27ec65745478cf7504ccd0d94e46"
      }
    ],
    "blockNumber": 11181396,
    "cumulativeGasUsed": "1162299",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x88528D12EA8BE35f446282745048DDC81ba51914"
  ],
  "numDeployments": 11,
  "solcInputHash": "1df1e5248ce6cfac956a4b387ea3e358",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifierContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"UserRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"checkifUserExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"getPaginatedUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserPublicKey\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"registerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifierContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/registry/MecenateUsers.sol\":\"MecenateUsers\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/interfaces/IMecenateVerifier.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\ninterface IMecenateVerifier {\\n    function sismoVerify(\\n        bytes memory sismoConnectResponse\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x80a42989301760af1979c98162a585d095eb4adca49e90db73276cd47a14347a\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\n * @title Structures\\n * @dev This library defines various data structures used in the Mecenate platform.\\n */\\npragma solidity 0.8.19;\\n\\nlibrary Structures {\\n    enum PostStatus {\\n        Waiting,\\n        Proposed,\\n        Accepted,\\n        Submitted,\\n        Finalized,\\n        Punished,\\n        Revealed,\\n        Renounced\\n    }\\n\\n    enum Tokens {\\n        NaN,\\n        MUSE,\\n        DAI\\n    }\\n\\n    enum PostType {\\n        Text,\\n        Image,\\n        Video,\\n        Audio,\\n        File\\n    }\\n    enum PostDuration {\\n        OneDay,\\n        ThreeDays,\\n        OneWeek,\\n        TwoWeeks,\\n        OneMonth\\n    }\\n\\n    struct FeedSettings {\\n        uint256 punishmentRatio;\\n        uint256 postCount;\\n        address usersModuleContract;\\n        address factoryContract;\\n        address router;\\n        string version;\\n    }\\n\\n    struct FactorySettings {\\n        address treasuryContract;\\n        address usersModuleContract;\\n        address easContract;\\n        bytes32 easSchema;\\n        address museToken;\\n        address daiToken;\\n        address wethToken;\\n        address router;\\n    }\\n\\n    /**\\n     * @dev Struct representing a post on the Mecenate platform.\\n     */\\n    struct Post {\\n        User creator;\\n        PostData postdata;\\n    }\\n\\n    /**\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\n     */\\n    struct PostData {\\n        PostSettings settings;\\n        PostEscrow escrow;\\n        PostEncryptedData data;\\n    }\\n\\n    /**\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\n     */\\n    struct PostEncryptedData {\\n        bytes encryptedData;\\n        bytes encryptedKey;\\n        bytes decryptedData;\\n    }\\n\\n    /**\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettings {\\n        PostStatus status;\\n        PostType postType;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n        uint256 duration;\\n        Tokens tokenId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the private settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettingPrivate {\\n        address buyerAddress;\\n        address sellerAddress;\\n    }\\n\\n    /**\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\n     */\\n    struct PostEscrow {\\n        uint256 stake;\\n        uint256 payment;\\n        uint256 punishment;\\n        uint256 penalty;\\n    }\\n\\n    /**\\n     * @dev Struct representing a user on the Mecenate platform.\\n     */\\n    struct User {\\n        address evmAddress;\\n        bytes sismoVaultId;\\n        bytes publicKey;\\n    }\\n\\n    /**\\n     * @dev Struct representing a feed on the Mecenate platform.\\n     */\\n    struct Feed {\\n        address contractAddress;\\n        address owner;\\n        uint256 sellerStake;\\n        uint256 buyerStake;\\n        uint256 totalStake;\\n        uint256 postCount;\\n        uint256 paymentRequested;\\n        uint256 stakeRequested;\\n        PostStatus status;\\n        Tokens tokenId;\\n        string version;\\n    }\\n\\n    /**\\n     * @dev Struct representing a bay request on the Mecenate platform.\\n     */\\n    struct BayRequest {\\n        bytes request;\\n        uint256 payment;\\n        uint256 stake;\\n        address postAddress;\\n        bool accepted;\\n        uint256 postCount;\\n        Tokens tokenId;\\n        address buyerAddress;\\n    }\\n}\\n\",\"keccak256\":\"0xba5512854a95a55b3d6c7940cd22516d7d7f1d464263de250dfea4750de44152\"},\"contracts/registry/MecenateUsers.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../library/Structures.sol\\\";\\nimport \\\"../interfaces/IMecenateVerifier.sol\\\";\\n\\ncontract MecenateUsers is Ownable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    EnumerableSet.AddressSet private _users;\\n\\n    mapping(address => Structures.User) private _metadata;\\n\\n    address public verifierContract;\\n\\n    event UserRegistered(address indexed userAddress);\\n\\n    constructor(address verifierContractAddress) {\\n        verifierContract = verifierContractAddress;\\n    }\\n\\n    function registerUser(bytes memory metadata) public {\\n        (bytes memory sismoConnectResponse, bytes memory publicKey) = abi\\n            .decode(metadata, (bytes, bytes));\\n\\n        bytes memory vaultId = IMecenateVerifier(verifierContract).sismoVerify(\\n            sismoConnectResponse\\n        );\\n\\n        Structures.User memory newUser = Structures.User({\\n            evmAddress: msg.sender,\\n            sismoVaultId: vaultId,\\n            publicKey: publicKey\\n        });\\n\\n        _metadata[msg.sender] = newUser;\\n\\n        require(!_users.contains(msg.sender), \\\"USER_ALREADY_EXISTS\\\");\\n\\n        _users.add(msg.sender);\\n\\n        emit UserRegistered(msg.sender);\\n    }\\n\\n    function getUsers() public view returns (address[] memory) {\\n        return _users.values();\\n    }\\n\\n    function getUserCount() public view returns (uint256) {\\n        return _users.length();\\n    }\\n\\n    function getUserAt(uint256 index) public view returns (address) {\\n        require(index < _users.length(), \\\"OUT_OF_RANGE\\\");\\n        return _users.at(index);\\n    }\\n\\n    function checkifUserExist(\\n        address userAddress\\n    ) external view returns (bool) {\\n        return _users.contains(userAddress);\\n    }\\n\\n    function getPaginatedUsers(\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) public view returns (address[] memory) {\\n        require(startIndex < endIndex, \\\"START_INDEX_GREATER_THAN_END_INDEX\\\");\\n        require(endIndex <= _users.length(), \\\"OUT_OF_RANGE\\\");\\n\\n        address[] memory range = new address[](endIndex - startIndex);\\n        for (uint256 i = startIndex; i < endIndex; i++) {\\n            range[i - startIndex] = _users.at(i);\\n        }\\n\\n        return range;\\n    }\\n\\n    function getUserMetadata(\\n        address userAddress\\n    ) external view returns (Structures.User memory) {\\n        return _metadata[userAddress];\\n    }\\n\\n    function getUserPublicKey(\\n        address userAddress\\n    ) external view returns (bytes memory) {\\n        return _metadata[userAddress].publicKey;\\n    }\\n}\\n\",\"keccak256\":\"0xce6da84f754fdbe11b57d623cc3514977f192a2360dc01a07f4c852ff00351f0\"}},\"version\":1}",
  "bytecode": "0x6080346100a757601f6112e538819003918201601f19168301916001600160401b038311848410176100ac578084926020946040528339810103126100a757516001600160a01b0390818116908190036100a75760005460018060a01b0319903382821617600055604051933391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3600454161760045561122290816100c38239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608060408181526004908136101561001657600080fd5b600092833560e01c908162ce8e3e14610c21575080630a38178c146106a457806311231fe01461064657806348990fcc146105fe578063715018a6146105805780638da5cb5b1461054d578063b5cb15f71461052e578063c6e064ad146104dd578063cf5caa12146102f2578063cf695688146102bb578063ef2a8764146101c75763f2fde38b146100a757600080fd5b346101c35760206003193601126101c35781359173ffffffffffffffffffffffffffffffffffffffff918284168094036101bf576100e3610e1d565b831561013c5750508254827fffffffffffffffffffffffff00000000000000000000000000000000000000008216178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b90602060849251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8480fd5b8280fd5b5090346101c357602090816003193601126102b757359273ffffffffffffffffffffffffffffffffffffffff938481168091036102b357836102af939261027e92606083805161021681610cf1565b848152828882015201528152600384522093606081519561023687610cf1565b87815416875261025a600261024d60018401611127565b92878a0193845201611127565b948388019586528351988998828a5251169088015251918601526080850190610dda565b90517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0848303016060850152610dda565b0390f35b5080fd5b8380fd5b5082346102ef57806003193601126102ef575073ffffffffffffffffffffffffffffffffffffffff60209254169051908152f35b80fd5b508290346102b357806003193601126102b35782359160248035918285101561045b57600195610325875485111561106e565b61032f86856110d3565b957fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061037261035d8961110f565b9861036a89519a8b610d3c565b808a5261110f565b019060209136838a0137805b868110610392578751806102af8b82610ca0565b61039b81610f39565b90546103a784846110d3565b918b5183101561043057859173ffffffffffffffffffffffffffffffffffffffff9160031b1c169160051b8b0101527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461040457890161037e565b5050506011907f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b88886032897f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b60848660228460208851937f08c379a00000000000000000000000000000000000000000000000000000000085528401528201527f53544152545f494e4445585f475245415445525f5448414e5f454e445f494e4460448201527f45580000000000000000000000000000000000000000000000000000000000006064820152fd5b5082346102ef5760206003193601126102ef575073ffffffffffffffffffffffffffffffffffffffff61051f6020933561051a600154821061106e565b610f39565b92905490519260031b1c168152f35b8382346102b357816003193601126102b3576020906001549051908152f35b8382346102b357816003193601126102b35773ffffffffffffffffffffffffffffffffffffffff60209254169051908152f35b83346102ef57806003193601126102ef57610599610e1d565b8073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5090346101c35760206003193601126101c3573573ffffffffffffffffffffffffffffffffffffffff81168091036101c3578282916020945260028452205415159051908152f35b5090346101c35760206003193601126101c3573573ffffffffffffffffffffffffffffffffffffffff81168091036101c35760028284610691936102af965260036020522001611127565b9051918291602083526020830190610dda565b50346101c357602090816003193601126102b757823567ffffffffffffffff808211610c1d5736602383011215610c1d578185013591866106e484610d7d565b916106f186519384610d3c565b8483528683019436602482840101116101c35780602489930187378301015280518101928482878601950312610c195751828111610c1957838661073792840101610e9c565b928482015191838311610c0b5761075092018601610e9c565b916107aa8773ffffffffffffffffffffffffffffffffffffffff9283895416888a8951958694859384937f119f09910000000000000000000000000000000000000000000000000000000085528401526024830190610dda565b03915afa908115610c0f578891610bd2575b508451916107c983610cf1565b338352868301918252858301948552338952600387528589209251167fffffffffffffffffffffffff0000000000000000000000000000000000000000835416178255600191828101915190815192858411610ba6576108298154610ee6565b93601f94858111610b61575b50898c868311600114610ac2579060029583610ab7575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82881b9260031b1c19161790555b0193518051938411610a8b576108938554610ee6565b828111610a48575b50869184116001146109aa57889184918261097f575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff91921b9260031b1c19161790555b338452600282528084205461092457836108fb33610f9f565b50337f54db7a5cb4735e1aac1f53db512d3390390bb6637bd30ad4bf9fc98667d9b9b98280a280f35b6064935051917f08c379a0000000000000000000000000000000000000000000000000000000008352820152601360248201527f555345525f414c52454144595f455849535453000000000000000000000000006044820152fd5b015191507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff386108b1565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08493941691858a5283888b20938b5b8a88838310610a3157505050106109fa575b505050811b0190556108e2565b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c191690553880806109ed565b8686015188559096019594850194879350016109db565b858a52878a208380870160051c8201928a8810610a82575b0160051c019084905b828110610a7757505061089b565b8b8155018490610a69565b92508192610a60565b60248960418a7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b01519050388061084c565b82917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08994168583528d80842093905b828210610b4a575050968360029810610b13575b505050811b01905561087d565b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c19169055388080610b06565b838a015185558b969094019392830192018e610af2565b828d528a8d208680840160051c8201928d8510610b9d575b0160051c019087908e5b838210610b9257505050610835565b81550187908e610b83565b92508192610b79565b60248b60418c7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b90503d8089833e610be38183610d3c565b81018682820312610c0b578151848111610c0757610c019201610e9c565b386107bc565b8980fd5b8880fd5b85513d8a823e3d90fd5b8780fd5b8580fd5b925050346101c357826003193601126101c357600180548084528185526020808501957fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf69392915b828210610c8b576102af8787610c81828c0383610d3c565b5191829182610ca0565b84548852968701969383019390830190610c69565b6020908160408183019282815285518094520193019160005b828110610cc7575050505090565b835173ffffffffffffffffffffffffffffffffffffffff1685529381019392810192600101610cb9565b6060810190811067ffffffffffffffff821117610d0d57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610d0d57604052565b67ffffffffffffffff8111610d0d57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b838110610dca5750506000910152565b8181015183820152602001610dba565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602093610e1681518092818752878088019101610db7565b0116010190565b73ffffffffffffffffffffffffffffffffffffffff600054163303610e3e57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b81601f82011215610ee1578051610eb281610d7d565b92610ec06040519485610d3c565b81845260208284010111610ee157610ede9160208085019101610db7565b90565b600080fd5b90600182811c92168015610f2f575b6020831014610f0057565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f1691610ef5565b600154811015610f705760016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60190600090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081815260026020526040812054611069576001546801000000000000000081101561103c57600181018060015581101561100f5790826040927fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6015560015492815260026020522055600190565b6024827f4e487b710000000000000000000000000000000000000000000000000000000081526032600452fd5b6024827f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b905090565b1561107557565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4f55545f4f465f52414e474500000000000000000000000000000000000000006044820152fd5b919082039182116110e057565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b67ffffffffffffffff8111610d0d5760051b60200190565b906040519182600082549261113b84610ee6565b9081845260019485811690816000146111aa5750600114611167575b505061116592500383610d3c565b565b9093915060005260209081600020936000915b81831061119257505061116593508201013880611157565b8554888401850152948501948794509183019161117a565b90506111659550602093507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b820101388061115756fea264697066735822122053c08878bdd4ff3c666e910eb6b9af3ad4b1d5efb73761b2fb42d71fc1da801e64736f6c63430008130033",
  "deployedBytecode": "0x608060408181526004908136101561001657600080fd5b600092833560e01c908162ce8e3e14610c21575080630a38178c146106a457806311231fe01461064657806348990fcc146105fe578063715018a6146105805780638da5cb5b1461054d578063b5cb15f71461052e578063c6e064ad146104dd578063cf5caa12146102f2578063cf695688146102bb578063ef2a8764146101c75763f2fde38b146100a757600080fd5b346101c35760206003193601126101c35781359173ffffffffffffffffffffffffffffffffffffffff918284168094036101bf576100e3610e1d565b831561013c5750508254827fffffffffffffffffffffffff00000000000000000000000000000000000000008216178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b90602060849251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8480fd5b8280fd5b5090346101c357602090816003193601126102b757359273ffffffffffffffffffffffffffffffffffffffff938481168091036102b357836102af939261027e92606083805161021681610cf1565b848152828882015201528152600384522093606081519561023687610cf1565b87815416875261025a600261024d60018401611127565b92878a0193845201611127565b948388019586528351988998828a5251169088015251918601526080850190610dda565b90517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0848303016060850152610dda565b0390f35b5080fd5b8380fd5b5082346102ef57806003193601126102ef575073ffffffffffffffffffffffffffffffffffffffff60209254169051908152f35b80fd5b508290346102b357806003193601126102b35782359160248035918285101561045b57600195610325875485111561106e565b61032f86856110d3565b957fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061037261035d8961110f565b9861036a89519a8b610d3c565b808a5261110f565b019060209136838a0137805b868110610392578751806102af8b82610ca0565b61039b81610f39565b90546103a784846110d3565b918b5183101561043057859173ffffffffffffffffffffffffffffffffffffffff9160031b1c169160051b8b0101527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461040457890161037e565b5050506011907f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b88886032897f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b60848660228460208851937f08c379a00000000000000000000000000000000000000000000000000000000085528401528201527f53544152545f494e4445585f475245415445525f5448414e5f454e445f494e4460448201527f45580000000000000000000000000000000000000000000000000000000000006064820152fd5b5082346102ef5760206003193601126102ef575073ffffffffffffffffffffffffffffffffffffffff61051f6020933561051a600154821061106e565b610f39565b92905490519260031b1c168152f35b8382346102b357816003193601126102b3576020906001549051908152f35b8382346102b357816003193601126102b35773ffffffffffffffffffffffffffffffffffffffff60209254169051908152f35b83346102ef57806003193601126102ef57610599610e1d565b8073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5090346101c35760206003193601126101c3573573ffffffffffffffffffffffffffffffffffffffff81168091036101c3578282916020945260028452205415159051908152f35b5090346101c35760206003193601126101c3573573ffffffffffffffffffffffffffffffffffffffff81168091036101c35760028284610691936102af965260036020522001611127565b9051918291602083526020830190610dda565b50346101c357602090816003193601126102b757823567ffffffffffffffff808211610c1d5736602383011215610c1d578185013591866106e484610d7d565b916106f186519384610d3c565b8483528683019436602482840101116101c35780602489930187378301015280518101928482878601950312610c195751828111610c1957838661073792840101610e9c565b928482015191838311610c0b5761075092018601610e9c565b916107aa8773ffffffffffffffffffffffffffffffffffffffff9283895416888a8951958694859384937f119f09910000000000000000000000000000000000000000000000000000000085528401526024830190610dda565b03915afa908115610c0f578891610bd2575b508451916107c983610cf1565b338352868301918252858301948552338952600387528589209251167fffffffffffffffffffffffff0000000000000000000000000000000000000000835416178255600191828101915190815192858411610ba6576108298154610ee6565b93601f94858111610b61575b50898c868311600114610ac2579060029583610ab7575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82881b9260031b1c19161790555b0193518051938411610a8b576108938554610ee6565b828111610a48575b50869184116001146109aa57889184918261097f575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff91921b9260031b1c19161790555b338452600282528084205461092457836108fb33610f9f565b50337f54db7a5cb4735e1aac1f53db512d3390390bb6637bd30ad4bf9fc98667d9b9b98280a280f35b6064935051917f08c379a0000000000000000000000000000000000000000000000000000000008352820152601360248201527f555345525f414c52454144595f455849535453000000000000000000000000006044820152fd5b015191507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff386108b1565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08493941691858a5283888b20938b5b8a88838310610a3157505050106109fa575b505050811b0190556108e2565b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c191690553880806109ed565b8686015188559096019594850194879350016109db565b858a52878a208380870160051c8201928a8810610a82575b0160051c019084905b828110610a7757505061089b565b8b8155018490610a69565b92508192610a60565b60248960418a7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b01519050388061084c565b82917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08994168583528d80842093905b828210610b4a575050968360029810610b13575b505050811b01905561087d565b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c19169055388080610b06565b838a015185558b969094019392830192018e610af2565b828d528a8d208680840160051c8201928d8510610b9d575b0160051c019087908e5b838210610b9257505050610835565b81550187908e610b83565b92508192610b79565b60248b60418c7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b90503d8089833e610be38183610d3c565b81018682820312610c0b578151848111610c0757610c019201610e9c565b386107bc565b8980fd5b8880fd5b85513d8a823e3d90fd5b8780fd5b8580fd5b925050346101c357826003193601126101c357600180548084528185526020808501957fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf69392915b828210610c8b576102af8787610c81828c0383610d3c565b5191829182610ca0565b84548852968701969383019390830190610c69565b6020908160408183019282815285518094520193019160005b828110610cc7575050505090565b835173ffffffffffffffffffffffffffffffffffffffff1685529381019392810192600101610cb9565b6060810190811067ffffffffffffffff821117610d0d57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610d0d57604052565b67ffffffffffffffff8111610d0d57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b838110610dca5750506000910152565b8181015183820152602001610dba565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602093610e1681518092818752878088019101610db7565b0116010190565b73ffffffffffffffffffffffffffffffffffffffff600054163303610e3e57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b81601f82011215610ee1578051610eb281610d7d565b92610ec06040519485610d3c565b81845260208284010111610ee157610ede9160208085019101610db7565b90565b600080fd5b90600182811c92168015610f2f575b6020831014610f0057565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f1691610ef5565b600154811015610f705760016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60190600090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081815260026020526040812054611069576001546801000000000000000081101561103c57600181018060015581101561100f5790826040927fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6015560015492815260026020522055600190565b6024827f4e487b710000000000000000000000000000000000000000000000000000000081526032600452fd5b6024827f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b905090565b1561107557565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4f55545f4f465f52414e474500000000000000000000000000000000000000006044820152fd5b919082039182116110e057565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b67ffffffffffffffff8111610d0d5760051b60200190565b906040519182600082549261113b84610ee6565b9081845260019485811690816000146111aa5750600114611167575b505061116592500383610d3c565b565b9093915060005260209081600020936000915b81831061119257505061116593508201013880611157565b8554888401850152948501948794509183019161117a565b90506111659550602093507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b820101388061115756fea264697066735822122053c08878bdd4ff3c666e910eb6b9af3ad4b1d5efb73761b2fb42d71fc1da801e64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/registry/MecenateUsers.sol:MecenateUsers",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 20640,
        "contract": "contracts/registry/MecenateUsers.sol:MecenateUsers",
        "label": "_users",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(AddressSet)7773_storage"
      },
      {
        "astId": 20645,
        "contract": "contracts/registry/MecenateUsers.sol:MecenateUsers",
        "label": "_metadata",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(User)16632_storage)"
      },
      {
        "astId": 20647,
        "contract": "contracts/registry/MecenateUsers.sol:MecenateUsers",
        "label": "verifierContract",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(User)16632_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Structures.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)16632_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)7773_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 7772,
            "contract": "contracts/registry/MecenateUsers.sol:MecenateUsers",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)7458_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)7458_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 7453,
            "contract": "contracts/registry/MecenateUsers.sol:MecenateUsers",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 7457,
            "contract": "contracts/registry/MecenateUsers.sol:MecenateUsers",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(User)16632_storage": {
        "encoding": "inplace",
        "label": "struct Structures.User",
        "members": [
          {
            "astId": 16627,
            "contract": "contracts/registry/MecenateUsers.sol:MecenateUsers",
            "label": "evmAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 16629,
            "contract": "contracts/registry/MecenateUsers.sol:MecenateUsers",
            "label": "sismoVaultId",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes_storage"
          },
          {
            "astId": 16631,
            "contract": "contracts/registry/MecenateUsers.sol:MecenateUsers",
            "label": "publicKey",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}