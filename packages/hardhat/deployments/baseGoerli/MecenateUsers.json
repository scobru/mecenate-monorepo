{
  "address": "0xb27dc56e80DA00Fe939FC984fDb55b6E6107B5E7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "verifierContractAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "UserRegistered",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "checkifUserExist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endIndex",
          "type": "uint256"
        }
      ],
      "name": "getPaginatedUsers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getUserAt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUserCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUserMetadata",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "evmAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "sismoVaultId",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "publicKey",
              "type": "bytes"
            }
          ],
          "internalType": "struct Structures.User",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUserPublicKey",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUsers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "metadata",
          "type": "bytes"
        }
      ],
      "name": "registerUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifierContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd6ac8d47d60bc0a7e8ff40726ad0dd1281137372e141ee5e96d34fb7bd6c025d",
  "receipt": {
    "to": null,
    "from": "0x8aA5F726d9F868a21a8bd748E2f1E43bA31eb670",
    "contractAddress": "0xb27dc56e80DA00Fe939FC984fDb55b6E6107B5E7",
    "transactionIndex": 1,
    "gasUsed": "863110",
    "logsBloom": "0x
    "blockHash": "0xd0d46cbed9eb3b6539d9e4c1a7217df8b37d585bc9fdd77a20b1d3edce18077a",
    "transactionHash": "0xd6ac8d47d60bc0a7e8ff40726ad0dd1281137372e141ee5e96d34fb7bd6c025d",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 11145805,
        "transactionHash": "0xd6ac8d47d60bc0a7e8ff40726ad0dd1281137372e141ee5e96d34fb7bd6c025d",
        "address": "0xb27dc56e80DA00Fe939FC984fDb55b6E6107B5E7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008aa5f726d9f868a21a8bd748e2f1e43ba31eb670"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd0d46cbed9eb3b6539d9e4c1a7217df8b37d585bc9fdd77a20b1d3edce18077a"
      }
    ],
    "blockNumber": 11145805,
    "cumulativeGasUsed": "909951",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5c0DaBD1960Cd862e190aecF1A853e1Ac669194E"
  ],
  "numDeployments": 10,
  "solcInputHash": "10d6fd1ef9abb518d5da7186a8a68ad2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifierContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"UserRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"checkifUserExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"getPaginatedUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserPublicKey\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"registerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifierContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/evm/registry/MecenateUsers.sol\":\"MecenateUsers\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/evm/interfaces/IMecenateVerifier.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\ninterface IMecenateVerifier {\\n    function sismoVerify(\\n        bytes memory sismoConnectResponse\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x80a42989301760af1979c98162a585d095eb4adca49e90db73276cd47a14347a\"},\"contracts/evm/library/Structures.sol\":{\"content\":\"/**\\n * @title Structures\\n * @dev This library defines various data structures used in the Mecenate platform.\\n */\\npragma solidity 0.8.19;\\n\\nlibrary Structures {\\n    enum PostStatus {\\n        Waiting,\\n        Proposed,\\n        Accepted,\\n        Submitted,\\n        Finalized,\\n        Punished,\\n        Revealed,\\n        Renounced\\n    }\\n\\n    enum Tokens {\\n        NaN,\\n        MUSE,\\n        DAI\\n    }\\n\\n    enum PostType {\\n        Text,\\n        Image,\\n        Video,\\n        Audio,\\n        File\\n    }\\n    enum PostDuration {\\n        OneDay,\\n        ThreeDays,\\n        OneWeek,\\n        TwoWeeks,\\n        OneMonth\\n    }\\n\\n    struct FeedSettings {\\n        uint256 punishmentRatio;\\n        uint256 postCount;\\n        address usersModuleContract;\\n        address factoryContract;\\n        address router;\\n        string version;\\n    }\\n\\n    struct FactorySettings {\\n        address treasuryContract;\\n        address usersModuleContract;\\n        address easContract;\\n        address museToken;\\n        address daiToken;\\n        address wethToken;\\n        address router;\\n    }\\n\\n    /**\\n     * @dev Struct representing a post on the Mecenate platform.\\n     */\\n    struct Post {\\n        User creator;\\n        PostData postdata;\\n    }\\n\\n    /**\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\n     */\\n    struct PostData {\\n        PostSettings settings;\\n        PostEscrow escrow;\\n        PostEncryptedData data;\\n    }\\n\\n    /**\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\n     */\\n    struct PostEncryptedData {\\n        bytes encryptedData;\\n        bytes encryptedKey;\\n        bytes decryptedData;\\n    }\\n\\n    /**\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettings {\\n        PostStatus status;\\n        PostType postType;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n        uint256 duration;\\n        Tokens tokenId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the private settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettingPrivate {\\n        address buyerAddress;\\n        address sellerAddress;\\n    }\\n\\n    /**\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\n     */\\n    struct PostEscrow {\\n        uint256 stake;\\n        uint256 payment;\\n        uint256 punishment;\\n        uint256 penalty;\\n    }\\n\\n    /**\\n     * @dev Struct representing a user on the Mecenate platform.\\n     */\\n    struct User {\\n        address evmAddress;\\n        bytes sismoVaultId;\\n        bytes publicKey;\\n    }\\n\\n    /**\\n     * @dev Struct representing a feed on the Mecenate platform.\\n     */\\n    struct Feed {\\n        address contractAddress;\\n        address owner;\\n        uint256 sellerStake;\\n        uint256 buyerStake;\\n        uint256 totalStake;\\n        uint256 postCount;\\n        uint256 paymentRequested;\\n        uint256 stakeRequested;\\n        PostStatus status;\\n        Tokens tokenId;\\n        string version;\\n    }\\n\\n    /**\\n     * @dev Struct representing a bay request on the Mecenate platform.\\n     */\\n    struct BayRequest {\\n        bytes request;\\n        uint256 payment;\\n        uint256 stake;\\n        address postAddress;\\n        bool accepted;\\n        uint256 postCount;\\n        Tokens tokenId;\\n        address buyerAddress;\\n    }\\n}\\n\",\"keccak256\":\"0xbb274940876e7ae5561fff2529195525643ae236818eef8134a31db129080b2e\"},\"contracts/evm/registry/MecenateUsers.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../library/Structures.sol\\\";\\nimport \\\"../interfaces/IMecenateVerifier.sol\\\";\\n\\ncontract MecenateUsers is Ownable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    EnumerableSet.AddressSet private _users;\\n\\n    mapping(address => Structures.User) private _metadata;\\n\\n    address public verifierContract;\\n\\n    event UserRegistered(address indexed userAddress);\\n\\n    constructor(address verifierContractAddress) {\\n        verifierContract = verifierContractAddress;\\n    }\\n\\n    function registerUser(bytes memory metadata) public {\\n        (bytes memory sismoConnectResponse, bytes memory publicKey) = abi\\n            .decode(metadata, (bytes, bytes));\\n\\n        bytes memory vaultId = IMecenateVerifier(verifierContract).sismoVerify(\\n            sismoConnectResponse\\n        );\\n\\n        Structures.User memory newUser = Structures.User({\\n            evmAddress: msg.sender,\\n            sismoVaultId: vaultId,\\n            publicKey: publicKey\\n        });\\n\\n        _metadata[msg.sender] = newUser;\\n\\n        require(!_users.contains(msg.sender), \\\"USER_ALREADY_EXISTS\\\");\\n\\n        _users.add(msg.sender);\\n\\n        emit UserRegistered(msg.sender);\\n    }\\n\\n    function getUsers() public view returns (address[] memory) {\\n        return _users.values();\\n    }\\n\\n    function getUserCount() public view returns (uint256) {\\n        return _users.length();\\n    }\\n\\n    function getUserAt(uint256 index) public view returns (address) {\\n        require(index < _users.length(), \\\"OUT_OF_RANGE\\\");\\n        return _users.at(index);\\n    }\\n\\n    function checkifUserExist(\\n        address userAddress\\n    ) external view returns (bool) {\\n        return _users.contains(userAddress);\\n    }\\n\\n    function getPaginatedUsers(\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) public view returns (address[] memory) {\\n        require(startIndex < endIndex, \\\"START_INDEX_GREATER_THAN_END_INDEX\\\");\\n        require(endIndex <= _users.length(), \\\"OUT_OF_RANGE\\\");\\n\\n        address[] memory range = new address[](endIndex - startIndex);\\n        for (uint256 i = startIndex; i < endIndex; i++) {\\n            range[i - startIndex] = _users.at(i);\\n        }\\n\\n        return range;\\n    }\\n\\n    function getUserMetadata(\\n        address userAddress\\n    ) external view returns (Structures.User memory) {\\n        return _metadata[userAddress];\\n    }\\n\\n    function getUserPublicKey(\\n        address userAddress\\n    ) external view returns (bytes memory) {\\n        return _metadata[userAddress].publicKey;\\n    }\\n}\\n\",\"keccak256\":\"0xce6da84f754fdbe11b57d623cc3514977f192a2360dc01a07f4c852ff00351f0\"}},\"version\":1}",
  "bytecode": "0x6080346100a757601f610e8438819003918201601f19168301916001600160401b038311848410176100ac578084926020946040528339810103126100a757516001600160a01b0390818116908190036100a75760005460018060a01b0319903382821617600055604051933391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a36004541617600455610dc190816100c38239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608060408181526004908136101561001657600080fd5b600092833560e01c908162ce8e3e1461092e575080630a38178c1461051957806311231fe0146104c757806348990fcc1461048b578063715018a6146104315780638da5cb5b14610409578063b5cb15f7146103ea578063c6e064ad146103a4578063cf5caa1214610265578063cf6956881461023d578063ef2a8764146101735763f2fde38b146100a757600080fd5b3461016f57602036600319011261016f576001600160a01b0382358181169391929084900361016b576100d8610aa9565b831561011957505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8480fd5b8280fd5b50903461016f5760209081600319360112610239576001600160a01b03939035848116908190036102355783610231939261021e9260608380516101b6816109f1565b84815282888201520152815260038452209360608151956101d6876109f1565b8781541687526101fa60026101ed60018401610ce5565b92878a0193845201610ce5565b948388019586528351988998828a5251169088015251918601526080850190610a84565b9051838203601f19016060850152610a84565b0390f35b5080fd5b8380fd5b50903461016f578260031936011261016f575490516001600160a01b03909116815260209150f35b50829034610235578060031936011261023557823591602480359182851015610357576001956102988754851115610c6f565b6102a28685610caa565b956102ac87610ccd565b966102b987519889610a23565b8088526102c8601f1991610ccd565b0160209036828a0137815b8681106102e7578751806102318b826109ad565b6102f081610b85565b9054906102fd8584610caa565b918b518310156103455760039190911b1c6001600160a01b031660059190911b8a0183015260001981146103325789016102d3565b5050634e487b7160e01b83525060119052fd5b634e487b7160e01b8852603287528888fd5b835162461bcd60e51b81526020818801526022818401527f53544152545f494e4445585f475245415445525f5448414e5f454e445f494e4460448201526108ab60f31b6064820152608490fd5b5082346103e75760203660031901126103e757506103d1602092356103cc6001548210610c6f565b610b85565b905491519160018060a01b039160031b1c168152f35b80fd5b8382346102355781600319360112610235576020906001549051908152f35b838234610235578160031936011261023557905490516001600160a01b039091168152602090f35b83346103e757806003193601126103e75761044a610aa9565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50903461016f57602036600319011261016f57356001600160a01b0381169081900361016f578282916020945260028452205415159051908152f35b50903461016f57602036600319011261016f57356001600160a01b0381169081900361016f576002828461050693610231965260036020522001610ce5565b9051918291602083526020830190610a84565b503461016f57602090816003193601126102395767ffffffffffffffff833581811161092a573660238201121561092a5780850135908661055983610a45565b9161056686519384610a23565b83835286830193366024828401011161016f578060248993018637830101528051810191848287850194031261092657518381116109265782866105ac92840101610b01565b918482015191848311610918576105c592018601610b01565b916105f88760018060a01b039384895416888a89519586948593849363119f099160e01b85528401526024830190610a84565b03915afa90811561091c5788916108df575b50845192610617846109f1565b33808552878501928352868501958652895260038752858920935184546001600160a01b03191691161783555180516001939091908481018484116108cc576106608154610b4b565b93601f94858111610887575b50898c868311600114610824579060029583610819575b5050600019600383901b1c191690871b1790555b0193518051928311610806576106ad8554610b4b565b8281116107c3575b5086918311600114610764579282939183928a94610759575b50501b916000199060031b1c19161790555b338452600282528084205461072257836106f933610bd2565b50337f54db7a5cb4735e1aac1f53db512d3390390bb6637bd30ad4bf9fc98667d9b9b98280a280f35b5162461bcd60e51b8152918201526013602482015272555345525f414c52454144595f45584953545360681b604482015260649150fd5b0151925038806106ce565b848952868920919083601f1981168b5b8a888383106107ac5750505010610793575b505050811b0190556106e0565b015160001960f88460031b161c19169055388080610786565b868601518855909601959485019487935001610774565b858a52878a208380860160051c8201928a87106107fd575b0160051c019085905b8281106107f25750506106b5565b8b81550185906107e4565b925081926107db565b634e487b7160e01b895260418852602489fd5b015190503880610683565b889291601f1983168583528d80842093905b828210610870575050968360029810610857575b505050811b019055610697565b015160001960f88460031b161c1916905538808061084a565b838a015185558c969094019392830192018e610836565b828d528a8d208680840160051c8201928d85106108c3575b0160051c019088908e5b8382106108b85750505061066c565b81550188908e6108a9565b9250819261089f565b634e487b7160e01b8b5260418a5260248bfd5b90503d8089833e6108f08183610a23565b810186828203126109185781518381116109145761090e9201610b01565b3861060a565b8980fd5b8880fd5b85513d8a823e3d90fd5b8780fd5b8580fd5b9250503461016f578260031936011261016f57600180548084528185526020808501957fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf69392915b82821061099857610231878761098e828c0383610a23565b51918291826109ad565b84548852968701969383019390830190610976565b6020908160408183019282815285518094520193019160005b8281106109d4575050505090565b83516001600160a01b0316855293810193928101926001016109c6565b6060810190811067ffffffffffffffff821117610a0d57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117610a0d57604052565b67ffffffffffffffff8111610a0d57601f01601f191660200190565b60005b838110610a745750506000910152565b8181015183820152602001610a64565b90602091610a9d81518092818552858086019101610a61565b601f01601f1916010190565b6000546001600160a01b03163303610abd57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b81601f82011215610b46578051610b1781610a45565b92610b256040519485610a23565b81845260208284010111610b4657610b439160208085019101610a61565b90565b600080fd5b90600182811c92168015610b7b575b6020831014610b6557565b634e487b7160e01b600052602260045260246000fd5b91607f1691610b5a565b600154811015610bbc5760016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60190600090565b634e487b7160e01b600052603260045260246000fd5b600081815260026020526040812054610c6a5760015468010000000000000000811015610c56576001810180600155811015610c425790826040927fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6015560015492815260026020522055600190565b634e487b7160e01b82526032600452602482fd5b634e487b7160e01b82526041600452602482fd5b905090565b15610c7657565b60405162461bcd60e51b815260206004820152600c60248201526b4f55545f4f465f52414e474560a01b6044820152606490fd5b91908203918211610cb757565b634e487b7160e01b600052601160045260246000fd5b67ffffffffffffffff8111610a0d5760051b60200190565b9060405191826000825492610cf984610b4b565b908184526001948581169081600014610d685750600114610d25575b5050610d2392500383610a23565b565b9093915060005260209081600020936000915b818310610d50575050610d2393508201013880610d15565b85548884018501529485019487945091830191610d38565b915050610d2394506020925060ff191682840152151560051b8201013880610d1556fea26469706673582212203b0befcfe41cb8ba980b4b4c73aa79be8b7723f94e064003463493ef21b7487d64736f6c63430008130033",
  "deployedBytecode": "0x608060408181526004908136101561001657600080fd5b600092833560e01c908162ce8e3e1461092e575080630a38178c1461051957806311231fe0146104c757806348990fcc1461048b578063715018a6146104315780638da5cb5b14610409578063b5cb15f7146103ea578063c6e064ad146103a4578063cf5caa1214610265578063cf6956881461023d578063ef2a8764146101735763f2fde38b146100a757600080fd5b3461016f57602036600319011261016f576001600160a01b0382358181169391929084900361016b576100d8610aa9565b831561011957505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8480fd5b8280fd5b50903461016f5760209081600319360112610239576001600160a01b03939035848116908190036102355783610231939261021e9260608380516101b6816109f1565b84815282888201520152815260038452209360608151956101d6876109f1565b8781541687526101fa60026101ed60018401610ce5565b92878a0193845201610ce5565b948388019586528351988998828a5251169088015251918601526080850190610a84565b9051838203601f19016060850152610a84565b0390f35b5080fd5b8380fd5b50903461016f578260031936011261016f575490516001600160a01b03909116815260209150f35b50829034610235578060031936011261023557823591602480359182851015610357576001956102988754851115610c6f565b6102a28685610caa565b956102ac87610ccd565b966102b987519889610a23565b8088526102c8601f1991610ccd565b0160209036828a0137815b8681106102e7578751806102318b826109ad565b6102f081610b85565b9054906102fd8584610caa565b918b518310156103455760039190911b1c6001600160a01b031660059190911b8a0183015260001981146103325789016102d3565b5050634e487b7160e01b83525060119052fd5b634e487b7160e01b8852603287528888fd5b835162461bcd60e51b81526020818801526022818401527f53544152545f494e4445585f475245415445525f5448414e5f454e445f494e4460448201526108ab60f31b6064820152608490fd5b5082346103e75760203660031901126103e757506103d1602092356103cc6001548210610c6f565b610b85565b905491519160018060a01b039160031b1c168152f35b80fd5b8382346102355781600319360112610235576020906001549051908152f35b838234610235578160031936011261023557905490516001600160a01b039091168152602090f35b83346103e757806003193601126103e75761044a610aa9565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50903461016f57602036600319011261016f57356001600160a01b0381169081900361016f578282916020945260028452205415159051908152f35b50903461016f57602036600319011261016f57356001600160a01b0381169081900361016f576002828461050693610231965260036020522001610ce5565b9051918291602083526020830190610a84565b503461016f57602090816003193601126102395767ffffffffffffffff833581811161092a573660238201121561092a5780850135908661055983610a45565b9161056686519384610a23565b83835286830193366024828401011161016f578060248993018637830101528051810191848287850194031261092657518381116109265782866105ac92840101610b01565b918482015191848311610918576105c592018601610b01565b916105f88760018060a01b039384895416888a89519586948593849363119f099160e01b85528401526024830190610a84565b03915afa90811561091c5788916108df575b50845192610617846109f1565b33808552878501928352868501958652895260038752858920935184546001600160a01b03191691161783555180516001939091908481018484116108cc576106608154610b4b565b93601f94858111610887575b50898c868311600114610824579060029583610819575b5050600019600383901b1c191690871b1790555b0193518051928311610806576106ad8554610b4b565b8281116107c3575b5086918311600114610764579282939183928a94610759575b50501b916000199060031b1c19161790555b338452600282528084205461072257836106f933610bd2565b50337f54db7a5cb4735e1aac1f53db512d3390390bb6637bd30ad4bf9fc98667d9b9b98280a280f35b5162461bcd60e51b8152918201526013602482015272555345525f414c52454144595f45584953545360681b604482015260649150fd5b0151925038806106ce565b848952868920919083601f1981168b5b8a888383106107ac5750505010610793575b505050811b0190556106e0565b015160001960f88460031b161c19169055388080610786565b868601518855909601959485019487935001610774565b858a52878a208380860160051c8201928a87106107fd575b0160051c019085905b8281106107f25750506106b5565b8b81550185906107e4565b925081926107db565b634e487b7160e01b895260418852602489fd5b015190503880610683565b889291601f1983168583528d80842093905b828210610870575050968360029810610857575b505050811b019055610697565b015160001960f88460031b161c1916905538808061084a565b838a015185558c969094019392830192018e610836565b828d528a8d208680840160051c8201928d85106108c3575b0160051c019088908e5b8382106108b85750505061066c565b81550188908e6108a9565b9250819261089f565b634e487b7160e01b8b5260418a5260248bfd5b90503d8089833e6108f08183610a23565b810186828203126109185781518381116109145761090e9201610b01565b3861060a565b8980fd5b8880fd5b85513d8a823e3d90fd5b8780fd5b8580fd5b9250503461016f578260031936011261016f57600180548084528185526020808501957fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf69392915b82821061099857610231878761098e828c0383610a23565b51918291826109ad565b84548852968701969383019390830190610976565b6020908160408183019282815285518094520193019160005b8281106109d4575050505090565b83516001600160a01b0316855293810193928101926001016109c6565b6060810190811067ffffffffffffffff821117610a0d57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117610a0d57604052565b67ffffffffffffffff8111610a0d57601f01601f191660200190565b60005b838110610a745750506000910152565b8181015183820152602001610a64565b90602091610a9d81518092818552858086019101610a61565b601f01601f1916010190565b6000546001600160a01b03163303610abd57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b81601f82011215610b46578051610b1781610a45565b92610b256040519485610a23565b81845260208284010111610b4657610b439160208085019101610a61565b90565b600080fd5b90600182811c92168015610b7b575b6020831014610b6557565b634e487b7160e01b600052602260045260246000fd5b91607f1691610b5a565b600154811015610bbc5760016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60190600090565b634e487b7160e01b600052603260045260246000fd5b600081815260026020526040812054610c6a5760015468010000000000000000811015610c56576001810180600155811015610c425790826040927fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6015560015492815260026020522055600190565b634e487b7160e01b82526032600452602482fd5b634e487b7160e01b82526041600452602482fd5b905090565b15610c7657565b60405162461bcd60e51b815260206004820152600c60248201526b4f55545f4f465f52414e474560a01b6044820152606490fd5b91908203918211610cb757565b634e487b7160e01b600052601160045260246000fd5b67ffffffffffffffff8111610a0d5760051b60200190565b9060405191826000825492610cf984610b4b565b908184526001948581169081600014610d685750600114610d25575b5050610d2392500383610a23565b565b9093915060005260209081600020936000915b818310610d50575050610d2393508201013880610d15565b85548884018501529485019487945091830191610d38565b915050610d2394506020925060ff191682840152151560051b8201013880610d1556fea26469706673582212203b0befcfe41cb8ba980b4b4c73aa79be8b7723f94e064003463493ef21b7487d64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/evm/registry/MecenateUsers.sol:MecenateUsers",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10716,
        "contract": "contracts/evm/registry/MecenateUsers.sol:MecenateUsers",
        "label": "_users",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(AddressSet)3956_storage"
      },
      {
        "astId": 10721,
        "contract": "contracts/evm/registry/MecenateUsers.sol:MecenateUsers",
        "label": "_metadata",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(User)6942_storage)"
      },
      {
        "astId": 10723,
        "contract": "contracts/evm/registry/MecenateUsers.sol:MecenateUsers",
        "label": "verifierContract",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(User)6942_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Structures.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)6942_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)3956_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3955,
            "contract": "contracts/evm/registry/MecenateUsers.sol:MecenateUsers",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3641_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3641_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3636,
            "contract": "contracts/evm/registry/MecenateUsers.sol:MecenateUsers",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3640,
            "contract": "contracts/evm/registry/MecenateUsers.sol:MecenateUsers",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(User)6942_storage": {
        "encoding": "inplace",
        "label": "struct Structures.User",
        "members": [
          {
            "astId": 6937,
            "contract": "contracts/evm/registry/MecenateUsers.sol:MecenateUsers",
            "label": "evmAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6939,
            "contract": "contracts/evm/registry/MecenateUsers.sol:MecenateUsers",
            "label": "sismoVaultId",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes_storage"
          },
          {
            "astId": 6941,
            "contract": "contracts/evm/registry/MecenateUsers.sol:MecenateUsers",
            "label": "publicKey",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}