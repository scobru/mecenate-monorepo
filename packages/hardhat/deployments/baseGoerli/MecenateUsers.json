{
  "address": "0x7E8664B5BA54AD234d62A5Af7197999181Ca3dC6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifierContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasuryContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "vaultId",
          "type": "bytes32"
        }
      ],
      "name": "UserRegistered",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "changeTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "sismoConnectResponse",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_nonce",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_username",
          "type": "string"
        }
      ],
      "name": "changeUserName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        }
      ],
      "name": "changeVerifier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "vaultId",
          "type": "bytes32"
        }
      ],
      "name": "checkifUserExist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endIndex",
          "type": "uint256"
        }
      ],
      "name": "getPaginatedUsers",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "users",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getUserAt",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "user",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUserCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "vaultId",
          "type": "bytes32"
        }
      ],
      "name": "getUserName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getUserVaultIdAt",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "user",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUsers",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "users",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "sismoConnectResponse",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_nonce",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_username",
          "type": "string"
        }
      ],
      "name": "registerUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "userNames",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifierContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xad4ab7df0039bba85b2f700ee47be407ac40f0e578cefc9633ba6eb260f29b04",
  "receipt": {
    "to": null,
    "from": "0x8aA5F726d9F868a21a8bd748E2f1E43bA31eb670",
    "contractAddress": "0x7E8664B5BA54AD234d62A5Af7197999181Ca3dC6",
    "transactionIndex": 4,
    "gasUsed": "1200932",
    "logsBloom": "0x
    "blockHash": "0x33a536814fdc6056aa204665acff3298a4840167b4df134e7d9a4c1a58763865",
    "transactionHash": "0xad4ab7df0039bba85b2f700ee47be407ac40f0e578cefc9633ba6eb260f29b04",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 10577005,
        "transactionHash": "0xad4ab7df0039bba85b2f700ee47be407ac40f0e578cefc9633ba6eb260f29b04",
        "address": "0x7E8664B5BA54AD234d62A5Af7197999181Ca3dC6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008aa5f726d9f868a21a8bd748e2f1e43ba31eb670"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x33a536814fdc6056aa204665acff3298a4840167b4df134e7d9a4c1a58763865"
      }
    ],
    "blockNumber": 10577005,
    "cumulativeGasUsed": "1523948",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5C5957b711169fC762e83c9A90B3A56C80E2C010",
    "0x27115aAa74b296D2461958498B5b4C99b8E10afA"
  ],
  "numDeployments": 3,
  "solcInputHash": "11ec77ac73880f17301462ca88124e91",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifierContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"name\":\"UserRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"changeTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_username\",\"type\":\"string\"}],\"name\":\"changeUserName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"}],\"name\":\"changeVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"name\":\"checkifUserExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"getPaginatedUsers\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"users\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserAt\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"user\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"name\":\"getUserName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserVaultIdAt\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"user\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsers\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"users\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_username\",\"type\":\"string\"}],\"name\":\"registerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"userNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifierContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/registry/MecenateUsers.sol\":\"MecenateUsers\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/interfaces/IMecenateVerifier.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateVerifier {\\r\\n    function sismoVerify(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) external view returns (bytes memory, uint256, uint256, bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x46733b039d06e66a1f438c4fcc490eea06ed1ba2ddff7d5a0059d9e799f03d8d\"},\"contracts/library/SismoStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nstruct SismoConnectRequest {\\r\\n    bytes16 namespace;\\r\\n    AuthRequest[] auths;\\r\\n    ClaimRequest[] claims;\\r\\n    SignatureRequest signature;\\r\\n}\\r\\n\\r\\nstruct SismoConnectConfig {\\r\\n    bytes16 appId;\\r\\n    VaultConfig vault;\\r\\n}\\r\\n\\r\\nstruct VaultConfig {\\r\\n    bool isImpersonationMode;\\r\\n}\\r\\n\\r\\nstruct AuthRequest {\\r\\n    AuthType authType;\\r\\n    uint256 userId; // default: 0\\r\\n    // flags\\r\\n    bool isAnon; // default: false -> true not supported yet, need to throw if true\\r\\n    bool isOptional; // default: false\\r\\n    bool isSelectableByUser; // default: true\\r\\n    //\\r\\n    bytes extraData; // default: \\\"\\\"\\r\\n}\\r\\n\\r\\nstruct ClaimRequest {\\r\\n    ClaimType claimType; // default: GTE\\r\\n    bytes16 groupId;\\r\\n    bytes16 groupTimestamp; // default: bytes16(\\\"latest\\\")\\r\\n    uint256 value; // default: 1\\r\\n    // flags\\r\\n    bool isOptional; // default: false\\r\\n    bool isSelectableByUser; // default: true\\r\\n    //\\r\\n    bytes extraData; // default: \\\"\\\"\\r\\n}\\r\\n\\r\\nstruct SignatureRequest {\\r\\n    bytes message; // default: \\\"MESSAGE_SELECTED_BY_USER\\\"\\r\\n    bool isSelectableByUser; // default: false\\r\\n    bytes extraData; // default: \\\"\\\"\\r\\n}\\r\\n\\r\\nenum AuthType {\\r\\n    VAULT,\\r\\n    GITHUB,\\r\\n    TWITTER,\\r\\n    EVM_ACCOUNT,\\r\\n    TELEGRAM,\\r\\n    DISCORD\\r\\n}\\r\\n\\r\\nenum ClaimType {\\r\\n    GTE,\\r\\n    GT,\\r\\n    EQ,\\r\\n    LT,\\r\\n    LTE\\r\\n}\\r\\n\\r\\nstruct Auth {\\r\\n    AuthType authType;\\r\\n    bool isAnon;\\r\\n    bool isSelectableByUser;\\r\\n    uint256 userId;\\r\\n    bytes extraData;\\r\\n}\\r\\n\\r\\nstruct Claim {\\r\\n    ClaimType claimType;\\r\\n    bytes16 groupId;\\r\\n    bytes16 groupTimestamp;\\r\\n    bool isSelectableByUser;\\r\\n    uint256 value;\\r\\n    bytes extraData;\\r\\n}\\r\\n\\r\\nstruct Signature {\\r\\n    bytes message;\\r\\n    bytes extraData;\\r\\n}\\r\\n\\r\\nstruct SismoConnectResponse {\\r\\n    bytes16 appId;\\r\\n    bytes16 namespace;\\r\\n    bytes32 version;\\r\\n    bytes signedMessage;\\r\\n    SismoConnectProof[] proofs;\\r\\n}\\r\\n\\r\\nstruct SismoConnectProof {\\r\\n    Auth[] auths;\\r\\n    Claim[] claims;\\r\\n    bytes32 provingScheme;\\r\\n    bytes proofData;\\r\\n    bytes extraData;\\r\\n}\\r\\n\\r\\nstruct SismoConnectVerifiedResult {\\r\\n    bytes16 appId;\\r\\n    bytes16 namespace;\\r\\n    bytes32 version;\\r\\n    VerifiedAuth[] auths;\\r\\n    VerifiedClaim[] claims;\\r\\n    bytes signedMessage;\\r\\n}\\r\\n\\r\\nstruct VerifiedAuth {\\r\\n    AuthType authType;\\r\\n    bool isAnon;\\r\\n    uint256 userId;\\r\\n    bytes extraData;\\r\\n    bytes proofData;\\r\\n}\\r\\n\\r\\nstruct VerifiedClaim {\\r\\n    ClaimType claimType;\\r\\n    bytes16 groupId;\\r\\n    bytes16 groupTimestamp;\\r\\n    uint256 value;\\r\\n    bytes extraData;\\r\\n    uint256 proofId;\\r\\n    bytes proofData;\\r\\n}\\r\\n\",\"keccak256\":\"0x0d7238088b9d4b679f489531b76e4dbf851e7c33a2a8b50a786273125aa0e623\",\"license\":\"MIT\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\r\\n * @title Structures\\r\\n * @dev This library defines various data structures used in the Mecenate platform.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nlibrary Structures {\\r\\n    enum PostStatus {\\r\\n        Waiting,\\r\\n        Proposed,\\r\\n        Accepted,\\r\\n        Submitted,\\r\\n        Finalized,\\r\\n        Punished,\\r\\n        Revealed,\\r\\n        Renounced\\r\\n    }\\r\\n    enum Tokens {\\r\\n        NaN,\\r\\n        MUSE,\\r\\n        DAI\\r\\n    }\\r\\n    enum PostType {\\r\\n        Text,\\r\\n        Image,\\r\\n        Video,\\r\\n        Audio,\\r\\n        File\\r\\n    }\\r\\n    enum PostDuration {\\r\\n        OneDay,\\r\\n        ThreeDays,\\r\\n        OneWeek,\\r\\n        TwoWeeks,\\r\\n        OneMonth\\r\\n    }\\r\\n\\r\\n    struct FeedSettings {\\r\\n        uint256 punishmentRatio;\\r\\n        uint256 postCount;\\r\\n        address usersModuleContract;\\r\\n        address factoryContract;\\r\\n        address verifierContract;\\r\\n        address vaultContract;\\r\\n        address router;\\r\\n        bytes encodedSymKey;\\r\\n        bytes lastMessageForBuyer;\\r\\n        bytes lastMessageForSeller;\\r\\n        string version;\\r\\n    }\\r\\n\\r\\n    struct FactorySettings {\\r\\n        address treasuryContract;\\r\\n        address usersModuleContract;\\r\\n        address verifierContract;\\r\\n        address vaultContract;\\r\\n        address museToken;\\r\\n        address daiToken;\\r\\n        address wethToken;\\r\\n        address router;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a post on the Mecenate platform.\\r\\n     */\\r\\n    struct Post {\\r\\n        User creator;\\r\\n        PostData postdata;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostData {\\r\\n        PostSettings settings;\\r\\n        PostEscrow escrow;\\r\\n        PostEncryptedData data;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostEncryptedData {\\r\\n        bytes encryptedData;\\r\\n        bytes encryptedKey;\\r\\n        bytes decryptedData;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostSettings {\\r\\n        PostStatus status;\\r\\n        PostType postType;\\r\\n        uint256 creationTimeStamp;\\r\\n        uint256 endTimeStamp;\\r\\n        uint256 duration;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the private settings of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostSettingPrivate {\\r\\n        bytes vaultIdSeller;\\r\\n        uint256 sellerTwitterId;\\r\\n        uint256 sellerTelegramId;\\r\\n        bytes vaultIdBuyer;\\r\\n        uint256 buyerTwitterId;\\r\\n        uint256 buyerTelegramId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostEscrow {\\r\\n        uint256 stake;\\r\\n        uint256 payment;\\r\\n        uint256 punishment;\\r\\n        uint256 penalty;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a user on the Mecenate platform.\\r\\n     */\\r\\n    struct User {\\r\\n        bytes32 vaultId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a feed on the Mecenate platform.\\r\\n     */\\r\\n    struct Feed {\\r\\n        address contractAddress;\\r\\n        bytes32 operator;\\r\\n        uint256 sellerStake;\\r\\n        uint256 buyerStake;\\r\\n        uint256 totalStake;\\r\\n        uint256 postCount;\\r\\n        uint256 paymentRequested;\\r\\n        uint256 stakeRequested;\\r\\n        PostStatus status;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a bay request on the Mecenate platform.\\r\\n     */\\r\\n    struct BayRequest {\\r\\n        bytes32 request;\\r\\n        uint256 payment;\\r\\n        uint256 stake;\\r\\n        address postAddress;\\r\\n        bool accepted;\\r\\n        uint256 postCount;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the private settings of a bay request on the Mecenate platform.\\r\\n     */\\r\\n    struct BayRequestPrivate {\\r\\n        bytes vaultIdSeller;\\r\\n        bytes sellerResponse;\\r\\n        bytes vaultIdBuyer;\\r\\n        bytes buyerResponse;\\r\\n        address buyerTo;\\r\\n        bytes32 buyerNonce;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7b6ab8775753a390fe793555975dc63a401b2c10ad09b949c5588177ca6c9f33\"},\"contracts/registry/MecenateUsers.sol\":{\"content\":\"/**\\r\\n * @title MecenateUsers\\r\\n * @dev This contract manages the registration of users in the Mecenate platform.\\r\\n * It uses the IMecenateVerifier interface to verify user information and adds the user to a set of registered users.\\r\\n * The contract also provides functions to retrieve user information and to change the treasury and verifier contracts.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\n// import enumerable address set from openzeppelin\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../library/Structures.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateVerifier.sol\\\";\\r\\nimport \\\"../library/SismoStructs.sol\\\";\\r\\n\\r\\ncontract MecenateUsers is Ownable {\\r\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\r\\n\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    EnumerableSet.Bytes32Set private _users;\\r\\n\\r\\n    Structures.User private _metadata;\\r\\n\\r\\n    event UserRegistered(bytes32 vaultId);\\r\\n\\r\\n    address public verifierContract;\\r\\n\\r\\n    address public treasuryContract;\\r\\n\\r\\n    mapping(bytes32 => string) public userNames;\\r\\n\\r\\n    constructor(address _verifierContract, address _treasuryContract) {\\r\\n        verifierContract = _verifierContract;\\r\\n\\r\\n        treasuryContract = _treasuryContract;\\r\\n    }\\r\\n\\r\\n    function changeTreasury(address _treasury) external onlyOwner {\\r\\n        treasuryContract = _treasury;\\r\\n    }\\r\\n\\r\\n    function changeVerifier(address _verifier) external onlyOwner {\\r\\n        verifierContract = _verifier;\\r\\n    }\\r\\n\\r\\n    function registerUser(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce,\\r\\n        string memory _username\\r\\n    ) public {\\r\\n        (\\r\\n            bytes memory vaultId,\\r\\n            ,\\r\\n            ,\\r\\n            bytes memory signedMessage\\r\\n        ) = IMecenateVerifier(verifierContract).sismoVerify(\\r\\n                sismoConnectResponse,\\r\\n                _to,\\r\\n                _nonce\\r\\n            );\\r\\n\\r\\n        (, bytes32 nonce) = abi.decode(signedMessage, (address, bytes32));\\r\\n\\r\\n        require(_nonce == nonce, \\\"WRONG_NONCE\\\");\\r\\n\\r\\n        bytes32 encryptedVaultId = keccak256(vaultId);\\r\\n\\r\\n        userNames[encryptedVaultId] = _username;\\r\\n\\r\\n        // check if user exists\\r\\n        require(!_users.contains(encryptedVaultId), \\\"USER_ALREADY_EXISTS\\\");\\r\\n\\r\\n        // add user\\r\\n        _users.add(encryptedVaultId);\\r\\n\\r\\n        // emit event\\r\\n        emit UserRegistered(encryptedVaultId);\\r\\n    }\\r\\n\\r\\n    function changeUserName(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce,\\r\\n        string memory _username\\r\\n    ) external {\\r\\n        (\\r\\n            bytes memory vaultId,\\r\\n            ,\\r\\n            ,\\r\\n            bytes memory signedMessage\\r\\n        ) = IMecenateVerifier(verifierContract).sismoVerify(\\r\\n                sismoConnectResponse,\\r\\n                _to,\\r\\n                _nonce\\r\\n            );\\r\\n\\r\\n        (, bytes32 nonce) = abi.decode(signedMessage, (address, bytes32));\\r\\n\\r\\n        require(_nonce == nonce, \\\"WRONG_NONCE\\\");\\r\\n\\r\\n        bytes32 encryptedVaultId = keccak256(vaultId);\\r\\n\\r\\n        require(_users.contains(encryptedVaultId), \\\"USER_ALREADY_EXISTS\\\");\\r\\n\\r\\n        userNames[encryptedVaultId] = _username;\\r\\n    }\\r\\n\\r\\n    function getUserName(bytes32 vaultId) public view returns (string memory) {\\r\\n        return userNames[vaultId];\\r\\n    }\\r\\n\\r\\n    function getUsers() public view returns (bytes32[] memory users) {\\r\\n        return _users.values();\\r\\n    }\\r\\n\\r\\n    function getUserCount() public view returns (uint256 count) {\\r\\n        count = _users.length();\\r\\n    }\\r\\n\\r\\n    function getUserAt(uint256 index) public view returns (bytes32 user) {\\r\\n        require(index < _users.length(), \\\"OUT_OF_RANGE\\\");\\r\\n        user = _users.at(index);\\r\\n    }\\r\\n\\r\\n    function getUserVaultIdAt(\\r\\n        uint256 index\\r\\n    ) public view returns (bytes32 user) {\\r\\n        require(msg.sender == treasuryContract, \\\"ONLY_TREASURY\\\");\\r\\n        require(index < _users.length(), \\\"OUT_OF_RANGE\\\");\\r\\n        user = _users.at(index);\\r\\n    }\\r\\n\\r\\n    function checkifUserExist(bytes32 vaultId) external view returns (bool) {\\r\\n        return _users.contains(vaultId);\\r\\n    }\\r\\n\\r\\n    // Note: startIndex is inclusive, endIndex exclusive\\r\\n    function getPaginatedUsers(\\r\\n        uint256 startIndex,\\r\\n        uint256 endIndex\\r\\n    ) public view returns (bytes32[] memory users) {\\r\\n        require(startIndex < endIndex, \\\"START_INDEX_GREATER_THAN_END_INDEX\\\");\\r\\n        require(endIndex <= _users.length(), \\\"OUT_OF_RANGE\\\");\\r\\n\\r\\n        // initialize fixed size memory array\\r\\n        bytes32[] memory range = new bytes32[](endIndex - startIndex);\\r\\n\\r\\n        // Populate array with addresses in range\\r\\n        for (uint256 i = startIndex; i < endIndex; i++) {\\r\\n            range[i - startIndex] = _users.at(i);\\r\\n        }\\r\\n\\r\\n        // return array of addresses\\r\\n        users = range;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x942b4eda0ed8896d815ceb6fed2c39de957d1c80450d065714ad959b6f5e82db\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060408181526004908136101561001657600080fd5b600092833560e01c908162ce8e3e14610bb9575080630a0bcfd814610b4757806318da001114610b8457806321a1180514610b4757806338aad32c14610b1d5780634a9a471f146108d05780635b5cf50a14610829578063715018a6146107ab5780638da5cb5b14610778578063b14f2a3914610714578063b5cb15f7146106f5578063c6e064ad146106ba578063cf04fb9414610657578063cf5caa1214610498578063cf69568814610461578063f2fde38b146103485763fa2f10c3146100de57600080fd5b3461034457918091610145936100f336610ea0565b979281969273ffffffffffffffffffffffffffffffffffffffff875416918651958694859384937f7276069d0000000000000000000000000000000000000000000000000000000085528b850161103d565b03915afa93841561033a578591869561030c575b5061017b90610172602096878082518301019101611075565b919050146110a9565b8381519101208085526002845261019682862054151561110e565b84526006835283209184519167ffffffffffffffff83116102e057506101bc8354610c73565b601f811161029d575b5080601f831160011461021d5750839482939492610212575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c191617905580f35b0151905038806101de565b90601f198316958486528286209286905b8882106102855750508360019596971061024e575b505050811b01905580f35b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c19169055388080610243565b8060018596829496860151815501950193019061022e565b838552818520601f840160051c8101918385106102d6575b601f0160051c01905b8181106102cb57506101c5565b8581556001016102be565b90915081906102b5565b8460416024927f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b61032e91955061017b92503d8088833e6103268183610cc6565b810190610fef565b96929391506101599050565b82513d87823e3d90fd5b8280fd5b50903461034457602060031936011261034457610363610e7d565b9061036c610f2e565b73ffffffffffffffffffffffffffffffffffffffff8092169283156103de5750508254827fffffffffffffffffffffffff00000000000000000000000000000000000000008216178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b90602060849251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b5082346104955780600319360112610495575073ffffffffffffffffffffffffffffffffffffffff60209254169051908152f35b80fd5b508290346106535780600319360112610653578235916024803591828510156105d1576001956104cb87548511156112a8565b6104d5868561130d565b95601f196104fa6104e589611349565b986104f289519a8b610cc6565b808a52611349565b019060209136838a0137805b86811061051e5787518061051a8b82610c38565b0390f35b61052781611173565b9054610533848461130d565b918b518310156105a65790859160031b1c9160051b8b0101527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461057a578901610506565b5050506011907f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b88886032897f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b60848660228460208851937f08c379a00000000000000000000000000000000000000000000000000000000085528401528201527f53544152545f494e4445585f475245415445525f5448414e5f454e445f494e4460448201527f45580000000000000000000000000000000000000000000000000000000000006064820152fd5b5080fd5b5050346106535760206003193601126106535773ffffffffffffffffffffffffffffffffffffffff610687610e7d565b61068f610f2e565b167fffffffffffffffffffffffff000000000000000000000000000000000000000082541617905580f35b50823461049557602060031936011261049557506106e7602092356106e260015482106112a8565b611173565b91905490519160031b1c8152f35b8382346106535781600319360112610653576020906001549051908152f35b83346104955760206003193601126104955773ffffffffffffffffffffffffffffffffffffffff610743610e7d565b61074b610f2e565b167fffffffffffffffffffffffff0000000000000000000000000000000000000000600554161760055580f35b83823461065357816003193601126106535773ffffffffffffffffffffffffffffffffffffffff60209254169051908152f35b83346104955780600319360112610495576107c4610f2e565b8073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b509134610495576020600319360112610495575080359073ffffffffffffffffffffffffffffffffffffffff600554163303610873576020836106e7846106e260015482106112a8565b60649060208451917f08c379a0000000000000000000000000000000000000000000000000000000008352820152600d60248201527f4f4e4c595f5452454153555259000000000000000000000000000000000000006044820152fd5b5034610344579180916108e6936100f336610ea0565b03915afa93841561033a5785918695610af7575b5061091390610172602096878082518301019101611075565b83815191012091828552600684528185209086519067ffffffffffffffff8211610acb57506109428254610c73565b601f8111610a88575b5084601f82116001146109e757819087987f78997021e09413de1e36500ed07f9f6c73541162817fc3ea6a115e5e3d3affb998926109dc575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c19161790555b818552600283526109ca818620541561110e565b6109d3826111d9565b5051908152a180f35b015190503880610984565b82875285872097601f198316885b818110610a715750917f78997021e09413de1e36500ed07f9f6c73541162817fc3ea6a115e5e3d3affb9989991846001959410610a3a575b505050811b0190556109b6565b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c19169055388080610a2d565b838301518b556001909a01999288019288016109f5565b828752858720601f830160051c810191878410610ac1575b601f0160051c01905b818110610ab6575061094b565b878155600101610aa9565b9091508190610aa0565b8660416024927f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b610b1191955061091392503d8088833e6103268183610cc6565b96929391506108fa9050565b50903461034457602060031936011261034457602092829135815260028452205415159051908152f35b509034610344576020600319360112610344578161051a93610b7192358152600660205220610d18565b9051918291602083526020830190610e00565b83823461065357816003193601126106535760209073ffffffffffffffffffffffffffffffffffffffff600554169051908152f35b92505034610344578260031936011261034457600180548084528185526020808501957fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf69392915b828210610c235761051a8787610c19828c0383610cc6565b5191829182610c38565b84548852968701969383019390830190610c01565b6020908160408183019282815285518094520193019160005b828110610c5f575050505090565b835185529381019392810192600101610c51565b90600182811c92168015610cbc575b6020831014610c8d57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f1691610c82565b90601f601f19910116810190811067ffffffffffffffff821117610ce957604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b9060405191826000825492610d2c84610c73565b908184526001948581169081600014610d9b5750600114610d58575b5050610d5692500383610cc6565b565b9093915060005260209081600020936000915b818310610d83575050610d5693508201013880610d48565b85548884018501529485019487945091830191610d6b565b9050610d569550602093507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b8201013880610d48565b60005b838110610df05750506000910152565b8181015183820152602001610de0565b90601f19601f602093610e1e81518092818752878088019101610ddd565b0116010190565b67ffffffffffffffff8111610ce957601f01601f191660200190565b929192610e4d82610e25565b91610e5b6040519384610cc6565b829481845281830111610e78578281602093846000960137010152565b600080fd5b6004359073ffffffffffffffffffffffffffffffffffffffff82168203610e7857565b6080600319820112610e785767ffffffffffffffff90600435828111610e785781602382011215610e785781816024610ede93600401359101610e41565b9260243573ffffffffffffffffffffffffffffffffffffffff81168103610e78579260443592606435918211610e785780602383011215610e7857816024610f2b93600401359101610e41565b90565b73ffffffffffffffffffffffffffffffffffffffff600054163303610f4f57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b81601f82011215610e78578051610fc381610e25565b92610fd16040519485610cc6565b81845260208284010111610e7857610f2b9160208085019101610ddd565b91608083830312610e785782519067ffffffffffffffff91828111610e78578361101a918601610fad565b936020810151936040820151936060830151908111610e7857610f2b9201610fad565b73ffffffffffffffffffffffffffffffffffffffff61106a60409396959496606084526060840190610e00565b951660208201520152565b9190826040910312610e7857815173ffffffffffffffffffffffffffffffffffffffff81168103610e785760209092015190565b156110b057565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f57524f4e475f4e4f4e43450000000000000000000000000000000000000000006044820152fd5b1561111557565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f555345525f414c52454144595f455849535453000000000000000000000000006044820152fd5b6001548110156111aa5760016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60190600090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000818152600260205260408120546112a357600154680100000000000000008110156112765760018101806001558110156112495790826040927fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6015560015492815260026020522055600190565b6024827f4e487b710000000000000000000000000000000000000000000000000000000081526032600452fd5b6024827f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b905090565b156112af57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4f55545f4f465f52414e474500000000000000000000000000000000000000006044820152fd5b9190820391821161131a57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b67ffffffffffffffff8111610ce95760051b6020019056fea2646970667358221220e163c4af1422e9aa97233b8618d5f6a924174190cb33256c6e62d132eb0f4dc764736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 291,
        "contract": "contracts/registry/MecenateUsers.sol:MecenateUsers",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 23199,
        "contract": "contracts/registry/MecenateUsers.sol:MecenateUsers",
        "label": "_users",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Bytes32Set)8001_storage"
      },
      {
        "astId": 23202,
        "contract": "contracts/registry/MecenateUsers.sol:MecenateUsers",
        "label": "_metadata",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(User)18786_storage"
      },
      {
        "astId": 23208,
        "contract": "contracts/registry/MecenateUsers.sol:MecenateUsers",
        "label": "verifierContract",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 23210,
        "contract": "contracts/registry/MecenateUsers.sol:MecenateUsers",
        "label": "treasuryContract",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 23214,
        "contract": "contracts/registry/MecenateUsers.sol:MecenateUsers",
        "label": "userNames",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Bytes32Set)8001_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 8000,
            "contract": "contracts/registry/MecenateUsers.sol:MecenateUsers",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)7807_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)7807_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 7802,
            "contract": "contracts/registry/MecenateUsers.sol:MecenateUsers",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 7806,
            "contract": "contracts/registry/MecenateUsers.sol:MecenateUsers",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(User)18786_storage": {
        "encoding": "inplace",
        "label": "struct Structures.User",
        "members": [
          {
            "astId": 18785,
            "contract": "contracts/registry/MecenateUsers.sol:MecenateUsers",
            "label": "vaultId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}