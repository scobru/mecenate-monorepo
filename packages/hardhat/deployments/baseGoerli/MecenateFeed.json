{
  "address": "0xE9153dDc0397542C36C3D4dD24efE234CD77c167",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usersModuleContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factoryContract",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_version",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "evmAddress",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "sismoVaultId",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "publicKey",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Structures.User",
              "name": "creator",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum Structures.PostStatus",
                      "name": "status",
                      "type": "uint8"
                    },
                    {
                      "internalType": "enum Structures.PostType",
                      "name": "postType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "creationTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "duration",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum Structures.Tokens",
                      "name": "tokenId",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct Structures.PostSettings",
                  "name": "settings",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "stake",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "payment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "punishment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "penalty",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structures.PostEscrow",
                  "name": "escrow",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes",
                      "name": "encryptedData",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "encryptedKey",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "decryptedData",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Structures.PostEncryptedData",
                  "name": "data",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Structures.PostData",
              "name": "postdata",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct Structures.Post",
          "name": "post",
          "type": "tuple"
        }
      ],
      "name": "Accepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "evmAddress",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "sismoVaultId",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "publicKey",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Structures.User",
              "name": "creator",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum Structures.PostStatus",
                      "name": "status",
                      "type": "uint8"
                    },
                    {
                      "internalType": "enum Structures.PostType",
                      "name": "postType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "creationTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "duration",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum Structures.Tokens",
                      "name": "tokenId",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct Structures.PostSettings",
                  "name": "settings",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "stake",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "payment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "punishment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "penalty",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structures.PostEscrow",
                  "name": "escrow",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes",
                      "name": "encryptedData",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "encryptedKey",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "decryptedData",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Structures.PostEncryptedData",
                  "name": "data",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Structures.PostData",
              "name": "postdata",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct Structures.Post",
          "name": "post",
          "type": "tuple"
        }
      ],
      "name": "Created",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum Structures.Tokens",
          "name": "tokenID",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDeposit",
          "type": "uint256"
        }
      ],
      "name": "DepositDecreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum Structures.Tokens",
          "name": "tokenID",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDeposit",
          "type": "uint256"
        }
      ],
      "name": "DepositIncreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "evmAddress",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "sismoVaultId",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "publicKey",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Structures.User",
              "name": "creator",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum Structures.PostStatus",
                      "name": "status",
                      "type": "uint8"
                    },
                    {
                      "internalType": "enum Structures.PostType",
                      "name": "postType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "creationTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "duration",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum Structures.Tokens",
                      "name": "tokenId",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct Structures.PostSettings",
                  "name": "settings",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "stake",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "payment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "punishment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "penalty",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structures.PostEscrow",
                  "name": "escrow",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes",
                      "name": "encryptedData",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "encryptedKey",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "decryptedData",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Structures.PostEncryptedData",
                  "name": "data",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Structures.PostData",
              "name": "postdata",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct Structures.Post",
          "name": "post",
          "type": "tuple"
        }
      ],
      "name": "Finalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "evmAddress",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "sismoVaultId",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "publicKey",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Structures.User",
              "name": "creator",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum Structures.PostStatus",
                      "name": "status",
                      "type": "uint8"
                    },
                    {
                      "internalType": "enum Structures.PostType",
                      "name": "postType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "creationTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "duration",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum Structures.Tokens",
                      "name": "tokenId",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct Structures.PostSettings",
                  "name": "settings",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "stake",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "payment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "punishment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "penalty",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structures.PostEscrow",
                  "name": "escrow",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes",
                      "name": "encryptedData",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "encryptedKey",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "decryptedData",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Structures.PostEncryptedData",
                  "name": "data",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Structures.PostData",
              "name": "postdata",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct Structures.Post",
          "name": "post",
          "type": "tuple"
        }
      ],
      "name": "Invalid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "evmAddress",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "sismoVaultId",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "publicKey",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Structures.User",
              "name": "creator",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum Structures.PostStatus",
                      "name": "status",
                      "type": "uint8"
                    },
                    {
                      "internalType": "enum Structures.PostType",
                      "name": "postType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "creationTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "duration",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum Structures.Tokens",
                      "name": "tokenId",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct Structures.PostSettings",
                  "name": "settings",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "stake",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "payment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "punishment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "penalty",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structures.PostEscrow",
                  "name": "escrow",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes",
                      "name": "encryptedData",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "encryptedKey",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "decryptedData",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Structures.PostEncryptedData",
                  "name": "data",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Structures.PostData",
              "name": "postdata",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct Structures.Post",
          "name": "post",
          "type": "tuple"
        }
      ],
      "name": "MadePublic",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "evmAddress",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "sismoVaultId",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "publicKey",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Structures.User",
              "name": "creator",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum Structures.PostStatus",
                      "name": "status",
                      "type": "uint8"
                    },
                    {
                      "internalType": "enum Structures.PostType",
                      "name": "postType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "creationTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "duration",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum Structures.Tokens",
                      "name": "tokenId",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct Structures.PostSettings",
                  "name": "settings",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "stake",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "payment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "punishment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "penalty",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structures.PostEscrow",
                  "name": "escrow",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes",
                      "name": "encryptedData",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "encryptedKey",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "decryptedData",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Structures.PostEncryptedData",
                  "name": "data",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Structures.PostData",
              "name": "postdata",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct Structures.Post",
          "name": "post",
          "type": "tuple"
        }
      ],
      "name": "Renounced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum Structures.Tokens",
          "name": "tokenId",
          "type": "uint8"
        }
      ],
      "name": "StakeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "StakeBurned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum Structures.Tokens",
          "name": "tokenId",
          "type": "uint8"
        }
      ],
      "name": "StakeTaken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "evmAddress",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "sismoVaultId",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "publicKey",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Structures.User",
              "name": "creator",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum Structures.PostStatus",
                      "name": "status",
                      "type": "uint8"
                    },
                    {
                      "internalType": "enum Structures.PostType",
                      "name": "postType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "creationTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "duration",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum Structures.Tokens",
                      "name": "tokenId",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct Structures.PostSettings",
                  "name": "settings",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "stake",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "payment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "punishment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "penalty",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structures.PostEscrow",
                  "name": "escrow",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes",
                      "name": "encryptedData",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "encryptedKey",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "decryptedData",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Structures.PostEncryptedData",
                  "name": "data",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Structures.PostData",
              "name": "postdata",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct Structures.Post",
          "name": "post",
          "type": "tuple"
        }
      ],
      "name": "Valid",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "enum Structures.Tokens",
          "name": "tokenId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "paymentAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "acceptPost",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Structures.Tokens",
          "name": "tokenId",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_funder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountToAdd",
          "type": "uint256"
        }
      ],
      "name": "addStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "encryptedHash",
          "type": "bytes"
        },
        {
          "internalType": "enum Structures.PostType",
          "name": "postType",
          "type": "uint8"
        },
        {
          "internalType": "enum Structures.PostDuration",
          "name": "postDuration",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakeAmount",
          "type": "uint256"
        },
        {
          "internalType": "enum Structures.Tokens",
          "name": "tokenId",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "createPost",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "evmAddress",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "sismoVaultId",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "publicKey",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Structures.User",
              "name": "creator",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum Structures.PostStatus",
                      "name": "status",
                      "type": "uint8"
                    },
                    {
                      "internalType": "enum Structures.PostType",
                      "name": "postType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "creationTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "duration",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum Structures.Tokens",
                      "name": "tokenId",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct Structures.PostSettings",
                  "name": "settings",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "stake",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "payment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "punishment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "penalty",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structures.PostEscrow",
                  "name": "escrow",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes",
                      "name": "encryptedData",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "encryptedKey",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "decryptedData",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Structures.PostEncryptedData",
                  "name": "data",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Structures.PostData",
              "name": "postdata",
              "type": "tuple"
            }
          ],
          "internalType": "struct Structures.Post",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "valid",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "punishment",
          "type": "uint256"
        }
      ],
      "name": "finalizePost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBuyerStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPaymentRequested",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSellerStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Structures.Tokens",
          "name": "tokenId",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "getStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakeRequested",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStatus",
      "outputs": [
        {
          "internalType": "enum Structures.PostStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenId",
      "outputs": [
        {
          "internalType": "enum Structures.Tokens",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenIdAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "post",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "evmAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "sismoVaultId",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "publicKey",
              "type": "bytes"
            }
          ],
          "internalType": "struct Structures.User",
          "name": "creator",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum Structures.PostStatus",
                  "name": "status",
                  "type": "uint8"
                },
                {
                  "internalType": "enum Structures.PostType",
                  "name": "postType",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "creationTimeStamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "endTimeStamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "duration",
                  "type": "uint256"
                },
                {
                  "internalType": "enum Structures.Tokens",
                  "name": "tokenId",
                  "type": "uint8"
                }
              ],
              "internalType": "struct Structures.PostSettings",
              "name": "settings",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "stake",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "payment",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "punishment",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "penalty",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Structures.PostEscrow",
              "name": "escrow",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bytes",
                  "name": "encryptedData",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "encryptedKey",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "decryptedData",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Structures.PostEncryptedData",
              "name": "data",
              "type": "tuple"
            }
          ],
          "internalType": "struct Structures.PostData",
          "name": "postdata",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "postCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renouncePost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "decryptedData",
          "type": "bytes"
        }
      ],
      "name": "revealData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "encryptedKey",
          "type": "bytes"
        }
      ],
      "name": "submitHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Structures.Tokens",
          "name": "tokenId",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "sismoConnectResponse",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "takeFullStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Structures.Tokens",
          "name": "tokenId",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountToTake",
          "type": "uint256"
        }
      ],
      "name": "takeStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa66a9cc5535a78475e03cfc3050f4d6ef298323aa36e462c271b1f593173fe09",
  "receipt": {
    "to": null,
    "from": "0x8aA5F726d9F868a21a8bd748E2f1E43bA31eb670",
    "contractAddress": "0xE9153dDc0397542C36C3D4dD24efE234CD77c167",
    "transactionIndex": 1,
    "gasUsed": "4507271",
    "logsBloom": "0x
    "blockHash": "0xc364db86398b3fec6734fc14547ced24751e42114d6f24f9799d92abd6e2d894",
    "transactionHash": "0xa66a9cc5535a78475e03cfc3050f4d6ef298323aa36e462c271b1f593173fe09",
    "logs": [],
    "blockNumber": 11146090,
    "cumulativeGasUsed": "4556912",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000000000000000000000000000000000",
    "0xb27dc56e80DA00Fe939FC984fDb55b6E6107B5E7",
    "0xeC155124BCFdA12d9752C142B534779389F08784",
    "v2.0.0"
  ],
  "numDeployments": 18,
  "solcInputHash": "10d6fd1ef9abb518d5da7186a8a68ad2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usersModuleContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factoryContract\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Accepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDeposit\",\"type\":\"uint256\"}],\"name\":\"DepositDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDeposit\",\"type\":\"uint256\"}],\"name\":\"DepositIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Invalid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"MadePublic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Renounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"name\":\"StakeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"name\":\"StakeTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Valid\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"acceptPost\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_funder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToAdd\",\"type\":\"uint256\"}],\"name\":\"addStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encryptedHash\",\"type\":\"bytes\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostDuration\",\"name\":\"postDuration\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"createPost\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.Post\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"}],\"name\":\"finalizePost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyerStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaymentRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellerStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenIdAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"post\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"name\":\"revealData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"}],\"name\":\"submitHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"takeFullStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToTake\",\"type\":\"uint256\"}],\"name\":\"takeStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/evm/features/MecenateFeed.sol\":\"MecenateFeed\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/evm/features/MecenateFeed.sol\":{\"content\":\"/**\\n * @title MecenateFeed\\n * @dev This contract implements the MecenateFeed feature, which allows users to create and manage posts for crowdfunding campaigns.\\n * The contract inherits from several modules that provide functionality for post creation, acceptance, submission, finalization, and renouncement.\\n * The contract also provides several view functions to retrieve information about a post's buyer payment, seller deposit, seller stake, buyer stake, payment requested, post status, and post count.\\n */\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../modules/Events.sol\\\";\\nimport \\\"../modules/Creation.sol\\\";\\nimport \\\"../modules/Acceptance.sol\\\";\\nimport \\\"../modules/Submission.sol\\\";\\nimport \\\"../modules/Finalization.sol\\\";\\nimport \\\"../modules/Renounce.sol\\\";\\n\\ncontract MecenateFeed is\\n    Events,\\n    Creation,\\n    Acceptance,\\n    Renounce,\\n    Submission,\\n    Finalization\\n{\\n    constructor(\\n        address _owner,\\n        address _usersModuleContract,\\n        address _factoryContract,\\n        string memory _version\\n    ) Data(_usersModuleContract, _factoryContract, _version) {\\n        owner = _owner;\\n    }\\n}\\n\",\"keccak256\":\"0x3cf05c83a05f2b647ec179e1261fcc1718729a367ddb975b0b0ecdf5a5863092\",\"license\":\"MIT\"},\"contracts/evm/interfaces/IMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n// import IERC20 from openzeppelin\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMUSE is IERC20 {\\n    function increaseAllowance(\\n        address spender,\\n        uint256 addedValue\\n    ) external returns (bool);\\n\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 subtractedValue\\n    ) external returns (bool);\\n\\n    function mint(uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x8b0a4012a1cd0815460bb3d15278671589bb85003ff2c38315701b3f2228c633\"},\"contracts/evm/interfaces/IMecenateFeed.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateFeed {\\n    function getTotalStaked() external view returns (uint256);\\n\\n    function postCount() external view returns (uint256);\\n\\n    function acceptPost(\\n        Structures.Tokens,\\n        uint256 _amount,\\n        address _from\\n    ) external payable;\\n\\n    function getSellerStake() external view returns (uint256);\\n\\n    function getBuyerStake() external view returns (uint256);\\n\\n    function getPaymentRequested() external view returns (uint256);\\n\\n    function getStakeRequested() external view returns (uint256);\\n\\n    function getStatus() external view returns (Structures.PostStatus status);\\n\\n    function getTokenId() external view returns (Structures.Tokens tokenId);\\n\\n    function owner() external view returns (address);\\n\\n    function version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x7eede94ce96f84da172bcd7df3625b818be25c3c94f5f01b4aa631c80c912777\"},\"contracts/evm/interfaces/IMecenateFeedFactory.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\ninterface IMecenateFeedFactory {\\n    function owner() external view returns (address payable);\\n\\n    function treasuryContract() external view returns (address payable);\\n\\n    function identityContract() external view returns (address);\\n\\n    function feeds() external view returns (address[] memory);\\n\\n    function contractCounter() external view returns (uint256);\\n\\n    function isFeed(address _feed) external view returns (bool);\\n\\n    function museToken() external view returns (address);\\n\\n    function wethToken() external view returns (address);\\n\\n    function daiToken() external view returns (address);\\n\\n    function router() external view returns (address);\\n\\n    function getRouterFee(uint8 tokenId) external view returns (uint24);\\n\\n    function burnEnabled() external view returns (bool);\\n\\n    function version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x41d5504fc9a6a8dad90b81c593010a4928c7cedf64853433eb1075daafa5ffeb\"},\"contracts/evm/interfaces/IMecenateTreasury.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateTreasury {\\r\\n    function globalFee() external view returns (uint256);\\r\\n\\r\\n    function fixedFee() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf544878bba8e01c837110d06eac56042957d59c593ba9083f686ef02aa9276a1\"},\"contracts/evm/interfaces/IMecenateUsers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateUsers {\\n    function registerUser(bytes memory metadata) external;\\n\\n    function getUsers() external view returns (address[] memory);\\n\\n    function getUserCount() external view returns (uint256);\\n\\n    function getUserAt(uint256 index) external view returns (address);\\n\\n    function checkifUserExist(address userAddress) external view returns (bool);\\n\\n    function getPaginatedUsers(\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) external view returns (address[] memory);\\n\\n    function getUserMetadata(\\n        address userAddress\\n    ) external view returns (Structures.User memory);\\n\\n    function getUserPublicKey(\\n        address userAddress\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xf0ff65dbfea12d90cf106325b9478e31b284045327e5f0974db5374b8789e93c\",\"license\":\"MIT\"},\"contracts/evm/interfaces/IWETH.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function withdraw(uint256) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xeb4bd6c56a346f12ec3d681183d613795c151709e834d69ef58f13fd6d7edf62\"},\"contracts/evm/library/Structures.sol\":{\"content\":\"/**\\n * @title Structures\\n * @dev This library defines various data structures used in the Mecenate platform.\\n */\\npragma solidity 0.8.19;\\n\\nlibrary Structures {\\n    enum PostStatus {\\n        Waiting,\\n        Proposed,\\n        Accepted,\\n        Submitted,\\n        Finalized,\\n        Punished,\\n        Revealed,\\n        Renounced\\n    }\\n\\n    enum Tokens {\\n        NaN,\\n        MUSE,\\n        DAI\\n    }\\n\\n    enum PostType {\\n        Text,\\n        Image,\\n        Video,\\n        Audio,\\n        File\\n    }\\n    enum PostDuration {\\n        OneDay,\\n        ThreeDays,\\n        OneWeek,\\n        TwoWeeks,\\n        OneMonth\\n    }\\n\\n    struct FeedSettings {\\n        uint256 punishmentRatio;\\n        uint256 postCount;\\n        address usersModuleContract;\\n        address factoryContract;\\n        address router;\\n        string version;\\n    }\\n\\n    struct FactorySettings {\\n        address treasuryContract;\\n        address usersModuleContract;\\n        address easContract;\\n        address museToken;\\n        address daiToken;\\n        address wethToken;\\n        address router;\\n    }\\n\\n    /**\\n     * @dev Struct representing a post on the Mecenate platform.\\n     */\\n    struct Post {\\n        User creator;\\n        PostData postdata;\\n    }\\n\\n    /**\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\n     */\\n    struct PostData {\\n        PostSettings settings;\\n        PostEscrow escrow;\\n        PostEncryptedData data;\\n    }\\n\\n    /**\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\n     */\\n    struct PostEncryptedData {\\n        bytes encryptedData;\\n        bytes encryptedKey;\\n        bytes decryptedData;\\n    }\\n\\n    /**\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettings {\\n        PostStatus status;\\n        PostType postType;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n        uint256 duration;\\n        Tokens tokenId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the private settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettingPrivate {\\n        address buyerAddress;\\n        address sellerAddress;\\n    }\\n\\n    /**\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\n     */\\n    struct PostEscrow {\\n        uint256 stake;\\n        uint256 payment;\\n        uint256 punishment;\\n        uint256 penalty;\\n    }\\n\\n    /**\\n     * @dev Struct representing a user on the Mecenate platform.\\n     */\\n    struct User {\\n        address evmAddress;\\n        bytes sismoVaultId;\\n        bytes publicKey;\\n    }\\n\\n    /**\\n     * @dev Struct representing a feed on the Mecenate platform.\\n     */\\n    struct Feed {\\n        address contractAddress;\\n        address owner;\\n        uint256 sellerStake;\\n        uint256 buyerStake;\\n        uint256 totalStake;\\n        uint256 postCount;\\n        uint256 paymentRequested;\\n        uint256 stakeRequested;\\n        PostStatus status;\\n        Tokens tokenId;\\n        string version;\\n    }\\n\\n    /**\\n     * @dev Struct representing a bay request on the Mecenate platform.\\n     */\\n    struct BayRequest {\\n        bytes request;\\n        uint256 payment;\\n        uint256 stake;\\n        address postAddress;\\n        bool accepted;\\n        uint256 postCount;\\n        Tokens tokenId;\\n        address buyerAddress;\\n    }\\n}\\n\",\"keccak256\":\"0xbb274940876e7ae5561fff2529195525643ae236818eef8134a31db129080b2e\"},\"contracts/evm/modules/Acceptance.sol\":{\"content\":\"/**\\n * @title Acceptance\\n * @dev This contract is an abstract contract that inherits from Events and Staking contracts. It provides a function to accept a post and add stake to the post. The function accepts a Sismo Connect response as a parameter and verifies the user existence. It also checks if the user is not the seller and if the post is in Proposed status. If the post has an escrow payment, it checks if the buyer has paid enough and adds the payment to the post's escrow. If the post does not have an escrow payment, it requires a payment from the buyer and adds it to the post's escrow. Finally, it changes the post status to Accepted and emits an Accepted event.\\n */\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"./Events.sol\\\";\\nimport \\\"./Staking.sol\\\";\\n\\nabstract contract Acceptance is Events, Staking {\\n    function acceptPost(\\n        Structures.Tokens tokenId,\\n        uint256 paymentAmount,\\n        address funder\\n    ) external payable virtual {\\n        require(\\n            validStatuses[uint8(Structures.PostStatus.Proposed)],\\n            \\\"INVALID_STATUS\\\"\\n        );\\n\\n        _checkToken(tokenId);\\n\\n        uint256 amountToAdd = tokenId == Structures.Tokens.NaN\\n            ? msg.value\\n            : paymentAmount;\\n\\n        // Use local variable for repeated calls\\n        uint256 sellerStake = Deposit._getDeposit(\\n            tokenId,\\n            postSettingPrivate.sellerAddress\\n        );\\n\\n        require(sellerStake >= post.postdata.escrow.stake, \\\"STAKE_INCORRECT\\\");\\n\\n        require(\\n            IMecenateUsers(settings.usersModuleContract).checkifUserExist(\\n                msg.sender\\n            ),\\n            \\\"USERT_NOT_EXIST\\\"\\n        );\\n\\n        require(\\n            msg.sender != postSettingPrivate.sellerAddress,\\n            \\\"YOU_ARE_THE_SELLER\\\"\\n        );\\n\\n        if (post.postdata.escrow.payment > 0) {\\n            require(\\n                paymentAmount >= post.postdata.escrow.payment,\\n                \\\"NOT_ENOUGH_PAYMENT\\\"\\n            );\\n        } else {\\n            require(msg.value > 0, \\\"ZERO_MSGVALUE\\\");\\n\\n            require(paymentAmount > 0, \\\"ZERO_PAYMENT\\\");\\n        }\\n\\n        uint256 payment = _addStake(tokenId, msg.sender, funder, amountToAdd);\\n\\n        post.postdata.escrow.payment = payment;\\n\\n        post.postdata.settings.status = Structures.PostStatus.Accepted;\\n\\n        _changeStatus(Structures.PostStatus.Accepted);\\n\\n        postSettingPrivate.buyerAddress = msg.sender;\\n\\n        emit Accepted(post);\\n    }\\n}\\n\",\"keccak256\":\"0x85a40bcac6f20ce758933501df0b97d1d2917c1fd36e5ca4ec44f8313a5285e5\",\"license\":\"MIT\"},\"contracts/evm/modules/BurnDAI.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"./BurnMUSE.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"../interfaces/IWETH.sol\\\";\\n\\nabstract contract BurnDAI is BurnMUSE {\\n    using SafeMath for uint256;\\n\\n    function _burnFrom(\\n        address from,\\n        uint256 value\\n    ) internal override returns (bool success) {\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\n            .transferFrom(from, address(this), value);\\n\\n        _burn(value);\\n\\n        return true;\\n    }\\n\\n    function _burnDai(uint256 value) internal returns (bool success) {\\n        // approve uniswap for token transfer\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\n            .approve(settings.router, value);\\n\\n        // swap IMecenateFeedFactory(settings.factoryContract).daiToken() for MUSE\\n        uint256 tokens_sold = value;\\n\\n        uint256 tokens_bought = _swapTokensForToken(\\n            IMecenateFeedFactory(settings.factoryContract).daiToken(),\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\n            IMecenateFeedFactory(settings.factoryContract).getRouterFee(0),\\n            tokens_sold\\n        );\\n\\n        uint256 tokens_sold_to_muse = _swapTokensForToken(\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\n            IMecenateFeedFactory(settings.factoryContract).museToken(),\\n            IMecenateFeedFactory(settings.factoryContract).getRouterFee(1),\\n            tokens_bought\\n        );\\n\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).museToken())\\n            .approve(\\n                IMecenateFeedFactory(settings.factoryContract).museToken(),\\n                tokens_sold_to_muse\\n            );\\n\\n        // burn MUSE\\n        BurnMUSE._burn(tokens_sold_to_muse);\\n\\n        return true;\\n    }\\n\\n    function _burnWeth(uint256 value) internal returns (bool success) {\\n        // deposit IMecenateFeedFactory(settings.factoryContract).wethToken()\\n        IWETH(IMecenateFeedFactory(settings.factoryContract).wethToken())\\n            .deposit{value: value}();\\n\\n        // approve uniswap for token transfer\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).wethToken())\\n            .approve(settings.router, value);\\n\\n        // swap IMecenateFeedFactory(settings.factoryContract).wethToken() for MUSE\\n        uint256 tokens_sold = value;\\n\\n        uint256 tokens_bought = _swapTokensForToken(\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\n            IMecenateFeedFactory(settings.factoryContract).museToken(),\\n            IMecenateFeedFactory(settings.factoryContract).getRouterFee(1),\\n            tokens_sold\\n        );\\n\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).museToken())\\n            .approve(\\n                IMecenateFeedFactory(settings.factoryContract).museToken(),\\n                tokens_bought\\n            );\\n\\n        // burn MUSE\\n        BurnMUSE._burn(tokens_bought);\\n\\n        return true;\\n    }\\n\\n    function getTokenAddress()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address token)\\n    {\\n        return IMecenateFeedFactory(settings.factoryContract).daiToken();\\n    }\\n\\n    function getExchangeAddress()\\n        internal\\n        view\\n        override\\n        returns (address exchange)\\n    {\\n        exchange = settings.router;\\n    }\\n\\n    function _swapTokensForToken(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountIn\\n    ) internal returns (uint256 amountOut) {\\n        // Check and approve allowance\\n        uint256 allowance = IERC20(tokenIn).allowance(\\n            address(this),\\n            settings.router\\n        );\\n        if (allowance < amountIn) {\\n            IERC20(tokenIn).approve(settings.router, type(uint256).max);\\n        }\\n\\n        // Prepare parameters\\n        address recipient = address(this);\\n        uint256 deadline = block.timestamp + 60; // 15 seconds from the current block timestamp\\n\\n        // Perform the swap\\n        // Refer to the Uniswap V3 documentation for details on the params.\\n        amountOut = ISwapRouter(settings.router).exactInputSingle(\\n            ISwapRouter.ExactInputSingleParams({\\n                tokenIn: tokenIn,\\n                tokenOut: tokenOut,\\n                fee: fee,\\n                recipient: recipient,\\n                deadline: deadline,\\n                amountIn: amountIn,\\n                amountOutMinimum: 0, // you may want to set a minimum here\\n                sqrtPriceLimitX96: 0\\n            })\\n        );\\n\\n        return amountOut;\\n    }\\n}\\n\",\"keccak256\":\"0xa69462e962a3be48c3514c746d791c7a870247e8e441a2d7a11b5771ec8e0d23\"},\"contracts/evm/modules/BurnMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\nimport \\\"../interfaces/IMUSE.sol\\\";\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\nimport \\\"./Events.sol\\\";\\n\\nabstract contract BurnMUSE is Events {\\n    function _burn(uint256 value) internal virtual returns (bool success) {\\n        IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken()).burn(\\n            value\\n        );\\n        return true;\\n    }\\n\\n    function _burnFrom(\\n        address from,\\n        uint256 value\\n    ) internal virtual returns (bool success) {\\n        IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken())\\n            .transferFrom(from, address(this), value);\\n        _burn(value);\\n        return true;\\n    }\\n\\n    function getTokenAddress() internal view virtual returns (address token) {\\n        return IMecenateFeedFactory(settings.factoryContract).museToken();\\n    }\\n\\n    function getExchangeAddress()\\n        internal\\n        view\\n        virtual\\n        returns (address exchange)\\n    {\\n        exchange = IMecenateFeedFactory(settings.factoryContract).router();\\n    }\\n}\\n\",\"keccak256\":\"0x052049c27f8e98f27fd3d237157e4700d5f5c313343d1cd734614beefa4ccfc6\"},\"contracts/evm/modules/Creation.sol\":{\"content\":\"/**\\n * @title Creation\\n * @dev This contract is an abstract contract that inherits from Staking contract. It provides a function to create a post with the given parameters. The function requires the user to be the owner of the post and to have a stake. The post can have different durations and types. The function returns the created post.\\n */\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"./Staking.sol\\\";\\n\\nabstract contract Creation is Staking {\\n    function createPost(\\n        bytes memory encryptedHash,\\n        Structures.PostType postType,\\n        Structures.PostDuration postDuration,\\n        uint256 payment,\\n        uint256 stakeAmount,\\n        Structures.Tokens tokenId,\\n        address funder\\n    )\\n        external\\n        payable\\n        onlyValidTokenID(tokenId)\\n        returns (Structures.Post memory)\\n    {\\n        require(msg.sender == owner);\\n\\n        require(\\n            IMecenateUsers(settings.usersModuleContract).checkifUserExist(\\n                msg.sender\\n            ),\\n            \\\"USER_NOT_EXIST\\\"\\n        );\\n\\n        require(\\n            validStatuses[uint8(post.postdata.settings.status)],\\n            \\\"INVALID_STATUS\\\"\\n        );\\n\\n        require(stakeAmount > 0, \\\"STAKE_AMOUNT_ZERO\\\");\\n\\n        require(payment > 0, \\\"PAYMENT_ZERO\\\");\\n\\n        if (tokenId == Structures.Tokens.NaN) {\\n            require(msg.value == stakeAmount, \\\"WRONG_MSG_VALUE\\\");\\n        }\\n\\n        uint256 duration = postDurationToDays[uint8(postDuration)];\\n\\n        uint256 stake = _addStake(tokenId, msg.sender, funder, stakeAmount);\\n\\n        // Change status to Proposed\\n        _changeStatus(Structures.PostStatus.Proposed);\\n\\n        Structures.User memory creator = IMecenateUsers(\\n            settings.usersModuleContract\\n        ).getUserMetadata(msg.sender);\\n\\n        // Initialize the new Post struct with named arguments for clarity\\n        Structures.Post memory newPost = Structures.Post({\\n            creator: creator,\\n            postdata: Structures.PostData({\\n                settings: Structures.PostSettings({\\n                    postType: postType,\\n                    status: Structures.PostStatus.Proposed,\\n                    creationTimeStamp: block.timestamp,\\n                    endTimeStamp: 0,\\n                    duration: duration,\\n                    tokenId: tokenId\\n                }),\\n                escrow: Structures.PostEscrow({\\n                    stake: stake,\\n                    payment: payment,\\n                    punishment: 0,\\n                    penalty: 0\\n                }),\\n                data: Structures.PostEncryptedData({\\n                    encryptedData: encryptedHash,\\n                    encryptedKey: ZEROHASH,\\n                    decryptedData: ZEROHASH\\n                })\\n            })\\n        });\\n\\n        // Update storage and emit event\\n        post = newPost;\\n\\n        settings.postCount++;\\n\\n        postSettingPrivate.sellerAddress = msg.sender;\\n\\n        emit Created(newPost);\\n\\n        return newPost;\\n    }\\n}\\n\",\"keccak256\":\"0xa9574c986ebbc73518fb8557cbbcf6e326480906ffc93e1ede2c05c904b8e470\",\"license\":\"MIT\"},\"contracts/evm/modules/Data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../interfaces/IMecenateFeed.sol\\\";\\nimport \\\"../interfaces/IMecenateUsers.sol\\\";\\nimport \\\"../interfaces/IMecenateTreasury.sol\\\";\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\n\\n/**\\n * @title Data\\n * @dev This contract stores data related to Mecenate posts and provides functions to interact with it.\\n */\\ncontract Data {\\n    bytes internal constant ZEROHASH = \\\"0x00\\\";\\n\\n    address public owner;\\n\\n    Structures.Post public post;\\n\\n    Structures.PostSettingPrivate internal postSettingPrivate;\\n\\n    Structures.FeedSettings internal settings;\\n\\n    mapping(uint8 => uint256) internal postDurationToDays;\\n\\n    mapping(uint8 => bool) internal validStatuses;\\n\\n    constructor(\\n        address usersModuleContract,\\n        address factoryContract,\\n        string memory ver\\n    ) {\\n        settings.punishmentRatio = 100000000000000000; // Constant value\\n        settings.postCount = 0; // Initialize postCount to 0\\n        settings.usersModuleContract = usersModuleContract;\\n        settings.factoryContract = msg.sender;\\n        settings.router = IMecenateFeedFactory(factoryContract).router();\\n        post.postdata.settings.status = Structures.PostStatus.Waiting;\\n\\n        postDurationToDays[uint8(Structures.PostDuration.OneDay)] = 1 days;\\n        postDurationToDays[uint8(Structures.PostDuration.ThreeDays)] = 3 days;\\n        postDurationToDays[uint8(Structures.PostDuration.OneWeek)] = 7 days;\\n        postDurationToDays[uint8(Structures.PostDuration.TwoWeeks)] = 14 days;\\n        postDurationToDays[uint8(Structures.PostDuration.OneMonth)] = 30 days;\\n        validStatuses[uint8(Structures.PostStatus.Waiting)] = true;\\n\\n        settings.version = ver;\\n    }\\n\\n    function version() external view returns (string memory) {\\n        return settings.version;\\n    }\\n\\n    function _changeStatus(Structures.PostStatus newStatus) internal {\\n        validStatuses[uint8(post.postdata.settings.status)] = false;\\n        validStatuses[uint8(newStatus)] = true;\\n        post.postdata.settings.status = newStatus;\\n    }\\n\\n    function getStatus() external view returns (Structures.PostStatus) {\\n        return post.postdata.settings.status;\\n    }\\n\\n    function getTokenId() external view returns (Structures.Tokens) {\\n        return post.postdata.settings.tokenId;\\n    }\\n\\n    function getTokenIdAddress() public view returns (address) {\\n        if (post.postdata.settings.tokenId == Structures.Tokens.MUSE) {\\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\\n        } else if (post.postdata.settings.tokenId == Structures.Tokens.DAI) {\\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    function _checkToken(Structures.Tokens _token) internal view {\\n        require(_token == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n    }\\n\\n    function getPaymentRequested() external view returns (uint256) {\\n        return post.postdata.escrow.payment;\\n    }\\n\\n    function getStakeRequested() external view returns (uint256) {\\n        return post.postdata.escrow.stake;\\n    }\\n\\n    function postCount() external view returns (uint256) {\\n        return settings.postCount;\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xd7edc789285285841d5f2c2bd205d218a67240c605640be2f99a972e9698fdf3\",\"license\":\"MIT\"},\"contracts/evm/modules/Deposit.sol\":{\"content\":\"pragma solidity 0.8.19;\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./TokenManager.sol\\\";\\n\\ncontract Deposit {\\n    using SafeMath for uint256;\\n\\n    mapping(uint256 => mapping(address => uint256)) private _deposit;\\n\\n    event DepositIncreased(\\n        Structures.Tokens tokenID,\\n        address user,\\n        uint256 amount,\\n        uint256 newDeposit\\n    );\\n    event DepositDecreased(\\n        Structures.Tokens tokenID,\\n        address user,\\n        uint256 amount,\\n        uint256 newDeposit\\n    );\\n\\n    function _increaseDeposit(\\n        Structures.Tokens tokenID,\\n        address user,\\n        uint256 amountToAdd\\n    ) internal returns (uint256 newDeposit) {\\n        // calculate new deposit amount\\n        newDeposit = _deposit[uint256(tokenID)][user].add(amountToAdd);\\n\\n        // set new stake to storage\\n        _deposit[uint256(tokenID)][user] = newDeposit;\\n\\n        // emit event\\n        emit DepositIncreased(tokenID, user, amountToAdd, newDeposit);\\n\\n        // return\\n        return newDeposit;\\n    }\\n\\n    function _decreaseDeposit(\\n        Structures.Tokens tokenID,\\n        address user,\\n        uint256 amountToRemove\\n    ) internal returns (uint256 newDeposit) {\\n        // get current deposit\\n        uint256 currentDeposit = _deposit[uint256(tokenID)][user];\\n\\n        // check if sufficient deposit\\n        require(currentDeposit >= amountToRemove, \\\"INSUFFICIENT_DEPOSIT\\\");\\n\\n        // calculate new deposit amount\\n        newDeposit = currentDeposit.sub(amountToRemove);\\n\\n        // set new stake to storage\\n        _deposit[uint256(tokenID)][user] = newDeposit;\\n\\n        // emit event\\n        emit DepositDecreased(tokenID, user, amountToRemove, newDeposit);\\n\\n        // return\\n        return newDeposit;\\n    }\\n\\n    function _clearDeposit(\\n        Structures.Tokens tokenID,\\n        address user\\n    ) internal returns (uint256 amountRemoved) {\\n        // get current deposit\\n        uint256 currentDeposit = _deposit[uint256(tokenID)][user];\\n\\n        // remove deposit\\n        _decreaseDeposit(tokenID, user, currentDeposit);\\n\\n        // return\\n        return currentDeposit;\\n    }\\n\\n    function _getDeposit(\\n        Structures.Tokens tokenID,\\n        address user\\n    ) internal view returns (uint256 deposit) {\\n        return _deposit[uint256(tokenID)][user];\\n    }\\n}\\n\",\"keccak256\":\"0xbde50573d2e5a22daecdfdb1d457c4f50b7ea16e18a03eac04013ce10f269d36\"},\"contracts/evm/modules/Events.sol\":{\"content\":\"/**\\r\\n * @title Events\\r\\n * @dev This abstract contract defines the events related to the Mecenate platform's post lifecycle.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./Data.sol\\\";\\r\\n\\r\\nabstract contract Events is Data {\\r\\n    event Created(Structures.Post post);\\r\\n    event Accepted(Structures.Post post);\\r\\n    event Valid(Structures.Post post);\\r\\n    event Invalid(Structures.Post post);\\r\\n    event Finalized(Structures.Post post);\\r\\n    event MadePublic(Structures.Post post);\\r\\n    event Renounced(Structures.Post post);\\r\\n}\\r\\n\",\"keccak256\":\"0x3aeaf067b1f9010a2456df46fb54d4727b3a24082b1446ac9266dbcdd8c838f6\"},\"contracts/evm/modules/Finalization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\nimport \\\"./Staking.sol\\\";\\n\\nabstract contract Finalization is Staking {\\n    function finalizePost(bool valid, uint256 punishment) external virtual {\\n        require(msg.sender == postSettingPrivate.buyerAddress, \\\"NOT_SELLER\\\");\\n\\n        require(\\n            post.postdata.settings.status == Structures.PostStatus.Submitted,\\n            \\\"NOT_SUBMITTED\\\"\\n        );\\n\\n        // Common contract addresses and variables\\n        address treasuryContract = IMecenateFeedFactory(\\n            settings.factoryContract\\n        ).treasuryContract();\\n\\n        uint256 buyerFee = (post.postdata.escrow.payment *\\n            IMecenateTreasury(treasuryContract).globalFee()) / 10000;\\n\\n        uint256 amountToAdd = post.postdata.escrow.payment - buyerFee;\\n\\n        // Variables for stake changes\\n        uint256 buyerStake;\\n\\n        uint256 sellerStake;\\n\\n        if (post.postdata.settings.endTimeStamp < block.timestamp || valid) {\\n            // Code for both the timeout and the valid case\\n            buyerStake = Deposit._decreaseDeposit(\\n                post.postdata.settings.tokenId,\\n                postSettingPrivate.buyerAddress,\\n                post.postdata.escrow.payment\\n            );\\n\\n            sellerStake = Deposit._increaseDeposit(\\n                post.postdata.settings.tokenId,\\n                postSettingPrivate.sellerAddress,\\n                amountToAdd\\n            );\\n\\n            _burn(post.postdata.settings.tokenId, treasuryContract, buyerFee);\\n\\n            // Update status and stakes\\n            post.postdata.escrow.stake = sellerStake;\\n\\n            post.postdata.escrow.payment = buyerStake;\\n\\n            _changeStatus(\\n                valid\\n                    ? Structures.PostStatus.Finalized\\n                    : Structures.PostStatus.Punished\\n            );\\n\\n            emit Valid(post);\\n        } else if (!valid) {\\n            require(\\n                punishment <= post.postdata.escrow.stake,\\n                \\\"PUNISHMENT_TOO_HIGH\\\"\\n            );\\n            require(settings.punishmentRatio < 1e18, \\\"PUNISHMENT_RATIO_HIGH\\\");\\n\\n            uint256 penalty = (punishment * settings.punishmentRatio) / 1e18;\\n\\n            post.postdata.escrow.payment = _burnStake(\\n                post.postdata.settings.tokenId,\\n                postSettingPrivate.buyerAddress,\\n                penalty\\n            );\\n\\n            post.postdata.escrow.stake = _burnStake(\\n                post.postdata.settings.tokenId,\\n                postSettingPrivate.sellerAddress,\\n                punishment\\n            );\\n\\n            // Update status and penalties\\n            post.postdata.settings.status = Structures.PostStatus.Punished;\\n\\n            post.postdata.escrow.punishment = punishment;\\n\\n            post.postdata.escrow.penalty = penalty;\\n\\n            _changeStatus(Structures.PostStatus.Punished);\\n\\n            emit Invalid(post);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfd964a35becf7acb1a212219637a0e62bce37de9c37455e4a2b0958ec6ffd058\",\"license\":\"MIT\"},\"contracts/evm/modules/Renounce.sol\":{\"content\":\"/**\\n * @title Renounce\\n * @dev This abstract contract extends the Staking contract and provides functionality for a seller to renounce a post.\\n * The seller can only renounce a post if they are the original creator of the post and the post is in the Accepted or Submitted status.\\n * Renouncing a post refunds the buyer's payment and transfers the seller's stake to the seller's address.\\n * The post struct is reset and the post status is updated to Renounced.\\n * This contract also provides an internal function for refunding a post, which is called by the renouncePost function.\\n */\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"./Staking.sol\\\";\\n\\nabstract contract Renounce is Staking {\\n    function renouncePost() external {\\n        require(msg.sender == postSettingPrivate.sellerAddress, \\\"NOT_SELLER\\\");\\n\\n        // Validate the post status\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\n\\n        require(validStatuses[uint8(currentStatus)], \\\"INVALID_STATUS\\\");\\n\\n        // Reset post and post settings\\n        post = Structures.Post(\\n            Structures.User({\\n                evmAddress: address(0),\\n                sismoVaultId: ZEROHASH,\\n                publicKey: ZEROHASH\\n            }),\\n            Structures.PostData({\\n                settings: Structures.PostSettings({\\n                    status: Structures.PostStatus.Renounced,\\n                    postType: Structures.PostType.Text,\\n                    creationTimeStamp: 0,\\n                    endTimeStamp: 0,\\n                    duration: 0,\\n                    tokenId: Structures.Tokens.NaN\\n                }),\\n                escrow: Structures.PostEscrow({\\n                    stake: 0,\\n                    payment: 0,\\n                    punishment: 0,\\n                    penalty: 0\\n                }),\\n                data: Structures.PostEncryptedData({\\n                    encryptedData: \\\"\\\",\\n                    encryptedKey: \\\"\\\",\\n                    decryptedData: \\\"\\\"\\n                })\\n            })\\n        );\\n\\n        postSettingPrivate.sellerAddress = address(0);\\n\\n        // Emit event\\n        emit Renounced(post);\\n    }\\n}\\n\",\"keccak256\":\"0x275e13f9f7ac075e08064c6738068ae11a368f0b77e3fbdf5c41e952b5959cab\",\"license\":\"MIT\"},\"contracts/evm/modules/Staking.sol\":{\"content\":\"/**\\n * @title Staking\\n * @dev This contract handles staking functionality for the Mecenate platform.\\n * It allows users to add, take, and burn stakes, and provides functions to get the total staked amount and individual stake amounts.\\n * It also includes a modifier to check the status of a post before allowing stake-related transactions.\\n */\\npragma solidity 0.8.19;\\n\\nimport \\\"./Deposit.sol\\\";\\nimport \\\"./Events.sol\\\";\\n\\nabstract contract Staking is Events, Deposit, TokenManager {\\n    using SafeMath for uint256;\\n\\n    event StakeBurned(address staker, uint256 amount);\\n\\n    event StakeTaken(address staker, uint256 amount, Structures.Tokens tokenId);\\n\\n    event StakeAdded(address staker, uint256 amount, Structures.Tokens tokenId);\\n\\n    function _addStake(\\n        Structures.Tokens tokenId,\\n        address staker,\\n        address funder,\\n        uint256 amountToAdd\\n    ) internal returns (uint256 newStake) {\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\n\\n        require(\\n            currentStatus != Structures.PostStatus.Accepted &&\\n                currentStatus != Structures.PostStatus.Submitted,\\n            \\\"INVALID_STATUS\\\"\\n        );\\n\\n        require(amountToAdd > 0, \\\"STAKE_REQUIRED\\\");\\n\\n        if (tokenId != Structures.Tokens.NaN) {\\n            _transferFrom(tokenId, funder, address(this), amountToAdd);\\n        }\\n\\n        newStake = Deposit._increaseDeposit(tokenId, staker, amountToAdd);\\n\\n        emit StakeAdded(staker, amountToAdd, tokenId);\\n\\n        return newStake;\\n    }\\n\\n    function _takeStake(\\n        Structures.Tokens tokenId,\\n        address staker,\\n        address receiver,\\n        uint256 amountToTake\\n    ) internal returns (uint256 newStake) {\\n        // Memorizza lo status del post in una variabile per evitare accessi ridondanti allo storage\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\n\\n        // Verifica che lo status del post sia valido per procedere\\n        require(\\n            currentStatus != Structures.PostStatus.Accepted &&\\n                currentStatus != Structures.PostStatus.Submitted,\\n            \\\"INVALID_STATUS\\\"\\n        );\\n\\n        // Effettua il trasferimento del token o dell'Ether\\n        if (tokenId == Structures.Tokens.NaN) {\\n            //(bool result, ) = payable(_to).call{value: amountToTake}(\\\"\\\");\\n            //require(result, \\\"CALL_FAILED\\\");\\n            payable(receiver).transfer(amountToTake);\\n        } else {\\n            _transfer(tokenId, receiver, amountToTake);\\n        }\\n\\n        // Aggiorna il deposito e emette un evento\\n        newStake = Deposit._decreaseDeposit(tokenId, staker, amountToTake);\\n        emit StakeTaken(staker, amountToTake, tokenId);\\n\\n        return newStake;\\n    }\\n\\n    function _takeFullStake(\\n        Structures.Tokens tokenId,\\n        address staker,\\n        address receiver\\n    ) internal returns (uint256 amountTaken) {\\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, staker);\\n\\n        uint256 newStake = _takeStake(\\n            tokenId,\\n            staker,\\n            receiver,\\n            currentDeposit\\n        );\\n\\n        return newStake;\\n    }\\n\\n    function _burnStake(\\n        Structures.Tokens tokenId,\\n        address staker,\\n        uint256 amountToBurn\\n    ) internal returns (uint256 newStake) {\\n        uint256 newDeposit = Deposit._decreaseDeposit(\\n            tokenId,\\n            staker,\\n            amountToBurn\\n        );\\n\\n        bool burnEnabled = IMecenateFeedFactory(settings.factoryContract)\\n            .burnEnabled();\\n\\n        address treasuryContract = IMecenateFeedFactory(\\n            settings.factoryContract\\n        ).treasuryContract();\\n\\n        if (burnEnabled == false) {\\n            if (tokenId == Structures.Tokens.NaN) {\\n                (bool result, ) = payable(treasuryContract).call{\\n                    value: amountToBurn\\n                }(\\\"\\\");\\n                require(result, \\\"CALL_FAILED\\\");\\n            } else {\\n                _transfer(tokenId, treasuryContract, amountToBurn);\\n            }\\n        } else {\\n            if (tokenId == Structures.Tokens.DAI) {\\n                _burnDai(amountToBurn);\\n            } else if (tokenId == Structures.Tokens.MUSE) {\\n                _burn(amountToBurn);\\n            } else if (tokenId == Structures.Tokens.NaN) {\\n                _burnWeth(amountToBurn);\\n            }\\n        }\\n\\n        emit StakeBurned(staker, amountToBurn);\\n\\n        return newDeposit;\\n    }\\n\\n    function _burnFullStake(\\n        Structures.Tokens tokenId,\\n        address staker\\n    ) internal returns (uint256 amountBurned) {\\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, staker);\\n\\n        _burnStake(tokenId, staker, currentDeposit);\\n\\n        return currentDeposit;\\n    }\\n\\n    function getStake(\\n        Structures.Tokens tokenId,\\n        address staker\\n    ) external view returns (uint256 amount) {\\n        // get deposit\\n        amount = Deposit._getDeposit(tokenId, staker);\\n        // explicit return\\n        return amount;\\n    }\\n\\n    function getTotalStaked() external view returns (uint256) {\\n        uint256 amountSeller = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            postSettingPrivate.sellerAddress\\n        );\\n\\n        uint256 amountBuyer = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            postSettingPrivate.buyerAddress\\n        );\\n\\n        return (amountSeller + amountBuyer);\\n    }\\n\\n    function addStake(\\n        Structures.Tokens tokenId,\\n        address _funder,\\n        uint256 amountToAdd\\n    ) external payable returns (uint256) {\\n        require(tokenId == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n\\n        // Check if the encryptedVaultId matches with either the buyer or the seller\\n        require(\\n            msg.sender == postSettingPrivate.buyerAddress ||\\n                msg.sender == postSettingPrivate.sellerAddress,\\n            \\\"WRONG_MSGSENDER\\\"\\n        );\\n\\n        // Determine the amount to add based on the role (buyer or seller)\\n        uint256 actualAmountToAdd = (msg.sender ==\\n            postSettingPrivate.sellerAddress)\\n            ? msg.value\\n            : amountToAdd;\\n\\n        // Update the stake\\n        uint256 newStake = _addStake(\\n            tokenId,\\n            msg.sender,\\n            _funder,\\n            actualAmountToAdd\\n        );\\n\\n        // Update the corresponding escrow value based on the role\\n        if (msg.sender == postSettingPrivate.buyerAddress) {\\n            post.postdata.escrow.payment = newStake;\\n        } else {\\n            post.postdata.escrow.stake = newStake;\\n        }\\n\\n        return newStake;\\n    }\\n\\n    function takeStake(\\n        Structures.Tokens tokenId,\\n        address receiver,\\n        uint256 amountToTake\\n    ) external returns (uint256) {\\n        require(tokenId == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n\\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, msg.sender);\\n\\n        require(currentDeposit >= amountToTake, \\\"NOT_ENOUGH_STAKE\\\");\\n\\n        uint256 newBalance = _takeStake(\\n            tokenId,\\n            msg.sender,\\n            receiver,\\n            amountToTake\\n        );\\n\\n        if (msg.sender == postSettingPrivate.buyerAddress) {\\n            post.postdata.escrow.payment = newBalance;\\n        } else {\\n            post.postdata.escrow.stake = newBalance;\\n        }\\n\\n        return newBalance;\\n    }\\n\\n    function takeFullStake(\\n        Structures.Tokens tokenId,\\n        bytes memory sismoConnectResponse,\\n        address receiver\\n    ) external returns (uint256) {\\n        require(tokenId == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n\\n        uint256 newBalance = _takeFullStake(tokenId, msg.sender, receiver);\\n\\n        if (msg.sender == postSettingPrivate.buyerAddress) {\\n            post.postdata.escrow.payment = newBalance;\\n        } else if (msg.sender == postSettingPrivate.sellerAddress) {\\n            post.postdata.escrow.stake = newBalance;\\n        }\\n\\n        return newBalance;\\n    }\\n\\n    function getSellerStake() external view returns (uint256 amount) {\\n        // get deposit\\n        amount = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            postSettingPrivate.sellerAddress\\n        );\\n        // explicit return\\n        return amount;\\n    }\\n\\n    function getBuyerStake() external view returns (uint256 amount) {\\n        // get deposit\\n        amount = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            postSettingPrivate.buyerAddress\\n        );\\n        // explicit return\\n        return amount;\\n    }\\n}\\n\",\"keccak256\":\"0x77fa11bf9a822717e6585dfcbe3ff9946ba17f44b905319f103d9e25cb6ab256\"},\"contracts/evm/modules/Submission.sol\":{\"content\":\"/**\\n * @title Submission\\n * @dev This contract is an abstract contract that defines the functions for submitting and revealing data for a post. It inherits from the Events contract.\\n */\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"./Events.sol\\\";\\n\\nabstract contract Submission is Events {\\n    function submitHash(bytes memory encryptedKey) external virtual {\\n        require(msg.sender == postSettingPrivate.sellerAddress, \\\"NOT_SELLER\\\");\\n\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\n        require(\\n            validStatuses[uint8(currentStatus)] &&\\n                (currentStatus == Structures.PostStatus.Accepted ||\\n                    currentStatus == Structures.PostStatus.Submitted),\\n            \\\"WRONG_STATUS\\\"\\n        );\\n\\n        require(\\n            IMecenateUsers(settings.usersModuleContract).checkifUserExist(\\n                msg.sender\\n            ),\\n            \\\"User does not exist\\\"\\n        );\\n\\n        require(post.creator.evmAddress == msg.sender, \\\"NOT_SELLER\\\");\\n\\n        _changeStatus(Structures.PostStatus.Submitted);\\n\\n        post.postdata.data.encryptedKey = encryptedKey;\\n        post.postdata.settings.status = Structures.PostStatus.Submitted;\\n        post.postdata.settings.endTimeStamp =\\n            block.timestamp +\\n            post.postdata.settings.duration;\\n\\n        emit Valid(post);\\n    }\\n\\n    function revealData(\\n        bytes memory decryptedData\\n    ) external virtual returns (bytes memory) {\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\n        require(\\n            validStatuses[uint8(currentStatus)] &&\\n                (currentStatus == Structures.PostStatus.Submitted ||\\n                    currentStatus == Structures.PostStatus.Revealed ||\\n                    currentStatus == Structures.PostStatus.Finalized),\\n            \\\"INVALID_STATUS\\\"\\n        );\\n\\n        require(\\n            msg.sender != postSettingPrivate.sellerAddress,\\n            \\\"YOU_ARE_THE_SELLER\\\"\\n        );\\n\\n        require(\\n            currentStatus == Structures.PostStatus.Finalized,\\n            \\\"NOT_FINALIZED\\\"\\n        );\\n\\n        post.postdata.data.decryptedData = decryptedData;\\n        post.postdata.settings.status = Structures.PostStatus.Revealed;\\n\\n        emit MadePublic(post);\\n\\n        return decryptedData;\\n    }\\n}\\n\",\"keccak256\":\"0x4bff065a97e85cd00c3e827f05b13360185593ccc74522ce91af105898fa4ccd\",\"license\":\"MIT\"},\"contracts/evm/modules/TokenManager.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"./BurnDAI.sol\\\";\\n\\nabstract contract TokenManager is BurnDAI {\\n    function _getTokenAddress(\\n        Structures.Tokens tokenID\\n    ) internal view returns (address) {\\n        if (tokenID == Structures.Tokens.DAI)\\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\\n        if (tokenID == Structures.Tokens.MUSE)\\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\\n        return address(0);\\n    }\\n\\n    function _checkAllowance(\\n        Structures.Tokens tokenID,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal view {\\n        address tokenAddress = _getTokenAddress(tokenID);\\n        require(\\n            IERC20(tokenAddress).allowance(from, to) >= value,\\n            \\\"INSUFFICIENT_ALLOWANCE\\\"\\n        );\\n    }\\n\\n    modifier onlyValidTokenID(Structures.Tokens tokenID) {\\n        require(\\n            tokenID == Structures.Tokens.MUSE ||\\n                tokenID == Structures.Tokens.DAI ||\\n                tokenID == Structures.Tokens.NaN,\\n            \\\"WRONG_TOKEN\\\"\\n        );\\n        _;\\n    }\\n\\n    function isValidTokenID(\\n        Structures.Tokens tokenID\\n    ) internal pure returns (bool validity) {\\n        return\\n            tokenID == Structures.Tokens.MUSE ||\\n            tokenID == Structures.Tokens.DAI;\\n    }\\n\\n    function _transfer(\\n        Structures.Tokens tokenID,\\n        address to,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        require(\\n            IERC20(_getTokenAddress(tokenID)).transfer(to, value),\\n            \\\"TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function _transferFrom(\\n        Structures.Tokens tokenID,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        address tokenAddress = _getTokenAddress(tokenID);\\n        _checkAllowance(tokenID, from, to, value);\\n        require(\\n            IERC20(tokenAddress).transferFrom(from, to, value),\\n            \\\"TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function _burn(\\n        Structures.Tokens tokenID,\\n        address _receiver,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) returns (bool success) {\\n        bool burnEnabled = IMecenateFeedFactory(settings.factoryContract)\\n            .burnEnabled();\\n\\n        if (burnEnabled == false) {\\n            if (tokenID == Structures.Tokens.NaN) {\\n                (bool result, ) = payable(_receiver).call{value: value}(\\\"\\\");\\n                require(result, \\\"CALL_FAILED\\\");\\n            } else {\\n                TokenManager._transfer(tokenID, _receiver, value);\\n            }\\n        } else {\\n            if (tokenID == Structures.Tokens.DAI) {\\n                _burnDai(value);\\n            } else if (tokenID == Structures.Tokens.MUSE) {\\n                _burn(value);\\n            } else if (tokenID == Structures.Tokens.NaN) {\\n                _burnWeth(value);\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    function _burnFrom(\\n        Structures.Tokens tokenID,\\n        address from,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        address treasury = IMecenateFeedFactory(settings.factoryContract)\\n            .treasuryContract();\\n\\n        if (tokenID == Structures.Tokens.DAI) {\\n            IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\n                .transferFrom(from, treasury, value);\\n        } else if (tokenID == Structures.Tokens.MUSE) {\\n            BurnMUSE._burnFrom(from, value);\\n        }\\n    }\\n\\n    function _approve(\\n        Structures.Tokens tokenID,\\n        address spender,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        if (tokenID == Structures.Tokens.DAI) {\\n            require(\\n                IERC20(\\n                    IMecenateFeedFactory(settings.factoryContract).daiToken()\\n                ).approve(spender, value),\\n                \\\"APPROVE_FAILED\\\"\\n            );\\n        } else if (tokenID == Structures.Tokens.MUSE) {\\n            uint256 currentAllowance = IMUSE(\\n                IMecenateFeedFactory(settings.factoryContract).museToken()\\n            ).allowance(msg.sender, spender);\\n\\n            uint256 newAllowance = currentAllowance + value;\\n            require(\\n                IMUSE(IMecenateFeedFactory(settings.factoryContract).daiToken())\\n                    .increaseAllowance(spender, newAllowance),\\n                \\\"APPROVE_FAILED\\\"\\n            );\\n        }\\n    }\\n\\n    function totalSupply(\\n        Structures.Tokens tokenID\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).totalSupply();\\n    }\\n\\n    function balanceOf(\\n        Structures.Tokens tokenID,\\n        address who\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).balanceOf(who);\\n    }\\n\\n    function allowance(\\n        Structures.Tokens tokenID,\\n        address owner,\\n        address spender\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).allowance(owner, spender);\\n    }\\n}\\n\",\"keccak256\":\"0x8eded6283ea4effbe4861c36f73afaace086765ac8d26ef695ac8855ed15e8b1\"}},\"version\":1}",
  "bytecode": "0x6080604090808252346200036e5762004fbd803803809162000022828562000389565b833981016080828203126200036e576200003c82620003ad565b6020916200004c838501620003ad565b936200005a868201620003ad565b60608201516001600160401b03928382116200036e5701601f908482820112156200036e5780518481116200037357895191601f1996620000a28a8987860116018562000389565b8284528983830101116200036e57889060005b838110620003595750506000918301015267016345785d8a0000601255600060135560018060a01b039687938460018060a01b03199a168a6014541617601455338a6015541617601555818b5180926303e21fa960e61b8252816004988992165afa80156200034e5789916000916200030c575b501689601654161760165560ff19938481541681556000805260188252620151808b60002055600194856000526203f4808c60002055600260005262093a808c600020556003600052621275008c600020558160005262278d008c600020556000805260198352858c600020918254161790558251958611620002f757601754908582811c92168015620002ec575b83831014620002d757508381116200028b575b50809285116001146200022057508394509083929160009462000214575b50501b916000199060031b1c1916176017555b1690600054161760005551614bfa9081620003c38239f35b015192503880620001e9565b929484908116601760005284600020946000905b8883831062000270575050501062000256575b505050811b01601755620001fc565b015160001960f88460031b161c1916905538808062000247565b85870151885590960195948501948793509081019062000234565b6017600052816000208480880160051c820192848910620002cd575b0160051c019085905b828110620002c0575050620001cb565b60008155018590620002b0565b92508192620002a7565b602290634e487b7160e01b6000525260246000fd5b91607f1691620001b8565b604190634e487b7160e01b6000525260246000fd5b91508282813d831162000346575b62000326818362000389565b810103126200034357506200033c8991620003ad565b3862000129565b80fd5b503d6200031a565b8b513d6000823e3d90fd5b8181018301518582018401528a9201620000b5565b600080fd5b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b038211908210176200037357604052565b51906001600160a01b03821682036200036e5756fe608080604052600436101561001d575b50361561001b57600080fd5b005b60003560e01c908163010a38f514612c9b5750806305c1f502146128665780630917e7761461282057806317906c2e146128025780631d0b4af5146127335780633d876d5d14611f3f578063423932be146119a45780634c38d877146119745780634e69d5601461194c5780634fcf370f1461169557806352a6cb4a1461165857806354fd4d50146115765780635ad4e170146115495780635c63ed69146115195780637abe914d146112ba5780638da5cb5b146112915780638f903c7914610f95578063939e99fa146102e6578063d24e0c87146102c8578063df3832af1461021a578063ed70d5d51461013f5763faeb5e171461011c573861000f565b3461013a57600036600319011261013a576020600954604051908152f35b600080fd5b3461013a5761014d36612f51565b60ff60089392935416600381101561020457600383101561020457610173908314613477565b81600052601a60205260406000203360005260205280604060002054106101cc576020926101a29233906148e2565b601054336001600160a01b03909116036101c35780600a555b604051908152f35b806009556101bb565b60405162461bcd60e51b815260206004820152601060248201526f4e4f545f454e4f5547485f5354414b4560801b6044820152606490fd5b634e487b7160e01b600052602160045260246000fd5b3461013a57606036600319011261013a57600435600381101561013a576024356001600160401b03811161013a57610256903690600401612f9f565b5061025f612f3b565b9060ff6008541690600382101561020457602092610281610293938314613477565b61028b33836135f1565b9133906148e2565b6010546001600160a01b039033908216036102b5575080600a55604051908152f35b6011541633036101bb57806009556101bb565b3461013a57600036600319011261013a576020600a54604051908152f35b60e036600319011261013a576004356001600160401b03811161013a57610311903690600401612f9f565b6005602435101561013a576005604435101561013a57600360a435101561013a5760c4356001600160a01b038116900361013a5760405161035181612d52565b60405161035d81612d01565b600081526060602082015260606040820152815260206040519161038083612d01565b60405161038c81612d1c565b60008152600083820152600060408201526000606082015260006080820152600060a082015283526040516103c081612d37565b600081526000838201526000604082015260006060820152828401526040516103e881612d01565b6060815260608382015260606040820152604084015201526000600160a435148015610f85575b81908015610f76575b6104229150613477565b6000546001600160a01b0316330361013a5760145460405163122643f360e21b815233600482015290602090829060249082906001600160a01b03165afa908115610e5857600091610f47575b5015610f115760ff60045416600881101561020457600052601960205261049d60ff6040600020541661301b565b60843515610ed85760643515610ea4576102045760a43515610e64575b6104c5604435612dbc565b60ff604435166000526018602052604060002054906104ec60843560c4353360a435613849565b9060ff60045416916008831015610204576024926000526019602052604060002060ff19815416905560016000526040600020600160ff19825416179055600160ff196004541617600455600060018060a01b036014541660405194858092633bcaa1d960e21b82523360048301525afa928315610e5857600093610da5575b506040519361057a85612d1c565b60018552610589602435612dbc565b60243560208601524260408601526000606086015260808501526105b260a43560a08601612dc6565b604051906105bf82612d37565b8152606435602082015260006040820152600060608201526105df613507565b6105e7613507565b90604051936105f585612d01565b8452602084015260408301526040519361060e85612d01565b8452602084015260408301526040519161062783612d52565b81835260208301528051600180546001600160a01b0319166001600160a01b039290921691909117905560208101518051906001600160401b038211610a0357610672600254612cc7565b601f8111610d3c575b50602090601f8311600114610cc357604093929160009183610cb8575b50508160011b916000199060031b1c1916176002555b01518051906001600160401b038211610a035781906106ce600354612cc7565b601f8111610c41575b50602090601f8311600114610bc957600092610bbe575b50508160011b916000199060031b1c1916176003555b6020810151805180519060088210156102045761072260a0926130b1565b602081015161073081612dbc565b61073981612dbc565b61ff006004549160081b169061ff0019161760045560408101516005556060810151600655608081015160075501519060038210156102045760409160ff8019600854169116176008556060602082015180516009556020810151600a5583810151600b550151600c5501519081519182516001600160401b038111610a03576107c4600d54612cc7565b601f8111610b6b575b506020601f8211600114610af95781929394600092610aee575b50508160011b916000199060031b1c191617600d555b60208101518051906001600160401b038211610a035761081e600e54612cc7565b601f8111610a9b575b50602090601f8311600114610a2457604093929160009183610a19575b50508160011b916000199060031b1c191617600e555b01519081516001600160401b038111610a0357610878600f54612cc7565b601f81116109b0575b50602092601f82116001146109405792819293600092610935575b50508160011b916000199060031b1c191617600f555b60135490600019821461091f57600161091b9201601355336001600160601b0360a01b60115416176011557f32444e7b4a54d133e7b42c066eb65166a0c0a74d57ceffa00b125094dd0d38b56040518061090c8482612fe6565b0390a160405191829182612fe6565b0390f35b634e487b7160e01b600052601160045260246000fd5b01519050838061089c565b601f19821693600f600052600080516020614ba58339815191529160005b868110610998575083600195961061097f575b505050811b01600f556108b2565b015160001960f88460031b161c19169055838080610971565b9192602060018192868501518155019401920161095e565b600f600052600080516020614ba5833981519152601f830160051c810191602084106109f9575b601f0160051c01905b8181106109ed5750610881565b600081556001016109e0565b90915081906109d7565b634e487b7160e01b600052604160045260246000fd5b015190508580610844565b90601f19831691600e600052600080516020614b658339815191529260005b818110610a835750916001939185604097969410610a6a575b505050811b01600e5561085a565b015160001960f88460031b161c19169055858080610a5c565b92936020600181928786015181550195019301610a43565b600e600052600080516020614b65833981519152601f840160051c81019160208510610ae4575b601f0160051c01905b818110610ad85750610827565b60008155600101610acb565b9091508190610ac2565b0151905084806107e7565b601f19821690600d600052600080516020614b858339815191529160005b818110610b5357509583600195969710610b3a575b505050811b01600d556107fd565b015160001960f88460031b161c19169055848080610b2c565b9192602060018192868b015181550194019201610b17565b600d600052600080516020614b85833981519152601f830160051c81019160208410610bb4575b601f0160051c01905b818110610ba857506107cd565b60008155600101610b9b565b9091508190610b92565b0151905083806106ee565b92506003600052600080516020614b45833981519152906000935b601f1984168510610c26576001945083601f19811610610c0d575b505050811b01600355610704565b015160001960f88460031b161c19169055838080610bff565b81810151835560209485019460019093019290910190610be4565b9091506003600052601f830160051c600080516020614b45833981519152019060208410610ca2575b90601f8493920160051c600080516020614b4583398151915201905b818110610c9357506106d7565b60008155849350600101610c86565b600080516020614b458339815191529150610c6a565b015190508580610698565b906002600052600080516020614b258339815191529160005b601f1985168110610d24575091839160019360409695601f19811610610d0b575b505050811b016002556106ae565b015160001960f88460031b161c19169055858080610cfd565b91926020600181928685015181550194019201610cdc565b6002600052601f830160051c600080516020614b258339815191520160208410610d90575b601f820160051c600080516020614b25833981519152018110610d84575061067b565b60008155600101610d61565b50600080516020614b25833981519152610d61565b9092503d806000833e610db88183612d9b565b602082828101031261013a578151916001600160401b03831161013a576060838201838301031261013a5760405192610df084612d01565b610dfb8183016134b1565b8452602081830101516001600160401b03811161013a57610e239084840190838501016134c5565b602085015260408183010151906001600160401b03821161013a57610e4c9383019201016134c5565b6040820152918461056c565b6040513d6000823e3d90fd5b34608435146104ba5760405162461bcd60e51b815260206004820152600f60248201526e57524f4e475f4d53475f56414c554560881b6044820152606490fd5b60405162461bcd60e51b815260206004820152600c60248201526b5041594d454e545f5a45524f60a01b6044820152606490fd5b60405162461bcd60e51b81526020600482015260116024820152705354414b455f414d4f554e545f5a45524f60781b6044820152606490fd5b60405162461bcd60e51b815260206004820152600e60248201526d1554d15497d393d517d1561254d560921b6044820152606490fd5b610f69915060203d602011610f6f575b610f618183612d9b565b810190613058565b8361046f565b503d610f57565b50610204578060a43515610418565b506000905060a43560021461040f565b3461013a5760208060031936011261013a576001600160401b039060043582811161013a57610fc8903690600401612f9f565b60115490916001600160a01b0391610fe3908316331461361f565b60ff60045416600881101561020457806000526019825260ff604060002054168061127d575b156112495760248284601454166040519283809263122643f360e21b82523360048301525afa908115610e585760009161122c575b50156111f15761105560019333908554161461361f565b6000526019815260406000209260ff199384815416905560036000526040600020838582541617905560038460045416176004558051948511610a035761109d600e54612cc7565b601f811161119c575b5081601f861160011461112a57506003949260009284928361111f575b50501b9160001990851b1c191617600e555b60045416176004556110e96007544261374c565b6006557f02fe2a83c74f62aff637e2f8affe6ab2afef1ac9c7112f2ce5c98584b8ec73056040518061111a816130ca565b0390a1005b0151925086806110c3565b909491601f19831695600e600052600080516020614b65833981519152926000905b888210611185575050836003971061116d575b505050811b01600e556110d5565b015160001983871b60f8161c1916905584808061115f565b80878596829496860151815501950193019061114c565b600e600052600080516020614b65833981519152601f870160051c8101918488106111e7575b601f0160051c019084905b8281106111db5750506110a6565b600081550184906111cd565b90915081906111c2565b60405162461bcd60e51b8152600481018390526013602482015272155cd95c88191bd95cc81b9bdd08195e1a5cdd606a1b6044820152606490fd5b6112439150833d8511610f6f57610f618183612d9b565b8661103e565b60405162461bcd60e51b815260048101839052600c60248201526b57524f4e475f53544154555360a01b6044820152606490fd5b506002811480611009575060038114611009565b3461013a57600036600319011261013a576000546040516001600160a01b039091168152602090f35b3461013a5760208060031936011261013a576001600160401b039060043582811161013a576112ed903690600401612f9f565b9060ff6004541660088110158061020457816000526019835260ff60406000205416806114dd575b61131e9061301b565b61133460018060a01b0360115416331415613070565b610204576004036114a9578151928311610a0357611353600f54612cc7565b601f8111611457575b508092601f81116001146113e857809192936000916113dd575b508160011b916000199060031b1c191617600f555b600660ff1960045416176004557fe7d6481f2b9d6b669e12d036651e614223439c9ad89d743ac0dede17d2fd9921604051806113c6816130ca565b0390a161091b604051928284938452830190612df5565b905083015184611376565b601f19811693600f600052600080516020614ba58339815191529060005b868110611440575082600194959610611427575b5050811b01600f5561138b565b85015160001960f88460031b161c19169055848061141a565b909184600181928589015181550193019101611406565b600f600052600080516020614ba5833981519152601f850160051c81019183861061149f575b601f0160051c01905b818110611493575061135c565b60008155600101611486565b909150819061147d565b6064906040519062461bcd60e51b82526004820152600d60248201526c1393d517d19253905312569151609a1b6044820152fd5b5050600060038214801561150b575b819080156114fc575b9050611315565b506102045780600483146114f5565b5060009050600682146114ec565b3461013a57600036600319011261013a576008546011546020916101bb916001600160a01b03169060ff166135f1565b3461013a57600036600319011261013a576020611564613527565b6040516001600160a01b039091168152f35b3461013a57600036600319011261013a57604051600060175461159881612cc7565b8084529060019081811690811561163157506001146115d6575b61091b846115c281860382612d9b565b604051918291602083526020830190612df5565b6017600090815292507fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c155b8284106116195750505081016020016115c2826115b2565b80546020858701810191909152909301928101611601565b60ff191660208087019190915292151560051b850190920192506115c291508390506115b2565b3461013a57604036600319011261013a57600435600381101561013a57602435906001600160a01b038216820361013a576020916101bb916135f1565b606036600319011261013a57600435600381101561013a5760249081356116ba612f3b565b6001600052602092601984526116d760ff6040600020541661301b565b60ff600854166003811015611937576116f1908214613477565b806119315734925b6011546001600160a01b039081169061171282856135f1565b600954116118fb57868891601454166040519283809263122643f360e21b82523360048301525afa908115610e58576000916118de575b50156118a85761175b90331415613070565b600a5490811561182557106117ec57600294509061177c92915b3390613849565b600a55601960ff199183836004541617600455836000525260406000206001828254161790556004541617600455336001600160601b0360a01b60105416176010557f024413d06e2653518c2c3ec94f6fa9abf03587aed601e2cec0004a154fb50d7e6040518061111a816130ca565b60405162461bcd60e51b815260048101859052601281870152711393d517d15393d551d217d410565351539560721b6044820152606490fd5b90503415611874571561184157600294509061177c9291611775565b60405162461bcd60e51b815260048101859052600c818701526b16915493d7d410565351539560a21b6044820152606490fd5b60405162461bcd60e51b815260048101869052600d818801526c5a45524f5f4d534756414c554560981b6044820152606490fd5b60405162461bcd60e51b815260048101879052600f818901526e1554d1549517d393d517d1561254d5608a1b6044820152606490fd5b6118f59150873d8911610f6f57610f618183612d9b565b88611749565b60405162461bcd60e51b815260048101889052600f818a01526e14d51052d157d25390d3d4949150d5608a1b6044820152606490fd5b826116f9565b85634e487b7160e01b60005260216004526000fd5b3461013a57600036600319011261013a57602060ff600454166119726040518092612e59565bf35b3461013a57600036600319011261013a576008546010546020916101bb916001600160a01b03169060ff166135f1565b3461013a57604036600319011261013a576004351580156004350361013a57601054602435906001600160a01b03166119de33821461361f565b60ff60045416600881101561020457600303611f0a576015546040516318da001160e01b81529190602090839060049082906001600160a01b03165afa918215610e5857600092611ed9575b50600a54604051634047e10360e11b81529093906020816004816001600160a01b0388165afa908115610e5857600091611ea5575b50612710611a70611a789287613677565b04809561368a565b9460065442118015611e9c575b15611d5657505050611ac8611aad60ff6008541660018060a01b0360105416600a5491613759565b6008546011549195916001600160a01b03169060ff166136c3565b9160ff6008541660038110158061020457600182148015918183611d48575b81908015611d3b575b611afa9150613477565b601554604051632ee4b68b60e11b815290602090829060049082906001600160a01b03165afa908115610e5857600091611d1c575b50611ccf576102045782611bff5750611b669360009384935083925082916001600160a01b03165af1611b60613ad8565b50613b08565b600955600a5560043515611bf85760045b60ff60045416600881101561020457600052601960205260406000209060ff1991828154169055600881101561020457611bca9160ff8216600052601960205260016040600020918254161790556130b1565b7f02fe2a83c74f62aff637e2f8affe6ab2afef1ac9c7112f2ce5c98584b8ec73056040518061111a816130ca565b6005611b77565b60009091611cc2575b8115611caf575b509260209291611c21611c6f95613477565b6001600160a01b0390611c3390614a96565b60405163a9059cbb60e01b81526001600160a01b0390931660048401526024830193909352909384929190911690829060009082906044820190565b03925af18015610e5857611c8b91600091611c90575b50614a58565b611b66565b611ca9915060203d602011610f6f57610f618183612d9b565b84611c85565b9050919091610204579060006020611c0f565b5050600281146000611c08565b9150919293506102045760028203611cf2575050611cec90613df9565b50611b66565b15611d015750611cec9061482a565b15611d0c5750611b66565b611d1590614262565b5082611cec565b611d35915060203d602011610f6f57610f618183612d9b565b89611b2f565b5061020457808415611af0565b506000905060028414611ae7565b925092509250611d6257005b6009548111611e615760125491670de0b6b3a76400009283811015611e2457600593611d91611d9f9285613677565b04809260ff60085416613b42565b600a55600854601154611dc09184916001600160a01b03169060ff16613b42565b60095560ff199183836004541617600455600b55600c55816000526019602052604060002060018282541617905560045416176004557f275bebb09134c1369fa190998cff2fa6935a1cebafc405bb809446f7228f25446040518061111a816130ca565b60405162461bcd60e51b81526020600482015260156024820152740a0aa9c92a6909a8a9ca8bea482a8929ebe90928e9605b1b6044820152606490fd5b60405162461bcd60e51b81526020600482015260136024820152720a0aa9c92a6909a8a9ca8bea89e9ebe90928e9606b1b6044820152606490fd5b50600435611a85565b90506020813d602011611ed1575b81611ec060209383612d9b565b8101031261013a5751612710611a5f565b3d9150611eb3565b611efc91925060203d602011611f03575b611ef48183612d9b565b810190613658565b9084611a2a565b503d611eea565b60405162461bcd60e51b815260206004820152600d60248201526c1393d517d4d550935255151151609a1b6044820152606490fd5b3461013a57600036600319011261013a576011546001600160a01b0390611f69908216331461361f565b60ff6004541660088110156102045760005260209060198252611f9360ff6040600020541661301b565b611f9b613507565b90611fa4613507565b916120b060405192611fb584612d01565b600084528584019283526040840194855260405193611fd385612d1c565b60078552600087860152600060408601526000606086015260006080860152600060a086015260405161200581612d37565b6000815260008882015260006040820152600060608201526040519061202a82612d01565b60405161203681612d80565b60008152825260405161204881612d80565b600081528983015260405161205c81612d80565b6000815260408301526040519661207288612d01565b87528887015260408601528660405161208a81612d52565b82815201948552511660018060a01b03166001600160601b0360a01b6001541617600155565b518051926001600160401b0393848111610a0357806120d0600254612cc7565b93601f948581116126d8575b50879085831160011461266457600092612659575b50508160011b916000199060031b1c1916176002555b51918251848111610a0357806003946121208654612cc7565b8581116125ff575b50879085831160011461258f57600092612584575b50508160011b9160001990861b1c19161783555b5193845194855160088110156102045761216a906130b1565b8186015161217781612dbc565b61218081612dbc565b61ff006004549160081b169061ff0019161760045560a0604087015196600597885560608101516006556080810151600755015190848210156102045760409160ff801960085416911617600855606083820151805160095584810151600a5583810151600b550151600c5501518051805190868211610a03578190612207600d54612cc7565b86811161252b575b5084908683116001146124b8576000926124ad575b50508160011b9160001990871b1c191617600d555b81810151805190868211610a0357612252600e54612cc7565b858111612460575b5083908583116001146123ea576040939291600091836123df575b50508160011b9160001990881b1c191617600e555b0151948551948511610a03576122a1600f54612cc7565b90838211612396575b50508091841160011461232157508293600093612316575b50508260011b92600019911b1c191617600f555b6001600160601b0360a01b601154166011557fea9300a5dae1f9505a3d12ec40afb3121817ab70d54e3f05b47b7121d03afb8f6040518061111a816130ca565b0151915083806122c2565b9190601f19841694600f600052600080516020614ba5833981519152936000905b87821061237e5750508460019610612364575b50505050811b01600f556122d6565b01519060f884600019921b161c1916905582808080612355565b80600185978294968601518155019601930190612342565b600f600052600080516020614ba58339815191529084808801821c8301938589106123d6575b01901c01905b818110156122aa57600081556001016123c2565b935082936123bc565b015190508980612275565b90601f19831691600e600052600080516020614b658339815191529260005b8782821061244a575050916001939185604097969410612432575b505050811b01600e5561228a565b0151600019838a1b60f8161c19169055898080612424565b6001859682939686015181550195019301612409565b600e600052600080516020614b65833981519152868085018b1c8201928786106124a4575b018a1c01905b818110612498575061225a565b6000815560010161248b565b92508192612485565b015190508880612224565b600d6000908152600080516020614b858339815191529350601f198516905b878282106125155750509084600195949392106124fd575b505050811b01600d55612239565b015160001983891b60f8161c191690558880806124ef565b60018596829396860151815501950193016124d7565b909150600d600052600080516020614b85833981519152868085018b1c82019287861061257b575b908594939291018b1c01905b81811061256c575061220f565b6000815584935060010161255f565b92508192612553565b01519050878061213d565b6000878152600080516020614b458339815191529350601f198516905b8a8282106125e95750509084600195949392106125d1575b505050811b018355612151565b015160001983881b60f8161c191690558780806125c4565b60018596829396860151815501950193016125ac565b90915085600052600080516020614b458339815191528580850160051c8201928a8610612650575b9085949392910160051c01905b8181106126415750612128565b60008155849350600101612634565b92508192612627565b0151905087806120f1565b60026000908152600080516020614b258339815191529350601f198516905b8a8282106126c25750509084600195949392106126a9575b505050811b01600255612107565b015160001960f88460031b161c1916905587808061269b565b6001859682939686015181550195019301612683565b9091506002600052600080516020614b258339815191528580850160051c8201928a861061272a575b9085949392910160051c01905b81811061271b57506120dc565b6000815584935060010161270e565b92508192612701565b61273c36612f51565b60ff60089392935416600381101561020457600383101561020457612762908314613477565b6010546001600160a01b0392908316331480156127f5575b156127be5760209361279e92846011541633146000146127b8575034913390613849565b906010541633146000146101c35780600a55604051908152f35b91611775565b60405162461bcd60e51b815260206004820152600f60248201526e2ba927a723afa6a9a3a9a2a72222a960891b6044820152606490fd5b508260115416331461277a565b3461013a57600036600319011261013a576020601354604051908152f35b3461013a57600036600319011261013a5760206101bb60ff6008541661286060018060a01b03916128558360115416826135f1565b9260105416906135f1565b9061374c565b3461013a57600036600319011261013a5760405161288381612d01565b600180546001600160a01b03168252604051600254909291908360006128a883612cc7565b80835292848116908115612c7c5750600114612c2d575b6128cb92500384612d9b565b60209283830152604051838160006003546128e581612cc7565b80845290868116908115612c0f5750600114612bc5575b5061290992500382612d9b565b60408301526040519061291b82612d01565b60405161292781612d1c565b60045460ff81169060088210156102045760ff91835260081c1661294a81612dbc565b8582015260055460408201526006546060820152600754608082015261297860ff6008541660a08301612dc6565b825260405161298681612d37565b6009548152600a5485820152600b546040820152600c54606082015284830152604051906129b382612d01565b60405185816000600d546129c681612cc7565b80845290868116908115612ba75750600114612b5d575b506129ea92500382612d9b565b825260405185816000600e546129ff81612cc7565b80845290868116908115612b3f5750600114612af5575b50612a2392500382612d9b565b8583015260405190600090600f5490612a3b82612cc7565b80855291818116908115612ad75750600114612a94575b612a878761091b8a898989612a69818b0382612d9b565b60408201526040820152604051948594604086526040860190612e1a565b9184830390850152612e66565b600f60009081529250600080516020614ba58339815191525b828410612ac4575050508101850181612a69612a52565b80548585018a0152928801928101612aad565b60ff1916858a01525050151560051b82018601905081612a69612a52565b600e6000908152915085600080516020614b658339815191525b828410612b285750505091612a23928201018892612a16565b805487850187015286945092850192879101612b0f565b60ff19168486015250899390151560051b8301019050612a23612a16565b600d6000908152915085600080516020614b858339815191525b828410612b9057505050916129ea9282010188926129dd565b805487850187015286945092850192879101612b77565b60ff19168486015250899390151560051b83010190506129ea6129dd565b60036000908152915085600080516020614b458339815191525b828410612bf857505050916129099282010186926128fc565b805487850187015286945092850192879101612bdf565b60ff19168486015250879390151560051b83010190506129096128fc565b50906002600052600080516020614b2583398151915290836000925b828410612c62575050509060206128cb928201016128bf565b6020929450805483858a0101520191019091838693612c49565b602092506128cb94915060ff191682840152151560051b8201016128bf565b3461013a57600036600319011261013a578061197260209260ff600854165b9060038210156102045752565b90600182811c92168015612cf7575b6020831014612ce157565b634e487b7160e01b600052602260045260246000fd5b91607f1691612cd6565b606081019081106001600160401b03821117610a0357604052565b60c081019081106001600160401b03821117610a0357604052565b608081019081106001600160401b03821117610a0357604052565b604081019081106001600160401b03821117610a0357604052565b6001600160401b038111610a0357604052565b602081019081106001600160401b03821117610a0357604052565b90601f801991011681019081106001600160401b03821117610a0357604052565b6005111561020457565b60038210156102045752565b60005b838110612de55750506000910152565b8181015183820152602001612dd5565b90602091612e0e81518092818552858086019101612dd2565b601f01601f1916010190565b612e569160018060a01b0382511681526040612e456020840151606060208501526060840190612df5565b920151906040818403910152612df5565b90565b9060088210156102045752565b906040612e5692612eba60a08251612e7f868251612e59565b6020810151612e8d81612dbc565b602087015284810151858701526060810151606087015260808101516080870152015160a0850190612cba565b60606020820151805160c0860152602081015160e0860152838101516101008601520151610120840152015190612f076101608061014084015260608451918401526101c0830190612df5565b906101a06040612f2b60208601519461015f19958686830301610180870152612df5565b9401519282850301910152612df5565b604435906001600160a01b038216820361013a57565b606090600319011261013a57600435600381101561013a57906024356001600160a01b038116810361013a579060443590565b6001600160401b038111610a0357601f01601f191660200190565b81601f8201121561013a57803590612fb682612f84565b92612fc46040519485612d9b565b8284526020838301011161013a57816000926020809301838601378301015290565b90612e569160208152602061300683516040838501526060840190612e1a565b920151906040601f1982850301910152612e66565b1561302257565b60405162461bcd60e51b815260206004820152600e60248201526d494e56414c49445f53544154555360901b6044820152606490fd5b9081602091031261013a5751801515810361013a5790565b1561307757565b60405162461bcd60e51b81526020600482015260126024820152712ca7aaafa0a922afaa2422afa9a2a62622a960711b6044820152606490fd5b60088110156102045760ff801960045416911617600455565b60208082526040818301526001808060a01b038154166060840152606060808401526000926002546130fb81612cc7565b908160c08401528381169081600014613459575060011461340f575b50808403605f190160a082015260035460009461313382612cc7565b808252918481169081156133f457506001146133ac575b50506040601f198286030191015260ff60045461316985838316612e59565b60081c1661317681612dbc565b828401526005546040840152600654606084015260075460808401526131a560ff6008541660a0850190612cba565b60095460c0840152600a5460e0840152600b54610100840152600c54610120840152606061016080610140860152840152600092600d546131e581612cc7565b90816101c0840152838116908160001461338d5750600114613341575b5061015f198185038101610180830152600e5460009561322182612cc7565b8082529185811690811561332457506001146132d8575b50506101a09082860301910152600092600f549161325583612cc7565b808352928181169081156132bb5750600114613273575b5050505090565b92935090600f600052600080516020614ba583398151915292846000945b8386106132a7575050505001013880808061326c565b805485870183015294019385908201613291565b60ff191685840152505090151560051b010190503880808061326c565b8591929650600e600052600080516020614b6583398151915290856000925b85841061330e57505001019490506101a038613238565b80548385018601528894909301928791016132f7565b60ff1916828801525090151560051b01840194506101a038613238565b909350600d600052600080516020614b8583398151915283836000925b848410613377575050506101e091508401019238613202565b80546101e0858a0101520191019083859161335e565b929550506101e09160ff191682860152151560051b8401019238613202565b849295506003600052600080516020614b4583398151915291846000935b8285106133de57505050010192388061314a565b80548585018701528795909401938691016133ca565b60ff1916828701525090151560051b0183019350388061314a565b9093506002600052600080516020614b2583398151915283836000925b8484106134445750505060e091508401019238613117565b805460e0858a0101520191019083859161342c565b905060e092955060ff191682860152151560051b8401019238613117565b1561347e57565b60405162461bcd60e51b815260206004820152600b60248201526a2ba927a723afaa27a5a2a760a91b6044820152606490fd5b51906001600160a01b038216820361013a57565b81601f8201121561013a5780516134db81612f84565b926134e96040519485612d9b565b8184526020828401011161013a57612e569160208085019101612dd2565b6040519061351482612d52565b60048252630307830360e41b6020830152565b60ff60085416600381101561020457600181036135ad575060155460405163f77800e560e01b815290602090829060049082906001600160a01b03165afa908115610e5857600091613577575090565b906020823d82116135a5575b8161359060209383612d9b565b810103126135a25750612e56906134b1565b80fd5b3d9150613583565b6002036135ec57601554604051635f117aa360e11b815290602090829060049082906001600160a01b03165afa908115610e5857600091613577575090565b600090565b600381101561020457600052601a60205260406000209060018060a01b031660005260205260406000205490565b1561362657565b60405162461bcd60e51b815260206004820152600a6024820152692727aa2fa9a2a62622a960b11b6044820152606490fd5b9081602091031261013a57516001600160a01b038116810361013a5790565b8181029291811591840414171561091f57565b9190820391821161091f57565b909493926060926136ac836080810198612cba565b6001600160a01b0316602083015260408201520152565b91906003831015610204576040926137467ffe2caf3897ec3e02a1d458d232d7c62c17809d25dbfe65864ce842162d6c217c93600090838252601a60205286822060018060a01b03861690818452602052613721828985205461374c565b978389949287869452601a602052828220908252602052205560405194859485613697565b0390a190565b9190820180921161091f57565b6003811015610204576000818152601a60205260409384822060018060a01b03851690818452602052858320548281106137e45791867f9060f8ffc7acd8270abf2337023e6377669ca44d5b2a23f3513a29380940f357969594926137c1836137469661368a565b98848a959288879452601a60205282822090825260205220555194859485613697565b865162461bcd60e51b8152602060048201526014602482015273125394d551919250d251539517d1115413d4d25560621b6044820152606490fd5b6001600160a01b03909116815260208101919091526060810192916138479160400190612cba565b565b929060049260ff8454166008811015613a62578060026138729214159081613acc575b5061301b565b8215613a97576003851015613a8257841580156138ca575b50507f68ffd6ad89c76c56b0b5206ae0c1a14cbffb37023d4e80f635ff7397c56b116b92506137466138bd8383876136c3565b946040519384938461381f565b6001861460008115613a77575b8115613a52575b506138e99150613477565b6138f285614a96565b906001600160a01b03908161390688614a96565b60408051636eb1769f60e11b81526001600160a01b0385168a82019081523060208083019190915297949193889385939284900301918391165afa8015610e58578791600091613a22575b50106139e5578291600085946064936040519a8b9687956323b872dd60e01b87521690850152306024850152896044850152165af18015610e58577f68ffd6ad89c76c56b0b5206ae0c1a14cbffb37023d4e80f635ff7397c56b116b946139c1926000926139c8575b5050614a58565b388061388a565b6139de9250803d10610f6f57610f618183612d9b565b38806139ba565b60405162461bcd60e51b81528088018590526016602482015275494e53554646494349454e545f414c4c4f57414e434560501b6044820152606490fd5b91508582813d8311613a4b575b613a398183612d9b565b810103126135a2575086905138613951565b503d613a2f565b9050613a62576138e990386138de565b602185634e487b7160e01b6000525260246000fd5b6002881491506138d7565b602184634e487b7160e01b6000525260246000fd5b60405162461bcd60e51b8152602081860152600e60248201526d14d51052d157d49154555254915160921b6044820152606490fd5b6003915014153861386c565b3d15613b03573d90613ae982612f84565b91613af76040519384612d9b565b82523d6000602084013e565b606090565b15613b0f57565b60405162461bcd60e51b815260206004820152600b60248201526a10d0531317d1905253115160aa1b6044820152606490fd5b9291613b4f818386613759565b60155460408051632ee4b68b60e11b815292949290916020906001600160a01b0390600490821683858381845afa948515613db057600095613dbb575b508382918751928380926318da001160e01b82525afa908115613db057908391600091613d93575b501693613d205760038a1015613d0b5789613c29575050507f659f33fc6677bebf3a9bf3101092792e31f35766d0358e54577bdd91a655f6a09495965090613c09600080808088613746975af1611b60613ad8565b516001600160a01b03909216825260208201929092529081906040820190565b86919383959a600060018214908115613d00575b8115613ce4575b5095613c5d600092613c58613c8e99613477565b614a96565b16928c519687958694859363a9059cbb60e01b8552840160209093929193604081019460018060a01b031681520152565b03925af1918215613cd957613746927f659f33fc6677bebf3a9bf3101092792e31f35766d0358e54577bdd91a655f6a096979892613cd4926000926139c8575050614a58565b613c09565b87513d6000823e3d90fd5b9295505091949250613a82579092849287926000613c5d613c44565b600283149150613c3d565b602190634e487b7160e01b6000525260246000fd5b925050506003879293949596971015613d0b57507f659f33fc6677bebf3a9bf3101092792e31f35766d0358e54577bdd91a655f6a09392916137469160028103613d745750613d6e84613df9565b50613c09565b60018103613d865750613d6e8461482a565b613cd457613d6e84614262565b613daa9150853d8711611f0357611ef48183612d9b565b38613bb4565b86513d6000823e3d90fd5b82919550613dd68591823d8411610f6f57610f618183612d9b565b959150613b8c565b9081602091031261013a575162ffffff8116810361013a5790565b60155460408051635f117aa360e11b808252919493926020926004916001600160a01b039190859085908590829086165afa93841561425757600094614220575b50601654885163095ea7b360e01b8082529184166001600160a01b03168582019081526020810189905291959091879183918290600090889083906040010393165af1801561407b57614203575b508160155416958851918252858285818a5afa91821561407b576000926141cc575b508851906325abd85f60e11b92838352878387818c5afa9283156140f957600093614195575b508a51928884602481633488e95960e21b9d8e825260008c8301525afa91821561413d57613f069460009361417d575b50614633565b826015541691895190815286818681865afa9081156140bf57600091614148575b50895163f77800e560e01b808252989088818881885afa91821561413d578991600093614104575b5060248d5180978193825260018b8301525afa9182156140f957613f7a946000936140ca5750614633565b94816015541692885182815286818381885afa9283156140bf578791600094614086575b50828b518097819382525afa92831561407b5787958795600095614036575b508a519081526001600160a01b03909416918401918252602082019590955291938492839160009183906040010393165af1801561402b5761400794955061400d575b505061482a565b50600190565b8161402392903d10610f6f57610f618183612d9b565b503880614000565b85513d6000823e3d90fd5b868194969395979298503d8311614074575b6140528183612d9b565b810103126135a2575091600086949261406c8997956134b1565b949091613fbd565b503d614048565b89513d6000823e3d90fd5b9182819592953d83116140b8575b61409e8183612d9b565b810103126135a257506140b187916134b1565b9238613f9e565b503d614094565b8a513d6000823e3d90fd5b6140eb919350893d8b116140f2575b6140e38183612d9b565b810190613dde565b9138613f00565b503d6140d9565b8b513d6000823e3d90fd5b9182819492943d8311614136575b61411c8183612d9b565b810103126135a2575061412f89916134b1565b9138613f4f565b503d614112565b8c513d6000823e3d90fd5b908782813d8311614176575b61415e8183612d9b565b810103126135a25750614170906134b1565b38613f27565b503d614154565b6140eb9193508a3d8c116140f2576140e38183612d9b565b90928882813d83116141c5575b6141ac8183612d9b565b810103126135a257506141be906134b1565b9138613ed0565b503d6141a2565b90918682813d83116141fc575b6141e38183612d9b565b810103126135a257506141f5906134b1565b9038613eaa565b503d6141d9565b61421990863d8811610f6f57610f618183612d9b565b5038613e88565b90938582813d8311614250575b6142378183612d9b565b810103126135a25750614249906134b1565b9238613e3a565b503d61422d565b88513d6000823e3d90fd5b90601554600092604080516325abd85f60e11b8082526020936004928581858160018060a01b03809b165afa9081156145ed579087918a916145f7575b501688813b156135a257829185875180948193630d0e30db60e41b83525af180156145ed576145da575b508783918688601554168751968780928882525afa9485156145d0578295614595575b50876016541694878751809281868d826143298963095ea7b360e01b9e8f84528d840160209093929193604081019460018060a01b031681520152565b0393165af1801561449057614578575b508760155416865194855287858581845afa94851561449057839561453d575b5086519063f77800e560e01b9586835289838781855afa9182156144f8578a908693614502575b8a51633488e95960e21b81526001898201529450849060249082905afa9283156144f857906143b89493929186936144e05750614633565b96806015541694865194808652888686818a5afa9586156144d657908991859761449a575b508589518099819382525afa958615614490579183918a989795938a979596614453575b5061442c8851998a97889687948552840160209093929193604081019460018060a01b031681520152565b0393165af190811561444a575061400794955061400d57505061482a565b513d87823e3d90fd5b9680929950879196503d8311614489575b61446e8183612d9b565b810103126135a257889661448289966134b1565b9438614401565b503d614464565b87513d85823e3d90fd5b8281939298503d83116144cf575b6144b28183612d9b565b810103126144cb576144c489916134b1565b95386143dd565b8380fd5b503d6144a8565b88513d86823e3d90fd5b6140eb9193508b3d8d116140f2576140e38183612d9b565b89513d87823e3d90fd5b925083813d8311614536575b6145188183612d9b565b81010312614532578961452c6024946134b1565b92614380565b8480fd5b503d61450e565b9094508781813d8311614571575b6145558183612d9b565b8101031261456d57614566906134b1565b9338614359565b8280fd5b503d61454b565b61458e90883d8a11610f6f57610f618183612d9b565b5038614339565b9094508681813d83116145c9575b6145ad8183612d9b565b810103126145c5576145be906134b1565b93386142ec565b5080fd5b503d6145a3565b86513d84823e3d90fd5b976145e6849299612d6d565b97906142c9565b85513d8b823e3d90fd5b809250878092503d831161462c575b6146108183612d9b565b810103126146285761462287916134b1565b3861429f565b8880fd5b503d614606565b601654604051636eb1769f60e11b81523060048201526001600160a01b039182166024820181905293959493929091169190602081604481865afa8015610e585785916000916147f5575b50106147a3575b50603c42019384421161091f576016546040516101008101916001600160a01b0316906001600160401b03831181841017610a035760409283529384526001600160a01b03928316602085810191825262ffffff9687168685019081523060608801908152608088019a8b5260a08801998a52600060c0890181815260e08a01828152975163414bf38960e01b81529951891660048b01529451881660248a01529151909816604488015296518516606487015297516084860152955160a4850152945160c4840152511660e482015292918391610104918391905af1908115610e5857600091614774575090565b906020823d60201161479b575b8161478e60209383612d9b565b810103126135a257505190565b3d9150614781565b60405163095ea7b360e01b8152600481019190915260001960248201526020816044816000865af18015610e585715614685576147ee9060203d602011610f6f57610f618183612d9b565b5038614685565b91506020823d602011614822575b8161481060209383612d9b565b810103126135a257508490513861467e565b3d9150614803565b60155460405163f77800e560e01b81526001600160a01b03916020908290600490829086165afa908115610e58576000916148a9575b501690813b1561013a57600091602483926040519485938492630852cd8d60e31b845260048401525af18015610e585761489a5750600190565b6148a390612d6d565b38614007565b906020823d82116148da575b816148c260209383612d9b565b810103126135a257506148d4906134b1565b38614860565b3d91506148b5565b92909160ff600454166008811015610204578060026149099214159081613acc575061301b565b60038410156102045783614972576000808084819482908215614968575b6001600160a01b031690f115610e58577f4a647b1d902051b0ae802f6050c58456d79d826bdf2bbf37a1bf13be97727b2d915b6137466138bd838387613759565b6108fc9150614927565b916001841460008115614a4d575b8115614a3f575b50826149de94614998602093613477565b6001600160a01b036149a988614a96565b1690600060405180988195829463a9059cbb60e01b84526004840160209093929193604081019460018060a01b031681520152565b03925af1928315610e58577f4a647b1d902051b0ae802f6050c58456d79d826bdf2bbf37a1bf13be97727b2d93614a1c91600091614a215750614a58565b61495a565b614a39915060203d8111610f6f57610f618183612d9b565b38611c85565b905061020457600082614987565b600286149150614980565b15614a5f57565b60405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b6044820152606490fd5b60038110156102045760028114614aeb57600114614ab357600090565b60155460405163f77800e560e01b815290602090829060049082906001600160a01b03165afa908115610e5857600091613577575090565b50601554604051635f117aa360e11b815290602090829060049082906001600160a01b03165afa908115610e585760009161357757509056fe405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acec2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85bbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fdd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb58d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802a2646970667358221220872b8e6d05037e1622d54ed05099680d04b2408a0a4f88564892f9dce78cb90c64736f6c63430008130033",
  "deployedBytecode": "0x608080604052600436101561001d575b50361561001b57600080fd5b005b60003560e01c908163010a38f514612c9b5750806305c1f502146128665780630917e7761461282057806317906c2e146128025780631d0b4af5146127335780633d876d5d14611f3f578063423932be146119a45780634c38d877146119745780634e69d5601461194c5780634fcf370f1461169557806352a6cb4a1461165857806354fd4d50146115765780635ad4e170146115495780635c63ed69146115195780637abe914d146112ba5780638da5cb5b146112915780638f903c7914610f95578063939e99fa146102e6578063d24e0c87146102c8578063df3832af1461021a578063ed70d5d51461013f5763faeb5e171461011c573861000f565b3461013a57600036600319011261013a576020600954604051908152f35b600080fd5b3461013a5761014d36612f51565b60ff60089392935416600381101561020457600383101561020457610173908314613477565b81600052601a60205260406000203360005260205280604060002054106101cc576020926101a29233906148e2565b601054336001600160a01b03909116036101c35780600a555b604051908152f35b806009556101bb565b60405162461bcd60e51b815260206004820152601060248201526f4e4f545f454e4f5547485f5354414b4560801b6044820152606490fd5b634e487b7160e01b600052602160045260246000fd5b3461013a57606036600319011261013a57600435600381101561013a576024356001600160401b03811161013a57610256903690600401612f9f565b5061025f612f3b565b9060ff6008541690600382101561020457602092610281610293938314613477565b61028b33836135f1565b9133906148e2565b6010546001600160a01b039033908216036102b5575080600a55604051908152f35b6011541633036101bb57806009556101bb565b3461013a57600036600319011261013a576020600a54604051908152f35b60e036600319011261013a576004356001600160401b03811161013a57610311903690600401612f9f565b6005602435101561013a576005604435101561013a57600360a435101561013a5760c4356001600160a01b038116900361013a5760405161035181612d52565b60405161035d81612d01565b600081526060602082015260606040820152815260206040519161038083612d01565b60405161038c81612d1c565b60008152600083820152600060408201526000606082015260006080820152600060a082015283526040516103c081612d37565b600081526000838201526000604082015260006060820152828401526040516103e881612d01565b6060815260608382015260606040820152604084015201526000600160a435148015610f85575b81908015610f76575b6104229150613477565b6000546001600160a01b0316330361013a5760145460405163122643f360e21b815233600482015290602090829060249082906001600160a01b03165afa908115610e5857600091610f47575b5015610f115760ff60045416600881101561020457600052601960205261049d60ff6040600020541661301b565b60843515610ed85760643515610ea4576102045760a43515610e64575b6104c5604435612dbc565b60ff604435166000526018602052604060002054906104ec60843560c4353360a435613849565b9060ff60045416916008831015610204576024926000526019602052604060002060ff19815416905560016000526040600020600160ff19825416179055600160ff196004541617600455600060018060a01b036014541660405194858092633bcaa1d960e21b82523360048301525afa928315610e5857600093610da5575b506040519361057a85612d1c565b60018552610589602435612dbc565b60243560208601524260408601526000606086015260808501526105b260a43560a08601612dc6565b604051906105bf82612d37565b8152606435602082015260006040820152600060608201526105df613507565b6105e7613507565b90604051936105f585612d01565b8452602084015260408301526040519361060e85612d01565b8452602084015260408301526040519161062783612d52565b81835260208301528051600180546001600160a01b0319166001600160a01b039290921691909117905560208101518051906001600160401b038211610a0357610672600254612cc7565b601f8111610d3c575b50602090601f8311600114610cc357604093929160009183610cb8575b50508160011b916000199060031b1c1916176002555b01518051906001600160401b038211610a035781906106ce600354612cc7565b601f8111610c41575b50602090601f8311600114610bc957600092610bbe575b50508160011b916000199060031b1c1916176003555b6020810151805180519060088210156102045761072260a0926130b1565b602081015161073081612dbc565b61073981612dbc565b61ff006004549160081b169061ff0019161760045560408101516005556060810151600655608081015160075501519060038210156102045760409160ff8019600854169116176008556060602082015180516009556020810151600a5583810151600b550151600c5501519081519182516001600160401b038111610a03576107c4600d54612cc7565b601f8111610b6b575b506020601f8211600114610af95781929394600092610aee575b50508160011b916000199060031b1c191617600d555b60208101518051906001600160401b038211610a035761081e600e54612cc7565b601f8111610a9b575b50602090601f8311600114610a2457604093929160009183610a19575b50508160011b916000199060031b1c191617600e555b01519081516001600160401b038111610a0357610878600f54612cc7565b601f81116109b0575b50602092601f82116001146109405792819293600092610935575b50508160011b916000199060031b1c191617600f555b60135490600019821461091f57600161091b9201601355336001600160601b0360a01b60115416176011557f32444e7b4a54d133e7b42c066eb65166a0c0a74d57ceffa00b125094dd0d38b56040518061090c8482612fe6565b0390a160405191829182612fe6565b0390f35b634e487b7160e01b600052601160045260246000fd5b01519050838061089c565b601f19821693600f600052600080516020614ba58339815191529160005b868110610998575083600195961061097f575b505050811b01600f556108b2565b015160001960f88460031b161c19169055838080610971565b9192602060018192868501518155019401920161095e565b600f600052600080516020614ba5833981519152601f830160051c810191602084106109f9575b601f0160051c01905b8181106109ed5750610881565b600081556001016109e0565b90915081906109d7565b634e487b7160e01b600052604160045260246000fd5b015190508580610844565b90601f19831691600e600052600080516020614b658339815191529260005b818110610a835750916001939185604097969410610a6a575b505050811b01600e5561085a565b015160001960f88460031b161c19169055858080610a5c565b92936020600181928786015181550195019301610a43565b600e600052600080516020614b65833981519152601f840160051c81019160208510610ae4575b601f0160051c01905b818110610ad85750610827565b60008155600101610acb565b9091508190610ac2565b0151905084806107e7565b601f19821690600d600052600080516020614b858339815191529160005b818110610b5357509583600195969710610b3a575b505050811b01600d556107fd565b015160001960f88460031b161c19169055848080610b2c565b9192602060018192868b015181550194019201610b17565b600d600052600080516020614b85833981519152601f830160051c81019160208410610bb4575b601f0160051c01905b818110610ba857506107cd565b60008155600101610b9b565b9091508190610b92565b0151905083806106ee565b92506003600052600080516020614b45833981519152906000935b601f1984168510610c26576001945083601f19811610610c0d575b505050811b01600355610704565b015160001960f88460031b161c19169055838080610bff565b81810151835560209485019460019093019290910190610be4565b9091506003600052601f830160051c600080516020614b45833981519152019060208410610ca2575b90601f8493920160051c600080516020614b4583398151915201905b818110610c9357506106d7565b60008155849350600101610c86565b600080516020614b458339815191529150610c6a565b015190508580610698565b906002600052600080516020614b258339815191529160005b601f1985168110610d24575091839160019360409695601f19811610610d0b575b505050811b016002556106ae565b015160001960f88460031b161c19169055858080610cfd565b91926020600181928685015181550194019201610cdc565b6002600052601f830160051c600080516020614b258339815191520160208410610d90575b601f820160051c600080516020614b25833981519152018110610d84575061067b565b60008155600101610d61565b50600080516020614b25833981519152610d61565b9092503d806000833e610db88183612d9b565b602082828101031261013a578151916001600160401b03831161013a576060838201838301031261013a5760405192610df084612d01565b610dfb8183016134b1565b8452602081830101516001600160401b03811161013a57610e239084840190838501016134c5565b602085015260408183010151906001600160401b03821161013a57610e4c9383019201016134c5565b6040820152918461056c565b6040513d6000823e3d90fd5b34608435146104ba5760405162461bcd60e51b815260206004820152600f60248201526e57524f4e475f4d53475f56414c554560881b6044820152606490fd5b60405162461bcd60e51b815260206004820152600c60248201526b5041594d454e545f5a45524f60a01b6044820152606490fd5b60405162461bcd60e51b81526020600482015260116024820152705354414b455f414d4f554e545f5a45524f60781b6044820152606490fd5b60405162461bcd60e51b815260206004820152600e60248201526d1554d15497d393d517d1561254d560921b6044820152606490fd5b610f69915060203d602011610f6f575b610f618183612d9b565b810190613058565b8361046f565b503d610f57565b50610204578060a43515610418565b506000905060a43560021461040f565b3461013a5760208060031936011261013a576001600160401b039060043582811161013a57610fc8903690600401612f9f565b60115490916001600160a01b0391610fe3908316331461361f565b60ff60045416600881101561020457806000526019825260ff604060002054168061127d575b156112495760248284601454166040519283809263122643f360e21b82523360048301525afa908115610e585760009161122c575b50156111f15761105560019333908554161461361f565b6000526019815260406000209260ff199384815416905560036000526040600020838582541617905560038460045416176004558051948511610a035761109d600e54612cc7565b601f811161119c575b5081601f861160011461112a57506003949260009284928361111f575b50501b9160001990851b1c191617600e555b60045416176004556110e96007544261374c565b6006557f02fe2a83c74f62aff637e2f8affe6ab2afef1ac9c7112f2ce5c98584b8ec73056040518061111a816130ca565b0390a1005b0151925086806110c3565b909491601f19831695600e600052600080516020614b65833981519152926000905b888210611185575050836003971061116d575b505050811b01600e556110d5565b015160001983871b60f8161c1916905584808061115f565b80878596829496860151815501950193019061114c565b600e600052600080516020614b65833981519152601f870160051c8101918488106111e7575b601f0160051c019084905b8281106111db5750506110a6565b600081550184906111cd565b90915081906111c2565b60405162461bcd60e51b8152600481018390526013602482015272155cd95c88191bd95cc81b9bdd08195e1a5cdd606a1b6044820152606490fd5b6112439150833d8511610f6f57610f618183612d9b565b8661103e565b60405162461bcd60e51b815260048101839052600c60248201526b57524f4e475f53544154555360a01b6044820152606490fd5b506002811480611009575060038114611009565b3461013a57600036600319011261013a576000546040516001600160a01b039091168152602090f35b3461013a5760208060031936011261013a576001600160401b039060043582811161013a576112ed903690600401612f9f565b9060ff6004541660088110158061020457816000526019835260ff60406000205416806114dd575b61131e9061301b565b61133460018060a01b0360115416331415613070565b610204576004036114a9578151928311610a0357611353600f54612cc7565b601f8111611457575b508092601f81116001146113e857809192936000916113dd575b508160011b916000199060031b1c191617600f555b600660ff1960045416176004557fe7d6481f2b9d6b669e12d036651e614223439c9ad89d743ac0dede17d2fd9921604051806113c6816130ca565b0390a161091b604051928284938452830190612df5565b905083015184611376565b601f19811693600f600052600080516020614ba58339815191529060005b868110611440575082600194959610611427575b5050811b01600f5561138b565b85015160001960f88460031b161c19169055848061141a565b909184600181928589015181550193019101611406565b600f600052600080516020614ba5833981519152601f850160051c81019183861061149f575b601f0160051c01905b818110611493575061135c565b60008155600101611486565b909150819061147d565b6064906040519062461bcd60e51b82526004820152600d60248201526c1393d517d19253905312569151609a1b6044820152fd5b5050600060038214801561150b575b819080156114fc575b9050611315565b506102045780600483146114f5565b5060009050600682146114ec565b3461013a57600036600319011261013a576008546011546020916101bb916001600160a01b03169060ff166135f1565b3461013a57600036600319011261013a576020611564613527565b6040516001600160a01b039091168152f35b3461013a57600036600319011261013a57604051600060175461159881612cc7565b8084529060019081811690811561163157506001146115d6575b61091b846115c281860382612d9b565b604051918291602083526020830190612df5565b6017600090815292507fc624b66cc0138b8fabc209247f72d758e1cf3343756d543badbf24212bed8c155b8284106116195750505081016020016115c2826115b2565b80546020858701810191909152909301928101611601565b60ff191660208087019190915292151560051b850190920192506115c291508390506115b2565b3461013a57604036600319011261013a57600435600381101561013a57602435906001600160a01b038216820361013a576020916101bb916135f1565b606036600319011261013a57600435600381101561013a5760249081356116ba612f3b565b6001600052602092601984526116d760ff6040600020541661301b565b60ff600854166003811015611937576116f1908214613477565b806119315734925b6011546001600160a01b039081169061171282856135f1565b600954116118fb57868891601454166040519283809263122643f360e21b82523360048301525afa908115610e58576000916118de575b50156118a85761175b90331415613070565b600a5490811561182557106117ec57600294509061177c92915b3390613849565b600a55601960ff199183836004541617600455836000525260406000206001828254161790556004541617600455336001600160601b0360a01b60105416176010557f024413d06e2653518c2c3ec94f6fa9abf03587aed601e2cec0004a154fb50d7e6040518061111a816130ca565b60405162461bcd60e51b815260048101859052601281870152711393d517d15393d551d217d410565351539560721b6044820152606490fd5b90503415611874571561184157600294509061177c9291611775565b60405162461bcd60e51b815260048101859052600c818701526b16915493d7d410565351539560a21b6044820152606490fd5b60405162461bcd60e51b815260048101869052600d818801526c5a45524f5f4d534756414c554560981b6044820152606490fd5b60405162461bcd60e51b815260048101879052600f818901526e1554d1549517d393d517d1561254d5608a1b6044820152606490fd5b6118f59150873d8911610f6f57610f618183612d9b565b88611749565b60405162461bcd60e51b815260048101889052600f818a01526e14d51052d157d25390d3d4949150d5608a1b6044820152606490fd5b826116f9565b85634e487b7160e01b60005260216004526000fd5b3461013a57600036600319011261013a57602060ff600454166119726040518092612e59565bf35b3461013a57600036600319011261013a576008546010546020916101bb916001600160a01b03169060ff166135f1565b3461013a57604036600319011261013a576004351580156004350361013a57601054602435906001600160a01b03166119de33821461361f565b60ff60045416600881101561020457600303611f0a576015546040516318da001160e01b81529190602090839060049082906001600160a01b03165afa918215610e5857600092611ed9575b50600a54604051634047e10360e11b81529093906020816004816001600160a01b0388165afa908115610e5857600091611ea5575b50612710611a70611a789287613677565b04809561368a565b9460065442118015611e9c575b15611d5657505050611ac8611aad60ff6008541660018060a01b0360105416600a5491613759565b6008546011549195916001600160a01b03169060ff166136c3565b9160ff6008541660038110158061020457600182148015918183611d48575b81908015611d3b575b611afa9150613477565b601554604051632ee4b68b60e11b815290602090829060049082906001600160a01b03165afa908115610e5857600091611d1c575b50611ccf576102045782611bff5750611b669360009384935083925082916001600160a01b03165af1611b60613ad8565b50613b08565b600955600a5560043515611bf85760045b60ff60045416600881101561020457600052601960205260406000209060ff1991828154169055600881101561020457611bca9160ff8216600052601960205260016040600020918254161790556130b1565b7f02fe2a83c74f62aff637e2f8affe6ab2afef1ac9c7112f2ce5c98584b8ec73056040518061111a816130ca565b6005611b77565b60009091611cc2575b8115611caf575b509260209291611c21611c6f95613477565b6001600160a01b0390611c3390614a96565b60405163a9059cbb60e01b81526001600160a01b0390931660048401526024830193909352909384929190911690829060009082906044820190565b03925af18015610e5857611c8b91600091611c90575b50614a58565b611b66565b611ca9915060203d602011610f6f57610f618183612d9b565b84611c85565b9050919091610204579060006020611c0f565b5050600281146000611c08565b9150919293506102045760028203611cf2575050611cec90613df9565b50611b66565b15611d015750611cec9061482a565b15611d0c5750611b66565b611d1590614262565b5082611cec565b611d35915060203d602011610f6f57610f618183612d9b565b89611b2f565b5061020457808415611af0565b506000905060028414611ae7565b925092509250611d6257005b6009548111611e615760125491670de0b6b3a76400009283811015611e2457600593611d91611d9f9285613677565b04809260ff60085416613b42565b600a55600854601154611dc09184916001600160a01b03169060ff16613b42565b60095560ff199183836004541617600455600b55600c55816000526019602052604060002060018282541617905560045416176004557f275bebb09134c1369fa190998cff2fa6935a1cebafc405bb809446f7228f25446040518061111a816130ca565b60405162461bcd60e51b81526020600482015260156024820152740a0aa9c92a6909a8a9ca8bea482a8929ebe90928e9605b1b6044820152606490fd5b60405162461bcd60e51b81526020600482015260136024820152720a0aa9c92a6909a8a9ca8bea89e9ebe90928e9606b1b6044820152606490fd5b50600435611a85565b90506020813d602011611ed1575b81611ec060209383612d9b565b8101031261013a5751612710611a5f565b3d9150611eb3565b611efc91925060203d602011611f03575b611ef48183612d9b565b810190613658565b9084611a2a565b503d611eea565b60405162461bcd60e51b815260206004820152600d60248201526c1393d517d4d550935255151151609a1b6044820152606490fd5b3461013a57600036600319011261013a576011546001600160a01b0390611f69908216331461361f565b60ff6004541660088110156102045760005260209060198252611f9360ff6040600020541661301b565b611f9b613507565b90611fa4613507565b916120b060405192611fb584612d01565b600084528584019283526040840194855260405193611fd385612d1c565b60078552600087860152600060408601526000606086015260006080860152600060a086015260405161200581612d37565b6000815260008882015260006040820152600060608201526040519061202a82612d01565b60405161203681612d80565b60008152825260405161204881612d80565b600081528983015260405161205c81612d80565b6000815260408301526040519661207288612d01565b87528887015260408601528660405161208a81612d52565b82815201948552511660018060a01b03166001600160601b0360a01b6001541617600155565b518051926001600160401b0393848111610a0357806120d0600254612cc7565b93601f948581116126d8575b50879085831160011461266457600092612659575b50508160011b916000199060031b1c1916176002555b51918251848111610a0357806003946121208654612cc7565b8581116125ff575b50879085831160011461258f57600092612584575b50508160011b9160001990861b1c19161783555b5193845194855160088110156102045761216a906130b1565b8186015161217781612dbc565b61218081612dbc565b61ff006004549160081b169061ff0019161760045560a0604087015196600597885560608101516006556080810151600755015190848210156102045760409160ff801960085416911617600855606083820151805160095584810151600a5583810151600b550151600c5501518051805190868211610a03578190612207600d54612cc7565b86811161252b575b5084908683116001146124b8576000926124ad575b50508160011b9160001990871b1c191617600d555b81810151805190868211610a0357612252600e54612cc7565b858111612460575b5083908583116001146123ea576040939291600091836123df575b50508160011b9160001990881b1c191617600e555b0151948551948511610a03576122a1600f54612cc7565b90838211612396575b50508091841160011461232157508293600093612316575b50508260011b92600019911b1c191617600f555b6001600160601b0360a01b601154166011557fea9300a5dae1f9505a3d12ec40afb3121817ab70d54e3f05b47b7121d03afb8f6040518061111a816130ca565b0151915083806122c2565b9190601f19841694600f600052600080516020614ba5833981519152936000905b87821061237e5750508460019610612364575b50505050811b01600f556122d6565b01519060f884600019921b161c1916905582808080612355565b80600185978294968601518155019601930190612342565b600f600052600080516020614ba58339815191529084808801821c8301938589106123d6575b01901c01905b818110156122aa57600081556001016123c2565b935082936123bc565b015190508980612275565b90601f19831691600e600052600080516020614b658339815191529260005b8782821061244a575050916001939185604097969410612432575b505050811b01600e5561228a565b0151600019838a1b60f8161c19169055898080612424565b6001859682939686015181550195019301612409565b600e600052600080516020614b65833981519152868085018b1c8201928786106124a4575b018a1c01905b818110612498575061225a565b6000815560010161248b565b92508192612485565b015190508880612224565b600d6000908152600080516020614b858339815191529350601f198516905b878282106125155750509084600195949392106124fd575b505050811b01600d55612239565b015160001983891b60f8161c191690558880806124ef565b60018596829396860151815501950193016124d7565b909150600d600052600080516020614b85833981519152868085018b1c82019287861061257b575b908594939291018b1c01905b81811061256c575061220f565b6000815584935060010161255f565b92508192612553565b01519050878061213d565b6000878152600080516020614b458339815191529350601f198516905b8a8282106125e95750509084600195949392106125d1575b505050811b018355612151565b015160001983881b60f8161c191690558780806125c4565b60018596829396860151815501950193016125ac565b90915085600052600080516020614b458339815191528580850160051c8201928a8610612650575b9085949392910160051c01905b8181106126415750612128565b60008155849350600101612634565b92508192612627565b0151905087806120f1565b60026000908152600080516020614b258339815191529350601f198516905b8a8282106126c25750509084600195949392106126a9575b505050811b01600255612107565b015160001960f88460031b161c1916905587808061269b565b6001859682939686015181550195019301612683565b9091506002600052600080516020614b258339815191528580850160051c8201928a861061272a575b9085949392910160051c01905b81811061271b57506120dc565b6000815584935060010161270e565b92508192612701565b61273c36612f51565b60ff60089392935416600381101561020457600383101561020457612762908314613477565b6010546001600160a01b0392908316331480156127f5575b156127be5760209361279e92846011541633146000146127b8575034913390613849565b906010541633146000146101c35780600a55604051908152f35b91611775565b60405162461bcd60e51b815260206004820152600f60248201526e2ba927a723afa6a9a3a9a2a72222a960891b6044820152606490fd5b508260115416331461277a565b3461013a57600036600319011261013a576020601354604051908152f35b3461013a57600036600319011261013a5760206101bb60ff6008541661286060018060a01b03916128558360115416826135f1565b9260105416906135f1565b9061374c565b3461013a57600036600319011261013a5760405161288381612d01565b600180546001600160a01b03168252604051600254909291908360006128a883612cc7565b80835292848116908115612c7c5750600114612c2d575b6128cb92500384612d9b565b60209283830152604051838160006003546128e581612cc7565b80845290868116908115612c0f5750600114612bc5575b5061290992500382612d9b565b60408301526040519061291b82612d01565b60405161292781612d1c565b60045460ff81169060088210156102045760ff91835260081c1661294a81612dbc565b8582015260055460408201526006546060820152600754608082015261297860ff6008541660a08301612dc6565b825260405161298681612d37565b6009548152600a5485820152600b546040820152600c54606082015284830152604051906129b382612d01565b60405185816000600d546129c681612cc7565b80845290868116908115612ba75750600114612b5d575b506129ea92500382612d9b565b825260405185816000600e546129ff81612cc7565b80845290868116908115612b3f5750600114612af5575b50612a2392500382612d9b565b8583015260405190600090600f5490612a3b82612cc7565b80855291818116908115612ad75750600114612a94575b612a878761091b8a898989612a69818b0382612d9b565b60408201526040820152604051948594604086526040860190612e1a565b9184830390850152612e66565b600f60009081529250600080516020614ba58339815191525b828410612ac4575050508101850181612a69612a52565b80548585018a0152928801928101612aad565b60ff1916858a01525050151560051b82018601905081612a69612a52565b600e6000908152915085600080516020614b658339815191525b828410612b285750505091612a23928201018892612a16565b805487850187015286945092850192879101612b0f565b60ff19168486015250899390151560051b8301019050612a23612a16565b600d6000908152915085600080516020614b858339815191525b828410612b9057505050916129ea9282010188926129dd565b805487850187015286945092850192879101612b77565b60ff19168486015250899390151560051b83010190506129ea6129dd565b60036000908152915085600080516020614b458339815191525b828410612bf857505050916129099282010186926128fc565b805487850187015286945092850192879101612bdf565b60ff19168486015250879390151560051b83010190506129096128fc565b50906002600052600080516020614b2583398151915290836000925b828410612c62575050509060206128cb928201016128bf565b6020929450805483858a0101520191019091838693612c49565b602092506128cb94915060ff191682840152151560051b8201016128bf565b3461013a57600036600319011261013a578061197260209260ff600854165b9060038210156102045752565b90600182811c92168015612cf7575b6020831014612ce157565b634e487b7160e01b600052602260045260246000fd5b91607f1691612cd6565b606081019081106001600160401b03821117610a0357604052565b60c081019081106001600160401b03821117610a0357604052565b608081019081106001600160401b03821117610a0357604052565b604081019081106001600160401b03821117610a0357604052565b6001600160401b038111610a0357604052565b602081019081106001600160401b03821117610a0357604052565b90601f801991011681019081106001600160401b03821117610a0357604052565b6005111561020457565b60038210156102045752565b60005b838110612de55750506000910152565b8181015183820152602001612dd5565b90602091612e0e81518092818552858086019101612dd2565b601f01601f1916010190565b612e569160018060a01b0382511681526040612e456020840151606060208501526060840190612df5565b920151906040818403910152612df5565b90565b9060088210156102045752565b906040612e5692612eba60a08251612e7f868251612e59565b6020810151612e8d81612dbc565b602087015284810151858701526060810151606087015260808101516080870152015160a0850190612cba565b60606020820151805160c0860152602081015160e0860152838101516101008601520151610120840152015190612f076101608061014084015260608451918401526101c0830190612df5565b906101a06040612f2b60208601519461015f19958686830301610180870152612df5565b9401519282850301910152612df5565b604435906001600160a01b038216820361013a57565b606090600319011261013a57600435600381101561013a57906024356001600160a01b038116810361013a579060443590565b6001600160401b038111610a0357601f01601f191660200190565b81601f8201121561013a57803590612fb682612f84565b92612fc46040519485612d9b565b8284526020838301011161013a57816000926020809301838601378301015290565b90612e569160208152602061300683516040838501526060840190612e1a565b920151906040601f1982850301910152612e66565b1561302257565b60405162461bcd60e51b815260206004820152600e60248201526d494e56414c49445f53544154555360901b6044820152606490fd5b9081602091031261013a5751801515810361013a5790565b1561307757565b60405162461bcd60e51b81526020600482015260126024820152712ca7aaafa0a922afaa2422afa9a2a62622a960711b6044820152606490fd5b60088110156102045760ff801960045416911617600455565b60208082526040818301526001808060a01b038154166060840152606060808401526000926002546130fb81612cc7565b908160c08401528381169081600014613459575060011461340f575b50808403605f190160a082015260035460009461313382612cc7565b808252918481169081156133f457506001146133ac575b50506040601f198286030191015260ff60045461316985838316612e59565b60081c1661317681612dbc565b828401526005546040840152600654606084015260075460808401526131a560ff6008541660a0850190612cba565b60095460c0840152600a5460e0840152600b54610100840152600c54610120840152606061016080610140860152840152600092600d546131e581612cc7565b90816101c0840152838116908160001461338d5750600114613341575b5061015f198185038101610180830152600e5460009561322182612cc7565b8082529185811690811561332457506001146132d8575b50506101a09082860301910152600092600f549161325583612cc7565b808352928181169081156132bb5750600114613273575b5050505090565b92935090600f600052600080516020614ba583398151915292846000945b8386106132a7575050505001013880808061326c565b805485870183015294019385908201613291565b60ff191685840152505090151560051b010190503880808061326c565b8591929650600e600052600080516020614b6583398151915290856000925b85841061330e57505001019490506101a038613238565b80548385018601528894909301928791016132f7565b60ff1916828801525090151560051b01840194506101a038613238565b909350600d600052600080516020614b8583398151915283836000925b848410613377575050506101e091508401019238613202565b80546101e0858a0101520191019083859161335e565b929550506101e09160ff191682860152151560051b8401019238613202565b849295506003600052600080516020614b4583398151915291846000935b8285106133de57505050010192388061314a565b80548585018701528795909401938691016133ca565b60ff1916828701525090151560051b0183019350388061314a565b9093506002600052600080516020614b2583398151915283836000925b8484106134445750505060e091508401019238613117565b805460e0858a0101520191019083859161342c565b905060e092955060ff191682860152151560051b8401019238613117565b1561347e57565b60405162461bcd60e51b815260206004820152600b60248201526a2ba927a723afaa27a5a2a760a91b6044820152606490fd5b51906001600160a01b038216820361013a57565b81601f8201121561013a5780516134db81612f84565b926134e96040519485612d9b565b8184526020828401011161013a57612e569160208085019101612dd2565b6040519061351482612d52565b60048252630307830360e41b6020830152565b60ff60085416600381101561020457600181036135ad575060155460405163f77800e560e01b815290602090829060049082906001600160a01b03165afa908115610e5857600091613577575090565b906020823d82116135a5575b8161359060209383612d9b565b810103126135a25750612e56906134b1565b80fd5b3d9150613583565b6002036135ec57601554604051635f117aa360e11b815290602090829060049082906001600160a01b03165afa908115610e5857600091613577575090565b600090565b600381101561020457600052601a60205260406000209060018060a01b031660005260205260406000205490565b1561362657565b60405162461bcd60e51b815260206004820152600a6024820152692727aa2fa9a2a62622a960b11b6044820152606490fd5b9081602091031261013a57516001600160a01b038116810361013a5790565b8181029291811591840414171561091f57565b9190820391821161091f57565b909493926060926136ac836080810198612cba565b6001600160a01b0316602083015260408201520152565b91906003831015610204576040926137467ffe2caf3897ec3e02a1d458d232d7c62c17809d25dbfe65864ce842162d6c217c93600090838252601a60205286822060018060a01b03861690818452602052613721828985205461374c565b978389949287869452601a602052828220908252602052205560405194859485613697565b0390a190565b9190820180921161091f57565b6003811015610204576000818152601a60205260409384822060018060a01b03851690818452602052858320548281106137e45791867f9060f8ffc7acd8270abf2337023e6377669ca44d5b2a23f3513a29380940f357969594926137c1836137469661368a565b98848a959288879452601a60205282822090825260205220555194859485613697565b865162461bcd60e51b8152602060048201526014602482015273125394d551919250d251539517d1115413d4d25560621b6044820152606490fd5b6001600160a01b03909116815260208101919091526060810192916138479160400190612cba565b565b929060049260ff8454166008811015613a62578060026138729214159081613acc575b5061301b565b8215613a97576003851015613a8257841580156138ca575b50507f68ffd6ad89c76c56b0b5206ae0c1a14cbffb37023d4e80f635ff7397c56b116b92506137466138bd8383876136c3565b946040519384938461381f565b6001861460008115613a77575b8115613a52575b506138e99150613477565b6138f285614a96565b906001600160a01b03908161390688614a96565b60408051636eb1769f60e11b81526001600160a01b0385168a82019081523060208083019190915297949193889385939284900301918391165afa8015610e58578791600091613a22575b50106139e5578291600085946064936040519a8b9687956323b872dd60e01b87521690850152306024850152896044850152165af18015610e58577f68ffd6ad89c76c56b0b5206ae0c1a14cbffb37023d4e80f635ff7397c56b116b946139c1926000926139c8575b5050614a58565b388061388a565b6139de9250803d10610f6f57610f618183612d9b565b38806139ba565b60405162461bcd60e51b81528088018590526016602482015275494e53554646494349454e545f414c4c4f57414e434560501b6044820152606490fd5b91508582813d8311613a4b575b613a398183612d9b565b810103126135a2575086905138613951565b503d613a2f565b9050613a62576138e990386138de565b602185634e487b7160e01b6000525260246000fd5b6002881491506138d7565b602184634e487b7160e01b6000525260246000fd5b60405162461bcd60e51b8152602081860152600e60248201526d14d51052d157d49154555254915160921b6044820152606490fd5b6003915014153861386c565b3d15613b03573d90613ae982612f84565b91613af76040519384612d9b565b82523d6000602084013e565b606090565b15613b0f57565b60405162461bcd60e51b815260206004820152600b60248201526a10d0531317d1905253115160aa1b6044820152606490fd5b9291613b4f818386613759565b60155460408051632ee4b68b60e11b815292949290916020906001600160a01b0390600490821683858381845afa948515613db057600095613dbb575b508382918751928380926318da001160e01b82525afa908115613db057908391600091613d93575b501693613d205760038a1015613d0b5789613c29575050507f659f33fc6677bebf3a9bf3101092792e31f35766d0358e54577bdd91a655f6a09495965090613c09600080808088613746975af1611b60613ad8565b516001600160a01b03909216825260208201929092529081906040820190565b86919383959a600060018214908115613d00575b8115613ce4575b5095613c5d600092613c58613c8e99613477565b614a96565b16928c519687958694859363a9059cbb60e01b8552840160209093929193604081019460018060a01b031681520152565b03925af1918215613cd957613746927f659f33fc6677bebf3a9bf3101092792e31f35766d0358e54577bdd91a655f6a096979892613cd4926000926139c8575050614a58565b613c09565b87513d6000823e3d90fd5b9295505091949250613a82579092849287926000613c5d613c44565b600283149150613c3d565b602190634e487b7160e01b6000525260246000fd5b925050506003879293949596971015613d0b57507f659f33fc6677bebf3a9bf3101092792e31f35766d0358e54577bdd91a655f6a09392916137469160028103613d745750613d6e84613df9565b50613c09565b60018103613d865750613d6e8461482a565b613cd457613d6e84614262565b613daa9150853d8711611f0357611ef48183612d9b565b38613bb4565b86513d6000823e3d90fd5b82919550613dd68591823d8411610f6f57610f618183612d9b565b959150613b8c565b9081602091031261013a575162ffffff8116810361013a5790565b60155460408051635f117aa360e11b808252919493926020926004916001600160a01b039190859085908590829086165afa93841561425757600094614220575b50601654885163095ea7b360e01b8082529184166001600160a01b03168582019081526020810189905291959091879183918290600090889083906040010393165af1801561407b57614203575b508160155416958851918252858285818a5afa91821561407b576000926141cc575b508851906325abd85f60e11b92838352878387818c5afa9283156140f957600093614195575b508a51928884602481633488e95960e21b9d8e825260008c8301525afa91821561413d57613f069460009361417d575b50614633565b826015541691895190815286818681865afa9081156140bf57600091614148575b50895163f77800e560e01b808252989088818881885afa91821561413d578991600093614104575b5060248d5180978193825260018b8301525afa9182156140f957613f7a946000936140ca5750614633565b94816015541692885182815286818381885afa9283156140bf578791600094614086575b50828b518097819382525afa92831561407b5787958795600095614036575b508a519081526001600160a01b03909416918401918252602082019590955291938492839160009183906040010393165af1801561402b5761400794955061400d575b505061482a565b50600190565b8161402392903d10610f6f57610f618183612d9b565b503880614000565b85513d6000823e3d90fd5b868194969395979298503d8311614074575b6140528183612d9b565b810103126135a2575091600086949261406c8997956134b1565b949091613fbd565b503d614048565b89513d6000823e3d90fd5b9182819592953d83116140b8575b61409e8183612d9b565b810103126135a257506140b187916134b1565b9238613f9e565b503d614094565b8a513d6000823e3d90fd5b6140eb919350893d8b116140f2575b6140e38183612d9b565b810190613dde565b9138613f00565b503d6140d9565b8b513d6000823e3d90fd5b9182819492943d8311614136575b61411c8183612d9b565b810103126135a2575061412f89916134b1565b9138613f4f565b503d614112565b8c513d6000823e3d90fd5b908782813d8311614176575b61415e8183612d9b565b810103126135a25750614170906134b1565b38613f27565b503d614154565b6140eb9193508a3d8c116140f2576140e38183612d9b565b90928882813d83116141c5575b6141ac8183612d9b565b810103126135a257506141be906134b1565b9138613ed0565b503d6141a2565b90918682813d83116141fc575b6141e38183612d9b565b810103126135a257506141f5906134b1565b9038613eaa565b503d6141d9565b61421990863d8811610f6f57610f618183612d9b565b5038613e88565b90938582813d8311614250575b6142378183612d9b565b810103126135a25750614249906134b1565b9238613e3a565b503d61422d565b88513d6000823e3d90fd5b90601554600092604080516325abd85f60e11b8082526020936004928581858160018060a01b03809b165afa9081156145ed579087918a916145f7575b501688813b156135a257829185875180948193630d0e30db60e41b83525af180156145ed576145da575b508783918688601554168751968780928882525afa9485156145d0578295614595575b50876016541694878751809281868d826143298963095ea7b360e01b9e8f84528d840160209093929193604081019460018060a01b031681520152565b0393165af1801561449057614578575b508760155416865194855287858581845afa94851561449057839561453d575b5086519063f77800e560e01b9586835289838781855afa9182156144f8578a908693614502575b8a51633488e95960e21b81526001898201529450849060249082905afa9283156144f857906143b89493929186936144e05750614633565b96806015541694865194808652888686818a5afa9586156144d657908991859761449a575b508589518099819382525afa958615614490579183918a989795938a979596614453575b5061442c8851998a97889687948552840160209093929193604081019460018060a01b031681520152565b0393165af190811561444a575061400794955061400d57505061482a565b513d87823e3d90fd5b9680929950879196503d8311614489575b61446e8183612d9b565b810103126135a257889661448289966134b1565b9438614401565b503d614464565b87513d85823e3d90fd5b8281939298503d83116144cf575b6144b28183612d9b565b810103126144cb576144c489916134b1565b95386143dd565b8380fd5b503d6144a8565b88513d86823e3d90fd5b6140eb9193508b3d8d116140f2576140e38183612d9b565b89513d87823e3d90fd5b925083813d8311614536575b6145188183612d9b565b81010312614532578961452c6024946134b1565b92614380565b8480fd5b503d61450e565b9094508781813d8311614571575b6145558183612d9b565b8101031261456d57614566906134b1565b9338614359565b8280fd5b503d61454b565b61458e90883d8a11610f6f57610f618183612d9b565b5038614339565b9094508681813d83116145c9575b6145ad8183612d9b565b810103126145c5576145be906134b1565b93386142ec565b5080fd5b503d6145a3565b86513d84823e3d90fd5b976145e6849299612d6d565b97906142c9565b85513d8b823e3d90fd5b809250878092503d831161462c575b6146108183612d9b565b810103126146285761462287916134b1565b3861429f565b8880fd5b503d614606565b601654604051636eb1769f60e11b81523060048201526001600160a01b039182166024820181905293959493929091169190602081604481865afa8015610e585785916000916147f5575b50106147a3575b50603c42019384421161091f576016546040516101008101916001600160a01b0316906001600160401b03831181841017610a035760409283529384526001600160a01b03928316602085810191825262ffffff9687168685019081523060608801908152608088019a8b5260a08801998a52600060c0890181815260e08a01828152975163414bf38960e01b81529951891660048b01529451881660248a01529151909816604488015296518516606487015297516084860152955160a4850152945160c4840152511660e482015292918391610104918391905af1908115610e5857600091614774575090565b906020823d60201161479b575b8161478e60209383612d9b565b810103126135a257505190565b3d9150614781565b60405163095ea7b360e01b8152600481019190915260001960248201526020816044816000865af18015610e585715614685576147ee9060203d602011610f6f57610f618183612d9b565b5038614685565b91506020823d602011614822575b8161481060209383612d9b565b810103126135a257508490513861467e565b3d9150614803565b60155460405163f77800e560e01b81526001600160a01b03916020908290600490829086165afa908115610e58576000916148a9575b501690813b1561013a57600091602483926040519485938492630852cd8d60e31b845260048401525af18015610e585761489a5750600190565b6148a390612d6d565b38614007565b906020823d82116148da575b816148c260209383612d9b565b810103126135a257506148d4906134b1565b38614860565b3d91506148b5565b92909160ff600454166008811015610204578060026149099214159081613acc575061301b565b60038410156102045783614972576000808084819482908215614968575b6001600160a01b031690f115610e58577f4a647b1d902051b0ae802f6050c58456d79d826bdf2bbf37a1bf13be97727b2d915b6137466138bd838387613759565b6108fc9150614927565b916001841460008115614a4d575b8115614a3f575b50826149de94614998602093613477565b6001600160a01b036149a988614a96565b1690600060405180988195829463a9059cbb60e01b84526004840160209093929193604081019460018060a01b031681520152565b03925af1928315610e58577f4a647b1d902051b0ae802f6050c58456d79d826bdf2bbf37a1bf13be97727b2d93614a1c91600091614a215750614a58565b61495a565b614a39915060203d8111610f6f57610f618183612d9b565b38611c85565b905061020457600082614987565b600286149150614980565b15614a5f57565b60405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b6044820152606490fd5b60038110156102045760028114614aeb57600114614ab357600090565b60155460405163f77800e560e01b815290602090829060049082906001600160a01b03165afa908115610e5857600091613577575090565b50601554604051635f117aa360e11b815290602090829060049082906001600160a01b03165afa908115610e585760009161357757509056fe405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acec2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85bbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fdd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb58d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802a2646970667358221220872b8e6d05037e1622d54ed05099680d04b2408a0a4f88564892f9dce78cb90c64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7799,
        "contract": "contracts/evm/features/MecenateFeed.sol:MecenateFeed",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7802,
        "contract": "contracts/evm/features/MecenateFeed.sol:MecenateFeed",
        "label": "post",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Post)6888_storage"
      },
      {
        "astId": 7805,
        "contract": "contracts/evm/features/MecenateFeed.sol:MecenateFeed",
        "label": "postSettingPrivate",
        "offset": 0,
        "slot": "16",
        "type": "t_struct(PostSettingPrivate)6926_storage"
      },
      {
        "astId": 7808,
        "contract": "contracts/evm/features/MecenateFeed.sol:MecenateFeed",
        "label": "settings",
        "offset": 0,
        "slot": "18",
        "type": "t_struct(FeedSettings)6866_storage"
      },
      {
        "astId": 7812,
        "contract": "contracts/evm/features/MecenateFeed.sol:MecenateFeed",
        "label": "postDurationToDays",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_uint8,t_uint256)"
      },
      {
        "astId": 7816,
        "contract": "contracts/evm/features/MecenateFeed.sol:MecenateFeed",
        "label": "validStatuses",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_uint8,t_bool)"
      },
      {
        "astId": 8129,
        "contract": "contracts/evm/features/MecenateFeed.sol:MecenateFeed",
        "label": "_deposit",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_enum(PostStatus)6837": {
        "encoding": "inplace",
        "label": "enum Structures.PostStatus",
        "numberOfBytes": "1"
      },
      "t_enum(PostType)6847": {
        "encoding": "inplace",
        "label": "enum Structures.PostType",
        "numberOfBytes": "1"
      },
      "t_enum(Tokens)6841": {
        "encoding": "inplace",
        "label": "enum Structures.Tokens",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint8,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint8,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(FeedSettings)6866_storage": {
        "encoding": "inplace",
        "label": "struct Structures.FeedSettings",
        "members": [
          {
            "astId": 6855,
            "contract": "contracts/evm/features/MecenateFeed.sol:MecenateFeed",
            "label": "punishmentRatio",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6857,
            "contract": "contracts/evm/features/MecenateFeed.sol:MecenateFeed",
            "label": "postCount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6859,
            "contract": "contracts/evm/features/MecenateFeed.sol:MecenateFeed",
            "label": "usersModuleContract",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 6861,
            "contract": "contracts/evm/features/MecenateFeed.sol:MecenateFeed",
            "label": "factoryContract",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 6863,
            "contract": "contracts/evm/features/MecenateFeed.sol:MecenateFeed",
            "label": "router",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 6865,
            "contract": "contracts/evm/features/MecenateFeed.sol:MecenateFeed",
            "label": "version",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Post)6888_storage": {
        "encoding": "inplace",
        "label": "struct Structures.Post",
        "members": [
          {
            "astId": 6884,
            "contract": "contracts/evm/features/MecenateFeed.sol:MecenateFeed",
            "label": "creator",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(User)6942_storage"
          },
          {
            "astId": 6887,
            "contract": "contracts/evm/features/MecenateFeed.sol:MecenateFeed",
            "label": "postdata",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(PostData)6898_storage"
          }
        ],
        "numberOfBytes": "480"
      },
      "t_struct(PostData)6898_storage": {
        "encoding": "inplace",
        "label": "struct Structures.PostData",
        "members": [
          {
            "astId": 6891,
            "contract": "contracts/evm/features/MecenateFeed.sol:MecenateFeed",
            "label": "settings",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(PostSettings)6921_storage"
          },
          {
            "astId": 6894,
            "contract": "contracts/evm/features/MecenateFeed.sol:MecenateFeed",
            "label": "escrow",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(PostEscrow)6935_storage"
          },
          {
            "astId": 6897,
            "contract": "contracts/evm/features/MecenateFeed.sol:MecenateFeed",
            "label": "data",
            "offset": 0,
            "slot": "9",
            "type": "t_struct(PostEncryptedData)6905_storage"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(PostEncryptedData)6905_storage": {
        "encoding": "inplace",
        "label": "struct Structures.PostEncryptedData",
        "members": [
          {
            "astId": 6900,
            "contract": "contracts/evm/features/MecenateFeed.sol:MecenateFeed",
            "label": "encryptedData",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes_storage"
          },
          {
            "astId": 6902,
            "contract": "contracts/evm/features/MecenateFeed.sol:MecenateFeed",
            "label": "encryptedKey",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes_storage"
          },
          {
            "astId": 6904,
            "contract": "contracts/evm/features/MecenateFeed.sol:MecenateFeed",
            "label": "decryptedData",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(PostEscrow)6935_storage": {
        "encoding": "inplace",
        "label": "struct Structures.PostEscrow",
        "members": [
          {
            "astId": 6928,
            "contract": "contracts/evm/features/MecenateFeed.sol:MecenateFeed",
            "label": "stake",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6930,
            "contract": "contracts/evm/features/MecenateFeed.sol:MecenateFeed",
            "label": "payment",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6932,
            "contract": "contracts/evm/features/MecenateFeed.sol:MecenateFeed",
            "label": "punishment",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6934,
            "contract": "contracts/evm/features/MecenateFeed.sol:MecenateFeed",
            "label": "penalty",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(PostSettingPrivate)6926_storage": {
        "encoding": "inplace",
        "label": "struct Structures.PostSettingPrivate",
        "members": [
          {
            "astId": 6923,
            "contract": "contracts/evm/features/MecenateFeed.sol:MecenateFeed",
            "label": "buyerAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6925,
            "contract": "contracts/evm/features/MecenateFeed.sol:MecenateFeed",
            "label": "sellerAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PostSettings)6921_storage": {
        "encoding": "inplace",
        "label": "struct Structures.PostSettings",
        "members": [
          {
            "astId": 6908,
            "contract": "contracts/evm/features/MecenateFeed.sol:MecenateFeed",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(PostStatus)6837"
          },
          {
            "astId": 6911,
            "contract": "contracts/evm/features/MecenateFeed.sol:MecenateFeed",
            "label": "postType",
            "offset": 1,
            "slot": "0",
            "type": "t_enum(PostType)6847"
          },
          {
            "astId": 6913,
            "contract": "contracts/evm/features/MecenateFeed.sol:MecenateFeed",
            "label": "creationTimeStamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6915,
            "contract": "contracts/evm/features/MecenateFeed.sol:MecenateFeed",
            "label": "endTimeStamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6917,
            "contract": "contracts/evm/features/MecenateFeed.sol:MecenateFeed",
            "label": "duration",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6920,
            "contract": "contracts/evm/features/MecenateFeed.sol:MecenateFeed",
            "label": "tokenId",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(Tokens)6841"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(User)6942_storage": {
        "encoding": "inplace",
        "label": "struct Structures.User",
        "members": [
          {
            "astId": 6937,
            "contract": "contracts/evm/features/MecenateFeed.sol:MecenateFeed",
            "label": "evmAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6939,
            "contract": "contracts/evm/features/MecenateFeed.sol:MecenateFeed",
            "label": "sismoVaultId",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes_storage"
          },
          {
            "astId": 6941,
            "contract": "contracts/evm/features/MecenateFeed.sol:MecenateFeed",
            "label": "publicKey",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}