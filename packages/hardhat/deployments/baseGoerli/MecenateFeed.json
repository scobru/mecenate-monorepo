{
  "address": "0xf3E8DD1b1D4bccA5AE04Ce1C04140C1cA612bE71",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usersModuleContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factoryContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_major",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_patch",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "evmAddress",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "sismoVaultId",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "publicKey",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Structures.User",
              "name": "creator",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum Structures.PostStatus",
                      "name": "status",
                      "type": "uint8"
                    },
                    {
                      "internalType": "enum Structures.PostType",
                      "name": "postType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "creationTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "duration",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum Structures.Tokens",
                      "name": "tokenId",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct Structures.PostSettings",
                  "name": "settings",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "buyer",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "seller",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "stake",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "payment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "punishment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "penalty",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structures.PostEscrow",
                  "name": "escrow",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes",
                      "name": "encryptedData",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "encryptedKey",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "decryptedData",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Structures.PostEncryptedData",
                  "name": "data",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Structures.PostData",
              "name": "postdata",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct Structures.Post",
          "name": "post",
          "type": "tuple"
        }
      ],
      "name": "Accepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "evmAddress",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "sismoVaultId",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "publicKey",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Structures.User",
              "name": "creator",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum Structures.PostStatus",
                      "name": "status",
                      "type": "uint8"
                    },
                    {
                      "internalType": "enum Structures.PostType",
                      "name": "postType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "creationTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "duration",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum Structures.Tokens",
                      "name": "tokenId",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct Structures.PostSettings",
                  "name": "settings",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "buyer",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "seller",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "stake",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "payment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "punishment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "penalty",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structures.PostEscrow",
                  "name": "escrow",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes",
                      "name": "encryptedData",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "encryptedKey",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "decryptedData",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Structures.PostEncryptedData",
                  "name": "data",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Structures.PostData",
              "name": "postdata",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct Structures.Post",
          "name": "post",
          "type": "tuple"
        }
      ],
      "name": "Created",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum Structures.Tokens",
          "name": "tokenID",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDeposit",
          "type": "uint256"
        }
      ],
      "name": "DepositDecreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum Structures.Tokens",
          "name": "tokenID",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDeposit",
          "type": "uint256"
        }
      ],
      "name": "DepositIncreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "evmAddress",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "sismoVaultId",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "publicKey",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Structures.User",
              "name": "creator",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum Structures.PostStatus",
                      "name": "status",
                      "type": "uint8"
                    },
                    {
                      "internalType": "enum Structures.PostType",
                      "name": "postType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "creationTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "duration",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum Structures.Tokens",
                      "name": "tokenId",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct Structures.PostSettings",
                  "name": "settings",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "buyer",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "seller",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "stake",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "payment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "punishment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "penalty",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structures.PostEscrow",
                  "name": "escrow",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes",
                      "name": "encryptedData",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "encryptedKey",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "decryptedData",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Structures.PostEncryptedData",
                  "name": "data",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Structures.PostData",
              "name": "postdata",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct Structures.Post",
          "name": "post",
          "type": "tuple"
        }
      ],
      "name": "Finalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "evmAddress",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "sismoVaultId",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "publicKey",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Structures.User",
              "name": "creator",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum Structures.PostStatus",
                      "name": "status",
                      "type": "uint8"
                    },
                    {
                      "internalType": "enum Structures.PostType",
                      "name": "postType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "creationTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "duration",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum Structures.Tokens",
                      "name": "tokenId",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct Structures.PostSettings",
                  "name": "settings",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "buyer",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "seller",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "stake",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "payment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "punishment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "penalty",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structures.PostEscrow",
                  "name": "escrow",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes",
                      "name": "encryptedData",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "encryptedKey",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "decryptedData",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Structures.PostEncryptedData",
                  "name": "data",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Structures.PostData",
              "name": "postdata",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct Structures.Post",
          "name": "post",
          "type": "tuple"
        }
      ],
      "name": "Invalid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "evmAddress",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "sismoVaultId",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "publicKey",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Structures.User",
              "name": "creator",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum Structures.PostStatus",
                      "name": "status",
                      "type": "uint8"
                    },
                    {
                      "internalType": "enum Structures.PostType",
                      "name": "postType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "creationTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "duration",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum Structures.Tokens",
                      "name": "tokenId",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct Structures.PostSettings",
                  "name": "settings",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "buyer",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "seller",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "stake",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "payment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "punishment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "penalty",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structures.PostEscrow",
                  "name": "escrow",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes",
                      "name": "encryptedData",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "encryptedKey",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "decryptedData",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Structures.PostEncryptedData",
                  "name": "data",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Structures.PostData",
              "name": "postdata",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct Structures.Post",
          "name": "post",
          "type": "tuple"
        }
      ],
      "name": "MadePublic",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "evmAddress",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "sismoVaultId",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "publicKey",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Structures.User",
              "name": "creator",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum Structures.PostStatus",
                      "name": "status",
                      "type": "uint8"
                    },
                    {
                      "internalType": "enum Structures.PostType",
                      "name": "postType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "creationTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "duration",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum Structures.Tokens",
                      "name": "tokenId",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct Structures.PostSettings",
                  "name": "settings",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "buyer",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "seller",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "stake",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "payment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "punishment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "penalty",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structures.PostEscrow",
                  "name": "escrow",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes",
                      "name": "encryptedData",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "encryptedKey",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "decryptedData",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Structures.PostEncryptedData",
                  "name": "data",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Structures.PostData",
              "name": "postdata",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct Structures.Post",
          "name": "post",
          "type": "tuple"
        }
      ],
      "name": "Renounced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum Structures.Tokens",
          "name": "tokenId",
          "type": "uint8"
        }
      ],
      "name": "StakeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "StakeBurned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum Structures.Tokens",
          "name": "tokenId",
          "type": "uint8"
        }
      ],
      "name": "StakeTaken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "evmAddress",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "sismoVaultId",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "publicKey",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Structures.User",
              "name": "creator",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum Structures.PostStatus",
                      "name": "status",
                      "type": "uint8"
                    },
                    {
                      "internalType": "enum Structures.PostType",
                      "name": "postType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "creationTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "duration",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum Structures.Tokens",
                      "name": "tokenId",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct Structures.PostSettings",
                  "name": "settings",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "buyer",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "seller",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "stake",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "payment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "punishment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "penalty",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structures.PostEscrow",
                  "name": "escrow",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes",
                      "name": "encryptedData",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "encryptedKey",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "decryptedData",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Structures.PostEncryptedData",
                  "name": "data",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Structures.PostData",
              "name": "postdata",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct Structures.Post",
          "name": "post",
          "type": "tuple"
        }
      ],
      "name": "Valid",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "enum Structures.Tokens",
          "name": "tokenId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "paymentAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        }
      ],
      "name": "acceptPost",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Structures.Tokens",
          "name": "tokenId",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_funder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountToAdd",
          "type": "uint256"
        }
      ],
      "name": "addStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "encryptedHash",
          "type": "bytes"
        },
        {
          "internalType": "enum Structures.PostType",
          "name": "postType",
          "type": "uint8"
        },
        {
          "internalType": "enum Structures.PostDuration",
          "name": "postDuration",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakeAmount",
          "type": "uint256"
        },
        {
          "internalType": "enum Structures.Tokens",
          "name": "tokenId",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "useStake",
          "type": "bool"
        }
      ],
      "name": "createPost",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "evmAddress",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "sismoVaultId",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "publicKey",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Structures.User",
              "name": "creator",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum Structures.PostStatus",
                      "name": "status",
                      "type": "uint8"
                    },
                    {
                      "internalType": "enum Structures.PostType",
                      "name": "postType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "creationTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "duration",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum Structures.Tokens",
                      "name": "tokenId",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct Structures.PostSettings",
                  "name": "settings",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "buyer",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "seller",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "stake",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "payment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "punishment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "penalty",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structures.PostEscrow",
                  "name": "escrow",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes",
                      "name": "encryptedData",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "encryptedKey",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "decryptedData",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Structures.PostEncryptedData",
                  "name": "data",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Structures.PostData",
              "name": "postdata",
              "type": "tuple"
            }
          ],
          "internalType": "struct Structures.Post",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "valid",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "punishment",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "uid",
          "type": "bytes32"
        }
      ],
      "name": "finalizePost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBuyerStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEncryptedPost",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPaymentRequested",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPost",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "evmAddress",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "sismoVaultId",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "publicKey",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Structures.User",
              "name": "creator",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum Structures.PostStatus",
                      "name": "status",
                      "type": "uint8"
                    },
                    {
                      "internalType": "enum Structures.PostType",
                      "name": "postType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "creationTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "duration",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum Structures.Tokens",
                      "name": "tokenId",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct Structures.PostSettings",
                  "name": "settings",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "buyer",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "seller",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "stake",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "payment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "punishment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "penalty",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structures.PostEscrow",
                  "name": "escrow",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes",
                      "name": "encryptedData",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "encryptedKey",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "decryptedData",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Structures.PostEncryptedData",
                  "name": "data",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Structures.PostData",
              "name": "postdata",
              "type": "tuple"
            }
          ],
          "internalType": "struct Structures.Post",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSellerStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Structures.Tokens",
          "name": "tokenId",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        }
      ],
      "name": "getStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakeRequested",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStatus",
      "outputs": [
        {
          "internalType": "enum Structures.PostStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenId",
      "outputs": [
        {
          "internalType": "enum Structures.Tokens",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenIdAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "post",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "evmAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "sismoVaultId",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "publicKey",
              "type": "bytes"
            }
          ],
          "internalType": "struct Structures.User",
          "name": "creator",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum Structures.PostStatus",
                  "name": "status",
                  "type": "uint8"
                },
                {
                  "internalType": "enum Structures.PostType",
                  "name": "postType",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "creationTimeStamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "endTimeStamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "duration",
                  "type": "uint256"
                },
                {
                  "internalType": "enum Structures.Tokens",
                  "name": "tokenId",
                  "type": "uint8"
                }
              ],
              "internalType": "struct Structures.PostSettings",
              "name": "settings",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "buyer",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "seller",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "stake",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "payment",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "punishment",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "penalty",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Structures.PostEscrow",
              "name": "escrow",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bytes",
                  "name": "encryptedData",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "encryptedKey",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "decryptedData",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Structures.PostEncryptedData",
              "name": "data",
              "type": "tuple"
            }
          ],
          "internalType": "struct Structures.PostData",
          "name": "postdata",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "postCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renouncePost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "decryptedData",
          "type": "bytes"
        }
      ],
      "name": "revealData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "encryptedKey",
          "type": "bytes"
        }
      ],
      "name": "submitHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Structures.Tokens",
          "name": "tokenId",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "takeFullStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Structures.Tokens",
          "name": "tokenId",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountToTake",
          "type": "uint256"
        }
      ],
      "name": "takeStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x57a8f001ced3c5eb9aefbf71eb5173bc9f1df4d9f077a56e98ced184a8e4046f",
  "receipt": {
    "to": null,
    "from": "0x8aA5F726d9F868a21a8bd748E2f1E43bA31eb670",
    "contractAddress": "0xf3E8DD1b1D4bccA5AE04Ce1C04140C1cA612bE71",
    "transactionIndex": 1,
    "gasUsed": "4963477",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x2020cac68a24adb66ac6f0c84aecf3a4e9d29620fc842afe3d284e4fe368c3e8",
    "transactionHash": "0x57a8f001ced3c5eb9aefbf71eb5173bc9f1df4d9f077a56e98ced184a8e4046f",
    "logs": [],
    "blockNumber": 11406836,
    "cumulativeGasUsed": "5010330",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000000000000000000000000000000000",
    "0xf0E5Bd580a8Ab22B3c21b64a2c8807adE402f46d",
    "0x9fB0ecA551615035464ac00b8c9aE39f57404F4B",
    2,
    0,
    0
  ],
  "numDeployments": 1,
  "solcInputHash": "b3fd9b8f863ef698e8893074a5e8fcf0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usersModuleContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factoryContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_major\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_patch\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Accepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDeposit\",\"type\":\"uint256\"}],\"name\":\"DepositDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDeposit\",\"type\":\"uint256\"}],\"name\":\"DepositIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Invalid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"MadePublic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Renounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"name\":\"StakeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"name\":\"StakeTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Valid\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"acceptPost\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_funder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToAdd\",\"type\":\"uint256\"}],\"name\":\"addStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encryptedHash\",\"type\":\"bytes\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostDuration\",\"name\":\"postDuration\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useStake\",\"type\":\"bool\"}],\"name\":\"createPost\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.Post\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"finalizePost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyerStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEncryptedPost\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaymentRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPost\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.Post\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellerStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenIdAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"post\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"name\":\"revealData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"}],\"name\":\"submitHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"takeFullStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToTake\",\"type\":\"uint256\"}],\"name\":\"takeStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"version()\":{\"returns\":{\"_0\":\"Semver contract version as a string.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"version()\":{\"notice\":\"Returns the full semver contract version.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/features/MecenateFeed.sol\":\"MecenateFeed\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/features/MecenateFeed.sol\":{\"content\":\"/**\\n * @title MecenateFeed\\n * @dev This contract implements the MecenateFeed feature, which allows users to create and manage posts for crowdfunding campaigns.\\n * The contract inherits from several modules that provide functionality for post creation, acceptance, submission, finalization, and renouncement.\\n * The contract also provides several view functions to retrieve information about a post's buyer payment, seller deposit, seller stake, buyer stake, payment requested, post status, and post count.\\n */\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../modules/Events.sol\\\";\\nimport \\\"../modules/Creation.sol\\\";\\nimport \\\"../modules/Acceptance.sol\\\";\\nimport \\\"../modules/Submission.sol\\\";\\nimport \\\"../modules/Finalization.sol\\\";\\nimport \\\"../modules/Renounce.sol\\\";\\n\\ncontract MecenateFeed is\\n    Events,\\n    Creation,\\n    Acceptance,\\n    Renounce,\\n    Submission,\\n    Finalization\\n{\\n    constructor(\\n        address _owner,\\n        address _usersModuleContract,\\n        address _factoryContract,\\n        uint256 _major,\\n        uint256 _minor,\\n        uint256 _patch\\n    ) Data(_usersModuleContract, _factoryContract, _major, _minor, _patch) {\\n        owner = _owner;\\n    }\\n}\\n\",\"keccak256\":\"0xc791589db0be08642212bdf0c8bb3935b994b510871cd5645a023f12b877b55c\",\"license\":\"MIT\"},\"contracts/helpers/eas/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror DeadlineExpired();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/// @notice A struct representing ECDSA signature data.\\nstruct Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/// @notice A struct representing a single attestation.\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/// @notice A helper function to work with unchecked iterators in loops.\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685\",\"license\":\"MIT\"},\"contracts/helpers/eas/IEAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ISchemaRegistry} from \\\"./ISchemaRegistry.sol\\\";\\nimport {Attestation, Signature} from \\\"./Common.sol\\\";\\n\\n/// @notice A struct representing the arguments of the attestation request.\\nstruct AttestationRequestData {\\n    address recipient; // The recipient of the attestation.\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes32 refUID; // The UID of the related attestation.\\n    bytes data; // Custom attestation data.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the attestation request.\\nstruct AttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the full delegated attestation request.\\nstruct DelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n    Signature signature; // The ECDSA signature data.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi attestation request.\\nstruct MultiAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi attestation request.\\nstruct MultiDelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the arguments of the revocation request.\\nstruct RevocationRequestData {\\n    bytes32 uid; // The UID of the attestation to revoke.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the revocation request.\\nstruct RevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the arguments of the full delegated revocation request.\\nstruct DelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n    Signature signature; // The ECDSA signature data.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi revocation request.\\nstruct MultiRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi revocation request.\\nstruct MultiDelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @title IEAS\\n/// @notice EAS - Ethereum Attestation Service interface.\\ninterface IEAS {\\n    /// @notice Emitted when an attestation has been made.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param uid The UID the revoked attestation.\\n    /// @param schemaUID The UID of the schema.\\n    event Attested(\\n        address indexed recipient,\\n        address indexed attester,\\n        bytes32 uid,\\n        bytes32 indexed schemaUID\\n    );\\n\\n    /// @notice Emitted when an attestation has been revoked.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param schemaUID The UID of the schema.\\n    /// @param uid The UID the revoked attestation.\\n    event Revoked(\\n        address indexed recipient,\\n        address indexed attester,\\n        bytes32 uid,\\n        bytes32 indexed schemaUID\\n    );\\n\\n    /// @notice Emitted when a data has been timestamped.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event Timestamped(bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /// @notice Emitted when a data has been revoked.\\n    /// @param revoker The address of the revoker.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event RevokedOffchain(\\n        address indexed revoker,\\n        bytes32 indexed data,\\n        uint64 indexed timestamp\\n    );\\n\\n    /// @notice Returns the address of the global schema registry.\\n    /// @return The address of the global schema registry.\\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\\n\\n    /// @notice Attests to a specific schema.\\n    /// @param request The arguments of the attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attest({\\n    ///         schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",\\n    ///         data: {\\n    ///             recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n    ///             data: \\\"0xF00D\\\",\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function attest(\\n        AttestationRequest calldata request\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attestByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function attestByDelegation(\\n        DelegatedAttestationRequest calldata delegatedRequest\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to multiple schemas.\\n    /// @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttest([{\\n    ///         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\\n    ///             data: '0x12345678',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiAttest(\\n        MultiAttestationRequest[] calldata multiRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Attests to multiple schemas using via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\\n    ///     grouped by distinct schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttestByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiAttestByDelegation(\\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Revokes an existing attestation to a specific schema.\\n    /// @param request The arguments of the revocation request.\\n    ///\\n    /// Example:\\n    ///     revoke({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function revoke(RevocationRequest calldata request) external payable;\\n\\n    /// @notice Revokes an existing attestation to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated revocation request.\\n    ///\\n    /// Example:\\n    ///     revokeByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 27,\\n    ///             r: '0xb593...7142',\\n    ///             s: '0x0f5b...2cce'\\n    ///         },\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function revokeByDelegation(\\n        DelegatedRevocationRequest calldata delegatedRequest\\n    ) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas.\\n    /// @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevoke([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiRevoke(\\n        MultiRevocationRequest[] calldata multiRequests\\n    ) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests\\n    ///     should be grouped by distinct schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevokeByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiRevokeByDelegation(\\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\\n    ) external payable;\\n\\n    /// @notice Timestamps the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function timestamp(bytes32 data) external returns (uint64);\\n\\n    /// @notice Timestamps the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\\n\\n    /// @notice Revokes the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function revokeOffchain(bytes32 data) external returns (uint64);\\n\\n    /// @notice Revokes the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function multiRevokeOffchain(\\n        bytes32[] calldata data\\n    ) external returns (uint64);\\n\\n    /// @notice Returns an existing attestation by UID.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return The attestation data members.\\n    function getAttestation(\\n        bytes32 uid\\n    ) external view returns (Attestation memory);\\n\\n    /// @notice Checks whether an attestation exists.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return Whether an attestation exists.\\n    function isAttestationValid(bytes32 uid) external view returns (bool);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getTimestamp(bytes32 data) external view returns (uint64);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getRevokeOffchain(\\n        address revoker,\\n        bytes32 data\\n    ) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xc95cca3d90dbae3a21d0f0e28fdf38cc5a85cbd8c760b7759782b18e8f62acc2\",\"license\":\"MIT\"},\"contracts/helpers/eas/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ISchemaResolver} from \\\"./ISchemaResolver.sol\\\";\\n\\n/// @notice A struct representing a record for a submitted schema.\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\n/// @title ISchemaRegistry\\n/// @notice The interface of global attestation schemas for the Ethereum Attestation Service protocol.\\ninterface ISchemaRegistry {\\n    /// @notice Emitted when a new schema has been registered\\n    /// @param uid The schema UID.\\n    /// @param registerer The address of the account used to register the schema.\\n    /// @param schema The schema data.\\n    event Registered(\\n        bytes32 indexed uid,\\n        address indexed registerer,\\n        SchemaRecord schema\\n    );\\n\\n    /// @notice Submits and reserves a new schema\\n    /// @param schema The schema data schema.\\n    /// @param resolver An optional schema resolver.\\n    /// @param revocable Whether the schema allows revocations explicitly.\\n    /// @return The UID of the new schema.\\n    function register(\\n        string calldata schema,\\n        ISchemaResolver resolver,\\n        bool revocable\\n    ) external returns (bytes32);\\n\\n    /// @notice Returns an existing schema by UID\\n    /// @param uid The UID of the schema to retrieve.\\n    /// @return The schema data members.\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\\n\",\"keccak256\":\"0x743ddc248c97a78d34239035d1d9557a74dcaaa5b59a2aa66cea4eadabb8b2de\",\"license\":\"MIT\"},\"contracts/helpers/eas/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {Attestation} from \\\"./Common.sol\\\";\\n\\n/// @title ISchemaResolver\\n/// @notice The interface of an optional schema resolver.\\ninterface ISchemaResolver {\\n    /// @notice Checks if the resolver can be sent ETH.\\n    /// @return Whether the resolver supports ETH transfers.\\n    function isPayable() external pure returns (bool);\\n\\n    /// @notice Processes an attestation and verifies whether it's valid.\\n    /// @param attestation The new attestation.\\n    /// @return Whether the attestation is valid.\\n    function attest(\\n        Attestation calldata attestation\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes multiple attestations and verifies whether they are valid.\\n    /// @param attestations The new attestations.\\n    /// @param values Explicit ETH amounts which were sent with each attestation.\\n    /// @return Whether all the attestations are valid.\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\\n    /// @param attestation The existing attestation to be revoked.\\n    /// @return Whether the attestation can be revoked.\\n    function revoke(\\n        Attestation calldata attestation\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\\n    /// @param attestations The existing attestations to be revoked.\\n    /// @param values Explicit ETH amounts which were sent with each revocation.\\n    /// @return Whether the attestations can be revoked.\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0x97ec835833519c6c11c0fb097ea5bccd888e65f650590fdb643d937430bb4f03\",\"license\":\"MIT\"},\"contracts/interfaces/IMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n// import IERC20 from openzeppelin\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMUSE is IERC20 {\\n    function increaseAllowance(\\n        address spender,\\n        uint256 addedValue\\n    ) external returns (bool);\\n\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 subtractedValue\\n    ) external returns (bool);\\n\\n    function mint(uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x8b0a4012a1cd0815460bb3d15278671589bb85003ff2c38315701b3f2228c633\"},\"contracts/interfaces/IMecenateFeed.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateFeed {\\n    function getPost() external view returns (Structures.Post memory);\\n\\n    function getTotalStaked() external view returns (uint256);\\n\\n    function postCount() external view returns (uint256);\\n\\n    function acceptPost(\\n        Structures.Tokens,\\n        uint256 _amount,\\n        address _funder,\\n        address _buyer\\n    ) external payable;\\n\\n    function getSellerStake() external view returns (uint256);\\n\\n    function getBuyerStake() external view returns (uint256);\\n\\n    function getPaymentRequested() external view returns (uint256);\\n\\n    function getStakeRequested() external view returns (uint256);\\n\\n    function getStatus() external view returns (Structures.PostStatus status);\\n\\n    function getTokenId() external view returns (Structures.Tokens tokenId);\\n\\n    function owner() external view returns (address);\\n\\n    function version() external view returns (string memory);\\n\\n    function getEncryptedPost() external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xe7a4b838d4f4540e4a8e3911c2afea70ebd9a2e87bd526eef13b203c2643a645\"},\"contracts/interfaces/IMecenateFeedFactory.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\ninterface IMecenateFeedFactory {\\n    function owner() external view returns (address payable);\\n\\n    function treasuryContract() external view returns (address payable);\\n\\n    function feeds() external view returns (address[] memory);\\n\\n    function contractCounter() external view returns (uint256);\\n\\n    function isFeed(address _feed) external view returns (bool);\\n\\n    function museToken() external view returns (address);\\n\\n    function wethToken() external view returns (address);\\n\\n    function daiToken() external view returns (address);\\n\\n    function router() external view returns (address);\\n\\n    function getRouterFee(uint8 tokenId) external view returns (uint24);\\n\\n    function burnEnabled() external view returns (bool);\\n\\n    function version() external view returns (string memory);\\n\\n    function easSchema() external view returns (bytes32);\\n\\n    function easContract() external view returns (address);\\n}\\n\",\"keccak256\":\"0x79da402b87332cbe8176ab1d0abd2c5369a0da30970743b86283e1a774eea776\"},\"contracts/interfaces/IMecenateTreasury.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateTreasury {\\r\\n    function globalFee() external view returns (uint256);\\r\\n\\r\\n    function fixedFee() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf544878bba8e01c837110d06eac56042957d59c593ba9083f686ef02aa9276a1\"},\"contracts/interfaces/IMecenateUsers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateUsers {\\n    function registerUser(bytes memory metadata) external;\\n\\n    function getUsers() external view returns (address[] memory);\\n\\n    function getUserCount() external view returns (uint256);\\n\\n    function getUserAt(uint256 index) external view returns (address);\\n\\n    function checkifUserExist(address userAddress) external view returns (bool);\\n\\n    function getPaginatedUsers(\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) external view returns (address[] memory);\\n\\n    function getUserMetadata(\\n        address userAddress\\n    ) external view returns (Structures.User memory);\\n\\n    function getUserPublicKey(\\n        address userAddress\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xf0ff65dbfea12d90cf106325b9478e31b284045327e5f0974db5374b8789e93c\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function withdraw(uint256) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xeb4bd6c56a346f12ec3d681183d613795c151709e834d69ef58f13fd6d7edf62\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\n * @title Structures\\n * @dev This library defines various data structures used in the Mecenate platform.\\n */\\npragma solidity 0.8.19;\\n\\nlibrary Structures {\\n    enum PostStatus {\\n        Waiting,\\n        Proposed,\\n        Accepted,\\n        Submitted,\\n        Finalized,\\n        Punished,\\n        Revealed,\\n        Renounced\\n    }\\n\\n    enum Tokens {\\n        NaN,\\n        MUSE,\\n        DAI\\n    }\\n\\n    enum PostType {\\n        Text,\\n        Image,\\n        Video,\\n        Audio,\\n        File\\n    }\\n    enum PostDuration {\\n        OneDay,\\n        ThreeDays,\\n        OneWeek,\\n        TwoWeeks,\\n        OneMonth\\n    }\\n\\n    struct FeedSettings {\\n        uint256 punishmentRatio;\\n        uint256 postCount;\\n        address usersModuleContract;\\n        address factoryContract;\\n        address router;\\n        string version;\\n    }\\n\\n    struct FactorySettings {\\n        address treasuryContract;\\n        address usersModuleContract;\\n        address easContract;\\n        bytes32 easSchema;\\n        address museToken;\\n        address daiToken;\\n        address wethToken;\\n        address router;\\n    }\\n\\n    /**\\n     * @dev Struct representing a post on the Mecenate platform.\\n     */\\n    struct Post {\\n        User creator;\\n        PostData postdata;\\n    }\\n\\n    /**\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\n     */\\n    struct PostData {\\n        PostSettings settings;\\n        PostEscrow escrow;\\n        PostEncryptedData data;\\n    }\\n\\n    /**\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\n     */\\n    struct PostEncryptedData {\\n        bytes encryptedData;\\n        bytes encryptedKey;\\n        bytes decryptedData;\\n    }\\n\\n    /**\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettings {\\n        PostStatus status;\\n        PostType postType;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n        uint256 duration;\\n        Tokens tokenId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\n     */\\n    struct PostEscrow {\\n        address buyer;\\n        address seller;\\n        uint256 stake;\\n        uint256 payment;\\n        uint256 punishment;\\n        uint256 penalty;\\n    }\\n\\n    /**\\n     * @dev Struct representing a user on the Mecenate platform.\\n     */\\n    struct User {\\n        address evmAddress;\\n        bytes sismoVaultId;\\n        bytes publicKey;\\n    }\\n\\n    /**\\n     * @dev Struct representing a feed on the Mecenate platform.\\n     */\\n    struct Feed {\\n        address contractAddress;\\n        address owner;\\n        uint256 sellerStake;\\n        uint256 buyerStake;\\n        uint256 totalStake;\\n        uint256 postCount;\\n        uint256 paymentRequested;\\n        uint256 stakeRequested;\\n        PostStatus status;\\n        Tokens tokenId;\\n        string version;\\n    }\\n\\n    /**\\n     * @dev Struct representing a bay request on the Mecenate platform.\\n     */\\n    struct BayRequest {\\n        bytes request;\\n        uint256 payment;\\n        uint256 stake;\\n        address postAddress;\\n        bool accepted;\\n        uint256 postCount;\\n        Tokens tokenId;\\n        address buyerAddress;\\n    }\\n}\\n\",\"keccak256\":\"0xab56ad7506e91048fc9c6db9fd9510c42afa61d6b11a99a273bf975643307d8f\"},\"contracts/modules/Acceptance.sol\":{\"content\":\"/**\\n * @title Acceptance\\n * @dev This contract is an abstract contract that inherits from Events and Staking contracts. It provides a function to accept a post and add stake to the post. The function accepts a Sismo Connect response as a parameter and verifies the user existence. It also checks if the user is not the seller and if the post is in Proposed status. If the post has an escrow payment, it checks if the buyer has paid enough and adds the payment to the post's escrow. If the post does not have an escrow payment, it requires a payment from the buyer and adds it to the post's escrow. Finally, it changes the post status to Accepted and emits an Accepted event.\\n */\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"./Events.sol\\\";\\nimport \\\"./Staking.sol\\\";\\n\\nabstract contract Acceptance is Events, Staking {\\n    function acceptPost(\\n        Structures.Tokens tokenId,\\n        uint256 paymentAmount,\\n        address funder,\\n        address buyer\\n    ) external payable virtual {\\n        require(\\n            validStatuses[uint8(Structures.PostStatus.Proposed)],\\n            \\\"INVALID_STATUS\\\"\\n        );\\n\\n        _checkToken(tokenId);\\n\\n        uint256 amountToAdd = tokenId == Structures.Tokens.NaN\\n            ? msg.value\\n            : paymentAmount;\\n\\n        // Use local variable for repeated calls\\n        uint256 sellerStake = Deposit._getDeposit(\\n            tokenId,\\n            post.postdata.escrow.seller\\n        );\\n\\n        require(sellerStake >= post.postdata.escrow.stake, \\\"STAKE_INCORRECT\\\");\\n\\n        require(\\n            IMecenateUsers(settings.usersModuleContract).checkifUserExist(\\n                buyer\\n            ),\\n            \\\"USERT_NOT_EXIST\\\"\\n        );\\n\\n        require(\\n            msg.sender != post.postdata.escrow.seller ||\\n                buyer != post.postdata.escrow.seller,\\n            \\\"YOU_ARE_THE_SELLER\\\"\\n        );\\n\\n        if (post.postdata.escrow.payment > 0) {\\n            require(\\n                paymentAmount >= post.postdata.escrow.payment,\\n                \\\"NOT_ENOUGH_PAYMENT\\\"\\n            );\\n        } else {\\n            require(msg.value > 0, \\\"ZERO_MSGVALUE\\\");\\n\\n            require(paymentAmount > 0, \\\"ZERO_PAYMENT\\\");\\n        }\\n\\n        uint256 payment = _addStake(tokenId, buyer, funder, amountToAdd);\\n\\n        post.postdata.escrow.payment = payment;\\n\\n        post.postdata.escrow.buyer = buyer;\\n\\n        post.postdata.settings.status = Structures.PostStatus.Accepted;\\n\\n        _changeStatus(Structures.PostStatus.Accepted);\\n\\n        emit Accepted(post);\\n    }\\n}\\n\",\"keccak256\":\"0xeddd71eba83c4bea562a75cd89a509f1a1deefebd73147db962f626f1d6eaacb\",\"license\":\"MIT\"},\"contracts/modules/BurnDAI.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"./BurnMUSE.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"../interfaces/IWETH.sol\\\";\\n\\nabstract contract BurnDAI is BurnMUSE {\\n    using SafeMath for uint256;\\n\\n    function _burnFrom(\\n        address from,\\n        uint256 value\\n    ) internal override returns (bool success) {\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\n            .transferFrom(from, address(this), value);\\n\\n        _burn(value);\\n\\n        return true;\\n    }\\n\\n    function _burnDai(uint256 value) internal returns (bool success) {\\n        // approve uniswap for token transfer\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\n            .approve(settings.router, value);\\n\\n        // swap IMecenateFeedFactory(settings.factoryContract).daiToken() for MUSE\\n        uint256 tokens_sold = value;\\n\\n        uint256 tokens_bought = _swapTokensForToken(\\n            IMecenateFeedFactory(settings.factoryContract).daiToken(),\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\n            IMecenateFeedFactory(settings.factoryContract).getRouterFee(0),\\n            tokens_sold\\n        );\\n\\n        uint256 tokens_sold_to_muse = _swapTokensForToken(\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\n            IMecenateFeedFactory(settings.factoryContract).museToken(),\\n            IMecenateFeedFactory(settings.factoryContract).getRouterFee(1),\\n            tokens_bought\\n        );\\n\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).museToken())\\n            .approve(\\n                IMecenateFeedFactory(settings.factoryContract).museToken(),\\n                tokens_sold_to_muse\\n            );\\n\\n        // burn MUSE\\n        BurnMUSE._burn(tokens_sold_to_muse);\\n\\n        return true;\\n    }\\n\\n    function _burnWeth(uint256 value) internal returns (bool success) {\\n        // deposit IMecenateFeedFactory(settings.factoryContract).wethToken()\\n        IWETH(IMecenateFeedFactory(settings.factoryContract).wethToken())\\n            .deposit{value: value}();\\n\\n        // approve uniswap for token transfer\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).wethToken())\\n            .approve(settings.router, value);\\n\\n        // swap IMecenateFeedFactory(settings.factoryContract).wethToken() for MUSE\\n        uint256 tokens_sold = value;\\n\\n        uint256 tokens_bought = _swapTokensForToken(\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\n            IMecenateFeedFactory(settings.factoryContract).museToken(),\\n            IMecenateFeedFactory(settings.factoryContract).getRouterFee(1),\\n            tokens_sold\\n        );\\n\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).museToken())\\n            .approve(\\n                IMecenateFeedFactory(settings.factoryContract).museToken(),\\n                tokens_bought\\n            );\\n\\n        // burn MUSE\\n        BurnMUSE._burn(tokens_bought);\\n\\n        return true;\\n    }\\n\\n    function getTokenAddress()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address token)\\n    {\\n        return IMecenateFeedFactory(settings.factoryContract).daiToken();\\n    }\\n\\n    function getExchangeAddress()\\n        internal\\n        view\\n        override\\n        returns (address exchange)\\n    {\\n        exchange = settings.router;\\n    }\\n\\n    function _swapTokensForToken(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountIn\\n    ) internal returns (uint256 amountOut) {\\n        // Check and approve allowance\\n        uint256 allowance = IERC20(tokenIn).allowance(\\n            address(this),\\n            settings.router\\n        );\\n        if (allowance < amountIn) {\\n            IERC20(tokenIn).approve(settings.router, type(uint256).max);\\n        }\\n\\n        // Prepare parameters\\n        address recipient = address(this);\\n        uint256 deadline = block.timestamp + 60; // 15 seconds from the current block timestamp\\n\\n        // Perform the swap\\n        // Refer to the Uniswap V3 documentation for details on the params.\\n        amountOut = ISwapRouter(settings.router).exactInputSingle(\\n            ISwapRouter.ExactInputSingleParams({\\n                tokenIn: tokenIn,\\n                tokenOut: tokenOut,\\n                fee: fee,\\n                recipient: recipient,\\n                deadline: deadline,\\n                amountIn: amountIn,\\n                amountOutMinimum: 0, // you may want to set a minimum here\\n                sqrtPriceLimitX96: 0\\n            })\\n        );\\n\\n        return amountOut;\\n    }\\n}\\n\",\"keccak256\":\"0xa69462e962a3be48c3514c746d791c7a870247e8e441a2d7a11b5771ec8e0d23\"},\"contracts/modules/BurnMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\nimport \\\"../interfaces/IMUSE.sol\\\";\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\nimport \\\"./Events.sol\\\";\\n\\nabstract contract BurnMUSE is Events {\\n    function _burn(uint256 value) internal virtual returns (bool success) {\\n        IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken()).burn(\\n            value\\n        );\\n        return true;\\n    }\\n\\n    function _burnFrom(\\n        address from,\\n        uint256 value\\n    ) internal virtual returns (bool success) {\\n        IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken())\\n            .transferFrom(from, address(this), value);\\n        _burn(value);\\n        return true;\\n    }\\n\\n    function getTokenAddress() internal view virtual returns (address token) {\\n        return IMecenateFeedFactory(settings.factoryContract).museToken();\\n    }\\n\\n    function getExchangeAddress()\\n        internal\\n        view\\n        virtual\\n        returns (address exchange)\\n    {\\n        exchange = IMecenateFeedFactory(settings.factoryContract).router();\\n    }\\n}\\n\",\"keccak256\":\"0x052049c27f8e98f27fd3d237157e4700d5f5c313343d1cd734614beefa4ccfc6\"},\"contracts/modules/Creation.sol\":{\"content\":\"/**\\n * @title Creation\\n * @dev This contract is an abstract contract that inherits from Staking contract. It provides a function to create a post with the given parameters. The function requires the user to be the owner of the post and to have a stake. The post can have different durations and types. The function returns the created post.\\n */\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"./Staking.sol\\\";\\n\\nabstract contract Creation is Staking {\\n    function createPost(\\n        bytes memory encryptedHash,\\n        Structures.PostType postType,\\n        Structures.PostDuration postDuration,\\n        uint256 payment,\\n        uint256 stakeAmount,\\n        Structures.Tokens tokenId,\\n        address funder,\\n        address seller,\\n        bool useStake\\n    )\\n        external\\n        payable\\n        onlyValidTokenID(tokenId)\\n        returns (Structures.Post memory)\\n    {\\n        require(msg.sender == owner);\\n\\n        require(\\n            IMecenateUsers(settings.usersModuleContract).checkifUserExist(\\n                seller\\n            ),\\n            \\\"USER_NOT_EXIST\\\"\\n        );\\n\\n        require(\\n            validStatuses[uint8(post.postdata.settings.status)],\\n            \\\"INVALID_STATUS\\\"\\n        );\\n\\n        require(stakeAmount > 0, \\\"STAKE_AMOUNT_ZERO\\\");\\n\\n        require(payment > 0, \\\"PAYMENT_ZERO\\\");\\n\\n        uint256 stake;\\n\\n        if (useStake) {\\n            require(\\n                Deposit._getDeposit(tokenId, seller) >= stakeAmount,\\n                \\\"STAKE_INCORRECT\\\"\\n            );\\n\\n            stake = stakeAmount;\\n        } else {\\n            if (tokenId == Structures.Tokens.NaN) {\\n                require(msg.value == stakeAmount, \\\"WRONG_MSG_VALUE\\\");\\n            }\\n\\n            stake = _addStake(tokenId, seller, funder, stakeAmount);\\n        }\\n\\n        uint256 duration = postDurationToDays[uint8(postDuration)];\\n\\n        _changeStatus(Structures.PostStatus.Proposed);\\n\\n        Structures.User memory creator = IMecenateUsers(\\n            settings.usersModuleContract\\n        ).getUserMetadata(seller);\\n\\n        // Initialize the new Post struct with named arguments for clarity\\n        Structures.Post memory newPost = Structures.Post({\\n            creator: creator,\\n            postdata: Structures.PostData({\\n                settings: Structures.PostSettings({\\n                    postType: postType,\\n                    status: Structures.PostStatus.Proposed,\\n                    creationTimeStamp: block.timestamp,\\n                    endTimeStamp: 0,\\n                    duration: duration,\\n                    tokenId: tokenId\\n                }),\\n                escrow: Structures.PostEscrow({\\n                    buyer: address(0),\\n                    seller: seller,\\n                    stake: stake,\\n                    payment: payment,\\n                    punishment: 0,\\n                    penalty: 0\\n                }),\\n                data: Structures.PostEncryptedData({\\n                    encryptedData: encryptedHash,\\n                    encryptedKey: ZEROHASH,\\n                    decryptedData: ZEROHASH\\n                })\\n            })\\n        });\\n\\n        // Update storage and emit event\\n        post = newPost;\\n\\n        settings.postCount++;\\n\\n        emit Created(newPost);\\n\\n        return newPost;\\n    }\\n}\\n\",\"keccak256\":\"0x318bb81851e5d3d276f4ac7676fda917aeab85e705e7830397641a77d97d2384\",\"license\":\"MIT\"},\"contracts/modules/Data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../interfaces/IMecenateFeed.sol\\\";\\nimport \\\"../interfaces/IMecenateUsers.sol\\\";\\nimport \\\"../interfaces/IMecenateTreasury.sol\\\";\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\nimport \\\"../helpers/eas/IEAS.sol\\\";\\nimport \\\"./Version.sol\\\";\\n\\n/**\\n * @title Data\\n * @dev This contract stores data related to Mecenate posts and provides functions to interact with it.\\n */\\ncontract Data is Version {\\n    bytes internal constant ZEROHASH = \\\"0x00\\\";\\n\\n    address public owner;\\n\\n    Structures.Post public post;\\n\\n    Structures.FeedSettings internal settings;\\n\\n    mapping(uint8 => uint256) internal postDurationToDays;\\n\\n    mapping(uint8 => bool) internal validStatuses;\\n\\n    constructor(\\n        address usersModuleContract,\\n        address factoryContract,\\n        uint256 _major,\\n        uint256 _minor,\\n        uint256 _patch\\n    ) Version(_major, _minor, _patch) {\\n        settings.punishmentRatio = 100000000000000000; // Constant value\\n        settings.postCount = 0; // Initialize postCount to 0\\n        settings.usersModuleContract = usersModuleContract;\\n        settings.factoryContract = msg.sender;\\n        settings.router = IMecenateFeedFactory(factoryContract).router();\\n        settings.version = _version();\\n\\n        post.postdata.settings.status = Structures.PostStatus.Waiting;\\n\\n        postDurationToDays[uint8(Structures.PostDuration.OneDay)] = 1 days;\\n        postDurationToDays[uint8(Structures.PostDuration.ThreeDays)] = 3 days;\\n        postDurationToDays[uint8(Structures.PostDuration.OneWeek)] = 7 days;\\n        postDurationToDays[uint8(Structures.PostDuration.TwoWeeks)] = 14 days;\\n        postDurationToDays[uint8(Structures.PostDuration.OneMonth)] = 30 days;\\n\\n        validStatuses[uint8(Structures.PostStatus.Waiting)] = true;\\n    }\\n\\n    function _changeStatus(Structures.PostStatus newStatus) internal {\\n        validStatuses[uint8(post.postdata.settings.status)] = false;\\n        validStatuses[uint8(newStatus)] = true;\\n        post.postdata.settings.status = newStatus;\\n    }\\n\\n    function getStatus() external view returns (Structures.PostStatus) {\\n        return post.postdata.settings.status;\\n    }\\n\\n    function getTokenId() external view returns (Structures.Tokens) {\\n        return post.postdata.settings.tokenId;\\n    }\\n\\n    function getTokenIdAddress() public view returns (address) {\\n        if (post.postdata.settings.tokenId == Structures.Tokens.MUSE) {\\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\\n        } else if (post.postdata.settings.tokenId == Structures.Tokens.DAI) {\\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    function _checkToken(Structures.Tokens _token) internal view {\\n        require(_token == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n    }\\n\\n    function getPaymentRequested() external view returns (uint256) {\\n        return post.postdata.escrow.payment;\\n    }\\n\\n    function getStakeRequested() external view returns (uint256) {\\n        return post.postdata.escrow.stake;\\n    }\\n\\n    function postCount() external view returns (uint256) {\\n        return settings.postCount;\\n    }\\n\\n    function getEncryptedPost() external view returns (bytes memory) {\\n        return post.postdata.data.encryptedData;\\n    }\\n\\n    function getPost() external view returns (Structures.Post memory) {\\n        return post;\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xb09086cdcab6dc2790f56df6a5808c7a48794c5519ea122f927c0a0684d1f2c6\",\"license\":\"MIT\"},\"contracts/modules/Deposit.sol\":{\"content\":\"pragma solidity 0.8.19;\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./TokenManager.sol\\\";\\n\\ncontract Deposit {\\n    using SafeMath for uint256;\\n\\n    mapping(uint256 => mapping(address => uint256)) private _deposit;\\n\\n    event DepositIncreased(\\n        Structures.Tokens tokenID,\\n        address user,\\n        uint256 amount,\\n        uint256 newDeposit\\n    );\\n    event DepositDecreased(\\n        Structures.Tokens tokenID,\\n        address user,\\n        uint256 amount,\\n        uint256 newDeposit\\n    );\\n\\n    function _increaseDeposit(\\n        Structures.Tokens tokenID,\\n        address user,\\n        uint256 amountToAdd\\n    ) internal returns (uint256 newDeposit) {\\n        // calculate new deposit amount\\n        newDeposit = _deposit[uint256(tokenID)][user].add(amountToAdd);\\n\\n        // set new stake to storage\\n        _deposit[uint256(tokenID)][user] = newDeposit;\\n\\n        // emit event\\n        emit DepositIncreased(tokenID, user, amountToAdd, newDeposit);\\n\\n        // return\\n        return newDeposit;\\n    }\\n\\n    function _decreaseDeposit(\\n        Structures.Tokens tokenID,\\n        address user,\\n        uint256 amountToRemove\\n    ) internal returns (uint256 newDeposit) {\\n        // get current deposit\\n        uint256 currentDeposit = _deposit[uint256(tokenID)][user];\\n\\n        // check if sufficient deposit\\n        require(currentDeposit >= amountToRemove, \\\"INSUFFICIENT_DEPOSIT\\\");\\n\\n        // calculate new deposit amount\\n        newDeposit = currentDeposit.sub(amountToRemove);\\n\\n        // set new stake to storage\\n        _deposit[uint256(tokenID)][user] = newDeposit;\\n\\n        // emit event\\n        emit DepositDecreased(tokenID, user, amountToRemove, newDeposit);\\n\\n        // return\\n        return newDeposit;\\n    }\\n\\n    function _clearDeposit(\\n        Structures.Tokens tokenID,\\n        address user\\n    ) internal returns (uint256 amountRemoved) {\\n        // get current deposit\\n        uint256 currentDeposit = _deposit[uint256(tokenID)][user];\\n\\n        // remove deposit\\n        _decreaseDeposit(tokenID, user, currentDeposit);\\n\\n        // return\\n        return currentDeposit;\\n    }\\n\\n    function _getDeposit(\\n        Structures.Tokens tokenID,\\n        address user\\n    ) internal view returns (uint256 deposit) {\\n        return _deposit[uint256(tokenID)][user];\\n    }\\n}\\n\",\"keccak256\":\"0xbde50573d2e5a22daecdfdb1d457c4f50b7ea16e18a03eac04013ce10f269d36\"},\"contracts/modules/Events.sol\":{\"content\":\"/**\\r\\n * @title Events\\r\\n * @dev This abstract contract defines the events related to the Mecenate platform's post lifecycle.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./Data.sol\\\";\\r\\n\\r\\nabstract contract Events is Data {\\r\\n    event Created(Structures.Post post);\\r\\n    event Accepted(Structures.Post post);\\r\\n    event Valid(Structures.Post post);\\r\\n    event Invalid(Structures.Post post);\\r\\n    event Finalized(Structures.Post post);\\r\\n    event MadePublic(Structures.Post post);\\r\\n    event Renounced(Structures.Post post);\\r\\n}\\r\\n\",\"keccak256\":\"0x3aeaf067b1f9010a2456df46fb54d4727b3a24082b1446ac9266dbcdd8c838f6\"},\"contracts/modules/Finalization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\nimport \\\"./Staking.sol\\\";\\n\\nabstract contract Finalization is Staking {\\n    function finalizePost(\\n        bool valid,\\n        uint256 punishment,\\n        bytes32 uid\\n    ) external virtual {\\n        require(msg.sender == post.postdata.escrow.buyer, \\\"NOT_SELLER\\\");\\n\\n        require(\\n            post.postdata.settings.status == Structures.PostStatus.Submitted,\\n            \\\"NOT_SUBMITTED\\\"\\n        );\\n\\n        IEAS eas = IEAS(\\n            IMecenateFeedFactory(settings.factoryContract).easContract()\\n        );\\n\\n        Attestation memory attestation = eas.getAttestation(uid);\\n\\n        require(\\n            attestation.attester == post.postdata.escrow.buyer,\\n            \\\"INVALID_ATTESTATION\\\"\\n        );\\n\\n        require(\\n            attestation.recipient == post.postdata.escrow.seller,\\n            \\\"INVALID_RECIPIENT\\\"\\n        );\\n\\n        require(\\n            attestation.schema ==\\n                IMecenateFeedFactory(settings.factoryContract).easSchema(),\\n            \\\"INVALID_SCHEMA\\\"\\n        );\\n\\n        (bool easResult, address feed, bytes memory postBytes) = abi.decode(\\n            attestation.data,\\n            (bool, address, bytes)\\n        );\\n\\n        require(feed == address(this), \\\"INVALID_FEED\\\");\\n\\n        require(\\n            keccak256(abi.encode(postBytes)) ==\\n                keccak256(abi.encode(post.postdata.data.encryptedData)),\\n            \\\"INVALID_POST\\\"\\n        );\\n\\n        // Common contract addresses and variables\\n        address treasuryContract = IMecenateFeedFactory(\\n            settings.factoryContract\\n        ).treasuryContract();\\n\\n        uint256 buyerFee = (post.postdata.escrow.payment *\\n            IMecenateTreasury(treasuryContract).globalFee()) / 10000;\\n\\n        uint256 amountToAdd = post.postdata.escrow.payment - buyerFee;\\n\\n        // Variables for stake changes\\n        uint256 buyerStake;\\n\\n        uint256 sellerStake;\\n\\n        if (post.postdata.settings.endTimeStamp < block.timestamp || valid) {\\n            require(easResult == valid, \\\"INVALID_ATTESTATION\\\");\\n\\n            // Code for both the timeout and the valid case\\n            buyerStake = Deposit._decreaseDeposit(\\n                post.postdata.settings.tokenId,\\n                post.postdata.escrow.buyer,\\n                post.postdata.escrow.payment\\n            );\\n\\n            sellerStake = Deposit._increaseDeposit(\\n                post.postdata.settings.tokenId,\\n                post.postdata.escrow.seller,\\n                amountToAdd\\n            );\\n\\n            _burn(post.postdata.settings.tokenId, treasuryContract, buyerFee);\\n\\n            post.postdata.escrow.stake = sellerStake;\\n\\n            post.postdata.escrow.payment = buyerStake;\\n\\n            _changeStatus(\\n                valid\\n                    ? Structures.PostStatus.Finalized\\n                    : Structures.PostStatus.Punished\\n            );\\n\\n            emit Valid(post);\\n        } else if (!valid) {\\n            require(easResult == valid, \\\"INVALID_ATTESTATION\\\");\\n\\n            require(\\n                punishment <= post.postdata.escrow.stake,\\n                \\\"PUNISHMENT_TOO_HIGH\\\"\\n            );\\n            require(settings.punishmentRatio < 1e18, \\\"PUNISHMENT_RATIO_HIGH\\\");\\n\\n            uint256 penalty = (punishment * settings.punishmentRatio) / 1e18;\\n\\n            post.postdata.escrow.payment = _burnStake(\\n                post.postdata.settings.tokenId,\\n                post.postdata.escrow.buyer,\\n                penalty\\n            );\\n\\n            post.postdata.escrow.stake = _burnStake(\\n                post.postdata.settings.tokenId,\\n                post.postdata.escrow.seller,\\n                punishment\\n            );\\n\\n            // Update status and penalties\\n            post.postdata.settings.status = Structures.PostStatus.Punished;\\n\\n            post.postdata.escrow.punishment = punishment;\\n\\n            post.postdata.escrow.penalty = penalty;\\n\\n            _changeStatus(Structures.PostStatus.Punished);\\n\\n            emit Invalid(post);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x48480a5f232b62f022911a4f507fa954ee2e8a414ac885e7178e007ba9fe969f\",\"license\":\"MIT\"},\"contracts/modules/Renounce.sol\":{\"content\":\"/**\\n * @title Renounce\\n * @dev This abstract contract extends the Staking contract and provides functionality for a seller to renounce a post.\\n * The seller can only renounce a post if they are the original creator of the post and the post is in the Accepted or Submitted status.\\n * Renouncing a post refunds the buyer's payment and transfers the seller's stake to the seller's address.\\n * The post struct is reset and the post status is updated to Renounced.\\n * This contract also provides an internal function for refunding a post, which is called by the renouncePost function.\\n */\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"./Staking.sol\\\";\\n\\nabstract contract Renounce is Staking {\\n    function renouncePost() external {\\n        require(msg.sender == post.postdata.escrow.seller, \\\"NOT_SELLER\\\");\\n\\n        // Validate the post status\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\n\\n        require(validStatuses[uint8(currentStatus)], \\\"INVALID_STATUS\\\");\\n\\n        // Reset post and post settings\\n        post = Structures.Post(\\n            Structures.User({\\n                evmAddress: address(0),\\n                sismoVaultId: ZEROHASH,\\n                publicKey: ZEROHASH\\n            }),\\n            Structures.PostData({\\n                settings: Structures.PostSettings({\\n                    status: Structures.PostStatus.Renounced,\\n                    postType: Structures.PostType.Text,\\n                    creationTimeStamp: 0,\\n                    endTimeStamp: 0,\\n                    duration: 0,\\n                    tokenId: Structures.Tokens.NaN\\n                }),\\n                escrow: Structures.PostEscrow({\\n                    buyer: address(0),\\n                    seller: address(0),\\n                    stake: 0,\\n                    payment: 0,\\n                    punishment: 0,\\n                    penalty: 0\\n                }),\\n                data: Structures.PostEncryptedData({\\n                    encryptedData: \\\"\\\",\\n                    encryptedKey: \\\"\\\",\\n                    decryptedData: \\\"\\\"\\n                })\\n            })\\n        );\\n\\n        // Emit event\\n        emit Renounced(post);\\n    }\\n}\\n\",\"keccak256\":\"0x8ae67d46145c6ff5386d4a5c045996c1bf1e32baf27066d803186c90738601c1\",\"license\":\"MIT\"},\"contracts/modules/Staking.sol\":{\"content\":\"/**\\n * @title Staking\\n * @dev This contract handles staking functionality for the Mecenate platform.\\n * It allows users to add, take, and burn stakes, and provides functions to get the total staked amount and individual stake amounts.\\n * It also includes a modifier to check the status of a post before allowing stake-related transactions.\\n */\\npragma solidity 0.8.19;\\n\\nimport \\\"./Deposit.sol\\\";\\nimport \\\"./Events.sol\\\";\\n\\nabstract contract Staking is Events, Deposit, TokenManager {\\n    using SafeMath for uint256;\\n\\n    event StakeBurned(address staker, uint256 amount);\\n\\n    event StakeTaken(address staker, uint256 amount, Structures.Tokens tokenId);\\n\\n    event StakeAdded(address staker, uint256 amount, Structures.Tokens tokenId);\\n\\n    function _addStake(\\n        Structures.Tokens tokenId,\\n        address staker,\\n        address funder,\\n        uint256 amountToAdd\\n    ) internal returns (uint256 newStake) {\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\n\\n        require(\\n            currentStatus != Structures.PostStatus.Accepted &&\\n                currentStatus != Structures.PostStatus.Submitted,\\n            \\\"INVALID_STATUS\\\"\\n        );\\n\\n        require(amountToAdd > 0, \\\"STAKE_REQUIRED\\\");\\n\\n        if (tokenId != Structures.Tokens.NaN) {\\n            _transferFrom(tokenId, funder, address(this), amountToAdd);\\n        }\\n\\n        newStake = Deposit._increaseDeposit(tokenId, staker, amountToAdd);\\n\\n        emit StakeAdded(staker, amountToAdd, tokenId);\\n\\n        return newStake;\\n    }\\n\\n    function _takeStake(\\n        Structures.Tokens tokenId,\\n        address staker,\\n        address receiver,\\n        uint256 amountToTake\\n    ) internal returns (uint256 newStake) {\\n        // Memorizza lo status del post in una variabile per evitare accessi ridondanti allo storage\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\n\\n        // Verifica che lo status del post sia valido per procedere\\n        require(\\n            currentStatus != Structures.PostStatus.Accepted &&\\n                currentStatus != Structures.PostStatus.Submitted,\\n            \\\"INVALID_STATUS\\\"\\n        );\\n\\n        // Effettua il trasferimento del token o dell'Ether\\n        if (tokenId == Structures.Tokens.NaN) {\\n            //(bool result, ) = payable(_to).call{value: amountToTake}(\\\"\\\");\\n            //require(result, \\\"CALL_FAILED\\\");\\n            payable(receiver).transfer(amountToTake);\\n        } else {\\n            _transfer(tokenId, receiver, amountToTake);\\n        }\\n\\n        // Aggiorna il deposito e emette un evento\\n        newStake = Deposit._decreaseDeposit(tokenId, staker, amountToTake);\\n        emit StakeTaken(staker, amountToTake, tokenId);\\n\\n        return newStake;\\n    }\\n\\n    function _takeFullStake(\\n        Structures.Tokens tokenId,\\n        address staker,\\n        address receiver\\n    ) internal returns (uint256 amountTaken) {\\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, staker);\\n\\n        uint256 newStake = _takeStake(\\n            tokenId,\\n            staker,\\n            receiver,\\n            currentDeposit\\n        );\\n\\n        return newStake;\\n    }\\n\\n    function _burnStake(\\n        Structures.Tokens tokenId,\\n        address staker,\\n        uint256 amountToBurn\\n    ) internal returns (uint256 newStake) {\\n        uint256 newDeposit = Deposit._decreaseDeposit(\\n            tokenId,\\n            staker,\\n            amountToBurn\\n        );\\n\\n        bool burnEnabled = IMecenateFeedFactory(settings.factoryContract)\\n            .burnEnabled();\\n\\n        address treasuryContract = IMecenateFeedFactory(\\n            settings.factoryContract\\n        ).treasuryContract();\\n\\n        if (burnEnabled == false) {\\n            if (tokenId == Structures.Tokens.NaN) {\\n                (bool result, ) = payable(treasuryContract).call{\\n                    value: amountToBurn\\n                }(\\\"\\\");\\n                require(result, \\\"CALL_FAILED\\\");\\n            } else {\\n                _transfer(tokenId, treasuryContract, amountToBurn);\\n            }\\n        } else {\\n            if (tokenId == Structures.Tokens.DAI) {\\n                _burnDai(amountToBurn);\\n            } else if (tokenId == Structures.Tokens.MUSE) {\\n                _burn(amountToBurn);\\n            } else if (tokenId == Structures.Tokens.NaN) {\\n                _burnWeth(amountToBurn);\\n            }\\n        }\\n\\n        emit StakeBurned(staker, amountToBurn);\\n\\n        return newDeposit;\\n    }\\n\\n    function _burnFullStake(\\n        Structures.Tokens tokenId,\\n        address staker\\n    ) internal returns (uint256 amountBurned) {\\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, staker);\\n\\n        _burnStake(tokenId, staker, currentDeposit);\\n\\n        return currentDeposit;\\n    }\\n\\n    function getStake(\\n        Structures.Tokens tokenId,\\n        address staker\\n    ) external view returns (uint256 amount) {\\n        // get deposit\\n        amount = Deposit._getDeposit(tokenId, staker);\\n        // explicit return\\n        return amount;\\n    }\\n\\n    function getTotalStaked() external view returns (uint256) {\\n        uint256 amountSeller = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            post.postdata.escrow.seller\\n        );\\n\\n        uint256 amountBuyer = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            post.postdata.escrow.buyer\\n        );\\n\\n        return (amountSeller + amountBuyer);\\n    }\\n\\n    function addStake(\\n        Structures.Tokens tokenId,\\n        address _funder,\\n        uint256 amountToAdd\\n    ) external payable returns (uint256) {\\n        require(tokenId == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n\\n        // Check if the encryptedVaultId matches with either the buyer or the seller\\n        require(\\n            msg.sender == post.postdata.escrow.buyer ||\\n                msg.sender == post.postdata.escrow.seller,\\n            \\\"WRONG_MSGSENDER\\\"\\n        );\\n\\n        // Determine the amount to add based on the role (buyer or seller)\\n        uint256 actualAmountToAdd = (msg.sender == post.postdata.escrow.seller)\\n            ? msg.value\\n            : amountToAdd;\\n\\n        // Update the stake\\n        uint256 newStake = _addStake(\\n            tokenId,\\n            msg.sender,\\n            _funder,\\n            actualAmountToAdd\\n        );\\n\\n        // Update the corresponding escrow value based on the role\\n        if (msg.sender == post.postdata.escrow.buyer) {\\n            post.postdata.escrow.payment = newStake;\\n        } else {\\n            post.postdata.escrow.stake = newStake;\\n        }\\n\\n        return newStake;\\n    }\\n\\n    function takeStake(\\n        Structures.Tokens tokenId,\\n        address receiver,\\n        uint256 amountToTake\\n    ) external returns (uint256) {\\n        require(tokenId == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n\\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, msg.sender);\\n\\n        require(currentDeposit >= amountToTake, \\\"NOT_ENOUGH_STAKE\\\");\\n\\n        uint256 newBalance = _takeStake(\\n            tokenId,\\n            msg.sender,\\n            receiver,\\n            amountToTake\\n        );\\n\\n        if (msg.sender == post.postdata.escrow.buyer) {\\n            post.postdata.escrow.payment = newBalance;\\n        } else {\\n            post.postdata.escrow.stake = newBalance;\\n        }\\n\\n        return newBalance;\\n    }\\n\\n    function takeFullStake(\\n        Structures.Tokens tokenId,\\n        address receiver\\n    ) external returns (uint256) {\\n        require(tokenId == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n\\n        uint256 newBalance = _takeFullStake(tokenId, msg.sender, receiver);\\n\\n        if (msg.sender == post.postdata.escrow.buyer) {\\n            post.postdata.escrow.payment = newBalance;\\n        } else if (msg.sender == post.postdata.escrow.seller) {\\n            post.postdata.escrow.stake = newBalance;\\n        }\\n\\n        return newBalance;\\n    }\\n\\n    function getSellerStake() external view returns (uint256 amount) {\\n        // get deposit\\n        amount = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            post.postdata.escrow.seller\\n        );\\n        // explicit return\\n        return amount;\\n    }\\n\\n    function getBuyerStake() external view returns (uint256 amount) {\\n        // get deposit\\n        amount = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            post.postdata.escrow.buyer\\n        );\\n        // explicit return\\n        return amount;\\n    }\\n}\\n\",\"keccak256\":\"0x94556a37278a2684b61c9734e71d523d215af864486d60b0562f52d5437308dc\"},\"contracts/modules/Submission.sol\":{\"content\":\"/**\\n * @title Submission\\n * @dev This contract is an abstract contract that defines the functions for submitting and revealing data for a post. It inherits from the Events contract.\\n */\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"./Events.sol\\\";\\n\\nabstract contract Submission is Events {\\n    function submitHash(bytes memory encryptedKey) external virtual {\\n        require(msg.sender == post.postdata.escrow.seller, \\\"NOT_SELLER\\\");\\n\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\n        require(\\n            validStatuses[uint8(currentStatus)] &&\\n                (currentStatus == Structures.PostStatus.Accepted ||\\n                    currentStatus == Structures.PostStatus.Submitted),\\n            \\\"WRONG_STATUS\\\"\\n        );\\n\\n        require(\\n            IMecenateUsers(settings.usersModuleContract).checkifUserExist(\\n                msg.sender\\n            ),\\n            \\\"User does not exist\\\"\\n        );\\n\\n        require(post.creator.evmAddress == msg.sender, \\\"NOT_SELLER\\\");\\n\\n        _changeStatus(Structures.PostStatus.Submitted);\\n\\n        post.postdata.data.encryptedKey = encryptedKey;\\n        post.postdata.settings.status = Structures.PostStatus.Submitted;\\n        post.postdata.settings.endTimeStamp =\\n            block.timestamp +\\n            post.postdata.settings.duration;\\n\\n        emit Valid(post);\\n    }\\n\\n    function revealData(\\n        bytes memory decryptedData\\n    ) external virtual returns (bytes memory) {\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\n        require(\\n            validStatuses[uint8(currentStatus)] &&\\n                (currentStatus == Structures.PostStatus.Submitted ||\\n                    currentStatus == Structures.PostStatus.Revealed ||\\n                    currentStatus == Structures.PostStatus.Finalized),\\n            \\\"INVALID_STATUS\\\"\\n        );\\n\\n        require(\\n            msg.sender != post.postdata.escrow.seller,\\n            \\\"YOU_ARE_THE_SELLER\\\"\\n        );\\n\\n        require(\\n            currentStatus == Structures.PostStatus.Finalized,\\n            \\\"NOT_FINALIZED\\\"\\n        );\\n\\n        post.postdata.data.decryptedData = decryptedData;\\n        post.postdata.settings.status = Structures.PostStatus.Revealed;\\n\\n        emit MadePublic(post);\\n\\n        return decryptedData;\\n    }\\n}\\n\",\"keccak256\":\"0x1fb24c1495a7bbf805edc40e95a499b96ab454e9cefff0f4f5bd8d64ec317e03\",\"license\":\"MIT\"},\"contracts/modules/TokenManager.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"./BurnDAI.sol\\\";\\n\\nabstract contract TokenManager is BurnDAI {\\n    function _getTokenAddress(\\n        Structures.Tokens tokenID\\n    ) internal view returns (address) {\\n        if (tokenID == Structures.Tokens.DAI)\\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\\n        if (tokenID == Structures.Tokens.MUSE)\\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\\n        return address(0);\\n    }\\n\\n    function _checkAllowance(\\n        Structures.Tokens tokenID,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal view {\\n        address tokenAddress = _getTokenAddress(tokenID);\\n        require(\\n            IERC20(tokenAddress).allowance(from, to) >= value,\\n            \\\"INSUFFICIENT_ALLOWANCE\\\"\\n        );\\n    }\\n\\n    modifier onlyValidTokenID(Structures.Tokens tokenID) {\\n        require(\\n            tokenID == Structures.Tokens.MUSE ||\\n                tokenID == Structures.Tokens.DAI ||\\n                tokenID == Structures.Tokens.NaN,\\n            \\\"WRONG_TOKEN\\\"\\n        );\\n        _;\\n    }\\n\\n    function isValidTokenID(\\n        Structures.Tokens tokenID\\n    ) internal pure returns (bool validity) {\\n        return\\n            tokenID == Structures.Tokens.MUSE ||\\n            tokenID == Structures.Tokens.DAI;\\n    }\\n\\n    function _transfer(\\n        Structures.Tokens tokenID,\\n        address to,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        require(\\n            IERC20(_getTokenAddress(tokenID)).transfer(to, value),\\n            \\\"TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function _transferFrom(\\n        Structures.Tokens tokenID,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        address tokenAddress = _getTokenAddress(tokenID);\\n        _checkAllowance(tokenID, from, to, value);\\n        require(\\n            IERC20(tokenAddress).transferFrom(from, to, value),\\n            \\\"TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function _burn(\\n        Structures.Tokens tokenID,\\n        address _receiver,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) returns (bool success) {\\n        bool burnEnabled = IMecenateFeedFactory(settings.factoryContract)\\n            .burnEnabled();\\n\\n        if (burnEnabled == false) {\\n            if (tokenID == Structures.Tokens.NaN) {\\n                (bool result, ) = payable(_receiver).call{value: value}(\\\"\\\");\\n                require(result, \\\"CALL_FAILED\\\");\\n            } else {\\n                TokenManager._transfer(tokenID, _receiver, value);\\n            }\\n        } else {\\n            if (tokenID == Structures.Tokens.DAI) {\\n                _burnDai(value);\\n            } else if (tokenID == Structures.Tokens.MUSE) {\\n                _burn(value);\\n            } else if (tokenID == Structures.Tokens.NaN) {\\n                _burnWeth(value);\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    function _burnFrom(\\n        Structures.Tokens tokenID,\\n        address from,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        address treasury = IMecenateFeedFactory(settings.factoryContract)\\n            .treasuryContract();\\n\\n        if (tokenID == Structures.Tokens.DAI) {\\n            IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\n                .transferFrom(from, treasury, value);\\n        } else if (tokenID == Structures.Tokens.MUSE) {\\n            BurnMUSE._burnFrom(from, value);\\n        }\\n    }\\n\\n    function _approve(\\n        Structures.Tokens tokenID,\\n        address spender,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        if (tokenID == Structures.Tokens.DAI) {\\n            require(\\n                IERC20(\\n                    IMecenateFeedFactory(settings.factoryContract).daiToken()\\n                ).approve(spender, value),\\n                \\\"APPROVE_FAILED\\\"\\n            );\\n        } else if (tokenID == Structures.Tokens.MUSE) {\\n            uint256 currentAllowance = IMUSE(\\n                IMecenateFeedFactory(settings.factoryContract).museToken()\\n            ).allowance(msg.sender, spender);\\n\\n            uint256 newAllowance = currentAllowance + value;\\n            require(\\n                IMUSE(IMecenateFeedFactory(settings.factoryContract).daiToken())\\n                    .increaseAllowance(spender, newAllowance),\\n                \\\"APPROVE_FAILED\\\"\\n            );\\n        }\\n    }\\n\\n    function totalSupply(\\n        Structures.Tokens tokenID\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).totalSupply();\\n    }\\n\\n    function balanceOf(\\n        Structures.Tokens tokenID,\\n        address who\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).balanceOf(who);\\n    }\\n\\n    function allowance(\\n        Structures.Tokens tokenID,\\n        address owner,\\n        address spender\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).allowance(owner, spender);\\n    }\\n}\\n\",\"keccak256\":\"0x8eded6283ea4effbe4861c36f73afaace086765ac8d26ef695ac8855ed15e8b1\"},\"contracts/modules/Version.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/// @title Semver\\n/// @notice A simple contract for managing contract versions.\\nabstract contract Version {\\n    // Contract's major version number.\\n    uint256 private immutable _major;\\n\\n    // Contract's minor version number.\\n    uint256 private immutable _minor;\\n\\n    // Contract's patch version number.\\n    uint256 private immutable _path;\\n\\n    /// @dev Create a new Semver instance.\\n    /// @param major Major version number.\\n    /// @param minor Minor version number.\\n    /// @param patch Patch version number.\\n    constructor(uint256 major, uint256 minor, uint256 patch) {\\n        _major = major;\\n        _minor = minor;\\n        _path = patch;\\n    }\\n\\n    /// @notice Returns the full semver contract version.\\n    /// @return Semver contract version as a string.\\n    function version() external view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    Strings.toString(_major),\\n                    \\\".\\\",\\n                    Strings.toString(_minor),\\n                    \\\".\\\",\\n                    Strings.toString(_path)\\n                )\\n            );\\n    }\\n\\n    function _version() internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    Strings.toString(_major),\\n                    \\\".\\\",\\n                    Strings.toString(_minor),\\n                    \\\".\\\",\\n                    Strings.toString(_path)\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xa99614da4eb0014c2756685061352b80325a07e4cb14f7c704ec2a62e182688f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060409080825234620003885760c081620059b580380380916200002582856200038d565b83398101031262000388576200003b81620003c7565b60206200004a818401620003c7565b9162000058858501620003c7565b9360608101519060a060808201519101519160805260a05260c05267016345785d8a00006012556000938460135560018060a01b039283918260018060a01b031996168660145416176014553386601554161760155581885180926303e21fa960e61b8252816004968792165afa9081156200037e5790859188916200033a575b501685601654161760165562000124620000f560805162000425565b916200010360a05162000425565b92620001496200011560c05162000425565b8b5194859385850190620003dc565b601760f91b8082526200013e6001988980940190620003dc565b9081520190620003dc565b036200015e601f19918281018552846200038d565b8251906001600160401b03821162000327576017548581811c911680156200031c575b848210146200030957601f8111620002bd575b508290601f831160011462000257575081906019948b926200024b575b5050600019600383901b1c191690841b176017555b60ff199384815416815588805260188252620151808a8a20558389526203f4808a8a20556002895262093a808a8a205560038952621275008a8a2055885262278d0089892055878052528686209182541617905516908254161790555161540f9081620005a682396080518161216c015260a05181612195015260c051816121c40152f35b015190503880620001b1565b60178b52838b2090831694869392908c5b878110620002a5575083601997106200028b575b505050811b01601755620001c6565b015160001960f88460031b161c191690553880806200027c565b82820151845588959093019291860191860162000268565b60178b52838b20601f840160051c810191858510620002fe575b601f0160051c019086905b828110620002f257505062000194565b8c8155018690620002e2565b9091508190620002d7565b634e487b7160e01b8b526022875260248bfd5b90607f169062000181565b634e487b7160e01b8a526041865260248afd5b809250838092503d831162000376575b6200035681836200038d565b8101031262000372576200036b8591620003c7565b38620000d9565b8680fd5b503d6200034a565b88513d89823e3d90fd5b600080fd5b601f909101601f19168101906001600160401b03821190821017620003b157604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036200038857565b9081519160005b838110620003f5575050016000815290565b8060208092840101518185015201620003e3565b6001600160401b038111620003b157601f01601f191660200190565b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008082101562000596575b506d04ee2d6d415b85acef81000000008083101562000586575b50662386f26fc100008083101562000576575b506305f5e1008083101562000566575b506127108083101562000556575b50606482101562000545575b600a809210156200053a575b60019081602181860195620004c78762000409565b96620004d760405198896200038d565b808852620004e8601f199162000409565b01366020890137860101905b62000501575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a8353049182156200053457919082620004f4565b620004fa565b9160010191620004b2565b9190606460029104910191620004a6565b600491939204910191386200049a565b600891939204910191386200048c565b601091939204910191386200047c565b6020919392049101913862000469565b6040935081049150386200044f56fe608080604052600436101561001d575b50361561001b57600080fd5b005b60003560e01c908163010a38f514612f645750806305c1f50214612f1b57806307388dba14612c435780630917e77614612bfd57806317906c2e14612bdf5780631d0b4af514612b0f5780633d876d5d146122d15780634c38d877146122a15780634e69d5601461227957806352a6cb4a1461226057806354fd4d50146121565780635ad4e170146121295780635c63ed69146120f9578063729e2eb1146120295780637abe914d14611dca5780638c6838ba14611d7e5780638da5cb5b14611d555780638f287dc2146112d05780638f903c7914610fbc578063d24e0c8714610f9e578063d2af47ab146102a8578063ed70d5d5146101ed578063f2d7dbb6146101555763faeb5e1714610132573861000f565b34610150576000366003190112610150576020600b54604051908152f35b600080fd5b3461015057610163366135f3565b9060ff600854169060038210156101d75760038110156101d75760209261018e6101a093831461395f565b6101983383613ad9565b913390614f22565b6009546001600160a01b039033908216036101c3575080600c555b604051908152f35b600a541633036101bb575b80600b556101bb565b634e487b7160e01b600052602160045260246000fd5b34610150576101fb366135c0565b60ff6008939293541660038110156101d75760038310156101d75761022190831461395f565b81600052601a602052604060002033600052602052806040600020541061027057602092610250923390614f22565b600954336001600160a01b03909116036101ce5780600c55604051908152f35b60405162461bcd60e51b815260206004820152601060248201526f4e4f545f454e4f5547485f5354414b4560801b6044820152606490fd5b610120366003190112610150576004356001600160401b038111610150576102d490369060040161363d565b60056024351015610150576005604435101561015057600360a43510156101505760c4356001600160a01b03811690036101505760e4356001600160a01b0381169003610150576101043515156101043503610150576103326138eb565b506000600160a435148015610f8e575b81908015610f7f575b610355915061395f565b6000546001600160a01b031633036101505760145460405163122643f360e21b81526001600160a01b0360e43581166004830152909160209183916024918391165afa908115610e3057600091610f45575b5015610f0f5760ff6004541660088110156101d75760005260196020526103d560ff604060002054166136b9565b60843515610ed65760643515610ea2576101043515610e3c576101d75760a435600052601a602052604060002060018060a01b0360e4351660005260205261042660843560406000205410156136f6565b6084355b610435604435613326565b60ff6044351660005260186020526040600020549160ff600454169160088310156101d757600092835260196020526040808420805460ff1990811690915560018086527ffc941c3961fb6541da34150022cddf959da0fb2353866a6bfbd249c2da0929148054831682179055600480549092161781556014549151633bcaa1d960e21b81526001600160a01b0360e435811692820192909252949185916024918391165afa928315610e3057600093610d7d575b50604051936104f88561324b565b60018552610507602435613326565b602435602086015242604086015260006060860152608085015261053060a43560a08601613330565b6040519061053d8261324b565b6000825260018060a01b0360e4351660208301526040820152606435606082015260006080820152600060a08201526105746139ef565b61057c6139ef565b906040519361058a85613230565b845260208401526040830152604051936105a385613230565b845260208401526040830152604051916105bc83613266565b81835260208301528051600180546001600160a01b0319166001600160a01b039290921691909117905560208101518051906001600160401b0382116109db57610607600254612f90565b601f8111610d14575b50602090601f8311600114610c9b57604093929160009183610c90575b50508160011b916000199060031b1c1916176002555b01518051906001600160401b0382116109db578190610663600354612f90565b601f8111610c19575b50602090601f8311600114610ba157600092610b96575b50508160011b916000199060031b1c1916176003555b6020810151805180519060088210156101d7576106b760a092613782565b60208101516106c581613326565b6106ce81613326565b61ff006004549160081b169061ff0019161760045560408101516005556060810151600655608081015160075501519060038210156101d75760409160ff80196008541691161760085560a06020820151610748600180841b0382511660018060a01b03166001600160601b0360a01b6009541617600955565b610774600180841b0360208301511660018060a01b03166001600160601b0360a01b600a541617600a55565b83810151600b556060810151600c556080810151600d550151600e5501519081519182516001600160401b0381116109db576107b1600f54612f90565b601f8111610b43575b506020601f8211600114610ad15781929394600092610ac6575b50508160011b916000199060031b1c191617600f555b60208101518051906001600160401b0382116109db5761080b601054612f90565b601f8111610a73575b50602090601f83116001146109fc576040939291600091836109f1575b50508160011b916000199060031b1c1916176010555b0151908151906001600160401b0382116109db576011916108688354612f90565b601f8111610989575b506020601f8211600114610919578192939460009261090e575b50508160011b916000199060031b1c19161782555b6013549160001983146108fa575060016108f692016013557f6e8f9f12846cf7ba30acdd742f3eae58c49befeed93f00d60de3bd4f7d09f223604051806108e78482613684565b0390a160405191829182613684565b0390f35b634e487b7160e01b60005260045260246000fd5b01519050848061088b565b601f198216908460005260008051602061537a8339815191529160005b81811061097157509583600195969710610958575b505050811b0182556108a0565b015160001960f88460031b161c1916905584808061094b565b9192602060018192868b015181550194019201610936565b8360005260008051602061537a833981519152601f830160051c810191602084106109d1575b601f0160051c01905b8181106109c55750610871565b600081556001016109b8565b90915081906109af565b634e487b7160e01b600052604160045260246000fd5b015190508580610831565b90601f19831691601060005260008051602061539a8339815191529260005b818110610a5b5750916001939185604097969410610a42575b505050811b01601055610847565b015160001960f88460031b161c19169055858080610a34565b92936020600181928786015181550195019301610a1b565b601060005260008051602061539a833981519152601f840160051c81019160208510610abc575b601f0160051c01905b818110610ab05750610814565b60008155600101610aa3565b9091508190610a9a565b0151905084806107d4565b601f19821690600f6000526000805160206153ba8339815191529160005b818110610b2b57509583600195969710610b12575b505050811b01600f556107ea565b015160001960f88460031b161c19169055848080610b04565b9192602060018192868b015181550194019201610aef565b600f6000526000805160206153ba833981519152601f830160051c81019160208410610b8c575b601f0160051c01905b818110610b8057506107ba565b60008155600101610b73565b9091508190610b6a565b015190508380610683565b9250600360005260008051602061535a833981519152906000935b601f1984168510610bfe576001945083601f19811610610be5575b505050811b01600355610699565b015160001960f88460031b161c19169055838080610bd7565b81810151835560209485019460019093019290910190610bbc565b9091506003600052601f830160051c60008051602061535a833981519152019060208410610c7a575b90601f8493920160051c60008051602061535a83398151915201905b818110610c6b575061066c565b60008155849350600101610c5e565b60008051602061535a8339815191529150610c42565b01519050858061062d565b90600260005260008051602061533a8339815191529160005b601f1985168110610cfc575091839160019360409695601f19811610610ce3575b505050811b01600255610643565b015160001960f88460031b161c19169055858080610cd5565b91926020600181928685015181550194019201610cb4565b6002600052601f830160051c60008051602061533a8339815191520160208410610d68575b601f820160051c60008051602061533a833981519152018110610d5c5750610610565b60008155600101610d39565b5060008051602061533a833981519152610d39565b9092503d806000833e610d9081836132af565b6020828281010312610150578151916001600160401b03831161015057606083820183830103126101505760405192610dc884613230565b610dd3818301613999565b8452602081830101516001600160401b03811161015057610dfb9084840190838501016139ad565b602085015260408183010151906001600160401b03821161015057610e249383019201016139ad565b604082015291846104ea565b6040513d6000823e3d90fd5b6101d75760a43515610e62575b610e5d60843560c43560e43560a435613d7e565b61042a565b3460843514610e495760405162461bcd60e51b815260206004820152600f60248201526e57524f4e475f4d53475f56414c554560881b6044820152606490fd5b60405162461bcd60e51b815260206004820152600c60248201526b5041594d454e545f5a45524f60a01b6044820152606490fd5b60405162461bcd60e51b81526020600482015260116024820152705354414b455f414d4f554e545f5a45524f60781b6044820152606490fd5b60405162461bcd60e51b815260206004820152600e60248201526d1554d15497d393d517d1561254d560921b6044820152606490fd5b90506020813d602011610f77575b81610f60602093836132af565b8101031261015057610f7190613734565b836103a7565b3d9150610f53565b506101d7578060a4351561034b565b506000905060a435600214610342565b34610150576000366003190112610150576020600c54604051908152f35b3461015057602080600319360112610150576001600160401b039060043582811161015057610fef90369060040161363d565b600a5490916001600160a01b039161100a9083163314613b07565b60ff6004541660088110156101d757806000526019825260ff60406000205416806112bc575b156112885760248284601454166040519283809263122643f360e21b82523360048301525afa908115610e3057600091611253575b50156112185761107c600193339085541614613b07565b6000526019815260406000209260ff1993848154169055600360005260406000208385825416179055600384600454161760045580519485116109db576110c4601054612f90565b601f81116111c3575b5081601f8611600114611151575060039492600092849283611146575b50501b9160001990851b1c1916176010555b600454161760045561111060075442613c81565b6006557f61de5b63673167e253173c50abdc3fd45371dc3205496f46fdb05a9f7927b574604051806111418161379b565b0390a1005b0151925086806110ea565b909491601f19831695601060005260008051602061539a833981519152926000905b8882106111ac5750508360039710611194575b505050811b016010556110fc565b015160001983871b60f8161c19169055848080611186565b808785968294968601518155019501930190611173565b601060005260008051602061539a833981519152601f870160051c81019184881061120e575b601f0160051c019084905b8281106112025750506110cd565b600081550184906111f4565b90915081906111e9565b60405162461bcd60e51b8152600481018390526013602482015272155cd95c88191bd95cc81b9bdd08195e1a5cdd606a1b6044820152606490fd5b90508281813d8311611281575b61126a81836132af565b810103126101505761127b90613734565b86611065565b503d611260565b60405162461bcd60e51b815260048101839052600c60248201526b57524f4e475f53544154555360a01b6044820152606490fd5b506002811480611030575060038114611030565b3461015057606036600319011261015057600435151560043503610150576009546001600160a01b0316611305338214613b07565b60ff6004541660088110156101d757600303611d205760155460405163335ded4b60e21b81526001600160a01b0390911690602081600481855afa908115610e3057600091611ce1575b506040516328c44a9960e21b8152604435600482015290600090829060249082906001600160a01b03165afa908115610e3057600091611bbe575b5060e08101516113a4906001600160a01b03168414613b54565b60c0810151600a546001600160a01b03918216911603611b8557602081810151604051633ec4f23d60e01b81529182600481875afa918215610e3057600092611b51575b5003611b1b5761012001519081518201916060818403126101505761140f60208201613734565b9261141c60408301613999565b916060810151916001600160401b038311610150576114429260208092019201016139ad565b90306001600160a01b0390911603611ae75760405161147f81611471602082019460208652604083019061345b565b03601f1981018352826132af565b519020604051602080820152600f5481600061149a83612f90565b92836040840152600181169081600014611ac85750600114611a7b575b6114ca925003601f1981018352826132af565b6020815191012003611a47576020600491604051928380926318da001160e01b82525afa908115610e3057600091611a0d575b50600c54604051634047e10360e11b81529092906020816004816001600160a01b0387165afa908115610e30576000916119d9575b5061271061154361154b9286613b96565b048094613bbf565b93600654421180156119d0575b15611872575061156f901515600435151514613b54565b600854600954600c546115ad92611592926001600160a01b03169060ff16613c8e565b600854600a549195916001600160a01b03169060ff16613bf8565b9160ff600854166003811015806101d757600182148015918183611864575b81908015611857575b6115df915061395f565b601554604051632ee4b68b60e11b815290602090829060049082906001600160a01b03165afa908115610e305760009161181d575b506117d0576101d757826116e4575061164b9360009384935083925082916001600160a01b03165af161164561404c565b5061407c565b600b55600c55600435156116dd5760045b60ff6004541660088110156101d757600052601960205260406000209060ff199182815416905560088110156101d7576116af9160ff821660005260196020526001604060002091825416179055613782565b7f61de5b63673167e253173c50abdc3fd45371dc3205496f46fdb05a9f7927b574604051806111418161379b565b600561165c565b600090916117c3575b81156117b0575b5092602092916117066117549561395f565b6001600160a01b039061171890615123565b60405163a9059cbb60e01b81526001600160a01b0390931660048401526024830193909352909384929190911690829060009082906044820190565b03925af18015610e3057600090611775575b61177091506150e5565b61164b565b506020813d6020116117a8575b8161178f602093836132af565b81010312610150576117a361177091613734565b611766565b3d9150611782565b90509190916101d75790600060206116f4565b50506002811460006116ed565b9150919293506101d757600282036117f35750506117ed906143b8565b5061164b565b1561180257506117ed90614e6a565b1561180d575061164b565b6118169061484f565b50826117ed565b90506020813d60201161184f575b81611838602093836132af565b810103126101505761184990613734565b89611614565b3d915061182b565b506101d7578084156115d5565b5060009050600284146115cc565b93509150506004351561188157005b611892901515600435151514613b54565b600b546024359081116119955760125491670de0b6b3a76400009283811015611958576005936118c56118d39285613b96565b04809260ff600854166140b6565b600c55600854600a546118f49184916001600160a01b03169060ff166140b6565b600b5560ff199183836004541617600455600d55600e55816000526019602052604060002060018282541617905560045416176004557fb0ec4ef3ee1a79effa677af7a82a3a875b4d438307fb7e589a58966e3b913f2f604051806111418161379b565b60405162461bcd60e51b81526020600482015260156024820152740a0aa9c92a6909a8a9ca8bea482a8929ebe90928e9605b1b6044820152606490fd5b60405162461bcd60e51b81526020600482015260136024820152720a0aa9c92a6909a8a9ca8bea89e9ebe90928e9606b1b6044820152606490fd5b50600435611558565b90506020813d602011611a05575b816119f4602093836132af565b810103126101505751612710611532565b3d91506119e7565b90506020813d602011611a3f575b81611a28602093836132af565b8101031261015057611a3990613999565b836114fd565b3d9150611a1b565b60405162461bcd60e51b815260206004820152600c60248201526b1253959053125117d413d4d560a21b6044820152606490fd5b5090600f6000526000805160206153ba833981519152906000915b818310611aae5750509060606114ca928201016114b7565b805460608487010152849350602090920191600101611a96565b606092506114ca94915060ff191682840152151560051b8201016114b7565b60405162461bcd60e51b815260206004820152600c60248201526b1253959053125117d191515160a21b6044820152606490fd5b60405162461bcd60e51b815260206004820152600e60248201526d494e56414c49445f534348454d4160901b6044820152606490fd5b9091506020813d602011611b7d575b81611b6d602093836132af565b81010312610150575190856113e8565b3d9150611b60565b60405162461bcd60e51b81526020600482015260116024820152701253959053125117d49150d25412515395607a1b6044820152606490fd5b90503d806000833e611bd081836132af565b6020828281010312610150578151906001600160401b0382116101505761014082840182850103126101505760405192836101408101106001600160401b03610140860111176109db57610140840160409081528184018051865260208082015190870152611c3f9101613b40565b6040850152611c52606084830101613b40565b6060850152611c65608084830101613b40565b608085015260a0838201015160a0850152611c8460c084830101613999565b60c0850152611c9760e084830101613999565b60e0850152610100611cac8185840101613734565b9085015261012092838183010151906001600160401b03821161015057611cd79383019201016139ad565b908201528361138a565b90506020813d602011611d18575b81611cfc602093836132af565b81010312610150576000611d11602492613999565b915061134f565b3d9150611cef565b60405162461bcd60e51b815260206004820152600d60248201526c1393d517d4d550935255151151609a1b6044820152606490fd5b34610150576000366003190112610150576000546040516001600160a01b039091168152602090f35b3461015057600036600319011261015057611d976138eb565b506108f6604051611da781613266565b611daf6132d0565b8152611db961333c565b602082015260405191829182613684565b3461015057602080600319360112610150576001600160401b039060043582811161015057611dfd90369060040161363d565b9060ff600454166008811015806101d757816000526019835260ff6040600020541680611fed575b611e2e906136b9565b611e4460018060a01b03600a5416331415613741565b6101d757600403611fb95781519283116109db57611e63601154612f90565b601f8111611f67575b508092601f8111600114611ef85780919293600091611eed575b508160011b916000199060031b1c1916176011555b600660ff1960045416176004557f76c6a8f0836a14a631dc3a45fc0c49d4dd3fc4147167329ba4220ba2664ccaf060405180611ed68161379b565b0390a16108f660405192828493845283019061345b565b905083015184611e86565b601f19811693601160005260008051602061537a8339815191529060005b868110611f50575082600194959610611f37575b5050811b01601155611e9b565b85015160001960f88460031b161c191690558480611f2a565b909184600181928589015181550193019101611f16565b601160005260008051602061537a833981519152601f850160051c810191838610611faf575b601f0160051c01905b818110611fa35750611e6c565b60008155600101611f96565b9091508190611f8d565b6064906040519062461bcd60e51b82526004820152600d60248201526c1393d517d19253905312569151609a1b6044820152fd5b5050600060038214801561201b575b8190801561200c575b9050611e25565b506101d7578060048314612005565b506000905060068214611ffc565b34610150576000366003190112610150576040516000600f5461204b81612f90565b808452906001908181169081156120d25750600114612089575b6108f684612075818603826132af565b60405191829160208352602083019061345b565b600f600090815292506000805160206153ba8339815191525b8284106120ba57505050810160200161207582612065565b805460208587018101919091529093019281016120a2565b60ff191660208087019190915292151560051b850190920192506120759150839050612065565b3461015057600036600319011261015057600854600a546020916101bb916001600160a01b03169060ff16613ad9565b34610150576000366003190112610150576020612144613a0f565b6040516001600160a01b039091168152f35b34610150576000366003190112610150576121907f00000000000000000000000000000000000000000000000000000000000000006151b1565b6121b97f00000000000000000000000000000000000000000000000000000000000000006151b1565b9061224c60226121e87f00000000000000000000000000000000000000000000000000000000000000006151b1565b93604051948591855161220381602098898088019101613438565b830190601760f91b918288820152612224825180938a602185019101613438565b0190602182015261223d82518093888785019101613438565b010360028101855201836132af565b6108f660405192828493845283019061345b565b346101505760206101bb612273366135f3565b90613ad9565b3461015057600036600319011261015057602060ff6004541661229f60405180926134bf565bf35b34610150576000366003190112610150576008546009546020916101bb916001600160a01b03169060ff16613ad9565b3461015057600036600319011261015057600a546001600160a01b03906122fb9082163314613b07565b60ff6004541660088110156101d75760005260206019815261232460ff604060002054166136b9565b61232c6139ef565b6123346139ef565b916040519161234283613230565b600083528183019081526040830193845261244f85604051946123648661324b565b60078652600085870152600060408701526000606087015260006080870152600060a08701526040516123968161324b565b60008152600086820152600060408201526000606082015260006080820152600060a0820152604051906123c982613230565b6040516123d581613294565b6000815282526040516123e781613294565b60008152878301526040516123fb81613294565b6000815260408301526040519761241189613230565b88528688015260408701528460405161242981613266565b82815201958652511660018060a01b03166001600160601b0360a01b6001541617600155565b51908151936001600160401b03948581116109db5780612470600254612f90565b94601f95868111612ab4575b508490868311600114612a4057600092612a35575b50508160011b916000199060031b1c1916176002555b519283518581116109db57806003956124c08754612f90565b8681116129db575b50849086831160011461296b57600092612960575b50508160011b9160001990871b1c19161784555b5194855195865160088110156101d75761250a90613782565b8287015161251781613326565b61252081613326565b61ff006004549160081b169061ff0019161760045560a06040880151976005988955606081015160065560808101516007550151858110156101d75760409260a09160ff8019600854169116176008556125be858401519161259c8184511660018060a01b03166001600160601b0360a01b6009541617600955565b868301511660018060a01b03166001600160601b0360a01b600a541617600a55565b83810151600b556060810151600c556080810151600d550151600e55015180518051908682116109db5781906125f5600f54612f90565b868111612907575b50849086831160011461289457600092612889575b50508160011b9160001990871b1c191617600f555b818101518051908682116109db57612640601054612f90565b85811161283c575b5083908583116001146127c6576040939291600091836127bb575b50508160011b9160001990881b1c1916176010555b01519485519485116109db5761268f601154612f90565b90838211612772575b5050809184116001146126fd575082936000936126f2575b50508260011b92600019911b1c1916176011555b7f88c430102eab5dbc235ca367ecd5ffa63164bb311015524ecebed009d4d4b5b6604051806111418161379b565b0151915083806126b0565b9190601f19841694601160005260008051602061537a833981519152936000905b87821061275a5750508460019610612740575b50505050811b016011556126c4565b01519060f884600019921b161c1916905582808080612731565b8060018597829496860151815501960193019061271e565b601160005260008051602061537a8339815191529084808801821c8301938589106127b2575b01901c01905b81811015612698576000815560010161279e565b93508293612798565b015190508980612663565b90601f19831691601060005260008051602061539a8339815191529260005b8782821061282657505091600193918560409796941061280e575b505050811b01601055612678565b0151600019838a1b60f8161c19169055898080612800565b60018596829396860151815501950193016127e5565b601060005260008051602061539a833981519152868085018b1c820192878610612880575b018a1c01905b8181106128745750612648565b60008155600101612867565b92508192612861565b015190508880612612565b600f60009081526000805160206153ba8339815191529350601f198516905b878282106128f15750509084600195949392106128d9575b505050811b01600f55612627565b015160001983891b60f8161c191690558880806128cb565b60018596829396860151815501950193016128b3565b909150600f6000526000805160206153ba833981519152868085018b1c820192878610612957575b908594939291018b1c01905b81811061294857506125fd565b6000815584935060010161293b565b9250819261292f565b0151905088806124dd565b600088815260008051602061535a8339815191529350601f198516905b878282106129c55750509084600195949392106129ad575b505050811b0184556124f1565b015160001983891b60f8161c191690558880806129a0565b6001859682939686015181550195019301612988565b9091508660005260008051602061535a8339815191528680850160051c820192878610612a2c575b9085949392910160051c01905b818110612a1d57506124c8565b60008155849350600101612a10565b92508192612a03565b015190508880612491565b6002600090815260008051602061533a8339815191529350601f198516905b87828210612a9e575050908460019594939210612a85575b505050811b016002556124a7565b015160001960f88460031b161c19169055888080612a77565b6001859682939686015181550195019301612a5f565b909150600260005260008051602061533a8339815191528680850160051c820192878610612b06575b9085949392910160051c01905b818110612af7575061247c565b60008155849350600101612aea565b92508192612add565b612b18366135c0565b60ff6008939293541660038110156101d75760038310156101d757612b3e90831461395f565b6009546001600160a01b039290831633148015612bd2575b15612b9b57602093612b7b9284600a54163314600014612b95575034915b3390613d7e565b906009541633146000146101ce5780600c55604051908152f35b91612b74565b60405162461bcd60e51b815260206004820152600f60248201526e2ba927a723afa6a9a3a9a2a72222a960891b6044820152606490fd5b5082600a54163314612b56565b34610150576000366003190112610150576020601354604051908152f35b346101505760003660031901126101505760206101bb60ff60085416612c3d60018060a01b0391612c3283600a541682613ad9565b926009541690613ad9565b90613c81565b6080366003190112610150576004356003811015610150576024908135906001600160a01b03604435818116810361015057606435928284169485850361015057600160005260209560198752612ca160ff604060002054166136b9565b60ff600854166003811015612f0657612cbb90841461395f565b82612eff5734945b888882600a541692612ce2612cd88589613ad9565b600b5411156136f6565b601454166040519283809263122643f360e21b82528760048301525afa908115610e3057600091612eca575b5015612e94579081612d2c92331491821592612e89575b5050613741565b600c54908115612e015710612dc8576002955091612d4f9184612d6f9594613d7e565b600c5560018060a01b03166001600160601b0360a01b6009541617600955565b601960ff1991838360045416176004558360005252604060002060018282541617905560045416176004557f909d9218f6e1f243c7d9044544c7b03e2e7db27d81653992e9018b8b72f4c20d604051806111418161379b565b60405162461bcd60e51b815260048101869052601281880152711393d517d15393d551d217d410565351539560721b6044820152606490fd5b90503415612e555715612e22576002955091612d4f9184612d6f9594613d7e565b60405162461bcd60e51b815260048101869052600c818801526b16915493d7d410565351539560a21b6044820152606490fd5b60405162461bcd60e51b815260048101879052600d818901526c5a45524f5f4d534756414c554560981b6044820152606490fd5b141590508980612d25565b60405162461bcd60e51b815260048101899052600f818b01526e1554d1549517d393d517d1561254d5608a1b6044820152606490fd5b90508881813d8311612ef8575b612ee181836132af565b8101031261015057612ef290613734565b8a612d0e565b503d612ed7565b8194612cc3565b88634e487b7160e01b60005260216004526000fd5b3461015057600036600319011261015057612f56612f376132d0565b6108f6612f4261333c565b604051938493604085526040850190613480565b9083820360208501526134cc565b34610150576000366003190112610150578061229f60209260ff600854165b9060038210156101d75752565b90600182811c92168015612fc0575b6020831014612faa57565b634e487b7160e01b600052602260045260246000fd5b91607f1691612f9f565b60025460009291612fda82612f90565b8082529160019081811690811561303f5750600114612ff857505050565b91929350600260005260008051602061533a833981519152916000925b84841061302757505060209250010190565b80546020858501810191909152909301928101613015565b915050602093945060ff929192191683830152151560051b010190565b6003546000929161306c82612f90565b8082529160019081811690811561303f575060011461308a57505050565b91929350600360005260008051602061535a833981519152916000925b8484106130b957505060209250010190565b805460208585018101919091529093019281016130a7565b600f54600092916130e182612f90565b8082529160019081811690811561303f57506001146130ff57505050565b91929350600f6000526000805160206153ba833981519152916000925b84841061312e57505060209250010190565b8054602085850181019190915290930192810161311c565b6010546000929161315682612f90565b8082529160019081811690811561303f575060011461317457505050565b91929350601060005260008051602061539a833981519152916000925b8484106131a357505060209250010190565b80546020858501810191909152909301928101613191565b601154600092916131cb82612f90565b8082529160019081811690811561303f57506001146131e957505050565b91929350601160005260008051602061537a833981519152916000925b84841061321857505060209250010190565b80546020858501810191909152909301928101613206565b606081019081106001600160401b038211176109db57604052565b60c081019081106001600160401b038211176109db57604052565b604081019081106001600160401b038211176109db57604052565b6001600160401b0381116109db57604052565b602081019081106001600160401b038211176109db57604052565b90601f801991011681019081106001600160401b038211176109db57604052565b604051906132dd82613230565b6001546001600160a01b031682526040518290613304816132fd81612fca565b03826132af565b602082015260408051916133228361331b8161305c565b03846132af565b0152565b600511156101d757565b60038210156101d75752565b604090815161334a81613230565b809280516133578161324b565b60045460ff81169060088210156101d75760ff91835260081c1661337a81613326565b602082015260055482820152600654606082015260075460808201526133a860ff6008541660a08301613330565b825280516133b58161324b565b60018060a01b0380600954168252600a54166020820152600b5482820152600c546060820152600d546080820152600e5460a082015260208301528051916133fc83613230565b815161340b816132fd816130d1565b8352815161341c816132fd81613146565b60208401528151613430816132fd816131bb565b828401520152565b60005b83811061344b5750506000910152565b818101518382015260200161343b565b9060209161347481518092818552858086019101613438565b601f01601f1916010190565b6134bc9160018060a01b03825116815260406134ab602084015160606020850152606084019061345b565b92015190604081840391015261345b565b90565b9060088210156101d75752565b9060406134bc9261352060a082516134e58682516134bf565b60208101516134f381613326565b602087015284810151858701526060810151606087015260808101516080870152015160a0850190612f83565b60a06020820151600180831b038082511660c087015260208201511660e08601528381015161010086015260608101516101208601526080810151610140860152015161016084015201519061358c6101a080610180840152606084519184015261020083019061345b565b906101e060406135b060208601519461019f199586868303016101c087015261345b565b940151928285030191015261345b565b606090600319011261015057600435600381101561015057906024356001600160a01b0381168103610150579060443590565b604090600319011261015057600435600381101561015057906024356001600160a01b03811681036101505790565b6001600160401b0381116109db57601f01601f191660200190565b81601f820112156101505780359061365482613622565b9261366260405194856132af565b8284526020838301011161015057816000926020809301838601378301015290565b906134bc916020815260206136a483516040838501526060840190613480565b920151906040601f19828503019101526134cc565b156136c057565b60405162461bcd60e51b815260206004820152600e60248201526d494e56414c49445f53544154555360901b6044820152606490fd5b156136fd57565b60405162461bcd60e51b815260206004820152600f60248201526e14d51052d157d25390d3d4949150d5608a1b6044820152606490fd5b5190811515820361015057565b1561374857565b60405162461bcd60e51b81526020600482015260126024820152712ca7aaafa0a922afaa2422afa9a2a62622a960711b6044820152606490fd5b60088110156101d75760ff801960045416911617600455565b6134bc90602081526040602082015260018060a01b0380600154166060830152606060808301526137e26137d160c08401612fca565b838103605f190160a085015261305c565b916040601f198285030191015260ff600454613800848383166134bf565b60081c1661380d81613326565b602083015260055460408301526006546060830152600754608083015261383d60ff6008541660a0840190612f83565b806009541660c0830152600a541660e0820152600b54610100820152600c54610120820152600d54610140820152600e5461016082015260606101a08061018084015282015261389061020082016130d1565b906101e06138ac61019f199384848203016101c0850152613146565b92828403019101526131bb565b604051906138c68261324b565b8160a06000918281528260208201528260408201528260608201528260808201520152565b6040908151916138fa83613266565b602083825161390881613230565b60008152606083820152606084820152815282519261392684613230565b61392e6138b9565b84526139386138b9565b8385015280519061394882613230565b606082526060848301526060818301528401520152565b1561396657565b60405162461bcd60e51b815260206004820152600b60248201526a2ba927a723afaa27a5a2a760a91b6044820152606490fd5b51906001600160a01b038216820361015057565b81601f820112156101505780516139c381613622565b926139d160405194856132af565b81845260208284010111610150576134bc9160208085019101613438565b604051906139fc82613266565b60048252630307830360e41b6020830152565b60ff6008541660038110156101d75760018103613a95575060155460405163f77800e560e01b815290602090829060049082906001600160a01b03165afa908115610e3057600091613a5f575090565b906020823d8211613a8d575b81613a78602093836132af565b81010312613a8a57506134bc90613999565b80fd5b3d9150613a6b565b600203613ad457601554604051635f117aa360e11b815290602090829060049082906001600160a01b03165afa908115610e3057600091613a5f575090565b600090565b60038110156101d757600052601a60205260406000209060018060a01b031660005260205260406000205490565b15613b0e57565b60405162461bcd60e51b815260206004820152600a6024820152692727aa2fa9a2a62622a960b11b6044820152606490fd5b51906001600160401b038216820361015057565b15613b5b57565b60405162461bcd60e51b815260206004820152601360248201527224a72b20a624a22fa0aa2a22a9aa20aa24a7a760691b6044820152606490fd5b81810292918115918404141715613ba957565b634e487b7160e01b600052601160045260246000fd5b91908203918211613ba957565b90949392606092613be1836080810198612f83565b6001600160a01b0316602083015260408201520152565b919060038310156101d757604092613c7b7ffe2caf3897ec3e02a1d458d232d7c62c17809d25dbfe65864ce842162d6c217c93600090838252601a60205286822060018060a01b03861690818452602052613c568289852054613c81565b978389949287869452601a602052828220908252602052205560405194859485613bcc565b0390a190565b91908201809211613ba957565b60038110156101d7576000818152601a60205260409384822060018060a01b0385169081845260205285832054828110613d195791867f9060f8ffc7acd8270abf2337023e6377669ca44d5b2a23f3513a29380940f35796959492613cf683613c7b96613bbf565b98848a959288879452601a60205282822090825260205220555194859485613bcc565b865162461bcd60e51b8152602060048201526014602482015273125394d551919250d251539517d1115413d4d25560621b6044820152606490fd5b6001600160a01b0390911681526020810191909152606081019291613d7c9160400190612f83565b565b9290600460ff8154166008811015613fd657806002613da69214159081614040575b506136b9565b821561400b576003851015613ff65784158015613dfe575b50507f68ffd6ad89c76c56b0b5206ae0c1a14cbffb37023d4e80f635ff7397c56b116b9250613c7b613df1838387613bf8565b9460405193849384613d54565b6001861460008115613feb575b8115613fc6575b50613e1d915061395f565b613e2685615123565b936001600160a01b039081613e3a88615123565b60408051636eb1769f60e11b81526001600160a01b038516878201908152306020808301919091529a9491938b9385939284900301918391165afa8015610e30578791600091613f96575b5010613f595782916000889460649360405197889687956323b872dd60e01b87521690850152306024850152896044850152165af1908115610e3057600091613efd575b507f68ffd6ad89c76c56b0b5206ae0c1a14cbffb37023d4e80f635ff7397c56b116b9350613ef6906150e5565b3880613dbe565b91929382813d8311613f52575b613f1481836132af565b81010312613a8a575090613ef6613f4c7f68ffd6ad89c76c56b0b5206ae0c1a14cbffb37023d4e80f635ff7397c56b116b9493613734565b90613ec9565b503d613f0a565b60405162461bcd60e51b81528085018890526016602482015275494e53554646494349454e545f414c4c4f57414e434560501b6044820152606490fd5b91508882813d8311613fbf575b613fad81836132af565b81010312613a8a575086905138613e85565b503d613fa3565b9050613fd657613e1d9038613e12565b602182634e487b7160e01b6000525260246000fd5b600288149150613e0b565b602190634e487b7160e01b6000525260246000fd5b60649060206040519162461bcd60e51b8352820152600e60248201526d14d51052d157d49154555254915160921b6044820152fd5b60039150141538613da0565b3d15614077573d9061405d82613622565b9161406b60405193846132af565b82523d6000602084013e565b606090565b1561408357565b60405162461bcd60e51b815260206004820152600b60248201526a10d0531317d1905253115160aa1b6044820152606490fd5b91906140c3828285613c8e565b60155460408051632ee4b68b60e11b815292959092916020916001600160a01b039160049190831684868481845afa95861561435857600096614363575b508483918851928380926318da001160e01b82525afa90811561435857908491600091614321575b5016946142c5576003811015613fd6578061418b575050505083929161416b600080808060008051602061531a83398151915299613c7b975af161164561404c565b516001600160a01b03909216825260208201929092529081906040820190565b90839488926000959495600182149081156142ba575b8115614289575b50956141c16000926141bc6141f29961395f565b615123565b169288519687958694859363a9059cbb60e01b8552840160209093929193604081019460018060a01b031681520152565b03925af191821561427e5760009261422a575b505060008051602061531a833981519152939291614225613c7b926150e5565b61416b565b81819392933d8311614277575b61424181836132af565b81010312613a8a575060008051602061531a83398151915293929161422561426b613c7b93613734565b92508193949550614205565b503d614237565b83513d6000823e3d90fd5b92955050919492506142a55790928492889260006141c16141a8565b602184634e487b7160e01b6000525260246000fd5b6002831491506141a1565b93509150506003821015613ff6575060008051602061531a833981519152939291613c7b916002810361430257506142fc846143b8565b5061416b565b6001810361431457506142fc84614e6a565b614225576142fc8461484f565b91508582813d8311614351575b61433881836132af565b81010312613a8a575061434b8491613999565b38614129565b503d61432e565b87513d6000823e3d90fd5b90958582813d8311614396575b61437a81836132af565b81010312613a8a57508461438e8492613734565b969150614101565b503d614370565b90816020910312610150575162ffffff811681036101505790565b60155460408051635f117aa360e11b8082529094936001600160a01b03936020939260049185908990849082908a165afa9788156148445760009861480d575b50601654845163095ea7b360e01b8082529188166001600160a01b031684820190815260208101869052919990918791839182908b9082906040010392165a90600091f1801561465e576147d9575b50856015541692845191825285828481875afa91821561465e576000926147a2575b5084516325abd85f60e11b808252929087818681895afa9081156143585760009161476d575b508651918883602481633488e95960e21b9a8b825260008b8301525afa92831561471557906144c994939291600093614755575b50614c59565b90866015541690855190815286818581855afa9081156146a257600091614720575b5085519063f77800e560e01b9586835288838781875afa928315614715579089916000946146dc575b506024895180968193825260018a8301525afa9283156143585790614543949392916000936146ad5750614c59565b94806015541697845193808552868585818d5afa9485156146a257908791600096614669575b50848751809c819382525afa98891561465e57600099614617575b5084519081526001600160a01b03989098169188019182526020820186905295969584928792839003604001918391600091165af190811561460d57506145d7575b506145d19150614e6a565b50600190565b82813d8311614606575b6145eb81836132af565b81010312610150576145ff6145d192613734565b50386145c6565b503d6145e1565b513d6000823e3d90fd5b90988682813d8311614657575b61462e81836132af565b81010312613a8a5750916000869492614649899a9b95613999565b9a9950929450929092614584565b503d614624565b85513d6000823e3d90fd5b9182819792973d831161469b575b61468181836132af565b81010312613a8a57506146948791613999565b9438614569565b503d614677565b86513d6000823e3d90fd5b6146ce919350893d8b116146d5575b6146c681836132af565b81019061439d565b91386144c3565b503d6146bc565b9182819592953d831161470e575b6146f481836132af565b81010312613a8a57506147078991613999565b9238614514565b503d6146ea565b88513d6000823e3d90fd5b908782813d831161474e575b61473681836132af565b81010312613a8a575061474890613999565b386144eb565b503d61472c565b6146ce9193508a3d8c116146d5576146c681836132af565b908882813d831161479b575b61478381836132af565b81010312613a8a575061479590613999565b3861448f565b503d614779565b90918682813d83116147d2575b6147b981836132af565b81010312613a8a57506147cb90613999565b9038614469565b503d6147af565b8581813d8311614806575b6147ee81836132af565b81010312610150576147ff90613734565b5038614447565b503d6147e4565b90978582813d831161483d575b61482481836132af565b81010312613a8a575061483690613999565b96386143f8565b503d61481a565b84513d6000823e3d90fd5b906015549160006040918251926325abd85f60e11b958685526020926004958481888160018060a01b038097165afa908115614c04579083918791614c21575b5016803b15614bf95785829188865180948193630d0e30db60e41b83525af18015614c04579087939291614c0e575b508482601554168551988980928d82525afa968715614c04578697614bc9575b50601654845163095ea7b360e01b8082529184166001600160a01b031685820190815260208101849052919890918791839182908b90889083906040010393165af18015614ac557614b95575b5081601554168451998a52858a8581845afa998a15614ac557879a614b5e575b50845163f77800e560e01b8082529a87828781865afa918215614b155788908a93614b1f575b508751633488e95960e21b815260018882015293849060249082905afa928315614b1557916149ab9391879695938b936147555750614c59565b96816015541699868b8751968780928582525afa948515614b0b579087918996614acf575b50848751809d819382525afa998a15614ac557879a614a7b575b5084519081526001600160a01b03999099169189019182526020820187905296979596849287928390036040019183918891165af1908115614a725750614a38575b5050506145d190614e6a565b82813d8311614a6b575b614a4c81836132af565b81010312613a8a575090614a626145d192613734565b50903880614a2c565b503d614a42565b513d84823e3d90fd5b9099508581813d8311614abe575b614a9381836132af565b81010312614aba579186869492614aac8a9b9c95613999565b9b9a509294509290926149ea565b8680fd5b503d614a89565b85513d89823e3d90fd5b8281939297503d8311614b04575b614ae781836132af565b81010312614b0057614af98791613999565b94386149d0565b8780fd5b503d614add565b86513d8a823e3d90fd5b87513d8b823e3d90fd5b80929350813d8311614b57575b614b3681836132af565b81010312614b53579087614b4c60249493613999565b9293614971565b8880fd5b503d614b2c565b9099508581813d8311614b8e575b614b7681836132af565b81010312614aba57614b8790613999565b983861494b565b503d614b6c565b8581813d8311614bc2575b614baa81836132af565b81010312614aba57614bbb90613734565b503861492b565b503d614ba0565b9096508481813d8311614bfd575b614be181836132af565b81010312614bf957614bf290613999565b95386148de565b8580fd5b503d614bd7565b84513d88823e3d90fd5b614c1a90969196613281565b94386148be565b809250868092503d8311614c52575b614c3a81836132af565b81010312614bf957614c4c8391613999565b3861488f565b503d614c30565b601654604051636eb1769f60e11b81523060048201526001600160a01b039182166024820181905293959493929091169190602081604481865afa8015610e30578591600091614e35575b5010614dc9575b50603c420193844211613ba9576016546040516101008101916001600160a01b0316906001600160401b038311818410176109db5760409283529384526001600160a01b03928316602085810191825262ffffff9687168685019081523060608801908152608088019a8b5260a08801998a52600060c0890181815260e08a01828152975163414bf38960e01b81529951891660048b01529451881660248a01529151909816604488015296518516606487015297516084860152955160a4850152945160c4840152511660e482015292918391610104918391905af1908115610e3057600091614d9a575090565b906020823d602011614dc1575b81614db4602093836132af565b81010312613a8a57505190565b3d9150614da7565b60405163095ea7b360e01b8152600481019190915260001960248201526020816044816000865af18015610e305715614cab576020813d602011614e2d575b81614e15602093836132af565b8101031261015057614e2690613734565b5038614cab565b3d9150614e08565b91506020823d602011614e62575b81614e50602093836132af565b81010312613a8a575084905138614ca4565b3d9150614e43565b60155460405163f77800e560e01b81526001600160a01b03916020908290600490829086165afa908115610e3057600091614ee9575b501690813b1561015057600091602483926040519485938492630852cd8d60e31b845260048401525af18015610e3057614eda5750600190565b614ee390613281565b386145d1565b906020823d8211614f1a575b81614f02602093836132af565b81010312613a8a5750614f1490613999565b38614ea0565b3d9150614ef5565b92909160ff6004541660088110156101d757806002614f49921415908161404057506136b9565b60038410156101d75783614fb2576000808084819482908215614fa8575b6001600160a01b031690f115610e30577f4a647b1d902051b0ae802f6050c58456d79d826bdf2bbf37a1bf13be97727b2d915b613c7b613df1838387613c8e565b6108fc9150614f67565b9091908260018514600081156150da575b81156150c8575b509061502192614fdb60209361395f565b6001600160a01b03614fec88615123565b1690600060405180968195829463a9059cbb60e01b84526004840160209093929193604081019460018060a01b031681520152565b03925af1908115610e3057600091615066575b50906150617f4a647b1d902051b0ae802f6050c58456d79d826bdf2bbf37a1bf13be97727b2d93926150e5565b614f9a565b906020823d82116150c0575b8161507f602093836132af565b81010312613a8a5750906150616150b77f4a647b1d902051b0ae802f6050c58456d79d826bdf2bbf37a1bf13be97727b2d9493613734565b91929350615034565b3d9150615072565b9150506101d757826000615021614fca565b600287149150614fc3565b156150ec57565b60405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b6044820152606490fd5b60038110156101d757600281146151785760011461514057600090565b60155460405163f77800e560e01b815290602090829060049082906001600160a01b03165afa908115610e3057600091613a5f575090565b50601554604051635f117aa360e11b815290602090829060049082906001600160a01b03165afa908115610e3057600091613a5f575090565b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008082101561530b575b506d04ee2d6d415b85acef8100000000808310156152fc575b50662386f26fc10000808310156152ed575b506305f5e100808310156152de575b50612710808310156152cf575b5060648210156152bf575b600a809210156152b5575b6001908160218186019561524a87613622565b9661525860405198896132af565b808852615267601f1991613622565b01366020890137860101905b61527f575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a8353049182156152b057919082615273565b615278565b9160010191615237565b919060646002910491019161522c565b60049193920491019138615221565b60089193920491019138615214565b60109193920491019138615205565b602091939204910191386151f3565b6040935081049150386151da56fe659f33fc6677bebf3a9bf3101092792e31f35766d0358e54577bdd91a655f6a0405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acec2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c681b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6728d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802a2646970667358221220e4729c8350ed9965e7cfef223f52992187adb08588ff8b889d947c6a8027a67a64736f6c63430008130033",
  "deployedBytecode": "0x608080604052600436101561001d575b50361561001b57600080fd5b005b60003560e01c908163010a38f514612f645750806305c1f50214612f1b57806307388dba14612c435780630917e77614612bfd57806317906c2e14612bdf5780631d0b4af514612b0f5780633d876d5d146122d15780634c38d877146122a15780634e69d5601461227957806352a6cb4a1461226057806354fd4d50146121565780635ad4e170146121295780635c63ed69146120f9578063729e2eb1146120295780637abe914d14611dca5780638c6838ba14611d7e5780638da5cb5b14611d555780638f287dc2146112d05780638f903c7914610fbc578063d24e0c8714610f9e578063d2af47ab146102a8578063ed70d5d5146101ed578063f2d7dbb6146101555763faeb5e1714610132573861000f565b34610150576000366003190112610150576020600b54604051908152f35b600080fd5b3461015057610163366135f3565b9060ff600854169060038210156101d75760038110156101d75760209261018e6101a093831461395f565b6101983383613ad9565b913390614f22565b6009546001600160a01b039033908216036101c3575080600c555b604051908152f35b600a541633036101bb575b80600b556101bb565b634e487b7160e01b600052602160045260246000fd5b34610150576101fb366135c0565b60ff6008939293541660038110156101d75760038310156101d75761022190831461395f565b81600052601a602052604060002033600052602052806040600020541061027057602092610250923390614f22565b600954336001600160a01b03909116036101ce5780600c55604051908152f35b60405162461bcd60e51b815260206004820152601060248201526f4e4f545f454e4f5547485f5354414b4560801b6044820152606490fd5b610120366003190112610150576004356001600160401b038111610150576102d490369060040161363d565b60056024351015610150576005604435101561015057600360a43510156101505760c4356001600160a01b03811690036101505760e4356001600160a01b0381169003610150576101043515156101043503610150576103326138eb565b506000600160a435148015610f8e575b81908015610f7f575b610355915061395f565b6000546001600160a01b031633036101505760145460405163122643f360e21b81526001600160a01b0360e43581166004830152909160209183916024918391165afa908115610e3057600091610f45575b5015610f0f5760ff6004541660088110156101d75760005260196020526103d560ff604060002054166136b9565b60843515610ed65760643515610ea2576101043515610e3c576101d75760a435600052601a602052604060002060018060a01b0360e4351660005260205261042660843560406000205410156136f6565b6084355b610435604435613326565b60ff6044351660005260186020526040600020549160ff600454169160088310156101d757600092835260196020526040808420805460ff1990811690915560018086527ffc941c3961fb6541da34150022cddf959da0fb2353866a6bfbd249c2da0929148054831682179055600480549092161781556014549151633bcaa1d960e21b81526001600160a01b0360e435811692820192909252949185916024918391165afa928315610e3057600093610d7d575b50604051936104f88561324b565b60018552610507602435613326565b602435602086015242604086015260006060860152608085015261053060a43560a08601613330565b6040519061053d8261324b565b6000825260018060a01b0360e4351660208301526040820152606435606082015260006080820152600060a08201526105746139ef565b61057c6139ef565b906040519361058a85613230565b845260208401526040830152604051936105a385613230565b845260208401526040830152604051916105bc83613266565b81835260208301528051600180546001600160a01b0319166001600160a01b039290921691909117905560208101518051906001600160401b0382116109db57610607600254612f90565b601f8111610d14575b50602090601f8311600114610c9b57604093929160009183610c90575b50508160011b916000199060031b1c1916176002555b01518051906001600160401b0382116109db578190610663600354612f90565b601f8111610c19575b50602090601f8311600114610ba157600092610b96575b50508160011b916000199060031b1c1916176003555b6020810151805180519060088210156101d7576106b760a092613782565b60208101516106c581613326565b6106ce81613326565b61ff006004549160081b169061ff0019161760045560408101516005556060810151600655608081015160075501519060038210156101d75760409160ff80196008541691161760085560a06020820151610748600180841b0382511660018060a01b03166001600160601b0360a01b6009541617600955565b610774600180841b0360208301511660018060a01b03166001600160601b0360a01b600a541617600a55565b83810151600b556060810151600c556080810151600d550151600e5501519081519182516001600160401b0381116109db576107b1600f54612f90565b601f8111610b43575b506020601f8211600114610ad15781929394600092610ac6575b50508160011b916000199060031b1c191617600f555b60208101518051906001600160401b0382116109db5761080b601054612f90565b601f8111610a73575b50602090601f83116001146109fc576040939291600091836109f1575b50508160011b916000199060031b1c1916176010555b0151908151906001600160401b0382116109db576011916108688354612f90565b601f8111610989575b506020601f8211600114610919578192939460009261090e575b50508160011b916000199060031b1c19161782555b6013549160001983146108fa575060016108f692016013557f6e8f9f12846cf7ba30acdd742f3eae58c49befeed93f00d60de3bd4f7d09f223604051806108e78482613684565b0390a160405191829182613684565b0390f35b634e487b7160e01b60005260045260246000fd5b01519050848061088b565b601f198216908460005260008051602061537a8339815191529160005b81811061097157509583600195969710610958575b505050811b0182556108a0565b015160001960f88460031b161c1916905584808061094b565b9192602060018192868b015181550194019201610936565b8360005260008051602061537a833981519152601f830160051c810191602084106109d1575b601f0160051c01905b8181106109c55750610871565b600081556001016109b8565b90915081906109af565b634e487b7160e01b600052604160045260246000fd5b015190508580610831565b90601f19831691601060005260008051602061539a8339815191529260005b818110610a5b5750916001939185604097969410610a42575b505050811b01601055610847565b015160001960f88460031b161c19169055858080610a34565b92936020600181928786015181550195019301610a1b565b601060005260008051602061539a833981519152601f840160051c81019160208510610abc575b601f0160051c01905b818110610ab05750610814565b60008155600101610aa3565b9091508190610a9a565b0151905084806107d4565b601f19821690600f6000526000805160206153ba8339815191529160005b818110610b2b57509583600195969710610b12575b505050811b01600f556107ea565b015160001960f88460031b161c19169055848080610b04565b9192602060018192868b015181550194019201610aef565b600f6000526000805160206153ba833981519152601f830160051c81019160208410610b8c575b601f0160051c01905b818110610b8057506107ba565b60008155600101610b73565b9091508190610b6a565b015190508380610683565b9250600360005260008051602061535a833981519152906000935b601f1984168510610bfe576001945083601f19811610610be5575b505050811b01600355610699565b015160001960f88460031b161c19169055838080610bd7565b81810151835560209485019460019093019290910190610bbc565b9091506003600052601f830160051c60008051602061535a833981519152019060208410610c7a575b90601f8493920160051c60008051602061535a83398151915201905b818110610c6b575061066c565b60008155849350600101610c5e565b60008051602061535a8339815191529150610c42565b01519050858061062d565b90600260005260008051602061533a8339815191529160005b601f1985168110610cfc575091839160019360409695601f19811610610ce3575b505050811b01600255610643565b015160001960f88460031b161c19169055858080610cd5565b91926020600181928685015181550194019201610cb4565b6002600052601f830160051c60008051602061533a8339815191520160208410610d68575b601f820160051c60008051602061533a833981519152018110610d5c5750610610565b60008155600101610d39565b5060008051602061533a833981519152610d39565b9092503d806000833e610d9081836132af565b6020828281010312610150578151916001600160401b03831161015057606083820183830103126101505760405192610dc884613230565b610dd3818301613999565b8452602081830101516001600160401b03811161015057610dfb9084840190838501016139ad565b602085015260408183010151906001600160401b03821161015057610e249383019201016139ad565b604082015291846104ea565b6040513d6000823e3d90fd5b6101d75760a43515610e62575b610e5d60843560c43560e43560a435613d7e565b61042a565b3460843514610e495760405162461bcd60e51b815260206004820152600f60248201526e57524f4e475f4d53475f56414c554560881b6044820152606490fd5b60405162461bcd60e51b815260206004820152600c60248201526b5041594d454e545f5a45524f60a01b6044820152606490fd5b60405162461bcd60e51b81526020600482015260116024820152705354414b455f414d4f554e545f5a45524f60781b6044820152606490fd5b60405162461bcd60e51b815260206004820152600e60248201526d1554d15497d393d517d1561254d560921b6044820152606490fd5b90506020813d602011610f77575b81610f60602093836132af565b8101031261015057610f7190613734565b836103a7565b3d9150610f53565b506101d7578060a4351561034b565b506000905060a435600214610342565b34610150576000366003190112610150576020600c54604051908152f35b3461015057602080600319360112610150576001600160401b039060043582811161015057610fef90369060040161363d565b600a5490916001600160a01b039161100a9083163314613b07565b60ff6004541660088110156101d757806000526019825260ff60406000205416806112bc575b156112885760248284601454166040519283809263122643f360e21b82523360048301525afa908115610e3057600091611253575b50156112185761107c600193339085541614613b07565b6000526019815260406000209260ff1993848154169055600360005260406000208385825416179055600384600454161760045580519485116109db576110c4601054612f90565b601f81116111c3575b5081601f8611600114611151575060039492600092849283611146575b50501b9160001990851b1c1916176010555b600454161760045561111060075442613c81565b6006557f61de5b63673167e253173c50abdc3fd45371dc3205496f46fdb05a9f7927b574604051806111418161379b565b0390a1005b0151925086806110ea565b909491601f19831695601060005260008051602061539a833981519152926000905b8882106111ac5750508360039710611194575b505050811b016010556110fc565b015160001983871b60f8161c19169055848080611186565b808785968294968601518155019501930190611173565b601060005260008051602061539a833981519152601f870160051c81019184881061120e575b601f0160051c019084905b8281106112025750506110cd565b600081550184906111f4565b90915081906111e9565b60405162461bcd60e51b8152600481018390526013602482015272155cd95c88191bd95cc81b9bdd08195e1a5cdd606a1b6044820152606490fd5b90508281813d8311611281575b61126a81836132af565b810103126101505761127b90613734565b86611065565b503d611260565b60405162461bcd60e51b815260048101839052600c60248201526b57524f4e475f53544154555360a01b6044820152606490fd5b506002811480611030575060038114611030565b3461015057606036600319011261015057600435151560043503610150576009546001600160a01b0316611305338214613b07565b60ff6004541660088110156101d757600303611d205760155460405163335ded4b60e21b81526001600160a01b0390911690602081600481855afa908115610e3057600091611ce1575b506040516328c44a9960e21b8152604435600482015290600090829060249082906001600160a01b03165afa908115610e3057600091611bbe575b5060e08101516113a4906001600160a01b03168414613b54565b60c0810151600a546001600160a01b03918216911603611b8557602081810151604051633ec4f23d60e01b81529182600481875afa918215610e3057600092611b51575b5003611b1b5761012001519081518201916060818403126101505761140f60208201613734565b9261141c60408301613999565b916060810151916001600160401b038311610150576114429260208092019201016139ad565b90306001600160a01b0390911603611ae75760405161147f81611471602082019460208652604083019061345b565b03601f1981018352826132af565b519020604051602080820152600f5481600061149a83612f90565b92836040840152600181169081600014611ac85750600114611a7b575b6114ca925003601f1981018352826132af565b6020815191012003611a47576020600491604051928380926318da001160e01b82525afa908115610e3057600091611a0d575b50600c54604051634047e10360e11b81529092906020816004816001600160a01b0387165afa908115610e30576000916119d9575b5061271061154361154b9286613b96565b048094613bbf565b93600654421180156119d0575b15611872575061156f901515600435151514613b54565b600854600954600c546115ad92611592926001600160a01b03169060ff16613c8e565b600854600a549195916001600160a01b03169060ff16613bf8565b9160ff600854166003811015806101d757600182148015918183611864575b81908015611857575b6115df915061395f565b601554604051632ee4b68b60e11b815290602090829060049082906001600160a01b03165afa908115610e305760009161181d575b506117d0576101d757826116e4575061164b9360009384935083925082916001600160a01b03165af161164561404c565b5061407c565b600b55600c55600435156116dd5760045b60ff6004541660088110156101d757600052601960205260406000209060ff199182815416905560088110156101d7576116af9160ff821660005260196020526001604060002091825416179055613782565b7f61de5b63673167e253173c50abdc3fd45371dc3205496f46fdb05a9f7927b574604051806111418161379b565b600561165c565b600090916117c3575b81156117b0575b5092602092916117066117549561395f565b6001600160a01b039061171890615123565b60405163a9059cbb60e01b81526001600160a01b0390931660048401526024830193909352909384929190911690829060009082906044820190565b03925af18015610e3057600090611775575b61177091506150e5565b61164b565b506020813d6020116117a8575b8161178f602093836132af565b81010312610150576117a361177091613734565b611766565b3d9150611782565b90509190916101d75790600060206116f4565b50506002811460006116ed565b9150919293506101d757600282036117f35750506117ed906143b8565b5061164b565b1561180257506117ed90614e6a565b1561180d575061164b565b6118169061484f565b50826117ed565b90506020813d60201161184f575b81611838602093836132af565b810103126101505761184990613734565b89611614565b3d915061182b565b506101d7578084156115d5565b5060009050600284146115cc565b93509150506004351561188157005b611892901515600435151514613b54565b600b546024359081116119955760125491670de0b6b3a76400009283811015611958576005936118c56118d39285613b96565b04809260ff600854166140b6565b600c55600854600a546118f49184916001600160a01b03169060ff166140b6565b600b5560ff199183836004541617600455600d55600e55816000526019602052604060002060018282541617905560045416176004557fb0ec4ef3ee1a79effa677af7a82a3a875b4d438307fb7e589a58966e3b913f2f604051806111418161379b565b60405162461bcd60e51b81526020600482015260156024820152740a0aa9c92a6909a8a9ca8bea482a8929ebe90928e9605b1b6044820152606490fd5b60405162461bcd60e51b81526020600482015260136024820152720a0aa9c92a6909a8a9ca8bea89e9ebe90928e9606b1b6044820152606490fd5b50600435611558565b90506020813d602011611a05575b816119f4602093836132af565b810103126101505751612710611532565b3d91506119e7565b90506020813d602011611a3f575b81611a28602093836132af565b8101031261015057611a3990613999565b836114fd565b3d9150611a1b565b60405162461bcd60e51b815260206004820152600c60248201526b1253959053125117d413d4d560a21b6044820152606490fd5b5090600f6000526000805160206153ba833981519152906000915b818310611aae5750509060606114ca928201016114b7565b805460608487010152849350602090920191600101611a96565b606092506114ca94915060ff191682840152151560051b8201016114b7565b60405162461bcd60e51b815260206004820152600c60248201526b1253959053125117d191515160a21b6044820152606490fd5b60405162461bcd60e51b815260206004820152600e60248201526d494e56414c49445f534348454d4160901b6044820152606490fd5b9091506020813d602011611b7d575b81611b6d602093836132af565b81010312610150575190856113e8565b3d9150611b60565b60405162461bcd60e51b81526020600482015260116024820152701253959053125117d49150d25412515395607a1b6044820152606490fd5b90503d806000833e611bd081836132af565b6020828281010312610150578151906001600160401b0382116101505761014082840182850103126101505760405192836101408101106001600160401b03610140860111176109db57610140840160409081528184018051865260208082015190870152611c3f9101613b40565b6040850152611c52606084830101613b40565b6060850152611c65608084830101613b40565b608085015260a0838201015160a0850152611c8460c084830101613999565b60c0850152611c9760e084830101613999565b60e0850152610100611cac8185840101613734565b9085015261012092838183010151906001600160401b03821161015057611cd79383019201016139ad565b908201528361138a565b90506020813d602011611d18575b81611cfc602093836132af565b81010312610150576000611d11602492613999565b915061134f565b3d9150611cef565b60405162461bcd60e51b815260206004820152600d60248201526c1393d517d4d550935255151151609a1b6044820152606490fd5b34610150576000366003190112610150576000546040516001600160a01b039091168152602090f35b3461015057600036600319011261015057611d976138eb565b506108f6604051611da781613266565b611daf6132d0565b8152611db961333c565b602082015260405191829182613684565b3461015057602080600319360112610150576001600160401b039060043582811161015057611dfd90369060040161363d565b9060ff600454166008811015806101d757816000526019835260ff6040600020541680611fed575b611e2e906136b9565b611e4460018060a01b03600a5416331415613741565b6101d757600403611fb95781519283116109db57611e63601154612f90565b601f8111611f67575b508092601f8111600114611ef85780919293600091611eed575b508160011b916000199060031b1c1916176011555b600660ff1960045416176004557f76c6a8f0836a14a631dc3a45fc0c49d4dd3fc4147167329ba4220ba2664ccaf060405180611ed68161379b565b0390a16108f660405192828493845283019061345b565b905083015184611e86565b601f19811693601160005260008051602061537a8339815191529060005b868110611f50575082600194959610611f37575b5050811b01601155611e9b565b85015160001960f88460031b161c191690558480611f2a565b909184600181928589015181550193019101611f16565b601160005260008051602061537a833981519152601f850160051c810191838610611faf575b601f0160051c01905b818110611fa35750611e6c565b60008155600101611f96565b9091508190611f8d565b6064906040519062461bcd60e51b82526004820152600d60248201526c1393d517d19253905312569151609a1b6044820152fd5b5050600060038214801561201b575b8190801561200c575b9050611e25565b506101d7578060048314612005565b506000905060068214611ffc565b34610150576000366003190112610150576040516000600f5461204b81612f90565b808452906001908181169081156120d25750600114612089575b6108f684612075818603826132af565b60405191829160208352602083019061345b565b600f600090815292506000805160206153ba8339815191525b8284106120ba57505050810160200161207582612065565b805460208587018101919091529093019281016120a2565b60ff191660208087019190915292151560051b850190920192506120759150839050612065565b3461015057600036600319011261015057600854600a546020916101bb916001600160a01b03169060ff16613ad9565b34610150576000366003190112610150576020612144613a0f565b6040516001600160a01b039091168152f35b34610150576000366003190112610150576121907f00000000000000000000000000000000000000000000000000000000000000006151b1565b6121b97f00000000000000000000000000000000000000000000000000000000000000006151b1565b9061224c60226121e87f00000000000000000000000000000000000000000000000000000000000000006151b1565b93604051948591855161220381602098898088019101613438565b830190601760f91b918288820152612224825180938a602185019101613438565b0190602182015261223d82518093888785019101613438565b010360028101855201836132af565b6108f660405192828493845283019061345b565b346101505760206101bb612273366135f3565b90613ad9565b3461015057600036600319011261015057602060ff6004541661229f60405180926134bf565bf35b34610150576000366003190112610150576008546009546020916101bb916001600160a01b03169060ff16613ad9565b3461015057600036600319011261015057600a546001600160a01b03906122fb9082163314613b07565b60ff6004541660088110156101d75760005260206019815261232460ff604060002054166136b9565b61232c6139ef565b6123346139ef565b916040519161234283613230565b600083528183019081526040830193845261244f85604051946123648661324b565b60078652600085870152600060408701526000606087015260006080870152600060a08701526040516123968161324b565b60008152600086820152600060408201526000606082015260006080820152600060a0820152604051906123c982613230565b6040516123d581613294565b6000815282526040516123e781613294565b60008152878301526040516123fb81613294565b6000815260408301526040519761241189613230565b88528688015260408701528460405161242981613266565b82815201958652511660018060a01b03166001600160601b0360a01b6001541617600155565b51908151936001600160401b03948581116109db5780612470600254612f90565b94601f95868111612ab4575b508490868311600114612a4057600092612a35575b50508160011b916000199060031b1c1916176002555b519283518581116109db57806003956124c08754612f90565b8681116129db575b50849086831160011461296b57600092612960575b50508160011b9160001990871b1c19161784555b5194855195865160088110156101d75761250a90613782565b8287015161251781613326565b61252081613326565b61ff006004549160081b169061ff0019161760045560a06040880151976005988955606081015160065560808101516007550151858110156101d75760409260a09160ff8019600854169116176008556125be858401519161259c8184511660018060a01b03166001600160601b0360a01b6009541617600955565b868301511660018060a01b03166001600160601b0360a01b600a541617600a55565b83810151600b556060810151600c556080810151600d550151600e55015180518051908682116109db5781906125f5600f54612f90565b868111612907575b50849086831160011461289457600092612889575b50508160011b9160001990871b1c191617600f555b818101518051908682116109db57612640601054612f90565b85811161283c575b5083908583116001146127c6576040939291600091836127bb575b50508160011b9160001990881b1c1916176010555b01519485519485116109db5761268f601154612f90565b90838211612772575b5050809184116001146126fd575082936000936126f2575b50508260011b92600019911b1c1916176011555b7f88c430102eab5dbc235ca367ecd5ffa63164bb311015524ecebed009d4d4b5b6604051806111418161379b565b0151915083806126b0565b9190601f19841694601160005260008051602061537a833981519152936000905b87821061275a5750508460019610612740575b50505050811b016011556126c4565b01519060f884600019921b161c1916905582808080612731565b8060018597829496860151815501960193019061271e565b601160005260008051602061537a8339815191529084808801821c8301938589106127b2575b01901c01905b81811015612698576000815560010161279e565b93508293612798565b015190508980612663565b90601f19831691601060005260008051602061539a8339815191529260005b8782821061282657505091600193918560409796941061280e575b505050811b01601055612678565b0151600019838a1b60f8161c19169055898080612800565b60018596829396860151815501950193016127e5565b601060005260008051602061539a833981519152868085018b1c820192878610612880575b018a1c01905b8181106128745750612648565b60008155600101612867565b92508192612861565b015190508880612612565b600f60009081526000805160206153ba8339815191529350601f198516905b878282106128f15750509084600195949392106128d9575b505050811b01600f55612627565b015160001983891b60f8161c191690558880806128cb565b60018596829396860151815501950193016128b3565b909150600f6000526000805160206153ba833981519152868085018b1c820192878610612957575b908594939291018b1c01905b81811061294857506125fd565b6000815584935060010161293b565b9250819261292f565b0151905088806124dd565b600088815260008051602061535a8339815191529350601f198516905b878282106129c55750509084600195949392106129ad575b505050811b0184556124f1565b015160001983891b60f8161c191690558880806129a0565b6001859682939686015181550195019301612988565b9091508660005260008051602061535a8339815191528680850160051c820192878610612a2c575b9085949392910160051c01905b818110612a1d57506124c8565b60008155849350600101612a10565b92508192612a03565b015190508880612491565b6002600090815260008051602061533a8339815191529350601f198516905b87828210612a9e575050908460019594939210612a85575b505050811b016002556124a7565b015160001960f88460031b161c19169055888080612a77565b6001859682939686015181550195019301612a5f565b909150600260005260008051602061533a8339815191528680850160051c820192878610612b06575b9085949392910160051c01905b818110612af7575061247c565b60008155849350600101612aea565b92508192612add565b612b18366135c0565b60ff6008939293541660038110156101d75760038310156101d757612b3e90831461395f565b6009546001600160a01b039290831633148015612bd2575b15612b9b57602093612b7b9284600a54163314600014612b95575034915b3390613d7e565b906009541633146000146101ce5780600c55604051908152f35b91612b74565b60405162461bcd60e51b815260206004820152600f60248201526e2ba927a723afa6a9a3a9a2a72222a960891b6044820152606490fd5b5082600a54163314612b56565b34610150576000366003190112610150576020601354604051908152f35b346101505760003660031901126101505760206101bb60ff60085416612c3d60018060a01b0391612c3283600a541682613ad9565b926009541690613ad9565b90613c81565b6080366003190112610150576004356003811015610150576024908135906001600160a01b03604435818116810361015057606435928284169485850361015057600160005260209560198752612ca160ff604060002054166136b9565b60ff600854166003811015612f0657612cbb90841461395f565b82612eff5734945b888882600a541692612ce2612cd88589613ad9565b600b5411156136f6565b601454166040519283809263122643f360e21b82528760048301525afa908115610e3057600091612eca575b5015612e94579081612d2c92331491821592612e89575b5050613741565b600c54908115612e015710612dc8576002955091612d4f9184612d6f9594613d7e565b600c5560018060a01b03166001600160601b0360a01b6009541617600955565b601960ff1991838360045416176004558360005252604060002060018282541617905560045416176004557f909d9218f6e1f243c7d9044544c7b03e2e7db27d81653992e9018b8b72f4c20d604051806111418161379b565b60405162461bcd60e51b815260048101869052601281880152711393d517d15393d551d217d410565351539560721b6044820152606490fd5b90503415612e555715612e22576002955091612d4f9184612d6f9594613d7e565b60405162461bcd60e51b815260048101869052600c818801526b16915493d7d410565351539560a21b6044820152606490fd5b60405162461bcd60e51b815260048101879052600d818901526c5a45524f5f4d534756414c554560981b6044820152606490fd5b141590508980612d25565b60405162461bcd60e51b815260048101899052600f818b01526e1554d1549517d393d517d1561254d5608a1b6044820152606490fd5b90508881813d8311612ef8575b612ee181836132af565b8101031261015057612ef290613734565b8a612d0e565b503d612ed7565b8194612cc3565b88634e487b7160e01b60005260216004526000fd5b3461015057600036600319011261015057612f56612f376132d0565b6108f6612f4261333c565b604051938493604085526040850190613480565b9083820360208501526134cc565b34610150576000366003190112610150578061229f60209260ff600854165b9060038210156101d75752565b90600182811c92168015612fc0575b6020831014612faa57565b634e487b7160e01b600052602260045260246000fd5b91607f1691612f9f565b60025460009291612fda82612f90565b8082529160019081811690811561303f5750600114612ff857505050565b91929350600260005260008051602061533a833981519152916000925b84841061302757505060209250010190565b80546020858501810191909152909301928101613015565b915050602093945060ff929192191683830152151560051b010190565b6003546000929161306c82612f90565b8082529160019081811690811561303f575060011461308a57505050565b91929350600360005260008051602061535a833981519152916000925b8484106130b957505060209250010190565b805460208585018101919091529093019281016130a7565b600f54600092916130e182612f90565b8082529160019081811690811561303f57506001146130ff57505050565b91929350600f6000526000805160206153ba833981519152916000925b84841061312e57505060209250010190565b8054602085850181019190915290930192810161311c565b6010546000929161315682612f90565b8082529160019081811690811561303f575060011461317457505050565b91929350601060005260008051602061539a833981519152916000925b8484106131a357505060209250010190565b80546020858501810191909152909301928101613191565b601154600092916131cb82612f90565b8082529160019081811690811561303f57506001146131e957505050565b91929350601160005260008051602061537a833981519152916000925b84841061321857505060209250010190565b80546020858501810191909152909301928101613206565b606081019081106001600160401b038211176109db57604052565b60c081019081106001600160401b038211176109db57604052565b604081019081106001600160401b038211176109db57604052565b6001600160401b0381116109db57604052565b602081019081106001600160401b038211176109db57604052565b90601f801991011681019081106001600160401b038211176109db57604052565b604051906132dd82613230565b6001546001600160a01b031682526040518290613304816132fd81612fca565b03826132af565b602082015260408051916133228361331b8161305c565b03846132af565b0152565b600511156101d757565b60038210156101d75752565b604090815161334a81613230565b809280516133578161324b565b60045460ff81169060088210156101d75760ff91835260081c1661337a81613326565b602082015260055482820152600654606082015260075460808201526133a860ff6008541660a08301613330565b825280516133b58161324b565b60018060a01b0380600954168252600a54166020820152600b5482820152600c546060820152600d546080820152600e5460a082015260208301528051916133fc83613230565b815161340b816132fd816130d1565b8352815161341c816132fd81613146565b60208401528151613430816132fd816131bb565b828401520152565b60005b83811061344b5750506000910152565b818101518382015260200161343b565b9060209161347481518092818552858086019101613438565b601f01601f1916010190565b6134bc9160018060a01b03825116815260406134ab602084015160606020850152606084019061345b565b92015190604081840391015261345b565b90565b9060088210156101d75752565b9060406134bc9261352060a082516134e58682516134bf565b60208101516134f381613326565b602087015284810151858701526060810151606087015260808101516080870152015160a0850190612f83565b60a06020820151600180831b038082511660c087015260208201511660e08601528381015161010086015260608101516101208601526080810151610140860152015161016084015201519061358c6101a080610180840152606084519184015261020083019061345b565b906101e060406135b060208601519461019f199586868303016101c087015261345b565b940151928285030191015261345b565b606090600319011261015057600435600381101561015057906024356001600160a01b0381168103610150579060443590565b604090600319011261015057600435600381101561015057906024356001600160a01b03811681036101505790565b6001600160401b0381116109db57601f01601f191660200190565b81601f820112156101505780359061365482613622565b9261366260405194856132af565b8284526020838301011161015057816000926020809301838601378301015290565b906134bc916020815260206136a483516040838501526060840190613480565b920151906040601f19828503019101526134cc565b156136c057565b60405162461bcd60e51b815260206004820152600e60248201526d494e56414c49445f53544154555360901b6044820152606490fd5b156136fd57565b60405162461bcd60e51b815260206004820152600f60248201526e14d51052d157d25390d3d4949150d5608a1b6044820152606490fd5b5190811515820361015057565b1561374857565b60405162461bcd60e51b81526020600482015260126024820152712ca7aaafa0a922afaa2422afa9a2a62622a960711b6044820152606490fd5b60088110156101d75760ff801960045416911617600455565b6134bc90602081526040602082015260018060a01b0380600154166060830152606060808301526137e26137d160c08401612fca565b838103605f190160a085015261305c565b916040601f198285030191015260ff600454613800848383166134bf565b60081c1661380d81613326565b602083015260055460408301526006546060830152600754608083015261383d60ff6008541660a0840190612f83565b806009541660c0830152600a541660e0820152600b54610100820152600c54610120820152600d54610140820152600e5461016082015260606101a08061018084015282015261389061020082016130d1565b906101e06138ac61019f199384848203016101c0850152613146565b92828403019101526131bb565b604051906138c68261324b565b8160a06000918281528260208201528260408201528260608201528260808201520152565b6040908151916138fa83613266565b602083825161390881613230565b60008152606083820152606084820152815282519261392684613230565b61392e6138b9565b84526139386138b9565b8385015280519061394882613230565b606082526060848301526060818301528401520152565b1561396657565b60405162461bcd60e51b815260206004820152600b60248201526a2ba927a723afaa27a5a2a760a91b6044820152606490fd5b51906001600160a01b038216820361015057565b81601f820112156101505780516139c381613622565b926139d160405194856132af565b81845260208284010111610150576134bc9160208085019101613438565b604051906139fc82613266565b60048252630307830360e41b6020830152565b60ff6008541660038110156101d75760018103613a95575060155460405163f77800e560e01b815290602090829060049082906001600160a01b03165afa908115610e3057600091613a5f575090565b906020823d8211613a8d575b81613a78602093836132af565b81010312613a8a57506134bc90613999565b80fd5b3d9150613a6b565b600203613ad457601554604051635f117aa360e11b815290602090829060049082906001600160a01b03165afa908115610e3057600091613a5f575090565b600090565b60038110156101d757600052601a60205260406000209060018060a01b031660005260205260406000205490565b15613b0e57565b60405162461bcd60e51b815260206004820152600a6024820152692727aa2fa9a2a62622a960b11b6044820152606490fd5b51906001600160401b038216820361015057565b15613b5b57565b60405162461bcd60e51b815260206004820152601360248201527224a72b20a624a22fa0aa2a22a9aa20aa24a7a760691b6044820152606490fd5b81810292918115918404141715613ba957565b634e487b7160e01b600052601160045260246000fd5b91908203918211613ba957565b90949392606092613be1836080810198612f83565b6001600160a01b0316602083015260408201520152565b919060038310156101d757604092613c7b7ffe2caf3897ec3e02a1d458d232d7c62c17809d25dbfe65864ce842162d6c217c93600090838252601a60205286822060018060a01b03861690818452602052613c568289852054613c81565b978389949287869452601a602052828220908252602052205560405194859485613bcc565b0390a190565b91908201809211613ba957565b60038110156101d7576000818152601a60205260409384822060018060a01b0385169081845260205285832054828110613d195791867f9060f8ffc7acd8270abf2337023e6377669ca44d5b2a23f3513a29380940f35796959492613cf683613c7b96613bbf565b98848a959288879452601a60205282822090825260205220555194859485613bcc565b865162461bcd60e51b8152602060048201526014602482015273125394d551919250d251539517d1115413d4d25560621b6044820152606490fd5b6001600160a01b0390911681526020810191909152606081019291613d7c9160400190612f83565b565b9290600460ff8154166008811015613fd657806002613da69214159081614040575b506136b9565b821561400b576003851015613ff65784158015613dfe575b50507f68ffd6ad89c76c56b0b5206ae0c1a14cbffb37023d4e80f635ff7397c56b116b9250613c7b613df1838387613bf8565b9460405193849384613d54565b6001861460008115613feb575b8115613fc6575b50613e1d915061395f565b613e2685615123565b936001600160a01b039081613e3a88615123565b60408051636eb1769f60e11b81526001600160a01b038516878201908152306020808301919091529a9491938b9385939284900301918391165afa8015610e30578791600091613f96575b5010613f595782916000889460649360405197889687956323b872dd60e01b87521690850152306024850152896044850152165af1908115610e3057600091613efd575b507f68ffd6ad89c76c56b0b5206ae0c1a14cbffb37023d4e80f635ff7397c56b116b9350613ef6906150e5565b3880613dbe565b91929382813d8311613f52575b613f1481836132af565b81010312613a8a575090613ef6613f4c7f68ffd6ad89c76c56b0b5206ae0c1a14cbffb37023d4e80f635ff7397c56b116b9493613734565b90613ec9565b503d613f0a565b60405162461bcd60e51b81528085018890526016602482015275494e53554646494349454e545f414c4c4f57414e434560501b6044820152606490fd5b91508882813d8311613fbf575b613fad81836132af565b81010312613a8a575086905138613e85565b503d613fa3565b9050613fd657613e1d9038613e12565b602182634e487b7160e01b6000525260246000fd5b600288149150613e0b565b602190634e487b7160e01b6000525260246000fd5b60649060206040519162461bcd60e51b8352820152600e60248201526d14d51052d157d49154555254915160921b6044820152fd5b60039150141538613da0565b3d15614077573d9061405d82613622565b9161406b60405193846132af565b82523d6000602084013e565b606090565b1561408357565b60405162461bcd60e51b815260206004820152600b60248201526a10d0531317d1905253115160aa1b6044820152606490fd5b91906140c3828285613c8e565b60155460408051632ee4b68b60e11b815292959092916020916001600160a01b039160049190831684868481845afa95861561435857600096614363575b508483918851928380926318da001160e01b82525afa90811561435857908491600091614321575b5016946142c5576003811015613fd6578061418b575050505083929161416b600080808060008051602061531a83398151915299613c7b975af161164561404c565b516001600160a01b03909216825260208201929092529081906040820190565b90839488926000959495600182149081156142ba575b8115614289575b50956141c16000926141bc6141f29961395f565b615123565b169288519687958694859363a9059cbb60e01b8552840160209093929193604081019460018060a01b031681520152565b03925af191821561427e5760009261422a575b505060008051602061531a833981519152939291614225613c7b926150e5565b61416b565b81819392933d8311614277575b61424181836132af565b81010312613a8a575060008051602061531a83398151915293929161422561426b613c7b93613734565b92508193949550614205565b503d614237565b83513d6000823e3d90fd5b92955050919492506142a55790928492889260006141c16141a8565b602184634e487b7160e01b6000525260246000fd5b6002831491506141a1565b93509150506003821015613ff6575060008051602061531a833981519152939291613c7b916002810361430257506142fc846143b8565b5061416b565b6001810361431457506142fc84614e6a565b614225576142fc8461484f565b91508582813d8311614351575b61433881836132af565b81010312613a8a575061434b8491613999565b38614129565b503d61432e565b87513d6000823e3d90fd5b90958582813d8311614396575b61437a81836132af565b81010312613a8a57508461438e8492613734565b969150614101565b503d614370565b90816020910312610150575162ffffff811681036101505790565b60155460408051635f117aa360e11b8082529094936001600160a01b03936020939260049185908990849082908a165afa9788156148445760009861480d575b50601654845163095ea7b360e01b8082529188166001600160a01b031684820190815260208101869052919990918791839182908b9082906040010392165a90600091f1801561465e576147d9575b50856015541692845191825285828481875afa91821561465e576000926147a2575b5084516325abd85f60e11b808252929087818681895afa9081156143585760009161476d575b508651918883602481633488e95960e21b9a8b825260008b8301525afa92831561471557906144c994939291600093614755575b50614c59565b90866015541690855190815286818581855afa9081156146a257600091614720575b5085519063f77800e560e01b9586835288838781875afa928315614715579089916000946146dc575b506024895180968193825260018a8301525afa9283156143585790614543949392916000936146ad5750614c59565b94806015541697845193808552868585818d5afa9485156146a257908791600096614669575b50848751809c819382525afa98891561465e57600099614617575b5084519081526001600160a01b03989098169188019182526020820186905295969584928792839003604001918391600091165af190811561460d57506145d7575b506145d19150614e6a565b50600190565b82813d8311614606575b6145eb81836132af565b81010312610150576145ff6145d192613734565b50386145c6565b503d6145e1565b513d6000823e3d90fd5b90988682813d8311614657575b61462e81836132af565b81010312613a8a5750916000869492614649899a9b95613999565b9a9950929450929092614584565b503d614624565b85513d6000823e3d90fd5b9182819792973d831161469b575b61468181836132af565b81010312613a8a57506146948791613999565b9438614569565b503d614677565b86513d6000823e3d90fd5b6146ce919350893d8b116146d5575b6146c681836132af565b81019061439d565b91386144c3565b503d6146bc565b9182819592953d831161470e575b6146f481836132af565b81010312613a8a57506147078991613999565b9238614514565b503d6146ea565b88513d6000823e3d90fd5b908782813d831161474e575b61473681836132af565b81010312613a8a575061474890613999565b386144eb565b503d61472c565b6146ce9193508a3d8c116146d5576146c681836132af565b908882813d831161479b575b61478381836132af565b81010312613a8a575061479590613999565b3861448f565b503d614779565b90918682813d83116147d2575b6147b981836132af565b81010312613a8a57506147cb90613999565b9038614469565b503d6147af565b8581813d8311614806575b6147ee81836132af565b81010312610150576147ff90613734565b5038614447565b503d6147e4565b90978582813d831161483d575b61482481836132af565b81010312613a8a575061483690613999565b96386143f8565b503d61481a565b84513d6000823e3d90fd5b906015549160006040918251926325abd85f60e11b958685526020926004958481888160018060a01b038097165afa908115614c04579083918791614c21575b5016803b15614bf95785829188865180948193630d0e30db60e41b83525af18015614c04579087939291614c0e575b508482601554168551988980928d82525afa968715614c04578697614bc9575b50601654845163095ea7b360e01b8082529184166001600160a01b031685820190815260208101849052919890918791839182908b90889083906040010393165af18015614ac557614b95575b5081601554168451998a52858a8581845afa998a15614ac557879a614b5e575b50845163f77800e560e01b8082529a87828781865afa918215614b155788908a93614b1f575b508751633488e95960e21b815260018882015293849060249082905afa928315614b1557916149ab9391879695938b936147555750614c59565b96816015541699868b8751968780928582525afa948515614b0b579087918996614acf575b50848751809d819382525afa998a15614ac557879a614a7b575b5084519081526001600160a01b03999099169189019182526020820187905296979596849287928390036040019183918891165af1908115614a725750614a38575b5050506145d190614e6a565b82813d8311614a6b575b614a4c81836132af565b81010312613a8a575090614a626145d192613734565b50903880614a2c565b503d614a42565b513d84823e3d90fd5b9099508581813d8311614abe575b614a9381836132af565b81010312614aba579186869492614aac8a9b9c95613999565b9b9a509294509290926149ea565b8680fd5b503d614a89565b85513d89823e3d90fd5b8281939297503d8311614b04575b614ae781836132af565b81010312614b0057614af98791613999565b94386149d0565b8780fd5b503d614add565b86513d8a823e3d90fd5b87513d8b823e3d90fd5b80929350813d8311614b57575b614b3681836132af565b81010312614b53579087614b4c60249493613999565b9293614971565b8880fd5b503d614b2c565b9099508581813d8311614b8e575b614b7681836132af565b81010312614aba57614b8790613999565b983861494b565b503d614b6c565b8581813d8311614bc2575b614baa81836132af565b81010312614aba57614bbb90613734565b503861492b565b503d614ba0565b9096508481813d8311614bfd575b614be181836132af565b81010312614bf957614bf290613999565b95386148de565b8580fd5b503d614bd7565b84513d88823e3d90fd5b614c1a90969196613281565b94386148be565b809250868092503d8311614c52575b614c3a81836132af565b81010312614bf957614c4c8391613999565b3861488f565b503d614c30565b601654604051636eb1769f60e11b81523060048201526001600160a01b039182166024820181905293959493929091169190602081604481865afa8015610e30578591600091614e35575b5010614dc9575b50603c420193844211613ba9576016546040516101008101916001600160a01b0316906001600160401b038311818410176109db5760409283529384526001600160a01b03928316602085810191825262ffffff9687168685019081523060608801908152608088019a8b5260a08801998a52600060c0890181815260e08a01828152975163414bf38960e01b81529951891660048b01529451881660248a01529151909816604488015296518516606487015297516084860152955160a4850152945160c4840152511660e482015292918391610104918391905af1908115610e3057600091614d9a575090565b906020823d602011614dc1575b81614db4602093836132af565b81010312613a8a57505190565b3d9150614da7565b60405163095ea7b360e01b8152600481019190915260001960248201526020816044816000865af18015610e305715614cab576020813d602011614e2d575b81614e15602093836132af565b8101031261015057614e2690613734565b5038614cab565b3d9150614e08565b91506020823d602011614e62575b81614e50602093836132af565b81010312613a8a575084905138614ca4565b3d9150614e43565b60155460405163f77800e560e01b81526001600160a01b03916020908290600490829086165afa908115610e3057600091614ee9575b501690813b1561015057600091602483926040519485938492630852cd8d60e31b845260048401525af18015610e3057614eda5750600190565b614ee390613281565b386145d1565b906020823d8211614f1a575b81614f02602093836132af565b81010312613a8a5750614f1490613999565b38614ea0565b3d9150614ef5565b92909160ff6004541660088110156101d757806002614f49921415908161404057506136b9565b60038410156101d75783614fb2576000808084819482908215614fa8575b6001600160a01b031690f115610e30577f4a647b1d902051b0ae802f6050c58456d79d826bdf2bbf37a1bf13be97727b2d915b613c7b613df1838387613c8e565b6108fc9150614f67565b9091908260018514600081156150da575b81156150c8575b509061502192614fdb60209361395f565b6001600160a01b03614fec88615123565b1690600060405180968195829463a9059cbb60e01b84526004840160209093929193604081019460018060a01b031681520152565b03925af1908115610e3057600091615066575b50906150617f4a647b1d902051b0ae802f6050c58456d79d826bdf2bbf37a1bf13be97727b2d93926150e5565b614f9a565b906020823d82116150c0575b8161507f602093836132af565b81010312613a8a5750906150616150b77f4a647b1d902051b0ae802f6050c58456d79d826bdf2bbf37a1bf13be97727b2d9493613734565b91929350615034565b3d9150615072565b9150506101d757826000615021614fca565b600287149150614fc3565b156150ec57565b60405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b6044820152606490fd5b60038110156101d757600281146151785760011461514057600090565b60155460405163f77800e560e01b815290602090829060049082906001600160a01b03165afa908115610e3057600091613a5f575090565b50601554604051635f117aa360e11b815290602090829060049082906001600160a01b03165afa908115610e3057600091613a5f575090565b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008082101561530b575b506d04ee2d6d415b85acef8100000000808310156152fc575b50662386f26fc10000808310156152ed575b506305f5e100808310156152de575b50612710808310156152cf575b5060648210156152bf575b600a809210156152b5575b6001908160218186019561524a87613622565b9661525860405198896132af565b808852615267601f1991613622565b01366020890137860101905b61527f575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a8353049182156152b057919082615273565b615278565b9160010191615237565b919060646002910491019161522c565b60049193920491019138615221565b60089193920491019138615214565b60109193920491019138615205565b602091939204910191386151f3565b6040935081049150386151da56fe659f33fc6677bebf3a9bf3101092792e31f35766d0358e54577bdd91a655f6a0405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acec2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c681b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6728d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802a2646970667358221220e4729c8350ed9965e7cfef223f52992187adb08588ff8b889d947c6a8027a67a64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "version()": {
        "returns": {
          "_0": "Semver contract version as a string."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "version()": {
        "notice": "Returns the full semver contract version."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3523,
        "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3526,
        "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
        "label": "post",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Post)2574_storage"
      },
      {
        "astId": 3529,
        "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
        "label": "settings",
        "offset": 0,
        "slot": "18",
        "type": "t_struct(FeedSettings)2550_storage"
      },
      {
        "astId": 3533,
        "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
        "label": "postDurationToDays",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_uint8,t_uint256)"
      },
      {
        "astId": 3537,
        "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
        "label": "validStatuses",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_uint8,t_bool)"
      },
      {
        "astId": 3871,
        "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
        "label": "_deposit",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_enum(PostStatus)2521": {
        "encoding": "inplace",
        "label": "enum Structures.PostStatus",
        "numberOfBytes": "1"
      },
      "t_enum(PostType)2531": {
        "encoding": "inplace",
        "label": "enum Structures.PostType",
        "numberOfBytes": "1"
      },
      "t_enum(Tokens)2525": {
        "encoding": "inplace",
        "label": "enum Structures.Tokens",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint8,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint8,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(FeedSettings)2550_storage": {
        "encoding": "inplace",
        "label": "struct Structures.FeedSettings",
        "members": [
          {
            "astId": 2539,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "punishmentRatio",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2541,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "postCount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2543,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "usersModuleContract",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 2545,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "factoryContract",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 2547,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "router",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 2549,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "version",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Post)2574_storage": {
        "encoding": "inplace",
        "label": "struct Structures.Post",
        "members": [
          {
            "astId": 2570,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "creator",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(User)2627_storage"
          },
          {
            "astId": 2573,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "postdata",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(PostData)2584_storage"
          }
        ],
        "numberOfBytes": "544"
      },
      "t_struct(PostData)2584_storage": {
        "encoding": "inplace",
        "label": "struct Structures.PostData",
        "members": [
          {
            "astId": 2577,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "settings",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(PostSettings)2607_storage"
          },
          {
            "astId": 2580,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "escrow",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(PostEscrow)2620_storage"
          },
          {
            "astId": 2583,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "data",
            "offset": 0,
            "slot": "11",
            "type": "t_struct(PostEncryptedData)2591_storage"
          }
        ],
        "numberOfBytes": "448"
      },
      "t_struct(PostEncryptedData)2591_storage": {
        "encoding": "inplace",
        "label": "struct Structures.PostEncryptedData",
        "members": [
          {
            "astId": 2586,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "encryptedData",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes_storage"
          },
          {
            "astId": 2588,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "encryptedKey",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes_storage"
          },
          {
            "astId": 2590,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "decryptedData",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(PostEscrow)2620_storage": {
        "encoding": "inplace",
        "label": "struct Structures.PostEscrow",
        "members": [
          {
            "astId": 2609,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "buyer",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2611,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "seller",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2613,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "stake",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2615,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "payment",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2617,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "punishment",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2619,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "penalty",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(PostSettings)2607_storage": {
        "encoding": "inplace",
        "label": "struct Structures.PostSettings",
        "members": [
          {
            "astId": 2594,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(PostStatus)2521"
          },
          {
            "astId": 2597,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "postType",
            "offset": 1,
            "slot": "0",
            "type": "t_enum(PostType)2531"
          },
          {
            "astId": 2599,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "creationTimeStamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2601,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "endTimeStamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2603,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "duration",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2606,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "tokenId",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(Tokens)2525"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(User)2627_storage": {
        "encoding": "inplace",
        "label": "struct Structures.User",
        "members": [
          {
            "astId": 2622,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "evmAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2624,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "sismoVaultId",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes_storage"
          },
          {
            "astId": 2626,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "publicKey",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}