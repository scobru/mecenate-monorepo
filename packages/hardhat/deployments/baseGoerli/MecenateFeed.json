{
  "address": "0xC7da9C8C8e76010fbD6d717CFf6b050CA913104c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_owner",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_usersModuleContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_verifierContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factoryContract",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_version",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "vaultId",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct Structures.User",
              "name": "creator",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum Structures.PostStatus",
                      "name": "status",
                      "type": "uint8"
                    },
                    {
                      "internalType": "enum Structures.PostType",
                      "name": "postType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "creationTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "duration",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum Structures.Tokens",
                      "name": "tokenId",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct Structures.PostSettings",
                  "name": "settings",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "stake",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "payment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "punishment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "penalty",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structures.PostEscrow",
                  "name": "escrow",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes",
                      "name": "encryptedData",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "encryptedKey",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "decryptedData",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Structures.PostEncryptedData",
                  "name": "data",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Structures.PostData",
              "name": "postdata",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct Structures.Post",
          "name": "post",
          "type": "tuple"
        }
      ],
      "name": "Accepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "vaultId",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct Structures.User",
              "name": "creator",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum Structures.PostStatus",
                      "name": "status",
                      "type": "uint8"
                    },
                    {
                      "internalType": "enum Structures.PostType",
                      "name": "postType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "creationTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "duration",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum Structures.Tokens",
                      "name": "tokenId",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct Structures.PostSettings",
                  "name": "settings",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "stake",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "payment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "punishment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "penalty",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structures.PostEscrow",
                  "name": "escrow",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes",
                      "name": "encryptedData",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "encryptedKey",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "decryptedData",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Structures.PostEncryptedData",
                  "name": "data",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Structures.PostData",
              "name": "postdata",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct Structures.Post",
          "name": "post",
          "type": "tuple"
        }
      ],
      "name": "Created",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum Structures.Tokens",
          "name": "tokenID",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "user",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDeposit",
          "type": "uint256"
        }
      ],
      "name": "DepositDecreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum Structures.Tokens",
          "name": "tokenID",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "user",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDeposit",
          "type": "uint256"
        }
      ],
      "name": "DepositIncreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "vaultId",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct Structures.User",
              "name": "creator",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum Structures.PostStatus",
                      "name": "status",
                      "type": "uint8"
                    },
                    {
                      "internalType": "enum Structures.PostType",
                      "name": "postType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "creationTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "duration",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum Structures.Tokens",
                      "name": "tokenId",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct Structures.PostSettings",
                  "name": "settings",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "stake",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "payment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "punishment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "penalty",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structures.PostEscrow",
                  "name": "escrow",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes",
                      "name": "encryptedData",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "encryptedKey",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "decryptedData",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Structures.PostEncryptedData",
                  "name": "data",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Structures.PostData",
              "name": "postdata",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct Structures.Post",
          "name": "post",
          "type": "tuple"
        }
      ],
      "name": "Finalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "vaultId",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct Structures.User",
              "name": "creator",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum Structures.PostStatus",
                      "name": "status",
                      "type": "uint8"
                    },
                    {
                      "internalType": "enum Structures.PostType",
                      "name": "postType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "creationTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "duration",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum Structures.Tokens",
                      "name": "tokenId",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct Structures.PostSettings",
                  "name": "settings",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "stake",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "payment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "punishment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "penalty",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structures.PostEscrow",
                  "name": "escrow",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes",
                      "name": "encryptedData",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "encryptedKey",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "decryptedData",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Structures.PostEncryptedData",
                  "name": "data",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Structures.PostData",
              "name": "postdata",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct Structures.Post",
          "name": "post",
          "type": "tuple"
        }
      ],
      "name": "Invalid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "vaultId",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct Structures.User",
              "name": "creator",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum Structures.PostStatus",
                      "name": "status",
                      "type": "uint8"
                    },
                    {
                      "internalType": "enum Structures.PostType",
                      "name": "postType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "creationTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "duration",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum Structures.Tokens",
                      "name": "tokenId",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct Structures.PostSettings",
                  "name": "settings",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "stake",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "payment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "punishment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "penalty",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structures.PostEscrow",
                  "name": "escrow",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes",
                      "name": "encryptedData",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "encryptedKey",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "decryptedData",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Structures.PostEncryptedData",
                  "name": "data",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Structures.PostData",
              "name": "postdata",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct Structures.Post",
          "name": "post",
          "type": "tuple"
        }
      ],
      "name": "MadePublic",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "vaultId",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct Structures.User",
              "name": "creator",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum Structures.PostStatus",
                      "name": "status",
                      "type": "uint8"
                    },
                    {
                      "internalType": "enum Structures.PostType",
                      "name": "postType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "creationTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "duration",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum Structures.Tokens",
                      "name": "tokenId",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct Structures.PostSettings",
                  "name": "settings",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "stake",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "payment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "punishment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "penalty",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structures.PostEscrow",
                  "name": "escrow",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes",
                      "name": "encryptedData",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "encryptedKey",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "decryptedData",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Structures.PostEncryptedData",
                  "name": "data",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Structures.PostData",
              "name": "postdata",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct Structures.Post",
          "name": "post",
          "type": "tuple"
        }
      ],
      "name": "Renounced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "staker",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum Structures.Tokens",
          "name": "tokenId",
          "type": "uint8"
        }
      ],
      "name": "StakeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "staker",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "StakeBurned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "staker",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum Structures.Tokens",
          "name": "tokenId",
          "type": "uint8"
        }
      ],
      "name": "StakeTaken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "vaultId",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct Structures.User",
              "name": "creator",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum Structures.PostStatus",
                      "name": "status",
                      "type": "uint8"
                    },
                    {
                      "internalType": "enum Structures.PostType",
                      "name": "postType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "creationTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "duration",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum Structures.Tokens",
                      "name": "tokenId",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct Structures.PostSettings",
                  "name": "settings",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "stake",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "payment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "punishment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "penalty",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structures.PostEscrow",
                  "name": "escrow",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes",
                      "name": "encryptedData",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "encryptedKey",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "decryptedData",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Structures.PostEncryptedData",
                  "name": "data",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Structures.PostData",
              "name": "postdata",
              "type": "tuple"
            }
          ],
          "indexed": false,
          "internalType": "struct Structures.Post",
          "name": "post",
          "type": "tuple"
        }
      ],
      "name": "Valid",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "sismoConnectResponse",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_nonce",
          "type": "bytes32"
        },
        {
          "internalType": "enum Structures.Tokens",
          "name": "tokenId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_paymentAmount",
          "type": "uint256"
        }
      ],
      "name": "acceptPost",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Structures.Tokens",
          "name": "tokenId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amountToAdd",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "encryptedVaultId",
          "type": "bytes32"
        }
      ],
      "name": "addStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "encryptedHash",
          "type": "bytes"
        },
        {
          "internalType": "enum Structures.PostType",
          "name": "postType",
          "type": "uint8"
        },
        {
          "internalType": "enum Structures.PostDuration",
          "name": "postDuration",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakeAmount",
          "type": "uint256"
        },
        {
          "internalType": "enum Structures.Tokens",
          "name": "tokenId",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "sismoConnectResponse",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_nonce",
          "type": "bytes32"
        }
      ],
      "name": "createPost",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "vaultId",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct Structures.User",
              "name": "creator",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "enum Structures.PostStatus",
                      "name": "status",
                      "type": "uint8"
                    },
                    {
                      "internalType": "enum Structures.PostType",
                      "name": "postType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "creationTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endTimeStamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "duration",
                      "type": "uint256"
                    },
                    {
                      "internalType": "enum Structures.Tokens",
                      "name": "tokenId",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct Structures.PostSettings",
                  "name": "settings",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "stake",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "payment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "punishment",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "penalty",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structures.PostEscrow",
                  "name": "escrow",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes",
                      "name": "encryptedData",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "encryptedKey",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "decryptedData",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Structures.PostEncryptedData",
                  "name": "data",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Structures.PostData",
              "name": "postdata",
              "type": "tuple"
            }
          ],
          "internalType": "struct Structures.Post",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "valid",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "punishment",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "encryptedVaultId",
          "type": "bytes32"
        }
      ],
      "name": "finalizePost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBuyerStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "sismoConnectResponse",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_nonce",
          "type": "bytes32"
        }
      ],
      "name": "getHashedVaultId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "sismoConnectResponse",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_nonce",
          "type": "bytes32"
        }
      ],
      "name": "getMessage",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPaymentRequested",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSellerStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Structures.Tokens",
          "name": "tokenId",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "staker",
          "type": "bytes32"
        }
      ],
      "name": "getStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakeRequested",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStatus",
      "outputs": [
        {
          "internalType": "enum Structures.PostStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "encryptedVaultId",
          "type": "bytes32"
        }
      ],
      "name": "getTelegramIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenId",
      "outputs": [
        {
          "internalType": "enum Structures.Tokens",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenIdAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "encryptedVaultId",
          "type": "bytes32"
        }
      ],
      "name": "getVaultIdSecret",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "post",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "vaultId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Structures.User",
          "name": "creator",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum Structures.PostStatus",
                  "name": "status",
                  "type": "uint8"
                },
                {
                  "internalType": "enum Structures.PostType",
                  "name": "postType",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "creationTimeStamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "endTimeStamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "duration",
                  "type": "uint256"
                },
                {
                  "internalType": "enum Structures.Tokens",
                  "name": "tokenId",
                  "type": "uint8"
                }
              ],
              "internalType": "struct Structures.PostSettings",
              "name": "settings",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "stake",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "payment",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "punishment",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "penalty",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Structures.PostEscrow",
              "name": "escrow",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bytes",
                  "name": "encryptedData",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "encryptedKey",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "decryptedData",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Structures.PostEncryptedData",
              "name": "data",
              "type": "tuple"
            }
          ],
          "internalType": "struct Structures.PostData",
          "name": "postdata",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "postCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "sismoConnectResponse",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_nonce",
          "type": "bytes32"
        }
      ],
      "name": "renouncePost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "decryptedData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "sismoConnectResponse",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_nonce",
          "type": "bytes32"
        }
      ],
      "name": "revealData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "encryptedKey",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "sismoConnectResponse",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_nonce",
          "type": "bytes32"
        }
      ],
      "name": "submitHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Structures.Tokens",
          "name": "tokenId",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "sismoConnectResponse",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_nonce",
          "type": "bytes32"
        }
      ],
      "name": "takeFullStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Structures.Tokens",
          "name": "tokenId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amountToTake",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "sismoConnectResponse",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_nonce",
          "type": "bytes32"
        }
      ],
      "name": "takeStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "encodeMessage",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "encryptedVaultId",
          "type": "bytes32"
        }
      ],
      "name": "write",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xfa28aee6b40e2dc4e8914d5334acb51a3a171c9505e4c4b8ba6e45f350d6eada",
  "receipt": {
    "to": null,
    "from": "0x8aA5F726d9F868a21a8bd748E2f1E43bA31eb670",
    "contractAddress": "0xC7da9C8C8e76010fbD6d717CFf6b050CA913104c",
    "transactionIndex": 1,
    "gasUsed": "4956746",
    "logsBloom": "0x
    "blockHash": "0xe67eef54fa34a04b61cbd91920994602cec0d4f7ea0b3538fd4695dcfb4db20d",
    "transactionHash": "0xfa28aee6b40e2dc4e8914d5334acb51a3a171c9505e4c4b8ba6e45f350d6eada",
    "logs": [],
    "blockNumber": 10791860,
    "cumulativeGasUsed": "5004387",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000000000000000000000000000000000000000000000000000000000",
    "0x805E6e2887C62B86aD3B667F68DC6c0EFa9A91d4",
    "0x8CFb40101Fbd1a04b8F460CC5d419E94eFe0c74D",
    "0x0000000000000000000000000000000000000000",
    "0x604346aC71597A9F2d3906A1708bcA50Cd66d275",
    "v2"
  ],
  "numDeployments": 13,
  "solcInputHash": "b05e706fb17823275c6f7fcc098b2d6c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_owner\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_usersModuleContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_verifierContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factoryContract\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Accepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"user\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDeposit\",\"type\":\"uint256\"}],\"name\":\"DepositDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"user\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDeposit\",\"type\":\"uint256\"}],\"name\":\"DepositIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Invalid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"MadePublic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Renounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"staker\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"name\":\"StakeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"staker\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"staker\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"name\":\"StakeTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Valid\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_paymentAmount\",\"type\":\"uint256\"}],\"name\":\"acceptPost\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountToAdd\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"encryptedVaultId\",\"type\":\"bytes32\"}],\"name\":\"addStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encryptedHash\",\"type\":\"bytes\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostDuration\",\"name\":\"postDuration\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"createPost\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.Post\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"encryptedVaultId\",\"type\":\"bytes32\"}],\"name\":\"finalizePost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyerStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"getHashedVaultId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"getMessage\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaymentRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellerStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"staker\",\"type\":\"bytes32\"}],\"name\":\"getStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"encryptedVaultId\",\"type\":\"bytes32\"}],\"name\":\"getTelegramIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenIdAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"encryptedVaultId\",\"type\":\"bytes32\"}],\"name\":\"getVaultIdSecret\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"post\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"renouncePost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"revealData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"submitHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"takeFullStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amountToTake\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"takeStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodeMessage\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"encryptedVaultId\",\"type\":\"bytes32\"}],\"name\":\"write\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/features/MecenateFeed.sol\":\"MecenateFeed\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/features/MecenateFeed.sol\":{\"content\":\"/**\\r\\n * @title MecenateFeed\\r\\n * @dev This contract implements the MecenateFeed feature, which allows users to create and manage posts for crowdfunding campaigns.\\r\\n * The contract inherits from several modules that provide functionality for post creation, acceptance, submission, finalization, and renouncement.\\r\\n * The contract also provides several view functions to retrieve information about a post's buyer payment, seller deposit, seller stake, buyer stake, payment requested, post status, and post count.\\r\\n */\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"../modules/Events.sol\\\";\\r\\nimport \\\"../modules/Creation.sol\\\";\\r\\nimport \\\"../modules/Acceptance.sol\\\";\\r\\nimport \\\"../modules/Submission.sol\\\";\\r\\nimport \\\"../modules/Finalization.sol\\\";\\r\\nimport \\\"../modules/Renounce.sol\\\";\\r\\nimport \\\"../modules/Message.sol\\\";\\r\\n\\r\\ncontract MecenateFeed is\\r\\n    Events,\\r\\n    Message,\\r\\n    Creation,\\r\\n    Acceptance,\\r\\n    Renounce,\\r\\n    Submission,\\r\\n    Finalization\\r\\n{\\r\\n    constructor(\\r\\n        bytes32 _owner,\\r\\n        address _usersModuleContract,\\r\\n        address _verifierContract,\\r\\n        address _vaultContract,\\r\\n        address _factoryContract,\\r\\n        string memory _version\\r\\n    )\\r\\n        Data(\\r\\n            _usersModuleContract,\\r\\n            _verifierContract,\\r\\n            _vaultContract,\\r\\n            _factoryContract,\\r\\n            _version\\r\\n        )\\r\\n    {\\r\\n        owner = _owner;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe257a05e9ecbae7e44b5701894ea7eb2f603f5899a90a5ac238f863ae01fe254\",\"license\":\"MIT\"},\"contracts/interfaces/IMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n// import IERC20 from openzeppelin\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMUSE is IERC20 {\\n    function increaseAllowance(\\n        address spender,\\n        uint256 addedValue\\n    ) external returns (bool);\\n\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 subtractedValue\\n    ) external returns (bool);\\n\\n    function mint(uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x8b0a4012a1cd0815460bb3d15278671589bb85003ff2c38315701b3f2228c633\"},\"contracts/interfaces/IMecenateFeed.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateFeed {\\n    function getTotalStaked() external view returns (uint256);\\n\\n    function postCount() external view returns (uint256);\\n\\n    function acceptPost(\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce,\\n        Structures.Tokens,\\n        uint256 _amount\\n    ) external payable;\\n\\n    function getSellerStake() external view returns (uint256);\\n\\n    function getBuyerStake() external view returns (uint256);\\n\\n    function getPaymentRequested() external view returns (uint256);\\n\\n    function getStakeRequested() external view returns (uint256);\\n\\n    function getStatus() external view returns (Structures.PostStatus status);\\n\\n    function getTokenId() external view returns (Structures.Tokens tokenId);\\n\\n    function owner() external view returns (bytes32);\\n\\n    function version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd8497a7a697e4a734c97d5342b085f7eb0d0d64379ae0ab87b8b600521e4c638\"},\"contracts/interfaces/IMecenateFeedFactory.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\ninterface IMecenateFeedFactory {\\n    function owner() external view returns (address payable);\\n\\n    function treasuryContract() external view returns (address payable);\\n\\n    function identityContract() external view returns (address);\\n\\n    function feeds() external view returns (address[] memory);\\n\\n    function contractCounter() external view returns (uint256);\\n\\n    function isFeed(address _feed) external view returns (bool);\\n\\n    function museToken() external view returns (address);\\n\\n    function wethToken() external view returns (address);\\n\\n    function daiToken() external view returns (address);\\n\\n    function router() external view returns (address);\\n\\n    function getRouterFee(uint8 tokenId) external view returns (uint24);\\n\\n    function burnEnabled() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xdd450940a0ca82107600cd8046bb8d0d20964660b42ba84fb0e26c4c0585a1ac\"},\"contracts/interfaces/IMecenateTreasury.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateTreasury {\\r\\n    function globalFee() external view returns (uint256);\\r\\n\\r\\n    function fixedFee() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf544878bba8e01c837110d06eac56042957d59c593ba9083f686ef02aa9276a1\"},\"contracts/interfaces/IMecenateUsers.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\nimport \\\"../library/Structures.sol\\\";\\r\\n\\r\\ninterface IMecenateUsers {\\r\\n    function checkifUserExist(bytes32 vaultId) external view returns (bool);\\r\\n\\r\\n    function getUserData(\\r\\n        address user\\r\\n    ) external view returns (Structures.User memory);\\r\\n\\r\\n    function getUserCount() external view returns (uint256);\\r\\n\\r\\n    function getUserAt(uint256 index) external view returns (address);\\r\\n\\r\\n    function getUserVaultIdAt(uint256 index) external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0xcd2b91f5bebd5c880ac937b181771a0a722a9a71ff93c783da3c63137179a042\"},\"contracts/interfaces/IMecenateVerifier.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateVerifier {\\r\\n    function sismoVerify(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) external view returns (bytes memory, uint256, uint256, bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x46733b039d06e66a1f438c4fcc490eea06ed1ba2ddff7d5a0059d9e799f03d8d\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function withdraw(uint256) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xeb4bd6c56a346f12ec3d681183d613795c151709e834d69ef58f13fd6d7edf62\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\n * @title Structures\\n * @dev This library defines various data structures used in the Mecenate platform.\\n */\\npragma solidity 0.8.19;\\n\\nlibrary Structures {\\n    enum PostStatus {\\n        Waiting,\\n        Proposed,\\n        Accepted,\\n        Submitted,\\n        Finalized,\\n        Punished,\\n        Revealed,\\n        Renounced\\n    }\\n    enum Tokens {\\n        NaN,\\n        MUSE,\\n        DAI\\n    }\\n    enum PostType {\\n        Text,\\n        Image,\\n        Video,\\n        Audio,\\n        File\\n    }\\n    enum PostDuration {\\n        OneDay,\\n        ThreeDays,\\n        OneWeek,\\n        TwoWeeks,\\n        OneMonth\\n    }\\n\\n    struct FeedSettings {\\n        uint256 punishmentRatio;\\n        uint256 postCount;\\n        address usersModuleContract;\\n        address factoryContract;\\n        address verifierContract;\\n        address vaultContract;\\n        address router;\\n        bytes encodedSymKey;\\n        bytes lastMessageForBuyer;\\n        bytes lastMessageForSeller;\\n        string version;\\n    }\\n\\n    struct FactorySettings {\\n        address treasuryContract;\\n        address usersModuleContract;\\n        address verifierContract;\\n        address vaultContract;\\n        address museToken;\\n        address daiToken;\\n        address wethToken;\\n        address router;\\n    }\\n\\n    /**\\n     * @dev Struct representing a post on the Mecenate platform.\\n     */\\n    struct Post {\\n        User creator;\\n        PostData postdata;\\n    }\\n\\n    /**\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\n     */\\n    struct PostData {\\n        PostSettings settings;\\n        PostEscrow escrow;\\n        PostEncryptedData data;\\n    }\\n\\n    /**\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\n     */\\n    struct PostEncryptedData {\\n        bytes encryptedData;\\n        bytes encryptedKey;\\n        bytes decryptedData;\\n    }\\n\\n    /**\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettings {\\n        PostStatus status;\\n        PostType postType;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n        uint256 duration;\\n        Tokens tokenId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the private settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettingPrivate {\\n        bytes vaultIdSeller;\\n        uint256 sellerTwitterId;\\n        uint256 sellerTelegramId;\\n        bytes vaultIdBuyer;\\n        uint256 buyerTwitterId;\\n        uint256 buyerTelegramId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\n     */\\n    struct PostEscrow {\\n        uint256 stake;\\n        uint256 payment;\\n        uint256 punishment;\\n        uint256 penalty;\\n    }\\n\\n    /**\\n     * @dev Struct representing a user on the Mecenate platform.\\n     */\\n    struct User {\\n        bytes32 vaultId;\\n    }\\n\\n    /**\\n     * @dev Struct representing a feed on the Mecenate platform.\\n     */\\n    struct Feed {\\n        address contractAddress;\\n        bytes32 operator;\\n        uint256 sellerStake;\\n        uint256 buyerStake;\\n        uint256 totalStake;\\n        uint256 postCount;\\n        uint256 paymentRequested;\\n        uint256 stakeRequested;\\n        PostStatus status;\\n        Tokens tokenId;\\n        string version;\\n    }\\n\\n    /**\\n     * @dev Struct representing a bay request on the Mecenate platform.\\n     */\\n    struct BayRequest {\\n        bytes32 request;\\n        uint256 payment;\\n        uint256 stake;\\n        address postAddress;\\n        bool accepted;\\n        uint256 postCount;\\n        Tokens tokenId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the private settings of a bay request on the Mecenate platform.\\n     */\\n    struct BayRequestPrivate {\\n        bytes vaultIdSeller;\\n        bytes sellerResponse;\\n        bytes vaultIdBuyer;\\n        bytes buyerResponse;\\n        address buyerTo;\\n        bytes32 buyerNonce;\\n    }\\n}\\n\",\"keccak256\":\"0x8b2807cacc112844ce06aee7c3ab099d50703cfb88f550ddf563ff0065b60c07\"},\"contracts/modules/Acceptance.sol\":{\"content\":\"/**\\n * @title Acceptance\\n * @dev This contract is an abstract contract that inherits from Events and Staking contracts. It provides a function to accept a post and add stake to the post. The function accepts a Sismo Connect response as a parameter and verifies the user existence. It also checks if the user is not the seller and if the post is in Proposed status. If the post has an escrow payment, it checks if the buyer has paid enough and adds the payment to the post's escrow. If the post does not have an escrow payment, it requires a payment from the buyer and adds it to the post's escrow. Finally, it changes the post status to Accepted and emits an Accepted event.\\n */\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"./Events.sol\\\";\\nimport \\\"./Staking.sol\\\";\\n\\nabstract contract Acceptance is Events, Staking {\\n    function acceptPost(\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce,\\n        Structures.Tokens tokenId,\\n        uint256 _paymentAmount\\n    ) external payable virtual {\\n        require(\\n            validStatuses[uint8(Structures.PostStatus.Proposed)],\\n            \\\"INVALID_STATUS\\\"\\n        );\\n\\n        _checkToken(tokenId);\\n\\n        uint256 amountToAdd = tokenId == Structures.Tokens.NaN\\n            ? msg.value\\n            : _paymentAmount;\\n        bytes32 sellerVaultIdHash = keccak256(postSettingPrivate.vaultIdSeller);\\n\\n        // Get encryptedVaultId only once\\n        (\\n            bytes memory vaultId,\\n            uint256 twitterId,\\n            uint256 telegramId,\\n\\n        ) = _verifyNonce(sismoConnectResponse, _to, _nonce);\\n        bytes32 encryptedVaultId = keccak256(vaultId);\\n\\n        // Use local variable for repeated calls\\n        uint256 sellerStake = Deposit._getDeposit(tokenId, sellerVaultIdHash);\\n\\n        require(sellerStake >= post.postdata.escrow.stake, \\\"STAKE_INCORRECT\\\");\\n        require(\\n            IMecenateUsers(settings.usersModuleContract).checkifUserExist(\\n                encryptedVaultId\\n            ),\\n            \\\"USERT_NOT_EXIST\\\"\\n        );\\n        require(encryptedVaultId != sellerVaultIdHash, \\\"YOU_ARE_THE_SELLER\\\");\\n\\n        if (post.postdata.escrow.payment > 0) {\\n            require(\\n                _paymentAmount >= post.postdata.escrow.payment,\\n                \\\"NOT_ENOUGH_PAYMENT\\\"\\n            );\\n        } else {\\n            require(msg.value > 0, \\\"ZERO_MSGVALUE\\\");\\n            require(_paymentAmount > 0, \\\"ZERO_PAYMENT\\\");\\n        }\\n\\n        uint256 payment = _addStake(\\n            tokenId,\\n            encryptedVaultId,\\n            settings.vaultContract,\\n            amountToAdd\\n        );\\n\\n        // Update all at once\\n        post.postdata.escrow.payment = payment;\\n        post.postdata.settings.status = Structures.PostStatus.Accepted;\\n        _changeStatus(Structures.PostStatus.Accepted);\\n\\n        // Update private settings\\n        postSettingPrivate.vaultIdBuyer = vaultId;\\n        postSettingPrivate.buyerTwitterId = twitterId;\\n        postSettingPrivate.buyerTelegramId = telegramId;\\n\\n        emit Accepted(post);\\n    }\\n}\\n\",\"keccak256\":\"0x14ad7f525aef2982df30eda57949c1b3fd4148c7b65192eb7b5bbb7f716f0923\",\"license\":\"MIT\"},\"contracts/modules/BurnDAI.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"./BurnMUSE.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"../interfaces/IWETH.sol\\\";\\n\\nabstract contract BurnDAI is BurnMUSE {\\n    using SafeMath for uint256;\\n\\n    function _burnFrom(\\n        address from,\\n        uint256 value\\n    ) internal override returns (bool success) {\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\n            .transferFrom(from, address(this), value);\\n\\n        _burn(value);\\n\\n        return true;\\n    }\\n\\n    function _burnDai(uint256 value) internal returns (bool success) {\\n        // approve uniswap for token transfer\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\n            .approve(settings.router, value);\\n\\n        // swap IMecenateFeedFactory(settings.factoryContract).daiToken() for MUSE\\n        uint256 tokens_sold = value;\\n\\n        uint256 tokens_bought = _swapTokensForToken(\\n            IMecenateFeedFactory(settings.factoryContract).daiToken(),\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\n            IMecenateFeedFactory(settings.factoryContract).getRouterFee(0),\\n            tokens_sold\\n        );\\n\\n        uint256 tokens_sold_to_muse = _swapTokensForToken(\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\n            IMecenateFeedFactory(settings.factoryContract).museToken(),\\n            IMecenateFeedFactory(settings.factoryContract).getRouterFee(1),\\n            tokens_bought\\n        );\\n\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).museToken())\\n            .approve(\\n                IMecenateFeedFactory(settings.factoryContract).museToken(),\\n                tokens_sold_to_muse\\n            );\\n\\n        // burn MUSE\\n        BurnMUSE._burn(tokens_sold_to_muse);\\n\\n        return true;\\n    }\\n\\n    function _burnWeth(uint256 value) internal returns (bool success) {\\n        // deposit IMecenateFeedFactory(settings.factoryContract).wethToken()\\n        IWETH(IMecenateFeedFactory(settings.factoryContract).wethToken())\\n            .deposit{value: value}();\\n\\n        // approve uniswap for token transfer\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).wethToken())\\n            .approve(settings.router, value);\\n\\n        // swap IMecenateFeedFactory(settings.factoryContract).wethToken() for MUSE\\n        uint256 tokens_sold = value;\\n\\n        uint256 tokens_bought = _swapTokensForToken(\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\n            IMecenateFeedFactory(settings.factoryContract).museToken(),\\n            IMecenateFeedFactory(settings.factoryContract).getRouterFee(1),\\n            tokens_sold\\n        );\\n\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).museToken())\\n            .approve(\\n                IMecenateFeedFactory(settings.factoryContract).museToken(),\\n                tokens_bought\\n            );\\n\\n        // burn MUSE\\n        BurnMUSE._burn(tokens_bought);\\n\\n        return true;\\n    }\\n\\n    function getTokenAddress()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address token)\\n    {\\n        return IMecenateFeedFactory(settings.factoryContract).daiToken();\\n    }\\n\\n    function getExchangeAddress()\\n        internal\\n        view\\n        override\\n        returns (address exchange)\\n    {\\n        exchange = settings.router;\\n    }\\n\\n    function _swapTokensForToken(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountIn\\n    ) internal returns (uint256 amountOut) {\\n        // Check and approve allowance\\n        uint256 allowance = IERC20(tokenIn).allowance(\\n            address(this),\\n            settings.router\\n        );\\n        if (allowance < amountIn) {\\n            IERC20(tokenIn).approve(settings.router, type(uint256).max);\\n        }\\n\\n        // Prepare parameters\\n        address recipient = address(this);\\n        uint256 deadline = block.timestamp + 60; // 15 seconds from the current block timestamp\\n\\n        // Perform the swap\\n        // Refer to the Uniswap V3 documentation for details on the params.\\n        amountOut = ISwapRouter(settings.router).exactInputSingle(\\n            ISwapRouter.ExactInputSingleParams({\\n                tokenIn: tokenIn,\\n                tokenOut: tokenOut,\\n                fee: fee,\\n                recipient: recipient,\\n                deadline: deadline,\\n                amountIn: amountIn,\\n                amountOutMinimum: 0, // you may want to set a minimum here\\n                sqrtPriceLimitX96: 0\\n            })\\n        );\\n\\n        return amountOut;\\n    }\\n}\\n\",\"keccak256\":\"0xa69462e962a3be48c3514c746d791c7a870247e8e441a2d7a11b5771ec8e0d23\"},\"contracts/modules/BurnMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\nimport \\\"../interfaces/IMUSE.sol\\\";\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\nimport \\\"./Events.sol\\\";\\n\\nabstract contract BurnMUSE is Events {\\n    function _burn(uint256 value) internal virtual returns (bool success) {\\n        IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken()).burn(\\n            value\\n        );\\n        return true;\\n    }\\n\\n    function _burnFrom(\\n        address from,\\n        uint256 value\\n    ) internal virtual returns (bool success) {\\n        IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken())\\n            .transferFrom(from, address(this), value);\\n        _burn(value);\\n        return true;\\n    }\\n\\n    function getTokenAddress() internal view virtual returns (address token) {\\n        return IMecenateFeedFactory(settings.factoryContract).museToken();\\n    }\\n\\n    function getExchangeAddress()\\n        internal\\n        view\\n        virtual\\n        returns (address exchange)\\n    {\\n        exchange = IMecenateFeedFactory(settings.factoryContract).router();\\n    }\\n}\\n\",\"keccak256\":\"0x052049c27f8e98f27fd3d237157e4700d5f5c313343d1cd734614beefa4ccfc6\"},\"contracts/modules/Creation.sol\":{\"content\":\"/**\\n * @title Creation\\n * @dev This contract is an abstract contract that inherits from Staking contract. It provides a function to create a post with the given parameters. The function requires the user to be the owner of the post and to have a stake. The post can have different durations and types. The function returns the created post.\\n */\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"./Staking.sol\\\";\\n\\nabstract contract Creation is Staking {\\n    function createPost(\\n        bytes memory encryptedHash,\\n        Structures.PostType postType,\\n        Structures.PostDuration postDuration,\\n        uint256 payment,\\n        uint256 stakeAmount,\\n        Structures.Tokens tokenId,\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce\\n    )\\n        external\\n        payable\\n        onlyValidTokenID(tokenId)\\n        returns (Structures.Post memory)\\n    {\\n        (\\n            bytes memory vaultId,\\n            uint256 twitterId,\\n            uint256 telegramId,\\n\\n        ) = _verifyNonce(sismoConnectResponse, _to, _nonce);\\n\\n        bytes32 encryptedVaultId = keccak256(vaultId);\\n\\n        // Early exit conditions\\n        require(encryptedVaultId == owner, \\\"NOT_OWNER\\\");\\n\\n        require(\\n            IMecenateUsers(settings.usersModuleContract).checkifUserExist(\\n                encryptedVaultId\\n            ),\\n            \\\"USER_NOT_EXIST\\\"\\n        );\\n\\n        require(\\n            validStatuses[uint8(post.postdata.settings.status)],\\n            \\\"INVALID_STATUS\\\"\\n        );\\n\\n        require(stakeAmount > 0, \\\"STAKE_AMOUNT_ZERO\\\");\\n\\n        uint256 duration = postDurationToDays[uint8(postDuration)];\\n\\n        uint256 stake = _addStake(\\n            tokenId,\\n            encryptedVaultId,\\n            settings.vaultContract,\\n            stakeAmount\\n        );\\n\\n        // Change status to Proposed\\n        _changeStatus(Structures.PostStatus.Proposed);\\n\\n        // Initialize the new Post struct with named arguments for clarity\\n        Structures.Post memory newPost = Structures.Post({\\n            creator: Structures.User({vaultId: encryptedVaultId}),\\n            postdata: Structures.PostData({\\n                settings: Structures.PostSettings({\\n                    postType: postType,\\n                    status: Structures.PostStatus.Proposed,\\n                    creationTimeStamp: block.timestamp,\\n                    endTimeStamp: 0,\\n                    duration: duration,\\n                    tokenId: tokenId\\n                }),\\n                escrow: Structures.PostEscrow({\\n                    stake: stake,\\n                    payment: payment,\\n                    punishment: 0,\\n                    penalty: 0\\n                }),\\n                data: Structures.PostEncryptedData({\\n                    encryptedData: encryptedHash,\\n                    encryptedKey: ZEROHASH,\\n                    decryptedData: ZEROHASH\\n                })\\n            })\\n        });\\n\\n        // Update storage and emit event\\n        post = newPost;\\n        settings.postCount++;\\n\\n        postSettingPrivate.vaultIdSeller = vaultId;\\n        postSettingPrivate.sellerTwitterId = twitterId;\\n        postSettingPrivate.sellerTelegramId = telegramId;\\n\\n        emit Created(newPost);\\n\\n        return newPost;\\n    }\\n}\\n\",\"keccak256\":\"0xdee310c39e23d2d1d05ba2864a851958bd64158c7a2c3f4cce574d2e4e166f9e\",\"license\":\"MIT\"},\"contracts/modules/Data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../interfaces/IMecenateFeed.sol\\\";\\nimport \\\"../interfaces/IMecenateUsers.sol\\\";\\nimport \\\"../interfaces/IMecenateTreasury.sol\\\";\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\nimport \\\"../interfaces/IMecenateVerifier.sol\\\";\\n\\n// import openzeppelin ECDSA\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\n/**\\n * @title Data\\n * @dev This contract stores data related to Mecenate posts and provides functions to interact with it.\\n */\\ncontract Data {\\n    bytes internal constant ZEROHASH = \\\"0x00\\\";\\n\\n    bytes32 public owner;\\n\\n    Structures.Post public post;\\n    Structures.PostSettingPrivate internal postSettingPrivate;\\n    Structures.FeedSettings internal settings;\\n\\n    mapping(uint8 => uint256) internal postDurationToDays;\\n    mapping(uint8 => bool) internal validStatuses;\\n\\n    function onlyVault() internal view {\\n        require(msg.sender == settings.vaultContract, \\\"ONLY_VAULT\\\");\\n    }\\n\\n    constructor(\\n        address _usersModuleContract,\\n        address _verifierContract,\\n        address _vaultContract,\\n        address _factoryContract,\\n        string memory _version\\n    ) {\\n        settings.punishmentRatio = 100000000000000000; // Constant value\\n        settings.postCount = 0; // Initialize postCount to 0\\n        settings.usersModuleContract = _usersModuleContract;\\n        settings.verifierContract = _verifierContract;\\n        settings.vaultContract = _vaultContract;\\n        settings.factoryContract = msg.sender;\\n        settings.router = IMecenateFeedFactory(_factoryContract).router();\\n        settings.encodedSymKey = ZEROHASH;\\n        settings.lastMessageForBuyer = ZEROHASH;\\n        settings.lastMessageForSeller = ZEROHASH;\\n        post.postdata.settings.status = Structures.PostStatus.Waiting;\\n\\n        postDurationToDays[uint8(Structures.PostDuration.OneDay)] = 1 days;\\n        postDurationToDays[uint8(Structures.PostDuration.ThreeDays)] = 3 days;\\n        postDurationToDays[uint8(Structures.PostDuration.OneWeek)] = 7 days;\\n        postDurationToDays[uint8(Structures.PostDuration.TwoWeeks)] = 14 days;\\n        postDurationToDays[uint8(Structures.PostDuration.OneMonth)] = 30 days;\\n        validStatuses[uint8(Structures.PostStatus.Waiting)] = true;\\n\\n        settings.version = _version;\\n    }\\n\\n    function version() external view returns (string memory) {\\n        return settings.version;\\n    }\\n\\n    function _changeStatus(Structures.PostStatus _newStatus) internal {\\n        validStatuses[uint8(post.postdata.settings.status)] = false;\\n        validStatuses[uint8(_newStatus)] = true;\\n        post.postdata.settings.status = _newStatus;\\n    }\\n\\n    function _verifyNonce(\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce\\n    ) internal view returns (bytes memory, uint256, uint256, bytes memory) {\\n        (\\n            bytes memory vaultId,\\n            uint256 twitterId,\\n            uint256 telegramId,\\n            bytes memory signedMessage\\n        ) = IMecenateVerifier(settings.verifierContract).sismoVerify(\\n                sismoConnectResponse,\\n                _to,\\n                _nonce\\n            );\\n\\n        (, bytes32 nonce) = abi.decode(signedMessage, (address, bytes32));\\n\\n        require(_nonce == nonce, \\\"WRONG_NONCE\\\");\\n\\n        return (vaultId, twitterId, telegramId, signedMessage);\\n    }\\n\\n    function sismoVerify(\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce\\n    ) internal view returns (bytes memory, uint256, uint256, bytes memory) {\\n        (\\n            bytes memory vaultId,\\n            uint256 twitterId,\\n            uint256 telegramId,\\n            bytes memory signedMessage\\n        ) = IMecenateVerifier(settings.verifierContract).sismoVerify(\\n                sismoConnectResponse,\\n                _to,\\n                _nonce\\n            );\\n\\n        return (vaultId, twitterId, telegramId, signedMessage);\\n    }\\n\\n    function getStatus() external view returns (Structures.PostStatus) {\\n        return post.postdata.settings.status;\\n    }\\n\\n    function getTokenId() external view returns (Structures.Tokens) {\\n        return post.postdata.settings.tokenId;\\n    }\\n\\n    function getTokenIdAddress() public view returns (address) {\\n        if (post.postdata.settings.tokenId == Structures.Tokens.MUSE) {\\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\\n        } else if (post.postdata.settings.tokenId == Structures.Tokens.DAI) {\\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    function _checkToken(Structures.Tokens _token) internal view {\\n        require(_token == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n    }\\n\\n    function getPaymentRequested() external view returns (uint256) {\\n        return post.postdata.escrow.payment;\\n    }\\n\\n    function getStakeRequested() external view returns (uint256) {\\n        return post.postdata.escrow.stake;\\n    }\\n\\n    function postCount() external view returns (uint256) {\\n        return settings.postCount;\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x02d622bc98222a3929d3b82fca905e980028669570b2d501293f640b8df7e8e7\",\"license\":\"MIT\"},\"contracts/modules/Deposit.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nimport \\\"./TokenManager.sol\\\";\\r\\n\\r\\ncontract Deposit {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping(uint256 => mapping(bytes32 => uint256)) private _deposit;\\r\\n\\r\\n    event DepositIncreased(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user,\\r\\n        uint256 amount,\\r\\n        uint256 newDeposit\\r\\n    );\\r\\n    event DepositDecreased(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user,\\r\\n        uint256 amount,\\r\\n        uint256 newDeposit\\r\\n    );\\r\\n\\r\\n    function _increaseDeposit(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user,\\r\\n        uint256 amountToAdd\\r\\n    ) internal returns (uint256 newDeposit) {\\r\\n        // calculate new deposit amount\\r\\n        newDeposit = _deposit[uint256(tokenID)][user].add(amountToAdd);\\r\\n\\r\\n        // set new stake to storage\\r\\n        _deposit[uint256(tokenID)][user] = newDeposit;\\r\\n\\r\\n        // emit event\\r\\n        emit DepositIncreased(tokenID, user, amountToAdd, newDeposit);\\r\\n\\r\\n        // return\\r\\n        return newDeposit;\\r\\n    }\\r\\n\\r\\n    function _decreaseDeposit(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user,\\r\\n        uint256 amountToRemove\\r\\n    ) internal returns (uint256 newDeposit) {\\r\\n        // get current deposit\\r\\n        uint256 currentDeposit = _deposit[uint256(tokenID)][user];\\r\\n\\r\\n        // check if sufficient deposit\\r\\n        require(currentDeposit >= amountToRemove, \\\"INSUFFICIENT_DEPOSIT\\\");\\r\\n\\r\\n        // calculate new deposit amount\\r\\n        newDeposit = currentDeposit.sub(amountToRemove);\\r\\n\\r\\n        // set new stake to storage\\r\\n        _deposit[uint256(tokenID)][user] = newDeposit;\\r\\n\\r\\n        // emit event\\r\\n        emit DepositDecreased(tokenID, user, amountToRemove, newDeposit);\\r\\n\\r\\n        // return\\r\\n        return newDeposit;\\r\\n    }\\r\\n\\r\\n    function _clearDeposit(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user\\r\\n    ) internal returns (uint256 amountRemoved) {\\r\\n        // get current deposit\\r\\n        uint256 currentDeposit = _deposit[uint256(tokenID)][user];\\r\\n\\r\\n        // remove deposit\\r\\n        _decreaseDeposit(tokenID, user, currentDeposit);\\r\\n\\r\\n        // return\\r\\n        return currentDeposit;\\r\\n    }\\r\\n\\r\\n    function _getDeposit(\\r\\n        Structures.Tokens tokenID,\\r\\n        bytes32 user\\r\\n    ) internal view returns (uint256 deposit) {\\r\\n        return _deposit[uint256(tokenID)][user];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x702ea7645f1788873cddc980c582ce93152342e111141fde085b9854df5c7410\"},\"contracts/modules/Events.sol\":{\"content\":\"/**\\r\\n * @title Events\\r\\n * @dev This abstract contract defines the events related to the Mecenate platform's post lifecycle.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./Data.sol\\\";\\r\\n\\r\\nabstract contract Events is Data {\\r\\n    event Created(Structures.Post post);\\r\\n    event Accepted(Structures.Post post);\\r\\n    event Valid(Structures.Post post);\\r\\n    event Invalid(Structures.Post post);\\r\\n    event Finalized(Structures.Post post);\\r\\n    event MadePublic(Structures.Post post);\\r\\n    event Renounced(Structures.Post post);\\r\\n}\\r\\n\",\"keccak256\":\"0x3aeaf067b1f9010a2456df46fb54d4727b3a24082b1446ac9266dbcdd8c838f6\"},\"contracts/modules/Finalization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\nimport \\\"./Staking.sol\\\";\\n\\nabstract contract Finalization is Staking {\\n    function finalizePost(\\n        bool valid,\\n        uint256 punishment,\\n        bytes32 encryptedVaultId\\n    ) external virtual {\\n        onlyVault();\\n        require(\\n            post.postdata.settings.status == Structures.PostStatus.Submitted,\\n            \\\"NOT_SUBMITTED\\\"\\n        );\\n        require(\\n            keccak256(postSettingPrivate.vaultIdBuyer) == encryptedVaultId,\\n            \\\"VAULTID_NOT_MATCH\\\"\\n        );\\n\\n        // Common contract addresses and variables\\n        address treasuryContract = IMecenateFeedFactory(\\n            settings.factoryContract\\n        ).treasuryContract();\\n\\n        uint256 buyerFee = (post.postdata.escrow.payment *\\n            IMecenateTreasury(treasuryContract).globalFee()) / 10000;\\n\\n        uint256 amountToAdd = post.postdata.escrow.payment - buyerFee;\\n\\n        // Variables for stake changes\\n        uint256 buyerStake;\\n        uint256 sellerStake;\\n\\n        if (post.postdata.settings.endTimeStamp < block.timestamp || valid) {\\n            // Code for both the timeout and the valid case\\n            buyerStake = Deposit._decreaseDeposit(\\n                post.postdata.settings.tokenId,\\n                keccak256(postSettingPrivate.vaultIdBuyer),\\n                post.postdata.escrow.payment\\n            );\\n\\n            sellerStake = Deposit._increaseDeposit(\\n                post.postdata.settings.tokenId,\\n                keccak256(postSettingPrivate.vaultIdSeller),\\n                amountToAdd\\n            );\\n\\n            _burn(post.postdata.settings.tokenId, treasuryContract, buyerFee);\\n\\n            // Update status and stakes\\n            post.postdata.escrow.stake = sellerStake;\\n\\n            post.postdata.escrow.payment = buyerStake;\\n\\n            _changeStatus(\\n                valid\\n                    ? Structures.PostStatus.Finalized\\n                    : Structures.PostStatus.Punished\\n            );\\n\\n            emit Valid(post);\\n        } else if (!valid) {\\n            require(\\n                punishment <= post.postdata.escrow.stake,\\n                \\\"PUNISHMENT_TOO_HIGH\\\"\\n            );\\n            require(settings.punishmentRatio < 1e18, \\\"PUNISHMENT_RATIO_HIGH\\\");\\n\\n            uint256 penalty = (punishment * settings.punishmentRatio) / 1e18;\\n\\n            post.postdata.escrow.payment = _burnStake(\\n                post.postdata.settings.tokenId,\\n                keccak256(postSettingPrivate.vaultIdBuyer),\\n                penalty\\n            );\\n\\n            post.postdata.escrow.stake = _burnStake(\\n                post.postdata.settings.tokenId,\\n                keccak256(postSettingPrivate.vaultIdSeller),\\n                punishment\\n            );\\n\\n            // Update status and penalties\\n            post.postdata.settings.status = Structures.PostStatus.Punished;\\n\\n            post.postdata.escrow.punishment = punishment;\\n\\n            post.postdata.escrow.penalty = penalty;\\n\\n            _changeStatus(Structures.PostStatus.Punished);\\n\\n            emit Invalid(post);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3d44efa887377aecf294cdbd6f0fd190c1d58576a8e32101007872580a49c4e2\",\"license\":\"MIT\"},\"contracts/modules/Message.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./Events.sol\\\";\\r\\n\\r\\nabstract contract Message is Events {\\r\\n    function _isSellerOrBuyer(\\r\\n        bytes32 encryptedVaultId\\r\\n    ) internal view returns (bool) {\\r\\n        bytes32 sellerVaultIdHash = keccak256(postSettingPrivate.vaultIdSeller);\\r\\n        bytes32 buyerVaultIdHash = keccak256(postSettingPrivate.vaultIdBuyer);\\r\\n        return (encryptedVaultId == sellerVaultIdHash ||\\r\\n            encryptedVaultId == buyerVaultIdHash);\\r\\n    }\\r\\n\\r\\n    function getVaultIdSecret(\\r\\n        bytes32 encryptedVaultId\\r\\n    ) external view virtual returns (bytes memory) {\\r\\n        require(_isSellerOrBuyer(encryptedVaultId), \\\"NOT_THE_SELLER_OR_BUYER\\\");\\r\\n        return postSettingPrivate.vaultIdSeller;\\r\\n    }\\r\\n\\r\\n    function getTelegramIds(\\r\\n        bytes32 encryptedVaultId\\r\\n    ) external view returns (uint256, uint256) {\\r\\n        require(\\r\\n            postSettingPrivate.buyerTelegramId != 0,\\r\\n            \\\"NO_TELEGRAM_ID_FOR_BUYER\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            postSettingPrivate.sellerTelegramId != 0,\\r\\n            \\\"NO_TELEGRAM_ID_FOR_SELLER\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            encryptedVaultId == keccak256(postSettingPrivate.vaultIdSeller) ||\\r\\n                encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer),\\r\\n            \\\"NOT_THE_SELLER_OR_BUYER\\\"\\r\\n        );\\r\\n\\r\\n        return (\\r\\n            uint160(postSettingPrivate.buyerTelegramId),\\r\\n            uint160(postSettingPrivate.sellerTelegramId)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getHashedVaultId(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) external virtual returns (bytes32) {\\r\\n        (bytes memory vaultId, , , ) = _verifyNonce(\\r\\n            sismoConnectResponse,\\r\\n            _to,\\r\\n            _nonce\\r\\n        );\\r\\n\\r\\n        bytes32 encryptedVaultId = keccak256(vaultId);\\r\\n\\r\\n        require(\\r\\n            encryptedVaultId == keccak256(postSettingPrivate.vaultIdSeller) ||\\r\\n                encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer),\\r\\n            \\\"NOT_SELLER_OR_BUYER\\\"\\r\\n        );\\r\\n\\r\\n        if (encryptedVaultId == keccak256(postSettingPrivate.vaultIdSeller)) {\\r\\n            return keccak256(postSettingPrivate.vaultIdSeller);\\r\\n        } else {\\r\\n            return keccak256(postSettingPrivate.vaultIdBuyer);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function write(\\r\\n        bytes memory encodeMessage,\\r\\n        bytes32 encryptedVaultId\\r\\n    ) external virtual {\\r\\n        onlyVault();\\r\\n        require(_isSellerOrBuyer(encryptedVaultId), \\\"NOT_THE_SELLER_OR_BUYER\\\");\\r\\n        _writeMessage(encodeMessage, encryptedVaultId);\\r\\n    }\\r\\n\\r\\n    function _writeMessage(\\r\\n        bytes memory encodeMessage,\\r\\n        bytes32 encryptedVaultId\\r\\n    ) internal {\\r\\n        if (encryptedVaultId == keccak256(postSettingPrivate.vaultIdSeller)) {\\r\\n            settings.lastMessageForBuyer = encodeMessage;\\r\\n        } else {\\r\\n            settings.lastMessageForSeller = encodeMessage;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getMessage(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) external virtual returns (bytes memory) {\\r\\n        bytes32 encryptedVaultId = _getEncryptedVaultId(\\r\\n            sismoConnectResponse,\\r\\n            _to,\\r\\n            _nonce\\r\\n        );\\r\\n        require(_isSellerOrBuyer(encryptedVaultId), \\\"NOT_THE_SELLER_OR_BUYER\\\");\\r\\n        return _getMessage(encryptedVaultId);\\r\\n    }\\r\\n\\r\\n    function _getMessage(\\r\\n        bytes32 encryptedVaultId\\r\\n    ) internal view returns (bytes memory) {\\r\\n        if (encryptedVaultId == keccak256(postSettingPrivate.vaultIdSeller)) {\\r\\n            return settings.lastMessageForBuyer;\\r\\n        } else {\\r\\n            return settings.lastMessageForSeller;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _getEncryptedVaultId(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) internal virtual returns (bytes32) {\\r\\n        (bytes memory vaultId, , , ) = _verifyNonce(\\r\\n            sismoConnectResponse,\\r\\n            _to,\\r\\n            _nonce\\r\\n        );\\r\\n        return keccak256(vaultId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xae6ab535a4de2bf0e41c136a0af6b641b2b5d0bac79bf19a6ce5811b6b1635f4\",\"license\":\"MIT\"},\"contracts/modules/Renounce.sol\":{\"content\":\"/**\\r\\n * @title Renounce\\r\\n * @dev This abstract contract extends the Staking contract and provides functionality for a seller to renounce a post.\\r\\n * The seller can only renounce a post if they are the original creator of the post and the post is in the Accepted or Submitted status.\\r\\n * Renouncing a post refunds the buyer's payment and transfers the seller's stake to the seller's address.\\r\\n * The post struct is reset and the post status is updated to Renounced.\\r\\n * This contract also provides an internal function for refunding a post, which is called by the renouncePost function.\\r\\n */\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./Staking.sol\\\";\\r\\n\\r\\nabstract contract Renounce is Staking {\\r\\n    function renouncePost(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) external {\\r\\n        onlyVault();\\r\\n\\r\\n        // Validate the post status\\r\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\r\\n        require(validStatuses[uint8(currentStatus)], \\\"INVALID_STATUS\\\");\\r\\n\\r\\n        // Verify the nonce and get the vault ID\\r\\n        (bytes memory vaultId, , , ) = _verifyNonce(\\r\\n            sismoConnectResponse,\\r\\n            _to,\\r\\n            _nonce\\r\\n        );\\r\\n        bytes32 encryptedVaultId = keccak256(vaultId);\\r\\n\\r\\n        // Confirm that the caller is the seller\\r\\n        bytes32 sellerVaultId = keccak256(postSettingPrivate.vaultIdSeller);\\r\\n        require(encryptedVaultId == sellerVaultId, \\\"NOT_SELLER\\\");\\r\\n\\r\\n        // Reset post and post settings\\r\\n        post = Structures.Post(\\r\\n            Structures.User({vaultId: bytes32(0)}),\\r\\n            Structures.PostData({\\r\\n                settings: Structures.PostSettings({\\r\\n                    status: Structures.PostStatus.Renounced,\\r\\n                    postType: Structures.PostType.Text,\\r\\n                    creationTimeStamp: 0,\\r\\n                    endTimeStamp: 0,\\r\\n                    duration: 0,\\r\\n                    tokenId: Structures.Tokens.NaN\\r\\n                }),\\r\\n                escrow: Structures.PostEscrow({\\r\\n                    stake: 0,\\r\\n                    payment: 0,\\r\\n                    punishment: 0,\\r\\n                    penalty: 0\\r\\n                }),\\r\\n                data: Structures.PostEncryptedData({\\r\\n                    encryptedData: \\\"\\\",\\r\\n                    encryptedKey: \\\"\\\",\\r\\n                    decryptedData: \\\"\\\"\\r\\n                })\\r\\n            })\\r\\n        );\\r\\n\\r\\n        postSettingPrivate.vaultIdBuyer = ZEROHASH;\\r\\n        postSettingPrivate.buyerTwitterId = 0;\\r\\n        postSettingPrivate.buyerTelegramId = 0;\\r\\n        postSettingPrivate.vaultIdSeller = ZEROHASH;\\r\\n        postSettingPrivate.sellerTwitterId = 0;\\r\\n        postSettingPrivate.sellerTelegramId = 0;\\r\\n\\r\\n        // Emit event\\r\\n        emit Renounced(post);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa7bc56c903a41fd35f880954f2141c9873372d4b3a492c312a069dabfb2a3fe6\",\"license\":\"MIT\"},\"contracts/modules/Staking.sol\":{\"content\":\"/**\\n * @title Staking\\n * @dev This contract handles staking functionality for the Mecenate platform.\\n * It allows users to add, take, and burn stakes, and provides functions to get the total staked amount and individual stake amounts.\\n * It also includes a modifier to check the status of a post before allowing stake-related transactions.\\n */\\npragma solidity 0.8.19;\\n\\nimport \\\"./Deposit.sol\\\";\\nimport \\\"./Events.sol\\\";\\n\\nabstract contract Staking is Events, Deposit, TokenManager {\\n    using SafeMath for uint256;\\n\\n    event StakeBurned(bytes32 staker, uint256 amount);\\n    event StakeTaken(bytes32 staker, uint256 amount, Structures.Tokens tokenId);\\n    event StakeAdded(bytes32 staker, uint256 amount, Structures.Tokens tokenId);\\n\\n    function _addStake(\\n        Structures.Tokens tokenId,\\n        bytes32 staker,\\n        address funder,\\n        uint256 amountToAdd\\n    ) internal returns (uint256 newStake) {\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\n        require(\\n            currentStatus != Structures.PostStatus.Accepted &&\\n                currentStatus != Structures.PostStatus.Submitted,\\n            \\\"INVALID_STATUS\\\"\\n        );\\n\\n        require(amountToAdd > 0, \\\"STAKE_REQUIRED\\\");\\n\\n        if (tokenId != Structures.Tokens.NaN) {\\n            _transferFrom(tokenId, funder, address(this), amountToAdd);\\n        }\\n\\n        newStake = Deposit._increaseDeposit(tokenId, staker, amountToAdd);\\n\\n        emit StakeAdded(staker, amountToAdd, tokenId);\\n\\n        return newStake;\\n    }\\n\\n    function _takeStake(\\n        Structures.Tokens tokenId,\\n        bytes32 staker,\\n        address _to,\\n        uint256 amountToTake\\n    ) internal returns (uint256 newStake) {\\n        // Memorizza lo status del post in una variabile per evitare accessi ridondanti allo storage\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\n\\n        // Verifica che lo status del post sia valido per procedere\\n        require(\\n            currentStatus != Structures.PostStatus.Accepted &&\\n                currentStatus != Structures.PostStatus.Submitted,\\n            \\\"INVALID_STATUS\\\"\\n        );\\n\\n        // Effettua il trasferimento del token o dell'Ether\\n        if (tokenId == Structures.Tokens.NaN) {\\n            //(bool result, ) = payable(_to).call{value: amountToTake}(\\\"\\\");\\n            //require(result, \\\"CALL_FAILED\\\");\\n            payable(_to).transfer(amountToTake);\\n        } else {\\n            _transfer(tokenId, _to, amountToTake);\\n        }\\n\\n        // Aggiorna il deposito e emette un evento\\n        newStake = Deposit._decreaseDeposit(tokenId, staker, amountToTake);\\n        emit StakeTaken(staker, amountToTake, tokenId);\\n\\n        return newStake;\\n    }\\n\\n    function _takeFullStake(\\n        Structures.Tokens tokenId,\\n        address _to,\\n        bytes32 staker\\n    ) internal returns (uint256 amountTaken) {\\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, staker);\\n\\n        uint256 newStake = _takeStake(tokenId, staker, _to, currentDeposit);\\n\\n        return newStake;\\n    }\\n\\n    function _burnStake(\\n        Structures.Tokens tokenId,\\n        bytes32 staker,\\n        uint256 amountToBurn\\n    ) internal returns (uint256 newStake) {\\n        uint256 newDeposit = Deposit._decreaseDeposit(\\n            tokenId,\\n            staker,\\n            amountToBurn\\n        );\\n\\n        bool burnEnabled = IMecenateFeedFactory(settings.factoryContract)\\n            .burnEnabled();\\n\\n        address treasuryContract = IMecenateFeedFactory(\\n            settings.factoryContract\\n        ).treasuryContract();\\n\\n        if (burnEnabled == false) {\\n            if (tokenId == Structures.Tokens.NaN) {\\n                (bool result, ) = payable(treasuryContract).call{\\n                    value: amountToBurn\\n                }(\\\"\\\");\\n                require(result, \\\"CALL_FAILED\\\");\\n            } else {\\n                _transfer(tokenId, treasuryContract, amountToBurn);\\n            }\\n        } else {\\n            if (tokenId == Structures.Tokens.DAI) {\\n                _burnDai(amountToBurn);\\n            } else if (tokenId == Structures.Tokens.MUSE) {\\n                _burn(amountToBurn);\\n            } else if (tokenId == Structures.Tokens.NaN) {\\n                _burnWeth(amountToBurn);\\n            }\\n        }\\n\\n        emit StakeBurned(staker, amountToBurn);\\n\\n        return newDeposit;\\n    }\\n\\n    function _burnFullStake(\\n        Structures.Tokens tokenId,\\n        bytes32 staker\\n    ) internal returns (uint256 amountBurned) {\\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, staker);\\n\\n        _burnStake(tokenId, staker, currentDeposit);\\n\\n        return currentDeposit;\\n    }\\n\\n    function getStake(\\n        Structures.Tokens tokenId,\\n        bytes32 staker\\n    ) external view returns (uint256 amount) {\\n        // get deposit\\n        amount = Deposit._getDeposit(tokenId, staker);\\n        // explicit return\\n        return amount;\\n    }\\n\\n    function getTotalStaked() external view returns (uint256) {\\n        uint256 amountSeller = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            keccak256(postSettingPrivate.vaultIdSeller)\\n        );\\n\\n        uint256 amountBuyer = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            keccak256(postSettingPrivate.vaultIdBuyer)\\n        );\\n\\n        return (amountSeller + amountBuyer);\\n    }\\n\\n    function addStake(\\n        Structures.Tokens tokenId,\\n        uint256 amountToAdd,\\n        bytes32 encryptedVaultId\\n    ) external payable returns (uint256) {\\n        require(tokenId == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n\\n        // Check if the encryptedVaultId matches with either the buyer or the seller\\n        require(\\n            encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer) ||\\n                encryptedVaultId == keccak256(postSettingPrivate.vaultIdSeller),\\n            \\\"VAULTID_MISMATCH\\\"\\n        );\\n\\n        // Determine the amount to add based on the role (buyer or seller)\\n        uint256 actualAmountToAdd = (encryptedVaultId ==\\n            keccak256(postSettingPrivate.vaultIdSeller))\\n            ? msg.value\\n            : amountToAdd;\\n\\n        // Update the stake\\n        uint256 newStake = _addStake(\\n            tokenId,\\n            encryptedVaultId,\\n            settings.vaultContract,\\n            actualAmountToAdd\\n        );\\n\\n        // Update the corresponding escrow value based on the role\\n        if (encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer)) {\\n            post.postdata.escrow.payment = newStake;\\n        } else {\\n            post.postdata.escrow.stake = newStake;\\n        }\\n\\n        return newStake;\\n    }\\n\\n    function takeStake(\\n        Structures.Tokens tokenId,\\n        uint256 amountToTake,\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce\\n    ) external returns (uint256) {\\n        onlyVault();\\n\\n        require(tokenId == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n\\n        bytes32 encryptedVaultId = _commonTakeStake(\\n            sismoConnectResponse,\\n            _to,\\n            _nonce\\n        );\\n\\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, encryptedVaultId);\\n        require(currentDeposit >= amountToTake, \\\"NOT_ENOUGH_STAKE\\\");\\n\\n        uint256 newBalance = _takeStake(\\n            tokenId,\\n            encryptedVaultId,\\n            _to,\\n            amountToTake\\n        );\\n\\n        if (encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer)) {\\n            post.postdata.escrow.payment = newBalance;\\n        } else {\\n            post.postdata.escrow.stake = newBalance;\\n        }\\n\\n        return newBalance;\\n    }\\n\\n    function takeFullStake(\\n        Structures.Tokens tokenId,\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce\\n    ) external returns (uint256) {\\n        onlyVault();\\n\\n        require(tokenId == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n\\n        bytes32 encryptedVaultId = _commonTakeStake(\\n            sismoConnectResponse,\\n            _to,\\n            _nonce\\n        );\\n\\n        uint256 newBalance = _takeFullStake(tokenId, _to, encryptedVaultId);\\n\\n        if (encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer)) {\\n            post.postdata.escrow.payment = newBalance;\\n        } else {\\n            post.postdata.escrow.stake = newBalance;\\n        }\\n\\n        return newBalance;\\n    }\\n\\n    function getSellerStake() external view returns (uint256 amount) {\\n        // get deposit\\n        amount = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            keccak256(postSettingPrivate.vaultIdSeller)\\n        );\\n        // explicit return\\n        return amount;\\n    }\\n\\n    function getBuyerStake() external view returns (uint256 amount) {\\n        // get deposit\\n        amount = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            keccak256(postSettingPrivate.vaultIdBuyer)\\n        );\\n        // explicit return\\n        return amount;\\n    }\\n\\n    function _commonTakeStake(\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce\\n    ) internal view returns (bytes32) {\\n        (bytes memory vaultId, , , ) = _verifyNonce(\\n            sismoConnectResponse,\\n            _to,\\n            _nonce\\n        );\\n        bytes32 encryptedVaultId = keccak256(vaultId);\\n\\n        require(\\n            encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer) ||\\n                encryptedVaultId == keccak256(postSettingPrivate.vaultIdSeller),\\n            \\\"UNAUTHORIZED\\\"\\n        );\\n\\n        return encryptedVaultId;\\n    }\\n}\\n\",\"keccak256\":\"0x7299401299e1038e5c57a2cabe9ec12e27b92c173f9c9228c64d37b9eaaa3b1b\"},\"contracts/modules/Submission.sol\":{\"content\":\"/**\\r\\n * @title Submission\\r\\n * @dev This contract is an abstract contract that defines the functions for submitting and revealing data for a post. It inherits from the Events contract.\\r\\n */\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./Events.sol\\\";\\r\\n\\r\\nabstract contract Submission is Events {\\r\\n    function submitHash(\\r\\n        bytes memory encryptedKey,\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) external virtual {\\r\\n        onlyVault();\\r\\n\\r\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\r\\n        require(\\r\\n            validStatuses[uint8(currentStatus)] &&\\r\\n                (currentStatus == Structures.PostStatus.Accepted ||\\r\\n                    currentStatus == Structures.PostStatus.Submitted),\\r\\n            \\\"WRONG_STATUS\\\"\\r\\n        );\\r\\n\\r\\n        (bytes memory vaultId, , , ) = _verifyNonce(\\r\\n            sismoConnectResponse,\\r\\n            _to,\\r\\n            _nonce\\r\\n        );\\r\\n        bytes32 encryptedVaultId = keccak256(vaultId);\\r\\n\\r\\n        require(\\r\\n            IMecenateUsers(settings.usersModuleContract).checkifUserExist(\\r\\n                encryptedVaultId\\r\\n            ),\\r\\n            \\\"User does not exist\\\"\\r\\n        );\\r\\n        require(post.creator.vaultId == encryptedVaultId, \\\"NOT_SELLER\\\");\\r\\n\\r\\n        _changeStatus(Structures.PostStatus.Submitted);\\r\\n\\r\\n        settings.encodedSymKey = post.postdata.data.encryptedKey = encryptedKey;\\r\\n        post.postdata.settings.status = Structures.PostStatus.Submitted;\\r\\n        post.postdata.settings.endTimeStamp =\\r\\n            block.timestamp +\\r\\n            post.postdata.settings.duration;\\r\\n\\r\\n        emit Valid(post);\\r\\n    }\\r\\n\\r\\n    function revealData(\\r\\n        bytes memory decryptedData,\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) external virtual returns (bytes memory) {\\r\\n        onlyVault();\\r\\n\\r\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\r\\n        require(\\r\\n            validStatuses[uint8(currentStatus)] &&\\r\\n                (currentStatus == Structures.PostStatus.Submitted ||\\r\\n                    currentStatus == Structures.PostStatus.Revealed ||\\r\\n                    currentStatus == Structures.PostStatus.Finalized),\\r\\n            \\\"INVALID_STATUS\\\"\\r\\n        );\\r\\n\\r\\n        (bytes memory vaultId, , , ) = _verifyNonce(\\r\\n            sismoConnectResponse,\\r\\n            _to,\\r\\n            _nonce\\r\\n        );\\r\\n        bytes32 encryptedVaultId = keccak256(vaultId);\\r\\n\\r\\n        require(\\r\\n            encryptedVaultId != keccak256(postSettingPrivate.vaultIdSeller),\\r\\n            \\\"YOU_ARE_THE_SELLER\\\"\\r\\n        );\\r\\n        require(\\r\\n            currentStatus == Structures.PostStatus.Finalized,\\r\\n            \\\"NOT_FINALIZED\\\"\\r\\n        );\\r\\n\\r\\n        post.postdata.data.decryptedData = decryptedData;\\r\\n        post.postdata.settings.status = Structures.PostStatus.Revealed;\\r\\n\\r\\n        emit MadePublic(post);\\r\\n\\r\\n        return decryptedData;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd666d9af971b6bf265d28cd01e6e931807beaa73235dc622006608040aa8aa33\",\"license\":\"MIT\"},\"contracts/modules/TokenManager.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"./BurnDAI.sol\\\";\\n\\nabstract contract TokenManager is BurnDAI {\\n    function _getTokenAddress(\\n        Structures.Tokens tokenID\\n    ) internal view returns (address) {\\n        if (tokenID == Structures.Tokens.DAI)\\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\\n        if (tokenID == Structures.Tokens.MUSE)\\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\\n        return address(0);\\n    }\\n\\n    function _checkAllowance(\\n        Structures.Tokens tokenID,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal view {\\n        address tokenAddress = _getTokenAddress(tokenID);\\n        require(\\n            IERC20(tokenAddress).allowance(from, to) >= value,\\n            \\\"INSUFFICIENT_ALLOWANCE\\\"\\n        );\\n    }\\n\\n    modifier onlyValidTokenID(Structures.Tokens tokenID) {\\n        require(\\n            tokenID == Structures.Tokens.MUSE ||\\n                tokenID == Structures.Tokens.DAI ||\\n                tokenID == Structures.Tokens.NaN,\\n            \\\"WRONG_TOKEN\\\"\\n        );\\n        _;\\n    }\\n\\n    function isValidTokenID(\\n        Structures.Tokens tokenID\\n    ) internal pure returns (bool validity) {\\n        return\\n            tokenID == Structures.Tokens.MUSE ||\\n            tokenID == Structures.Tokens.DAI;\\n    }\\n\\n    function _transfer(\\n        Structures.Tokens tokenID,\\n        address to,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        require(\\n            IERC20(_getTokenAddress(tokenID)).transfer(to, value),\\n            \\\"TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function _transferFrom(\\n        Structures.Tokens tokenID,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        address tokenAddress = _getTokenAddress(tokenID);\\n        _checkAllowance(tokenID, from, to, value);\\n        require(\\n            IERC20(tokenAddress).transferFrom(from, to, value),\\n            \\\"TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function _burn(\\n        Structures.Tokens tokenID,\\n        address _receiver,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) returns (bool success) {\\n        bool burnEnabled = IMecenateFeedFactory(settings.factoryContract)\\n            .burnEnabled();\\n\\n        if (burnEnabled == false) {\\n            if (tokenID == Structures.Tokens.NaN) {\\n                (bool result, ) = payable(_receiver).call{value: value}(\\\"\\\");\\n                require(result, \\\"CALL_FAILED\\\");\\n            } else {\\n                TokenManager._transfer(tokenID, _receiver, value);\\n            }\\n        } else {\\n            if (tokenID == Structures.Tokens.DAI) {\\n                _burnDai(value);\\n            } else if (tokenID == Structures.Tokens.MUSE) {\\n                _burn(value);\\n            } else if (tokenID == Structures.Tokens.NaN) {\\n                _burnWeth(value);\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    function _burnFrom(\\n        Structures.Tokens tokenID,\\n        address from,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        address treasury = IMecenateFeedFactory(settings.factoryContract)\\n            .treasuryContract();\\n\\n        if (tokenID == Structures.Tokens.DAI) {\\n            IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\n                .transferFrom(from, treasury, value);\\n        } else if (tokenID == Structures.Tokens.MUSE) {\\n            BurnMUSE._burnFrom(from, value);\\n        }\\n    }\\n\\n    function _approve(\\n        Structures.Tokens tokenID,\\n        address spender,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        if (tokenID == Structures.Tokens.DAI) {\\n            require(\\n                IERC20(\\n                    IMecenateFeedFactory(settings.factoryContract).daiToken()\\n                ).approve(spender, value),\\n                \\\"APPROVE_FAILED\\\"\\n            );\\n        } else if (tokenID == Structures.Tokens.MUSE) {\\n            uint256 currentAllowance = IMUSE(\\n                IMecenateFeedFactory(settings.factoryContract).museToken()\\n            ).allowance(msg.sender, spender);\\n\\n            uint256 newAllowance = currentAllowance + value;\\n            require(\\n                IMUSE(IMecenateFeedFactory(settings.factoryContract).daiToken())\\n                    .increaseAllowance(spender, newAllowance),\\n                \\\"APPROVE_FAILED\\\"\\n            );\\n        }\\n    }\\n\\n    function totalSupply(\\n        Structures.Tokens tokenID\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).totalSupply();\\n    }\\n\\n    function balanceOf(\\n        Structures.Tokens tokenID,\\n        address who\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).balanceOf(who);\\n    }\\n\\n    function allowance(\\n        Structures.Tokens tokenID,\\n        address owner,\\n        address spender\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).allowance(owner, spender);\\n    }\\n}\\n\",\"keccak256\":\"0x8eded6283ea4effbe4861c36f73afaace086765ac8d26ef695ac8855ed15e8b1\"}},\"version\":1}",
  "bytecode": "0x608060409080825234620006765762005982803803809162000022828562000691565b8339810160c0828203126200067657815191602062000043818301620006b5565b62000050868401620006b5565b6200005e60608501620006b5565b926200006d60808601620006b5565b60a08601516001600160401b039691949187821162000676570192601f94888686011215620006765784518881116200067b578b5195601f199a620000b9878d8b860116018962000691565b8288528683830101116200067657859060005b838110620006615750506000918701015267016345785d8a0000601455600060155560018060a01b0380978180948160018060a01b03199716876016541617601655168560185416176018551683601954161760195533836017541617601755838b5180926303e21fa960e61b82528160049a8b92165afa908115620006565760009162000616575b501690601a541617601a556200016a620006ca565b805190868211620004ad57819062000184601b54620006fb565b868111620005e3575b50839086831160011462000578576000926200056c575b50508160011b916000199060031b1c191617601b555b620001c4620006ca565b805190868211620004ad578190620001de601c54620006fb565b86811162000539575b508390868311600114620004ce57600092620004c2575b50508160011b916000199060031b1c191617601c555b6200021e620006ca565b805190868211620004ad57819062000238601d54620006fb565b8681116200047a575b5083908683116001146200040f5760009262000403575b50508160011b916000199060031b1c191617601d555b60ff1993846002541660025560008052838252620151808960002055600194856000526203f4808a60002055600260005262093a808a600020556003600052621275008a600020558160005262278d008a6000205560008052828052858a600020918254161790558251958611620003ee5750620002ee601e54620006fb565b838111620003b0575b50809285116001146200034557508394509083929160009462000339575b50501b916000199060031b1c191617601e555b600055516152309081620007528239f35b01519250388062000315565b929484908116601e60005284600020946000905b888383106200039557505050106200037b575b505050811b01601e5562000328565b015160001960f88460031b161c191690553880806200036c565b85870151885590960195948501948793509081019062000359565b620003dd90601e600052826000208580890160051c820192858a10620003e4575b0160051c019062000738565b38620002f7565b92508192620003d1565b604190634e487b7160e01b6000525260246000fd5b01519050388062000258565b91891691601d600052846000209260005b868282106200046357505090846001959493921062000449575b505050811b01601d556200026e565b015160001960f88460031b161c191690553880806200043a565b600185968293968601518155019501930162000420565b620004a690601d600052856000208880860160051c820192888710620003e4570160051c019062000738565b3862000241565b604186634e487b7160e01b6000525260246000fd5b015190503880620001fe565b91891691601c600052846000209260005b868282106200052257505090846001959493921062000508575b505050811b01601c5562000214565b015160001960f88460031b161c19169055388080620004f9565b6001859682939686015181550195019301620004df565b6200056590601c600052856000208880860160051c820192888710620003e4570160051c019062000738565b38620001e7565b015190503880620001a4565b91891691601b600052846000209260005b86828210620005cc575050908460019594939210620005b2575b505050811b01601b55620001ba565b015160001960f88460031b161c19169055388080620005a3565b600185968293968601518155019501930162000589565b6200060f90601b600052856000208880860160051c820192888710620003e4570160051c019062000738565b386200018d565b908482813d83116200064e575b6200062f818362000691565b810103126200064b57506200064490620006b5565b3862000155565b80fd5b503d62000623565b8b513d6000823e3d90fd5b818101830151898201840152879201620000cc565b600080fd5b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b038211908210176200067b57604052565b51906001600160a01b03821682036200067657565b60408051919082016001600160401b038111838210176200067b5760405260048252630307830360e41b6020830152565b90600182811c921680156200072d575b60208310146200071757565b634e487b7160e01b600052602260045260246000fd5b91607f16916200070b565b81811062000744575050565b600081556001016200073856fe608080604052600436101561001d575b50361561001b57600080fd5b005b60003560e01c908163010a38f514612ced5750806305c1f50214612a115780630917e776146129b057806317906c2e146129925780631b9f0a4314612966578063200f852c1461258357806330a0680c146123675780633258d15c146122555780633a4fb8b714611c3d578063402e3e0b146113c15780634828000c146113295780634c38d877146112fd5780634e69d560146112d557806354fd4d50146112075780635ad4e170146111da5780635c63ed69146111a257806383dd174314610eba5780638da5cb5b14610e9c5780638f287dc2146108905780639d8cc89a1461085e5780639f8b435914610809578063b43f4f75146103e7578063b52d2ce4146102ee578063d24e0c87146102d0578063de5d716514610197578063e02cfa4c146101765763faeb5e1714610153573861000f565b34610171576000366003190112610171576020600754604051908152f35b600080fd5b3461017157602061018f61018936613118565b91613bd2565b604051908152f35b346101715760a0366003190112610171576004356003811015610171576024356044356001600160401b038111610171576101d6903690600401613073565b60643592906001600160a01b0384168403610171576101f3613997565b60ff600654169060038210156102ba5761021161021b928414613678565b8460843591614ed1565b918160005260216020526040600020836000526020528060406000205410610282576020938361024a93614d61565b906040516102628161025b81612eb6565b0382612db3565b805190840120036102795780600855604051908152f35b8060075561018f565b60405162461bcd60e51b815260206004820152601060248201526f4e4f545f454e4f5547485f5354414b4560801b6044820152606490fd5b634e487b7160e01b600052602160045260246000fd5b34610171576000366003190112610171576020600854604051908152f35b60603660031901126101715760043560038110156101715760443560ff6006541660038110156102ba57610323908314613678565b6040519161033b8361033481612eb6565b0384612db3565b8251602080940120821480156103c9575b156103915761024a906040516103658161025b81612e24565b80519085012083036103885734905b6019546001600160a01b0316908490613e6f565b60243590610374565b60405162461bcd60e51b815260048101849052601060248201526f0ac82aa98a89288be9a92a69a82a886960831b6044820152606490fd5b506040516103da8161025b81612e24565b838151910120821461034c565b34610171576103f5366130ba565b92906103ff613997565b60029360ff8554169160088310156102ba578260005260209485805260ff60406000205416806107f6575b156107c2579061043a9291613728565b5050508381519101209060248460018060a01b036016541660405192838092630e2ab4cb60e21b82528760048301525afa9081156107b657600091610789575b501561074e5761048e600192835414613e16565b60005282805260406000209160ff1992838154169055600393846000526040600020838582541617905584848754161786558151916001600160401b03928381116106c05780600c926104ea826104e58654612dea565b61334b565b8490601f83116001146106e1576000926106d6575b505060001982891b1c191690851b1781555b61051b8154612dea565b9283116106c05761052d601b54612dea565b601f8111610659575b50600091601f84116001146105b957509282939183926000946105ae575b50501b9160001990851b1c191617601b555b82541617905561057860055442613a7d565b6004557f130bb2fe638478ab244a90fc4550e3d9f3401c2bd639012d7cb8d0cbe95266ef604051806105a981613409565b0390a1005b015492508780610554565b91905082601f198116601b6000527f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc1936000905b87838310610631575050501061060b575b5050811b01601b55610566565b60008051602061515b833981519152015460001983871b60f8161c1916905585806105fe565b60008051602061515b83398151915286015487559586019590940193869350908101906105ed565b601b6000527f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc1601f850160051c8101918486106106b6575b601f0160051c019085905b8281106106aa575050610536565b6000815501859061069c565b9091508190610691565b634e487b7160e01b600052604160045260246000fd5b0151905089806104ff565b90879350601f198316918560005260008051602061515b8339815191529260005b888282106107385750508411610720575b505050811b018155610511565b0151600019838b1b60f8161c19169055898080610713565b8385015186558b97909501949384019301610702565b60405162461bcd60e51b8152600481018590526013602482015272155cd95c88191bd95cc81b9bdd08195e1a5cdd606a1b6044820152606490fd5b6107a99150853d87116107af575b6107a18183612db3565b8101906131bc565b8661047a565b503d610797565b6040513d6000823e3d90fd5b60405162461bcd60e51b815260048101879052600c60248201526b57524f4e475f53544154555360a01b6044820152606490fd5b508684148061042a57506003841461042a565b346101715761085a61084661082661082036613118565b91613728565b5050506020815191012061084161083c82613b8f565b613b43565b613ca5565b604051918291602083526020830190612f5b565b0390f35b346101715760203660031901126101715761087d61083c600435613b8f565b61085a6040516108468161025b81612e24565b346101715760603660031901126101715760043515801560043503610171576024356108ba613997565b60ff6002541660088110156102ba57600303610e67576040516108e08161025b81612eb6565b8051602060443592012003610e2e576017546040516318da001160e01b815290602090829060049082906001600160a01b03165afa9081156107b657600091610df4575b50600854604051634047e10360e11b81529092906020816004816001600160a01b0387165afa9081156107b657600091610dc0575b5061271061096a6109729286613977565b04809461398a565b9360045442118015610db7575b15610c625750506109d66109b260ff600654166040516109a28161025b81612eb6565b6020815191012060085491613a8a565b9360ff600654166040516109c98161025b81612e24565b6020815191012090613a00565b9160ff600654166003811015806102ba57600182148015918183610c54575b81908015610c47575b610a089150613678565b601754604051632ee4b68b60e11b815290602090829060049082906001600160a01b03165afa9081156107b657600091610c28575b50610bdb576102ba5782610b0b5750610a749360009384935083925082916001600160a01b03165af1610a6e6140ca565b506140fa565b60075560085560043515610b045760045b60ff6002541660088110156102ba576000526020805260406000209060ff199182815416905560088110156102ba57610ad69160ff8216600052602080526001604060002091825416179055613215565b7f130bb2fe638478ab244a90fc4550e3d9f3401c2bd639012d7cb8d0cbe95266ef604051806105a981613409565b6005610a85565b60009091610bce575b8115610bbb575b509260209291610b2d610b7b95613678565b6001600160a01b0390610b3f906150cc565b60405163a9059cbb60e01b81526001600160a01b0390931660048401526024830193909352909384929190911690829060009082906044820190565b03925af180156107b657610b9791600091610b9c575b5061508e565b610a74565b610bb5915060203d6020116107af576107a18183612db3565b84610b91565b90509190916102ba579060006020610b1b565b5050600281146000610b14565b9150919293506102ba5760028203610bfe575050610bf890614400565b50610a74565b15610c0d5750610bf890614cc4565b15610c185750610a74565b610c21906147a9565b5082610bf8565b610c41915060203d6020116107af576107a18183612db3565b89610a3d565b506102ba578084156109fe565b5060009050600284146109f5565b9250925050610c6d57005b6007548111610d7c5760145490670de0b6b3a764000080831015610d3f57610c9760059383613977565b04610cbf8160ff60065416604051610cb28161025b81612eb6565b6020815191012090614134565b600855610cdc8260ff60065416604051610cb28161025b81612e24565b60075560ff199183836002541617600255600955600a558160005260208052604060002060018282541617905560025416176002557f1c9ee42116032ebac99a31ae475140077588d76949471dfb40a21a14ad523b2d604051806105a981613409565b60405162461bcd60e51b81526020600482015260156024820152740a0aa9c92a6909a8a9ca8bea482a8929ebe90928e9605b1b6044820152606490fd5b60405162461bcd60e51b81526020600482015260136024820152720a0aa9c92a6909a8a9ca8bea89e9ebe90928e9606b1b6044820152606490fd5b5060043561097f565b90506020813d602011610dec575b81610ddb60209383612db3565b810103126101715751612710610959565b3d9150610dce565b90506020813d602011610e26575b81610e0f60209383612db3565b8101031261017157610e2090613714565b83610924565b3d9150610e02565b60405162461bcd60e51b81526020600482015260116024820152700ac82aa98a89288be9c9ea8be9a82a8869607b1b6044820152606490fd5b60405162461bcd60e51b815260206004820152600d60248201526c1393d517d4d550935255151151609a1b6044820152606490fd5b34610171576000366003190112610171576020600054604051908152f35b34610171576040366003190112610171576001600160401b0360043581811161017157610eeb903690600401613073565b90602435610ef7613997565b610f0361083c82613b8f565b60405190610f1b82610f1481612e24565b0383612db3565b8151602092830120036110645782519182116106c057610f3c601c54612dea565b601f8111611000575b5080601f8311600114610f7f57508192600092610f74575b50508160011b916000199060031b1c191617601c55005b015190508280610f5d565b90601f19831693601c6000527f0e4562a10381dec21b205ed72637e6b1b523bdd0e4d4d50af5cd23dd4500a211926000905b868210610fe85750508360019510610fcf575b505050811b01601c55005b015160001960f88460031b161c19169055828080610fc4565b80600185968294968601518155019501930190610fb1565b601c6000527f0e4562a10381dec21b205ed72637e6b1b523bdd0e4d4d50af5cd23dd4500a211601f840160051c81019183851061105a575b601f0160051c01905b81811061104e5750610f45565b60008155600101611041565b9091508190611038565b82519182116106c057611078601d54612dea565b601f811161113e575b5080601f83116001146110bd575081926000926110b2575b5050600019600383901b1c191660019190911b17601d55005b015190508280611099565b90601f19831693601d6000527f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134f926000905b868210611126575050836001951061110d575b505050811b01601d55005b015160001960f88460031b161c19169055828080611102565b806001859682949686015181550195019301906110ef565b601d6000527f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134f601f840160051c810191838510611198575b601f0160051c01905b81811061118c5750611081565b6000815560010161117f565b9091508190611176565b3461017157600036600319011261017157602061018f60ff600654166040516111ce8161025b81612e24565b83815191012090613951565b346101715760003660031901126101715760206111f5613895565b6040516001600160a01b039091168152f35b34610171576000366003190112610171576040516000601e5461122981612dea565b808452906001908181169081156112ae5750600114611253575b61085a8461084681860382612db3565b601e600090815292507f50bb669a95c7b50b7e8a6f09454034b2b14cf2b85c730dca9a539ca82cb6e3505b82841061129657505050810160200161084682611243565b8054602085870181019190915290930192810161127e565b60ff191660208087019190915292151560051b850190920192506108469150839050611243565b3461017157600036600319011261017157602060ff600254166112fb6040518092612f2b565bf35b3461017157600036600319011261017157602061018f60ff600654166040516111ce8161025b81612eb6565b34610171576080366003190112610171576004356003811015610171576024356001600160401b03811161017157611365903690600401613073565b604435906001600160a01b038216820361017157611381613997565b60ff600654169260038410156102ba576113af61024a926113a56020968414613678565b8460643591614ed1565b92836113bb8184613951565b92614d61565b610120366003190112610171576004356001600160401b038111610171576113ed903690600401613073565b60056024351015610171576005604435101561017157600360a43510156101715760c4356001600160401b0381116101715761142d903690600401613073565b60e435906001600160a01b03821682036101715760405161144d81612d85565b60405161145981612d19565b60008152815260206040519161146e83612d34565b60405161147a81612d4f565b60008152600083820152600060408201526000606082015260006080820152600060a082015283526040516114ae81612d6a565b600081526000838201526000604082015260006060820152828401526040516114d681612d34565b6060815260608382015260606040820152604084015201526000600160a43514908115611c2e575b8115611c1c575b509161151361151d93613678565b6101043591613728565b5090829392516020850120926000548403611beb57601654604051630e2ab4cb60e21b81526004810186905290602090829060249082906001600160a01b03165afa9081156107b657600091611bcc575b5015611b965760ff6002541660088110156102ba576000526020805261159b60ff6040600020541661317f565b60843515611b5d576115ae604435612dd4565b60ff60443516600052601f602052604060002054906115dd60843560018060a01b03601954168760a435613e6f565b60ff6002541660088110156102ba5760005260208052604060002060ff19815416905560016000526040600020600160ff19825416179055600160ff1960025416176002556040519561162f87612d19565b86526040519261163e84612d4f565b6001845261164d602435612dd4565b602435602085015242604085015260006060850152608084015261167660a43560a08501612dde565b6040519061168382612d6a565b8152606435602082015260006040820152600060608201526116a36136b2565b6116ab6136b2565b90604051936116b985612d34565b845260208401526040830152604051926116d284612d34565b835260208301526040820152604051936116eb85612d85565b80855281602086015251600155805180519060088210156102ba5761171160a092613215565b602081015161171f81612dd4565b61172881612dd4565b61ff006002549160081b169061ff0019161760025560408101516003556060810151600455608081015160055501519060038210156102ba5760409160ff8019600654169116176006556060602082015180516007556020810151600855838101516009550151600a55015180518051906001600160401b0382116106c05781906117bd826117b8600b54612dea565b6132ec565b602090601f8311600114611ae957600092611ade575b50508160011b916000199060031b1c191617600b555b60208101518051906001600160401b0382116106c05761180e826104e5600c54612dea565b602090601f8311600114611a6557604093929160009183611a5a575b50508160011b916000199060031b1c191617600c555b01518051906001600160401b0382116106c057819061186982611864600d54612dea565b61328d565b602090601f83116001146119e6576000926119db575b50508160011b916000199060031b1c191617600d555b60155460001994908581146119c5576001016015558051906001600160401b0382116106c0576118cf826118ca600e54612dea565b6133aa565b602090601f831160011461194d5795829161085a97600093611942575b50508260011b9260031b1c191617600e555b600f556010557f5c0140b1f9412009d09b44a8920b411de7a75ebe8c087005130524935e0e457f60405180611933848261315d565b0390a16040519182918261315d565b0151915087806118ec565b90601f19831691600e60005260008051602061517b8339815191529260005b8181106119ad57509161085a989185600196959410611995575b50505050811b01600e556118fe565b01519060f88460031b161c1916905586808080611986565b9293602060018192878601518155019501930161196c565b634e487b7160e01b600052601160045260246000fd5b01519050868061187f565b600d60009081526000805160206151bb8339815191529350601f198516905b818110611a425750908460019594939210611a29575b505050811b01600d55611895565b015160001960f88460031b161c19169055868080611a1b565b92936020600181928786015181550195019301611a05565b01519050888061182a565b90600c60005260008051602061515b8339815191529160005b601f1985168110611ac6575091839160019360409695601f19811610611aad575b505050811b01600c55611840565b015160001960f88460031b161c19169055888080611a9f565b91926020600181928685015181550194019201611a7e565b0151905087806117d3565b600b60009081526000805160206151db8339815191529350601f198516905b818110611b455750908460019594939210611b2c575b505050811b01600b556117e9565b015160001960f88460031b161c19169055878080611b1e565b92936020600181928786015181550195019301611b08565b60405162461bcd60e51b81526020600482015260116024820152705354414b455f414d4f554e545f5a45524f60781b6044820152606490fd5b60405162461bcd60e51b815260206004820152600e60248201526d1554d15497d393d517d1561254d560921b6044820152606490fd5b611be5915060203d6020116107af576107a18183612db3565b8661156e565b60405162461bcd60e51b81526020600482015260096024820152682727aa2fa7aba722a960b91b6044820152606490fd5b90506102ba5760a43515611513611505565b505060a43560021460006114fe565b3461017157611c4b36613118565b611c53613997565b60ff600254169060088210156102ba57611caf92611c8a92600052602094858052611c8560ff6040600020541661317f565b613728565b505050828151910120604051611ca38161025b81612e24565b83815191012014613e16565b60405190611cbc82612d19565b6000825260405191611ccd83612d4f565b60078352600082840152600060408401526000606084015260006080840152600060a084015260405190611d0082612d6a565b60008252600083830152600060408301526000606083015260405190611d2582612d34565b604051611d3181612d19565b600081528252604051611d4381612d19565b6000815284830152604051611d5781612d19565b60008152604083015260405194611d6d86612d34565b8552838501928352604085019182528484604051611d8a81612d85565b8381520152519360019485555191825160088110156102ba57611dac90613215565b83830151611db981612dd4565b611dc281612dd4565b61ff006002549160081b169061ff0019161760025560a0604084015193600394855560608101516004556080810151600555015190838210156102ba5760609160ff8019600654169116176006555180516007558481015160085560408101516009550151600a55519182519283516001600160401b03948582116106c0578190611e52826117b8600b54612dea565b8490601f83116001146121e6576000926121db575b505060001982861b1c191690861b17600b555b818101518051908582116106c057611e97826104e5600c54612dea565b8390601f83116001146121685760409392916000918361215d575b505060001982871b1c191690871b17600c555b01518051908482116106c0578190611ee282611864600d54612dea565b8390601f83116001146120ee576000926120e3575b505060001982851b1c191690851b17600d555b611f126136b2565b8051908482116106c0578190611f3282611f2d601154612dea565b61322e565b8390601f831160011461207457600092612069575b505060001982851b1c191690851b176011555b60006012556000601355611f6c6136b2565b80519384116106c057611f84846118ca600e54612dea565b81601f8511600114611ff35750938394918492600095611fe8575b50501b92600019911b1c191617600e555b6000600f5560006010557f496685ed89450883d7ff0e8e3b71eb9dca092e7b9742b53ed4611b7522443e5e604051806105a981613409565b015193508580611f9f565b92919084601f198116600e60005260008051602061517b833981519152956000905b8983831061204f5750505010612035575b50505050811b01600e55611fb0565b01519060f884600019921b161c1916905582808080612026565b858701518955909701969485019488935090810190612015565b015190508680611f47565b90879350601f19831691601160005260008051602061519b8339815191529260005b878282106120cd57505084116120b5575b505050811b01601155611f5a565b015160001983871b60f8161c191690558680806120a7565b8385015186558b97909501949384019301612096565b015190508680611ef7565b90879350601f19831691600d6000526000805160206151bb8339815191529260005b87828210612147575050841161212f575b505050811b01600d55611f0a565b015160001983871b60f8161c19169055868080612121565b8385015186558b97909501949384019301612110565b015190508880611eb2565b92918791601f19821690600c60005260008051602061515b8339815191529160005b888282106121c55750509583604097106121ad575b505050811b01600c55611ec5565b015160001983891b60f8161c1916905588808061219f565b8389015185558c9690940193928301920161218a565b015190508780611e67565b90889350601f19831691600b6000526000805160206151db8339815191529260005b8882821061223f5750508411612227575b505050811b01600b55611e7a565b015160001983881b60f8161c19169055878080612219565b8385015186558c97909501949384019301612208565b346101715760208060031936011261017157601354600435918115612323576010549182156122de576122a960409485516122938161025b81612e24565b84815191012081149081156122c0575b50613b43565b83516001600160a01b039182168152921690820152f35b905085516122d18161025b81612eb6565b84815191012014866122a3565b60405162461bcd60e51b815260048101839052601960248201527f4e4f5f54454c454752414d5f49445f464f525f53454c4c4552000000000000006044820152606490fd5b6064906040519062461bcd60e51b82526004820152601860248201527f4e4f5f54454c454752414d5f49445f464f525f425559455200000000000000006044820152fd5b3461017157612375366130ba565b90612381939293613997565b60ff6002541691600883101591826102ba578360005260209586805260ff604060002054168061253e575b916123e49391611c856123be9461317f565b5050508581519101206040516123d78161025b81612e24565b86815191012014156131d4565b6102ba57600403612509578051916001600160401b0383116106c05761240f83611864600d54612dea565b8092601f811160011461249a578091929360009161248f575b508160011b916000199060031b1c191617600d555b600660ff1960025416176002557f53d57d9d48dda1c6e6d0fc0b92d00b750b752f21cc973929ce8b4b60b374505e6040518061247881613409565b0390a161085a604051928284938452830190612f5b565b905083015184612428565b601f19811693600d6000526000805160206151bb8339815191529060005b8681106124f25750826001949596106124d9575b5050811b01600d5561243d565b85015160001960f88460031b161c1916905584806124cc565b9091846001819285890151815501930191016124b8565b60405162461bcd60e51b815260048101839052600d60248201526c1393d517d19253905312569151609a1b6044820152606490fd5b50925090600092600385148015612575575b848115612561575b509192916123ac565b90509190916102ba57906004851484612558565b506000935060068514612550565b60a0366003190112610171576001600160401b03600435818111610171576125af903690600401613073565b6001600160a01b039160248035929190848416840361017157606435906003821015610171576084359360016000526020928380526125f560ff6040600020541661317f565b60ff6006541660038110156129515761260f908214613678565b806129475761263a34925b60405161262a8161025b81612e24565b8681519101209860443591613728565b5098919990978a51878c0120928460005260218852604060002081600052885260406000205460075411612911578688846016541660405192838092630e2ab4cb60e21b82528960048301525afa9081156107b6576000916128f4575b50156128be576126a9908414156131d4565b60085490811561283e571061280557906126ca9392915b6019541691613e6f565b60085560028060ff19818181541617825581600052848052604060002060018282541617905581541617905585519283116127f1575061270f82611f2d601154612dea565b80601f831160011461277d575081929394600092612772575b50508160011b916000199060031b1c1916176011555b6012556013557ff13f251f5172305eb93606c0071b9c48215d3ec6a6698a7fa987c18725488e7f604051806105a981613409565b015190508480612728565b90601f19831695601160005260008051602061519b833981519152926000905b8882106127d9575050836001959697106127c0575b505050811b0160115561273e565b015160001960f88460031b161c191690558480806127b2565b8060018596829496860151815501950193019061279d565b634e487b7160e01b60009081526041600452fd5b60405162461bcd60e51b815260048101879052601281870152711393d517d15393d551d217d410565351539560721b6044820152606490fd5b9050341561288a571561285757906126ca9392916126c0565b60405162461bcd60e51b815260048101879052600c818701526b16915493d7d410565351539560a21b6044820152606490fd5b60405162461bcd60e51b815260048101889052600d818801526c5a45524f5f4d534756414c554560981b6044820152606490fd5b60405162461bcd60e51b815260048101899052600f818901526e1554d1549517d393d517d1561254d5608a1b6044820152606490fd5b61290b9150893d8b116107af576107a18183612db3565b8d612697565b60405162461bcd60e51b815260048101899052600f818901526e14d51052d157d25390d3d4949150d5608a1b6044820152606490fd5b61263a869261261a565b83634e487b7160e01b60005260216004526000fd5b346101715760403660031901126101715760043560038110156101715761018f60209160243590613951565b34610171576000366003190112610171576020601554604051908152f35b3461017157600036600319011261017157602061018f60ff60065416612a0b6129ee6040516129e28161025b81612e24565b85815191012083613951565b916040516129ff8161025b81612eb6565b85815191012090613951565b90613a7d565b3461017157600036600319011261017157604051612a2e81612d19565b60018054825260405191612a4183612d34565b60405192612a4e84612d4f565b60025460ff81169060088210156102ba5760ff91865260081c1693612a7285612dd4565b60209485820152600354604082015260045460608201526005546080820152612aa360ff6006541660a08301612dde565b8152604051612ab181612d6a565b6007548152600854858201526009546040820152600a54606082015284820152604051612add81612d34565b60405185816000600b54612af081612dea565b80845290898116908115612ccf5750600114612c85575b50612b1492500382612db3565b815260405185816000600c54612b2981612dea565b80845290898116908115612c675750600114612c1d575b50612b4d92500382612db3565b8582015260405160009486600d5491612b6583612dea565b80855292818116908115612bfc5750600114612bb0575b505050612b8f8161085a95960382612db3565b60408201526040820152604080519485945185528401526040830190612f80565b91909650600d6000526000805160206151bb833981519152916000925b828410612be957505050810190940193612b8f8661085a612b7c565b80548585018a0152928801928101612bcd565b60ff191683860152505090151560051b8201019450612b8f8661085a612b7c565b600c600090815291508860008051602061515b8339815191525b828410612c505750505091612b4d928201018892612b40565b8054878501870152869450928501928a9101612c37565b60ff19168486015250899390151560051b8301019050612b4d612b40565b600b60009081529150886000805160206151db8339815191525b828410612cb85750505091612b14928201018892612b07565b8054878501870152869450928501928a9101612c9f565b60ff19168486015250899390151560051b8301019050612b14612b07565b3461017157600036600319011261017157806112fb60209260ff600654165b9060038210156102ba5752565b602081019081106001600160401b038211176106c057604052565b606081019081106001600160401b038211176106c057604052565b60c081019081106001600160401b038211176106c057604052565b608081019081106001600160401b038211176106c057604052565b604081019081106001600160401b038211176106c057604052565b6001600160401b0381116106c057604052565b90601f801991011681019081106001600160401b038211176106c057604052565b600511156102ba57565b60038210156102ba5752565b90600182811c92168015612e1a575b6020831014612e0457565b634e487b7160e01b600052602260045260246000fd5b91607f1691612df9565b600e5460009291612e3482612dea565b80825291600190818116908115612e995750600114612e5257505050565b91929350600e60005260008051602061517b833981519152916000925b848410612e8157505060209250010190565b80546020858501810191909152909301928101612e6f565b915050602093945060ff929192191683830152151560051b010190565b60115460009291612ec682612dea565b80825291600190818116908115612e995750600114612ee457505050565b91929350601160005260008051602061519b833981519152916000925b848410612f1357505060209250010190565b80546020858501810191909152909301928101612f01565b9060088210156102ba5752565b60005b838110612f4b5750506000910152565b8181015183820152602001612f3b565b90602091612f7481518092818552858086019101612f38565b601f01601f1916010190565b90604061305592612fd460a08251612f99868251612f2b565b6020810151612fa781612dd4565b602087015284810151858701526060810151606087015260808101516080870152015160a0850190612d0c565b60606020820151805160c0860152602081015160e08601528381015161010086015201516101208401520151906130216101608061014084015260608451918401526101c0830190612f5b565b906101a0604061304560208601519461015f19958686830301610180870152612f5b565b9401519282850301910152612f5b565b90565b6001600160401b0381116106c057601f01601f191660200190565b81601f820112156101715780359061308a82613058565b926130986040519485612db3565b8284526020838301011161017157816000926020809301838601378301015290565b906080600319830112610171576001600160401b0360043581811161017157836130e691600401613073565b92602435918211610171576130fd91600401613073565b906044356001600160a01b0381168103610171579060643590565b606060031982011261017157600435906001600160401b0382116101715761314291600401613073565b906024356001600160a01b0381168103610171579060443590565b6060602061305593818452805151828501520151916040808201520190612f80565b1561318657565b60405162461bcd60e51b815260206004820152600e60248201526d494e56414c49445f53544154555360901b6044820152606490fd5b90816020910312610171575180151581036101715790565b156131db57565b60405162461bcd60e51b81526020600482015260126024820152712ca7aaafa0a922afaa2422afa9a2a62622a960711b6044820152606490fd5b60088110156102ba5760ff801960025416911617600255565b601f811161323a575050565b6000906011825260008051602061519b833981519152906020601f850160051c83019410613283575b601f0160051c01915b82811061327857505050565b81815560010161326c565b9092508290613263565b601f8111613299575050565b600090600d82526000805160206151bb833981519152906020601f850160051c830194106132e2575b601f0160051c01915b8281106132d757505050565b8181556001016132cb565b90925082906132c2565b601f81116132f8575050565b600090600b82526000805160206151db833981519152906020601f850160051c83019410613341575b601f0160051c01915b82811061333657505050565b81815560010161332a565b9092508290613321565b601f8111613357575050565b600090600c825260008051602061515b833981519152906020601f850160051c830194106133a0575b601f0160051c01915b82811061339557505050565b818155600101613389565b9092508290613380565b601f81116133b6575050565b600090600e825260008051602061517b833981519152906020601f850160051c830194106133ff575b601f0160051c01915b8281106133f457505050565b8181556001016133e8565b90925082906133df565b6020808252600180548284015260408084015260ff60025461343060608601838316612f2b565b60081c1661343d81612dd4565b608084015260035460a084015260045460c084015260055460e084015261346e60ff60065416610100850190612d0c565b6007546101208401526008546101408401526009546101609081850152600a546101808501526101a084015260606101c0840152600092600b546134b181612dea565b90816102208401528381169081600014613659575060011461360d575b506101bf1981850381016101e0830152600c546000956134ed82612dea565b808252918581169081156135f057506001146135a4575b50506102009082860301910152600092600d549161352183612dea565b80835292818116908115613587575060011461353f575b5050505090565b92935090600d6000526000805160206151bb83398151915292846000945b8386106135735750505050010138808080613538565b80548587018301529401938590820161355d565b60ff191685840152505090151560051b0101905038808080613538565b8591929650600c60005260008051602061515b83398151915290856000925b8584106135da575050010194905061020038613504565b80548385018601528894909301928791016135c3565b60ff1916828801525090151560051b018401945061020038613504565b909350600b6000526000805160206151db83398151915283836000925b84841061364357505050610240915084010192386134ce565b8054610240858a0101520191019083859161362a565b929550506102409160ff191682860152151560051b84010192386134ce565b1561367f57565b60405162461bcd60e51b815260206004820152600b60248201526a2ba927a723afaa27a5a2a760a91b6044820152606490fd5b604051906136bf82612d85565b60048252630307830360e41b6020830152565b81601f820112156101715780516136e881613058565b926136f66040519485612db3565b81845260208284010111610171576130559160208085019101612f38565b51906001600160a01b038216820361017157565b60185460408051637276069d60e01b815260606004820152958695919490939192909186916001600160a01b0390811691613767906064850190612f5b565b9316602483015283604483015281600098899403915afa92831561386d57859186809681966137f0575b5082868051810103126137ed57506137ab60208601613714565b5081850151036137bc575093929190565b5162461bcd60e51b815260206004820152600b60248201526a57524f4e475f4e4f4e434560a81b6044820152606490fd5b80fd5b97509450915093503d8084873e6138078187612db3565b850193608086860312613869578551916001600160401b039283811161386557866138339189016136d2565b9560208801519383890151986060810151918211613861576138569291016136d2565b959296959438613791565b8780fd5b8580fd5b8380fd5b513d86823e3d90fd5b9081602091031261017157516001600160a01b03811681036101715790565b60ff6006541660038110156102ba576001810361390d575060175460405163f77800e560e01b815290602090829060049082906001600160a01b03165afa9081156107b6576000916138e5575090565b613055915060203d8111613906575b6138fe8183612db3565b810190613876565b503d6138f4565b60020361394c57601754604051635f117aa360e11b815290602090829060049082906001600160a01b03165afa9081156107b6576000916138e5575090565b600090565b60038110156102ba57600052602160205260406000209060005260205260406000205490565b818102929181159184041417156119c557565b919082039182116119c557565b6019546001600160a01b031633036139ab57565b60405162461bcd60e51b815260206004820152600a60248201526913d3931657d59055531560b21b6044820152606490fd5b909493926060926139f2836080810198612d0c565b602083015260408201520152565b919060038310156102ba57604092613a777ffc75911105c5435503d8ce6e41bf92051ed6da32a2077c1a8f73e1d251f64cde936000908382526021602052868220858352602052613a548188842054613a7d565b8097838683955260216020528181208882526020522055604051948594856139dd565b0390a190565b919082018092116119c557565b60038110156102ba576000818152602160205260409384822084835260205284822054818110613b0857918186613ae7613a77947f77008762ca31a384e88f2217752cdef978440c9ad826b7b891c59a8e61281a3198979661398a565b809884878396526021602052818120898252602052205551948594856139dd565b855162461bcd60e51b8152602060048201526014602482015273125394d551919250d251539517d1115413d4d25560621b6044820152606490fd5b15613b4a57565b60405162461bcd60e51b815260206004820152601760248201527f4e4f545f5448455f53454c4c45525f4f525f42555945520000000000000000006044820152606490fd5b604051613b9f8161025b81612e24565b60208151910120604051613bb68161025b81612eb6565b60208151910120908214918215613bcc57505090565b14919050565b90613bdd9291613728565b50505080516020809201206040908151613bfa8161025b81612e24565b83815191012081148015613c88575b15613c4e578151613c1d8161025b81612e24565b80519084012003613c3f575190613c3782610f1481612e24565b815191012090565b5190613c3782610f1481612eb6565b815162461bcd60e51b81526004810184905260136024820152722727aa2fa9a2a62622a92fa7a92fa12aaca2a960691b6044820152606490fd5b508151613c988161025b81612eb6565b8381519101208114613c09565b60405190613cb682610f1481612e24565b815160209283012003613d7d5760405190816000601c54613cd681612dea565b80845290600190818116908115613d5d5750600114613cfe575b505061305592500382612db3565b90939150601c6000527f0e4562a10381dec21b205ed72637e6b1b523bdd0e4d4d50af5cd23dd4500a211936000915b818310613d4557505061305593508201013880613cf0565b85548784018501529485019486945091830191613d2d565b91505061305594925060ff191682840152151560051b8201013880613cf0565b60405190816000601d54613d9081612dea565b80845290600190818116908115613d5d5750600114613db757505061305592500382612db3565b90939150601d6000527f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134f936000915b818310613dfe57505061305593508201013880613cf0565b85548784018501529485019486945091830191613de6565b15613e1d57565b60405162461bcd60e51b815260206004820152600a6024820152692727aa2fa9a2a62622a960b11b6044820152606490fd5b604090613e6d93959492956060820196825260208201520190612d0c565b565b929060ff6002541660088110156102ba57806002613e9692141590816140be575b5061317f565b81156140885760038410156102ba5783158015613eed575b507f7d53254b9393ec490c848e90ed920cf3b18c2151daa4b322875f24dd6301206c9250613a77613ee0838387613a00565b9460405193849384613e4f565b600185146000811561407d575b811561406d575b50613f0c9150613678565b613f15846150cc565b926001600160a01b0380613f28876150cc565b604051636eb1769f60e11b81526001600160a01b0385166004820152306024820152602094929091859183916044918391165afa80156107b657869160009161403d575b5010613fff579060648392600083604051998a9586946323b872dd60e01b8652166004850152306024850152896044850152165af180156107b6577f7d53254b9393ec490c848e90ed920cf3b18c2151daa4b322875f24dd6301206c94613fdc92600092613fe2575b505061508e565b38613eae565b613ff89250803d106107af576107a18183612db3565b3880613fd5565b60405162461bcd60e51b8152600481018490526016602482015275494e53554646494349454e545f414c4c4f57414e434560501b6044820152606490fd5b91508482813d8311614066575b6140548183612db3565b810103126137ed575085905138613f6c565b503d61404a565b90506102ba57613f0c9038613f01565b600287149150613efa565b60405162461bcd60e51b815260206004820152600e60248201526d14d51052d157d49154555254915160921b6044820152606490fd5b60039150141538613e90565b3d156140f5573d906140db82613058565b916140e96040519384612db3565b82523d6000602084013e565b606090565b1561410157565b60405162461bcd60e51b815260206004820152600b60248201526a10d0531317d1905253115160aa1b6044820152606490fd5b9291614141818386613a8a565b60175460408051632ee4b68b60e11b815260049793959194919391926020926001600160a01b0391821684848c81845afa9384156143bb578b9186916000966143c6575b5089516318da001160e01b815292839182905afa9081156143bb57908391600091614384575b5016926143045760038110156142e457806142075750507f44e7d684df94a05f40ae4ea3f03cbd42ce0647bd9d92e4105e296c10088f41aa959697506000808080866141fb955af1610a6e6140ca565b8351928352820152a190565b60018114600081156142f9575b81156142d6575b5092600086936142386142699d946142338998613678565b6150cc565b169289519c8d958694859363a9059cbb60e01b8552840160209093929193604081019460018060a01b031681520152565b03925af19687156142cb577f44e7d684df94a05f40ae4ea3f03cbd42ce0647bd9d92e4105e296c10088f41aa9596976142a9916000916142ae575061508e565b6141fb565b6142c59150833d85116107af576107a18183612db3565b38610b91565b84513d6000823e3d90fd5b90506142e45760008061421b565b60218a634e487b7160e01b6000525260246000fd5b600283149150614214565b915050600381101561436f577f44e7d684df94a05f40ae4ea3f03cbd42ce0647bd9d92e4105e296c10088f41aa9596975060028114600014614350575061434a82614400565b506141fb565b60018103614362575061434a82614cc4565b6142a95761434a826147a9565b602188634e487b7160e01b6000525260246000fd5b91508582813d83116143b4575b61439b8183612db3565b810103126137ed57506143ae8391613714565b386141ab565b503d614391565b88513d6000823e3d90fd5b6143de919650823d84116107af576107a18183612db3565b9438614185565b90816020910312610171575162ffffff811681036101715790565b60175460408051635f117aa360e11b808252919493926020926004916001600160a01b039190859085908590829086165afa9384156143bb5760009461478a575b50601a54885163095ea7b360e01b8082529184166001600160a01b03168582019081526020810189905291959091879183918290600090889083906040010393165af180156146615761476d575b508160175416958851918252858285818a5afa9182156146615760009261474e575b508851906325abd85f60e11b92838352878387818c5afa9283156146c55760009361472f575b508a51928884602481633488e95960e21b9d8e825260008c8301525afa9182156146ef5761450d94600093614717575b50614acd565b826017541691895190815286818681865afa90811561468b576000916146fa575b50895163f77800e560e01b808252989088818881885afa9182156146ef5789916000936146d0575b5060248d5180978193825260018b8301525afa9182156146c557614581946000936146965750614acd565b94816017541692885182815286818381885afa92831561468b57879160009461466c575b50828b518097819382525afa928315614661578795879560009561463d575b508a519081526001600160a01b03909416918401918252602082019590955291938492839160009183906040010393165af180156146325761460e949550614614575b5050614cc4565b50600190565b8161462a92903d106107af576107a18183612db3565b503880614607565b85513d6000823e3d90fd5b60009291955061465990873d8911613906576138fe8183612db3565b9490916145c4565b89513d6000823e3d90fd5b614684919450823d8411613906576138fe8183612db3565b92386145a5565b8a513d6000823e3d90fd5b6146b7919350893d8b116146be575b6146af8183612db3565b8101906143e5565b9138614507565b503d6146a5565b8b513d6000823e3d90fd5b6146e8919350823d8411613906576138fe8183612db3565b9138614556565b8c513d6000823e3d90fd5b6147119150873d8911613906576138fe8183612db3565b3861452e565b6146b79193508a3d8c116146be576146af8183612db3565b614747919350883d8a11613906576138fe8183612db3565b91386144d7565b614766919250863d8811613906576138fe8183612db3565b90386144b1565b61478390863d88116107af576107a18183612db3565b503861448f565b6147a2919450853d8711613906576138fe8183612db3565b9238614441565b90601754600092604080516325abd85f60e11b8082526020936004928581858160018060a01b03809b165afa908115614aa6579087918a91614ab0575b501688813b156137ed57829185875180948193630d0e30db60e41b83525af18015614aa657614a93575b508783918688601754168751968780928882525afa948515614a89578295614a6a575b5087601a541694878751809281868d826148708963095ea7b360e01b9e8f84528d840160209093929193604081019460018060a01b031681520152565b0393165af180156149bc57614a4d575b50876017541693865190815287818581885afa9081156149bc578391614a30575b5086519063f77800e560e01b9586835289838781845afa928315614a075760249392918b918794614a11575b508a51633488e95960e21b815260018982015294859182905afa928315614a0757906149029493929186936149ef5750614acd565b96806017541694865194808652888686818a5afa9586156149e55790899185976149c6575b508589518099819382525afa9586156149bc579183918a989795938a97959661499d575b506149768851998a97889687948552840160209093929193604081019460018060a01b031681520152565b0393165af1908115614994575061460e949550614614575050614cc4565b513d87823e3d90fd5b6149b5919650873d8911613906576138fe8183612db3565b943861494b565b87513d85823e3d90fd5b6149de919750823d8411613906576138fe8183612db3565b9538614927565b88513d86823e3d90fd5b6146b79193508b3d8d116146be576146af8183612db3565b89513d87823e3d90fd5b614a29919450823d8411613906576138fe8183612db3565b92386148cd565b614a479150883d8a11613906576138fe8183612db3565b386148a1565b614a6390883d8a116107af576107a18183612db3565b5038614880565b614a82919550873d8911613906576138fe8183612db3565b9338614833565b86513d84823e3d90fd5b97614a9f849299612da0565b9790614810565b85513d8b823e3d90fd5b614ac79150873d8911613906576138fe8183612db3565b386147e6565b601a54604051636eb1769f60e11b81523060048201526001600160a01b039182166024820181905293959493929091169190602081604481865afa80156107b6578591600091614c8f575b5010614c3d575b50603c4201938442116119c557601a546040516101008101916001600160a01b0316906001600160401b038311818410176106c05760409283529384526001600160a01b03928316602085810191825262ffffff9687168685019081523060608801908152608088019a8b5260a08801998a52600060c0890181815260e08a01828152975163414bf38960e01b81529951891660048b01529451881660248a01529151909816604488015296518516606487015297516084860152955160a4850152945160c4840152511660e482015292918391610104918391905af19081156107b657600091614c0e575090565b906020823d602011614c35575b81614c2860209383612db3565b810103126137ed57505190565b3d9150614c1b565b60405163095ea7b360e01b8152600481019190915260001960248201526020816044816000865af180156107b65715614b1f57614c889060203d6020116107af576107a18183612db3565b5038614b1f565b91506020823d602011614cbc575b81614caa60209383612db3565b810103126137ed575084905138614b18565b3d9150614c9d565b60175460405163f77800e560e01b81526001600160a01b03916020908290600490829086165afa9081156107b657600091614d43575b501690813b1561017157600091602483926040519485938492630852cd8d60e31b845260048401525af180156107b657614d345750600190565b614d3d90612da0565b3861460e565b614d5b915060203d8111613906576138fe8183612db3565b38614cfa565b92909160ff6002541660088110156102ba57806002614d8892141590816140be575061317f565b60038410156102ba5783614df1576000808084819482908215614de7575b6001600160a01b031690f1156107b6577ff710aed018092bd38ab8d98fe9aa682f6b3aa552004e37cb2e0d6e3e669582ee915b613a77613ee0838387613a8a565b6108fc9150614da6565b916001841460008115614ec6575b8115614eb8575b5082614e5d94614e17602093613678565b6001600160a01b03614e28886150cc565b1690600060405180988195829463a9059cbb60e01b84526004840160209093929193604081019460018060a01b031681520152565b03925af19283156107b6577ff710aed018092bd38ab8d98fe9aa682f6b3aa552004e37cb2e0d6e3e669582ee93614e9b91600091614ea0575061508e565b614dd9565b6142c5915060203d81116107af576107a18183612db3565b90506102ba57600082614e06565b600286149150614dff565b90614edc9291613728565b505050805160208092012090604051600060115491614efa83612dea565b8082528185810193600195878782169182600014615073575050600114615027575b614f2892500382612db3565b5190208314908115614f72575b5015614f3f575090565b6064906040519062461bcd60e51b82526004820152600c60248201526b15539055551213d49256915160a21b6044820152fd5b604051600e54925090816000614f8785612dea565b9283835286830195878282169182600014615009575050600114614fbe575b50614fb392500382612db3565b519020821438614f35565b869150600e60005260008051602061517b833981519152906000915b858310614ff1575050614fb3935082010138614fa6565b80548388018501528694508893909201918101614fda565b60ff19168852614fb395151560051b8501019250389150614fa69050565b50506011600052818560008051602061519b833981519152866000915b85831061505a575050614f289350820101614f1c565b8091929450548385880101520191018690868593615044565b60ff19168752614f2894151560051b8401019150614f1c9050565b1561509557565b60405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b6044820152606490fd5b60038110156102ba5760028114615121576001146150e957600090565b60175460405163f77800e560e01b815290602090829060049082906001600160a01b03165afa9081156107b6576000916138e5575090565b50601754604051635f117aa360e11b815290602090829060049082906001600160a01b03165afa9081156107b6576000916138e557509056fedf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7bb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c68d7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db9a26469706673582212205874f625d95f4a43cb1f8385a90fa342181aa7728f98ac4cb91c98bd27e91aa064736f6c63430008130033",
  "deployedBytecode": "0x608080604052600436101561001d575b50361561001b57600080fd5b005b60003560e01c908163010a38f514612ced5750806305c1f50214612a115780630917e776146129b057806317906c2e146129925780631b9f0a4314612966578063200f852c1461258357806330a0680c146123675780633258d15c146122555780633a4fb8b714611c3d578063402e3e0b146113c15780634828000c146113295780634c38d877146112fd5780634e69d560146112d557806354fd4d50146112075780635ad4e170146111da5780635c63ed69146111a257806383dd174314610eba5780638da5cb5b14610e9c5780638f287dc2146108905780639d8cc89a1461085e5780639f8b435914610809578063b43f4f75146103e7578063b52d2ce4146102ee578063d24e0c87146102d0578063de5d716514610197578063e02cfa4c146101765763faeb5e1714610153573861000f565b34610171576000366003190112610171576020600754604051908152f35b600080fd5b3461017157602061018f61018936613118565b91613bd2565b604051908152f35b346101715760a0366003190112610171576004356003811015610171576024356044356001600160401b038111610171576101d6903690600401613073565b60643592906001600160a01b0384168403610171576101f3613997565b60ff600654169060038210156102ba5761021161021b928414613678565b8460843591614ed1565b918160005260216020526040600020836000526020528060406000205410610282576020938361024a93614d61565b906040516102628161025b81612eb6565b0382612db3565b805190840120036102795780600855604051908152f35b8060075561018f565b60405162461bcd60e51b815260206004820152601060248201526f4e4f545f454e4f5547485f5354414b4560801b6044820152606490fd5b634e487b7160e01b600052602160045260246000fd5b34610171576000366003190112610171576020600854604051908152f35b60603660031901126101715760043560038110156101715760443560ff6006541660038110156102ba57610323908314613678565b6040519161033b8361033481612eb6565b0384612db3565b8251602080940120821480156103c9575b156103915761024a906040516103658161025b81612e24565b80519085012083036103885734905b6019546001600160a01b0316908490613e6f565b60243590610374565b60405162461bcd60e51b815260048101849052601060248201526f0ac82aa98a89288be9a92a69a82a886960831b6044820152606490fd5b506040516103da8161025b81612e24565b838151910120821461034c565b34610171576103f5366130ba565b92906103ff613997565b60029360ff8554169160088310156102ba578260005260209485805260ff60406000205416806107f6575b156107c2579061043a9291613728565b5050508381519101209060248460018060a01b036016541660405192838092630e2ab4cb60e21b82528760048301525afa9081156107b657600091610789575b501561074e5761048e600192835414613e16565b60005282805260406000209160ff1992838154169055600393846000526040600020838582541617905584848754161786558151916001600160401b03928381116106c05780600c926104ea826104e58654612dea565b61334b565b8490601f83116001146106e1576000926106d6575b505060001982891b1c191690851b1781555b61051b8154612dea565b9283116106c05761052d601b54612dea565b601f8111610659575b50600091601f84116001146105b957509282939183926000946105ae575b50501b9160001990851b1c191617601b555b82541617905561057860055442613a7d565b6004557f130bb2fe638478ab244a90fc4550e3d9f3401c2bd639012d7cb8d0cbe95266ef604051806105a981613409565b0390a1005b015492508780610554565b91905082601f198116601b6000527f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc1936000905b87838310610631575050501061060b575b5050811b01601b55610566565b60008051602061515b833981519152015460001983871b60f8161c1916905585806105fe565b60008051602061515b83398151915286015487559586019590940193869350908101906105ed565b601b6000527f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc1601f850160051c8101918486106106b6575b601f0160051c019085905b8281106106aa575050610536565b6000815501859061069c565b9091508190610691565b634e487b7160e01b600052604160045260246000fd5b0151905089806104ff565b90879350601f198316918560005260008051602061515b8339815191529260005b888282106107385750508411610720575b505050811b018155610511565b0151600019838b1b60f8161c19169055898080610713565b8385015186558b97909501949384019301610702565b60405162461bcd60e51b8152600481018590526013602482015272155cd95c88191bd95cc81b9bdd08195e1a5cdd606a1b6044820152606490fd5b6107a99150853d87116107af575b6107a18183612db3565b8101906131bc565b8661047a565b503d610797565b6040513d6000823e3d90fd5b60405162461bcd60e51b815260048101879052600c60248201526b57524f4e475f53544154555360a01b6044820152606490fd5b508684148061042a57506003841461042a565b346101715761085a61084661082661082036613118565b91613728565b5050506020815191012061084161083c82613b8f565b613b43565b613ca5565b604051918291602083526020830190612f5b565b0390f35b346101715760203660031901126101715761087d61083c600435613b8f565b61085a6040516108468161025b81612e24565b346101715760603660031901126101715760043515801560043503610171576024356108ba613997565b60ff6002541660088110156102ba57600303610e67576040516108e08161025b81612eb6565b8051602060443592012003610e2e576017546040516318da001160e01b815290602090829060049082906001600160a01b03165afa9081156107b657600091610df4575b50600854604051634047e10360e11b81529092906020816004816001600160a01b0387165afa9081156107b657600091610dc0575b5061271061096a6109729286613977565b04809461398a565b9360045442118015610db7575b15610c625750506109d66109b260ff600654166040516109a28161025b81612eb6565b6020815191012060085491613a8a565b9360ff600654166040516109c98161025b81612e24565b6020815191012090613a00565b9160ff600654166003811015806102ba57600182148015918183610c54575b81908015610c47575b610a089150613678565b601754604051632ee4b68b60e11b815290602090829060049082906001600160a01b03165afa9081156107b657600091610c28575b50610bdb576102ba5782610b0b5750610a749360009384935083925082916001600160a01b03165af1610a6e6140ca565b506140fa565b60075560085560043515610b045760045b60ff6002541660088110156102ba576000526020805260406000209060ff199182815416905560088110156102ba57610ad69160ff8216600052602080526001604060002091825416179055613215565b7f130bb2fe638478ab244a90fc4550e3d9f3401c2bd639012d7cb8d0cbe95266ef604051806105a981613409565b6005610a85565b60009091610bce575b8115610bbb575b509260209291610b2d610b7b95613678565b6001600160a01b0390610b3f906150cc565b60405163a9059cbb60e01b81526001600160a01b0390931660048401526024830193909352909384929190911690829060009082906044820190565b03925af180156107b657610b9791600091610b9c575b5061508e565b610a74565b610bb5915060203d6020116107af576107a18183612db3565b84610b91565b90509190916102ba579060006020610b1b565b5050600281146000610b14565b9150919293506102ba5760028203610bfe575050610bf890614400565b50610a74565b15610c0d5750610bf890614cc4565b15610c185750610a74565b610c21906147a9565b5082610bf8565b610c41915060203d6020116107af576107a18183612db3565b89610a3d565b506102ba578084156109fe565b5060009050600284146109f5565b9250925050610c6d57005b6007548111610d7c5760145490670de0b6b3a764000080831015610d3f57610c9760059383613977565b04610cbf8160ff60065416604051610cb28161025b81612eb6565b6020815191012090614134565b600855610cdc8260ff60065416604051610cb28161025b81612e24565b60075560ff199183836002541617600255600955600a558160005260208052604060002060018282541617905560025416176002557f1c9ee42116032ebac99a31ae475140077588d76949471dfb40a21a14ad523b2d604051806105a981613409565b60405162461bcd60e51b81526020600482015260156024820152740a0aa9c92a6909a8a9ca8bea482a8929ebe90928e9605b1b6044820152606490fd5b60405162461bcd60e51b81526020600482015260136024820152720a0aa9c92a6909a8a9ca8bea89e9ebe90928e9606b1b6044820152606490fd5b5060043561097f565b90506020813d602011610dec575b81610ddb60209383612db3565b810103126101715751612710610959565b3d9150610dce565b90506020813d602011610e26575b81610e0f60209383612db3565b8101031261017157610e2090613714565b83610924565b3d9150610e02565b60405162461bcd60e51b81526020600482015260116024820152700ac82aa98a89288be9c9ea8be9a82a8869607b1b6044820152606490fd5b60405162461bcd60e51b815260206004820152600d60248201526c1393d517d4d550935255151151609a1b6044820152606490fd5b34610171576000366003190112610171576020600054604051908152f35b34610171576040366003190112610171576001600160401b0360043581811161017157610eeb903690600401613073565b90602435610ef7613997565b610f0361083c82613b8f565b60405190610f1b82610f1481612e24565b0383612db3565b8151602092830120036110645782519182116106c057610f3c601c54612dea565b601f8111611000575b5080601f8311600114610f7f57508192600092610f74575b50508160011b916000199060031b1c191617601c55005b015190508280610f5d565b90601f19831693601c6000527f0e4562a10381dec21b205ed72637e6b1b523bdd0e4d4d50af5cd23dd4500a211926000905b868210610fe85750508360019510610fcf575b505050811b01601c55005b015160001960f88460031b161c19169055828080610fc4565b80600185968294968601518155019501930190610fb1565b601c6000527f0e4562a10381dec21b205ed72637e6b1b523bdd0e4d4d50af5cd23dd4500a211601f840160051c81019183851061105a575b601f0160051c01905b81811061104e5750610f45565b60008155600101611041565b9091508190611038565b82519182116106c057611078601d54612dea565b601f811161113e575b5080601f83116001146110bd575081926000926110b2575b5050600019600383901b1c191660019190911b17601d55005b015190508280611099565b90601f19831693601d6000527f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134f926000905b868210611126575050836001951061110d575b505050811b01601d55005b015160001960f88460031b161c19169055828080611102565b806001859682949686015181550195019301906110ef565b601d6000527f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134f601f840160051c810191838510611198575b601f0160051c01905b81811061118c5750611081565b6000815560010161117f565b9091508190611176565b3461017157600036600319011261017157602061018f60ff600654166040516111ce8161025b81612e24565b83815191012090613951565b346101715760003660031901126101715760206111f5613895565b6040516001600160a01b039091168152f35b34610171576000366003190112610171576040516000601e5461122981612dea565b808452906001908181169081156112ae5750600114611253575b61085a8461084681860382612db3565b601e600090815292507f50bb669a95c7b50b7e8a6f09454034b2b14cf2b85c730dca9a539ca82cb6e3505b82841061129657505050810160200161084682611243565b8054602085870181019190915290930192810161127e565b60ff191660208087019190915292151560051b850190920192506108469150839050611243565b3461017157600036600319011261017157602060ff600254166112fb6040518092612f2b565bf35b3461017157600036600319011261017157602061018f60ff600654166040516111ce8161025b81612eb6565b34610171576080366003190112610171576004356003811015610171576024356001600160401b03811161017157611365903690600401613073565b604435906001600160a01b038216820361017157611381613997565b60ff600654169260038410156102ba576113af61024a926113a56020968414613678565b8460643591614ed1565b92836113bb8184613951565b92614d61565b610120366003190112610171576004356001600160401b038111610171576113ed903690600401613073565b60056024351015610171576005604435101561017157600360a43510156101715760c4356001600160401b0381116101715761142d903690600401613073565b60e435906001600160a01b03821682036101715760405161144d81612d85565b60405161145981612d19565b60008152815260206040519161146e83612d34565b60405161147a81612d4f565b60008152600083820152600060408201526000606082015260006080820152600060a082015283526040516114ae81612d6a565b600081526000838201526000604082015260006060820152828401526040516114d681612d34565b6060815260608382015260606040820152604084015201526000600160a43514908115611c2e575b8115611c1c575b509161151361151d93613678565b6101043591613728565b5090829392516020850120926000548403611beb57601654604051630e2ab4cb60e21b81526004810186905290602090829060249082906001600160a01b03165afa9081156107b657600091611bcc575b5015611b965760ff6002541660088110156102ba576000526020805261159b60ff6040600020541661317f565b60843515611b5d576115ae604435612dd4565b60ff60443516600052601f602052604060002054906115dd60843560018060a01b03601954168760a435613e6f565b60ff6002541660088110156102ba5760005260208052604060002060ff19815416905560016000526040600020600160ff19825416179055600160ff1960025416176002556040519561162f87612d19565b86526040519261163e84612d4f565b6001845261164d602435612dd4565b602435602085015242604085015260006060850152608084015261167660a43560a08501612dde565b6040519061168382612d6a565b8152606435602082015260006040820152600060608201526116a36136b2565b6116ab6136b2565b90604051936116b985612d34565b845260208401526040830152604051926116d284612d34565b835260208301526040820152604051936116eb85612d85565b80855281602086015251600155805180519060088210156102ba5761171160a092613215565b602081015161171f81612dd4565b61172881612dd4565b61ff006002549160081b169061ff0019161760025560408101516003556060810151600455608081015160055501519060038210156102ba5760409160ff8019600654169116176006556060602082015180516007556020810151600855838101516009550151600a55015180518051906001600160401b0382116106c05781906117bd826117b8600b54612dea565b6132ec565b602090601f8311600114611ae957600092611ade575b50508160011b916000199060031b1c191617600b555b60208101518051906001600160401b0382116106c05761180e826104e5600c54612dea565b602090601f8311600114611a6557604093929160009183611a5a575b50508160011b916000199060031b1c191617600c555b01518051906001600160401b0382116106c057819061186982611864600d54612dea565b61328d565b602090601f83116001146119e6576000926119db575b50508160011b916000199060031b1c191617600d555b60155460001994908581146119c5576001016015558051906001600160401b0382116106c0576118cf826118ca600e54612dea565b6133aa565b602090601f831160011461194d5795829161085a97600093611942575b50508260011b9260031b1c191617600e555b600f556010557f5c0140b1f9412009d09b44a8920b411de7a75ebe8c087005130524935e0e457f60405180611933848261315d565b0390a16040519182918261315d565b0151915087806118ec565b90601f19831691600e60005260008051602061517b8339815191529260005b8181106119ad57509161085a989185600196959410611995575b50505050811b01600e556118fe565b01519060f88460031b161c1916905586808080611986565b9293602060018192878601518155019501930161196c565b634e487b7160e01b600052601160045260246000fd5b01519050868061187f565b600d60009081526000805160206151bb8339815191529350601f198516905b818110611a425750908460019594939210611a29575b505050811b01600d55611895565b015160001960f88460031b161c19169055868080611a1b565b92936020600181928786015181550195019301611a05565b01519050888061182a565b90600c60005260008051602061515b8339815191529160005b601f1985168110611ac6575091839160019360409695601f19811610611aad575b505050811b01600c55611840565b015160001960f88460031b161c19169055888080611a9f565b91926020600181928685015181550194019201611a7e565b0151905087806117d3565b600b60009081526000805160206151db8339815191529350601f198516905b818110611b455750908460019594939210611b2c575b505050811b01600b556117e9565b015160001960f88460031b161c19169055878080611b1e565b92936020600181928786015181550195019301611b08565b60405162461bcd60e51b81526020600482015260116024820152705354414b455f414d4f554e545f5a45524f60781b6044820152606490fd5b60405162461bcd60e51b815260206004820152600e60248201526d1554d15497d393d517d1561254d560921b6044820152606490fd5b611be5915060203d6020116107af576107a18183612db3565b8661156e565b60405162461bcd60e51b81526020600482015260096024820152682727aa2fa7aba722a960b91b6044820152606490fd5b90506102ba5760a43515611513611505565b505060a43560021460006114fe565b3461017157611c4b36613118565b611c53613997565b60ff600254169060088210156102ba57611caf92611c8a92600052602094858052611c8560ff6040600020541661317f565b613728565b505050828151910120604051611ca38161025b81612e24565b83815191012014613e16565b60405190611cbc82612d19565b6000825260405191611ccd83612d4f565b60078352600082840152600060408401526000606084015260006080840152600060a084015260405190611d0082612d6a565b60008252600083830152600060408301526000606083015260405190611d2582612d34565b604051611d3181612d19565b600081528252604051611d4381612d19565b6000815284830152604051611d5781612d19565b60008152604083015260405194611d6d86612d34565b8552838501928352604085019182528484604051611d8a81612d85565b8381520152519360019485555191825160088110156102ba57611dac90613215565b83830151611db981612dd4565b611dc281612dd4565b61ff006002549160081b169061ff0019161760025560a0604084015193600394855560608101516004556080810151600555015190838210156102ba5760609160ff8019600654169116176006555180516007558481015160085560408101516009550151600a55519182519283516001600160401b03948582116106c0578190611e52826117b8600b54612dea565b8490601f83116001146121e6576000926121db575b505060001982861b1c191690861b17600b555b818101518051908582116106c057611e97826104e5600c54612dea565b8390601f83116001146121685760409392916000918361215d575b505060001982871b1c191690871b17600c555b01518051908482116106c0578190611ee282611864600d54612dea565b8390601f83116001146120ee576000926120e3575b505060001982851b1c191690851b17600d555b611f126136b2565b8051908482116106c0578190611f3282611f2d601154612dea565b61322e565b8390601f831160011461207457600092612069575b505060001982851b1c191690851b176011555b60006012556000601355611f6c6136b2565b80519384116106c057611f84846118ca600e54612dea565b81601f8511600114611ff35750938394918492600095611fe8575b50501b92600019911b1c191617600e555b6000600f5560006010557f496685ed89450883d7ff0e8e3b71eb9dca092e7b9742b53ed4611b7522443e5e604051806105a981613409565b015193508580611f9f565b92919084601f198116600e60005260008051602061517b833981519152956000905b8983831061204f5750505010612035575b50505050811b01600e55611fb0565b01519060f884600019921b161c1916905582808080612026565b858701518955909701969485019488935090810190612015565b015190508680611f47565b90879350601f19831691601160005260008051602061519b8339815191529260005b878282106120cd57505084116120b5575b505050811b01601155611f5a565b015160001983871b60f8161c191690558680806120a7565b8385015186558b97909501949384019301612096565b015190508680611ef7565b90879350601f19831691600d6000526000805160206151bb8339815191529260005b87828210612147575050841161212f575b505050811b01600d55611f0a565b015160001983871b60f8161c19169055868080612121565b8385015186558b97909501949384019301612110565b015190508880611eb2565b92918791601f19821690600c60005260008051602061515b8339815191529160005b888282106121c55750509583604097106121ad575b505050811b01600c55611ec5565b015160001983891b60f8161c1916905588808061219f565b8389015185558c9690940193928301920161218a565b015190508780611e67565b90889350601f19831691600b6000526000805160206151db8339815191529260005b8882821061223f5750508411612227575b505050811b01600b55611e7a565b015160001983881b60f8161c19169055878080612219565b8385015186558c97909501949384019301612208565b346101715760208060031936011261017157601354600435918115612323576010549182156122de576122a960409485516122938161025b81612e24565b84815191012081149081156122c0575b50613b43565b83516001600160a01b039182168152921690820152f35b905085516122d18161025b81612eb6565b84815191012014866122a3565b60405162461bcd60e51b815260048101839052601960248201527f4e4f5f54454c454752414d5f49445f464f525f53454c4c4552000000000000006044820152606490fd5b6064906040519062461bcd60e51b82526004820152601860248201527f4e4f5f54454c454752414d5f49445f464f525f425559455200000000000000006044820152fd5b3461017157612375366130ba565b90612381939293613997565b60ff6002541691600883101591826102ba578360005260209586805260ff604060002054168061253e575b916123e49391611c856123be9461317f565b5050508581519101206040516123d78161025b81612e24565b86815191012014156131d4565b6102ba57600403612509578051916001600160401b0383116106c05761240f83611864600d54612dea565b8092601f811160011461249a578091929360009161248f575b508160011b916000199060031b1c191617600d555b600660ff1960025416176002557f53d57d9d48dda1c6e6d0fc0b92d00b750b752f21cc973929ce8b4b60b374505e6040518061247881613409565b0390a161085a604051928284938452830190612f5b565b905083015184612428565b601f19811693600d6000526000805160206151bb8339815191529060005b8681106124f25750826001949596106124d9575b5050811b01600d5561243d565b85015160001960f88460031b161c1916905584806124cc565b9091846001819285890151815501930191016124b8565b60405162461bcd60e51b815260048101839052600d60248201526c1393d517d19253905312569151609a1b6044820152606490fd5b50925090600092600385148015612575575b848115612561575b509192916123ac565b90509190916102ba57906004851484612558565b506000935060068514612550565b60a0366003190112610171576001600160401b03600435818111610171576125af903690600401613073565b6001600160a01b039160248035929190848416840361017157606435906003821015610171576084359360016000526020928380526125f560ff6040600020541661317f565b60ff6006541660038110156129515761260f908214613678565b806129475761263a34925b60405161262a8161025b81612e24565b8681519101209860443591613728565b5098919990978a51878c0120928460005260218852604060002081600052885260406000205460075411612911578688846016541660405192838092630e2ab4cb60e21b82528960048301525afa9081156107b6576000916128f4575b50156128be576126a9908414156131d4565b60085490811561283e571061280557906126ca9392915b6019541691613e6f565b60085560028060ff19818181541617825581600052848052604060002060018282541617905581541617905585519283116127f1575061270f82611f2d601154612dea565b80601f831160011461277d575081929394600092612772575b50508160011b916000199060031b1c1916176011555b6012556013557ff13f251f5172305eb93606c0071b9c48215d3ec6a6698a7fa987c18725488e7f604051806105a981613409565b015190508480612728565b90601f19831695601160005260008051602061519b833981519152926000905b8882106127d9575050836001959697106127c0575b505050811b0160115561273e565b015160001960f88460031b161c191690558480806127b2565b8060018596829496860151815501950193019061279d565b634e487b7160e01b60009081526041600452fd5b60405162461bcd60e51b815260048101879052601281870152711393d517d15393d551d217d410565351539560721b6044820152606490fd5b9050341561288a571561285757906126ca9392916126c0565b60405162461bcd60e51b815260048101879052600c818701526b16915493d7d410565351539560a21b6044820152606490fd5b60405162461bcd60e51b815260048101889052600d818801526c5a45524f5f4d534756414c554560981b6044820152606490fd5b60405162461bcd60e51b815260048101899052600f818901526e1554d1549517d393d517d1561254d5608a1b6044820152606490fd5b61290b9150893d8b116107af576107a18183612db3565b8d612697565b60405162461bcd60e51b815260048101899052600f818901526e14d51052d157d25390d3d4949150d5608a1b6044820152606490fd5b61263a869261261a565b83634e487b7160e01b60005260216004526000fd5b346101715760403660031901126101715760043560038110156101715761018f60209160243590613951565b34610171576000366003190112610171576020601554604051908152f35b3461017157600036600319011261017157602061018f60ff60065416612a0b6129ee6040516129e28161025b81612e24565b85815191012083613951565b916040516129ff8161025b81612eb6565b85815191012090613951565b90613a7d565b3461017157600036600319011261017157604051612a2e81612d19565b60018054825260405191612a4183612d34565b60405192612a4e84612d4f565b60025460ff81169060088210156102ba5760ff91865260081c1693612a7285612dd4565b60209485820152600354604082015260045460608201526005546080820152612aa360ff6006541660a08301612dde565b8152604051612ab181612d6a565b6007548152600854858201526009546040820152600a54606082015284820152604051612add81612d34565b60405185816000600b54612af081612dea565b80845290898116908115612ccf5750600114612c85575b50612b1492500382612db3565b815260405185816000600c54612b2981612dea565b80845290898116908115612c675750600114612c1d575b50612b4d92500382612db3565b8582015260405160009486600d5491612b6583612dea565b80855292818116908115612bfc5750600114612bb0575b505050612b8f8161085a95960382612db3565b60408201526040820152604080519485945185528401526040830190612f80565b91909650600d6000526000805160206151bb833981519152916000925b828410612be957505050810190940193612b8f8661085a612b7c565b80548585018a0152928801928101612bcd565b60ff191683860152505090151560051b8201019450612b8f8661085a612b7c565b600c600090815291508860008051602061515b8339815191525b828410612c505750505091612b4d928201018892612b40565b8054878501870152869450928501928a9101612c37565b60ff19168486015250899390151560051b8301019050612b4d612b40565b600b60009081529150886000805160206151db8339815191525b828410612cb85750505091612b14928201018892612b07565b8054878501870152869450928501928a9101612c9f565b60ff19168486015250899390151560051b8301019050612b14612b07565b3461017157600036600319011261017157806112fb60209260ff600654165b9060038210156102ba5752565b602081019081106001600160401b038211176106c057604052565b606081019081106001600160401b038211176106c057604052565b60c081019081106001600160401b038211176106c057604052565b608081019081106001600160401b038211176106c057604052565b604081019081106001600160401b038211176106c057604052565b6001600160401b0381116106c057604052565b90601f801991011681019081106001600160401b038211176106c057604052565b600511156102ba57565b60038210156102ba5752565b90600182811c92168015612e1a575b6020831014612e0457565b634e487b7160e01b600052602260045260246000fd5b91607f1691612df9565b600e5460009291612e3482612dea565b80825291600190818116908115612e995750600114612e5257505050565b91929350600e60005260008051602061517b833981519152916000925b848410612e8157505060209250010190565b80546020858501810191909152909301928101612e6f565b915050602093945060ff929192191683830152151560051b010190565b60115460009291612ec682612dea565b80825291600190818116908115612e995750600114612ee457505050565b91929350601160005260008051602061519b833981519152916000925b848410612f1357505060209250010190565b80546020858501810191909152909301928101612f01565b9060088210156102ba5752565b60005b838110612f4b5750506000910152565b8181015183820152602001612f3b565b90602091612f7481518092818552858086019101612f38565b601f01601f1916010190565b90604061305592612fd460a08251612f99868251612f2b565b6020810151612fa781612dd4565b602087015284810151858701526060810151606087015260808101516080870152015160a0850190612d0c565b60606020820151805160c0860152602081015160e08601528381015161010086015201516101208401520151906130216101608061014084015260608451918401526101c0830190612f5b565b906101a0604061304560208601519461015f19958686830301610180870152612f5b565b9401519282850301910152612f5b565b90565b6001600160401b0381116106c057601f01601f191660200190565b81601f820112156101715780359061308a82613058565b926130986040519485612db3565b8284526020838301011161017157816000926020809301838601378301015290565b906080600319830112610171576001600160401b0360043581811161017157836130e691600401613073565b92602435918211610171576130fd91600401613073565b906044356001600160a01b0381168103610171579060643590565b606060031982011261017157600435906001600160401b0382116101715761314291600401613073565b906024356001600160a01b0381168103610171579060443590565b6060602061305593818452805151828501520151916040808201520190612f80565b1561318657565b60405162461bcd60e51b815260206004820152600e60248201526d494e56414c49445f53544154555360901b6044820152606490fd5b90816020910312610171575180151581036101715790565b156131db57565b60405162461bcd60e51b81526020600482015260126024820152712ca7aaafa0a922afaa2422afa9a2a62622a960711b6044820152606490fd5b60088110156102ba5760ff801960025416911617600255565b601f811161323a575050565b6000906011825260008051602061519b833981519152906020601f850160051c83019410613283575b601f0160051c01915b82811061327857505050565b81815560010161326c565b9092508290613263565b601f8111613299575050565b600090600d82526000805160206151bb833981519152906020601f850160051c830194106132e2575b601f0160051c01915b8281106132d757505050565b8181556001016132cb565b90925082906132c2565b601f81116132f8575050565b600090600b82526000805160206151db833981519152906020601f850160051c83019410613341575b601f0160051c01915b82811061333657505050565b81815560010161332a565b9092508290613321565b601f8111613357575050565b600090600c825260008051602061515b833981519152906020601f850160051c830194106133a0575b601f0160051c01915b82811061339557505050565b818155600101613389565b9092508290613380565b601f81116133b6575050565b600090600e825260008051602061517b833981519152906020601f850160051c830194106133ff575b601f0160051c01915b8281106133f457505050565b8181556001016133e8565b90925082906133df565b6020808252600180548284015260408084015260ff60025461343060608601838316612f2b565b60081c1661343d81612dd4565b608084015260035460a084015260045460c084015260055460e084015261346e60ff60065416610100850190612d0c565b6007546101208401526008546101408401526009546101609081850152600a546101808501526101a084015260606101c0840152600092600b546134b181612dea565b90816102208401528381169081600014613659575060011461360d575b506101bf1981850381016101e0830152600c546000956134ed82612dea565b808252918581169081156135f057506001146135a4575b50506102009082860301910152600092600d549161352183612dea565b80835292818116908115613587575060011461353f575b5050505090565b92935090600d6000526000805160206151bb83398151915292846000945b8386106135735750505050010138808080613538565b80548587018301529401938590820161355d565b60ff191685840152505090151560051b0101905038808080613538565b8591929650600c60005260008051602061515b83398151915290856000925b8584106135da575050010194905061020038613504565b80548385018601528894909301928791016135c3565b60ff1916828801525090151560051b018401945061020038613504565b909350600b6000526000805160206151db83398151915283836000925b84841061364357505050610240915084010192386134ce565b8054610240858a0101520191019083859161362a565b929550506102409160ff191682860152151560051b84010192386134ce565b1561367f57565b60405162461bcd60e51b815260206004820152600b60248201526a2ba927a723afaa27a5a2a760a91b6044820152606490fd5b604051906136bf82612d85565b60048252630307830360e41b6020830152565b81601f820112156101715780516136e881613058565b926136f66040519485612db3565b81845260208284010111610171576130559160208085019101612f38565b51906001600160a01b038216820361017157565b60185460408051637276069d60e01b815260606004820152958695919490939192909186916001600160a01b0390811691613767906064850190612f5b565b9316602483015283604483015281600098899403915afa92831561386d57859186809681966137f0575b5082868051810103126137ed57506137ab60208601613714565b5081850151036137bc575093929190565b5162461bcd60e51b815260206004820152600b60248201526a57524f4e475f4e4f4e434560a81b6044820152606490fd5b80fd5b97509450915093503d8084873e6138078187612db3565b850193608086860312613869578551916001600160401b039283811161386557866138339189016136d2565b9560208801519383890151986060810151918211613861576138569291016136d2565b959296959438613791565b8780fd5b8580fd5b8380fd5b513d86823e3d90fd5b9081602091031261017157516001600160a01b03811681036101715790565b60ff6006541660038110156102ba576001810361390d575060175460405163f77800e560e01b815290602090829060049082906001600160a01b03165afa9081156107b6576000916138e5575090565b613055915060203d8111613906575b6138fe8183612db3565b810190613876565b503d6138f4565b60020361394c57601754604051635f117aa360e11b815290602090829060049082906001600160a01b03165afa9081156107b6576000916138e5575090565b600090565b60038110156102ba57600052602160205260406000209060005260205260406000205490565b818102929181159184041417156119c557565b919082039182116119c557565b6019546001600160a01b031633036139ab57565b60405162461bcd60e51b815260206004820152600a60248201526913d3931657d59055531560b21b6044820152606490fd5b909493926060926139f2836080810198612d0c565b602083015260408201520152565b919060038310156102ba57604092613a777ffc75911105c5435503d8ce6e41bf92051ed6da32a2077c1a8f73e1d251f64cde936000908382526021602052868220858352602052613a548188842054613a7d565b8097838683955260216020528181208882526020522055604051948594856139dd565b0390a190565b919082018092116119c557565b60038110156102ba576000818152602160205260409384822084835260205284822054818110613b0857918186613ae7613a77947f77008762ca31a384e88f2217752cdef978440c9ad826b7b891c59a8e61281a3198979661398a565b809884878396526021602052818120898252602052205551948594856139dd565b855162461bcd60e51b8152602060048201526014602482015273125394d551919250d251539517d1115413d4d25560621b6044820152606490fd5b15613b4a57565b60405162461bcd60e51b815260206004820152601760248201527f4e4f545f5448455f53454c4c45525f4f525f42555945520000000000000000006044820152606490fd5b604051613b9f8161025b81612e24565b60208151910120604051613bb68161025b81612eb6565b60208151910120908214918215613bcc57505090565b14919050565b90613bdd9291613728565b50505080516020809201206040908151613bfa8161025b81612e24565b83815191012081148015613c88575b15613c4e578151613c1d8161025b81612e24565b80519084012003613c3f575190613c3782610f1481612e24565b815191012090565b5190613c3782610f1481612eb6565b815162461bcd60e51b81526004810184905260136024820152722727aa2fa9a2a62622a92fa7a92fa12aaca2a960691b6044820152606490fd5b508151613c988161025b81612eb6565b8381519101208114613c09565b60405190613cb682610f1481612e24565b815160209283012003613d7d5760405190816000601c54613cd681612dea565b80845290600190818116908115613d5d5750600114613cfe575b505061305592500382612db3565b90939150601c6000527f0e4562a10381dec21b205ed72637e6b1b523bdd0e4d4d50af5cd23dd4500a211936000915b818310613d4557505061305593508201013880613cf0565b85548784018501529485019486945091830191613d2d565b91505061305594925060ff191682840152151560051b8201013880613cf0565b60405190816000601d54613d9081612dea565b80845290600190818116908115613d5d5750600114613db757505061305592500382612db3565b90939150601d6000527f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134f936000915b818310613dfe57505061305593508201013880613cf0565b85548784018501529485019486945091830191613de6565b15613e1d57565b60405162461bcd60e51b815260206004820152600a6024820152692727aa2fa9a2a62622a960b11b6044820152606490fd5b604090613e6d93959492956060820196825260208201520190612d0c565b565b929060ff6002541660088110156102ba57806002613e9692141590816140be575b5061317f565b81156140885760038410156102ba5783158015613eed575b507f7d53254b9393ec490c848e90ed920cf3b18c2151daa4b322875f24dd6301206c9250613a77613ee0838387613a00565b9460405193849384613e4f565b600185146000811561407d575b811561406d575b50613f0c9150613678565b613f15846150cc565b926001600160a01b0380613f28876150cc565b604051636eb1769f60e11b81526001600160a01b0385166004820152306024820152602094929091859183916044918391165afa80156107b657869160009161403d575b5010613fff579060648392600083604051998a9586946323b872dd60e01b8652166004850152306024850152896044850152165af180156107b6577f7d53254b9393ec490c848e90ed920cf3b18c2151daa4b322875f24dd6301206c94613fdc92600092613fe2575b505061508e565b38613eae565b613ff89250803d106107af576107a18183612db3565b3880613fd5565b60405162461bcd60e51b8152600481018490526016602482015275494e53554646494349454e545f414c4c4f57414e434560501b6044820152606490fd5b91508482813d8311614066575b6140548183612db3565b810103126137ed575085905138613f6c565b503d61404a565b90506102ba57613f0c9038613f01565b600287149150613efa565b60405162461bcd60e51b815260206004820152600e60248201526d14d51052d157d49154555254915160921b6044820152606490fd5b60039150141538613e90565b3d156140f5573d906140db82613058565b916140e96040519384612db3565b82523d6000602084013e565b606090565b1561410157565b60405162461bcd60e51b815260206004820152600b60248201526a10d0531317d1905253115160aa1b6044820152606490fd5b9291614141818386613a8a565b60175460408051632ee4b68b60e11b815260049793959194919391926020926001600160a01b0391821684848c81845afa9384156143bb578b9186916000966143c6575b5089516318da001160e01b815292839182905afa9081156143bb57908391600091614384575b5016926143045760038110156142e457806142075750507f44e7d684df94a05f40ae4ea3f03cbd42ce0647bd9d92e4105e296c10088f41aa959697506000808080866141fb955af1610a6e6140ca565b8351928352820152a190565b60018114600081156142f9575b81156142d6575b5092600086936142386142699d946142338998613678565b6150cc565b169289519c8d958694859363a9059cbb60e01b8552840160209093929193604081019460018060a01b031681520152565b03925af19687156142cb577f44e7d684df94a05f40ae4ea3f03cbd42ce0647bd9d92e4105e296c10088f41aa9596976142a9916000916142ae575061508e565b6141fb565b6142c59150833d85116107af576107a18183612db3565b38610b91565b84513d6000823e3d90fd5b90506142e45760008061421b565b60218a634e487b7160e01b6000525260246000fd5b600283149150614214565b915050600381101561436f577f44e7d684df94a05f40ae4ea3f03cbd42ce0647bd9d92e4105e296c10088f41aa9596975060028114600014614350575061434a82614400565b506141fb565b60018103614362575061434a82614cc4565b6142a95761434a826147a9565b602188634e487b7160e01b6000525260246000fd5b91508582813d83116143b4575b61439b8183612db3565b810103126137ed57506143ae8391613714565b386141ab565b503d614391565b88513d6000823e3d90fd5b6143de919650823d84116107af576107a18183612db3565b9438614185565b90816020910312610171575162ffffff811681036101715790565b60175460408051635f117aa360e11b808252919493926020926004916001600160a01b039190859085908590829086165afa9384156143bb5760009461478a575b50601a54885163095ea7b360e01b8082529184166001600160a01b03168582019081526020810189905291959091879183918290600090889083906040010393165af180156146615761476d575b508160175416958851918252858285818a5afa9182156146615760009261474e575b508851906325abd85f60e11b92838352878387818c5afa9283156146c55760009361472f575b508a51928884602481633488e95960e21b9d8e825260008c8301525afa9182156146ef5761450d94600093614717575b50614acd565b826017541691895190815286818681865afa90811561468b576000916146fa575b50895163f77800e560e01b808252989088818881885afa9182156146ef5789916000936146d0575b5060248d5180978193825260018b8301525afa9182156146c557614581946000936146965750614acd565b94816017541692885182815286818381885afa92831561468b57879160009461466c575b50828b518097819382525afa928315614661578795879560009561463d575b508a519081526001600160a01b03909416918401918252602082019590955291938492839160009183906040010393165af180156146325761460e949550614614575b5050614cc4565b50600190565b8161462a92903d106107af576107a18183612db3565b503880614607565b85513d6000823e3d90fd5b60009291955061465990873d8911613906576138fe8183612db3565b9490916145c4565b89513d6000823e3d90fd5b614684919450823d8411613906576138fe8183612db3565b92386145a5565b8a513d6000823e3d90fd5b6146b7919350893d8b116146be575b6146af8183612db3565b8101906143e5565b9138614507565b503d6146a5565b8b513d6000823e3d90fd5b6146e8919350823d8411613906576138fe8183612db3565b9138614556565b8c513d6000823e3d90fd5b6147119150873d8911613906576138fe8183612db3565b3861452e565b6146b79193508a3d8c116146be576146af8183612db3565b614747919350883d8a11613906576138fe8183612db3565b91386144d7565b614766919250863d8811613906576138fe8183612db3565b90386144b1565b61478390863d88116107af576107a18183612db3565b503861448f565b6147a2919450853d8711613906576138fe8183612db3565b9238614441565b90601754600092604080516325abd85f60e11b8082526020936004928581858160018060a01b03809b165afa908115614aa6579087918a91614ab0575b501688813b156137ed57829185875180948193630d0e30db60e41b83525af18015614aa657614a93575b508783918688601754168751968780928882525afa948515614a89578295614a6a575b5087601a541694878751809281868d826148708963095ea7b360e01b9e8f84528d840160209093929193604081019460018060a01b031681520152565b0393165af180156149bc57614a4d575b50876017541693865190815287818581885afa9081156149bc578391614a30575b5086519063f77800e560e01b9586835289838781845afa928315614a075760249392918b918794614a11575b508a51633488e95960e21b815260018982015294859182905afa928315614a0757906149029493929186936149ef5750614acd565b96806017541694865194808652888686818a5afa9586156149e55790899185976149c6575b508589518099819382525afa9586156149bc579183918a989795938a97959661499d575b506149768851998a97889687948552840160209093929193604081019460018060a01b031681520152565b0393165af1908115614994575061460e949550614614575050614cc4565b513d87823e3d90fd5b6149b5919650873d8911613906576138fe8183612db3565b943861494b565b87513d85823e3d90fd5b6149de919750823d8411613906576138fe8183612db3565b9538614927565b88513d86823e3d90fd5b6146b79193508b3d8d116146be576146af8183612db3565b89513d87823e3d90fd5b614a29919450823d8411613906576138fe8183612db3565b92386148cd565b614a479150883d8a11613906576138fe8183612db3565b386148a1565b614a6390883d8a116107af576107a18183612db3565b5038614880565b614a82919550873d8911613906576138fe8183612db3565b9338614833565b86513d84823e3d90fd5b97614a9f849299612da0565b9790614810565b85513d8b823e3d90fd5b614ac79150873d8911613906576138fe8183612db3565b386147e6565b601a54604051636eb1769f60e11b81523060048201526001600160a01b039182166024820181905293959493929091169190602081604481865afa80156107b6578591600091614c8f575b5010614c3d575b50603c4201938442116119c557601a546040516101008101916001600160a01b0316906001600160401b038311818410176106c05760409283529384526001600160a01b03928316602085810191825262ffffff9687168685019081523060608801908152608088019a8b5260a08801998a52600060c0890181815260e08a01828152975163414bf38960e01b81529951891660048b01529451881660248a01529151909816604488015296518516606487015297516084860152955160a4850152945160c4840152511660e482015292918391610104918391905af19081156107b657600091614c0e575090565b906020823d602011614c35575b81614c2860209383612db3565b810103126137ed57505190565b3d9150614c1b565b60405163095ea7b360e01b8152600481019190915260001960248201526020816044816000865af180156107b65715614b1f57614c889060203d6020116107af576107a18183612db3565b5038614b1f565b91506020823d602011614cbc575b81614caa60209383612db3565b810103126137ed575084905138614b18565b3d9150614c9d565b60175460405163f77800e560e01b81526001600160a01b03916020908290600490829086165afa9081156107b657600091614d43575b501690813b1561017157600091602483926040519485938492630852cd8d60e31b845260048401525af180156107b657614d345750600190565b614d3d90612da0565b3861460e565b614d5b915060203d8111613906576138fe8183612db3565b38614cfa565b92909160ff6002541660088110156102ba57806002614d8892141590816140be575061317f565b60038410156102ba5783614df1576000808084819482908215614de7575b6001600160a01b031690f1156107b6577ff710aed018092bd38ab8d98fe9aa682f6b3aa552004e37cb2e0d6e3e669582ee915b613a77613ee0838387613a8a565b6108fc9150614da6565b916001841460008115614ec6575b8115614eb8575b5082614e5d94614e17602093613678565b6001600160a01b03614e28886150cc565b1690600060405180988195829463a9059cbb60e01b84526004840160209093929193604081019460018060a01b031681520152565b03925af19283156107b6577ff710aed018092bd38ab8d98fe9aa682f6b3aa552004e37cb2e0d6e3e669582ee93614e9b91600091614ea0575061508e565b614dd9565b6142c5915060203d81116107af576107a18183612db3565b90506102ba57600082614e06565b600286149150614dff565b90614edc9291613728565b505050805160208092012090604051600060115491614efa83612dea565b8082528185810193600195878782169182600014615073575050600114615027575b614f2892500382612db3565b5190208314908115614f72575b5015614f3f575090565b6064906040519062461bcd60e51b82526004820152600c60248201526b15539055551213d49256915160a21b6044820152fd5b604051600e54925090816000614f8785612dea565b9283835286830195878282169182600014615009575050600114614fbe575b50614fb392500382612db3565b519020821438614f35565b869150600e60005260008051602061517b833981519152906000915b858310614ff1575050614fb3935082010138614fa6565b80548388018501528694508893909201918101614fda565b60ff19168852614fb395151560051b8501019250389150614fa69050565b50506011600052818560008051602061519b833981519152866000915b85831061505a575050614f289350820101614f1c565b8091929450548385880101520191018690868593615044565b60ff19168752614f2894151560051b8401019150614f1c9050565b1561509557565b60405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b6044820152606490fd5b60038110156102ba5760028114615121576001146150e957600090565b60175460405163f77800e560e01b815290602090829060049082906001600160a01b03165afa9081156107b6576000916138e5575090565b50601754604051635f117aa360e11b815290602090829060049082906001600160a01b03165afa9081156107b6576000916138e557509056fedf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7bb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c68d7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db9a26469706673582212205874f625d95f4a43cb1f8385a90fa342181aa7728f98ac4cb91c98bd27e91aa064736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6110,
        "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_bytes32"
      },
      {
        "astId": 6113,
        "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
        "label": "post",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Post)5147_storage"
      },
      {
        "astId": 6116,
        "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
        "label": "postSettingPrivate",
        "offset": 0,
        "slot": "14",
        "type": "t_struct(PostSettingPrivate)5193_storage"
      },
      {
        "astId": 6119,
        "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
        "label": "settings",
        "offset": 0,
        "slot": "20",
        "type": "t_struct(FeedSettings)5123_storage"
      },
      {
        "astId": 6123,
        "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
        "label": "postDurationToDays",
        "offset": 0,
        "slot": "31",
        "type": "t_mapping(t_uint8,t_uint256)"
      },
      {
        "astId": 6127,
        "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
        "label": "validStatuses",
        "offset": 0,
        "slot": "32",
        "type": "t_mapping(t_uint8,t_bool)"
      },
      {
        "astId": 6590,
        "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
        "label": "_deposit",
        "offset": 0,
        "slot": "33",
        "type": "t_mapping(t_uint256,t_mapping(t_bytes32,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_enum(PostStatus)5084": {
        "encoding": "inplace",
        "label": "enum Structures.PostStatus",
        "numberOfBytes": "1"
      },
      "t_enum(PostType)5094": {
        "encoding": "inplace",
        "label": "enum Structures.PostType",
        "numberOfBytes": "1"
      },
      "t_enum(Tokens)5088": {
        "encoding": "inplace",
        "label": "enum Structures.Tokens",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_bytes32,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(bytes32 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_uint256)"
      },
      "t_mapping(t_uint8,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint8,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(FeedSettings)5123_storage": {
        "encoding": "inplace",
        "label": "struct Structures.FeedSettings",
        "members": [
          {
            "astId": 5102,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "punishmentRatio",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5104,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "postCount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5106,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "usersModuleContract",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 5108,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "factoryContract",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 5110,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "verifierContract",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 5112,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "vaultContract",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 5114,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "router",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 5116,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "encodedSymKey",
            "offset": 0,
            "slot": "7",
            "type": "t_bytes_storage"
          },
          {
            "astId": 5118,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "lastMessageForBuyer",
            "offset": 0,
            "slot": "8",
            "type": "t_bytes_storage"
          },
          {
            "astId": 5120,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "lastMessageForSeller",
            "offset": 0,
            "slot": "9",
            "type": "t_bytes_storage"
          },
          {
            "astId": 5122,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "version",
            "offset": 0,
            "slot": "10",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(Post)5147_storage": {
        "encoding": "inplace",
        "label": "struct Structures.Post",
        "members": [
          {
            "astId": 5143,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "creator",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(User)5205_storage"
          },
          {
            "astId": 5146,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "postdata",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(PostData)5157_storage"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_struct(PostData)5157_storage": {
        "encoding": "inplace",
        "label": "struct Structures.PostData",
        "members": [
          {
            "astId": 5150,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "settings",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(PostSettings)5180_storage"
          },
          {
            "astId": 5153,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "escrow",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(PostEscrow)5202_storage"
          },
          {
            "astId": 5156,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "data",
            "offset": 0,
            "slot": "9",
            "type": "t_struct(PostEncryptedData)5164_storage"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(PostEncryptedData)5164_storage": {
        "encoding": "inplace",
        "label": "struct Structures.PostEncryptedData",
        "members": [
          {
            "astId": 5159,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "encryptedData",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes_storage"
          },
          {
            "astId": 5161,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "encryptedKey",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes_storage"
          },
          {
            "astId": 5163,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "decryptedData",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(PostEscrow)5202_storage": {
        "encoding": "inplace",
        "label": "struct Structures.PostEscrow",
        "members": [
          {
            "astId": 5195,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "stake",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5197,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "payment",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5199,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "punishment",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5201,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "penalty",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(PostSettingPrivate)5193_storage": {
        "encoding": "inplace",
        "label": "struct Structures.PostSettingPrivate",
        "members": [
          {
            "astId": 5182,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "vaultIdSeller",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes_storage"
          },
          {
            "astId": 5184,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "sellerTwitterId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5186,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "sellerTelegramId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5188,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "vaultIdBuyer",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes_storage"
          },
          {
            "astId": 5190,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "buyerTwitterId",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5192,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "buyerTelegramId",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(PostSettings)5180_storage": {
        "encoding": "inplace",
        "label": "struct Structures.PostSettings",
        "members": [
          {
            "astId": 5167,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "status",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(PostStatus)5084"
          },
          {
            "astId": 5170,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "postType",
            "offset": 1,
            "slot": "0",
            "type": "t_enum(PostType)5094"
          },
          {
            "astId": 5172,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "creationTimeStamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5174,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "endTimeStamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5176,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "duration",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5179,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "tokenId",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(Tokens)5088"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(User)5205_storage": {
        "encoding": "inplace",
        "label": "struct Structures.User",
        "members": [
          {
            "astId": 5204,
            "contract": "contracts/features/MecenateFeed.sol:MecenateFeed",
            "label": "vaultId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}