{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"
    },
    "contracts/factories/MecenateFeedFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"../interfaces/IMecenateUsers.sol\";\nimport \"../interfaces/IMecenateTreasury.sol\";\nimport \"../interfaces/IMecenateVerifier.sol\";\nimport \"../modules/FeedViewer.sol\";\n\ncontract MecenateFeedFactory is Ownable, FeedViewer {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    string public version;\n    uint8 public versionCount;\n\n    bytes internal feedByteCode;\n\n    uint256 public contractCounter;\n    EnumerableSet.AddressSet internal feeds;\n    Structures.FactorySettings internal settings;\n    mapping(uint8 => uint24) internal routerFee;\n    mapping(bytes32 => EnumerableSet.AddressSet) internal feedStore;\n    mapping(address => bool) internal createdContracts;\n\n    event FeedCreated(address indexed addr);\n\n    bool public burnEnabled = false;\n\n    constructor(\n        address _usersModuleContract,\n        address _treasuryContract,\n        address _verifierContract,\n        address _vaultContract\n    ) {\n        settings.usersModuleContract = _usersModuleContract;\n        settings.treasuryContract = _treasuryContract;\n        settings.verifierContract = _verifierContract;\n        settings.vaultContract = _vaultContract;\n    }\n\n    function changeVersion(string memory _version) external onlyOwner {\n        version = _version;\n    }\n\n    function treasuryContract() external view returns (address) {\n        return settings.treasuryContract;\n    }\n\n    function identityContract() external view returns (address) {\n        return settings.verifierContract;\n    }\n\n    function daiToken() external view returns (address) {\n        return settings.daiToken;\n    }\n\n    function wethToken() external view returns (address) {\n        return settings.wethToken;\n    }\n\n    function museToken() external view returns (address) {\n        return settings.museToken;\n    }\n\n    function router() external view returns (address) {\n        return settings.router;\n    }\n\n    function getRouterFee(uint8 tokenId) external view returns (uint24) {\n        return routerFee[tokenId];\n    }\n\n    function setRouterFee(uint8 tokenId, uint24 fee) external onlyOwner {\n        routerFee[tokenId] = fee;\n    }\n\n    function setBurnEnabled(bool _burnEnabled) external onlyOwner {\n        burnEnabled = _burnEnabled;\n    }\n\n    function isFeed(address _feed) external view returns (bool) {\n        return createdContracts[_feed];\n    }\n\n    function changeMultipleSettings(\n        address _treasury,\n        address _vault,\n        address _usersModule,\n        address _wethToken,\n        address _museToken,\n        address _daiToken,\n        address _router\n    ) external onlyOwner {\n        settings.treasuryContract = _treasury;\n        settings.vaultContract = _vault;\n        settings.usersModuleContract = _usersModule;\n        settings.wethToken = _wethToken;\n        settings.museToken = _museToken;\n        settings.daiToken = _daiToken;\n        settings.router = _router;\n    }\n\n    function setFeedByteCode(bytes memory _byteCode) external onlyOwner {\n        feedByteCode = _byteCode;\n        // add version incremental to the current string\n        versionCount++;\n        version = string(abi.encodePacked(version, \".\", versionCount));\n    }\n\n    function buildFeed(\n        bytes memory sismoConnectResponse,\n        address _to,\n        bytes32 _nonce\n    ) external payable returns (address) {\n        require(msg.sender == settings.vaultContract, \"ONLY_VAULT\");\n        (\n            bytes memory vaultId,\n            ,\n            ,\n            bytes memory signedMessage\n        ) = IMecenateVerifier(settings.verifierContract).sismoVerify(\n                sismoConnectResponse,\n                _to,\n                _nonce\n            );\n\n        (address to, bytes32 nonce) = abi.decode(\n            signedMessage,\n            (address, bytes32)\n        );\n\n        bytes32 encryptedVaultId = keccak256(vaultId);\n\n        bytes memory constructorArguments = abi.encode(\n            encryptedVaultId,\n            settings.usersModuleContract,\n            settings.verifierContract,\n            settings.vaultContract,\n            address(this),\n            version\n        );\n\n        require(_nonce == nonce, \"WRONG_NONCE\");\n        require(_to == to, \"WRONG_TO\");\n\n        require(\n            IMecenateUsers(settings.usersModuleContract).checkifUserExist(\n                encryptedVaultId\n            ),\n            \"user does not exist\"\n        );\n\n        require(msg.value >= getCreationFee(), \"NOT_ENOUGH_FEE\");\n\n        (bool _result, ) = payable(settings.treasuryContract).call{\n            value: msg.value\n        }(\"\");\n\n        require(_result, \"CALL_FAILED\");\n\n        contractCounter++;\n\n        address addr;\n\n        bytes memory tempByteCode = feedByteCode; // Carico la variabile di storage in una variabile locale\n\n        // Concatena il bytecode e gli argomenti del costruttore\n        bytes memory bytecodeWithConstructor = abi.encodePacked(\n            tempByteCode,\n            constructorArguments\n        );\n\n        // Deploy del contratto con gli argomenti del costruttore\n        assembly {\n            addr := create(\n                0,\n                add(bytecodeWithConstructor, 0x20),\n                mload(bytecodeWithConstructor)\n            )\n            if iszero(extcodesize(addr)) {\n                revert(0, 0)\n            }\n        }\n\n        address feed = addr;\n\n        feeds.add(address(feed));\n        feedStore[encryptedVaultId].add(address(feed));\n        createdContracts[address(feed)] = true;\n\n        emit FeedCreated(address(feed));\n\n        return address(feed);\n    }\n\n    function getFeeds() external view returns (address[] memory) {\n        return feeds.values();\n    }\n\n    function getFeedsOwned(\n        bytes32 vaultId\n    ) external view returns (address[] memory) {\n        return feedStore[vaultId].values();\n    }\n\n    function getFeedsInfoOwned(\n        bytes32 vaultId\n    ) external view returns (Structures.Feed[] memory) {\n        return _getFeedsInfo(feedStore[vaultId].values());\n    }\n\n    function getFeedInfo(\n        address _feed\n    ) external view returns (Structures.Feed memory) {\n        return _getFeedInfo(_feed);\n    }\n\n    function getFeedsInfo() external view returns (Structures.Feed[] memory) {\n        return _getFeedsInfo(feeds.values());\n    }\n\n    function isContractCreated(\n        address contractAddress\n    ) external view returns (bool) {\n        return createdContracts[contractAddress];\n    }\n\n    function getCreationFee() internal view returns (uint256) {\n        return IMecenateTreasury(settings.treasuryContract).fixedFee();\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts/features/MecenateFeed.sol": {
      "content": "/**\r\n * @title MecenateFeed\r\n * @dev This contract implements the MecenateFeed feature, which allows users to create and manage posts for crowdfunding campaigns.\r\n * The contract inherits from several modules that provide functionality for post creation, acceptance, submission, finalization, and renouncement.\r\n * The contract also provides several view functions to retrieve information about a post's buyer payment, seller deposit, seller stake, buyer stake, payment requested, post status, and post count.\r\n */\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport \"../modules/Events.sol\";\r\nimport \"../modules/Creation.sol\";\r\nimport \"../modules/Acceptance.sol\";\r\nimport \"../modules/Submission.sol\";\r\nimport \"../modules/Finalization.sol\";\r\nimport \"../modules/Renounce.sol\";\r\nimport \"../modules/Message.sol\";\r\n\r\ncontract MecenateFeed is\r\n    Events,\r\n    Message,\r\n    Creation,\r\n    Acceptance,\r\n    Renounce,\r\n    Submission,\r\n    Finalization\r\n{\r\n    constructor(\r\n        bytes32 _owner,\r\n        address _usersModuleContract,\r\n        address _verifierContract,\r\n        address _vaultContract,\r\n        address _factoryContract,\r\n        string memory _version\r\n    )\r\n        Data(\r\n            _usersModuleContract,\r\n            _verifierContract,\r\n            _vaultContract,\r\n            _factoryContract,\r\n            _version\r\n        )\r\n    {\r\n        owner = _owner;\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IMecenateFeed.sol": {
      "content": "pragma solidity 0.8.19;\n\nimport \"../library/Structures.sol\";\n\ninterface IMecenateFeed {\n    function getTotalStaked() external view returns (uint256);\n\n    function postCount() external view returns (uint256);\n\n    function acceptPost(\n        bytes memory sismoConnectResponse,\n        address _to,\n        bytes32 _nonce,\n        Structures.Tokens,\n        uint256 _amount\n    ) external payable;\n\n    function getSellerStake() external view returns (uint256);\n\n    function getBuyerStake() external view returns (uint256);\n\n    function getPaymentRequested() external view returns (uint256);\n\n    function getStakeRequested() external view returns (uint256);\n\n    function getStatus() external view returns (Structures.PostStatus status);\n\n    function getTokenId() external view returns (Structures.Tokens tokenId);\n\n    function owner() external view returns (bytes32);\n\n    function version() external view returns (string memory);\n}\n"
    },
    "contracts/interfaces/IMecenateFeedFactory.sol": {
      "content": "pragma solidity 0.8.19;\n\ninterface IMecenateFeedFactory {\n    function owner() external view returns (address payable);\n\n    function treasuryContract() external view returns (address payable);\n\n    function identityContract() external view returns (address);\n\n    function feeds() external view returns (address[] memory);\n\n    function contractCounter() external view returns (uint256);\n\n    function isFeed(address _feed) external view returns (bool);\n\n    function museToken() external view returns (address);\n\n    function wethToken() external view returns (address);\n\n    function daiToken() external view returns (address);\n\n    function router() external view returns (address);\n\n    function getRouterFee(uint8 tokenId) external view returns (uint24);\n\n    function burnEnabled() external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IMecenateTreasury.sol": {
      "content": "pragma solidity 0.8.19;\r\n\r\ninterface IMecenateTreasury {\r\n    function globalFee() external view returns (uint256);\r\n\r\n    function fixedFee() external view returns (uint256);\r\n}\r\n"
    },
    "contracts/interfaces/IMecenateUsers.sol": {
      "content": "pragma solidity 0.8.19;\r\nimport \"../library/Structures.sol\";\r\n\r\ninterface IMecenateUsers {\r\n    function checkifUserExist(bytes32 vaultId) external view returns (bool);\r\n\r\n    function getUserData(\r\n        address user\r\n    ) external view returns (Structures.User memory);\r\n\r\n    function getUserCount() external view returns (uint256);\r\n\r\n    function getUserAt(uint256 index) external view returns (address);\r\n\r\n    function getUserVaultIdAt(uint256 index) external view returns (bytes32);\r\n}\r\n"
    },
    "contracts/interfaces/IMecenateVerifier.sol": {
      "content": "pragma solidity 0.8.19;\r\n\r\ninterface IMecenateVerifier {\r\n    function sismoVerify(\r\n        bytes memory sismoConnectResponse,\r\n        address _to,\r\n        bytes32 _nonce\r\n    ) external view returns (bytes memory, uint256, uint256, bytes memory);\r\n}\r\n"
    },
    "contracts/interfaces/IMUSE.sol": {
      "content": "pragma solidity 0.8.19;\r\n\r\n// import IERC20 from openzeppelin\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface IMUSE is IERC20 {\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    ) external returns (bool);\r\n\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) external returns (bool);\r\n\r\n    function mint(uint256 amount) external returns (bool);\r\n\r\n    function burn(uint256 amount) external returns (bool);\r\n}\r\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "pragma solidity 0.8.19;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function withdraw(uint256) external;\r\n}\r\n"
    },
    "contracts/layer/MecenateBay.sol": {
      "content": "/**\r\n * @title MecenateBay\r\n * @dev This contract manages the creation and acceptance of requests for Mecenate feeds. It also verifies user identity using the Sismo protocol.\r\n */\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"../interfaces/IMecenateVerifier.sol\";\r\nimport \"../library/Structures.sol\";\r\nimport \"../modules/FeedViewer.sol\";\r\nimport \"../interfaces/IMecenateUsers.sol\";\r\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\ncontract MecenateBay is Ownable, FeedViewer {\r\n    using SafeERC20 for IERC20;\r\n\r\n    Structures.BayRequest[] public allRequests;\r\n\r\n    Structures.BayRequestPrivate[] public allRequestsPrivate;\r\n\r\n    address public usersMouduleContract;\r\n\r\n    address public verifierContract;\r\n\r\n    address public vaultContract;\r\n\r\n    address public museToken;\r\n\r\n    address public daiToken;\r\n\r\n    mapping(bytes32 => Structures.BayRequest[]) public requests;\r\n\r\n    uint256 public contractCounter;\r\n\r\n    mapping(uint256 => bytes) private sismoResponseMapping;\r\n\r\n    event RequestCreated(\r\n        bytes32 indexed user,\r\n        Structures.BayRequest,\r\n        uint256 indexed index\r\n    );\r\n\r\n    event RequestAccepted(\r\n        bytes32 indexed user,\r\n        Structures.BayRequest,\r\n        uint256 indexed index\r\n    );\r\n\r\n    constructor(\r\n        address _usersMouduleContract,\r\n        address _verifierContract,\r\n        address _vaultContract\r\n    ) {\r\n        usersMouduleContract = _usersMouduleContract;\r\n        verifierContract = _verifierContract;\r\n        vaultContract = _vaultContract;\r\n    }\r\n\r\n    function changeMuseToken(address _museToken) external onlyOwner {\r\n        museToken = _museToken;\r\n    }\r\n\r\n    function changeDaiToken(address _daiToken) external onlyOwner {\r\n        daiToken = _daiToken;\r\n    }\r\n\r\n    function createRequest(\r\n        Structures.BayRequest memory request,\r\n        bytes memory sismoConnectResponse,\r\n        address _to,\r\n        bytes32 _nonce\r\n    ) public payable returns (Structures.BayRequest memory) {\r\n        if (request.tokenId == Structures.Tokens.NaN) {\r\n            require(msg.value > 0, \"BAY:payment is not enough\");\r\n        } else if (request.tokenId == Structures.Tokens.DAI) {\r\n            IERC20(daiToken).safeTransferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                request.payment\r\n            );\r\n        } else if (request.tokenId == Structures.Tokens.MUSE) {\r\n            IERC20(museToken).safeTransferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                request.payment\r\n            );\r\n        }\r\n\r\n        require(request.payment > 0, \"BAY:payment is not enough\");\r\n\r\n        (bytes memory vaultId, , , ) = _sismoVerify(\r\n            sismoConnectResponse,\r\n            _to,\r\n            _nonce\r\n        );\r\n\r\n        bytes32 encryptedVaultId = keccak256(vaultId);\r\n\r\n        require(\r\n            IMecenateUsers(usersMouduleContract).checkifUserExist(\r\n                keccak256(vaultId)\r\n            ),\r\n            \"user does not exist\"\r\n        );\r\n\r\n        require(request.stake > 0, \"BAY:stake is not enough\");\r\n\r\n        require(request.payment == msg.value, \"BAY:payment is not enough\");\r\n\r\n        require(request.payment > 0, \"BAY:payment is not enough\");\r\n\r\n        requests[encryptedVaultId].push(request);\r\n\r\n        allRequests.push(request);\r\n\r\n        allRequestsPrivate.push(\r\n            Structures.BayRequestPrivate({\r\n                vaultIdSeller: \"0x00\",\r\n                sellerResponse: \"0x00\",\r\n                vaultIdBuyer: vaultId,\r\n                buyerResponse: sismoConnectResponse,\r\n                buyerTo: _to,\r\n                buyerNonce: _nonce\r\n            })\r\n        );\r\n\r\n        contractCounter++;\r\n\r\n        emit RequestCreated(encryptedVaultId, request, allRequests.length - 1);\r\n    }\r\n\r\n    function acceptRequest(\r\n        uint256 index,\r\n        address _feed,\r\n        bytes memory sismoConnectResponse,\r\n        address _to,\r\n        bytes32 _nonce\r\n    ) public {\r\n        (bytes memory vaultId, , , ) = _sismoVerify(\r\n            sismoConnectResponse,\r\n            _to,\r\n            _nonce\r\n        );\r\n\r\n        bytes32 encryptedVaultId = keccak256(vaultId);\r\n\r\n        Structures.Feed memory feed = _getFeedInfo(_feed);\r\n\r\n        require(\r\n            allRequests[index].payment >= feed.paymentRequested,\r\n            \"BAY:payment is not the same of the feed\"\r\n        );\r\n\r\n        require(\r\n            feed.stakeRequested >= allRequests[index].stake,\r\n            \"BAY:stake is not the same of the feed\"\r\n        );\r\n\r\n        require(\r\n            IMecenateUsers(usersMouduleContract).checkifUserExist(\r\n                encryptedVaultId\r\n            ),\r\n            \"BAY:user does not exist\"\r\n        );\r\n\r\n        allRequestsPrivate.push(\r\n            Structures.BayRequestPrivate({\r\n                vaultIdSeller: vaultId,\r\n                sellerResponse: sismoConnectResponse,\r\n                vaultIdBuyer: allRequestsPrivate[index].vaultIdBuyer,\r\n                buyerResponse: allRequestsPrivate[index].buyerResponse,\r\n                buyerTo: allRequestsPrivate[index].buyerTo,\r\n                buyerNonce: allRequestsPrivate[index].buyerNonce\r\n            })\r\n        );\r\n\r\n        if (allRequests[index].tokenId != Structures.Tokens.NaN) {\r\n            if (allRequests[index].tokenId == Structures.Tokens.DAI) {\r\n                IERC20(daiToken).approve(\r\n                    msg.sender,\r\n                    allRequests[index].payment\r\n                );\r\n            } else if (allRequests[index].tokenId == Structures.Tokens.MUSE) {\r\n                IERC20(museToken).approve(\r\n                    msg.sender,\r\n                    allRequests[index].payment\r\n                );\r\n            }\r\n\r\n            IMecenateFeed(_feed).acceptPost{value: 0}(\r\n                allRequestsPrivate[index].buyerResponse,\r\n                allRequestsPrivate[index].buyerTo,\r\n                allRequestsPrivate[index].buyerNonce,\r\n                allRequests[index].tokenId,\r\n                allRequests[index].payment\r\n            );\r\n        } else {\r\n            IMecenateFeed(_feed).acceptPost{value: allRequests[index].payment}(\r\n                allRequestsPrivate[index].buyerResponse,\r\n                allRequestsPrivate[index].buyerTo,\r\n                allRequestsPrivate[index].buyerNonce,\r\n                allRequests[index].tokenId,\r\n                allRequests[index].payment\r\n            );\r\n        }\r\n\r\n        allRequests[index].accepted = true;\r\n\r\n        allRequests[index].postAddress = _feed;\r\n\r\n        allRequests[index].postCount = feed.postCount;\r\n\r\n        emit RequestAccepted(encryptedVaultId, allRequests[index], index);\r\n    }\r\n\r\n    function _sismoVerify(\r\n        bytes memory sismoConnectResponse,\r\n        address _to,\r\n        bytes32 _nonce\r\n    ) internal view returns (bytes memory, uint256, uint256, bytes memory) {\r\n        (\r\n            bytes memory vaultId,\r\n            uint256 twitterId,\r\n            uint256 telegramId,\r\n            bytes memory signedMessage\r\n        ) = IMecenateVerifier(verifierContract).sismoVerify(\r\n                sismoConnectResponse,\r\n                _to,\r\n                _nonce\r\n            );\r\n\r\n        (address to, bytes32 nonce) = abi.decode(\r\n            signedMessage,\r\n            (address, bytes32)\r\n        );\r\n\r\n        require(_nonce == nonce, \"Not Same Nonce\");\r\n\r\n        return (vaultId, twitterId, telegramId, signedMessage);\r\n    }\r\n\r\n    function getRequests()\r\n        public\r\n        view\r\n        returns (Structures.BayRequest[] memory)\r\n    {\r\n        return allRequests;\r\n    }\r\n\r\n    function getRequestForAddress(\r\n        bytes32 _user\r\n    ) public view returns (Structures.BayRequest[] memory) {\r\n        return requests[_user];\r\n    }\r\n\r\n    // removéthe request and refund the user delete the array and move the last element to the index\r\n    function removeRequest(\r\n        uint256 index,\r\n        bytes memory sismoConnectResponse,\r\n        address _to,\r\n        bytes32 _nonce\r\n    ) public {\r\n        (\r\n            bytes memory vaultId,\r\n            uint256 twitterId,\r\n            uint256 telegramId,\r\n            bytes memory signedMessage\r\n        ) = _sismoVerify(sismoConnectResponse, _to, _nonce);\r\n\r\n        bytes32 encryptedVaultId = keccak256(vaultId);\r\n\r\n        require(\r\n            encryptedVaultId ==\r\n                keccak256(allRequestsPrivate[index].vaultIdBuyer),\r\n            \"BAY:you are not the buyer\"\r\n        );\r\n\r\n        require(\r\n            allRequests[index].accepted == false,\r\n            \"BAY:request is already accepted\"\r\n        );\r\n\r\n        Structures.BayRequest memory requestToRemove = allRequests[index];\r\n\r\n        //  send eth with data to the vaultctx\r\n        (bool _result, ) = vaultContract.call{value: requestToRemove.payment}(\r\n            sismoConnectResponse\r\n        );\r\n\r\n        require(_result, \"BAY:Vault call failed\");\r\n\r\n        // Remove from allRequests array\r\n        uint256 lastIndex = allRequests.length - 1;\r\n        if (index < lastIndex) {\r\n            allRequests[index] = allRequests[lastIndex];\r\n        }\r\n        allRequests.pop();\r\n\r\n        // Remove from allRequestsPrivate array\r\n        uint256 lastIndexPrivate = allRequestsPrivate.length - 1;\r\n        if (index < lastIndexPrivate) {\r\n            allRequestsPrivate[index] = allRequestsPrivate[lastIndexPrivate];\r\n        }\r\n        allRequestsPrivate.pop();\r\n\r\n        // Remove from requests mapping\r\n        for (uint256 i = 0; i < requests[encryptedVaultId].length; i++) {\r\n            if (\r\n                requests[encryptedVaultId][i].payment ==\r\n                requestToRemove.payment &&\r\n                requests[encryptedVaultId][i].stake == requestToRemove.stake &&\r\n                requests[encryptedVaultId][i].postAddress ==\r\n                requestToRemove.postAddress &&\r\n                requests[encryptedVaultId][i].postCount ==\r\n                requestToRemove.postCount\r\n            ) {\r\n                uint256 lastIndexSender = requests[encryptedVaultId].length - 1;\r\n                if (i < lastIndexSender) {\r\n                    requests[encryptedVaultId][i] = requests[encryptedVaultId][\r\n                        lastIndexSender\r\n                    ];\r\n                }\r\n                requests[encryptedVaultId].pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function changeVault(address _vault) external onlyOwner {\r\n        vaultContract = _vault;\r\n    }\r\n\r\n    function changeVerifier(address _verifier) external onlyOwner {\r\n        verifierContract = _verifier;\r\n    }\r\n\r\n    function changeUsersModule(address _usersModule) external onlyOwner {\r\n        usersMouduleContract = _usersModule;\r\n    }\r\n\r\n    receive() external payable {}\r\n}\r\n"
    },
    "contracts/library/Structures.sol": {
      "content": "/**\n * @title Structures\n * @dev This library defines various data structures used in the Mecenate platform.\n */\npragma solidity 0.8.19;\n\nlibrary Structures {\n    enum PostStatus {\n        Waiting,\n        Proposed,\n        Accepted,\n        Submitted,\n        Finalized,\n        Punished,\n        Revealed,\n        Renounced\n    }\n    enum Tokens {\n        NaN,\n        MUSE,\n        DAI\n    }\n    enum PostType {\n        Text,\n        Image,\n        Video,\n        Audio,\n        File\n    }\n    enum PostDuration {\n        OneDay,\n        ThreeDays,\n        OneWeek,\n        TwoWeeks,\n        OneMonth\n    }\n\n    struct FeedSettings {\n        uint256 punishmentRatio;\n        uint256 postCount;\n        address usersModuleContract;\n        address factoryContract;\n        address verifierContract;\n        address vaultContract;\n        address router;\n        bytes encodedSymKey;\n        bytes lastMessageForBuyer;\n        bytes lastMessageForSeller;\n        string version;\n    }\n\n    struct FactorySettings {\n        address treasuryContract;\n        address usersModuleContract;\n        address verifierContract;\n        address vaultContract;\n        address museToken;\n        address daiToken;\n        address wethToken;\n        address router;\n    }\n\n    /**\n     * @dev Struct representing a post on the Mecenate platform.\n     */\n    struct Post {\n        User creator;\n        PostData postdata;\n    }\n\n    /**\n     * @dev Struct representing the data of a post on the Mecenate platform.\n     */\n    struct PostData {\n        PostSettings settings;\n        PostEscrow escrow;\n        PostEncryptedData data;\n    }\n\n    /**\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\n     */\n    struct PostEncryptedData {\n        bytes encryptedData;\n        bytes encryptedKey;\n        bytes decryptedData;\n    }\n\n    /**\n     * @dev Struct representing the settings of a post on the Mecenate platform.\n     */\n    struct PostSettings {\n        PostStatus status;\n        PostType postType;\n        uint256 creationTimeStamp;\n        uint256 endTimeStamp;\n        uint256 duration;\n        Tokens tokenId;\n    }\n\n    /**\n     * @dev Struct representing the private settings of a post on the Mecenate platform.\n     */\n    struct PostSettingPrivate {\n        bytes vaultIdSeller;\n        uint256 sellerTwitterId;\n        uint256 sellerTelegramId;\n        bytes vaultIdBuyer;\n        uint256 buyerTwitterId;\n        uint256 buyerTelegramId;\n    }\n\n    /**\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\n     */\n    struct PostEscrow {\n        uint256 stake;\n        uint256 payment;\n        uint256 punishment;\n        uint256 penalty;\n    }\n\n    /**\n     * @dev Struct representing a user on the Mecenate platform.\n     */\n    struct User {\n        bytes32 vaultId;\n    }\n\n    /**\n     * @dev Struct representing a feed on the Mecenate platform.\n     */\n    struct Feed {\n        address contractAddress;\n        bytes32 operator;\n        uint256 sellerStake;\n        uint256 buyerStake;\n        uint256 totalStake;\n        uint256 postCount;\n        uint256 paymentRequested;\n        uint256 stakeRequested;\n        PostStatus status;\n        Tokens tokenId;\n        string version;\n    }\n\n    /**\n     * @dev Struct representing a bay request on the Mecenate platform.\n     */\n    struct BayRequest {\n        bytes32 request;\n        uint256 payment;\n        uint256 stake;\n        address postAddress;\n        bool accepted;\n        uint256 postCount;\n        Tokens tokenId;\n    }\n\n    /**\n     * @dev Struct representing the private settings of a bay request on the Mecenate platform.\n     */\n    struct BayRequestPrivate {\n        bytes vaultIdSeller;\n        bytes sellerResponse;\n        bytes vaultIdBuyer;\n        bytes buyerResponse;\n        address buyerTo;\n        bytes32 buyerNonce;\n    }\n}\n"
    },
    "contracts/modules/Acceptance.sol": {
      "content": "/**\n * @title Acceptance\n * @dev This contract is an abstract contract that inherits from Events and Staking contracts. It provides a function to accept a post and add stake to the post. The function accepts a Sismo Connect response as a parameter and verifies the user existence. It also checks if the user is not the seller and if the post is in Proposed status. If the post has an escrow payment, it checks if the buyer has paid enough and adds the payment to the post's escrow. If the post does not have an escrow payment, it requires a payment from the buyer and adds it to the post's escrow. Finally, it changes the post status to Accepted and emits an Accepted event.\n */\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport \"./Events.sol\";\nimport \"./Staking.sol\";\n\nabstract contract Acceptance is Events, Staking {\n    function acceptPost(\n        bytes memory sismoConnectResponse,\n        address _to,\n        bytes32 _nonce,\n        Structures.Tokens tokenId,\n        uint256 _paymentAmount\n    ) external payable virtual {\n        require(\n            validStatuses[uint8(Structures.PostStatus.Proposed)],\n            \"INVALID_STATUS\"\n        );\n\n        _checkToken(tokenId);\n\n        uint256 amountToAdd = tokenId == Structures.Tokens.NaN\n            ? msg.value\n            : _paymentAmount;\n        bytes32 sellerVaultIdHash = keccak256(postSettingPrivate.vaultIdSeller);\n\n        // Get encryptedVaultId only once\n        (\n            bytes memory vaultId,\n            uint256 twitterId,\n            uint256 telegramId,\n\n        ) = _verifyNonce(sismoConnectResponse, _to, _nonce);\n        bytes32 encryptedVaultId = keccak256(vaultId);\n\n        // Use local variable for repeated calls\n        uint256 sellerStake = Deposit._getDeposit(tokenId, sellerVaultIdHash);\n\n        require(sellerStake >= post.postdata.escrow.stake, \"STAKE_INCORRECT\");\n        require(\n            IMecenateUsers(settings.usersModuleContract).checkifUserExist(\n                encryptedVaultId\n            ),\n            \"USERT_NOT_EXIST\"\n        );\n        require(encryptedVaultId != sellerVaultIdHash, \"YOU_ARE_THE_SELLER\");\n\n        if (post.postdata.escrow.payment > 0) {\n            require(\n                _paymentAmount >= post.postdata.escrow.payment,\n                \"NOT_ENOUGH_PAYMENT\"\n            );\n        } else {\n            require(msg.value > 0, \"ZERO_MSGVALUE\");\n            require(_paymentAmount > 0, \"ZERO_PAYMENT\");\n        }\n\n        uint256 payment = _addStake(\n            tokenId,\n            encryptedVaultId,\n            settings.vaultContract,\n            amountToAdd\n        );\n\n        // Update all at once\n        post.postdata.escrow.payment = payment;\n        post.postdata.settings.status = Structures.PostStatus.Accepted;\n        _changeStatus(Structures.PostStatus.Accepted);\n\n        // Update private settings\n        postSettingPrivate.vaultIdBuyer = vaultId;\n        postSettingPrivate.buyerTwitterId = twitterId;\n        postSettingPrivate.buyerTelegramId = telegramId;\n\n        emit Accepted(post);\n    }\n}\n"
    },
    "contracts/modules/BurnDAI.sol": {
      "content": "pragma solidity 0.8.19;\n\nimport \"./BurnMUSE.sol\";\nimport \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"../interfaces/IWETH.sol\";\n\nabstract contract BurnDAI is BurnMUSE {\n    using SafeMath for uint256;\n\n    function _burnFrom(\n        address from,\n        uint256 value\n    ) internal override returns (bool success) {\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\n            .transferFrom(from, address(this), value);\n\n        _burn(value);\n\n        return true;\n    }\n\n    function _burnDai(uint256 value) internal returns (bool success) {\n        // approve uniswap for token transfer\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\n            .approve(settings.router, value);\n\n        // swap IMecenateFeedFactory(settings.factoryContract).daiToken() for MUSE\n        uint256 tokens_sold = value;\n\n        uint256 tokens_bought = _swapTokensForToken(\n            IMecenateFeedFactory(settings.factoryContract).daiToken(),\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\n            IMecenateFeedFactory(settings.factoryContract).getRouterFee(0),\n            tokens_sold\n        );\n\n        uint256 tokens_sold_to_muse = _swapTokensForToken(\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\n            IMecenateFeedFactory(settings.factoryContract).museToken(),\n            IMecenateFeedFactory(settings.factoryContract).getRouterFee(1),\n            tokens_bought\n        );\n\n        IERC20(IMecenateFeedFactory(settings.factoryContract).museToken())\n            .approve(\n                IMecenateFeedFactory(settings.factoryContract).museToken(),\n                tokens_sold_to_muse\n            );\n\n        // burn MUSE\n        BurnMUSE._burn(tokens_sold_to_muse);\n\n        return true;\n    }\n\n    function _sellWethAndBurnMuse(\n        uint256 value\n    ) internal returns (bool success) {\n        // deposit IMecenateFeedFactory(settings.factoryContract).wethToken()\n        IWETH(IMecenateFeedFactory(settings.factoryContract).wethToken())\n            .deposit{value: value}();\n\n        // approve uniswap for token transfer\n        IERC20(IMecenateFeedFactory(settings.factoryContract).wethToken())\n            .approve(settings.router, value);\n\n        // swap IMecenateFeedFactory(settings.factoryContract).wethToken() for MUSE\n        uint256 tokens_sold = value;\n\n        uint256 tokens_bought = _swapTokensForToken(\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\n            IMecenateFeedFactory(settings.factoryContract).museToken(),\n            IMecenateFeedFactory(settings.factoryContract).getRouterFee(1),\n            tokens_sold\n        );\n\n        IERC20(IMecenateFeedFactory(settings.factoryContract).museToken())\n            .approve(\n                IMecenateFeedFactory(settings.factoryContract).museToken(),\n                tokens_bought\n            );\n\n        // burn MUSE\n        BurnMUSE._burn(tokens_bought);\n\n        return true;\n    }\n\n    function getTokenAddress()\n        internal\n        view\n        virtual\n        override\n        returns (address token)\n    {\n        return IMecenateFeedFactory(settings.factoryContract).daiToken();\n    }\n\n    function getExchangeAddress()\n        internal\n        view\n        override\n        returns (address exchange)\n    {\n        exchange = settings.router;\n    }\n\n    function _swapTokensForToken(\n        address tokenIn,\n        address tokenOut,\n        uint24 fee,\n        uint256 amountIn\n    ) internal returns (uint256 amountOut) {\n        // Check and approve allowance\n        uint256 allowance = IERC20(tokenIn).allowance(\n            address(this),\n            settings.router\n        );\n        if (allowance < amountIn) {\n            IERC20(tokenIn).approve(settings.router, type(uint256).max);\n        }\n\n        // Prepare parameters\n        address recipient = address(this);\n        uint256 deadline = block.timestamp + 60; // 15 seconds from the current block timestamp\n\n        // Perform the swap\n        // Refer to the Uniswap V3 documentation for details on the params.\n        amountOut = ISwapRouter(settings.router).exactInputSingle(\n            ISwapRouter.ExactInputSingleParams({\n                tokenIn: tokenIn,\n                tokenOut: tokenOut,\n                fee: fee,\n                recipient: recipient,\n                deadline: deadline,\n                amountIn: amountIn,\n                amountOutMinimum: 0, // you may want to set a minimum here\n                sqrtPriceLimitX96: 0\n            })\n        );\n\n        return amountOut;\n    }\n}\n"
    },
    "contracts/modules/BurnMUSE.sol": {
      "content": "pragma solidity 0.8.19;\nimport \"../interfaces/IMUSE.sol\";\nimport \"../interfaces/IMecenateFeedFactory.sol\";\nimport \"./Events.sol\";\n\nabstract contract BurnMUSE is Events {\n    function _burn(uint256 value) internal virtual returns (bool success) {\n        IERC20(IMecenateFeedFactory(settings.factoryContract).museToken())\n            .approve(\n                IMecenateFeedFactory(settings.factoryContract).museToken(),\n                value\n            );\n\n        IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken()).burn(\n            value\n        );\n        return true;\n    }\n\n    function _burnFrom(\n        address from,\n        uint256 value\n    ) internal virtual returns (bool success) {\n        IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken())\n            .transferFrom(from, address(this), value);\n        _burn(value);\n        return true;\n    }\n\n    function getTokenAddress() internal view virtual returns (address token) {\n        return IMecenateFeedFactory(settings.factoryContract).museToken();\n    }\n\n    function getExchangeAddress()\n        internal\n        view\n        virtual\n        returns (address exchange)\n    {\n        exchange = IMecenateFeedFactory(settings.factoryContract).router();\n    }\n}\n"
    },
    "contracts/modules/Creation.sol": {
      "content": "/**\n * @title Creation\n * @dev This contract is an abstract contract that inherits from Staking contract. It provides a function to create a post with the given parameters. The function requires the user to be the owner of the post and to have a stake. The post can have different durations and types. The function returns the created post.\n */\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"./Staking.sol\";\n\nabstract contract Creation is Staking {\n    function createPost(\n        bytes memory encryptedHash,\n        Structures.PostType postType,\n        Structures.PostDuration postDuration,\n        uint256 payment,\n        uint256 stakeAmount,\n        Structures.Tokens tokenId,\n        bytes memory sismoConnectResponse,\n        address _to,\n        bytes32 _nonce\n    )\n        external\n        payable\n        onlyValidTokenID(tokenId)\n        returns (Structures.Post memory)\n    {\n        (\n            bytes memory vaultId,\n            uint256 twitterId,\n            uint256 telegramId,\n\n        ) = _verifyNonce(sismoConnectResponse, _to, _nonce);\n\n        bytes32 encryptedVaultId = keccak256(vaultId);\n\n        // Early exit conditions\n        require(encryptedVaultId == owner, \"NOT_OWNER\");\n\n        require(\n            IMecenateUsers(settings.usersModuleContract).checkifUserExist(\n                encryptedVaultId\n            ),\n            \"USER_NOT_EXIST\"\n        );\n\n        require(\n            validStatuses[uint8(post.postdata.settings.status)],\n            \"INVALID_STATUS\"\n        );\n\n        require(stakeAmount > 0, \"STAKE_AMOUNT_ZERO\");\n\n        uint256 duration = postDurationToDays[uint8(postDuration)];\n\n        uint256 stake = _addStake(\n            tokenId,\n            encryptedVaultId,\n            settings.vaultContract,\n            stakeAmount\n        );\n\n        // Change status to Proposed\n        _changeStatus(Structures.PostStatus.Proposed);\n\n        // Initialize the new Post struct with named arguments for clarity\n        Structures.Post memory newPost = Structures.Post({\n            creator: Structures.User({vaultId: encryptedVaultId}),\n            postdata: Structures.PostData({\n                settings: Structures.PostSettings({\n                    postType: postType,\n                    status: Structures.PostStatus.Proposed,\n                    creationTimeStamp: block.timestamp,\n                    endTimeStamp: 0,\n                    duration: duration,\n                    tokenId: tokenId\n                }),\n                escrow: Structures.PostEscrow({\n                    stake: stake,\n                    payment: payment,\n                    punishment: 0,\n                    penalty: 0\n                }),\n                data: Structures.PostEncryptedData({\n                    encryptedData: encryptedHash,\n                    encryptedKey: ZEROHASH,\n                    decryptedData: ZEROHASH\n                })\n            })\n        });\n\n        // Update storage and emit event\n        post = newPost;\n        settings.postCount++;\n\n        postSettingPrivate.vaultIdSeller = vaultId;\n        postSettingPrivate.sellerTwitterId = twitterId;\n        postSettingPrivate.sellerTelegramId = telegramId;\n\n        emit Created(newPost);\n\n        return newPost;\n    }\n}\n"
    },
    "contracts/modules/Data.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"../interfaces/IMecenateFeed.sol\";\nimport \"../interfaces/IMecenateUsers.sol\";\nimport \"../interfaces/IMecenateTreasury.sol\";\nimport \"../interfaces/IMecenateFeedFactory.sol\";\nimport \"../interfaces/IMecenateVerifier.sol\";\n\n// import openzeppelin ECDSA\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\n/**\n * @title Data\n * @dev This contract stores data related to Mecenate posts and provides functions to interact with it.\n */\ncontract Data {\n    bytes internal constant ZEROHASH = \"0x00\";\n\n    bytes32 public owner;\n\n    Structures.Post public post;\n    Structures.PostSettingPrivate internal postSettingPrivate;\n    Structures.FeedSettings internal settings;\n\n    mapping(uint8 => uint256) internal postDurationToDays;\n    mapping(uint8 => bool) internal validStatuses;\n\n    function onlyVault() internal view {\n        require(msg.sender == settings.vaultContract, \"ONLY_VAULT\");\n    }\n\n    constructor(\n        address _usersModuleContract,\n        address _verifierContract,\n        address _vaultContract,\n        address _factoryContract,\n        string memory _version\n    ) {\n        settings.punishmentRatio = 100000000000000000; // Constant value\n        settings.postCount = 0; // Initialize postCount to 0\n        settings.usersModuleContract = _usersModuleContract;\n        settings.verifierContract = _verifierContract;\n        settings.vaultContract = _vaultContract;\n        settings.factoryContract = msg.sender;\n        settings.router = IMecenateFeedFactory(_factoryContract).router();\n        settings.encodedSymKey = ZEROHASH;\n        settings.lastMessageForBuyer = ZEROHASH;\n        settings.lastMessageForSeller = ZEROHASH;\n        post.postdata.settings.status = Structures.PostStatus.Waiting;\n\n        postDurationToDays[uint8(Structures.PostDuration.OneDay)] = 1 days;\n        postDurationToDays[uint8(Structures.PostDuration.ThreeDays)] = 3 days;\n        postDurationToDays[uint8(Structures.PostDuration.OneWeek)] = 7 days;\n        postDurationToDays[uint8(Structures.PostDuration.TwoWeeks)] = 14 days;\n        postDurationToDays[uint8(Structures.PostDuration.OneMonth)] = 30 days;\n        validStatuses[uint8(Structures.PostStatus.Waiting)] = true;\n\n        settings.version = _version;\n    }\n\n    function version() external view returns (string memory) {\n        return settings.version;\n    }\n\n    function _changeStatus(Structures.PostStatus _newStatus) internal {\n        validStatuses[uint8(post.postdata.settings.status)] = false;\n        validStatuses[uint8(_newStatus)] = true;\n        post.postdata.settings.status = _newStatus;\n    }\n\n    function _verifyNonce(\n        bytes memory sismoConnectResponse,\n        address _to,\n        bytes32 _nonce\n    ) internal view returns (bytes memory, uint256, uint256, bytes memory) {\n        (\n            bytes memory vaultId,\n            uint256 twitterId,\n            uint256 telegramId,\n            bytes memory signedMessage\n        ) = IMecenateVerifier(settings.verifierContract).sismoVerify(\n                sismoConnectResponse,\n                _to,\n                _nonce\n            );\n\n        (, bytes32 nonce) = abi.decode(signedMessage, (address, bytes32));\n\n        require(_nonce == nonce, \"WRONG_NONCE\");\n\n        return (vaultId, twitterId, telegramId, signedMessage);\n    }\n\n    function sismoVerify(\n        bytes memory sismoConnectResponse,\n        address _to,\n        bytes32 _nonce\n    ) internal view returns (bytes memory, uint256, uint256, bytes memory) {\n        (\n            bytes memory vaultId,\n            uint256 twitterId,\n            uint256 telegramId,\n            bytes memory signedMessage\n        ) = IMecenateVerifier(settings.verifierContract).sismoVerify(\n                sismoConnectResponse,\n                _to,\n                _nonce\n            );\n\n        return (vaultId, twitterId, telegramId, signedMessage);\n    }\n\n    function getStatus() external view returns (Structures.PostStatus) {\n        return post.postdata.settings.status;\n    }\n\n    function getTokenId() external view returns (Structures.Tokens) {\n        return post.postdata.settings.tokenId;\n    }\n\n    function getTokenIdAddress() public view returns (address) {\n        if (post.postdata.settings.tokenId == Structures.Tokens.MUSE) {\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\n        } else if (post.postdata.settings.tokenId == Structures.Tokens.DAI) {\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\n        } else {\n            return address(0);\n        }\n    }\n\n    function _checkToken(Structures.Tokens _token) internal view {\n        require(_token == post.postdata.settings.tokenId, \"WRONG_TOKEN\");\n    }\n\n    function getPaymentRequested() external view returns (uint256) {\n        return post.postdata.escrow.payment;\n    }\n\n    function getStakeRequested() external view returns (uint256) {\n        return post.postdata.escrow.stake;\n    }\n\n    function postCount() external view returns (uint256) {\n        return settings.postCount;\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts/modules/Deposit.sol": {
      "content": "pragma solidity 0.8.19;\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\nimport \"./TokenManager.sol\";\r\n\r\ncontract Deposit {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(uint256 => mapping(bytes32 => uint256)) private _deposit;\r\n\r\n    event DepositIncreased(\r\n        Structures.Tokens tokenID,\r\n        bytes32 user,\r\n        uint256 amount,\r\n        uint256 newDeposit\r\n    );\r\n    event DepositDecreased(\r\n        Structures.Tokens tokenID,\r\n        bytes32 user,\r\n        uint256 amount,\r\n        uint256 newDeposit\r\n    );\r\n\r\n    function _increaseDeposit(\r\n        Structures.Tokens tokenID,\r\n        bytes32 user,\r\n        uint256 amountToAdd\r\n    ) internal returns (uint256 newDeposit) {\r\n        // calculate new deposit amount\r\n        newDeposit = _deposit[uint256(tokenID)][user].add(amountToAdd);\r\n\r\n        // set new stake to storage\r\n        _deposit[uint256(tokenID)][user] = newDeposit;\r\n\r\n        // emit event\r\n        emit DepositIncreased(tokenID, user, amountToAdd, newDeposit);\r\n\r\n        // return\r\n        return newDeposit;\r\n    }\r\n\r\n    function _decreaseDeposit(\r\n        Structures.Tokens tokenID,\r\n        bytes32 user,\r\n        uint256 amountToRemove\r\n    ) internal returns (uint256 newDeposit) {\r\n        // get current deposit\r\n        uint256 currentDeposit = _deposit[uint256(tokenID)][user];\r\n\r\n        // check if sufficient deposit\r\n        require(currentDeposit >= amountToRemove, \"INSUFFICIENT_DEPOSIT\");\r\n\r\n        // calculate new deposit amount\r\n        newDeposit = currentDeposit.sub(amountToRemove);\r\n\r\n        // set new stake to storage\r\n        _deposit[uint256(tokenID)][user] = newDeposit;\r\n\r\n        // emit event\r\n        emit DepositDecreased(tokenID, user, amountToRemove, newDeposit);\r\n\r\n        // return\r\n        return newDeposit;\r\n    }\r\n\r\n    function _clearDeposit(\r\n        Structures.Tokens tokenID,\r\n        bytes32 user\r\n    ) internal returns (uint256 amountRemoved) {\r\n        // get current deposit\r\n        uint256 currentDeposit = _deposit[uint256(tokenID)][user];\r\n\r\n        // remove deposit\r\n        _decreaseDeposit(tokenID, user, currentDeposit);\r\n\r\n        // return\r\n        return currentDeposit;\r\n    }\r\n\r\n    function _getDeposit(\r\n        Structures.Tokens tokenID,\r\n        bytes32 user\r\n    ) internal view returns (uint256 deposit) {\r\n        return _deposit[uint256(tokenID)][user];\r\n    }\r\n}\r\n"
    },
    "contracts/modules/Events.sol": {
      "content": "/**\r\n * @title Events\r\n * @dev This abstract contract defines the events related to the Mecenate platform's post lifecycle.\r\n */\r\npragma solidity 0.8.19;\r\n\r\nimport \"./Data.sol\";\r\n\r\nabstract contract Events is Data {\r\n    event Created(Structures.Post post);\r\n    event Accepted(Structures.Post post);\r\n    event Valid(Structures.Post post);\r\n    event Invalid(Structures.Post post);\r\n    event Finalized(Structures.Post post);\r\n    event MadePublic(Structures.Post post);\r\n    event Renounced(Structures.Post post);\r\n}\r\n"
    },
    "contracts/modules/FeedViewer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"../library/Structures.sol\";\nimport \"../interfaces/IMecenateFeed.sol\";\n\ncontract FeedViewer {\n    function _getFeedInfo(\n        address feed\n    ) internal view returns (Structures.Feed memory) {\n        Structures.Feed memory f;\n\n        IMecenateFeed mecenateFeed = IMecenateFeed(feed);\n\n        f.contractAddress = feed;\n        f.operator = mecenateFeed.owner();\n        f.sellerStake = mecenateFeed.getSellerStake();\n        f.buyerStake = mecenateFeed.getBuyerStake();\n        f.totalStake = mecenateFeed.getTotalStaked();\n        f.postCount = mecenateFeed.postCount();\n        f.paymentRequested = mecenateFeed.getPaymentRequested();\n        f.stakeRequested = mecenateFeed.getStakeRequested();\n        f.status = mecenateFeed.getStatus();\n        f.tokenId = mecenateFeed.getTokenId();\n        f.version = mecenateFeed.version();\n\n        return f;\n    }\n\n    function _getFeedsInfo(\n        address[] memory _feeds\n    ) internal view returns (Structures.Feed[] memory) {\n        uint256 len = _feeds.length;\n        Structures.Feed[] memory f = new Structures.Feed[](len);\n\n        for (uint256 i = 0; i < len; i++) {\n            f[i] = _getFeedInfo(_feeds[i]);\n        }\n\n        return f;\n    }\n}\n"
    },
    "contracts/modules/Finalization.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\nimport \"./Staking.sol\";\n\nabstract contract Finalization is Staking {\n    function finalizePost(\n        bool valid,\n        uint256 punishment,\n        bytes32 encryptedVaultId\n    ) external virtual {\n        onlyVault();\n        require(\n            post.postdata.settings.status == Structures.PostStatus.Submitted,\n            \"NOT_SUBMITTED\"\n        );\n        require(\n            keccak256(postSettingPrivate.vaultIdBuyer) == encryptedVaultId,\n            \"VAULTID_NOT_MATCH\"\n        );\n\n        // Common contract addresses and variables\n        address treasuryContract = IMecenateFeedFactory(\n            settings.factoryContract\n        ).treasuryContract();\n\n        uint256 buyerFee = (post.postdata.escrow.payment *\n            IMecenateTreasury(treasuryContract).globalFee()) / 10000;\n\n        uint256 amountToAdd = post.postdata.escrow.payment - buyerFee;\n\n        // Variables for stake changes\n        uint256 buyerStake;\n        uint256 sellerStake;\n\n        if (post.postdata.settings.endTimeStamp < block.timestamp || valid) {\n            // Code for both the timeout and the valid case\n            buyerStake = Deposit._decreaseDeposit(\n                post.postdata.settings.tokenId,\n                keccak256(postSettingPrivate.vaultIdBuyer),\n                post.postdata.escrow.payment\n            );\n\n            sellerStake = Deposit._increaseDeposit(\n                post.postdata.settings.tokenId,\n                keccak256(postSettingPrivate.vaultIdSeller),\n                amountToAdd\n            );\n\n            TokenManager._burn(\n                post.postdata.settings.tokenId,\n                treasuryContract,\n                buyerFee\n            );\n\n            // Update status and stakes\n            post.postdata.escrow.stake = sellerStake;\n            post.postdata.escrow.payment = buyerStake;\n            _changeStatus(\n                valid\n                    ? Structures.PostStatus.Finalized\n                    : Structures.PostStatus.Punished\n            );\n\n            emit Valid(post);\n        } else if (!valid) {\n            require(\n                punishment <= post.postdata.escrow.stake,\n                \"PUNISHMENT_TOO_HIGH\"\n            );\n            require(settings.punishmentRatio < 1e18, \"PUNISHMENT_RATIO_HIGH\");\n\n            uint256 penalty = (punishment * settings.punishmentRatio) / 1e18;\n\n            uint256 totalPunishmentFee = penalty + punishment;\n\n            bool resultBurn = TokenManager._burn(\n                post.postdata.settings.tokenId,\n                treasuryContract,\n                totalPunishmentFee\n            );\n\n            require(resultBurn, \"BURN_FAILED\");\n\n            uint256 newStake = post.postdata.escrow.payment = _burnStake(\n                post.postdata.settings.tokenId,\n                keccak256(postSettingPrivate.vaultIdBuyer),\n                penalty\n            );\n\n            require(newStake > 0, \"STAKE_BURN_FAILED\");\n\n            post.postdata.escrow.stake = _burnStake(\n                post.postdata.settings.tokenId,\n                keccak256(postSettingPrivate.vaultIdSeller),\n                punishment\n            );\n\n            // Update status and penalties\n            post.postdata.settings.status = Structures.PostStatus.Punished;\n            post.postdata.escrow.punishment = punishment;\n            post.postdata.escrow.penalty = penalty;\n\n            _changeStatus(Structures.PostStatus.Punished);\n\n            emit Invalid(post);\n        }\n    }\n}\n"
    },
    "contracts/modules/Message.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport \"./Events.sol\";\r\n\r\nabstract contract Message is Events {\r\n    function _isSellerOrBuyer(\r\n        bytes32 encryptedVaultId\r\n    ) internal view returns (bool) {\r\n        bytes32 sellerVaultIdHash = keccak256(postSettingPrivate.vaultIdSeller);\r\n        bytes32 buyerVaultIdHash = keccak256(postSettingPrivate.vaultIdBuyer);\r\n        return (encryptedVaultId == sellerVaultIdHash ||\r\n            encryptedVaultId == buyerVaultIdHash);\r\n    }\r\n\r\n    function getVaultIdSecret(\r\n        bytes32 encryptedVaultId\r\n    ) external view virtual returns (bytes memory) {\r\n        require(_isSellerOrBuyer(encryptedVaultId), \"NOT_THE_SELLER_OR_BUYER\");\r\n        return postSettingPrivate.vaultIdSeller;\r\n    }\r\n\r\n    function getTelegramIds(\r\n        bytes32 encryptedVaultId\r\n    ) external view returns (uint256, uint256) {\r\n        require(\r\n            postSettingPrivate.buyerTelegramId != 0,\r\n            \"NO_TELEGRAM_ID_FOR_BUYER\"\r\n        );\r\n\r\n        require(\r\n            postSettingPrivate.sellerTelegramId != 0,\r\n            \"NO_TELEGRAM_ID_FOR_SELLER\"\r\n        );\r\n\r\n        require(\r\n            encryptedVaultId == keccak256(postSettingPrivate.vaultIdSeller) ||\r\n                encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer),\r\n            \"NOT_THE_SELLER_OR_BUYER\"\r\n        );\r\n\r\n        return (\r\n            uint160(postSettingPrivate.buyerTelegramId),\r\n            uint160(postSettingPrivate.sellerTelegramId)\r\n        );\r\n    }\r\n\r\n    function getHashedVaultId(\r\n        bytes memory sismoConnectResponse,\r\n        address _to,\r\n        bytes32 _nonce\r\n    ) external virtual returns (bytes32) {\r\n        (bytes memory vaultId, , , ) = _verifyNonce(\r\n            sismoConnectResponse,\r\n            _to,\r\n            _nonce\r\n        );\r\n\r\n        bytes32 encryptedVaultId = keccak256(vaultId);\r\n\r\n        require(\r\n            encryptedVaultId == keccak256(postSettingPrivate.vaultIdSeller) ||\r\n                encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer),\r\n            \"NOT_SELLER_OR_BUYER\"\r\n        );\r\n\r\n        if (encryptedVaultId == keccak256(postSettingPrivate.vaultIdSeller)) {\r\n            return keccak256(postSettingPrivate.vaultIdSeller);\r\n        } else {\r\n            return keccak256(postSettingPrivate.vaultIdBuyer);\r\n        }\r\n    }\r\n\r\n    function write(\r\n        bytes memory encodeMessage,\r\n        bytes32 encryptedVaultId\r\n    ) external virtual {\r\n        onlyVault();\r\n        require(_isSellerOrBuyer(encryptedVaultId), \"NOT_THE_SELLER_OR_BUYER\");\r\n        _writeMessage(encodeMessage, encryptedVaultId);\r\n    }\r\n\r\n    function _writeMessage(\r\n        bytes memory encodeMessage,\r\n        bytes32 encryptedVaultId\r\n    ) internal {\r\n        if (encryptedVaultId == keccak256(postSettingPrivate.vaultIdSeller)) {\r\n            settings.lastMessageForBuyer = encodeMessage;\r\n        } else {\r\n            settings.lastMessageForSeller = encodeMessage;\r\n        }\r\n    }\r\n\r\n    function getMessage(\r\n        bytes memory sismoConnectResponse,\r\n        address _to,\r\n        bytes32 _nonce\r\n    ) external virtual returns (bytes memory) {\r\n        bytes32 encryptedVaultId = _getEncryptedVaultId(\r\n            sismoConnectResponse,\r\n            _to,\r\n            _nonce\r\n        );\r\n        require(_isSellerOrBuyer(encryptedVaultId), \"NOT_THE_SELLER_OR_BUYER\");\r\n        return _getMessage(encryptedVaultId);\r\n    }\r\n\r\n    function _getMessage(\r\n        bytes32 encryptedVaultId\r\n    ) internal view returns (bytes memory) {\r\n        if (encryptedVaultId == keccak256(postSettingPrivate.vaultIdSeller)) {\r\n            return settings.lastMessageForBuyer;\r\n        } else {\r\n            return settings.lastMessageForSeller;\r\n        }\r\n    }\r\n\r\n    function _getEncryptedVaultId(\r\n        bytes memory sismoConnectResponse,\r\n        address _to,\r\n        bytes32 _nonce\r\n    ) internal virtual returns (bytes32) {\r\n        (bytes memory vaultId, , , ) = _verifyNonce(\r\n            sismoConnectResponse,\r\n            _to,\r\n            _nonce\r\n        );\r\n        return keccak256(vaultId);\r\n    }\r\n}\r\n"
    },
    "contracts/modules/Renounce.sol": {
      "content": "/**\r\n * @title Renounce\r\n * @dev This abstract contract extends the Staking contract and provides functionality for a seller to renounce a post.\r\n * The seller can only renounce a post if they are the original creator of the post and the post is in the Accepted or Submitted status.\r\n * Renouncing a post refunds the buyer's payment and transfers the seller's stake to the seller's address.\r\n * The post struct is reset and the post status is updated to Renounced.\r\n * This contract also provides an internal function for refunding a post, which is called by the renouncePost function.\r\n */\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\nimport \"./Staking.sol\";\r\n\r\nabstract contract Renounce is Staking {\r\n    function renouncePost(\r\n        bytes memory sismoConnectResponse,\r\n        address _to,\r\n        bytes32 _nonce\r\n    ) external {\r\n        onlyVault();\r\n\r\n        // Validate the post status\r\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\r\n        require(validStatuses[uint8(currentStatus)], \"INVALID_STATUS\");\r\n\r\n        // Verify the nonce and get the vault ID\r\n        (bytes memory vaultId, , , ) = _verifyNonce(\r\n            sismoConnectResponse,\r\n            _to,\r\n            _nonce\r\n        );\r\n        bytes32 encryptedVaultId = keccak256(vaultId);\r\n\r\n        // Confirm that the caller is the seller\r\n        bytes32 sellerVaultId = keccak256(postSettingPrivate.vaultIdSeller);\r\n        require(encryptedVaultId == sellerVaultId, \"NOT_SELLER\");\r\n\r\n        // Reset post and post settings\r\n        post = Structures.Post(\r\n            Structures.User({vaultId: bytes32(0)}),\r\n            Structures.PostData({\r\n                settings: Structures.PostSettings({\r\n                    status: Structures.PostStatus.Renounced,\r\n                    postType: Structures.PostType.Text,\r\n                    creationTimeStamp: 0,\r\n                    endTimeStamp: 0,\r\n                    duration: 0,\r\n                    tokenId: Structures.Tokens.NaN\r\n                }),\r\n                escrow: Structures.PostEscrow({\r\n                    stake: 0,\r\n                    payment: 0,\r\n                    punishment: 0,\r\n                    penalty: 0\r\n                }),\r\n                data: Structures.PostEncryptedData({\r\n                    encryptedData: \"\",\r\n                    encryptedKey: \"\",\r\n                    decryptedData: \"\"\r\n                })\r\n            })\r\n        );\r\n\r\n        postSettingPrivate.vaultIdBuyer = ZEROHASH;\r\n        postSettingPrivate.buyerTwitterId = 0;\r\n        postSettingPrivate.buyerTelegramId = 0;\r\n        postSettingPrivate.vaultIdSeller = ZEROHASH;\r\n        postSettingPrivate.sellerTwitterId = 0;\r\n        postSettingPrivate.sellerTelegramId = 0;\r\n\r\n        // Emit event\r\n        emit Renounced(post);\r\n    }\r\n}\r\n"
    },
    "contracts/modules/Staking.sol": {
      "content": "/**\n * @title Staking\n * @dev This contract handles staking functionality for the Mecenate platform.\n * It allows users to add, take, and burn stakes, and provides functions to get the total staked amount and individual stake amounts.\n * It also includes a modifier to check the status of a post before allowing stake-related transactions.\n */\npragma solidity 0.8.19;\n\nimport \"./Deposit.sol\";\nimport \"./Events.sol\";\n\nabstract contract Staking is Events, Deposit, TokenManager {\n    using SafeMath for uint256;\n\n    event StakeBurned(bytes32 staker, uint256 amount);\n    event StakeTaken(bytes32 staker, uint256 amount, Structures.Tokens tokenId);\n    event StakeAdded(bytes32 staker, uint256 amount, Structures.Tokens tokenId);\n\n    function _addStake(\n        Structures.Tokens tokenId,\n        bytes32 staker,\n        address funder,\n        uint256 amountToAdd\n    ) internal returns (uint256 newStake) {\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\n        require(\n            currentStatus != Structures.PostStatus.Accepted &&\n                currentStatus != Structures.PostStatus.Submitted,\n            \"INVALID_STATUS\"\n        );\n\n        require(amountToAdd > 0, \"STAKE_REQUIRED\");\n\n        if (tokenId != Structures.Tokens.NaN) {\n            TokenManager._transferFrom(\n                tokenId,\n                funder,\n                address(this),\n                amountToAdd\n            );\n        }\n\n        newStake = Deposit._increaseDeposit(tokenId, staker, amountToAdd);\n\n        emit StakeAdded(staker, amountToAdd, tokenId);\n\n        return newStake;\n    }\n\n    function _takeStake(\n        Structures.Tokens tokenId,\n        bytes32 staker,\n        address _to,\n        uint256 amountToTake\n    ) internal returns (uint256 newStake) {\n        // Memorizza lo status del post in una variabile per evitare accessi ridondanti allo storage\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\n\n        // Verifica che lo status del post sia valido per procedere\n        require(\n            currentStatus != Structures.PostStatus.Accepted &&\n                currentStatus != Structures.PostStatus.Submitted,\n            \"INVALID_STATUS\"\n        );\n\n        // Effettua il trasferimento del token o dell'Ether\n        if (tokenId == Structures.Tokens.NaN) {\n            //(bool result, ) = payable(_to).call{value: amountToTake}(\"\");\n            //require(result, \"CALL_FAILED\");\n            payable(_to).transfer(amountToTake);\n        } else {\n            TokenManager._transfer(tokenId, _to, amountToTake);\n        }\n\n        // Aggiorna il deposito e emette un evento\n        newStake = Deposit._decreaseDeposit(tokenId, staker, amountToTake);\n        emit StakeTaken(staker, amountToTake, tokenId);\n\n        return newStake;\n    }\n\n    function _takeFullStake(\n        Structures.Tokens tokenId,\n        address _to,\n        bytes32 staker\n    ) internal returns (uint256 amountTaken) {\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, staker);\n\n        uint256 newStake = _takeStake(tokenId, staker, _to, currentDeposit);\n\n        return newStake;\n    }\n\n    function _burnStake(\n        Structures.Tokens tokenId,\n        bytes32 staker,\n        uint256 amountToBurn\n    ) internal returns (uint256 newStake) {\n        uint256 newDeposit = Deposit._decreaseDeposit(\n            tokenId,\n            staker,\n            amountToBurn\n        );\n\n        if (\n            IMecenateFeedFactory(settings.factoryContract).burnEnabled() ==\n            false\n        ) {\n            if (tokenId == Structures.Tokens.NaN) {\n                (bool result, ) = payable(\n                    IMecenateFeedFactory(settings.factoryContract)\n                        .treasuryContract()\n                ).call{value: amountToBurn}(\"\");\n\n                require(result, \"CALL_FAILED\");\n            } else if (tokenId == Structures.Tokens.DAI) {\n                IERC20(\n                    IMecenateFeedFactory(settings.factoryContract).daiToken()\n                ).transfer(\n                        IMecenateFeedFactory(settings.factoryContract)\n                            .treasuryContract(),\n                        amountToBurn\n                    );\n            } else if (tokenId == Structures.Tokens.MUSE) {\n                IERC20(\n                    IMecenateFeedFactory(settings.factoryContract).museToken()\n                ).transfer(\n                        IMecenateFeedFactory(settings.factoryContract)\n                            .treasuryContract(),\n                        amountToBurn\n                    );\n            }\n        } else {\n            if (tokenId == Structures.Tokens.DAI) {\n                // DAI\n                require(\n                    BurnDAI._burnDai(amountToBurn) == true,\n                    \"BURN_DAI_FAILED\"\n                );\n            } else if (tokenId == Structures.Tokens.MUSE) {\n                // MUSE\n                require(\n                    BurnMUSE._burn(amountToBurn) == true,\n                    \"BURN_MUSE_FAILED\"\n                );\n            } else if (tokenId == Structures.Tokens.NaN) {\n                // ETH\n                require(\n                    BurnDAI._sellWethAndBurnMuse(amountToBurn) == true,\n                    \"BURN_ETH_FAILED\"\n                );\n            }\n        }\n\n        emit StakeBurned(staker, amountToBurn);\n\n        return newDeposit;\n    }\n\n    function _burnFullStake(\n        Structures.Tokens tokenId,\n        bytes32 staker\n    ) internal returns (uint256 amountBurned) {\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, staker);\n\n        _burnStake(tokenId, staker, currentDeposit);\n\n        return currentDeposit;\n    }\n\n    function getStake(\n        Structures.Tokens tokenId,\n        bytes32 staker\n    ) external view returns (uint256 amount) {\n        // get deposit\n        amount = Deposit._getDeposit(tokenId, staker);\n        // explicit return\n        return amount;\n    }\n\n    function getTotalStaked() external view returns (uint256) {\n        uint256 amountSeller = Deposit._getDeposit(\n            post.postdata.settings.tokenId,\n            keccak256(postSettingPrivate.vaultIdSeller)\n        );\n\n        uint256 amountBuyer = Deposit._getDeposit(\n            post.postdata.settings.tokenId,\n            keccak256(postSettingPrivate.vaultIdBuyer)\n        );\n\n        return (amountSeller + amountBuyer);\n    }\n\n    function addStake(\n        Structures.Tokens tokenId,\n        uint256 amountToAdd,\n        bytes32 encryptedVaultId\n    ) external payable returns (uint256) {\n        require(tokenId == post.postdata.settings.tokenId, \"WRONG_TOKEN\");\n\n        // Check if the encryptedVaultId matches with either the buyer or the seller\n        require(\n            encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer) ||\n                encryptedVaultId == keccak256(postSettingPrivate.vaultIdSeller),\n            \"VAULTID_MISMATCH\"\n        );\n\n        // Determine the amount to add based on the role (buyer or seller)\n        uint256 actualAmountToAdd = (encryptedVaultId ==\n            keccak256(postSettingPrivate.vaultIdSeller))\n            ? msg.value\n            : amountToAdd;\n\n        // Update the stake\n        uint256 newStake = _addStake(\n            tokenId,\n            encryptedVaultId,\n            settings.vaultContract,\n            actualAmountToAdd\n        );\n\n        // Update the corresponding escrow value based on the role\n        if (encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer)) {\n            post.postdata.escrow.payment = newStake;\n        } else {\n            post.postdata.escrow.stake = newStake;\n        }\n\n        return newStake;\n    }\n\n    function takeStake(\n        Structures.Tokens tokenId,\n        uint256 amountToTake,\n        bytes memory sismoConnectResponse,\n        address _to,\n        bytes32 _nonce\n    ) external returns (uint256) {\n        onlyVault();\n\n        require(tokenId == post.postdata.settings.tokenId, \"WRONG_TOKEN\");\n\n        bytes32 encryptedVaultId = _commonTakeStake(\n            sismoConnectResponse,\n            _to,\n            _nonce\n        );\n\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, encryptedVaultId);\n        require(currentDeposit >= amountToTake, \"NOT_ENOUGH_STAKE\");\n\n        uint256 newBalance = _takeStake(\n            tokenId,\n            encryptedVaultId,\n            _to,\n            amountToTake\n        );\n\n        if (encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer)) {\n            post.postdata.escrow.payment = newBalance;\n        } else {\n            post.postdata.escrow.stake = newBalance;\n        }\n\n        return newBalance;\n    }\n\n    function takeFullStake(\n        Structures.Tokens tokenId,\n        bytes memory sismoConnectResponse,\n        address _to,\n        bytes32 _nonce\n    ) external returns (uint256) {\n        onlyVault();\n\n        require(tokenId == post.postdata.settings.tokenId, \"WRONG_TOKEN\");\n\n        bytes32 encryptedVaultId = _commonTakeStake(\n            sismoConnectResponse,\n            _to,\n            _nonce\n        );\n\n        uint256 newBalance = _takeFullStake(tokenId, _to, encryptedVaultId);\n\n        if (encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer)) {\n            post.postdata.escrow.payment = newBalance;\n        } else {\n            post.postdata.escrow.stake = newBalance;\n        }\n\n        return newBalance;\n    }\n\n    function getSellerStake() external view returns (uint256 amount) {\n        // get deposit\n        amount = Deposit._getDeposit(\n            post.postdata.settings.tokenId,\n            keccak256(postSettingPrivate.vaultIdSeller)\n        );\n        // explicit return\n        return amount;\n    }\n\n    function getBuyerStake() external view returns (uint256 amount) {\n        // get deposit\n        amount = Deposit._getDeposit(\n            post.postdata.settings.tokenId,\n            keccak256(postSettingPrivate.vaultIdBuyer)\n        );\n        // explicit return\n        return amount;\n    }\n\n    function _commonTakeStake(\n        bytes memory sismoConnectResponse,\n        address _to,\n        bytes32 _nonce\n    ) internal view returns (bytes32) {\n        (bytes memory vaultId, , , ) = _verifyNonce(\n            sismoConnectResponse,\n            _to,\n            _nonce\n        );\n        bytes32 encryptedVaultId = keccak256(vaultId);\n\n        require(\n            encryptedVaultId == keccak256(postSettingPrivate.vaultIdBuyer) ||\n                encryptedVaultId == keccak256(postSettingPrivate.vaultIdSeller),\n            \"UNAUTHORIZED\"\n        );\n\n        return encryptedVaultId;\n    }\n}\n"
    },
    "contracts/modules/Submission.sol": {
      "content": "/**\r\n * @title Submission\r\n * @dev This contract is an abstract contract that defines the functions for submitting and revealing data for a post. It inherits from the Events contract.\r\n */\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport \"./Events.sol\";\r\n\r\nabstract contract Submission is Events {\r\n    function submitHash(\r\n        bytes memory encryptedKey,\r\n        bytes memory sismoConnectResponse,\r\n        address _to,\r\n        bytes32 _nonce\r\n    ) external virtual {\r\n        onlyVault();\r\n\r\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\r\n        require(\r\n            validStatuses[uint8(currentStatus)] &&\r\n                (currentStatus == Structures.PostStatus.Accepted ||\r\n                    currentStatus == Structures.PostStatus.Submitted),\r\n            \"WRONG_STATUS\"\r\n        );\r\n\r\n        (bytes memory vaultId, , , ) = _verifyNonce(\r\n            sismoConnectResponse,\r\n            _to,\r\n            _nonce\r\n        );\r\n        bytes32 encryptedVaultId = keccak256(vaultId);\r\n\r\n        require(\r\n            IMecenateUsers(settings.usersModuleContract).checkifUserExist(\r\n                encryptedVaultId\r\n            ),\r\n            \"User does not exist\"\r\n        );\r\n        require(post.creator.vaultId == encryptedVaultId, \"NOT_SELLER\");\r\n\r\n        _changeStatus(Structures.PostStatus.Submitted);\r\n\r\n        settings.encodedSymKey = post.postdata.data.encryptedKey = encryptedKey;\r\n        post.postdata.settings.status = Structures.PostStatus.Submitted;\r\n        post.postdata.settings.endTimeStamp =\r\n            block.timestamp +\r\n            post.postdata.settings.duration;\r\n\r\n        emit Valid(post);\r\n    }\r\n\r\n    function revealData(\r\n        bytes memory decryptedData,\r\n        bytes memory sismoConnectResponse,\r\n        address _to,\r\n        bytes32 _nonce\r\n    ) external virtual returns (bytes memory) {\r\n        onlyVault();\r\n\r\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\r\n        require(\r\n            validStatuses[uint8(currentStatus)] &&\r\n                (currentStatus == Structures.PostStatus.Submitted ||\r\n                    currentStatus == Structures.PostStatus.Revealed ||\r\n                    currentStatus == Structures.PostStatus.Finalized),\r\n            \"INVALID_STATUS\"\r\n        );\r\n\r\n        (bytes memory vaultId, , , ) = _verifyNonce(\r\n            sismoConnectResponse,\r\n            _to,\r\n            _nonce\r\n        );\r\n        bytes32 encryptedVaultId = keccak256(vaultId);\r\n\r\n        require(\r\n            encryptedVaultId != keccak256(postSettingPrivate.vaultIdSeller),\r\n            \"YOU_ARE_THE_SELLER\"\r\n        );\r\n        require(\r\n            currentStatus == Structures.PostStatus.Finalized,\r\n            \"NOT_FINALIZED\"\r\n        );\r\n\r\n        post.postdata.data.decryptedData = decryptedData;\r\n        post.postdata.settings.status = Structures.PostStatus.Revealed;\r\n\r\n        emit MadePublic(post);\r\n\r\n        return decryptedData;\r\n    }\r\n}\r\n"
    },
    "contracts/modules/TokenManager.sol": {
      "content": "pragma solidity 0.8.19;\n\nimport \"./BurnDAI.sol\";\n\nabstract contract TokenManager is BurnDAI {\n    function _getTokenAddress(\n        Structures.Tokens tokenID\n    ) internal view returns (address) {\n        if (tokenID == Structures.Tokens.DAI)\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\n        if (tokenID == Structures.Tokens.MUSE)\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\n        return address(0);\n    }\n\n    function _checkAllowance(\n        Structures.Tokens tokenID,\n        address from,\n        address to,\n        uint256 value\n    ) internal view {\n        address tokenAddress = _getTokenAddress(tokenID);\n        require(\n            IERC20(tokenAddress).allowance(from, to) >= value,\n            \"INSUFFICIENT_ALLOWANCE\"\n        );\n    }\n\n    modifier onlyValidTokenID(Structures.Tokens tokenID) {\n        require(\n            tokenID == Structures.Tokens.MUSE ||\n                tokenID == Structures.Tokens.DAI ||\n                tokenID == Structures.Tokens.NaN,\n            \"WRONG_TOKEN\"\n        );\n        _;\n    }\n\n    function isValidTokenID(\n        Structures.Tokens tokenID\n    ) internal pure returns (bool validity) {\n        return\n            tokenID == Structures.Tokens.MUSE ||\n            tokenID == Structures.Tokens.DAI;\n    }\n\n    function _transfer(\n        Structures.Tokens tokenID,\n        address to,\n        uint256 value\n    ) internal onlyValidTokenID(tokenID) {\n        require(\n            IERC20(_getTokenAddress(tokenID)).transfer(to, value),\n            \"TRANSFER_FAILED\"\n        );\n    }\n\n    function _transferFrom(\n        Structures.Tokens tokenID,\n        address from,\n        address to,\n        uint256 value\n    ) internal onlyValidTokenID(tokenID) {\n        address tokenAddress = _getTokenAddress(tokenID);\n        _checkAllowance(tokenID, from, to, value);\n        require(\n            IERC20(tokenAddress).transferFrom(from, to, value),\n            \"TRANSFER_FAILED\"\n        );\n    }\n\n    function _burn(\n        Structures.Tokens tokenID,\n        address _receiver,\n        uint256 value\n    ) internal onlyValidTokenID(tokenID) returns (bool success) {\n        bool burnEnabled = IMecenateFeedFactory(settings.factoryContract)\n            .burnEnabled();\n\n        if (burnEnabled == false) {\n            if (tokenID == Structures.Tokens.NaN) {\n                // ETH\n                (bool result, ) = payable(_receiver).call{value: value}(\"\");\n                require(result, \"CALL_FAILED\");\n            } else if (tokenID == Structures.Tokens.DAI) {\n                // DAI\n                IERC20(\n                    IMecenateFeedFactory(settings.factoryContract).daiToken()\n                ).approve(_receiver, value);\n                IERC20(\n                    IMecenateFeedFactory(settings.factoryContract).daiToken()\n                ).transfer(_receiver, value);\n            } else if (tokenID == Structures.Tokens.MUSE) {\n                // MUSE\n                IERC20(\n                    IMecenateFeedFactory(settings.factoryContract).museToken()\n                ).approve(_receiver, value);\n                IERC20(\n                    IMecenateFeedFactory(settings.factoryContract).museToken()\n                ).transfer(_receiver, value);\n            }\n        } else if (burnEnabled == true) {\n            if (tokenID == Structures.Tokens.DAI) {\n                // DAI\n                require(BurnDAI._burnDai(value) == true, \"BURN_DAI_FAILED\");\n            } else if (tokenID == Structures.Tokens.MUSE) {\n                // MUSE\n                require(BurnMUSE._burn(value) == true, \"BURN_MUSE_FAILED\");\n            } else if (tokenID == Structures.Tokens.NaN) {\n                // ETH\n                require(\n                    BurnDAI._sellWethAndBurnMuse(value) == true,\n                    \"BURN_ETH_FAILED\"\n                );\n            }\n        }\n\n        return true;\n    }\n\n    function _burnFrom(\n        Structures.Tokens tokenID,\n        address from,\n        uint256 value\n    ) internal onlyValidTokenID(tokenID) {\n        address treasury = IMecenateFeedFactory(settings.factoryContract)\n            .treasuryContract();\n\n        if (tokenID == Structures.Tokens.DAI) {\n            IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\n                .transferFrom(from, treasury, value);\n        } else if (tokenID == Structures.Tokens.MUSE) {\n            BurnMUSE._burnFrom(from, value);\n        }\n    }\n\n    function _approve(\n        Structures.Tokens tokenID,\n        address spender,\n        uint256 value\n    ) internal onlyValidTokenID(tokenID) {\n        if (tokenID == Structures.Tokens.DAI) {\n            require(\n                IERC20(\n                    IMecenateFeedFactory(settings.factoryContract).daiToken()\n                ).approve(spender, value),\n                \"APPROVE_FAILED\"\n            );\n        } else if (tokenID == Structures.Tokens.MUSE) {\n            uint256 currentAllowance = IMUSE(\n                IMecenateFeedFactory(settings.factoryContract).museToken()\n            ).allowance(msg.sender, spender);\n\n            uint256 newAllowance = currentAllowance + value;\n            require(\n                IMUSE(IMecenateFeedFactory(settings.factoryContract).daiToken())\n                    .increaseAllowance(spender, newAllowance),\n                \"APPROVE_FAILED\"\n            );\n        }\n    }\n\n    function totalSupply(\n        Structures.Tokens tokenID\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\n        return IERC20(_getTokenAddress(tokenID)).totalSupply();\n    }\n\n    function balanceOf(\n        Structures.Tokens tokenID,\n        address who\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\n        return IERC20(_getTokenAddress(tokenID)).balanceOf(who);\n    }\n\n    function allowance(\n        Structures.Tokens tokenID,\n        address owner,\n        address spender\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\n        return IERC20(_getTokenAddress(tokenID)).allowance(owner, spender);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 15000
    },
    "viaIR": true,
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}