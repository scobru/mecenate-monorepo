{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/interfaces/IMecenateFeedFactory.sol": {
      "content": "pragma solidity 0.8.19;\n\ninterface IMecenateFeedFactory {\n    function owner() external view returns (address payable);\n\n    function treasuryContract() external view returns (address payable);\n\n    function identityContract() external view returns (address);\n\n    function feeds() external view returns (address[] memory);\n\n    function contractCounter() external view returns (uint256);\n\n    function isFeed(address _feed) external view returns (bool);\n\n    function museToken() external view returns (address);\n\n    function wethToken() external view returns (address);\n\n    function daiToken() external view returns (address);\n\n    function router() external view returns (address);\n\n    function getRouterFee(uint8 tokenId) external view returns (uint24);\n\n    function burnEnabled() external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IMecenateVerifier.sol": {
      "content": "pragma solidity 0.8.19;\r\n\r\ninterface IMecenateVerifier {\r\n    function sismoVerify(\r\n        bytes memory sismoConnectResponse,\r\n        address _to,\r\n        bytes32 _nonce\r\n    ) external view returns (bytes memory, uint256, uint256, bytes memory);\r\n}\r\n"
    },
    "contracts/MecenateVault.sol": {
      "content": "/**\n * @title MecenateVault\n * @dev This contract allows users to deposit and withdraw ETH and ERC20 tokens, and pay ETH and ERC20 tokens to other addresses.\n * It also keeps track of the deposited balances for each user using a commitment hash.\n */\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"./interfaces/IMecenateVerifier.sol\";\nimport \"./interfaces/IMecenateFeedFactory.sol\";\n\ncontract MecenateVault is Ownable, ReentrancyGuard {\n    using Address for address;\n    using Address for address payable;\n\n    mapping(bytes32 => uint256) private ethDeposits;\n    mapping(bytes32 => mapping(address => uint256)) private tokenDeposits;\n\n    address public WETH;\n    address public DAI;\n    address public USDC;\n    address public MUSE;\n    address public verifierContract;\n    address public factoryContract;\n    address public mecenateBay;\n    address public mecenateUsers;\n    address private relayer;\n\n    uint256 public relayerFeePercentage = 500;\n    uint256 public constant MAX_RELAYER_FEE_PERCENTAGE = 500;\n\n    event MetaTransactionExecuted(\n        address userAddress,\n        address relayerAddress,\n        bytes functionSignature\n    );\n\n    event Withdrawn(\n        bytes32 indexed commitment,\n        uint256 amount,\n        string secret,\n        address token\n    );\n\n    modifier onlyRelayer() {\n        require(msg.sender == relayer, \"Not relayer\");\n        _;\n    }\n\n    constructor(\n        address _verifierContract,\n        address _factoryContract,\n        address _bayContract,\n        address _usersContract,\n        address _relayer\n    ) {\n        verifierContract = _verifierContract;\n        factoryContract = _factoryContract;\n        mecenateBay = _bayContract;\n        mecenateUsers = _usersContract;\n        relayer = _relayer;\n    }\n\n    function setTokens(\n        address _WETH,\n        address _DAI,\n        address _USDC,\n        address _MUSE\n    ) external onlyOwner {\n        WETH = _WETH;\n        DAI = _DAI;\n        USDC = _USDC;\n        MUSE = _MUSE;\n    }\n\n    function changeRelayerFee(\n        uint256 _newRelayerFeePercentage\n    ) external onlyOwner {\n        require(\n            _newRelayerFeePercentage <= MAX_RELAYER_FEE_PERCENTAGE,\n            \"New relayer fee percentage is too high\"\n        );\n        relayerFeePercentage = _newRelayerFeePercentage;\n    }\n\n    function depositETH(bytes32 encryptedVaultId) public payable nonReentrant {\n        // 1. Add the deposit to the correct deposit mapping\n        ethDeposits[encryptedVaultId] += msg.value;\n    }\n\n    function approveTokenToFeed(\n        address _token,\n        uint256 _amount,\n        address _feed,\n        bytes32 encryptedVaultId\n    ) public {\n        require(_token != address(0), \"Token address cannot be 0\");\n        require(_amount > 0, \"Amount must be greater than zero\");\n        require(\n            _token == WETH || _token == DAI || _token == USDC || _token == MUSE,\n            \"Token not supported\"\n        );\n        require(\n            tokenDeposits[encryptedVaultId][_token] >= _amount,\n            \"Not enough balance\"\n        );\n\n        require(\n            IMecenateFeedFactory(factoryContract).isFeed(_feed) ||\n                _feed == mecenateBay,\n            \"Not a feed\"\n        );\n\n        // The user must first approve the token transfer\n        // to this contract\n        IERC20 token = IERC20(_token);\n        // Approve the token to the feed\n        token.approve(_feed, _amount);\n    }\n\n    function depositToken(\n        address _token,\n        uint256 _amount,\n        bytes32 encryptedVaultId\n    ) external {\n        require(_token != address(0), \"Token address cannot be 0\");\n\n        require(_amount > 0, \"Amount must be greater than zero\");\n\n        require(\n            _token == WETH || _token == DAI || _token == USDC || _token == MUSE,\n            \"Token not supported\"\n        );\n\n        // The user must first approve the token transfer\n        // to this contract\n        IERC20 token = IERC20(_token);\n\n        require(\n            token.transferFrom(msg.sender, address(this), _amount),\n            \"Token transfer failed\"\n        );\n\n        // Add the deposited amount to the tokenDeposits mapping\n        tokenDeposits[encryptedVaultId][_token] += _amount;\n    }\n\n    function withdrawETH(\n        uint256 _amount,\n        bytes memory sismoConnectResponse,\n        address _to,\n        bytes32 _nonce\n    ) public onlyRelayer nonReentrant {\n        uint256 initialGas = gasleft();\n\n        (\n            bytes memory vaultId,\n            ,\n            ,\n            bytes memory signedMessage\n        ) = IMecenateVerifier(verifierContract).sismoVerify(\n                sismoConnectResponse,\n                _to,\n                _nonce\n            );\n\n        (address to, bytes32 nonce) = abi.decode(\n            signedMessage,\n            (address, bytes32)\n        );\n\n        require(to == _to, \"Not Same Address\");\n\n        require(nonce == _nonce, \"Not Same Nonce\");\n\n        bytes32 encryptedVaultId = keccak256(vaultId);\n\n        uint256 totalRequired = _amount; // Initialize with _value\n\n        totalRequired -= tx.gasprice * initialGas; // Add maximum possible gas cost\n\n        require(\n            ethDeposits[encryptedVaultId] >= totalRequired,\n            \"Not enough balance\"\n        );\n\n        // 1. Verify that the commitment exists and the amount is not zero\n        require(ethDeposits[encryptedVaultId] > 0, \"Commitment does not exist\");\n\n        require(_amount > 0, \"Amount must be greater than zero\");\n\n        // 2. Verify that the commitment has enough balance to withdraw from\n        require(ethDeposits[encryptedVaultId] >= _amount, \"Not enough balance\");\n\n        //decode signedMessage as address\n        ethDeposits[encryptedVaultId] -= _amount;\n\n        uint256 gasUsed = initialGas - gasleft();\n\n        uint256 gasCost = gasUsed * tx.gasprice;\n\n        uint256 relayerFee = (gasCost * relayerFeePercentage) / 10000;\n\n        require(_amount >= gasCost + relayerFee, \"Not enough balance for gas\");\n\n        uint256 newAmount = _amount - gasCost - relayerFee;\n\n        (bool result, ) = payable(to).call{value: newAmount}(\"\");\n\n        require(result, \"ETH transfer failed\");\n\n        (bool result2, ) = payable(msg.sender).call{\n            value: gasCost + relayerFee\n        }(\"\");\n\n        require(result2, \"ETH transfer failed with gas\");\n    }\n\n    function withdrawWithSecret(\n        string memory _secret,\n        address _token,\n        bytes memory sismoConnectResponse,\n        address _to,\n        bytes32 _nonce\n    ) public onlyRelayer nonReentrant {\n        bytes32 commitment = keccak256(abi.encodePacked(_secret));\n        uint256 amount;\n\n        if (_token == address(0)) {\n            amount = ethDeposits[commitment];\n            require(amount > 0, \"No ETH deposit for this secret\");\n            ethDeposits[commitment] = 0;\n            payable(_to).transfer(amount);\n        } else {\n            amount = tokenDeposits[commitment][_token];\n            require(amount > 0, \"No Token deposit for this secret\");\n            tokenDeposits[commitment][_token] = 0;\n            IERC20(_token).transfer(_to, amount);\n        }\n\n        emit Withdrawn(commitment, amount, _secret, _token);\n    }\n\n    function withdrawToken(\n        address _token,\n        uint256 _amount,\n        bytes memory sismoConnectResponse,\n        address _to,\n        bytes32 _nonce\n    ) public onlyRelayer nonReentrant {\n        uint256 initialGas = gasleft();\n\n        uint256 totalRequired = tx.gasprice * initialGas;\n\n        (\n            bytes memory vaultId,\n            ,\n            ,\n            bytes memory signedMessage\n        ) = IMecenateVerifier(verifierContract).sismoVerify(\n                sismoConnectResponse,\n                _to,\n                _nonce\n            );\n\n        (address to, bytes32 nonce) = abi.decode(\n            signedMessage,\n            (address, bytes32)\n        );\n\n        require(\n            ethDeposits[keccak256(vaultId)] >= totalRequired,\n            \"Not enough ETH for gas required\"\n        );\n\n        require(to == _to, \"Not Same Address\");\n\n        require(nonce == _nonce, \"Not Same Nonce\");\n\n        // Check if the commitment exists\n        // and the amount is greater than the deposit.\n        require(\n            tokenDeposits[keccak256(vaultId)][_token] >= _amount,\n            \"Not enough token balance\"\n        );\n\n        // Decrease the token balance for the commitment.\n        tokenDeposits[keccak256(vaultId)][_token] -= _amount;\n\n        // Transfer the tokens to msg.sender or operator.\n        IERC20(_token).transfer(to, _amount);\n\n        uint256 gasUsed = initialGas - gasleft();\n\n        uint256 gasCost = gasUsed * tx.gasprice;\n\n        uint256 relayerFee = (gasCost * relayerFeePercentage) / 10000;\n\n        require(\n            ethDeposits[keccak256(vaultId)] >= gasCost + relayerFee,\n            \"Not enough balance for gas used\"\n        );\n\n        ethDeposits[keccak256(vaultId)] -= gasCost + relayerFee;\n\n        (bool result, ) = payable(msg.sender).call{value: gasCost + relayerFee}(\n            \"\"\n        );\n\n        require(result, \"ETH transfer failed with gas\");\n    }\n\n    function getEthDeposit(\n        bytes32 encryptedVaultId\n    ) public view returns (uint256) {\n        return ethDeposits[encryptedVaultId];\n    }\n\n    receive() external payable {\n        revert(\"Use depositETH function\");\n    }\n\n    fallback() external payable {\n        require(msg.data.length > 0, \"Data required for Sismo verification.\");\n        bytes32 encryptedVaultId = abi.decode(msg.data, (bytes32));\n        ethDeposits[encryptedVaultId] += msg.value;\n    }\n\n    function getTokenDeposit(\n        address _token,\n        bytes32 encryptedVaultId\n    ) public view returns (uint256) {\n        return tokenDeposits[encryptedVaultId][_token];\n    }\n\n    function execute(\n        address _target,\n        bytes calldata _data,\n        uint256 _value,\n        bytes32 _encryptedVaultId\n    ) external onlyRelayer nonReentrant returns (bool) {\n        uint256 availableBalance = ethDeposits[_encryptedVaultId];\n\n        uint256 daiBalanceB4 = IERC20(DAI).balanceOf(address(this));\n        uint256 museBalanceB4 = IERC20(MUSE).balanceOf(address(this));\n\n        uint256 totalRequired = _value + (tx.gasprice * gasleft());\n\n        require(availableBalance >= totalRequired, \"Insufficient ETH balance\");\n\n        bool success; // variabile per verificare il successo delle transazioni\n        bytes memory retData; // dati di ritorno dalle transazioni\n\n        if (_data.length == 0) {\n            (success, ) = payable(_target).call{value: _value}(\"\");\n        } else {\n            if (_value == 0) {\n                (success, retData) = _target.call(_data);\n            } else {\n                (success, retData) = _target.call{value: _value}(_data);\n            }\n        }\n\n        require(success, \"Transaction failed\");\n\n        uint256 gasUsed = totalRequired - _value - (tx.gasprice * gasleft());\n        uint256 relayerFee = (gasUsed * relayerFeePercentage) / 10000;\n\n        require(\n            availableBalance >= gasUsed + relayerFee,\n            \"Insufficient balance for gas and fee\"\n        );\n\n        ethDeposits[_encryptedVaultId] =\n            availableBalance -\n            gasUsed -\n            relayerFee;\n\n        (success, ) = payable(msg.sender).call{value: gasUsed + relayerFee}(\"\");\n        require(success, \"ETH transfer failed\");\n\n        uint256 daiBalance = IERC20(DAI).balanceOf(address(this));\n        uint256 museBalance = IERC20(MUSE).balanceOf(address(this));\n\n        uint256 diffDai;\n        uint256 diffMuse;\n\n        if (daiBalanceB4 > daiBalance) {\n            diffDai = daiBalanceB4 - daiBalance;\n\n            if (diffDai > 0 && daiBalanceB4 != 0) {\n                tokenDeposits[_encryptedVaultId][DAI] -= diffDai;\n            }\n        }\n\n        if (museBalanceB4 > museBalance) {\n            diffMuse = museBalanceB4 - museBalance;\n\n            if (diffMuse > 0 && museBalanceB4 != 0) {\n                tokenDeposits[_encryptedVaultId][MUSE] -= diffMuse;\n            }\n        }\n\n        return true;\n    }\n\n    function setRelayer(address _relayer) external onlyOwner {\n        relayer = _relayer;\n    }\n\n    function setVerifierContract(address _verifierContract) external onlyOwner {\n        verifierContract = _verifierContract;\n    }\n\n    function setFactoryContract(address _factoryContract) external onlyOwner {\n        factoryContract = _factoryContract;\n    }\n\n    function setMecenateBay(address _mecenateBay) external onlyOwner {\n        mecenateBay = _mecenateBay;\n    }\n\n    function setMecenateUsers(address _mecenateUsers) external onlyOwner {\n        mecenateUsers = _mecenateUsers;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}