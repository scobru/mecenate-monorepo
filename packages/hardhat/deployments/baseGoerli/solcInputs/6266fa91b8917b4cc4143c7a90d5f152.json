{
  "language": "Solidity",
  "sources": {
    "contracts/helpers/interfaces/IAddressesProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\ninterface IAddressesProvider {\r\n    /**\r\n     * @dev Sets the address of a contract.\r\n     * @param contractAddress Address of the contract.\r\n     * @param contractName Name of the contract.\r\n     */\r\n    function set(address contractAddress, string memory contractName) external;\r\n\r\n    /**\r\n     * @dev Sets the address of multiple contracts.\r\n     * @param contractAddresses Addresses of the contracts.\r\n     * @param contractNames Names of the contracts.\r\n     */\r\n    function setBatch(\r\n        address[] calldata contractAddresses,\r\n        string[] calldata contractNames\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the address of a contract.\r\n     * @param contractName Name of the contract (string).\r\n     * @return Address of the contract.\r\n     */\r\n    function get(string memory contractName) external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the address of a contract.\r\n     * @param contractNameHash Hash of the name of the contract (bytes32).\r\n     * @return Address of the contract.\r\n     */\r\n    function get(bytes32 contractNameHash) external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the addresses of all contracts inputed.\r\n     * @param contractNames Names of the contracts as strings.\r\n     */\r\n    function getBatch(\r\n        string[] calldata contractNames\r\n    ) external view returns (address[] memory);\r\n\r\n    /**\r\n     * @dev Returns the addresses of all contracts inputed.\r\n     * @param contractNamesHash Names of the contracts as strings.\r\n     */\r\n    function getBatch(\r\n        bytes32[] calldata contractNamesHash\r\n    ) external view returns (address[] memory);\r\n\r\n    /**\r\n     * @dev Returns the addresses of all contracts in `_contractNames`\r\n     * @return Names, Hashed Names and Addresses of all contracts.\r\n     */\r\n    function getAll()\r\n        external\r\n        view\r\n        returns (string[] memory, bytes32[] memory, address[] memory);\r\n}\r\n"
    },
    "contracts/helpers/interfaces/ISismoConnectVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"../utils/Structs.sol\";\r\n\r\ninterface ISismoConnectVerifier {\r\n    event VerifierSet(bytes32, address);\r\n\r\n    error AppIdMismatch(bytes16 receivedAppId, bytes16 expectedAppId);\r\n    error NamespaceMismatch(\r\n        bytes16 receivedNamespace,\r\n        bytes16 expectedNamespace\r\n    );\r\n    error VersionMismatch(bytes32 requestVersion, bytes32 responseVersion);\r\n    error SignatureMessageMismatch(\r\n        bytes requestMessageSignature,\r\n        bytes responseMessageSignature\r\n    );\r\n\r\n    function verify(\r\n        SismoConnectResponse memory response,\r\n        SismoConnectRequest memory request,\r\n        SismoConnectConfig memory config\r\n    ) external view returns (SismoConnectVerifiedResult memory);\r\n\r\n    function SISMO_CONNECT_VERSION() external view returns (bytes32);\r\n}\r\n"
    },
    "contracts/helpers/SismoConnectLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport {RequestBuilder, SismoConnectRequest, SismoConnectResponse, SismoConnectConfig} from \"./utils/RequestBuilder.sol\";\r\nimport {AuthRequestBuilder, AuthRequest, Auth, VerifiedAuth, AuthType} from \"./utils/AuthRequestBuilder.sol\";\r\nimport {ClaimRequestBuilder, ClaimRequest, Claim, VerifiedClaim, ClaimType} from \"./utils/ClaimRequestBuilder.sol\";\r\nimport {SignatureBuilder, SignatureRequest, Signature} from \"./utils/SignatureBuilder.sol\";\r\nimport {VaultConfig} from \"./utils/Structs.sol\";\r\nimport {ISismoConnectVerifier, SismoConnectVerifiedResult} from \"./interfaces/ISismoConnectVerifier.sol\";\r\nimport {IAddressesProvider} from \"./interfaces/IAddressesProvider.sol\";\r\nimport {SismoConnectHelper} from \"./utils/SismoConnectHelper.sol\";\r\n\r\ncontract SismoConnect {\r\n    uint256 public constant SISMO_CONNECT_LIB_VERSION = 2;\r\n\r\n    IAddressesProvider public constant ADDRESSES_PROVIDER_V2 =\r\n        IAddressesProvider(0x3Cd5334eB64ebBd4003b72022CC25465f1BFcEe6);\r\n\r\n    ISismoConnectVerifier immutable _sismoConnectVerifier;\r\n\r\n    // external libraries\r\n    AuthRequestBuilder immutable _authRequestBuilder;\r\n    ClaimRequestBuilder immutable _claimRequestBuilder;\r\n    SignatureBuilder immutable _signatureBuilder;\r\n    RequestBuilder immutable _requestBuilder;\r\n\r\n    // config\r\n    bytes16 public immutable APP_ID;\r\n    bool public immutable IS_IMPERSONATION_MODE;\r\n\r\n    constructor(SismoConnectConfig memory _config) {\r\n        APP_ID = _config.appId;\r\n        IS_IMPERSONATION_MODE = _config.vault.isImpersonationMode;\r\n\r\n        _sismoConnectVerifier = ISismoConnectVerifier(\r\n            ADDRESSES_PROVIDER_V2.get(string(\"sismoConnectVerifier-v1.2\"))\r\n        );\r\n        // external libraries\r\n        _authRequestBuilder = AuthRequestBuilder(\r\n            ADDRESSES_PROVIDER_V2.get(string(\"authRequestBuilder-v1.1\"))\r\n        );\r\n        _claimRequestBuilder = ClaimRequestBuilder(\r\n            ADDRESSES_PROVIDER_V2.get(string(\"claimRequestBuilder-v1.1\"))\r\n        );\r\n        _signatureBuilder = SignatureBuilder(\r\n            ADDRESSES_PROVIDER_V2.get(string(\"signatureBuilder-v1.1\"))\r\n        );\r\n        _requestBuilder = RequestBuilder(\r\n            ADDRESSES_PROVIDER_V2.get(string(\"requestBuilder-v1.1\"))\r\n        );\r\n    }\r\n\r\n    // public function because it needs to be used by this contract and can be used by other contracts\r\n    function config() public view returns (SismoConnectConfig memory) {\r\n        return buildConfig(APP_ID);\r\n    }\r\n\r\n    function buildConfig(\r\n        bytes16 appId\r\n    ) internal pure returns (SismoConnectConfig memory) {\r\n        SismoConnectConfig memory result = SismoConnectConfig({\r\n            appId: appId,\r\n            vault: buildVaultConfig()\r\n        });\r\n        require(appId != bytes16(0), \"appId cannot be empty\");\r\n        require(\r\n            result.vault.isImpersonationMode == false,\r\n            \"impersonation mode is not supported\"\r\n        );\r\n        return result;\r\n    }\r\n\r\n    function buildVaultConfig() internal pure returns (VaultConfig memory) {\r\n        return VaultConfig({isImpersonationMode: false});\r\n    }\r\n\r\n    function verify(\r\n        bytes memory responseBytes,\r\n        AuthRequest[] memory auths,\r\n        SignatureRequest memory signature\r\n    ) internal view returns (SismoConnectVerifiedResult memory) {\r\n        SismoConnectResponse memory response = abi.decode(\r\n            responseBytes,\r\n            (SismoConnectResponse)\r\n        );\r\n        SismoConnectRequest memory request = buildRequest(auths, signature);\r\n        return _sismoConnectVerifier.verify(response, request, config());\r\n    }\r\n\r\n    function buildAuth(\r\n        AuthType authType,\r\n        bool isOptional,\r\n        bool isSelectableByUser\r\n    ) internal view returns (AuthRequest memory) {\r\n        return\r\n            _authRequestBuilder.build(authType, isOptional, isSelectableByUser);\r\n    }\r\n\r\n    function buildAuth(\r\n        AuthType authType\r\n    ) internal view returns (AuthRequest memory) {\r\n        return _authRequestBuilder.build(authType);\r\n    }\r\n\r\n    function buildSignature(\r\n        bytes memory message\r\n    ) internal view returns (SignatureRequest memory) {\r\n        return _signatureBuilder.build(message);\r\n    }\r\n\r\n    function buildRequest(\r\n        AuthRequest[] memory auths,\r\n        SignatureRequest memory signature\r\n    ) internal view returns (SismoConnectRequest memory) {\r\n        return _requestBuilder.build(auths, signature);\r\n    }\r\n\r\n    function _GET_EMPTY_SIGNATURE_REQUEST()\r\n        internal\r\n        view\r\n        returns (SignatureRequest memory)\r\n    {\r\n        return _signatureBuilder.buildEmpty();\r\n    }\r\n}\r\n"
    },
    "contracts/helpers/utils/AuthRequestBuilder.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"./Structs.sol\";\r\n\r\ncontract AuthRequestBuilder {\r\n    // default values for Auth Request\r\n    bool public constant DEFAULT_AUTH_REQUEST_IS_ANON = false;\r\n    uint256 public constant DEFAULT_AUTH_REQUEST_USER_ID = 0;\r\n    bool public constant DEFAULT_AUTH_REQUEST_IS_OPTIONAL = false;\r\n    bytes public constant DEFAULT_AUTH_REQUEST_EXTRA_DATA = \"\";\r\n\r\n    error InvalidUserIdAndIsSelectableByUserAuthType();\r\n    error InvalidUserIdAndAuthType();\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isAnon,\r\n        uint256 userId,\r\n        bool isOptional,\r\n        bool isSelectableByUser,\r\n        bytes memory extraData\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: userId,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isAnon,\r\n        uint256 userId,\r\n        bytes memory extraData\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: userId,\r\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\r\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\r\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\r\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isAnon\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\r\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\r\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        uint256 userId\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\r\n                userId: userId,\r\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\r\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bytes memory extraData\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\r\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\r\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isAnon,\r\n        uint256 userId\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: userId,\r\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\r\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isAnon,\r\n        bytes memory extraData\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\r\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        uint256 userId,\r\n        bytes memory extraData\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\r\n                userId: userId,\r\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    // allow dev to choose for isOptional\r\n    // the user is ask to choose isSelectableByUser to avoid the function signature collision\r\n    // between build(AuthType authType, bool isOptional) and build(AuthType authType, bool isAnon)\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isOptional,\r\n        bool isSelectableByUser\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\r\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isOptional,\r\n        bool isSelectableByUser,\r\n        uint256 userId\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\r\n                userId: userId,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    // the user is ask to choose isSelectableByUser to avoid the function signature collision\r\n    // between build(AuthType authType, bool isAnon, bool isOptional) and build(AuthType authType, bool isOptional, bool isSelectableByUser)\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isAnon,\r\n        bool isOptional,\r\n        bool isSelectableByUser\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        uint256 userId,\r\n        bool isOptional\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\r\n                userId: userId,\r\n                isOptional: isOptional,\r\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isAnon,\r\n        uint256 userId,\r\n        bool isOptional\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: userId,\r\n                isOptional: isOptional,\r\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function _build(\r\n        AuthType authType,\r\n        bool isAnon,\r\n        uint256 userId,\r\n        bool isOptional,\r\n        bytes memory extraData\r\n    ) internal pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: userId,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: _authIsSelectableDefaultValue(\r\n                    authType,\r\n                    userId\r\n                ),\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function _build(\r\n        AuthType authType,\r\n        bool isAnon,\r\n        uint256 userId,\r\n        bool isOptional,\r\n        bool isSelectableByUser,\r\n        bytes memory extraData\r\n    ) internal pure returns (AuthRequest memory) {\r\n        // When `userId` is 0, it means the app does not require a specific auth account and the user needs\r\n        // to choose the account they want to use for the app.\r\n        // When `isSelectableByUser` is true, the user can select the account they want to use.\r\n        // The combination of `userId = 0` and `isSelectableByUser = false` does not make sense and should not be used.\r\n        // If this combination is detected, the function will revert with an error.\r\n        if (\r\n            authType != AuthType.VAULT &&\r\n            userId == 0 &&\r\n            isSelectableByUser == false\r\n        ) {\r\n            revert InvalidUserIdAndIsSelectableByUserAuthType();\r\n        }\r\n        // When requesting an authType VAULT, the `userId` must be 0 and isSelectableByUser must be true.\r\n        if (\r\n            authType == AuthType.VAULT &&\r\n            userId != 0 &&\r\n            isSelectableByUser == false\r\n        ) {\r\n            revert InvalidUserIdAndAuthType();\r\n        }\r\n        return\r\n            AuthRequest({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: userId,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function _authIsSelectableDefaultValue(\r\n        AuthType authType,\r\n        uint256 requestedUserId\r\n    ) internal pure returns (bool) {\r\n        // isSelectableByUser value should always be false in case of VAULT authType.\r\n        // This is because the user can't select the account they want to use for the app.\r\n        // the userId = Hash(VaultSecret, AppId) in the case of VAULT authType.\r\n        if (authType == AuthType.VAULT) {\r\n            return false;\r\n        }\r\n        // When `requestedUserId` is 0, it means no specific auth account is requested by the app,\r\n        // so we want the default value for `isSelectableByUser` to be `true`.\r\n        if (requestedUserId == 0) {\r\n            return true;\r\n        }\r\n        // When `requestedUserId` is not 0, it means a specific auth account is requested by the app,\r\n        // so we want the default value for `isSelectableByUser` to be `false`.\r\n        else {\r\n            return false;\r\n        }\r\n        // However, the dev can still override this default value by setting `isSelectableByUser` to `true`.\r\n    }\r\n}\r\n"
    },
    "contracts/helpers/utils/ClaimRequestBuilder.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"./Structs.sol\";\r\n\r\ncontract ClaimRequestBuilder {\r\n    // default value for Claim Request\r\n    bytes16 public constant DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP =\r\n        bytes16(\"latest\");\r\n    uint256 public constant DEFAULT_CLAIM_REQUEST_VALUE = 1;\r\n    ClaimType public constant DEFAULT_CLAIM_REQUEST_TYPE = ClaimType.GTE;\r\n    bool public constant DEFAULT_CLAIM_REQUEST_IS_OPTIONAL = false;\r\n    bool public constant DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER = true;\r\n    bytes public constant DEFAULT_CLAIM_REQUEST_EXTRA_DATA = \"\";\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        uint256 value,\r\n        ClaimType claimType,\r\n        bool isOptional,\r\n        bool isSelectableByUser,\r\n        bytes memory extraData\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                claimType: claimType,\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: value,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        uint256 value,\r\n        ClaimType claimType,\r\n        bytes memory extraData\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                claimType: claimType,\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: value,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        uint256 value\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: value,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        ClaimType claimType\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: claimType,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes memory extraData\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        uint256 value\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: value,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        ClaimType claimType\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: claimType,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        bytes memory extraData\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        uint256 value,\r\n        ClaimType claimType\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: value,\r\n                claimType: claimType,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        uint256 value,\r\n        bytes memory extraData\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: value,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        ClaimType claimType,\r\n        bytes memory extraData\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: claimType,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        uint256 value,\r\n        ClaimType claimType\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: value,\r\n                claimType: claimType,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        uint256 value,\r\n        bytes memory extraData\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: value,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        ClaimType claimType,\r\n        bytes memory extraData\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: claimType,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        uint256 value,\r\n        ClaimType claimType,\r\n        bytes memory extraData\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: value,\r\n                claimType: claimType,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    // allow dev to choose for isOptional\r\n    // we force to also set isSelectableByUser\r\n    // otherwise function signatures would be colliding\r\n    // between build(bytes16 groupId, bool isOptional) and build(bytes16 groupId, bool isSelectableByUser)\r\n    // we keep this logic for all function signature combinations\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bool isOptional,\r\n        bool isSelectableByUser\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        bool isOptional,\r\n        bool isSelectableByUser\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        uint256 value,\r\n        bool isOptional,\r\n        bool isSelectableByUser\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: value,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        ClaimType claimType,\r\n        bool isOptional,\r\n        bool isSelectableByUser\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: claimType,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        uint256 value,\r\n        bool isOptional,\r\n        bool isSelectableByUser\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: value,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        ClaimType claimType,\r\n        bool isOptional,\r\n        bool isSelectableByUser\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: claimType,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        uint256 value,\r\n        ClaimType claimType,\r\n        bool isOptional,\r\n        bool isSelectableByUser\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: value,\r\n                claimType: claimType,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        uint256 value,\r\n        ClaimType claimType,\r\n        bool isOptional,\r\n        bool isSelectableByUser\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: value,\r\n                claimType: claimType,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n}\r\n"
    },
    "contracts/helpers/utils/RequestBuilder.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"./Structs.sol\";\r\nimport {SignatureBuilder} from \"./SignatureBuilder.sol\";\r\n\r\ncontract RequestBuilder {\r\n    // default value for namespace\r\n    bytes16 public constant DEFAULT_NAMESPACE = bytes16(keccak256(\"main\"));\r\n    // default value for a signature request\r\n    SignatureRequest DEFAULT_SIGNATURE_REQUEST =\r\n        SignatureRequest({\r\n            message: \"MESSAGE_SELECTED_BY_USER\",\r\n            isSelectableByUser: false,\r\n            extraData: \"\"\r\n        });\r\n\r\n    function build(\r\n        AuthRequest memory auth,\r\n        ClaimRequest memory claim,\r\n        SignatureRequest memory signature,\r\n        bytes16 namespace\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](1);\r\n        auths[0] = auth;\r\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\r\n        claims[0] = claim;\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest memory auth,\r\n        ClaimRequest memory claim,\r\n        bytes16 namespace\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](1);\r\n        auths[0] = auth;\r\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\r\n        claims[0] = claim;\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        ClaimRequest memory claim,\r\n        SignatureRequest memory signature,\r\n        bytes16 namespace\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](0);\r\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\r\n        claims[0] = claim;\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        ClaimRequest memory claim,\r\n        bytes16 namespace\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](0);\r\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\r\n        claims[0] = claim;\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest memory auth,\r\n        SignatureRequest memory signature,\r\n        bytes16 namespace\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](1);\r\n        auths[0] = auth;\r\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest memory auth,\r\n        bytes16 namespace\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](1);\r\n        auths[0] = auth;\r\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest memory auth,\r\n        ClaimRequest memory claim,\r\n        SignatureRequest memory signature\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](1);\r\n        auths[0] = auth;\r\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\r\n        claims[0] = claim;\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest memory auth,\r\n        ClaimRequest memory claim\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](1);\r\n        auths[0] = auth;\r\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\r\n        claims[0] = claim;\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest memory auth,\r\n        SignatureRequest memory signature\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](1);\r\n        auths[0] = auth;\r\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest memory auth\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](1);\r\n        auths[0] = auth;\r\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        ClaimRequest memory claim,\r\n        SignatureRequest memory signature\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](0);\r\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\r\n        claims[0] = claim;\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        ClaimRequest memory claim\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](0);\r\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\r\n        claims[0] = claim;\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n\r\n    // build with arrays for auths and claims\r\n    function build(\r\n        AuthRequest[] memory auths,\r\n        ClaimRequest[] memory claims,\r\n        SignatureRequest memory signature,\r\n        bytes16 namespace\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest[] memory auths,\r\n        ClaimRequest[] memory claims,\r\n        bytes16 namespace\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        ClaimRequest[] memory claims,\r\n        SignatureRequest memory signature,\r\n        bytes16 namespace\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        ClaimRequest[] memory claims,\r\n        bytes16 namespace\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest[] memory auths,\r\n        SignatureRequest memory signature,\r\n        bytes16 namespace\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest[] memory auths,\r\n        bytes16 namespace\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest[] memory auths,\r\n        ClaimRequest[] memory claims,\r\n        SignatureRequest memory signature\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest[] memory auths,\r\n        ClaimRequest[] memory claims\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest[] memory auths,\r\n        SignatureRequest memory signature\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest[] memory auths\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        ClaimRequest[] memory claims,\r\n        SignatureRequest memory signature\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        ClaimRequest[] memory claims\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n}\r\n"
    },
    "contracts/helpers/utils/SignatureBuilder.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"./Structs.sol\";\r\n\r\ncontract SignatureBuilder {\r\n    // default values for Signature Request\r\n    bytes public constant DEFAULT_SIGNATURE_REQUEST_MESSAGE =\r\n        \"MESSAGE_SELECTED_BY_USER\";\r\n    bool public constant DEFAULT_SIGNATURE_REQUEST_IS_SELECTABLE_BY_USER =\r\n        false;\r\n    bytes public constant DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA = \"\";\r\n\r\n    function build(\r\n        bytes memory message\r\n    ) external pure returns (SignatureRequest memory) {\r\n        return\r\n            SignatureRequest({\r\n                message: message,\r\n                isSelectableByUser: DEFAULT_SIGNATURE_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes memory message,\r\n        bool isSelectableByUser\r\n    ) external pure returns (SignatureRequest memory) {\r\n        return\r\n            SignatureRequest({\r\n                message: message,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes memory message,\r\n        bytes memory extraData\r\n    ) external pure returns (SignatureRequest memory) {\r\n        return\r\n            SignatureRequest({\r\n                message: message,\r\n                isSelectableByUser: DEFAULT_SIGNATURE_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes memory message,\r\n        bool isSelectableByUser,\r\n        bytes memory extraData\r\n    ) external pure returns (SignatureRequest memory) {\r\n        return\r\n            SignatureRequest({\r\n                message: message,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bool isSelectableByUser\r\n    ) external pure returns (SignatureRequest memory) {\r\n        return\r\n            SignatureRequest({\r\n                message: DEFAULT_SIGNATURE_REQUEST_MESSAGE,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bool isSelectableByUser,\r\n        bytes memory extraData\r\n    ) external pure returns (SignatureRequest memory) {\r\n        return\r\n            SignatureRequest({\r\n                message: DEFAULT_SIGNATURE_REQUEST_MESSAGE,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function buildEmpty() external pure returns (SignatureRequest memory) {\r\n        return\r\n            SignatureRequest({\r\n                message: DEFAULT_SIGNATURE_REQUEST_MESSAGE,\r\n                isSelectableByUser: DEFAULT_SIGNATURE_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n}\r\n"
    },
    "contracts/helpers/utils/SismoConnectHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"./Structs.sol\";\r\n\r\nlibrary SismoConnectHelper {\r\n    error AuthTypeNotFoundInVerifiedResult(AuthType authType);\r\n\r\n    function getUserId(\r\n        SismoConnectVerifiedResult memory result,\r\n        AuthType authType\r\n    ) internal pure returns (uint256) {\r\n        // get the first userId that matches the authType\r\n        for (uint256 i = 0; i < result.auths.length; i++) {\r\n            if (result.auths[i].authType == authType) {\r\n                return result.auths[i].userId;\r\n            }\r\n        }\r\n        revert AuthTypeNotFoundInVerifiedResult(authType);\r\n    }\r\n\r\n    function getUserIds(\r\n        SismoConnectVerifiedResult memory result,\r\n        AuthType authType\r\n    ) internal pure returns (uint256[] memory) {\r\n        // get all userIds that match the authType\r\n        uint256[] memory userIds = new uint256[](result.auths.length);\r\n        for (uint256 i = 0; i < result.auths.length; i++) {\r\n            if (result.auths[i].authType == authType) {\r\n                userIds[i] = result.auths[i].userId;\r\n            }\r\n        }\r\n        return userIds;\r\n    }\r\n\r\n    function getSignedMessage(\r\n        SismoConnectVerifiedResult memory result\r\n    ) internal pure returns (bytes memory) {\r\n        return result.signedMessage;\r\n    }\r\n}\r\n"
    },
    "contracts/helpers/utils/Structs.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nstruct SismoConnectRequest {\r\n    bytes16 namespace;\r\n    AuthRequest[] auths;\r\n    ClaimRequest[] claims;\r\n    SignatureRequest signature;\r\n}\r\n\r\nstruct SismoConnectConfig {\r\n    bytes16 appId;\r\n    VaultConfig vault;\r\n}\r\n\r\nstruct VaultConfig {\r\n    bool isImpersonationMode;\r\n}\r\n\r\nstruct AuthRequest {\r\n    AuthType authType;\r\n    uint256 userId; // default: 0\r\n    // flags\r\n    bool isAnon; // default: false -> true not supported yet, need to throw if true\r\n    bool isOptional; // default: false\r\n    bool isSelectableByUser; // default: true\r\n    //\r\n    bytes extraData; // default: \"\"\r\n}\r\n\r\nstruct ClaimRequest {\r\n    ClaimType claimType; // default: GTE\r\n    bytes16 groupId;\r\n    bytes16 groupTimestamp; // default: bytes16(\"latest\")\r\n    uint256 value; // default: 1\r\n    // flags\r\n    bool isOptional; // default: false\r\n    bool isSelectableByUser; // default: true\r\n    //\r\n    bytes extraData; // default: \"\"\r\n}\r\n\r\nstruct SignatureRequest {\r\n    bytes message; // default: \"MESSAGE_SELECTED_BY_USER\"\r\n    bool isSelectableByUser; // default: false\r\n    bytes extraData; // default: \"\"\r\n}\r\n\r\nenum AuthType {\r\n    VAULT,\r\n    GITHUB,\r\n    TWITTER,\r\n    EVM_ACCOUNT,\r\n    TELEGRAM,\r\n    DISCORD\r\n}\r\n\r\nenum ClaimType {\r\n    GTE,\r\n    GT,\r\n    EQ,\r\n    LT,\r\n    LTE\r\n}\r\n\r\nstruct Auth {\r\n    AuthType authType;\r\n    bool isAnon;\r\n    bool isSelectableByUser;\r\n    uint256 userId;\r\n    bytes extraData;\r\n}\r\n\r\nstruct Claim {\r\n    ClaimType claimType;\r\n    bytes16 groupId;\r\n    bytes16 groupTimestamp;\r\n    bool isSelectableByUser;\r\n    uint256 value;\r\n    bytes extraData;\r\n}\r\n\r\nstruct Signature {\r\n    bytes message;\r\n    bytes extraData;\r\n}\r\n\r\nstruct SismoConnectResponse {\r\n    bytes16 appId;\r\n    bytes16 namespace;\r\n    bytes32 version;\r\n    bytes signedMessage;\r\n    SismoConnectProof[] proofs;\r\n}\r\n\r\nstruct SismoConnectProof {\r\n    Auth[] auths;\r\n    Claim[] claims;\r\n    bytes32 provingScheme;\r\n    bytes proofData;\r\n    bytes extraData;\r\n}\r\n\r\nstruct SismoConnectVerifiedResult {\r\n    bytes16 appId;\r\n    bytes16 namespace;\r\n    bytes32 version;\r\n    VerifiedAuth[] auths;\r\n    VerifiedClaim[] claims;\r\n    bytes signedMessage;\r\n}\r\n\r\nstruct VerifiedAuth {\r\n    AuthType authType;\r\n    bool isAnon;\r\n    uint256 userId;\r\n    bytes extraData;\r\n    bytes proofData;\r\n}\r\n\r\nstruct VerifiedClaim {\r\n    ClaimType claimType;\r\n    bytes16 groupId;\r\n    bytes16 groupTimestamp;\r\n    uint256 value;\r\n    bytes extraData;\r\n    uint256 proofId;\r\n    bytes proofData;\r\n}\r\n"
    },
    "contracts/MecenateVerifier.sol": {
      "content": "/**\n * @title MecenateVerifier\n * @dev Contract that verifies user identity using SismoConnect and returns user's vaultId, twitterId and telegramId.\n */\npragma solidity ^0.8.17;\nimport \"./helpers/SismoConnectLib.sol\";\n\ncontract MecenateVerifier is SismoConnect {\n    bytes16 public appId;\n\n    constructor(bytes16 _appId) SismoConnect(buildConfig(_appId)) {\n        appId = _appId;\n    }\n\n    function sismoVerify(\n        bytes memory sismoConnectResponse,\n        address _to,\n        address _from\n    ) external view returns (bytes memory, uint256, uint256) {\n        require(sismoConnectResponse.length > 0, \"empty response\");\n\n        // Build authorization requests\n        AuthRequest[] memory auths = new AuthRequest[](3);\n\n        auths[0] = buildAuth(AuthType.VAULT);\n\n        auths[1] = buildAuth({\n            authType: AuthType.TWITTER,\n            isOptional: true,\n            isSelectableByUser: true\n        });\n\n        auths[2] = buildAuth({\n            authType: AuthType.TELEGRAM,\n            isOptional: true,\n            isSelectableByUser: true\n        });\n\n        // Verify the response\n        SismoConnectVerifiedResult memory result = verify({\n            responseBytes: sismoConnectResponse,\n            auths: auths,\n            signature: buildSignature({message: abi.encode(_to, _from)})\n        });\n\n        bytes memory signedMessage = SismoConnectHelper.getSignedMessage(\n            result\n        );\n\n        (address to, address from) = abi.decode(\n            signedMessage,\n            (address, address)\n        );\n\n        require(_from == from, \"WRONG_FROM_ADDRESS\");\n\n        require(to == _to, \"WRONG_TO_ADDRESS\");\n\n        // Store the verified auths\n        VerifiedAuth[] memory _verifiedAuths = new VerifiedAuth[](\n            result.auths.length\n        );\n\n        for (uint256 i = 0; i < result.auths.length; i++) {\n            _verifiedAuths[i] = result.auths[i];\n        }\n\n        // Get the vaultId of the user\n        // --> vaultId = hash(userVaultSecret, appId)\n        uint256 vaultId = SismoConnectHelper.getUserId(result, AuthType.VAULT);\n\n        // Convert the vaultId to bytes\n        bytes memory vaultIdBytes = abi.encodePacked(vaultId);\n\n        // Get the userId of the user\n        uint256 twitterId = 0;\n        uint256 telegramId = 0;\n\n        for (uint256 i = 0; i < _verifiedAuths.length; i++) {\n            if (_verifiedAuths[i].authType == AuthType.TWITTER) {\n                twitterId = SismoConnectHelper.getUserId(\n                    result,\n                    AuthType.TWITTER\n                );\n            } else if (_verifiedAuths[i].authType == AuthType.TELEGRAM) {\n                telegramId = SismoConnectHelper.getUserId(\n                    result,\n                    AuthType.TELEGRAM\n                );\n            }\n        }\n\n        return (vaultIdBytes, twitterId, telegramId);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}