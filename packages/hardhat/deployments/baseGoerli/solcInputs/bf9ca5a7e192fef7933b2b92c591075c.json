{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/helpers/sismo/interfaces/IAddressesProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\ninterface IAddressesProvider {\r\n    /**\r\n     * @dev Sets the address of a contract.\r\n     * @param contractAddress Address of the contract.\r\n     * @param contractName Name of the contract.\r\n     */\r\n    function set(address contractAddress, string memory contractName) external;\r\n\r\n    /**\r\n     * @dev Sets the address of multiple contracts.\r\n     * @param contractAddresses Addresses of the contracts.\r\n     * @param contractNames Names of the contracts.\r\n     */\r\n    function setBatch(\r\n        address[] calldata contractAddresses,\r\n        string[] calldata contractNames\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the address of a contract.\r\n     * @param contractName Name of the contract (string).\r\n     * @return Address of the contract.\r\n     */\r\n    function get(string memory contractName) external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the address of a contract.\r\n     * @param contractNameHash Hash of the name of the contract (bytes32).\r\n     * @return Address of the contract.\r\n     */\r\n    function get(bytes32 contractNameHash) external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the addresses of all contracts inputed.\r\n     * @param contractNames Names of the contracts as strings.\r\n     */\r\n    function getBatch(\r\n        string[] calldata contractNames\r\n    ) external view returns (address[] memory);\r\n\r\n    /**\r\n     * @dev Returns the addresses of all contracts inputed.\r\n     * @param contractNamesHash Names of the contracts as strings.\r\n     */\r\n    function getBatch(\r\n        bytes32[] calldata contractNamesHash\r\n    ) external view returns (address[] memory);\r\n\r\n    /**\r\n     * @dev Returns the addresses of all contracts in `_contractNames`\r\n     * @return Names, Hashed Names and Addresses of all contracts.\r\n     */\r\n    function getAll()\r\n        external\r\n        view\r\n        returns (string[] memory, bytes32[] memory, address[] memory);\r\n}\r\n"
    },
    "contracts/helpers/sismo/interfaces/ISismoConnectVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"../utils/Structs.sol\";\r\n\r\ninterface ISismoConnectVerifier {\r\n    event VerifierSet(bytes32, address);\r\n\r\n    error AppIdMismatch(bytes16 receivedAppId, bytes16 expectedAppId);\r\n    error NamespaceMismatch(\r\n        bytes16 receivedNamespace,\r\n        bytes16 expectedNamespace\r\n    );\r\n    error VersionMismatch(bytes32 requestVersion, bytes32 responseVersion);\r\n    error SignatureMessageMismatch(\r\n        bytes requestMessageSignature,\r\n        bytes responseMessageSignature\r\n    );\r\n\r\n    function verify(\r\n        SismoConnectResponse memory response,\r\n        SismoConnectRequest memory request,\r\n        SismoConnectConfig memory config\r\n    ) external view returns (SismoConnectVerifiedResult memory);\r\n\r\n    function SISMO_CONNECT_VERSION() external view returns (bytes32);\r\n}\r\n"
    },
    "contracts/helpers/sismo/SismoConnectLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport {RequestBuilder, SismoConnectRequest, SismoConnectResponse, SismoConnectConfig} from \"./utils/RequestBuilder.sol\";\r\nimport {AuthRequestBuilder, AuthRequest, Auth, VerifiedAuth, AuthType} from \"./utils/AuthRequestBuilder.sol\";\r\nimport {ClaimRequestBuilder, ClaimRequest, Claim, VerifiedClaim, ClaimType} from \"./utils/ClaimRequestBuilder.sol\";\r\nimport {SignatureBuilder, SignatureRequest, Signature} from \"./utils/SignatureBuilder.sol\";\r\nimport {VaultConfig} from \"./utils/Structs.sol\";\r\nimport {ISismoConnectVerifier, SismoConnectVerifiedResult} from \"./interfaces/ISismoConnectVerifier.sol\";\r\nimport {IAddressesProvider} from \"./interfaces/IAddressesProvider.sol\";\r\nimport {SismoConnectHelper} from \"./utils/SismoConnectHelper.sol\";\r\n\r\ncontract SismoConnect {\r\n    uint256 public constant SISMO_CONNECT_LIB_VERSION = 2;\r\n\r\n    IAddressesProvider public constant ADDRESSES_PROVIDER_V2 =\r\n        IAddressesProvider(0x3Cd5334eB64ebBd4003b72022CC25465f1BFcEe6);\r\n\r\n    ISismoConnectVerifier immutable _sismoConnectVerifier;\r\n\r\n    // external libraries\r\n    AuthRequestBuilder immutable _authRequestBuilder;\r\n    ClaimRequestBuilder immutable _claimRequestBuilder;\r\n    SignatureBuilder immutable _signatureBuilder;\r\n    RequestBuilder immutable _requestBuilder;\r\n\r\n    // config\r\n    bytes16 public immutable APP_ID;\r\n    bool public immutable IS_IMPERSONATION_MODE;\r\n\r\n    constructor(SismoConnectConfig memory _config) {\r\n        APP_ID = _config.appId;\r\n        IS_IMPERSONATION_MODE = _config.vault.isImpersonationMode;\r\n\r\n        _sismoConnectVerifier = ISismoConnectVerifier(\r\n            ADDRESSES_PROVIDER_V2.get(string(\"sismoConnectVerifier-v1.2\"))\r\n        );\r\n        // external libraries\r\n        _authRequestBuilder = AuthRequestBuilder(\r\n            ADDRESSES_PROVIDER_V2.get(string(\"authRequestBuilder-v1.1\"))\r\n        );\r\n        _claimRequestBuilder = ClaimRequestBuilder(\r\n            ADDRESSES_PROVIDER_V2.get(string(\"claimRequestBuilder-v1.1\"))\r\n        );\r\n        _signatureBuilder = SignatureBuilder(\r\n            ADDRESSES_PROVIDER_V2.get(string(\"signatureBuilder-v1.1\"))\r\n        );\r\n        _requestBuilder = RequestBuilder(\r\n            ADDRESSES_PROVIDER_V2.get(string(\"requestBuilder-v1.1\"))\r\n        );\r\n    }\r\n\r\n    // public function because it needs to be used by this contract and can be used by other contracts\r\n    function config() public view returns (SismoConnectConfig memory) {\r\n        return buildConfig(APP_ID);\r\n    }\r\n\r\n    function buildConfig(\r\n        bytes16 appId\r\n    ) internal pure returns (SismoConnectConfig memory) {\r\n        SismoConnectConfig memory result = SismoConnectConfig({\r\n            appId: appId,\r\n            vault: buildVaultConfig()\r\n        });\r\n        require(appId != bytes16(0), \"appId cannot be empty\");\r\n        require(\r\n            result.vault.isImpersonationMode == false,\r\n            \"impersonation mode is not supported\"\r\n        );\r\n        return result;\r\n    }\r\n\r\n    function buildVaultConfig() internal pure returns (VaultConfig memory) {\r\n        return VaultConfig({isImpersonationMode: false});\r\n    }\r\n\r\n    function verify(\r\n        bytes memory responseBytes,\r\n        AuthRequest[] memory auths,\r\n        SignatureRequest memory signature\r\n    ) internal view returns (SismoConnectVerifiedResult memory) {\r\n        SismoConnectResponse memory response = abi.decode(\r\n            responseBytes,\r\n            (SismoConnectResponse)\r\n        );\r\n        SismoConnectRequest memory request = buildRequest(auths, signature);\r\n        return _sismoConnectVerifier.verify(response, request, config());\r\n    }\r\n\r\n    function buildAuth(\r\n        AuthType authType,\r\n        bool isOptional,\r\n        bool isSelectableByUser\r\n    ) internal view returns (AuthRequest memory) {\r\n        return\r\n            _authRequestBuilder.build(authType, isOptional, isSelectableByUser);\r\n    }\r\n\r\n    function buildAuth(\r\n        AuthType authType\r\n    ) internal view returns (AuthRequest memory) {\r\n        return _authRequestBuilder.build(authType);\r\n    }\r\n\r\n    function buildSignature(\r\n        bytes memory message\r\n    ) internal view returns (SignatureRequest memory) {\r\n        return _signatureBuilder.build(message);\r\n    }\r\n\r\n    function buildRequest(\r\n        AuthRequest[] memory auths,\r\n        SignatureRequest memory signature\r\n    ) internal view returns (SismoConnectRequest memory) {\r\n        return _requestBuilder.build(auths, signature);\r\n    }\r\n\r\n    function _GET_EMPTY_SIGNATURE_REQUEST()\r\n        internal\r\n        view\r\n        returns (SignatureRequest memory)\r\n    {\r\n        return _signatureBuilder.buildEmpty();\r\n    }\r\n}\r\n"
    },
    "contracts/helpers/sismo/utils/AuthRequestBuilder.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"./Structs.sol\";\r\n\r\ncontract AuthRequestBuilder {\r\n    // default values for Auth Request\r\n    bool public constant DEFAULT_AUTH_REQUEST_IS_ANON = false;\r\n    uint256 public constant DEFAULT_AUTH_REQUEST_USER_ID = 0;\r\n    bool public constant DEFAULT_AUTH_REQUEST_IS_OPTIONAL = false;\r\n    bytes public constant DEFAULT_AUTH_REQUEST_EXTRA_DATA = \"\";\r\n\r\n    error InvalidUserIdAndIsSelectableByUserAuthType();\r\n    error InvalidUserIdAndAuthType();\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isAnon,\r\n        uint256 userId,\r\n        bool isOptional,\r\n        bool isSelectableByUser,\r\n        bytes memory extraData\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: userId,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isAnon,\r\n        uint256 userId,\r\n        bytes memory extraData\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: userId,\r\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\r\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\r\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\r\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isAnon\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\r\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\r\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        uint256 userId\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\r\n                userId: userId,\r\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\r\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bytes memory extraData\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\r\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\r\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isAnon,\r\n        uint256 userId\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: userId,\r\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\r\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isAnon,\r\n        bytes memory extraData\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\r\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        uint256 userId,\r\n        bytes memory extraData\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\r\n                userId: userId,\r\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    // allow dev to choose for isOptional\r\n    // the user is ask to choose isSelectableByUser to avoid the function signature collision\r\n    // between build(AuthType authType, bool isOptional) and build(AuthType authType, bool isAnon)\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isOptional,\r\n        bool isSelectableByUser\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\r\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isOptional,\r\n        bool isSelectableByUser,\r\n        uint256 userId\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\r\n                userId: userId,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    // the user is ask to choose isSelectableByUser to avoid the function signature collision\r\n    // between build(AuthType authType, bool isAnon, bool isOptional) and build(AuthType authType, bool isOptional, bool isSelectableByUser)\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isAnon,\r\n        bool isOptional,\r\n        bool isSelectableByUser\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        uint256 userId,\r\n        bool isOptional\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\r\n                userId: userId,\r\n                isOptional: isOptional,\r\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isAnon,\r\n        uint256 userId,\r\n        bool isOptional\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: userId,\r\n                isOptional: isOptional,\r\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function _build(\r\n        AuthType authType,\r\n        bool isAnon,\r\n        uint256 userId,\r\n        bool isOptional,\r\n        bytes memory extraData\r\n    ) internal pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: userId,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: _authIsSelectableDefaultValue(\r\n                    authType,\r\n                    userId\r\n                ),\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function _build(\r\n        AuthType authType,\r\n        bool isAnon,\r\n        uint256 userId,\r\n        bool isOptional,\r\n        bool isSelectableByUser,\r\n        bytes memory extraData\r\n    ) internal pure returns (AuthRequest memory) {\r\n        // When `userId` is 0, it means the app does not require a specific auth account and the user needs\r\n        // to choose the account they want to use for the app.\r\n        // When `isSelectableByUser` is true, the user can select the account they want to use.\r\n        // The combination of `userId = 0` and `isSelectableByUser = false` does not make sense and should not be used.\r\n        // If this combination is detected, the function will revert with an error.\r\n        if (\r\n            authType != AuthType.VAULT &&\r\n            userId == 0 &&\r\n            isSelectableByUser == false\r\n        ) {\r\n            revert InvalidUserIdAndIsSelectableByUserAuthType();\r\n        }\r\n        // When requesting an authType VAULT, the `userId` must be 0 and isSelectableByUser must be true.\r\n        if (\r\n            authType == AuthType.VAULT &&\r\n            userId != 0 &&\r\n            isSelectableByUser == false\r\n        ) {\r\n            revert InvalidUserIdAndAuthType();\r\n        }\r\n        return\r\n            AuthRequest({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: userId,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function _authIsSelectableDefaultValue(\r\n        AuthType authType,\r\n        uint256 requestedUserId\r\n    ) internal pure returns (bool) {\r\n        // isSelectableByUser value should always be false in case of VAULT authType.\r\n        // This is because the user can't select the account they want to use for the app.\r\n        // the userId = Hash(VaultSecret, AppId) in the case of VAULT authType.\r\n        if (authType == AuthType.VAULT) {\r\n            return false;\r\n        }\r\n        // When `requestedUserId` is 0, it means no specific auth account is requested by the app,\r\n        // so we want the default value for `isSelectableByUser` to be `true`.\r\n        if (requestedUserId == 0) {\r\n            return true;\r\n        }\r\n        // When `requestedUserId` is not 0, it means a specific auth account is requested by the app,\r\n        // so we want the default value for `isSelectableByUser` to be `false`.\r\n        else {\r\n            return false;\r\n        }\r\n        // However, the dev can still override this default value by setting `isSelectableByUser` to `true`.\r\n    }\r\n}\r\n"
    },
    "contracts/helpers/sismo/utils/ClaimRequestBuilder.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"./Structs.sol\";\r\n\r\ncontract ClaimRequestBuilder {\r\n    // default value for Claim Request\r\n    bytes16 public constant DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP =\r\n        bytes16(\"latest\");\r\n    uint256 public constant DEFAULT_CLAIM_REQUEST_VALUE = 1;\r\n    ClaimType public constant DEFAULT_CLAIM_REQUEST_TYPE = ClaimType.GTE;\r\n    bool public constant DEFAULT_CLAIM_REQUEST_IS_OPTIONAL = false;\r\n    bool public constant DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER = true;\r\n    bytes public constant DEFAULT_CLAIM_REQUEST_EXTRA_DATA = \"\";\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        uint256 value,\r\n        ClaimType claimType,\r\n        bool isOptional,\r\n        bool isSelectableByUser,\r\n        bytes memory extraData\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                claimType: claimType,\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: value,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        uint256 value,\r\n        ClaimType claimType,\r\n        bytes memory extraData\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                claimType: claimType,\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: value,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        uint256 value\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: value,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        ClaimType claimType\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: claimType,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes memory extraData\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        uint256 value\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: value,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        ClaimType claimType\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: claimType,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        bytes memory extraData\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        uint256 value,\r\n        ClaimType claimType\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: value,\r\n                claimType: claimType,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        uint256 value,\r\n        bytes memory extraData\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: value,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        ClaimType claimType,\r\n        bytes memory extraData\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: claimType,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        uint256 value,\r\n        ClaimType claimType\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: value,\r\n                claimType: claimType,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        uint256 value,\r\n        bytes memory extraData\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: value,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        ClaimType claimType,\r\n        bytes memory extraData\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: claimType,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        uint256 value,\r\n        ClaimType claimType,\r\n        bytes memory extraData\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: value,\r\n                claimType: claimType,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    // allow dev to choose for isOptional\r\n    // we force to also set isSelectableByUser\r\n    // otherwise function signatures would be colliding\r\n    // between build(bytes16 groupId, bool isOptional) and build(bytes16 groupId, bool isSelectableByUser)\r\n    // we keep this logic for all function signature combinations\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bool isOptional,\r\n        bool isSelectableByUser\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        bool isOptional,\r\n        bool isSelectableByUser\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        uint256 value,\r\n        bool isOptional,\r\n        bool isSelectableByUser\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: value,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        ClaimType claimType,\r\n        bool isOptional,\r\n        bool isSelectableByUser\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: claimType,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        uint256 value,\r\n        bool isOptional,\r\n        bool isSelectableByUser\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: value,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        ClaimType claimType,\r\n        bool isOptional,\r\n        bool isSelectableByUser\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: claimType,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        uint256 value,\r\n        ClaimType claimType,\r\n        bool isOptional,\r\n        bool isSelectableByUser\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: value,\r\n                claimType: claimType,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        uint256 value,\r\n        ClaimType claimType,\r\n        bool isOptional,\r\n        bool isSelectableByUser\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: value,\r\n                claimType: claimType,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n}\r\n"
    },
    "contracts/helpers/sismo/utils/RequestBuilder.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"./Structs.sol\";\r\nimport {SignatureBuilder} from \"./SignatureBuilder.sol\";\r\n\r\ncontract RequestBuilder {\r\n    // default value for namespace\r\n    bytes16 public constant DEFAULT_NAMESPACE = bytes16(keccak256(\"main\"));\r\n    // default value for a signature request\r\n    SignatureRequest DEFAULT_SIGNATURE_REQUEST =\r\n        SignatureRequest({\r\n            message: \"MESSAGE_SELECTED_BY_USER\",\r\n            isSelectableByUser: false,\r\n            extraData: \"\"\r\n        });\r\n\r\n    function build(\r\n        AuthRequest memory auth,\r\n        ClaimRequest memory claim,\r\n        SignatureRequest memory signature,\r\n        bytes16 namespace\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](1);\r\n        auths[0] = auth;\r\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\r\n        claims[0] = claim;\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest memory auth,\r\n        ClaimRequest memory claim,\r\n        bytes16 namespace\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](1);\r\n        auths[0] = auth;\r\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\r\n        claims[0] = claim;\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        ClaimRequest memory claim,\r\n        SignatureRequest memory signature,\r\n        bytes16 namespace\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](0);\r\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\r\n        claims[0] = claim;\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        ClaimRequest memory claim,\r\n        bytes16 namespace\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](0);\r\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\r\n        claims[0] = claim;\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest memory auth,\r\n        SignatureRequest memory signature,\r\n        bytes16 namespace\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](1);\r\n        auths[0] = auth;\r\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest memory auth,\r\n        bytes16 namespace\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](1);\r\n        auths[0] = auth;\r\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest memory auth,\r\n        ClaimRequest memory claim,\r\n        SignatureRequest memory signature\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](1);\r\n        auths[0] = auth;\r\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\r\n        claims[0] = claim;\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest memory auth,\r\n        ClaimRequest memory claim\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](1);\r\n        auths[0] = auth;\r\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\r\n        claims[0] = claim;\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest memory auth,\r\n        SignatureRequest memory signature\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](1);\r\n        auths[0] = auth;\r\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest memory auth\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](1);\r\n        auths[0] = auth;\r\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        ClaimRequest memory claim,\r\n        SignatureRequest memory signature\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](0);\r\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\r\n        claims[0] = claim;\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        ClaimRequest memory claim\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](0);\r\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\r\n        claims[0] = claim;\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n\r\n    // build with arrays for auths and claims\r\n    function build(\r\n        AuthRequest[] memory auths,\r\n        ClaimRequest[] memory claims,\r\n        SignatureRequest memory signature,\r\n        bytes16 namespace\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest[] memory auths,\r\n        ClaimRequest[] memory claims,\r\n        bytes16 namespace\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        ClaimRequest[] memory claims,\r\n        SignatureRequest memory signature,\r\n        bytes16 namespace\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        ClaimRequest[] memory claims,\r\n        bytes16 namespace\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest[] memory auths,\r\n        SignatureRequest memory signature,\r\n        bytes16 namespace\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest[] memory auths,\r\n        bytes16 namespace\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest[] memory auths,\r\n        ClaimRequest[] memory claims,\r\n        SignatureRequest memory signature\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest[] memory auths,\r\n        ClaimRequest[] memory claims\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest[] memory auths,\r\n        SignatureRequest memory signature\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest[] memory auths\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        ClaimRequest[] memory claims,\r\n        SignatureRequest memory signature\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        ClaimRequest[] memory claims\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n}\r\n"
    },
    "contracts/helpers/sismo/utils/SignatureBuilder.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"./Structs.sol\";\r\n\r\ncontract SignatureBuilder {\r\n    // default values for Signature Request\r\n    bytes public constant DEFAULT_SIGNATURE_REQUEST_MESSAGE =\r\n        \"MESSAGE_SELECTED_BY_USER\";\r\n    bool public constant DEFAULT_SIGNATURE_REQUEST_IS_SELECTABLE_BY_USER =\r\n        false;\r\n    bytes public constant DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA = \"\";\r\n\r\n    function build(\r\n        bytes memory message\r\n    ) external pure returns (SignatureRequest memory) {\r\n        return\r\n            SignatureRequest({\r\n                message: message,\r\n                isSelectableByUser: DEFAULT_SIGNATURE_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes memory message,\r\n        bool isSelectableByUser\r\n    ) external pure returns (SignatureRequest memory) {\r\n        return\r\n            SignatureRequest({\r\n                message: message,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes memory message,\r\n        bytes memory extraData\r\n    ) external pure returns (SignatureRequest memory) {\r\n        return\r\n            SignatureRequest({\r\n                message: message,\r\n                isSelectableByUser: DEFAULT_SIGNATURE_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes memory message,\r\n        bool isSelectableByUser,\r\n        bytes memory extraData\r\n    ) external pure returns (SignatureRequest memory) {\r\n        return\r\n            SignatureRequest({\r\n                message: message,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bool isSelectableByUser\r\n    ) external pure returns (SignatureRequest memory) {\r\n        return\r\n            SignatureRequest({\r\n                message: DEFAULT_SIGNATURE_REQUEST_MESSAGE,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bool isSelectableByUser,\r\n        bytes memory extraData\r\n    ) external pure returns (SignatureRequest memory) {\r\n        return\r\n            SignatureRequest({\r\n                message: DEFAULT_SIGNATURE_REQUEST_MESSAGE,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function buildEmpty() external pure returns (SignatureRequest memory) {\r\n        return\r\n            SignatureRequest({\r\n                message: DEFAULT_SIGNATURE_REQUEST_MESSAGE,\r\n                isSelectableByUser: DEFAULT_SIGNATURE_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n}\r\n"
    },
    "contracts/helpers/sismo/utils/SismoConnectHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"./Structs.sol\";\r\n\r\nlibrary SismoConnectHelper {\r\n    error AuthTypeNotFoundInVerifiedResult(AuthType authType);\r\n\r\n    function getUserId(\r\n        SismoConnectVerifiedResult memory result,\r\n        AuthType authType\r\n    ) internal pure returns (uint256) {\r\n        // get the first userId that matches the authType\r\n        for (uint256 i = 0; i < result.auths.length; i++) {\r\n            if (result.auths[i].authType == authType) {\r\n                return result.auths[i].userId;\r\n            }\r\n        }\r\n        revert AuthTypeNotFoundInVerifiedResult(authType);\r\n    }\r\n\r\n    function getUserIds(\r\n        SismoConnectVerifiedResult memory result,\r\n        AuthType authType\r\n    ) internal pure returns (uint256[] memory) {\r\n        // get all userIds that match the authType\r\n        uint256[] memory userIds = new uint256[](result.auths.length);\r\n        for (uint256 i = 0; i < result.auths.length; i++) {\r\n            if (result.auths[i].authType == authType) {\r\n                userIds[i] = result.auths[i].userId;\r\n            }\r\n        }\r\n        return userIds;\r\n    }\r\n\r\n    function getSignedMessage(\r\n        SismoConnectVerifiedResult memory result\r\n    ) internal pure returns (bytes memory) {\r\n        return result.signedMessage;\r\n    }\r\n}\r\n"
    },
    "contracts/helpers/sismo/utils/Structs.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nstruct SismoConnectRequest {\r\n    bytes16 namespace;\r\n    AuthRequest[] auths;\r\n    ClaimRequest[] claims;\r\n    SignatureRequest signature;\r\n}\r\n\r\nstruct SismoConnectConfig {\r\n    bytes16 appId;\r\n    VaultConfig vault;\r\n}\r\n\r\nstruct VaultConfig {\r\n    bool isImpersonationMode;\r\n}\r\n\r\nstruct AuthRequest {\r\n    AuthType authType;\r\n    uint256 userId; // default: 0\r\n    // flags\r\n    bool isAnon; // default: false -> true not supported yet, need to throw if true\r\n    bool isOptional; // default: false\r\n    bool isSelectableByUser; // default: true\r\n    //\r\n    bytes extraData; // default: \"\"\r\n}\r\n\r\nstruct ClaimRequest {\r\n    ClaimType claimType; // default: GTE\r\n    bytes16 groupId;\r\n    bytes16 groupTimestamp; // default: bytes16(\"latest\")\r\n    uint256 value; // default: 1\r\n    // flags\r\n    bool isOptional; // default: false\r\n    bool isSelectableByUser; // default: true\r\n    //\r\n    bytes extraData; // default: \"\"\r\n}\r\n\r\nstruct SignatureRequest {\r\n    bytes message; // default: \"MESSAGE_SELECTED_BY_USER\"\r\n    bool isSelectableByUser; // default: false\r\n    bytes extraData; // default: \"\"\r\n}\r\n\r\nenum AuthType {\r\n    VAULT,\r\n    GITHUB,\r\n    TWITTER,\r\n    EVM_ACCOUNT,\r\n    TELEGRAM,\r\n    DISCORD\r\n}\r\n\r\nenum ClaimType {\r\n    GTE,\r\n    GT,\r\n    EQ,\r\n    LT,\r\n    LTE\r\n}\r\n\r\nstruct Auth {\r\n    AuthType authType;\r\n    bool isAnon;\r\n    bool isSelectableByUser;\r\n    uint256 userId;\r\n    bytes extraData;\r\n}\r\n\r\nstruct Claim {\r\n    ClaimType claimType;\r\n    bytes16 groupId;\r\n    bytes16 groupTimestamp;\r\n    bool isSelectableByUser;\r\n    uint256 value;\r\n    bytes extraData;\r\n}\r\n\r\nstruct Signature {\r\n    bytes message;\r\n    bytes extraData;\r\n}\r\n\r\nstruct SismoConnectResponse {\r\n    bytes16 appId;\r\n    bytes16 namespace;\r\n    bytes32 version;\r\n    bytes signedMessage;\r\n    SismoConnectProof[] proofs;\r\n}\r\n\r\nstruct SismoConnectProof {\r\n    Auth[] auths;\r\n    Claim[] claims;\r\n    bytes32 provingScheme;\r\n    bytes proofData;\r\n    bytes extraData;\r\n}\r\n\r\nstruct SismoConnectVerifiedResult {\r\n    bytes16 appId;\r\n    bytes16 namespace;\r\n    bytes32 version;\r\n    VerifiedAuth[] auths;\r\n    VerifiedClaim[] claims;\r\n    bytes signedMessage;\r\n}\r\n\r\nstruct VerifiedAuth {\r\n    AuthType authType;\r\n    bool isAnon;\r\n    uint256 userId;\r\n    bytes extraData;\r\n    bytes proofData;\r\n}\r\n\r\nstruct VerifiedClaim {\r\n    ClaimType claimType;\r\n    bytes16 groupId;\r\n    bytes16 groupTimestamp;\r\n    uint256 value;\r\n    bytes extraData;\r\n    uint256 proofId;\r\n    bytes proofData;\r\n}\r\n"
    },
    "contracts/interfaces/IMecenateVerifier.sol": {
      "content": "pragma solidity 0.8.19;\n\ninterface IMecenateVerifier {\n    function sismoVerify(\n        bytes memory sismoConnectResponse\n    ) external view returns (bytes memory);\n}\n"
    },
    "contracts/library/Structures.sol": {
      "content": "/**\n * @title Structures\n * @dev This library defines various data structures used in the Mecenate platform.\n */\npragma solidity 0.8.19;\n\nlibrary Structures {\n    enum PostStatus {\n        Waiting,\n        Proposed,\n        Accepted,\n        Submitted,\n        Finalized,\n        Punished,\n        Revealed,\n        Renounced\n    }\n\n    enum Tokens {\n        NaN,\n        MUSE,\n        DAI\n    }\n\n    enum PostType {\n        Text,\n        Image,\n        Video,\n        Audio,\n        File\n    }\n    enum PostDuration {\n        OneDay,\n        ThreeDays,\n        OneWeek,\n        TwoWeeks,\n        OneMonth\n    }\n\n    struct FeedSettings {\n        uint256 punishmentRatio;\n        uint256 postCount;\n        address usersModuleContract;\n        address factoryContract;\n        address router;\n        string version;\n    }\n\n    struct FactorySettings {\n        address treasuryContract;\n        address usersModuleContract;\n        address easContract;\n        bytes32 easSchema;\n        address museToken;\n        address daiToken;\n        address wethToken;\n        address router;\n    }\n\n    /**\n     * @dev Struct representing a post on the Mecenate platform.\n     */\n    struct Post {\n        User creator;\n        PostData postdata;\n    }\n\n    /**\n     * @dev Struct representing the data of a post on the Mecenate platform.\n     */\n    struct PostData {\n        PostSettings settings;\n        PostEscrow escrow;\n        PostEncryptedData data;\n    }\n\n    /**\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\n     */\n    struct PostEncryptedData {\n        bytes encryptedData;\n        bytes encryptedKey;\n        bytes decryptedData;\n    }\n\n    /**\n     * @dev Struct representing the settings of a post on the Mecenate platform.\n     */\n    struct PostSettings {\n        PostStatus status;\n        PostType postType;\n        uint256 creationTimeStamp;\n        uint256 endTimeStamp;\n        uint256 duration;\n        Tokens tokenId;\n    }\n\n    /**\n     * @dev Struct representing the private settings of a post on the Mecenate platform.\n     */\n    struct PostSettingPrivate {\n        address buyerAddress;\n        address sellerAddress;\n    }\n\n    /**\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\n     */\n    struct PostEscrow {\n        uint256 stake;\n        uint256 payment;\n        uint256 punishment;\n        uint256 penalty;\n    }\n\n    /**\n     * @dev Struct representing a user on the Mecenate platform.\n     */\n    struct User {\n        address evmAddress;\n        bytes sismoVaultId;\n        bytes publicKey;\n    }\n\n    /**\n     * @dev Struct representing a feed on the Mecenate platform.\n     */\n    struct Feed {\n        address contractAddress;\n        address owner;\n        uint256 sellerStake;\n        uint256 buyerStake;\n        uint256 totalStake;\n        uint256 postCount;\n        uint256 paymentRequested;\n        uint256 stakeRequested;\n        PostStatus status;\n        Tokens tokenId;\n        string version;\n    }\n\n    /**\n     * @dev Struct representing a bay request on the Mecenate platform.\n     */\n    struct BayRequest {\n        bytes request;\n        uint256 payment;\n        uint256 stake;\n        address postAddress;\n        bool accepted;\n        uint256 postCount;\n        Tokens tokenId;\n        address buyerAddress;\n    }\n}\n"
    },
    "contracts/MecenateVerifier.sol": {
      "content": "/**\n * @title MecenateVerifier\n * @dev Contract that verifies user identity using SismoConnect and returns user's vaultId, twitterId and telegramId.\n */\npragma solidity ^0.8.17;\nimport \"./helpers/sismo/SismoConnectLib.sol\";\n\ncontract MecenateVerifier is SismoConnect {\n    bytes16 public appId;\n\n    constructor(bytes16 _appId) SismoConnect(buildConfig(_appId)) {\n        appId = _appId;\n    }\n\n    function sismoVerify(\n        bytes memory sismoConnectResponse\n    ) external view returns (bytes memory) {\n        require(sismoConnectResponse.length > 0, \"empty response\");\n\n        // Build authorization requests\n        AuthRequest[] memory auths = new AuthRequest[](2);\n\n        auths[0] = buildAuth(AuthType.VAULT);\n\n        auths[1] = buildAuth({authType: AuthType.TWITTER});\n\n        // Verify the response\n        SismoConnectVerifiedResult memory result = verify({\n            responseBytes: sismoConnectResponse,\n            auths: auths,\n            signature: buildSignature({message: abi.encode(\"I Love Sismo!\")})\n        });\n\n        // bytes memory signedMessage = SismoConnectHelper.getSignedMessage(\n        //     result\n        // );\n\n        // string memory message = abi.decode(signedMessage, (string));\n\n        // Store the verified auths\n\n        VerifiedAuth[] memory _verifiedAuths = new VerifiedAuth[](\n            result.auths.length\n        );\n\n        for (uint256 i = 0; i < result.auths.length; i++) {\n            _verifiedAuths[i] = result.auths[i];\n        }\n\n        // Get the vaultId of the user\n        // --> vaultId = hash(userVaultSecret, appId)\n        uint256 vaultId = SismoConnectHelper.getUserId(result, AuthType.VAULT);\n\n        // Convert the vaultId to bytes\n        bytes memory vaultIdBytes = abi.encodePacked(vaultId);\n\n        return (vaultIdBytes);\n    }\n}\n"
    },
    "contracts/registry/MecenateUsers.sol": {
      "content": "pragma solidity 0.8.19;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../library/Structures.sol\";\nimport \"../interfaces/IMecenateVerifier.sol\";\n\ncontract MecenateUsers is Ownable {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    EnumerableSet.AddressSet private _users;\n\n    mapping(address => Structures.User) private _metadata;\n\n    address public verifierContract;\n\n    event UserRegistered(address indexed userAddress);\n\n    constructor(address verifierContractAddress) {\n        verifierContract = verifierContractAddress;\n    }\n\n    function registerUser(\n        bytes memory sismoConnectResponse,\n        bytes memory pubKey\n    ) external returns (Structures.User memory) {\n        bytes memory vaultId = IMecenateVerifier(verifierContract).sismoVerify(\n            sismoConnectResponse\n        );\n\n        Structures.User memory newUser = Structures.User({\n            evmAddress: msg.sender,\n            sismoVaultId: vaultId,\n            publicKey: pubKey\n        });\n\n        _metadata[msg.sender] = newUser;\n\n        require(!_users.contains(msg.sender), \"USER_ALREADY_EXISTS\");\n\n        _users.add(msg.sender);\n\n        emit UserRegistered(msg.sender);\n\n        return newUser;\n    }\n\n    function getUsers() public view returns (address[] memory) {\n        return _users.values();\n    }\n\n    function getUserCount() public view returns (uint256) {\n        return _users.length();\n    }\n\n    function getUserAt(uint256 index) public view returns (address) {\n        require(index < _users.length(), \"OUT_OF_RANGE\");\n        return _users.at(index);\n    }\n\n    function checkifUserExist(\n        address userAddress\n    ) external view returns (bool) {\n        return _users.contains(userAddress);\n    }\n\n    function getPaginatedUsers(\n        uint256 startIndex,\n        uint256 endIndex\n    ) public view returns (address[] memory) {\n        require(startIndex < endIndex, \"START_INDEX_GREATER_THAN_END_INDEX\");\n        require(endIndex <= _users.length(), \"OUT_OF_RANGE\");\n\n        address[] memory range = new address[](endIndex - startIndex);\n        for (uint256 i = startIndex; i < endIndex; i++) {\n            range[i - startIndex] = _users.at(i);\n        }\n\n        return range;\n    }\n\n    function getUserMetadata(\n        address userAddress\n    ) external view returns (Structures.User memory) {\n        return _metadata[userAddress];\n    }\n\n    function getUserPublicKey(\n        address userAddress\n    ) external view returns (bytes memory) {\n        return _metadata[userAddress].publicKey;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 20000
    },
    "viaIR": true,
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}