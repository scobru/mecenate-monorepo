{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"
    },
    "contracts/evm/factories/MecenateFeedFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"../interfaces/IMecenateUsers.sol\";\nimport \"../interfaces/IMecenateTreasury.sol\";\nimport \"../modules/FeedViewer.sol\";\n\ncontract MecenateFeedFactory is Ownable, FeedViewer {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    EnumerableSet.AddressSet internal feeds;\n\n    Structures.FactorySettings internal settings;\n\n    bytes internal feedByteCode;\n\n    mapping(uint8 => uint24) internal routerFee;\n\n    mapping(address => EnumerableSet.AddressSet) internal feedStore;\n\n    mapping(address => bool) internal createdContracts;\n\n    string public version = \"v2.0.0\"; // Iitialized\n\n    bool public burnEnabled = false;\n\n    uint256 public contractCounter;\n\n    event FeedCreated(address indexed addr);\n\n    bytes32 public schema;\n\n    constructor(address newUsersModuleContract, address newTreasuryContract) {\n        settings.usersModuleContract = newUsersModuleContract;\n        settings.treasuryContract = newTreasuryContract;\n    }\n\n    function changeSchema(bytes32 newSchema) external onlyOwner {\n        schema = newSchema;\n    }\n\n    function _changeVersion(string memory newVersion) internal {\n        version = newVersion;\n    }\n\n    function treasuryContract() external view returns (address) {\n        return settings.treasuryContract;\n    }\n\n    function daiToken() external view returns (address) {\n        return settings.daiToken;\n    }\n\n    function wethToken() external view returns (address) {\n        return settings.wethToken;\n    }\n\n    function museToken() external view returns (address) {\n        return settings.museToken;\n    }\n\n    function router() external view returns (address) {\n        return settings.router;\n    }\n\n    function getRouterFee(uint8 tokenId) external view returns (uint24) {\n        return routerFee[tokenId];\n    }\n\n    function setRouterFee(uint8 tokenId, uint24 fee) external onlyOwner {\n        routerFee[tokenId] = fee;\n    }\n\n    function setBurnEnabled(bool newBurnEnabled) external onlyOwner {\n        burnEnabled = newBurnEnabled;\n    }\n\n    function isFeed(address newFeed) external view returns (bool) {\n        return createdContracts[newFeed];\n    }\n\n    function changeMultipleSettings(\n        address treasury,\n        address usersModule,\n        address wethTokenAddr,\n        address museTokenAddr,\n        address daiTokenAddr,\n        address routerAddr\n    ) external onlyOwner {\n        settings.treasuryContract = treasury;\n        settings.usersModuleContract = usersModule;\n        settings.wethToken = wethTokenAddr;\n        settings.museToken = museTokenAddr;\n        settings.daiToken = daiTokenAddr;\n        settings.router = routerAddr;\n    }\n\n    function setFeedByteCode(\n        bytes memory newByteCode,\n        string memory newVersion\n    ) external onlyOwner {\n        feedByteCode = newByteCode;\n        _changeVersion(newVersion);\n    }\n\n    function buildFeed() external payable returns (address) {\n        bytes memory constructorArguments = abi.encode(\n            msg.sender,\n            settings.usersModuleContract,\n            address(this),\n            version\n        );\n\n        require(\n            IMecenateUsers(settings.usersModuleContract).checkifUserExist(\n                msg.sender\n            ),\n            \"user does not exist\"\n        );\n\n        require(msg.value >= getCreationFee(), \"NOT_ENOUGH_FEE\");\n\n        (bool _result, ) = payable(settings.treasuryContract).call{\n            value: msg.value\n        }(\"\");\n\n        require(_result, \"CALL_FAILED\");\n\n        contractCounter++;\n\n        address addr;\n\n        bytes memory tempByteCode = feedByteCode; // Carico la variabile di storage in una variabile locale\n\n        // Concatena il bytecode e gli argomenti del costruttore\n        bytes memory bytecodeWithConstructor = abi.encodePacked(\n            tempByteCode,\n            constructorArguments\n        );\n\n        // Deploy del contratto con gli argomenti del costruttore\n        assembly {\n            addr := create(\n                0,\n                add(bytecodeWithConstructor, 0x20),\n                mload(bytecodeWithConstructor)\n            )\n            if iszero(extcodesize(addr)) {\n                revert(0, 0)\n            }\n        }\n\n        address feed = addr;\n\n        feeds.add(address(feed));\n\n        feedStore[msg.sender].add(address(feed));\n\n        createdContracts[address(feed)] = true;\n\n        emit FeedCreated(address(feed));\n\n        return address(feed);\n    }\n\n    function getFeeds() external view returns (address[] memory) {\n        return feeds.values();\n    }\n\n    function getFeedsOwned(\n        address user\n    ) external view returns (address[] memory) {\n        return feedStore[user].values();\n    }\n\n    function getFeedsInfoOwned(\n        address user\n    ) external view returns (Structures.Feed[] memory) {\n        return _getFeedsInfo(feedStore[user].values());\n    }\n\n    function getFeedInfo(\n        address user\n    ) external view returns (Structures.Feed memory) {\n        return _getFeedInfo(user);\n    }\n\n    function getFeedsInfo() external view returns (Structures.Feed[] memory) {\n        return _getFeedsInfo(feeds.values());\n    }\n\n    function isContractCreated(\n        address contractAddress\n    ) external view returns (bool) {\n        return createdContracts[contractAddress];\n    }\n\n    function getCreationFee() internal view returns (uint256) {\n        return IMecenateTreasury(settings.treasuryContract).fixedFee();\n    }\n}\n"
    },
    "contracts/evm/features/MecenateFeed.sol": {
      "content": "/**\n * @title MecenateFeed\n * @dev This contract implements the MecenateFeed feature, which allows users to create and manage posts for crowdfunding campaigns.\n * The contract inherits from several modules that provide functionality for post creation, acceptance, submission, finalization, and renouncement.\n * The contract also provides several view functions to retrieve information about a post's buyer payment, seller deposit, seller stake, buyer stake, payment requested, post status, and post count.\n */\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"../modules/Events.sol\";\nimport \"../modules/Creation.sol\";\nimport \"../modules/Acceptance.sol\";\nimport \"../modules/Submission.sol\";\nimport \"../modules/Finalization.sol\";\nimport \"../modules/Renounce.sol\";\n\ncontract MecenateFeed is\n    Events,\n    Creation,\n    Acceptance,\n    Renounce,\n    Submission,\n    Finalization\n{\n    constructor(\n        address _owner,\n        address _usersModuleContract,\n        address _factoryContract,\n        string memory _version\n    ) Data(_usersModuleContract, _factoryContract, _version) {\n        owner = _owner;\n    }\n}\n"
    },
    "contracts/evm/helpers/eas/Common.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// A representation of an empty/uninitialized UID.\nbytes32 constant EMPTY_UID = 0;\n\n// A zero expiration represents an non-expiring attestation.\nuint64 constant NO_EXPIRATION_TIME = 0;\n\nerror AccessDenied();\nerror DeadlineExpired();\nerror InvalidEAS();\nerror InvalidLength();\nerror InvalidSignature();\nerror NotFound();\n\n/// @notice A struct representing ECDSA signature data.\nstruct Signature {\n    uint8 v; // The recovery ID.\n    bytes32 r; // The x-coordinate of the nonce R.\n    bytes32 s; // The signature data.\n}\n\n/// @notice A struct representing a single attestation.\nstruct Attestation {\n    bytes32 uid; // A unique identifier of the attestation.\n    bytes32 schema; // The unique identifier of the schema.\n    uint64 time; // The time when the attestation was created (Unix timestamp).\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\n    bytes32 refUID; // The UID of the related attestation.\n    address recipient; // The recipient of the attestation.\n    address attester; // The attester/sender of the attestation.\n    bool revocable; // Whether the attestation is revocable.\n    bytes data; // Custom attestation data.\n}\n\n/// @notice A helper function to work with unchecked iterators in loops.\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\n    unchecked {\n        j = i + 1;\n    }\n}\n"
    },
    "contracts/evm/helpers/eas/IEAS.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport {ISchemaRegistry} from \"./ISchemaRegistry.sol\";\nimport {Attestation, Signature} from \"./Common.sol\";\n\n/// @notice A struct representing the arguments of the attestation request.\nstruct AttestationRequestData {\n    address recipient; // The recipient of the attestation.\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\n    bool revocable; // Whether the attestation is revocable.\n    bytes32 refUID; // The UID of the related attestation.\n    bytes data; // Custom attestation data.\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\n}\n\n/// @notice A struct representing the full arguments of the attestation request.\nstruct AttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData data; // The arguments of the attestation request.\n}\n\n/// @notice A struct representing the full arguments of the full delegated attestation request.\nstruct DelegatedAttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData data; // The arguments of the attestation request.\n    Signature signature; // The ECDSA signature data.\n    address attester; // The attesting account.\n    uint64 deadline; // The deadline of the signature/request.\n}\n\n/// @notice A struct representing the full arguments of the multi attestation request.\nstruct MultiAttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData[] data; // The arguments of the attestation request.\n}\n\n/// @notice A struct representing the full arguments of the delegated multi attestation request.\nstruct MultiDelegatedAttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData[] data; // The arguments of the attestation requests.\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\n    address attester; // The attesting account.\n    uint64 deadline; // The deadline of the signature/request.\n}\n\n/// @notice A struct representing the arguments of the revocation request.\nstruct RevocationRequestData {\n    bytes32 uid; // The UID of the attestation to revoke.\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\n}\n\n/// @notice A struct representing the full arguments of the revocation request.\nstruct RevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData data; // The arguments of the revocation request.\n}\n\n/// @notice A struct representing the arguments of the full delegated revocation request.\nstruct DelegatedRevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData data; // The arguments of the revocation request.\n    Signature signature; // The ECDSA signature data.\n    address revoker; // The revoking account.\n    uint64 deadline; // The deadline of the signature/request.\n}\n\n/// @notice A struct representing the full arguments of the multi revocation request.\nstruct MultiRevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData[] data; // The arguments of the revocation request.\n}\n\n/// @notice A struct representing the full arguments of the delegated multi revocation request.\nstruct MultiDelegatedRevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData[] data; // The arguments of the revocation requests.\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\n    address revoker; // The revoking account.\n    uint64 deadline; // The deadline of the signature/request.\n}\n\n/// @title IEAS\n/// @notice EAS - Ethereum Attestation Service interface.\ninterface IEAS {\n    /// @notice Emitted when an attestation has been made.\n    /// @param recipient The recipient of the attestation.\n    /// @param attester The attesting account.\n    /// @param uid The UID the revoked attestation.\n    /// @param schemaUID The UID of the schema.\n    event Attested(\n        address indexed recipient,\n        address indexed attester,\n        bytes32 uid,\n        bytes32 indexed schemaUID\n    );\n\n    /// @notice Emitted when an attestation has been revoked.\n    /// @param recipient The recipient of the attestation.\n    /// @param attester The attesting account.\n    /// @param schemaUID The UID of the schema.\n    /// @param uid The UID the revoked attestation.\n    event Revoked(\n        address indexed recipient,\n        address indexed attester,\n        bytes32 uid,\n        bytes32 indexed schemaUID\n    );\n\n    /// @notice Emitted when a data has been timestamped.\n    /// @param data The data.\n    /// @param timestamp The timestamp.\n    event Timestamped(bytes32 indexed data, uint64 indexed timestamp);\n\n    /// @notice Emitted when a data has been revoked.\n    /// @param revoker The address of the revoker.\n    /// @param data The data.\n    /// @param timestamp The timestamp.\n    event RevokedOffchain(\n        address indexed revoker,\n        bytes32 indexed data,\n        uint64 indexed timestamp\n    );\n\n    /// @notice Returns the address of the global schema registry.\n    /// @return The address of the global schema registry.\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\n\n    /// @notice Attests to a specific schema.\n    /// @param request The arguments of the attestation request.\n    /// @return The UID of the new attestation.\n    ///\n    /// Example:\n    ///     attest({\n    ///         schema: \"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\",\n    ///         data: {\n    ///             recipient: \"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\",\n    ///             expirationTime: 0,\n    ///             revocable: true,\n    ///             refUID: \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n    ///             data: \"0xF00D\",\n    ///             value: 0\n    ///         }\n    ///     })\n    function attest(\n        AttestationRequest calldata request\n    ) external payable returns (bytes32);\n\n    /// @notice Attests to a specific schema via the provided ECDSA signature.\n    /// @param delegatedRequest The arguments of the delegated attestation request.\n    /// @return The UID of the new attestation.\n    ///\n    /// Example:\n    ///     attestByDelegation({\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n    ///         data: {\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n    ///             expirationTime: 1673891048,\n    ///             revocable: true,\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    ///             data: '0x1234',\n    ///             value: 0\n    ///         },\n    ///         signature: {\n    ///             v: 28,\n    ///             r: '0x148c...b25b',\n    ///             s: '0x5a72...be22'\n    ///         },\n    ///         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',\n    ///         deadline: 1673891048\n    ///     })\n    function attestByDelegation(\n        DelegatedAttestationRequest calldata delegatedRequest\n    ) external payable returns (bytes32);\n\n    /// @notice Attests to multiple schemas.\n    /// @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\n    ///     schema ids to benefit from the best batching optimization.\n    /// @return The UIDs of the new attestations.\n    ///\n    /// Example:\n    ///     multiAttest([{\n    ///         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\n    ///         data: [{\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n    ///             expirationTime: 1673891048,\n    ///             revocable: true,\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    ///             data: '0x1234',\n    ///             value: 1000\n    ///         },\n    ///         {\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n    ///             expirationTime: 0,\n    ///             revocable: false,\n    ///             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\n    ///             data: '0x00',\n    ///             value: 0\n    ///         }],\n    ///     },\n    ///     {\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\n    ///         data: [{\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n    ///             expirationTime: 0,\n    ///             revocable: true,\n    ///             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\n    ///             data: '0x12345678',\n    ///             value: 0\n    ///         },\n    ///     }])\n    function multiAttest(\n        MultiAttestationRequest[] calldata multiRequests\n    ) external payable returns (bytes32[] memory);\n\n    /// @notice Attests to multiple schemas using via provided ECDSA signatures.\n    /// @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\n    ///     grouped by distinct schema ids to benefit from the best batching optimization.\n    /// @return The UIDs of the new attestations.\n    ///\n    /// Example:\n    ///     multiAttestByDelegation([{\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n    ///         data: [{\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n    ///             expirationTime: 1673891048,\n    ///             revocable: true,\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    ///             data: '0x1234',\n    ///             value: 0\n    ///         },\n    ///         {\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n    ///             expirationTime: 0,\n    ///             revocable: false,\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    ///             data: '0x00',\n    ///             value: 0\n    ///         }],\n    ///         signatures: [{\n    ///             v: 28,\n    ///             r: '0x148c...b25b',\n    ///             s: '0x5a72...be22'\n    ///         },\n    ///         {\n    ///             v: 28,\n    ///             r: '0x487s...67bb',\n    ///             s: '0x12ad...2366'\n    ///         }],\n    ///         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',\n    ///         deadline: 1673891048\n    ///     }])\n    function multiAttestByDelegation(\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\n    ) external payable returns (bytes32[] memory);\n\n    /// @notice Revokes an existing attestation to a specific schema.\n    /// @param request The arguments of the revocation request.\n    ///\n    /// Example:\n    ///     revoke({\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n    ///         data: {\n    ///             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\n    ///             value: 0\n    ///         }\n    ///     })\n    function revoke(RevocationRequest calldata request) external payable;\n\n    /// @notice Revokes an existing attestation to a specific schema via the provided ECDSA signature.\n    /// @param delegatedRequest The arguments of the delegated revocation request.\n    ///\n    /// Example:\n    ///     revokeByDelegation({\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n    ///         data: {\n    ///             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\n    ///             value: 0\n    ///         },\n    ///         signature: {\n    ///             v: 27,\n    ///             r: '0xb593...7142',\n    ///             s: '0x0f5b...2cce'\n    ///         },\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\n    ///         deadline: 1673891048\n    ///     })\n    function revokeByDelegation(\n        DelegatedRevocationRequest calldata delegatedRequest\n    ) external payable;\n\n    /// @notice Revokes existing attestations to multiple schemas.\n    /// @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\n    ///     schema ids to benefit from the best batching optimization.\n    ///\n    /// Example:\n    ///     multiRevoke([{\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n    ///         data: [{\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\n    ///             value: 1000\n    ///         },\n    ///         {\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\n    ///             value: 0\n    ///         }],\n    ///     },\n    ///     {\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\n    ///         data: [{\n    ///             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\n    ///             value: 0\n    ///         },\n    ///     }])\n    function multiRevoke(\n        MultiRevocationRequest[] calldata multiRequests\n    ) external payable;\n\n    /// @notice Revokes existing attestations to multiple schemas via provided ECDSA signatures.\n    /// @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests\n    ///     should be grouped by distinct schema ids to benefit from the best batching optimization.\n    ///\n    /// Example:\n    ///     multiRevokeByDelegation([{\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n    ///         data: [{\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\n    ///             value: 1000\n    ///         },\n    ///         {\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\n    ///             value: 0\n    ///         }],\n    ///         signatures: [{\n    ///             v: 28,\n    ///             r: '0x148c...b25b',\n    ///             s: '0x5a72...be22'\n    ///         },\n    ///         {\n    ///             v: 28,\n    ///             r: '0x487s...67bb',\n    ///             s: '0x12ad...2366'\n    ///         }],\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\n    ///         deadline: 1673891048\n    ///     }])\n    function multiRevokeByDelegation(\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\n    ) external payable;\n\n    /// @notice Timestamps the specified bytes32 data.\n    /// @param data The data to timestamp.\n    /// @return The timestamp the data was timestamped with.\n    function timestamp(bytes32 data) external returns (uint64);\n\n    /// @notice Timestamps the specified multiple bytes32 data.\n    /// @param data The data to timestamp.\n    /// @return The timestamp the data was timestamped with.\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\n\n    /// @notice Revokes the specified bytes32 data.\n    /// @param data The data to timestamp.\n    /// @return The timestamp the data was revoked with.\n    function revokeOffchain(bytes32 data) external returns (uint64);\n\n    /// @notice Revokes the specified multiple bytes32 data.\n    /// @param data The data to timestamp.\n    /// @return The timestamp the data was revoked with.\n    function multiRevokeOffchain(\n        bytes32[] calldata data\n    ) external returns (uint64);\n\n    /// @notice Returns an existing attestation by UID.\n    /// @param uid The UID of the attestation to retrieve.\n    /// @return The attestation data members.\n    function getAttestation(\n        bytes32 uid\n    ) external view returns (Attestation memory);\n\n    /// @notice Checks whether an attestation exists.\n    /// @param uid The UID of the attestation to retrieve.\n    /// @return Whether an attestation exists.\n    function isAttestationValid(bytes32 uid) external view returns (bool);\n\n    /// @notice Returns the timestamp that the specified data was timestamped with.\n    /// @param data The data to query.\n    /// @return The timestamp the data was timestamped with.\n    function getTimestamp(bytes32 data) external view returns (uint64);\n\n    /// @notice Returns the timestamp that the specified data was timestamped with.\n    /// @param data The data to query.\n    /// @return The timestamp the data was timestamped with.\n    function getRevokeOffchain(\n        address revoker,\n        bytes32 data\n    ) external view returns (uint64);\n}\n"
    },
    "contracts/evm/helpers/eas/ISchemaRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport {ISchemaResolver} from \"./ISchemaResolver.sol\";\n\n/// @notice A struct representing a record for a submitted schema.\nstruct SchemaRecord {\n    bytes32 uid; // The unique identifier of the schema.\n    ISchemaResolver resolver; // Optional schema resolver.\n    bool revocable; // Whether the schema allows revocations explicitly.\n    string schema; // Custom specification of the schema (e.g., an ABI).\n}\n\n/// @title ISchemaRegistry\n/// @notice The interface of global attestation schemas for the Ethereum Attestation Service protocol.\ninterface ISchemaRegistry {\n    /// @notice Emitted when a new schema has been registered\n    /// @param uid The schema UID.\n    /// @param registerer The address of the account used to register the schema.\n    /// @param schema The schema data.\n    event Registered(\n        bytes32 indexed uid,\n        address indexed registerer,\n        SchemaRecord schema\n    );\n\n    /// @notice Submits and reserves a new schema\n    /// @param schema The schema data schema.\n    /// @param resolver An optional schema resolver.\n    /// @param revocable Whether the schema allows revocations explicitly.\n    /// @return The UID of the new schema.\n    function register(\n        string calldata schema,\n        ISchemaResolver resolver,\n        bool revocable\n    ) external returns (bytes32);\n\n    /// @notice Returns an existing schema by UID\n    /// @param uid The UID of the schema to retrieve.\n    /// @return The schema data members.\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\n}\n"
    },
    "contracts/evm/helpers/eas/ISchemaResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport {Attestation} from \"./Common.sol\";\n\n/// @title ISchemaResolver\n/// @notice The interface of an optional schema resolver.\ninterface ISchemaResolver {\n    /// @notice Checks if the resolver can be sent ETH.\n    /// @return Whether the resolver supports ETH transfers.\n    function isPayable() external pure returns (bool);\n\n    /// @notice Processes an attestation and verifies whether it's valid.\n    /// @param attestation The new attestation.\n    /// @return Whether the attestation is valid.\n    function attest(\n        Attestation calldata attestation\n    ) external payable returns (bool);\n\n    /// @notice Processes multiple attestations and verifies whether they are valid.\n    /// @param attestations The new attestations.\n    /// @param values Explicit ETH amounts which were sent with each attestation.\n    /// @return Whether all the attestations are valid.\n    function multiAttest(\n        Attestation[] calldata attestations,\n        uint256[] calldata values\n    ) external payable returns (bool);\n\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\n    /// @param attestation The existing attestation to be revoked.\n    /// @return Whether the attestation can be revoked.\n    function revoke(\n        Attestation calldata attestation\n    ) external payable returns (bool);\n\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\n    /// @param attestations The existing attestations to be revoked.\n    /// @param values Explicit ETH amounts which were sent with each revocation.\n    /// @return Whether the attestations can be revoked.\n    function multiRevoke(\n        Attestation[] calldata attestations,\n        uint256[] calldata values\n    ) external payable returns (bool);\n}\n"
    },
    "contracts/evm/helpers/sismo/interfaces/IAddressesProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\ninterface IAddressesProvider {\r\n    /**\r\n     * @dev Sets the address of a contract.\r\n     * @param contractAddress Address of the contract.\r\n     * @param contractName Name of the contract.\r\n     */\r\n    function set(address contractAddress, string memory contractName) external;\r\n\r\n    /**\r\n     * @dev Sets the address of multiple contracts.\r\n     * @param contractAddresses Addresses of the contracts.\r\n     * @param contractNames Names of the contracts.\r\n     */\r\n    function setBatch(\r\n        address[] calldata contractAddresses,\r\n        string[] calldata contractNames\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the address of a contract.\r\n     * @param contractName Name of the contract (string).\r\n     * @return Address of the contract.\r\n     */\r\n    function get(string memory contractName) external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the address of a contract.\r\n     * @param contractNameHash Hash of the name of the contract (bytes32).\r\n     * @return Address of the contract.\r\n     */\r\n    function get(bytes32 contractNameHash) external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the addresses of all contracts inputed.\r\n     * @param contractNames Names of the contracts as strings.\r\n     */\r\n    function getBatch(\r\n        string[] calldata contractNames\r\n    ) external view returns (address[] memory);\r\n\r\n    /**\r\n     * @dev Returns the addresses of all contracts inputed.\r\n     * @param contractNamesHash Names of the contracts as strings.\r\n     */\r\n    function getBatch(\r\n        bytes32[] calldata contractNamesHash\r\n    ) external view returns (address[] memory);\r\n\r\n    /**\r\n     * @dev Returns the addresses of all contracts in `_contractNames`\r\n     * @return Names, Hashed Names and Addresses of all contracts.\r\n     */\r\n    function getAll()\r\n        external\r\n        view\r\n        returns (string[] memory, bytes32[] memory, address[] memory);\r\n}\r\n"
    },
    "contracts/evm/helpers/sismo/interfaces/IBaseVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.17;\r\n\r\nimport {SismoConnectProof, VerifiedAuth, VerifiedClaim} from \"../utils/Structs.sol\";\r\n\r\ninterface IBaseVerifier {\r\n    function verify(\r\n        bytes16 appId,\r\n        bytes16 namespace,\r\n        bool isImpersonationMode,\r\n        bytes memory signedMessage,\r\n        SismoConnectProof memory sismoConnectProof\r\n    ) external returns (VerifiedAuth memory, VerifiedClaim memory);\r\n}\r\n"
    },
    "contracts/evm/helpers/sismo/interfaces/ISismoConnectVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"../utils/Structs.sol\";\r\n\r\ninterface ISismoConnectVerifier {\r\n    event VerifierSet(bytes32, address);\r\n\r\n    error AppIdMismatch(bytes16 receivedAppId, bytes16 expectedAppId);\r\n    error NamespaceMismatch(\r\n        bytes16 receivedNamespace,\r\n        bytes16 expectedNamespace\r\n    );\r\n    error VersionMismatch(bytes32 requestVersion, bytes32 responseVersion);\r\n    error SignatureMessageMismatch(\r\n        bytes requestMessageSignature,\r\n        bytes responseMessageSignature\r\n    );\r\n\r\n    function verify(\r\n        SismoConnectResponse memory response,\r\n        SismoConnectRequest memory request,\r\n        SismoConnectConfig memory config\r\n    ) external view returns (SismoConnectVerifiedResult memory);\r\n\r\n    function SISMO_CONNECT_VERSION() external view returns (bytes32);\r\n}\r\n"
    },
    "contracts/evm/helpers/sismo/SismoConnectLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport {RequestBuilder, SismoConnectRequest, SismoConnectResponse, SismoConnectConfig} from \"./utils/RequestBuilder.sol\";\r\nimport {AuthRequestBuilder, AuthRequest, Auth, VerifiedAuth, AuthType} from \"./utils/AuthRequestBuilder.sol\";\r\nimport {ClaimRequestBuilder, ClaimRequest, Claim, VerifiedClaim, ClaimType} from \"./utils/ClaimRequestBuilder.sol\";\r\nimport {SignatureBuilder, SignatureRequest, Signature} from \"./utils/SignatureBuilder.sol\";\r\nimport {VaultConfig} from \"./utils/Structs.sol\";\r\nimport {ISismoConnectVerifier, SismoConnectVerifiedResult} from \"./interfaces/ISismoConnectVerifier.sol\";\r\nimport {IAddressesProvider} from \"./interfaces/IAddressesProvider.sol\";\r\nimport {SismoConnectHelper} from \"./utils/SismoConnectHelper.sol\";\r\n\r\ncontract SismoConnect {\r\n    uint256 public constant SISMO_CONNECT_LIB_VERSION = 2;\r\n\r\n    IAddressesProvider public constant ADDRESSES_PROVIDER_V2 =\r\n        IAddressesProvider(0x3Cd5334eB64ebBd4003b72022CC25465f1BFcEe6);\r\n\r\n    ISismoConnectVerifier immutable _sismoConnectVerifier;\r\n\r\n    // external libraries\r\n    AuthRequestBuilder immutable _authRequestBuilder;\r\n    ClaimRequestBuilder immutable _claimRequestBuilder;\r\n    SignatureBuilder immutable _signatureBuilder;\r\n    RequestBuilder immutable _requestBuilder;\r\n\r\n    // config\r\n    bytes16 public immutable APP_ID;\r\n    bool public immutable IS_IMPERSONATION_MODE;\r\n\r\n    constructor(SismoConnectConfig memory _config) {\r\n        APP_ID = _config.appId;\r\n        IS_IMPERSONATION_MODE = _config.vault.isImpersonationMode;\r\n\r\n        _sismoConnectVerifier = ISismoConnectVerifier(\r\n            ADDRESSES_PROVIDER_V2.get(string(\"sismoConnectVerifier-v1.2\"))\r\n        );\r\n        // external libraries\r\n        _authRequestBuilder = AuthRequestBuilder(\r\n            ADDRESSES_PROVIDER_V2.get(string(\"authRequestBuilder-v1.1\"))\r\n        );\r\n        _claimRequestBuilder = ClaimRequestBuilder(\r\n            ADDRESSES_PROVIDER_V2.get(string(\"claimRequestBuilder-v1.1\"))\r\n        );\r\n        _signatureBuilder = SignatureBuilder(\r\n            ADDRESSES_PROVIDER_V2.get(string(\"signatureBuilder-v1.1\"))\r\n        );\r\n        _requestBuilder = RequestBuilder(\r\n            ADDRESSES_PROVIDER_V2.get(string(\"requestBuilder-v1.1\"))\r\n        );\r\n    }\r\n\r\n    // public function because it needs to be used by this contract and can be used by other contracts\r\n    function config() public view returns (SismoConnectConfig memory) {\r\n        return buildConfig(APP_ID);\r\n    }\r\n\r\n    function buildConfig(\r\n        bytes16 appId\r\n    ) internal pure returns (SismoConnectConfig memory) {\r\n        SismoConnectConfig memory result = SismoConnectConfig({\r\n            appId: appId,\r\n            vault: buildVaultConfig()\r\n        });\r\n        require(appId != bytes16(0), \"appId cannot be empty\");\r\n        require(\r\n            result.vault.isImpersonationMode == false,\r\n            \"impersonation mode is not supported\"\r\n        );\r\n        return result;\r\n    }\r\n\r\n    function buildVaultConfig() internal pure returns (VaultConfig memory) {\r\n        return VaultConfig({isImpersonationMode: false});\r\n    }\r\n\r\n    function verify(\r\n        bytes memory responseBytes,\r\n        AuthRequest[] memory auths,\r\n        SignatureRequest memory signature\r\n    ) internal view returns (SismoConnectVerifiedResult memory) {\r\n        SismoConnectResponse memory response = abi.decode(\r\n            responseBytes,\r\n            (SismoConnectResponse)\r\n        );\r\n        SismoConnectRequest memory request = buildRequest(auths, signature);\r\n        return _sismoConnectVerifier.verify(response, request, config());\r\n    }\r\n\r\n    function buildAuth(\r\n        AuthType authType,\r\n        bool isOptional,\r\n        bool isSelectableByUser\r\n    ) internal view returns (AuthRequest memory) {\r\n        return\r\n            _authRequestBuilder.build(authType, isOptional, isSelectableByUser);\r\n    }\r\n\r\n    function buildAuth(\r\n        AuthType authType\r\n    ) internal view returns (AuthRequest memory) {\r\n        return _authRequestBuilder.build(authType);\r\n    }\r\n\r\n    function buildSignature(\r\n        bytes memory message\r\n    ) internal view returns (SignatureRequest memory) {\r\n        return _signatureBuilder.build(message);\r\n    }\r\n\r\n    function buildRequest(\r\n        AuthRequest[] memory auths,\r\n        SignatureRequest memory signature\r\n    ) internal view returns (SismoConnectRequest memory) {\r\n        return _requestBuilder.build(auths, signature);\r\n    }\r\n\r\n    function _GET_EMPTY_SIGNATURE_REQUEST()\r\n        internal\r\n        view\r\n        returns (SignatureRequest memory)\r\n    {\r\n        return _signatureBuilder.buildEmpty();\r\n    }\r\n}\r\n"
    },
    "contracts/evm/helpers/sismo/utils/AuthBuilder.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"./Structs.sol\";\r\n\r\nlibrary AuthBuilder {\r\n    // default values for Auth Request\r\n    AuthType public constant DEFAULT_AUTH_TYPE = AuthType.VAULT;\r\n    bool public constant DEFAULT_AUTH_IS_ANON = false;\r\n    uint256 public constant DEFAULT_AUTH_USER_ID = 0;\r\n    bool public constant DEFAULT_AUTH_IS_SELECTABLE_BY_USER = true;\r\n    bytes public constant DEFAULT_AUTH_EXTRA_DATA = \"\";\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isAnon,\r\n        uint256 userId,\r\n        bool isSelectableByUser,\r\n        bytes memory extraData\r\n    ) external pure returns (Auth memory) {\r\n        return\r\n            Auth({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: userId,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isAnon,\r\n        uint256 userId,\r\n        bytes memory extraData\r\n    ) external pure returns (Auth memory) {\r\n        return\r\n            Auth({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: userId,\r\n                isSelectableByUser: DEFAULT_AUTH_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(AuthType authType) external pure returns (Auth memory) {\r\n        return\r\n            Auth({\r\n                authType: authType,\r\n                isAnon: DEFAULT_AUTH_IS_ANON,\r\n                userId: DEFAULT_AUTH_USER_ID,\r\n                isSelectableByUser: DEFAULT_AUTH_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_AUTH_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isAnon\r\n    ) external pure returns (Auth memory) {\r\n        return\r\n            Auth({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: DEFAULT_AUTH_USER_ID,\r\n                isSelectableByUser: DEFAULT_AUTH_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_AUTH_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        uint256 userId\r\n    ) external pure returns (Auth memory) {\r\n        return\r\n            Auth({\r\n                authType: authType,\r\n                isAnon: DEFAULT_AUTH_IS_ANON,\r\n                userId: userId,\r\n                isSelectableByUser: DEFAULT_AUTH_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_AUTH_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bytes memory extraData\r\n    ) external pure returns (Auth memory) {\r\n        return\r\n            Auth({\r\n                authType: authType,\r\n                isAnon: DEFAULT_AUTH_IS_ANON,\r\n                userId: DEFAULT_AUTH_USER_ID,\r\n                isSelectableByUser: DEFAULT_AUTH_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isAnon,\r\n        uint256 userId\r\n    ) external pure returns (Auth memory) {\r\n        return\r\n            Auth({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: userId,\r\n                isSelectableByUser: DEFAULT_AUTH_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_AUTH_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isAnon,\r\n        bytes memory extraData\r\n    ) external pure returns (Auth memory) {\r\n        return\r\n            Auth({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: DEFAULT_AUTH_USER_ID,\r\n                isSelectableByUser: DEFAULT_AUTH_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        uint256 userId,\r\n        bytes memory extraData\r\n    ) external pure returns (Auth memory) {\r\n        return\r\n            Auth({\r\n                authType: authType,\r\n                isAnon: DEFAULT_AUTH_IS_ANON,\r\n                userId: userId,\r\n                isSelectableByUser: DEFAULT_AUTH_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isAnon,\r\n        uint256 userId,\r\n        bool isSelectableByUser\r\n    ) external pure returns (Auth memory) {\r\n        return\r\n            Auth({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: userId,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_AUTH_EXTRA_DATA\r\n            });\r\n    }\r\n}\r\n"
    },
    "contracts/evm/helpers/sismo/utils/AuthMatchingLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"./Structs.sol\";\r\n\r\n// The role of this library is to check for a given AuthRequest if there is a matching Auth in the response\r\n// It returns a level of matching between the AuthRequest and the Auth in the response\r\n// The level of matching is a number between 0 and 7 (000 to 111 in binary)\r\n// The level of matching is calculated by adding the following values:\r\n// 1 if the authType in the AuthRequest is the same as the authType in the Auth\r\n// 2 if the isAnon in the AuthRequest is the same as the isAnon in the Auth\r\n// 4 if the userId in the AuthRequest is the same as the userId in the Auth\r\n// The level of matching is then used to determine if the AuthRequest is fulfilled or not\r\nlibrary AuthMatchingLib {\r\n    error AuthInRequestNotFoundInResponse(\r\n        uint8 requestAuthType,\r\n        bool requestIsAnon,\r\n        uint256 requestUserId,\r\n        bytes requestExtraData\r\n    );\r\n    error AuthIsAnonAndUserIdNotFound(\r\n        bool requestIsAnon,\r\n        uint256 requestUserId\r\n    );\r\n    error AuthTypeAndUserIdNotFound(\r\n        uint8 requestAuthType,\r\n        uint256 requestUserId\r\n    );\r\n    error AuthUserIdNotFound(uint256 requestUserId);\r\n    error AuthTypeAndIsAnonNotFound(uint8 requestAuthType, bool requestIsAnon);\r\n    error AuthIsAnonNotFound(bool requestIsAnon);\r\n    error AuthTypeNotFound(uint8 requestAuthType);\r\n\r\n    // Check if the AuthRequest is fulfilled by the Auth in the response\r\n    // and return the level of matching between the AuthRequest and the Auth in the response\r\n    function _matchLevel(\r\n        Auth memory auth,\r\n        AuthRequest memory authRequest\r\n    ) internal pure returns (uint8) {\r\n        uint8 matchingPropertiesLevel = 0;\r\n\r\n        if (auth.authType == authRequest.authType) {\r\n            matchingPropertiesLevel += 1; // 001\r\n        }\r\n        if (auth.isAnon == authRequest.isAnon) {\r\n            matchingPropertiesLevel += 2; // 010\r\n        }\r\n\r\n        if (authRequest.authType == AuthType.VAULT) {\r\n            // If authType is Vault the user can't choose a particular userId\r\n            // It will be always defined as userId = Hash(VaultSecret, AppId)\r\n            // There is then no specific constraint on the isSelectableByUser and userId properties)\r\n            matchingPropertiesLevel += 4; // 100\r\n        } else if (\r\n            (authRequest.isSelectableByUser == false) &&\r\n            (auth.userId == authRequest.userId)\r\n        ) {\r\n            // if the userId in the auth request can NOT be chosen by the user when generating the proof (isSelectableByUser == true)\r\n            // we check if the userId of the auth in the request matches the userId of the auth in the response\r\n            matchingPropertiesLevel += 4; // 100\r\n        } else if (authRequest.isSelectableByUser == true) {\r\n            // if the userId in the auth request can be chosen by the user when generating the proof (isSelectableByUser == true)\r\n            // we dont check if the userId of the auth in the request matches the userId of the auth in the response\r\n            // the property is considered as matching\r\n            matchingPropertiesLevel += 4; // 100\r\n        }\r\n\r\n        return matchingPropertiesLevel;\r\n    }\r\n\r\n    function handleAuthErrors(\r\n        uint8 maxMatchingProperties,\r\n        AuthRequest memory auth\r\n    ) public pure {\r\n        // if the maxMatchingProperties is equal to 7 (111 in bits), it means that the auth in the request matches with one of the auths in the response\r\n        // otherwise, we can look at the binary representation of the maxMatchingProperties to know which properties are not matching and throw an error (the 0 bits represent the properties that are not matching)\r\n        if (maxMatchingProperties == 0) {\r\n            // 000\r\n            // no property of the auth in the request matches with any property of the auths in the response\r\n            revert AuthInRequestNotFoundInResponse(\r\n                uint8(auth.authType),\r\n                auth.isAnon,\r\n                auth.userId,\r\n                auth.extraData\r\n            );\r\n        } else if (maxMatchingProperties == 1) {\r\n            // 001\r\n            // only the authType property of the auth in the request matches with one of the auths in the response\r\n            revert AuthIsAnonAndUserIdNotFound(auth.isAnon, auth.userId);\r\n        } else if (maxMatchingProperties == 2) {\r\n            // 010\r\n            // only the isAnon property of the auth in the request matches with one of the auths in the response\r\n            revert AuthTypeAndUserIdNotFound(uint8(auth.authType), auth.userId);\r\n        } else if (maxMatchingProperties == 3) {\r\n            // 011\r\n            // only the authType and isAnon properties of the auth in the request match with one of the auths in the response\r\n            revert AuthUserIdNotFound(auth.userId);\r\n        } else if (maxMatchingProperties == 4) {\r\n            // 100\r\n            // only the userId property of the auth in the request matches with one of the auths in the response\r\n            revert AuthTypeAndIsAnonNotFound(uint8(auth.authType), auth.isAnon);\r\n        } else if (maxMatchingProperties == 5) {\r\n            // 101\r\n            // only the authType and userId properties of the auth in the request matches with one of the auths in the response\r\n            revert AuthIsAnonNotFound(auth.isAnon);\r\n        } else if (maxMatchingProperties == 6) {\r\n            // 110\r\n            // only the isAnon and userId properties of the auth in the request matches with one of the auths in the response\r\n            revert AuthTypeNotFound(uint8(auth.authType));\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/evm/helpers/sismo/utils/AuthRequestBuilder.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"./Structs.sol\";\r\n\r\ncontract AuthRequestBuilder {\r\n    // default values for Auth Request\r\n    bool public constant DEFAULT_AUTH_REQUEST_IS_ANON = false;\r\n    uint256 public constant DEFAULT_AUTH_REQUEST_USER_ID = 0;\r\n    bool public constant DEFAULT_AUTH_REQUEST_IS_OPTIONAL = false;\r\n    bytes public constant DEFAULT_AUTH_REQUEST_EXTRA_DATA = \"\";\r\n\r\n    error InvalidUserIdAndIsSelectableByUserAuthType();\r\n    error InvalidUserIdAndAuthType();\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isAnon,\r\n        uint256 userId,\r\n        bool isOptional,\r\n        bool isSelectableByUser,\r\n        bytes memory extraData\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: userId,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isAnon,\r\n        uint256 userId,\r\n        bytes memory extraData\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: userId,\r\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\r\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\r\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\r\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isAnon\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\r\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\r\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        uint256 userId\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\r\n                userId: userId,\r\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\r\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bytes memory extraData\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\r\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\r\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isAnon,\r\n        uint256 userId\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: userId,\r\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\r\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isAnon,\r\n        bytes memory extraData\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\r\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        uint256 userId,\r\n        bytes memory extraData\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\r\n                userId: userId,\r\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    // allow dev to choose for isOptional\r\n    // the user is ask to choose isSelectableByUser to avoid the function signature collision\r\n    // between build(AuthType authType, bool isOptional) and build(AuthType authType, bool isAnon)\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isOptional,\r\n        bool isSelectableByUser\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\r\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isOptional,\r\n        bool isSelectableByUser,\r\n        uint256 userId\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\r\n                userId: userId,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    // the user is ask to choose isSelectableByUser to avoid the function signature collision\r\n    // between build(AuthType authType, bool isAnon, bool isOptional) and build(AuthType authType, bool isOptional, bool isSelectableByUser)\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isAnon,\r\n        bool isOptional,\r\n        bool isSelectableByUser\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        uint256 userId,\r\n        bool isOptional\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\r\n                userId: userId,\r\n                isOptional: isOptional,\r\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        AuthType authType,\r\n        bool isAnon,\r\n        uint256 userId,\r\n        bool isOptional\r\n    ) external pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: userId,\r\n                isOptional: isOptional,\r\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function _build(\r\n        AuthType authType,\r\n        bool isAnon,\r\n        uint256 userId,\r\n        bool isOptional,\r\n        bytes memory extraData\r\n    ) internal pure returns (AuthRequest memory) {\r\n        return\r\n            _build({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: userId,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: _authIsSelectableDefaultValue(\r\n                    authType,\r\n                    userId\r\n                ),\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function _build(\r\n        AuthType authType,\r\n        bool isAnon,\r\n        uint256 userId,\r\n        bool isOptional,\r\n        bool isSelectableByUser,\r\n        bytes memory extraData\r\n    ) internal pure returns (AuthRequest memory) {\r\n        // When `userId` is 0, it means the app does not require a specific auth account and the user needs\r\n        // to choose the account they want to use for the app.\r\n        // When `isSelectableByUser` is true, the user can select the account they want to use.\r\n        // The combination of `userId = 0` and `isSelectableByUser = false` does not make sense and should not be used.\r\n        // If this combination is detected, the function will revert with an error.\r\n        if (\r\n            authType != AuthType.VAULT &&\r\n            userId == 0 &&\r\n            isSelectableByUser == false\r\n        ) {\r\n            revert InvalidUserIdAndIsSelectableByUserAuthType();\r\n        }\r\n        // When requesting an authType VAULT, the `userId` must be 0 and isSelectableByUser must be true.\r\n        if (\r\n            authType == AuthType.VAULT &&\r\n            userId != 0 &&\r\n            isSelectableByUser == false\r\n        ) {\r\n            revert InvalidUserIdAndAuthType();\r\n        }\r\n        return\r\n            AuthRequest({\r\n                authType: authType,\r\n                isAnon: isAnon,\r\n                userId: userId,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function _authIsSelectableDefaultValue(\r\n        AuthType authType,\r\n        uint256 requestedUserId\r\n    ) internal pure returns (bool) {\r\n        // isSelectableByUser value should always be false in case of VAULT authType.\r\n        // This is because the user can't select the account they want to use for the app.\r\n        // the userId = Hash(VaultSecret, AppId) in the case of VAULT authType.\r\n        if (authType == AuthType.VAULT) {\r\n            return false;\r\n        }\r\n        // When `requestedUserId` is 0, it means no specific auth account is requested by the app,\r\n        // so we want the default value for `isSelectableByUser` to be `true`.\r\n        if (requestedUserId == 0) {\r\n            return true;\r\n        }\r\n        // When `requestedUserId` is not 0, it means a specific auth account is requested by the app,\r\n        // so we want the default value for `isSelectableByUser` to be `false`.\r\n        else {\r\n            return false;\r\n        }\r\n        // However, the dev can still override this default value by setting `isSelectableByUser` to `true`.\r\n    }\r\n}\r\n"
    },
    "contracts/evm/helpers/sismo/utils/ClaimBuilder.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"./Structs.sol\";\r\n\r\nlibrary ClaimBuilder {\r\n    // default value for Claim Request\r\n    bytes16 public constant DEFAULT_CLAIM_GROUP_TIMESTAMP = bytes16(\"latest\");\r\n    uint256 public constant DEFAULT_CLAIM_VALUE = 1;\r\n    ClaimType public constant DEFAULT_CLAIM_TYPE = ClaimType.GTE;\r\n    bool public constant DEFAULT_CLAIM_IS_SELECTABLE_BY_USER = true;\r\n    bytes public constant DEFAULT_CLAIM_EXTRA_DATA = \"\";\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        uint256 value,\r\n        ClaimType claimType,\r\n        bool isSelectableByUser,\r\n        bytes memory extraData\r\n    ) external pure returns (Claim memory) {\r\n        return\r\n            Claim({\r\n                claimType: claimType,\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: value,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        uint256 value,\r\n        ClaimType claimType,\r\n        bytes memory extraData\r\n    ) external pure returns (Claim memory) {\r\n        return\r\n            Claim({\r\n                claimType: claimType,\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: value,\r\n                isSelectableByUser: DEFAULT_CLAIM_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(bytes16 groupId) external pure returns (Claim memory) {\r\n        return\r\n            Claim({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_GROUP_TIMESTAMP,\r\n                value: DEFAULT_CLAIM_VALUE,\r\n                claimType: DEFAULT_CLAIM_TYPE,\r\n                isSelectableByUser: DEFAULT_CLAIM_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp\r\n    ) external pure returns (Claim memory) {\r\n        return\r\n            Claim({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: DEFAULT_CLAIM_VALUE,\r\n                claimType: DEFAULT_CLAIM_TYPE,\r\n                isSelectableByUser: DEFAULT_CLAIM_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        uint256 value\r\n    ) external pure returns (Claim memory) {\r\n        return\r\n            Claim({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_GROUP_TIMESTAMP,\r\n                value: value,\r\n                claimType: DEFAULT_CLAIM_TYPE,\r\n                isSelectableByUser: DEFAULT_CLAIM_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        ClaimType claimType\r\n    ) external pure returns (Claim memory) {\r\n        return\r\n            Claim({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_GROUP_TIMESTAMP,\r\n                value: DEFAULT_CLAIM_VALUE,\r\n                claimType: claimType,\r\n                isSelectableByUser: DEFAULT_CLAIM_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes memory extraData\r\n    ) external pure returns (Claim memory) {\r\n        return\r\n            Claim({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_GROUP_TIMESTAMP,\r\n                value: DEFAULT_CLAIM_VALUE,\r\n                claimType: DEFAULT_CLAIM_TYPE,\r\n                isSelectableByUser: DEFAULT_CLAIM_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        uint256 value\r\n    ) external pure returns (Claim memory) {\r\n        return\r\n            Claim({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: value,\r\n                claimType: DEFAULT_CLAIM_TYPE,\r\n                isSelectableByUser: DEFAULT_CLAIM_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        ClaimType claimType\r\n    ) external pure returns (Claim memory) {\r\n        return\r\n            Claim({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: DEFAULT_CLAIM_VALUE,\r\n                claimType: claimType,\r\n                isSelectableByUser: DEFAULT_CLAIM_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        bytes memory extraData\r\n    ) external pure returns (Claim memory) {\r\n        return\r\n            Claim({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: DEFAULT_CLAIM_VALUE,\r\n                claimType: DEFAULT_CLAIM_TYPE,\r\n                isSelectableByUser: DEFAULT_CLAIM_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        uint256 value,\r\n        ClaimType claimType\r\n    ) external pure returns (Claim memory) {\r\n        return\r\n            Claim({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_GROUP_TIMESTAMP,\r\n                value: value,\r\n                claimType: claimType,\r\n                isSelectableByUser: DEFAULT_CLAIM_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        uint256 value,\r\n        bytes memory extraData\r\n    ) external pure returns (Claim memory) {\r\n        return\r\n            Claim({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_GROUP_TIMESTAMP,\r\n                value: value,\r\n                claimType: DEFAULT_CLAIM_TYPE,\r\n                isSelectableByUser: DEFAULT_CLAIM_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        ClaimType claimType,\r\n        bytes memory extraData\r\n    ) external pure returns (Claim memory) {\r\n        return\r\n            Claim({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_GROUP_TIMESTAMP,\r\n                value: DEFAULT_CLAIM_VALUE,\r\n                claimType: claimType,\r\n                isSelectableByUser: DEFAULT_CLAIM_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        uint256 value,\r\n        ClaimType claimType\r\n    ) external pure returns (Claim memory) {\r\n        return\r\n            Claim({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: value,\r\n                claimType: claimType,\r\n                isSelectableByUser: DEFAULT_CLAIM_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        uint256 value,\r\n        bytes memory extraData\r\n    ) external pure returns (Claim memory) {\r\n        return\r\n            Claim({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: value,\r\n                claimType: DEFAULT_CLAIM_TYPE,\r\n                isSelectableByUser: DEFAULT_CLAIM_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        ClaimType claimType,\r\n        bytes memory extraData\r\n    ) external pure returns (Claim memory) {\r\n        return\r\n            Claim({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: DEFAULT_CLAIM_VALUE,\r\n                claimType: claimType,\r\n                isSelectableByUser: DEFAULT_CLAIM_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        uint256 value,\r\n        ClaimType claimType,\r\n        bytes memory extraData\r\n    ) external pure returns (Claim memory) {\r\n        return\r\n            Claim({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_GROUP_TIMESTAMP,\r\n                value: value,\r\n                claimType: claimType,\r\n                isSelectableByUser: DEFAULT_CLAIM_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n}\r\n"
    },
    "contracts/evm/helpers/sismo/utils/ClaimMatchingLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"./Structs.sol\";\r\n\r\nlibrary ClaimMatchingLib {\r\n    error ClaimInRequestNotFoundInResponse(\r\n        uint8 responseClaimType,\r\n        bytes16 responseClaimGroupId,\r\n        bytes16 responseClaimGroupTimestamp,\r\n        uint256 responseClaimValue,\r\n        bytes responseExtraData\r\n    );\r\n    error ClaimGroupIdAndGroupTimestampNotFound(\r\n        bytes16 requestClaimGroupId,\r\n        bytes16 requestClaimGroupTimestamp\r\n    );\r\n    error ClaimTypeAndGroupTimestampNotFound(\r\n        uint8 requestClaimType,\r\n        bytes16 requestClaimGroupTimestamp\r\n    );\r\n    error ClaimGroupTimestampNotFound(bytes16 requestClaimGroupTimestamp);\r\n    error ClaimTypeAndGroupIdNotFound(\r\n        uint8 requestClaimType,\r\n        bytes16 requestClaimGroupId\r\n    );\r\n    error ClaimGroupIdNotFound(bytes16 requestClaimGroupId);\r\n    error ClaimTypeNotFound(uint8 requestClaimType);\r\n\r\n    // Check if the AuthRequest is fulfilled by the Auth in the response\r\n    // and return the level of matching between the AuthRequest and the Auth in the response\r\n    function _matchLevel(\r\n        Claim memory claim,\r\n        ClaimRequest memory claimRequest\r\n    ) internal pure returns (uint8) {\r\n        uint8 matchingPropertiesLevel = 0;\r\n\r\n        if (claim.claimType == claimRequest.claimType) {\r\n            matchingPropertiesLevel += 1; // 001\r\n        }\r\n        if (claim.groupId == claimRequest.groupId) {\r\n            matchingPropertiesLevel += 2; // 010\r\n        }\r\n        if (claim.groupTimestamp == claimRequest.groupTimestamp) {\r\n            matchingPropertiesLevel += 4; // 100\r\n        }\r\n\r\n        return matchingPropertiesLevel;\r\n    }\r\n\r\n    function handleClaimErrors(\r\n        uint8 maxMatchingProperties,\r\n        ClaimRequest memory claim\r\n    ) public pure {\r\n        // if the maxMatchingProperties is equal to 7 (111 in bits), it means that the claim in the request matches with one of the claims in the response\r\n        // otherwise, we can look at the binary representation of the maxMatchingProperties to know which properties are not matching and throw an error (the 0 bits represent the properties that are not matching)\r\n        if (maxMatchingProperties == 0) {\r\n            // 000\r\n            // no property of the claim in the request matches with any property of the claims in the response\r\n            revert ClaimInRequestNotFoundInResponse(\r\n                uint8(claim.claimType),\r\n                claim.groupId,\r\n                claim.groupTimestamp,\r\n                claim.value,\r\n                claim.extraData\r\n            );\r\n        } else if (maxMatchingProperties == 1) {\r\n            // 001\r\n            // only the claimType property of the claim in the request matches with one of the claims in the response\r\n            revert ClaimGroupIdAndGroupTimestampNotFound(\r\n                claim.groupId,\r\n                claim.groupTimestamp\r\n            );\r\n        } else if (maxMatchingProperties == 2) {\r\n            // 010\r\n            // only the groupId property of the claim in the request matches with one of the claims in the response\r\n            revert ClaimTypeAndGroupTimestampNotFound(\r\n                uint8(claim.claimType),\r\n                claim.groupTimestamp\r\n            );\r\n        } else if (maxMatchingProperties == 3) {\r\n            // 011\r\n            // only the claimType and groupId properties of the claim in the request match with one of the claims in the response\r\n            revert ClaimGroupTimestampNotFound(claim.groupTimestamp);\r\n        } else if (maxMatchingProperties == 4) {\r\n            // 100\r\n            // only the groupTimestamp property of the claim in the request matches with one of the claims in the response\r\n            revert ClaimTypeAndGroupIdNotFound(\r\n                uint8(claim.claimType),\r\n                claim.groupId\r\n            );\r\n        } else if (maxMatchingProperties == 5) {\r\n            // 101\r\n            // only the claimType and groupTimestamp properties of the claim in the request matches with one of the claims in the response\r\n            revert ClaimGroupIdNotFound(claim.groupId);\r\n        } else if (maxMatchingProperties == 6) {\r\n            // 110\r\n            // only the groupId and groupTimestamp properties of the claim in the request matches with one of the claims in the response\r\n            revert ClaimTypeNotFound(uint8(claim.claimType));\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/evm/helpers/sismo/utils/ClaimRequestBuilder.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"./Structs.sol\";\r\n\r\ncontract ClaimRequestBuilder {\r\n    // default value for Claim Request\r\n    bytes16 public constant DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP =\r\n        bytes16(\"latest\");\r\n    uint256 public constant DEFAULT_CLAIM_REQUEST_VALUE = 1;\r\n    ClaimType public constant DEFAULT_CLAIM_REQUEST_TYPE = ClaimType.GTE;\r\n    bool public constant DEFAULT_CLAIM_REQUEST_IS_OPTIONAL = false;\r\n    bool public constant DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER = true;\r\n    bytes public constant DEFAULT_CLAIM_REQUEST_EXTRA_DATA = \"\";\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        uint256 value,\r\n        ClaimType claimType,\r\n        bool isOptional,\r\n        bool isSelectableByUser,\r\n        bytes memory extraData\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                claimType: claimType,\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: value,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        uint256 value,\r\n        ClaimType claimType,\r\n        bytes memory extraData\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                claimType: claimType,\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: value,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        uint256 value\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: value,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        ClaimType claimType\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: claimType,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes memory extraData\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        uint256 value\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: value,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        ClaimType claimType\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: claimType,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        bytes memory extraData\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        uint256 value,\r\n        ClaimType claimType\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: value,\r\n                claimType: claimType,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        uint256 value,\r\n        bytes memory extraData\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: value,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        ClaimType claimType,\r\n        bytes memory extraData\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: claimType,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        uint256 value,\r\n        ClaimType claimType\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: value,\r\n                claimType: claimType,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        uint256 value,\r\n        bytes memory extraData\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: value,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        ClaimType claimType,\r\n        bytes memory extraData\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: claimType,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        uint256 value,\r\n        ClaimType claimType,\r\n        bytes memory extraData\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: value,\r\n                claimType: claimType,\r\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\r\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    // allow dev to choose for isOptional\r\n    // we force to also set isSelectableByUser\r\n    // otherwise function signatures would be colliding\r\n    // between build(bytes16 groupId, bool isOptional) and build(bytes16 groupId, bool isSelectableByUser)\r\n    // we keep this logic for all function signature combinations\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bool isOptional,\r\n        bool isSelectableByUser\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        bool isOptional,\r\n        bool isSelectableByUser\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        uint256 value,\r\n        bool isOptional,\r\n        bool isSelectableByUser\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: value,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        ClaimType claimType,\r\n        bool isOptional,\r\n        bool isSelectableByUser\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: claimType,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        uint256 value,\r\n        bool isOptional,\r\n        bool isSelectableByUser\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: value,\r\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        ClaimType claimType,\r\n        bool isOptional,\r\n        bool isSelectableByUser\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\r\n                claimType: claimType,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        uint256 value,\r\n        ClaimType claimType,\r\n        bool isOptional,\r\n        bool isSelectableByUser\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\r\n                value: value,\r\n                claimType: claimType,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes16 groupId,\r\n        bytes16 groupTimestamp,\r\n        uint256 value,\r\n        ClaimType claimType,\r\n        bool isOptional,\r\n        bool isSelectableByUser\r\n    ) external pure returns (ClaimRequest memory) {\r\n        return\r\n            ClaimRequest({\r\n                groupId: groupId,\r\n                groupTimestamp: groupTimestamp,\r\n                value: value,\r\n                claimType: claimType,\r\n                isOptional: isOptional,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n}\r\n"
    },
    "contracts/evm/helpers/sismo/utils/Fmt.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"./Structs.sol\";\r\nimport \"forge-std/console.sol\";\r\n\r\nlibrary fmt {\r\n    function printAuthRequest(\r\n        AuthRequest memory auth,\r\n        string memory indication\r\n    ) external view {\r\n        console.log(indication);\r\n        console.log(\"authType\", uint8(auth.authType));\r\n        console.log(\"isAnon\", auth.isAnon);\r\n        console.log(\"userId\", auth.userId);\r\n        console.log(\"isOptional\", auth.isOptional);\r\n        console.log(\"isSelectableByUser\", auth.isSelectableByUser);\r\n        console.log(\"extraData\");\r\n        console.logBytes(auth.extraData);\r\n    }\r\n\r\n    function printAuth(\r\n        Auth memory auth,\r\n        string memory indication\r\n    ) external view {\r\n        console.log(indication);\r\n        console.log(\"authType\", uint8(auth.authType));\r\n        console.log(\"isAnon\", auth.isAnon);\r\n        console.log(\"userId\", auth.userId);\r\n        console.log(\"isSelectableByuser\", auth.isSelectableByUser);\r\n        console.log(\"extraData\");\r\n        console.logBytes(auth.extraData);\r\n    }\r\n}\r\n"
    },
    "contracts/evm/helpers/sismo/utils/RequestBuilder.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"./Structs.sol\";\r\nimport {SignatureBuilder} from \"./SignatureBuilder.sol\";\r\n\r\ncontract RequestBuilder {\r\n    // default value for namespace\r\n    bytes16 public constant DEFAULT_NAMESPACE = bytes16(keccak256(\"main\"));\r\n    // default value for a signature request\r\n    SignatureRequest DEFAULT_SIGNATURE_REQUEST =\r\n        SignatureRequest({\r\n            message: \"MESSAGE_SELECTED_BY_USER\",\r\n            isSelectableByUser: false,\r\n            extraData: \"\"\r\n        });\r\n\r\n    function build(\r\n        AuthRequest memory auth,\r\n        ClaimRequest memory claim,\r\n        SignatureRequest memory signature,\r\n        bytes16 namespace\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](1);\r\n        auths[0] = auth;\r\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\r\n        claims[0] = claim;\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest memory auth,\r\n        ClaimRequest memory claim,\r\n        bytes16 namespace\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](1);\r\n        auths[0] = auth;\r\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\r\n        claims[0] = claim;\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        ClaimRequest memory claim,\r\n        SignatureRequest memory signature,\r\n        bytes16 namespace\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](0);\r\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\r\n        claims[0] = claim;\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        ClaimRequest memory claim,\r\n        bytes16 namespace\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](0);\r\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\r\n        claims[0] = claim;\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest memory auth,\r\n        SignatureRequest memory signature,\r\n        bytes16 namespace\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](1);\r\n        auths[0] = auth;\r\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest memory auth,\r\n        bytes16 namespace\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](1);\r\n        auths[0] = auth;\r\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest memory auth,\r\n        ClaimRequest memory claim,\r\n        SignatureRequest memory signature\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](1);\r\n        auths[0] = auth;\r\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\r\n        claims[0] = claim;\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest memory auth,\r\n        ClaimRequest memory claim\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](1);\r\n        auths[0] = auth;\r\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\r\n        claims[0] = claim;\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest memory auth,\r\n        SignatureRequest memory signature\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](1);\r\n        auths[0] = auth;\r\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest memory auth\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](1);\r\n        auths[0] = auth;\r\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        ClaimRequest memory claim,\r\n        SignatureRequest memory signature\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](0);\r\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\r\n        claims[0] = claim;\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        ClaimRequest memory claim\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](0);\r\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\r\n        claims[0] = claim;\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n\r\n    // build with arrays for auths and claims\r\n    function build(\r\n        AuthRequest[] memory auths,\r\n        ClaimRequest[] memory claims,\r\n        SignatureRequest memory signature,\r\n        bytes16 namespace\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest[] memory auths,\r\n        ClaimRequest[] memory claims,\r\n        bytes16 namespace\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        ClaimRequest[] memory claims,\r\n        SignatureRequest memory signature,\r\n        bytes16 namespace\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        ClaimRequest[] memory claims,\r\n        bytes16 namespace\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest[] memory auths,\r\n        SignatureRequest memory signature,\r\n        bytes16 namespace\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest[] memory auths,\r\n        bytes16 namespace\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: namespace,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest[] memory auths,\r\n        ClaimRequest[] memory claims,\r\n        SignatureRequest memory signature\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest[] memory auths,\r\n        ClaimRequest[] memory claims\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest[] memory auths,\r\n        SignatureRequest memory signature\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        AuthRequest[] memory auths\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        ClaimRequest[] memory claims,\r\n        SignatureRequest memory signature\r\n    ) external pure returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: signature\r\n            })\r\n        );\r\n    }\r\n\r\n    function build(\r\n        ClaimRequest[] memory claims\r\n    ) external view returns (SismoConnectRequest memory) {\r\n        AuthRequest[] memory auths = new AuthRequest[](0);\r\n        return (\r\n            SismoConnectRequest({\r\n                namespace: DEFAULT_NAMESPACE,\r\n                auths: auths,\r\n                claims: claims,\r\n                signature: DEFAULT_SIGNATURE_REQUEST\r\n            })\r\n        );\r\n    }\r\n}\r\n"
    },
    "contracts/evm/helpers/sismo/utils/SignatureBuilder.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"./Structs.sol\";\r\n\r\ncontract SignatureBuilder {\r\n    // default values for Signature Request\r\n    bytes public constant DEFAULT_SIGNATURE_REQUEST_MESSAGE =\r\n        \"MESSAGE_SELECTED_BY_USER\";\r\n    bool public constant DEFAULT_SIGNATURE_REQUEST_IS_SELECTABLE_BY_USER =\r\n        false;\r\n    bytes public constant DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA = \"\";\r\n\r\n    function build(\r\n        bytes memory message\r\n    ) external pure returns (SignatureRequest memory) {\r\n        return\r\n            SignatureRequest({\r\n                message: message,\r\n                isSelectableByUser: DEFAULT_SIGNATURE_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes memory message,\r\n        bool isSelectableByUser\r\n    ) external pure returns (SignatureRequest memory) {\r\n        return\r\n            SignatureRequest({\r\n                message: message,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes memory message,\r\n        bytes memory extraData\r\n    ) external pure returns (SignatureRequest memory) {\r\n        return\r\n            SignatureRequest({\r\n                message: message,\r\n                isSelectableByUser: DEFAULT_SIGNATURE_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bytes memory message,\r\n        bool isSelectableByUser,\r\n        bytes memory extraData\r\n    ) external pure returns (SignatureRequest memory) {\r\n        return\r\n            SignatureRequest({\r\n                message: message,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bool isSelectableByUser\r\n    ) external pure returns (SignatureRequest memory) {\r\n        return\r\n            SignatureRequest({\r\n                message: DEFAULT_SIGNATURE_REQUEST_MESSAGE,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        bool isSelectableByUser,\r\n        bytes memory extraData\r\n    ) external pure returns (SignatureRequest memory) {\r\n        return\r\n            SignatureRequest({\r\n                message: DEFAULT_SIGNATURE_REQUEST_MESSAGE,\r\n                isSelectableByUser: isSelectableByUser,\r\n                extraData: extraData\r\n            });\r\n    }\r\n\r\n    function buildEmpty() external pure returns (SignatureRequest memory) {\r\n        return\r\n            SignatureRequest({\r\n                message: DEFAULT_SIGNATURE_REQUEST_MESSAGE,\r\n                isSelectableByUser: DEFAULT_SIGNATURE_REQUEST_IS_SELECTABLE_BY_USER,\r\n                extraData: DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA\r\n            });\r\n    }\r\n}\r\n"
    },
    "contracts/evm/helpers/sismo/utils/SismoConnectHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"./Structs.sol\";\r\n\r\nlibrary SismoConnectHelper {\r\n    error AuthTypeNotFoundInVerifiedResult(AuthType authType);\r\n\r\n    function getUserId(\r\n        SismoConnectVerifiedResult memory result,\r\n        AuthType authType\r\n    ) internal pure returns (uint256) {\r\n        // get the first userId that matches the authType\r\n        for (uint256 i = 0; i < result.auths.length; i++) {\r\n            if (result.auths[i].authType == authType) {\r\n                return result.auths[i].userId;\r\n            }\r\n        }\r\n        revert AuthTypeNotFoundInVerifiedResult(authType);\r\n    }\r\n\r\n    function getUserIds(\r\n        SismoConnectVerifiedResult memory result,\r\n        AuthType authType\r\n    ) internal pure returns (uint256[] memory) {\r\n        // get all userIds that match the authType\r\n        uint256[] memory userIds = new uint256[](result.auths.length);\r\n        for (uint256 i = 0; i < result.auths.length; i++) {\r\n            if (result.auths[i].authType == authType) {\r\n                userIds[i] = result.auths[i].userId;\r\n            }\r\n        }\r\n        return userIds;\r\n    }\r\n\r\n    function getSignedMessage(\r\n        SismoConnectVerifiedResult memory result\r\n    ) internal pure returns (bytes memory) {\r\n        return result.signedMessage;\r\n    }\r\n}\r\n"
    },
    "contracts/evm/helpers/sismo/utils/SismoConnectProofBuilder.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nimport \"./Structs.sol\";\r\n\r\nlibrary ProofBuilder {\r\n    // default values for SismoConnect Proof\r\n    bytes32 public constant DEFAULT_PROOF_PROVING_SCHEME =\r\n        bytes32(\"hydra-s3.1\");\r\n    bytes public constant DEFAULT_PROOF_EXTRA_DATA = \"\";\r\n\r\n    function build(\r\n        Auth memory auth,\r\n        Claim memory claim,\r\n        bytes memory proofData\r\n    ) external pure returns (SismoConnectProof memory) {\r\n        Auth[] memory auths = new Auth[](1);\r\n        auths[0] = auth;\r\n        Claim[] memory claims = new Claim[](1);\r\n        claims[0] = claim;\r\n        return\r\n            SismoConnectProof({\r\n                auths: auths,\r\n                claims: claims,\r\n                proofData: proofData,\r\n                provingScheme: DEFAULT_PROOF_PROVING_SCHEME,\r\n                extraData: DEFAULT_PROOF_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        Auth memory auth,\r\n        Claim memory claim,\r\n        bytes memory proofData,\r\n        bytes32 provingScheme\r\n    ) external pure returns (SismoConnectProof memory) {\r\n        Auth[] memory auths = new Auth[](1);\r\n        auths[0] = auth;\r\n        Claim[] memory claims = new Claim[](1);\r\n        claims[0] = claim;\r\n        return\r\n            SismoConnectProof({\r\n                auths: auths,\r\n                claims: claims,\r\n                proofData: proofData,\r\n                provingScheme: provingScheme,\r\n                extraData: DEFAULT_PROOF_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        Auth memory auth,\r\n        bytes memory proofData\r\n    ) external pure returns (SismoConnectProof memory) {\r\n        Auth[] memory auths = new Auth[](1);\r\n        auths[0] = auth;\r\n        Claim[] memory claims = new Claim[](0);\r\n        return\r\n            SismoConnectProof({\r\n                auths: auths,\r\n                claims: claims,\r\n                proofData: proofData,\r\n                provingScheme: DEFAULT_PROOF_PROVING_SCHEME,\r\n                extraData: DEFAULT_PROOF_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        Auth memory auth,\r\n        bytes memory proofData,\r\n        bytes32 provingScheme\r\n    ) external pure returns (SismoConnectProof memory) {\r\n        Auth[] memory auths = new Auth[](1);\r\n        auths[0] = auth;\r\n        Claim[] memory claims = new Claim[](0);\r\n        return\r\n            SismoConnectProof({\r\n                auths: auths,\r\n                claims: claims,\r\n                proofData: proofData,\r\n                provingScheme: provingScheme,\r\n                extraData: DEFAULT_PROOF_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        Claim memory claim,\r\n        bytes memory proofData\r\n    ) external pure returns (SismoConnectProof memory) {\r\n        Auth[] memory auths = new Auth[](0);\r\n        Claim[] memory claims = new Claim[](1);\r\n        claims[0] = claim;\r\n        return\r\n            SismoConnectProof({\r\n                auths: auths,\r\n                claims: claims,\r\n                proofData: proofData,\r\n                provingScheme: DEFAULT_PROOF_PROVING_SCHEME,\r\n                extraData: DEFAULT_PROOF_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        Claim memory claim,\r\n        bytes memory proofData,\r\n        bytes32 provingScheme\r\n    ) external pure returns (SismoConnectProof memory) {\r\n        Auth[] memory auths = new Auth[](0);\r\n        Claim[] memory claims = new Claim[](1);\r\n        claims[0] = claim;\r\n        return\r\n            SismoConnectProof({\r\n                auths: auths,\r\n                claims: claims,\r\n                proofData: proofData,\r\n                provingScheme: provingScheme,\r\n                extraData: DEFAULT_PROOF_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        Auth[] memory auths,\r\n        Claim[] memory claims,\r\n        bytes memory proofData\r\n    ) external pure returns (SismoConnectProof memory) {\r\n        return\r\n            SismoConnectProof({\r\n                auths: auths,\r\n                claims: claims,\r\n                proofData: proofData,\r\n                provingScheme: DEFAULT_PROOF_PROVING_SCHEME,\r\n                extraData: DEFAULT_PROOF_EXTRA_DATA\r\n            });\r\n    }\r\n\r\n    function build(\r\n        Auth[] memory auths,\r\n        Claim[] memory claims,\r\n        bytes memory proofData,\r\n        bytes32 provingScheme\r\n    ) external pure returns (SismoConnectProof memory) {\r\n        return\r\n            SismoConnectProof({\r\n                auths: auths,\r\n                claims: claims,\r\n                proofData: proofData,\r\n                provingScheme: provingScheme,\r\n                extraData: DEFAULT_PROOF_EXTRA_DATA\r\n            });\r\n    }\r\n}\r\n"
    },
    "contracts/evm/helpers/sismo/utils/Structs.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nstruct SismoConnectRequest {\r\n    bytes16 namespace;\r\n    AuthRequest[] auths;\r\n    ClaimRequest[] claims;\r\n    SignatureRequest signature;\r\n}\r\n\r\nstruct SismoConnectConfig {\r\n    bytes16 appId;\r\n    VaultConfig vault;\r\n}\r\n\r\nstruct VaultConfig {\r\n    bool isImpersonationMode;\r\n}\r\n\r\nstruct AuthRequest {\r\n    AuthType authType;\r\n    uint256 userId; // default: 0\r\n    // flags\r\n    bool isAnon; // default: false -> true not supported yet, need to throw if true\r\n    bool isOptional; // default: false\r\n    bool isSelectableByUser; // default: true\r\n    //\r\n    bytes extraData; // default: \"\"\r\n}\r\n\r\nstruct ClaimRequest {\r\n    ClaimType claimType; // default: GTE\r\n    bytes16 groupId;\r\n    bytes16 groupTimestamp; // default: bytes16(\"latest\")\r\n    uint256 value; // default: 1\r\n    // flags\r\n    bool isOptional; // default: false\r\n    bool isSelectableByUser; // default: true\r\n    //\r\n    bytes extraData; // default: \"\"\r\n}\r\n\r\nstruct SignatureRequest {\r\n    bytes message; // default: \"MESSAGE_SELECTED_BY_USER\"\r\n    bool isSelectableByUser; // default: false\r\n    bytes extraData; // default: \"\"\r\n}\r\n\r\nenum AuthType {\r\n    VAULT,\r\n    GITHUB,\r\n    TWITTER,\r\n    EVM_ACCOUNT,\r\n    TELEGRAM,\r\n    DISCORD\r\n}\r\n\r\nenum ClaimType {\r\n    GTE,\r\n    GT,\r\n    EQ,\r\n    LT,\r\n    LTE\r\n}\r\n\r\nstruct Auth {\r\n    AuthType authType;\r\n    bool isAnon;\r\n    bool isSelectableByUser;\r\n    uint256 userId;\r\n    bytes extraData;\r\n}\r\n\r\nstruct Claim {\r\n    ClaimType claimType;\r\n    bytes16 groupId;\r\n    bytes16 groupTimestamp;\r\n    bool isSelectableByUser;\r\n    uint256 value;\r\n    bytes extraData;\r\n}\r\n\r\nstruct Signature {\r\n    bytes message;\r\n    bytes extraData;\r\n}\r\n\r\nstruct SismoConnectResponse {\r\n    bytes16 appId;\r\n    bytes16 namespace;\r\n    bytes32 version;\r\n    bytes signedMessage;\r\n    SismoConnectProof[] proofs;\r\n}\r\n\r\nstruct SismoConnectProof {\r\n    Auth[] auths;\r\n    Claim[] claims;\r\n    bytes32 provingScheme;\r\n    bytes proofData;\r\n    bytes extraData;\r\n}\r\n\r\nstruct SismoConnectVerifiedResult {\r\n    bytes16 appId;\r\n    bytes16 namespace;\r\n    bytes32 version;\r\n    VerifiedAuth[] auths;\r\n    VerifiedClaim[] claims;\r\n    bytes signedMessage;\r\n}\r\n\r\nstruct VerifiedAuth {\r\n    AuthType authType;\r\n    bool isAnon;\r\n    uint256 userId;\r\n    bytes extraData;\r\n    bytes proofData;\r\n}\r\n\r\nstruct VerifiedClaim {\r\n    ClaimType claimType;\r\n    bytes16 groupId;\r\n    bytes16 groupTimestamp;\r\n    uint256 value;\r\n    bytes extraData;\r\n    uint256 proofId;\r\n    bytes proofData;\r\n}\r\n"
    },
    "contracts/evm/interfaces/IMecenateBay.sol": {
      "content": "pragma solidity 0.8.19;\r\nimport \"../library/Structures.sol\";\r\n\r\ninterface IMecenateBay {\r\n    function allRequests()\r\n        external\r\n        view\r\n        returns (Structures.BayRequest[] memory);\r\n\r\n    function contractCounter() external view returns (uint256);\r\n}\r\n"
    },
    "contracts/evm/interfaces/IMecenateFeed.sol": {
      "content": "pragma solidity 0.8.19;\n\nimport \"../library/Structures.sol\";\n\ninterface IMecenateFeed {\n    function getTotalStaked() external view returns (uint256);\n\n    function postCount() external view returns (uint256);\n\n    function acceptPost(\n        Structures.Tokens,\n        uint256 _amount,\n        address _from\n    ) external payable;\n\n    function getSellerStake() external view returns (uint256);\n\n    function getBuyerStake() external view returns (uint256);\n\n    function getPaymentRequested() external view returns (uint256);\n\n    function getStakeRequested() external view returns (uint256);\n\n    function getStatus() external view returns (Structures.PostStatus status);\n\n    function getTokenId() external view returns (Structures.Tokens tokenId);\n\n    function owner() external view returns (address);\n\n    function version() external view returns (string memory);\n}\n"
    },
    "contracts/evm/interfaces/IMecenateFeedFactory.sol": {
      "content": "pragma solidity 0.8.19;\n\ninterface IMecenateFeedFactory {\n    function owner() external view returns (address payable);\n\n    function treasuryContract() external view returns (address payable);\n\n    function identityContract() external view returns (address);\n\n    function feeds() external view returns (address[] memory);\n\n    function contractCounter() external view returns (uint256);\n\n    function isFeed(address _feed) external view returns (bool);\n\n    function museToken() external view returns (address);\n\n    function wethToken() external view returns (address);\n\n    function daiToken() external view returns (address);\n\n    function router() external view returns (address);\n\n    function getRouterFee(uint8 tokenId) external view returns (uint24);\n\n    function burnEnabled() external view returns (bool);\n\n    function schema() external view returns (bytes32);\n}\n"
    },
    "contracts/evm/interfaces/IMecenateTreasury.sol": {
      "content": "pragma solidity 0.8.19;\r\n\r\ninterface IMecenateTreasury {\r\n    function globalFee() external view returns (uint256);\r\n\r\n    function fixedFee() external view returns (uint256);\r\n}\r\n"
    },
    "contracts/evm/interfaces/IMecenateUsers.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\nimport \"../library/Structures.sol\";\n\ninterface IMecenateUsers {\n    function registerUser(bytes memory metadata) external;\n\n    function getUsers() external view returns (address[] memory);\n\n    function getUserCount() external view returns (uint256);\n\n    function getUserAt(uint256 index) external view returns (address);\n\n    function checkifUserExist(address userAddress) external view returns (bool);\n\n    function getPaginatedUsers(\n        uint256 startIndex,\n        uint256 endIndex\n    ) external view returns (address[] memory);\n\n    function getUserMetadata(\n        address userAddress\n    ) external view returns (Structures.User memory);\n\n    function getUserPublicKey(\n        address userAddress\n    ) external view returns (bytes memory);\n}\n"
    },
    "contracts/evm/interfaces/IMUSE.sol": {
      "content": "pragma solidity 0.8.19;\n\n// import IERC20 from openzeppelin\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IMUSE is IERC20 {\n    function increaseAllowance(\n        address spender,\n        uint256 addedValue\n    ) external returns (bool);\n\n    function decreaseAllowance(\n        address spender,\n        uint256 subtractedValue\n    ) external returns (bool);\n\n    function mint(uint256 amount) external;\n\n    function burn(uint256 amount) external;\n}\n"
    },
    "contracts/evm/interfaces/IWETH.sol": {
      "content": "pragma solidity 0.8.19;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function withdraw(uint256) external;\r\n}\r\n"
    },
    "contracts/evm/library/Structures.sol": {
      "content": "/**\n * @title Structures\n * @dev This library defines various data structures used in the Mecenate platform.\n */\npragma solidity 0.8.19;\n\nlibrary Structures {\n    enum PostStatus {\n        Waiting,\n        Proposed,\n        Accepted,\n        Submitted,\n        Finalized,\n        Punished,\n        Revealed,\n        Renounced\n    }\n\n    enum Tokens {\n        NaN,\n        MUSE,\n        DAI\n    }\n\n    enum PostType {\n        Text,\n        Image,\n        Video,\n        Audio,\n        File\n    }\n    enum PostDuration {\n        OneDay,\n        ThreeDays,\n        OneWeek,\n        TwoWeeks,\n        OneMonth\n    }\n\n    struct FeedSettings {\n        uint256 punishmentRatio;\n        uint256 postCount;\n        address usersModuleContract;\n        address factoryContract;\n        address router;\n        string version;\n    }\n\n    struct FactorySettings {\n        address treasuryContract;\n        address usersModuleContract;\n        address museToken;\n        address daiToken;\n        address wethToken;\n        address router;\n    }\n\n    /**\n     * @dev Struct representing a post on the Mecenate platform.\n     */\n    struct Post {\n        User creator;\n        PostData postdata;\n    }\n\n    /**\n     * @dev Struct representing the data of a post on the Mecenate platform.\n     */\n    struct PostData {\n        PostSettings settings;\n        PostEscrow escrow;\n        PostEncryptedData data;\n    }\n\n    /**\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\n     */\n    struct PostEncryptedData {\n        bytes encryptedData;\n        bytes encryptedKey;\n        bytes decryptedData;\n    }\n\n    /**\n     * @dev Struct representing the settings of a post on the Mecenate platform.\n     */\n    struct PostSettings {\n        PostStatus status;\n        PostType postType;\n        uint256 creationTimeStamp;\n        uint256 endTimeStamp;\n        uint256 duration;\n        Tokens tokenId;\n    }\n\n    /**\n     * @dev Struct representing the private settings of a post on the Mecenate platform.\n     */\n    struct PostSettingPrivate {\n        address buyerAddress;\n        address sellerAddress;\n    }\n\n    /**\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\n     */\n    struct PostEscrow {\n        uint256 stake;\n        uint256 payment;\n        uint256 punishment;\n        uint256 penalty;\n    }\n\n    /**\n     * @dev Struct representing a user on the Mecenate platform.\n     */\n    struct User {\n        address evmAddress;\n        bytes sismoVaultId;\n        bytes publicKey;\n    }\n\n    /**\n     * @dev Struct representing a feed on the Mecenate platform.\n     */\n    struct Feed {\n        address contractAddress;\n        address owner;\n        uint256 sellerStake;\n        uint256 buyerStake;\n        uint256 totalStake;\n        uint256 postCount;\n        uint256 paymentRequested;\n        uint256 stakeRequested;\n        PostStatus status;\n        Tokens tokenId;\n        string version;\n    }\n\n    /**\n     * @dev Struct representing a bay request on the Mecenate platform.\n     */\n    struct BayRequest {\n        bytes request;\n        uint256 payment;\n        uint256 stake;\n        address postAddress;\n        bool accepted;\n        uint256 postCount;\n        Tokens tokenId;\n        address buyerAddress;\n    }\n}\n"
    },
    "contracts/evm/MecenateStats.sol": {
      "content": "/**\n * @title MecenateStats\n * @dev This contract provides statistics about the Mecenate platform, including the total number of users, bay requests, feeds, global fee, fixed fee, and treasury balance.\n */\npragma solidity 0.8.19;\n\nimport \"./interfaces/IMecenateUsers.sol\";\nimport \"./interfaces/IMecenateFeedFactory.sol\";\nimport \"./interfaces/IMecenateBay.sol\";\nimport \"./interfaces/IMecenateTreasury.sol\";\n\ncontract MecenateStats {\n    struct Stats {\n        uint256 totalUsers;\n        uint256 totalBayRequests;\n        uint256 totalFeeds;\n        uint256 globalFee;\n        uint256 fixedFee;\n        uint256 treasuryBalance;\n    }\n\n    IMecenateUsers public mecenateUsers;\n    IMecenateFeedFactory public mecenateFeedFactory;\n    IMecenateBay public mecenateBay;\n    IMecenateTreasury public mecenateTreasury;\n\n    constructor(\n        address mecenateUsersAddress,\n        address mecenateFeedFactoryAddress,\n        address mecenateBayAddress,\n        address mecenateTreasuryAddress\n    ) {\n        mecenateUsers = IMecenateUsers(mecenateUsersAddress);\n        mecenateFeedFactory = IMecenateFeedFactory(mecenateFeedFactoryAddress);\n        mecenateBay = IMecenateBay(mecenateBayAddress);\n        mecenateTreasury = IMecenateTreasury(mecenateTreasuryAddress);\n    }\n\n    function getStats() public view returns (Stats memory) {\n        uint256 totalBayRequests = mecenateBay.contractCounter();\n        uint256 totalFeeds = mecenateFeedFactory.contractCounter();\n\n        return\n            Stats(\n                mecenateUsers.getUserCount(),\n                totalBayRequests,\n                totalFeeds,\n                mecenateTreasury.globalFee(),\n                mecenateTreasury.fixedFee(),\n                address(mecenateTreasury).balance\n            );\n    }\n}\n"
    },
    "contracts/evm/MecenateVerifier.sol": {
      "content": "/**\n * @title MecenateVerifier\n * @dev Contract that verifies user identity using SismoConnect and returns user's vaultId, twitterId and telegramId.\n */\npragma solidity ^0.8.17;\nimport \"./helpers/sismo/SismoConnectLib.sol\";\n\ncontract MecenateVerifier is SismoConnect {\n    bytes16 public appId;\n\n    constructor(bytes16 _appId) SismoConnect(buildConfig(_appId)) {\n        appId = _appId;\n    }\n\n    function sismoVerify(\n        bytes memory sismoConnectResponse\n    ) external view returns (bytes memory) {\n        require(sismoConnectResponse.length > 0, \"empty response\");\n\n        // Build authorization requests\n        AuthRequest[] memory auths = new AuthRequest[](4);\n\n        auths[0] = buildAuth(AuthType.VAULT);\n\n        auths[1] = buildAuth({\n            authType: AuthType.TWITTER,\n            isOptional: false,\n            isSelectableByUser: false\n        });\n\n        auths[2] = buildAuth({\n            authType: AuthType.TELEGRAM,\n            isOptional: true,\n            isSelectableByUser: true\n        });\n\n        auths[3] = buildAuth({\n            authType: AuthType.GITHUB,\n            isOptional: true,\n            isSelectableByUser: true\n        });\n\n        // Verify the response\n        SismoConnectVerifiedResult memory result = verify({\n            responseBytes: sismoConnectResponse,\n            auths: auths,\n            signature: buildSignature({message: abi.encode(\"I Love Sismo!\")})\n        });\n\n        bytes memory signedMessage = SismoConnectHelper.getSignedMessage(\n            result\n        );\n\n        string memory message = abi.decode(signedMessage, (string));\n\n        require(\n            keccak256(abi.encodePacked(message)) ==\n                keccak256(abi.encodePacked(\"I Love Sismo!\")),\n            \"Invalid signature\"\n        );\n\n        // Store the verified auths\n        VerifiedAuth[] memory _verifiedAuths = new VerifiedAuth[](\n            result.auths.length\n        );\n\n        for (uint256 i = 0; i < result.auths.length; i++) {\n            _verifiedAuths[i] = result.auths[i];\n        }\n\n        // Get the vaultId of the user\n        // --> vaultId = hash(userVaultSecret, appId)\n        uint256 vaultId = SismoConnectHelper.getUserId(result, AuthType.VAULT);\n\n        // Convert the vaultId to bytes\n        bytes memory vaultIdBytes = abi.encodePacked(vaultId);\n\n        return (vaultIdBytes);\n    }\n}\n"
    },
    "contracts/evm/modules/Acceptance.sol": {
      "content": "/**\n * @title Acceptance\n * @dev This contract is an abstract contract that inherits from Events and Staking contracts. It provides a function to accept a post and add stake to the post. The function accepts a Sismo Connect response as a parameter and verifies the user existence. It also checks if the user is not the seller and if the post is in Proposed status. If the post has an escrow payment, it checks if the buyer has paid enough and adds the payment to the post's escrow. If the post does not have an escrow payment, it requires a payment from the buyer and adds it to the post's escrow. Finally, it changes the post status to Accepted and emits an Accepted event.\n */\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport \"./Events.sol\";\nimport \"./Staking.sol\";\n\nabstract contract Acceptance is Events, Staking {\n    function acceptPost(\n        Structures.Tokens tokenId,\n        uint256 paymentAmount,\n        address funder\n    ) external payable virtual {\n        require(\n            validStatuses[uint8(Structures.PostStatus.Proposed)],\n            \"INVALID_STATUS\"\n        );\n\n        _checkToken(tokenId);\n\n        uint256 amountToAdd = tokenId == Structures.Tokens.NaN\n            ? msg.value\n            : paymentAmount;\n\n        // Use local variable for repeated calls\n        uint256 sellerStake = Deposit._getDeposit(\n            tokenId,\n             post.postdata.escrow.seller\n        );\n\n        require(sellerStake >= post.postdata.escrow.stake, \"STAKE_INCORRECT\");\n\n        require(\n            IMecenateUsers(settings.usersModuleContract).checkifUserExist(\n                msg.sender\n            ),\n            \"USERT_NOT_EXIST\"\n        );\n\n        require(\n            msg.sender !=  post.postdata.escrow.seller,\n            \"YOU_ARE_THE_SELLER\"\n        );\n\n        if (post.postdata.escrow.payment > 0) {\n            require(\n                paymentAmount >= post.postdata.escrow.payment,\n                \"NOT_ENOUGH_PAYMENT\"\n            );\n        } else {\n            require(msg.value > 0, \"ZERO_MSGVALUE\");\n\n            require(paymentAmount > 0, \"ZERO_PAYMENT\");\n        }\n\n        uint256 payment = _addStake(tokenId, msg.sender, funder, amountToAdd);\n\n        post.postdata.escrow.payment = payment;\n\n        post.postdata.settings.status = Structures.PostStatus.Accepted;\n\n        _changeStatus(Structures.PostStatus.Accepted);\n\n         post.postdata.escrow.buyer = msg.sender;\n\n        emit Accepted(post);\n    }\n}\n"
    },
    "contracts/evm/modules/BurnDAI.sol": {
      "content": "pragma solidity 0.8.19;\n\nimport \"./BurnMUSE.sol\";\nimport \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"../interfaces/IWETH.sol\";\n\nabstract contract BurnDAI is BurnMUSE {\n    using SafeMath for uint256;\n\n    function _burnFrom(\n        address from,\n        uint256 value\n    ) internal override returns (bool success) {\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\n            .transferFrom(from, address(this), value);\n\n        _burn(value);\n\n        return true;\n    }\n\n    function _burnDai(uint256 value) internal returns (bool success) {\n        // approve uniswap for token transfer\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\n            .approve(settings.router, value);\n\n        // swap IMecenateFeedFactory(settings.factoryContract).daiToken() for MUSE\n        uint256 tokens_sold = value;\n\n        uint256 tokens_bought = _swapTokensForToken(\n            IMecenateFeedFactory(settings.factoryContract).daiToken(),\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\n            IMecenateFeedFactory(settings.factoryContract).getRouterFee(0),\n            tokens_sold\n        );\n\n        uint256 tokens_sold_to_muse = _swapTokensForToken(\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\n            IMecenateFeedFactory(settings.factoryContract).museToken(),\n            IMecenateFeedFactory(settings.factoryContract).getRouterFee(1),\n            tokens_bought\n        );\n\n        IERC20(IMecenateFeedFactory(settings.factoryContract).museToken())\n            .approve(\n                IMecenateFeedFactory(settings.factoryContract).museToken(),\n                tokens_sold_to_muse\n            );\n\n        // burn MUSE\n        BurnMUSE._burn(tokens_sold_to_muse);\n\n        return true;\n    }\n\n    function _burnWeth(uint256 value) internal returns (bool success) {\n        // deposit IMecenateFeedFactory(settings.factoryContract).wethToken()\n        IWETH(IMecenateFeedFactory(settings.factoryContract).wethToken())\n            .deposit{value: value}();\n\n        // approve uniswap for token transfer\n        IERC20(IMecenateFeedFactory(settings.factoryContract).wethToken())\n            .approve(settings.router, value);\n\n        // swap IMecenateFeedFactory(settings.factoryContract).wethToken() for MUSE\n        uint256 tokens_sold = value;\n\n        uint256 tokens_bought = _swapTokensForToken(\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\n            IMecenateFeedFactory(settings.factoryContract).museToken(),\n            IMecenateFeedFactory(settings.factoryContract).getRouterFee(1),\n            tokens_sold\n        );\n\n        IERC20(IMecenateFeedFactory(settings.factoryContract).museToken())\n            .approve(\n                IMecenateFeedFactory(settings.factoryContract).museToken(),\n                tokens_bought\n            );\n\n        // burn MUSE\n        BurnMUSE._burn(tokens_bought);\n\n        return true;\n    }\n\n    function getTokenAddress()\n        internal\n        view\n        virtual\n        override\n        returns (address token)\n    {\n        return IMecenateFeedFactory(settings.factoryContract).daiToken();\n    }\n\n    function getExchangeAddress()\n        internal\n        view\n        override\n        returns (address exchange)\n    {\n        exchange = settings.router;\n    }\n\n    function _swapTokensForToken(\n        address tokenIn,\n        address tokenOut,\n        uint24 fee,\n        uint256 amountIn\n    ) internal returns (uint256 amountOut) {\n        // Check and approve allowance\n        uint256 allowance = IERC20(tokenIn).allowance(\n            address(this),\n            settings.router\n        );\n        if (allowance < amountIn) {\n            IERC20(tokenIn).approve(settings.router, type(uint256).max);\n        }\n\n        // Prepare parameters\n        address recipient = address(this);\n        uint256 deadline = block.timestamp + 60; // 15 seconds from the current block timestamp\n\n        // Perform the swap\n        // Refer to the Uniswap V3 documentation for details on the params.\n        amountOut = ISwapRouter(settings.router).exactInputSingle(\n            ISwapRouter.ExactInputSingleParams({\n                tokenIn: tokenIn,\n                tokenOut: tokenOut,\n                fee: fee,\n                recipient: recipient,\n                deadline: deadline,\n                amountIn: amountIn,\n                amountOutMinimum: 0, // you may want to set a minimum here\n                sqrtPriceLimitX96: 0\n            })\n        );\n\n        return amountOut;\n    }\n}\n"
    },
    "contracts/evm/modules/BurnMUSE.sol": {
      "content": "pragma solidity 0.8.19;\nimport \"../interfaces/IMUSE.sol\";\nimport \"../interfaces/IMecenateFeedFactory.sol\";\nimport \"./Events.sol\";\n\nabstract contract BurnMUSE is Events {\n    function _burn(uint256 value) internal virtual returns (bool success) {\n        IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken()).burn(\n            value\n        );\n        return true;\n    }\n\n    function _burnFrom(\n        address from,\n        uint256 value\n    ) internal virtual returns (bool success) {\n        IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken())\n            .transferFrom(from, address(this), value);\n        _burn(value);\n        return true;\n    }\n\n    function getTokenAddress() internal view virtual returns (address token) {\n        return IMecenateFeedFactory(settings.factoryContract).museToken();\n    }\n\n    function getExchangeAddress()\n        internal\n        view\n        virtual\n        returns (address exchange)\n    {\n        exchange = IMecenateFeedFactory(settings.factoryContract).router();\n    }\n}\n"
    },
    "contracts/evm/modules/Creation.sol": {
      "content": "/**\n * @title Creation\n * @dev This contract is an abstract contract that inherits from Staking contract. It provides a function to create a post with the given parameters. The function requires the user to be the owner of the post and to have a stake. The post can have different durations and types. The function returns the created post.\n */\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"./Staking.sol\";\n\nabstract contract Creation is Staking {\n    function createPost(\n        bytes memory encryptedHash,\n        Structures.PostType postType,\n        Structures.PostDuration postDuration,\n        uint256 payment,\n        uint256 stakeAmount,\n        Structures.Tokens tokenId,\n        address funder\n    )\n        external\n        payable\n        onlyValidTokenID(tokenId)\n        returns (Structures.Post memory)\n    {\n        require(msg.sender == owner);\n\n        require(\n            IMecenateUsers(settings.usersModuleContract).checkifUserExist(\n                msg.sender\n            ),\n            \"USER_NOT_EXIST\"\n        );\n\n        require(\n            validStatuses[uint8(post.postdata.settings.status)],\n            \"INVALID_STATUS\"\n        );\n\n        require(stakeAmount > 0, \"STAKE_AMOUNT_ZERO\");\n\n        require(payment > 0, \"PAYMENT_ZERO\");\n\n        if (tokenId == Structures.Tokens.NaN) {\n            require(msg.value == stakeAmount, \"WRONG_MSG_VALUE\");\n        }\n\n        uint256 duration = postDurationToDays[uint8(postDuration)];\n\n        uint256 stake = _addStake(tokenId, msg.sender, funder, stakeAmount);\n\n        // Change status to Proposed\n        _changeStatus(Structures.PostStatus.Proposed);\n\n        Structures.User memory creator = IMecenateUsers(\n            settings.usersModuleContract\n        ).getUserMetadata(msg.sender);\n\n        // Initialize the new Post struct with named arguments for clarity\n        Structures.Post memory newPost = Structures.Post({\n            creator: creator,\n            postdata: Structures.PostData({\n                settings: Structures.PostSettings({\n                    postType: postType,\n                    status: Structures.PostStatus.Proposed,\n                    creationTimeStamp: block.timestamp,\n                    endTimeStamp: 0,\n                    duration: duration,\n                    tokenId: tokenId\n                }),\n                escrow: Structures.PostEscrow({\n                    stake: stake,\n                    payment: payment,\n                    punishment: 0,\n                    penalty: 0\n                }),\n                data: Structures.PostEncryptedData({\n                    encryptedData: encryptedHash,\n                    encryptedKey: ZEROHASH,\n                    decryptedData: ZEROHASH\n                })\n            })\n        });\n\n        // Update storage and emit event\n        post = newPost;\n\n        settings.postCount++;\n\n         post.postdata.escrow.seller = msg.sender;\n\n        emit Created(newPost);\n\n        return newPost;\n    }\n}\n"
    },
    "contracts/evm/modules/Data.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"../interfaces/IMecenateFeed.sol\";\nimport \"../interfaces/IMecenateUsers.sol\";\nimport \"../interfaces/IMecenateTreasury.sol\";\nimport \"../interfaces/IMecenateFeedFactory.sol\";\n\n/**\n * @title Data\n * @dev This contract stores data related to Mecenate posts and provides functions to interact with it.\n */\ncontract Data {\n    bytes internal constant ZEROHASH = \"0x00\";\n\n    address public owner;\n\n    Structures.Post public post;\n\n    Structures.PostSettingPrivate internal postSettingPrivate;\n\n    Structures.FeedSettings internal settings;\n\n    mapping(uint8 => uint256) internal postDurationToDays;\n\n    mapping(uint8 => bool) internal validStatuses;\n\n    constructor(\n        address usersModuleContract,\n        address factoryContract,\n        string memory ver\n    ) {\n        settings.punishmentRatio = 100000000000000000; // Constant value\n        settings.postCount = 0; // Initialize postCount to 0\n        settings.usersModuleContract = usersModuleContract;\n        settings.factoryContract = msg.sender;\n        settings.router = IMecenateFeedFactory(factoryContract).router();\n        post.postdata.settings.status = Structures.PostStatus.Waiting;\n\n        postDurationToDays[uint8(Structures.PostDuration.OneDay)] = 1 days;\n        postDurationToDays[uint8(Structures.PostDuration.ThreeDays)] = 3 days;\n        postDurationToDays[uint8(Structures.PostDuration.OneWeek)] = 7 days;\n        postDurationToDays[uint8(Structures.PostDuration.TwoWeeks)] = 14 days;\n        postDurationToDays[uint8(Structures.PostDuration.OneMonth)] = 30 days;\n        validStatuses[uint8(Structures.PostStatus.Waiting)] = true;\n\n        settings.version = ver;\n    }\n\n    function version() external view returns (string memory) {\n        return settings.version;\n    }\n\n    function _changeStatus(Structures.PostStatus newStatus) internal {\n        validStatuses[uint8(post.postdata.settings.status)] = false;\n        validStatuses[uint8(newStatus)] = true;\n        post.postdata.settings.status = newStatus;\n    }\n\n    function getStatus() external view returns (Structures.PostStatus) {\n        return post.postdata.settings.status;\n    }\n\n    function getTokenId() external view returns (Structures.Tokens) {\n        return post.postdata.settings.tokenId;\n    }\n\n    function getTokenIdAddress() public view returns (address) {\n        if (post.postdata.settings.tokenId == Structures.Tokens.MUSE) {\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\n        } else if (post.postdata.settings.tokenId == Structures.Tokens.DAI) {\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\n        } else {\n            return address(0);\n        }\n    }\n\n    function _checkToken(Structures.Tokens _token) internal view {\n        require(_token == post.postdata.settings.tokenId, \"WRONG_TOKEN\");\n    }\n\n    function getPaymentRequested() external view returns (uint256) {\n        return post.postdata.escrow.payment;\n    }\n\n    function getStakeRequested() external view returns (uint256) {\n        return post.postdata.escrow.stake;\n    }\n\n    function postCount() external view returns (uint256) {\n        return settings.postCount;\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts/evm/modules/Deposit.sol": {
      "content": "pragma solidity 0.8.19;\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./TokenManager.sol\";\n\ncontract Deposit {\n    using SafeMath for uint256;\n\n    mapping(uint256 => mapping(address => uint256)) private _deposit;\n\n    event DepositIncreased(\n        Structures.Tokens tokenID,\n        address user,\n        uint256 amount,\n        uint256 newDeposit\n    );\n    event DepositDecreased(\n        Structures.Tokens tokenID,\n        address user,\n        uint256 amount,\n        uint256 newDeposit\n    );\n\n    function _increaseDeposit(\n        Structures.Tokens tokenID,\n        address user,\n        uint256 amountToAdd\n    ) internal returns (uint256 newDeposit) {\n        // calculate new deposit amount\n        newDeposit = _deposit[uint256(tokenID)][user].add(amountToAdd);\n\n        // set new stake to storage\n        _deposit[uint256(tokenID)][user] = newDeposit;\n\n        // emit event\n        emit DepositIncreased(tokenID, user, amountToAdd, newDeposit);\n\n        // return\n        return newDeposit;\n    }\n\n    function _decreaseDeposit(\n        Structures.Tokens tokenID,\n        address user,\n        uint256 amountToRemove\n    ) internal returns (uint256 newDeposit) {\n        // get current deposit\n        uint256 currentDeposit = _deposit[uint256(tokenID)][user];\n\n        // check if sufficient deposit\n        require(currentDeposit >= amountToRemove, \"INSUFFICIENT_DEPOSIT\");\n\n        // calculate new deposit amount\n        newDeposit = currentDeposit.sub(amountToRemove);\n\n        // set new stake to storage\n        _deposit[uint256(tokenID)][user] = newDeposit;\n\n        // emit event\n        emit DepositDecreased(tokenID, user, amountToRemove, newDeposit);\n\n        // return\n        return newDeposit;\n    }\n\n    function _clearDeposit(\n        Structures.Tokens tokenID,\n        address user\n    ) internal returns (uint256 amountRemoved) {\n        // get current deposit\n        uint256 currentDeposit = _deposit[uint256(tokenID)][user];\n\n        // remove deposit\n        _decreaseDeposit(tokenID, user, currentDeposit);\n\n        // return\n        return currentDeposit;\n    }\n\n    function _getDeposit(\n        Structures.Tokens tokenID,\n        address user\n    ) internal view returns (uint256 deposit) {\n        return _deposit[uint256(tokenID)][user];\n    }\n}\n"
    },
    "contracts/evm/modules/Events.sol": {
      "content": "/**\r\n * @title Events\r\n * @dev This abstract contract defines the events related to the Mecenate platform's post lifecycle.\r\n */\r\npragma solidity 0.8.19;\r\n\r\nimport \"./Data.sol\";\r\n\r\nabstract contract Events is Data {\r\n    event Created(Structures.Post post);\r\n    event Accepted(Structures.Post post);\r\n    event Valid(Structures.Post post);\r\n    event Invalid(Structures.Post post);\r\n    event Finalized(Structures.Post post);\r\n    event MadePublic(Structures.Post post);\r\n    event Renounced(Structures.Post post);\r\n}\r\n"
    },
    "contracts/evm/modules/FeedViewer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"../library/Structures.sol\";\nimport \"../interfaces/IMecenateFeed.sol\";\n\ncontract FeedViewer {\n    function _getFeedInfo(\n        address feed\n    ) internal view returns (Structures.Feed memory) {\n        Structures.Feed memory f;\n\n        IMecenateFeed mecenateFeed = IMecenateFeed(feed);\n\n        f.contractAddress = feed;\n        f.owner = mecenateFeed.owner();\n        f.sellerStake = mecenateFeed.getSellerStake();\n        f.buyerStake = mecenateFeed.getBuyerStake();\n        f.totalStake = mecenateFeed.getTotalStaked();\n        f.postCount = mecenateFeed.postCount();\n        f.paymentRequested = mecenateFeed.getPaymentRequested();\n        f.stakeRequested = mecenateFeed.getStakeRequested();\n        f.status = mecenateFeed.getStatus();\n        f.tokenId = mecenateFeed.getTokenId();\n        f.version = mecenateFeed.version();\n\n        return f;\n    }\n\n    function _getFeedsInfo(\n        address[] memory _feeds\n    ) internal view returns (Structures.Feed[] memory) {\n        uint256 len = _feeds.length;\n        Structures.Feed[] memory f = new Structures.Feed[](len);\n\n        for (uint256 i = 0; i < len; i++) {\n            f[i] = _getFeedInfo(_feeds[i]);\n        }\n\n        return f;\n    }\n}\n"
    },
    "contracts/evm/modules/Finalization.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\nimport \"./Staking.sol\";\n\nabstract contract Finalization is Staking {\n    function finalizePost(bool valid, uint256 punishment) external virtual {\n        require(msg.sender ==  post.postdata.escrow.buyer, \"NOT_SELLER\");\n\n        require(\n            post.postdata.settings.status == Structures.PostStatus.Submitted,\n            \"NOT_SUBMITTED\"\n        );\n\n        // Common contract addresses and variables\n        address treasuryContract = IMecenateFeedFactory(\n            settings.factoryContract\n        ).treasuryContract();\n\n        uint256 buyerFee = (post.postdata.escrow.payment *\n            IMecenateTreasury(treasuryContract).globalFee()) / 10000;\n\n        uint256 amountToAdd = post.postdata.escrow.payment - buyerFee;\n\n        // Variables for stake changes\n        uint256 buyerStake;\n\n        uint256 sellerStake;\n\n        if (post.postdata.settings.endTimeStamp < block.timestamp || valid) {\n            // Code for both the timeout and the valid case\n            buyerStake = Deposit._decreaseDeposit(\n                post.postdata.settings.tokenId,\n                 post.postdata.escrow.buyer,\n                post.postdata.escrow.payment\n            );\n\n            sellerStake = Deposit._increaseDeposit(\n                post.postdata.settings.tokenId,\n                 post.postdata.escrow.seller,\n                amountToAdd\n            );\n\n            _burn(post.postdata.settings.tokenId, treasuryContract, buyerFee);\n\n            // Update status and stakes\n            post.postdata.escrow.stake = sellerStake;\n\n            post.postdata.escrow.payment = buyerStake;\n\n            _changeStatus(\n                valid\n                    ? Structures.PostStatus.Finalized\n                    : Structures.PostStatus.Punished\n            );\n\n            emit Valid(post);\n        } else if (!valid) {\n            require(\n                punishment <= post.postdata.escrow.stake,\n                \"PUNISHMENT_TOO_HIGH\"\n            );\n            require(settings.punishmentRatio < 1e18, \"PUNISHMENT_RATIO_HIGH\");\n\n            uint256 penalty = (punishment * settings.punishmentRatio) / 1e18;\n\n            post.postdata.escrow.payment = _burnStake(\n                post.postdata.settings.tokenId,\n                 post.postdata.escrow.buyer,\n                penalty\n            );\n\n            post.postdata.escrow.stake = _burnStake(\n                post.postdata.settings.tokenId,\n                 post.postdata.escrow.seller,\n                punishment\n            );\n\n            // Update status and penalties\n            post.postdata.settings.status = Structures.PostStatus.Punished;\n\n            post.postdata.escrow.punishment = punishment;\n\n            post.postdata.escrow.penalty = penalty;\n\n            _changeStatus(Structures.PostStatus.Punished);\n\n            emit Invalid(post);\n        }\n    }\n}\n"
    },
    "contracts/evm/modules/Renounce.sol": {
      "content": "/**\n * @title Renounce\n * @dev This abstract contract extends the Staking contract and provides functionality for a seller to renounce a post.\n * The seller can only renounce a post if they are the original creator of the post and the post is in the Accepted or Submitted status.\n * Renouncing a post refunds the buyer's payment and transfers the seller's stake to the seller's address.\n * The post struct is reset and the post status is updated to Renounced.\n * This contract also provides an internal function for refunding a post, which is called by the renouncePost function.\n */\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport \"./Staking.sol\";\n\nabstract contract Renounce is Staking {\n    function renouncePost() external {\n        require(msg.sender ==  post.postdata.escrow.seller, \"NOT_SELLER\");\n\n        // Validate the post status\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\n\n        require(validStatuses[uint8(currentStatus)], \"INVALID_STATUS\");\n\n        // Reset post and post settings\n        post = Structures.Post(\n            Structures.User({\n                evmAddress: address(0),\n                sismoVaultId: ZEROHASH,\n                publicKey: ZEROHASH\n            }),\n            Structures.PostData({\n                settings: Structures.PostSettings({\n                    status: Structures.PostStatus.Renounced,\n                    postType: Structures.PostType.Text,\n                    creationTimeStamp: 0,\n                    endTimeStamp: 0,\n                    duration: 0,\n                    tokenId: Structures.Tokens.NaN\n                }),\n                escrow: Structures.PostEscrow({\n                    stake: 0,\n                    payment: 0,\n                    punishment: 0,\n                    penalty: 0\n                }),\n                data: Structures.PostEncryptedData({\n                    encryptedData: \"\",\n                    encryptedKey: \"\",\n                    decryptedData: \"\"\n                })\n            })\n        );\n\n         post.postdata.escrow.seller = address(0);\n\n        // Emit event\n        emit Renounced(post);\n    }\n}\n"
    },
    "contracts/evm/modules/Staking.sol": {
      "content": "/**\n * @title Staking\n * @dev This contract handles staking functionality for the Mecenate platform.\n * It allows users to add, take, and burn stakes, and provides functions to get the total staked amount and individual stake amounts.\n * It also includes a modifier to check the status of a post before allowing stake-related transactions.\n */\npragma solidity 0.8.19;\n\nimport \"./Deposit.sol\";\nimport \"./Events.sol\";\n\nabstract contract Staking is Events, Deposit, TokenManager {\n    using SafeMath for uint256;\n\n    event StakeBurned(address staker, uint256 amount);\n\n    event StakeTaken(address staker, uint256 amount, Structures.Tokens tokenId);\n\n    event StakeAdded(address staker, uint256 amount, Structures.Tokens tokenId);\n\n    function _addStake(\n        Structures.Tokens tokenId,\n        address staker,\n        address funder,\n        uint256 amountToAdd\n    ) internal returns (uint256 newStake) {\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\n\n        require(\n            currentStatus != Structures.PostStatus.Accepted &&\n                currentStatus != Structures.PostStatus.Submitted,\n            \"INVALID_STATUS\"\n        );\n\n        require(amountToAdd > 0, \"STAKE_REQUIRED\");\n\n        if (tokenId != Structures.Tokens.NaN) {\n            _transferFrom(tokenId, funder, address(this), amountToAdd);\n        }\n\n        newStake = Deposit._increaseDeposit(tokenId, staker, amountToAdd);\n\n        emit StakeAdded(staker, amountToAdd, tokenId);\n\n        return newStake;\n    }\n\n    function _takeStake(\n        Structures.Tokens tokenId,\n        address staker,\n        address receiver,\n        uint256 amountToTake\n    ) internal returns (uint256 newStake) {\n        // Memorizza lo status del post in una variabile per evitare accessi ridondanti allo storage\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\n\n        // Verifica che lo status del post sia valido per procedere\n        require(\n            currentStatus != Structures.PostStatus.Accepted &&\n                currentStatus != Structures.PostStatus.Submitted,\n            \"INVALID_STATUS\"\n        );\n\n        // Effettua il trasferimento del token o dell'Ether\n        if (tokenId == Structures.Tokens.NaN) {\n            //(bool result, ) = payable(_to).call{value: amountToTake}(\"\");\n            //require(result, \"CALL_FAILED\");\n            payable(receiver).transfer(amountToTake);\n        } else {\n            _transfer(tokenId, receiver, amountToTake);\n        }\n\n        // Aggiorna il deposito e emette un evento\n        newStake = Deposit._decreaseDeposit(tokenId, staker, amountToTake);\n        emit StakeTaken(staker, amountToTake, tokenId);\n\n        return newStake;\n    }\n\n    function _takeFullStake(\n        Structures.Tokens tokenId,\n        address staker,\n        address receiver\n    ) internal returns (uint256 amountTaken) {\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, staker);\n\n        uint256 newStake = _takeStake(\n            tokenId,\n            staker,\n            receiver,\n            currentDeposit\n        );\n\n        return newStake;\n    }\n\n    function _burnStake(\n        Structures.Tokens tokenId,\n        address staker,\n        uint256 amountToBurn\n    ) internal returns (uint256 newStake) {\n        uint256 newDeposit = Deposit._decreaseDeposit(\n            tokenId,\n            staker,\n            amountToBurn\n        );\n\n        bool burnEnabled = IMecenateFeedFactory(settings.factoryContract)\n            .burnEnabled();\n\n        address treasuryContract = IMecenateFeedFactory(\n            settings.factoryContract\n        ).treasuryContract();\n\n        if (burnEnabled == false) {\n            if (tokenId == Structures.Tokens.NaN) {\n                (bool result, ) = payable(treasuryContract).call{\n                    value: amountToBurn\n                }(\"\");\n                require(result, \"CALL_FAILED\");\n            } else {\n                _transfer(tokenId, treasuryContract, amountToBurn);\n            }\n        } else {\n            if (tokenId == Structures.Tokens.DAI) {\n                _burnDai(amountToBurn);\n            } else if (tokenId == Structures.Tokens.MUSE) {\n                _burn(amountToBurn);\n            } else if (tokenId == Structures.Tokens.NaN) {\n                _burnWeth(amountToBurn);\n            }\n        }\n\n        emit StakeBurned(staker, amountToBurn);\n\n        return newDeposit;\n    }\n\n    function _burnFullStake(\n        Structures.Tokens tokenId,\n        address staker\n    ) internal returns (uint256 amountBurned) {\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, staker);\n\n        _burnStake(tokenId, staker, currentDeposit);\n\n        return currentDeposit;\n    }\n\n    function getStake(\n        Structures.Tokens tokenId,\n        address staker\n    ) external view returns (uint256 amount) {\n        // get deposit\n        amount = Deposit._getDeposit(tokenId, staker);\n        // explicit return\n        return amount;\n    }\n\n    function getTotalStaked() external view returns (uint256) {\n        uint256 amountSeller = Deposit._getDeposit(\n            post.postdata.settings.tokenId,\n             post.postdata.escrow.seller\n        );\n\n        uint256 amountBuyer = Deposit._getDeposit(\n            post.postdata.settings.tokenId,\n             post.postdata.escrow.buyer\n        );\n\n        return (amountSeller + amountBuyer);\n    }\n\n    function addStake(\n        Structures.Tokens tokenId,\n        address _funder,\n        uint256 amountToAdd\n    ) external payable returns (uint256) {\n        require(tokenId == post.postdata.settings.tokenId, \"WRONG_TOKEN\");\n\n        // Check if the encryptedVaultId matches with either the buyer or the seller\n        require(\n            msg.sender ==  post.postdata.escrow.buyer ||\n                msg.sender ==  post.postdata.escrow.seller,\n            \"WRONG_MSGSENDER\"\n        );\n\n        // Determine the amount to add based on the role (buyer or seller)\n        uint256 actualAmountToAdd = (msg.sender ==\n             post.postdata.escrow.seller)\n            ? msg.value\n            : amountToAdd;\n\n        // Update the stake\n        uint256 newStake = _addStake(\n            tokenId,\n            msg.sender,\n            _funder,\n            actualAmountToAdd\n        );\n\n        // Update the corresponding escrow value based on the role\n        if (msg.sender ==  post.postdata.escrow.buyer) {\n            post.postdata.escrow.payment = newStake;\n        } else {\n            post.postdata.escrow.stake = newStake;\n        }\n\n        return newStake;\n    }\n\n    function takeStake(\n        Structures.Tokens tokenId,\n        address receiver,\n        uint256 amountToTake\n    ) external returns (uint256) {\n        require(tokenId == post.postdata.settings.tokenId, \"WRONG_TOKEN\");\n\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, msg.sender);\n\n        require(currentDeposit >= amountToTake, \"NOT_ENOUGH_STAKE\");\n\n        uint256 newBalance = _takeStake(\n            tokenId,\n            msg.sender,\n            receiver,\n            amountToTake\n        );\n\n        if (msg.sender ==  post.postdata.escrow.buyer) {\n            post.postdata.escrow.payment = newBalance;\n        } else {\n            post.postdata.escrow.stake = newBalance;\n        }\n\n        return newBalance;\n    }\n\n    function takeFullStake(\n        Structures.Tokens tokenId,\n        bytes memory sismoConnectResponse,\n        address receiver\n    ) external returns (uint256) {\n        require(tokenId == post.postdata.settings.tokenId, \"WRONG_TOKEN\");\n\n        uint256 newBalance = _takeFullStake(tokenId, msg.sender, receiver);\n\n        if (msg.sender ==  post.postdata.escrow.buyer) {\n            post.postdata.escrow.payment = newBalance;\n        } else if (msg.sender ==  post.postdata.escrow.seller) {\n            post.postdata.escrow.stake = newBalance;\n        }\n\n        return newBalance;\n    }\n\n    function getSellerStake() external view returns (uint256 amount) {\n        // get deposit\n        amount = Deposit._getDeposit(\n            post.postdata.settings.tokenId,\n             post.postdata.escrow.seller\n        );\n        // explicit return\n        return amount;\n    }\n\n    function getBuyerStake() external view returns (uint256 amount) {\n        // get deposit\n        amount = Deposit._getDeposit(\n            post.postdata.settings.tokenId,\n             post.postdata.escrow.buyer\n        );\n        // explicit return\n        return amount;\n    }\n}\n"
    },
    "contracts/evm/modules/Submission.sol": {
      "content": "/**\n * @title Submission\n * @dev This contract is an abstract contract that defines the functions for submitting and revealing data for a post. It inherits from the Events contract.\n */\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"./Events.sol\";\n\nabstract contract Submission is Events {\n    function submitHash(bytes memory encryptedKey) external virtual {\n        require(msg.sender ==  post.postdata.escrow.seller, \"NOT_SELLER\");\n\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\n        require(\n            validStatuses[uint8(currentStatus)] &&\n                (currentStatus == Structures.PostStatus.Accepted ||\n                    currentStatus == Structures.PostStatus.Submitted),\n            \"WRONG_STATUS\"\n        );\n\n        require(\n            IMecenateUsers(settings.usersModuleContract).checkifUserExist(\n                msg.sender\n            ),\n            \"User does not exist\"\n        );\n\n        require(post.creator.evmAddress == msg.sender, \"NOT_SELLER\");\n\n        _changeStatus(Structures.PostStatus.Submitted);\n\n        post.postdata.data.encryptedKey = encryptedKey;\n        post.postdata.settings.status = Structures.PostStatus.Submitted;\n        post.postdata.settings.endTimeStamp =\n            block.timestamp +\n            post.postdata.settings.duration;\n\n        emit Valid(post);\n    }\n\n    function revealData(\n        bytes memory decryptedData\n    ) external virtual returns (bytes memory) {\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\n        require(\n            validStatuses[uint8(currentStatus)] &&\n                (currentStatus == Structures.PostStatus.Submitted ||\n                    currentStatus == Structures.PostStatus.Revealed ||\n                    currentStatus == Structures.PostStatus.Finalized),\n            \"INVALID_STATUS\"\n        );\n\n        require(\n            msg.sender !=  post.postdata.escrow.seller,\n            \"YOU_ARE_THE_SELLER\"\n        );\n\n        require(\n            currentStatus == Structures.PostStatus.Finalized,\n            \"NOT_FINALIZED\"\n        );\n\n        post.postdata.data.decryptedData = decryptedData;\n        post.postdata.settings.status = Structures.PostStatus.Revealed;\n\n        emit MadePublic(post);\n\n        return decryptedData;\n    }\n}\n"
    },
    "contracts/evm/modules/TokenManager.sol": {
      "content": "pragma solidity 0.8.19;\n\nimport \"./BurnDAI.sol\";\n\nabstract contract TokenManager is BurnDAI {\n    function _getTokenAddress(\n        Structures.Tokens tokenID\n    ) internal view returns (address) {\n        if (tokenID == Structures.Tokens.DAI)\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\n        if (tokenID == Structures.Tokens.MUSE)\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\n        return address(0);\n    }\n\n    function _checkAllowance(\n        Structures.Tokens tokenID,\n        address from,\n        address to,\n        uint256 value\n    ) internal view {\n        address tokenAddress = _getTokenAddress(tokenID);\n        require(\n            IERC20(tokenAddress).allowance(from, to) >= value,\n            \"INSUFFICIENT_ALLOWANCE\"\n        );\n    }\n\n    modifier onlyValidTokenID(Structures.Tokens tokenID) {\n        require(\n            tokenID == Structures.Tokens.MUSE ||\n                tokenID == Structures.Tokens.DAI ||\n                tokenID == Structures.Tokens.NaN,\n            \"WRONG_TOKEN\"\n        );\n        _;\n    }\n\n    function isValidTokenID(\n        Structures.Tokens tokenID\n    ) internal pure returns (bool validity) {\n        return\n            tokenID == Structures.Tokens.MUSE ||\n            tokenID == Structures.Tokens.DAI;\n    }\n\n    function _transfer(\n        Structures.Tokens tokenID,\n        address to,\n        uint256 value\n    ) internal onlyValidTokenID(tokenID) {\n        require(\n            IERC20(_getTokenAddress(tokenID)).transfer(to, value),\n            \"TRANSFER_FAILED\"\n        );\n    }\n\n    function _transferFrom(\n        Structures.Tokens tokenID,\n        address from,\n        address to,\n        uint256 value\n    ) internal onlyValidTokenID(tokenID) {\n        address tokenAddress = _getTokenAddress(tokenID);\n        _checkAllowance(tokenID, from, to, value);\n        require(\n            IERC20(tokenAddress).transferFrom(from, to, value),\n            \"TRANSFER_FAILED\"\n        );\n    }\n\n    function _burn(\n        Structures.Tokens tokenID,\n        address _receiver,\n        uint256 value\n    ) internal onlyValidTokenID(tokenID) returns (bool success) {\n        bool burnEnabled = IMecenateFeedFactory(settings.factoryContract)\n            .burnEnabled();\n\n        if (burnEnabled == false) {\n            if (tokenID == Structures.Tokens.NaN) {\n                (bool result, ) = payable(_receiver).call{value: value}(\"\");\n                require(result, \"CALL_FAILED\");\n            } else {\n                TokenManager._transfer(tokenID, _receiver, value);\n            }\n        } else {\n            if (tokenID == Structures.Tokens.DAI) {\n                _burnDai(value);\n            } else if (tokenID == Structures.Tokens.MUSE) {\n                _burn(value);\n            } else if (tokenID == Structures.Tokens.NaN) {\n                _burnWeth(value);\n            }\n        }\n\n        return true;\n    }\n\n    function _burnFrom(\n        Structures.Tokens tokenID,\n        address from,\n        uint256 value\n    ) internal onlyValidTokenID(tokenID) {\n        address treasury = IMecenateFeedFactory(settings.factoryContract)\n            .treasuryContract();\n\n        if (tokenID == Structures.Tokens.DAI) {\n            IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\n                .transferFrom(from, treasury, value);\n        } else if (tokenID == Structures.Tokens.MUSE) {\n            BurnMUSE._burnFrom(from, value);\n        }\n    }\n\n    function _approve(\n        Structures.Tokens tokenID,\n        address spender,\n        uint256 value\n    ) internal onlyValidTokenID(tokenID) {\n        if (tokenID == Structures.Tokens.DAI) {\n            require(\n                IERC20(\n                    IMecenateFeedFactory(settings.factoryContract).daiToken()\n                ).approve(spender, value),\n                \"APPROVE_FAILED\"\n            );\n        } else if (tokenID == Structures.Tokens.MUSE) {\n            uint256 currentAllowance = IMUSE(\n                IMecenateFeedFactory(settings.factoryContract).museToken()\n            ).allowance(msg.sender, spender);\n\n            uint256 newAllowance = currentAllowance + value;\n            require(\n                IMUSE(IMecenateFeedFactory(settings.factoryContract).daiToken())\n                    .increaseAllowance(spender, newAllowance),\n                \"APPROVE_FAILED\"\n            );\n        }\n    }\n\n    function totalSupply(\n        Structures.Tokens tokenID\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\n        return IERC20(_getTokenAddress(tokenID)).totalSupply();\n    }\n\n    function balanceOf(\n        Structures.Tokens tokenID,\n        address who\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\n        return IERC20(_getTokenAddress(tokenID)).balanceOf(who);\n    }\n\n    function allowance(\n        Structures.Tokens tokenID,\n        address owner,\n        address spender\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\n        return IERC20(_getTokenAddress(tokenID)).allowance(owner, spender);\n    }\n}\n"
    },
    "forge-std/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nlibrary console {\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n    function _sendLogPayload(bytes memory payload) private view {\n        uint256 payloadLength = payload.length;\n        address consoleAddress = CONSOLE_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            let payloadStart := add(payload, 32)\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n        }\n    }\n\n    function log() internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\n    }\n\n    function logInt(int p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n    }\n\n    function logUint(uint p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n    }\n\n    function logString(string memory p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function logBool(bool p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function logAddress(address p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function logBytes(bytes memory p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n    }\n\n    function logBytes1(bytes1 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n    }\n\n    function logBytes2(bytes2 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n    }\n\n    function logBytes3(bytes3 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n    }\n\n    function logBytes4(bytes4 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n    }\n\n    function logBytes5(bytes5 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n    }\n\n    function logBytes6(bytes6 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n    }\n\n    function logBytes7(bytes7 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n    }\n\n    function logBytes8(bytes8 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n    }\n\n    function logBytes9(bytes9 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n    }\n\n    function logBytes10(bytes10 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n    }\n\n    function logBytes11(bytes11 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n    }\n\n    function logBytes12(bytes12 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n    }\n\n    function logBytes13(bytes13 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n    }\n\n    function logBytes14(bytes14 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n    }\n\n    function logBytes15(bytes15 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n    }\n\n    function logBytes16(bytes16 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n    }\n\n    function logBytes17(bytes17 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n    }\n\n    function logBytes18(bytes18 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n    }\n\n    function logBytes19(bytes19 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n    }\n\n    function logBytes20(bytes20 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n    }\n\n    function logBytes21(bytes21 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n    }\n\n    function logBytes22(bytes22 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n    }\n\n    function logBytes23(bytes23 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n    }\n\n    function logBytes24(bytes24 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n    }\n\n    function logBytes25(bytes25 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n    }\n\n    function logBytes26(bytes26 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n    }\n\n    function logBytes27(bytes27 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n    }\n\n    function logBytes28(bytes28 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n    }\n\n    function logBytes29(bytes29 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n    }\n\n    function logBytes30(bytes30 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n    }\n\n    function logBytes31(bytes31 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n    }\n\n    function logBytes32(bytes32 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n    }\n\n    function log(uint p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n    }\n\n    function log(string memory p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function log(bool p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function log(address p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function log(uint p0, uint p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n    }\n\n    function log(uint p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n    }\n\n    function log(uint p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n    }\n\n    function log(uint p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n    }\n\n    function log(string memory p0, uint p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n    }\n\n    function log(string memory p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n\n    function log(string memory p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n    }\n\n    function log(string memory p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n    }\n\n    function log(bool p0, uint p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n    }\n\n    function log(bool p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n    }\n\n    function log(bool p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n    }\n\n    function log(bool p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n    }\n\n    function log(address p0, uint p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n    }\n\n    function log(address p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n    }\n\n    function log(address p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n    }\n\n    function log(address p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n    }\n\n    function log(uint p0, uint p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n    }\n\n    function log(uint p0, uint p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n    }\n\n    function log(uint p0, uint p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n    }\n\n    function log(uint p0, uint p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n    }\n\n    function log(uint p0, string memory p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n    }\n\n    function log(uint p0, string memory p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n    }\n\n    function log(uint p0, string memory p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n    }\n\n    function log(uint p0, string memory p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n    }\n\n    function log(uint p0, bool p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n    }\n\n    function log(uint p0, bool p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n    }\n\n    function log(uint p0, bool p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(uint p0, bool p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n    }\n\n    function log(uint p0, address p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n    }\n\n    function log(uint p0, address p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n    }\n\n    function log(uint p0, address p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n    }\n\n    function log(uint p0, address p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n    }\n\n    function log(uint p0, uint p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n    }\n\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
