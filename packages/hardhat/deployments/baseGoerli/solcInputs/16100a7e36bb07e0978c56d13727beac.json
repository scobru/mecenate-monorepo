{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/interfaces/IMecenateTreasury.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\ninterface IMecenateTreasury {\n    function globalFee() external view returns (uint256);\n\n    function fixedFee() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IMecenateUsers.sol": {
      "content": "// SPDX-License-Identifier: MIT\nimport \"../library/Structures.sol\";\n\ninterface IMecenateUsers {\n    function registerUser(bytes memory metadata) external;\n\n    function getUsers() external view returns (address[] memory);\n\n    function getUserCount() external view returns (uint256);\n\n    function getUserAt(uint256 index) external view returns (address);\n\n    function checkifUserExist(address userAddress) external view returns (bool);\n\n    function getPaginatedUsers(\n        uint256 startIndex,\n        uint256 endIndex\n    ) external view returns (address[] memory);\n\n    function getUserMetadata(\n        address userAddress\n    ) external view returns (Structures.User memory);\n\n    function getUserPublicKey(\n        address userAddress\n    ) external view returns (bytes memory);\n}\n"
    },
    "contracts/layer/MecenatePay.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../interfaces/IMecenateUsers.sol\";\r\nimport \"../interfaces/IMecenateTreasury.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract MecenatePay is Ownable {\r\n    mapping(bytes => bytes) public encryptedKeys;\r\n\r\n    address public usersContract;\r\n    address public treasury;\r\n\r\n    event KeySubmitted(address indexed user, bytes pubKey);\r\n\r\n    constructor(address _usersContract, address _treasury) {\r\n        usersContract = _usersContract;\r\n        treasury = _treasury;\r\n    }\r\n\r\n    function submitHash(bytes memory encryptedData) public payable {\r\n        (bytes memory encryptedKey, bytes memory pubKey) = abi.decode(\r\n            encryptedData,\r\n            (bytes, bytes)\r\n        );\r\n\r\n        uint256 fixedFee = IMecenateTreasury(treasury).fixedFee();\r\n        require(msg.value == fixedFee, \"Wrong Fee Value\");\r\n\r\n        (bool success, ) = treasury.call{value: msg.value}(\"\");\r\n\r\n        require(success, \"Transfer failed.\");\r\n\r\n        bytes memory fetchedPubKey = IMecenateUsers(usersContract)\r\n            .getUserPublicKey(msg.sender);\r\n\r\n        require(\r\n            keccak256(fetchedPubKey) == keccak256(pubKey),\r\n            \"Invalid public key\"\r\n        );\r\n\r\n        encryptedKeys[pubKey] = encryptedKey;\r\n\r\n        emit KeySubmitted(msg.sender, pubKey);\r\n    }\r\n\r\n    function getHash(bytes memory pubKey) public view returns (bytes memory) {\r\n        bytes memory fetchedPubKey = IMecenateUsers(usersContract)\r\n            .getUserPublicKey(msg.sender);\r\n        require(\r\n            keccak256(fetchedPubKey) == keccak256(pubKey),\r\n            \"Invalid public key\"\r\n        );\r\n\r\n        return encryptedKeys[pubKey];\r\n    }\r\n\r\n    function updateUsersContract(address newUsersContract) public onlyOwner {\r\n        usersContract = newUsersContract;\r\n    }\r\n}\r\n"
    },
    "contracts/library/Structures.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n/**\n * @title Structures\n * @dev This library defines various data structures used in the Mecenate platform.\n */\npragma solidity 0.8.19;\n\nlibrary Structures {\n    enum PostStatus {\n        Waiting,\n        Proposed,\n        Accepted,\n        Submitted,\n        Finalized,\n        Punished,\n        Revealed,\n        Renounced\n    }\n\n    enum PostResult {\n        None,\n        Valid,\n        Punished\n    }\n\n    enum Tokens {\n        NaN,\n        MUSE,\n        DAI\n    }\n\n    enum PostType {\n        Text,\n        Image,\n        Video,\n        Audio,\n        File\n    }\n    enum PostDuration {\n        OneDay,\n        ThreeDays,\n        OneWeek,\n        TwoWeeks,\n        OneMonth\n    }\n\n    struct PostTimestamp {\n        PostResult postResult;\n        uint256 creationTimeStamp;\n        uint256 endTimeStamp;\n    }\n\n    struct FeedSettings {\n        uint256 punishmentRatio;\n        uint256 postCount;\n        address usersModuleContract;\n        address factoryContract;\n        address router;\n        string version;\n    }\n\n    struct FactorySettings {\n        address treasuryContract;\n        address usersModuleContract;\n        address easContract;\n        bytes32 easSchema;\n        address museToken;\n        address daiToken;\n        address wethToken;\n        address router;\n    }\n\n    /**\n     * @dev Struct representing a post on the Mecenate platform.\n     */\n    struct Post {\n        User creator;\n        PostData postdata;\n    }\n\n    /**\n     * @dev Struct representing the data of a post on the Mecenate platform.\n     */\n    struct PostData {\n        PostSettings settings;\n        PostEscrow escrow;\n        PostEncryptedData data;\n    }\n\n    /**\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\n     */\n    struct PostEncryptedData {\n        bytes encryptedData;\n        bytes encryptedKey;\n        bytes decryptedData;\n    }\n\n    /**\n     * @dev Struct representing the settings of a post on the Mecenate platform.\n     */\n    struct PostSettings {\n        PostStatus status;\n        PostType postType;\n        uint256 creationTimeStamp;\n        uint256 endTimeStamp;\n        uint256 duration;\n        Tokens tokenId;\n        bytes32 postId;\n    }\n\n    /**\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\n     */\n    struct PostEscrow {\n        address buyer;\n        address seller;\n        uint256 stake;\n        uint256 payment;\n        uint256 punishment;\n        uint256 penalty;\n    }\n\n    /**\n     * @dev Struct representing a user on the Mecenate platform.\n     */\n    struct User {\n        address evmAddress;\n        bytes sismoVaultId;\n        bytes publicKey;\n    }\n\n    /**\n     * @dev Struct representing a feed on the Mecenate platform.\n     */\n    struct Feed {\n        address contractAddress;\n        address owner;\n        uint256 sellerStake;\n        uint256 buyerStake;\n        uint256 totalStake;\n        uint256 postCount;\n        uint256 paymentRequested;\n        uint256 stakeRequested;\n        PostStatus status;\n        Tokens tokenId;\n        string version;\n        bytes32 postId;\n    }\n\n    /**\n     * @dev Struct representing a bay request on the Mecenate platform.\n     */\n    struct BayRequest {\n        bytes request;\n        uint256 payment;\n        uint256 stake;\n        address postAddress;\n        bool accepted;\n        uint256 postCount;\n        Tokens tokenId;\n        address buyerAddress;\n        bytes32 postId;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}