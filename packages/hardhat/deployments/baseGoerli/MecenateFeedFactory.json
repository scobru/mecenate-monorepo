{
  "address": "0x8B90376A65C507F8aAEBd3ac40fFE588592A2d8C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usersModuleContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasuryContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_verifierContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "FeedCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "sismoConnectResponse",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_nonce",
          "type": "bytes32"
        }
      ],
      "name": "buildFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usersModule",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wethToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_museToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_daiToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "changeMultipleSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_version",
          "type": "string"
        }
      ],
      "name": "changeVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daiToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feed",
          "type": "address"
        }
      ],
      "name": "getFeedInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "operator",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "sellerStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyerStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "postCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "paymentRequested",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeRequested",
              "type": "uint256"
            },
            {
              "internalType": "enum Structures.PostStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "enum Structures.Tokens",
              "name": "tokenId",
              "type": "uint8"
            }
          ],
          "internalType": "struct Structures.Feed",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeds",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeedsInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "operator",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "sellerStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyerStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "postCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "paymentRequested",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeRequested",
              "type": "uint256"
            },
            {
              "internalType": "enum Structures.PostStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "enum Structures.Tokens",
              "name": "tokenId",
              "type": "uint8"
            }
          ],
          "internalType": "struct Structures.Feed[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "vaultId",
          "type": "bytes32"
        }
      ],
      "name": "getFeedsInfoOwned",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "operator",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "sellerStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyerStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "postCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "paymentRequested",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeRequested",
              "type": "uint256"
            },
            {
              "internalType": "enum Structures.PostStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "enum Structures.Tokens",
              "name": "tokenId",
              "type": "uint8"
            }
          ],
          "internalType": "struct Structures.Feed[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "vaultId",
          "type": "bytes32"
        }
      ],
      "name": "getFeedsOwned",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "tokenId",
          "type": "uint8"
        }
      ],
      "name": "getRouterFee",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "identityContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "isContractCreated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feed",
          "type": "address"
        }
      ],
      "name": "isFeed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "museToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_burnEnabled",
          "type": "bool"
        }
      ],
      "name": "setBurnEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_byteCode",
          "type": "bytes"
        }
      ],
      "name": "setFeedByteCode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "tokenId",
          "type": "uint8"
        },
        {
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        }
      ],
      "name": "setRouterFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wethToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0e5da214eff157b7a054061204e27e9ed75b2ad205a359765b0a8a901a628466",
  "receipt": {
    "to": null,
    "from": "0x8aA5F726d9F868a21a8bd748E2f1E43bA31eb670",
    "contractAddress": "0x8B90376A65C507F8aAEBd3ac40fFE588592A2d8C",
    "transactionIndex": 2,
    "gasUsed": "2084597",
    "logsBloom": "0x
    "blockHash": "0xcf365311dd634b4aef728a049101cd768f17c8cb09486fcec4b9ad7bc55d081d",
    "transactionHash": "0x0e5da214eff157b7a054061204e27e9ed75b2ad205a359765b0a8a901a628466",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 10577009,
        "transactionHash": "0x0e5da214eff157b7a054061204e27e9ed75b2ad205a359765b0a8a901a628466",
        "address": "0x8B90376A65C507F8aAEBd3ac40fFE588592A2d8C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008aa5f726d9f868a21a8bd748e2f1e43ba31eb670"
        ],
        "data": "0x",
        "logIndex": 31,
        "blockHash": "0xcf365311dd634b4aef728a049101cd768f17c8cb09486fcec4b9ad7bc55d081d"
      }
    ],
    "blockNumber": 10577009,
    "cumulativeGasUsed": "3132931",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7E8664B5BA54AD234d62A5Af7197999181Ca3dC6",
    "0x27115aAa74b296D2461958498B5b4C99b8E10afA",
    "0x5C5957b711169fC762e83c9A90B3A56C80E2C010",
    "0x0000000000000000000000000000000000000000"
  ],
  "numDeployments": 3,
  "solcInputHash": "abe1b51c8b82362d524c8efc9e8c0e34",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usersModuleContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_verifierContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"FeedCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"buildFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usersModule\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_museToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_daiToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"changeMultipleSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"}],\"name\":\"changeVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feed\",\"type\":\"address\"}],\"name\":\"getFeedInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"operator\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sellerStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentRequested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeRequested\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.Feed\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeds\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeedsInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"operator\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sellerStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentRequested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeRequested\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.Feed[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"name\":\"getFeedsInfoOwned\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"operator\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sellerStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentRequested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeRequested\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.Feed[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"name\":\"getFeedsOwned\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"name\":\"getRouterFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identityContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"isContractCreated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feed\",\"type\":\"address\"}],\"name\":\"isFeed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"museToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_burnEnabled\",\"type\":\"bool\"}],\"name\":\"setBurnEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_byteCode\",\"type\":\"bytes\"}],\"name\":\"setFeedByteCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"setRouterFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/factories/MecenateFeedFactory.sol\":\"MecenateFeedFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/factories/MecenateFeedFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../interfaces/IMecenateUsers.sol\\\";\\nimport \\\"../interfaces/IMecenateTreasury.sol\\\";\\nimport \\\"../interfaces/IMecenateVerifier.sol\\\";\\nimport \\\"../modules/FeedViewer.sol\\\";\\n\\ncontract MecenateFeedFactory is Ownable, FeedViewer {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    string public version;\\n\\n    bytes internal feedByteCode;\\n\\n    uint256 public contractCounter;\\n    EnumerableSet.AddressSet internal feeds;\\n    Structures.FactorySettings internal settings;\\n    mapping(uint8 => uint24) internal routerFee;\\n    mapping(bytes32 => EnumerableSet.AddressSet) internal feedStore;\\n    mapping(address => bool) internal createdContracts;\\n\\n    event FeedCreated(address indexed addr);\\n\\n    bool public burnEnabled = false;\\n\\n    constructor(\\n        address _usersModuleContract,\\n        address _treasuryContract,\\n        address _verifierContract,\\n        address _vaultContract\\n    ) {\\n        settings.usersModuleContract = _usersModuleContract;\\n        settings.treasuryContract = _treasuryContract;\\n        settings.verifierContract = _verifierContract;\\n        settings.vaultContract = _vaultContract;\\n    }\\n\\n    function changeVersion(string memory _version) external onlyOwner {\\n        version = _version;\\n    }\\n\\n    function treasuryContract() external view returns (address) {\\n        return settings.treasuryContract;\\n    }\\n\\n    function identityContract() external view returns (address) {\\n        return settings.verifierContract;\\n    }\\n\\n    function daiToken() external view returns (address) {\\n        return settings.daiToken;\\n    }\\n\\n    function wethToken() external view returns (address) {\\n        return settings.wethToken;\\n    }\\n\\n    function museToken() external view returns (address) {\\n        return settings.museToken;\\n    }\\n\\n    function router() external view returns (address) {\\n        return settings.router;\\n    }\\n\\n    function getRouterFee(uint8 tokenId) external view returns (uint24) {\\n        return routerFee[tokenId];\\n    }\\n\\n    function setRouterFee(uint8 tokenId, uint24 fee) external onlyOwner {\\n        routerFee[tokenId] = fee;\\n    }\\n\\n    function setBurnEnabled(bool _burnEnabled) external onlyOwner {\\n        burnEnabled = _burnEnabled;\\n    }\\n\\n    function isFeed(address _feed) external view returns (bool) {\\n        return createdContracts[_feed];\\n    }\\n\\n    function changeMultipleSettings(\\n        address _treasury,\\n        address _vault,\\n        address _usersModule,\\n        address _wethToken,\\n        address _museToken,\\n        address _daiToken,\\n        address _router\\n    ) external onlyOwner {\\n        settings.treasuryContract = _treasury;\\n        settings.vaultContract = _vault;\\n        settings.usersModuleContract = _usersModule;\\n        settings.wethToken = _wethToken;\\n        settings.museToken = _museToken;\\n        settings.daiToken = _daiToken;\\n        settings.router = _router;\\n    }\\n\\n    function setFeedByteCode(bytes memory _byteCode) external onlyOwner {\\n        feedByteCode = _byteCode;\\n    }\\n\\n    function buildFeed(\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce\\n    ) external payable returns (address) {\\n        require(msg.sender == settings.vaultContract, \\\"ONLY_VAULT\\\");\\n        (\\n            bytes memory vaultId,\\n            ,\\n            ,\\n            bytes memory signedMessage\\n        ) = IMecenateVerifier(settings.verifierContract).sismoVerify(\\n                sismoConnectResponse,\\n                _to,\\n                _nonce\\n            );\\n\\n        (address to, bytes32 nonce) = abi.decode(\\n            signedMessage,\\n            (address, bytes32)\\n        );\\n\\n        bytes32 encryptedVaultId = keccak256(vaultId);\\n\\n        bytes memory constructorArguments = abi.encode(\\n            encryptedVaultId,\\n            settings.usersModuleContract,\\n            settings.verifierContract,\\n            settings.vaultContract,\\n            address(this),\\n            version\\n        );\\n\\n        require(_nonce == nonce, \\\"WRONG_NONCE\\\");\\n        require(_to == to, \\\"WRONG_TO\\\");\\n\\n        require(\\n            IMecenateUsers(settings.usersModuleContract).checkifUserExist(\\n                encryptedVaultId\\n            ),\\n            \\\"user does not exist\\\"\\n        );\\n\\n        require(msg.value >= getCreationFee(), \\\"NOT_ENOUGH_FEE\\\");\\n\\n        (bool _result, ) = payable(settings.treasuryContract).call{\\n            value: msg.value\\n        }(\\\"\\\");\\n\\n        require(_result, \\\"CALL_FAILED\\\");\\n\\n        contractCounter++;\\n\\n        address addr;\\n\\n        bytes memory tempByteCode = feedByteCode; // Carico la variabile di storage in una variabile locale\\n\\n        // Concatena il bytecode e gli argomenti del costruttore\\n        bytes memory bytecodeWithConstructor = abi.encodePacked(\\n            tempByteCode,\\n            constructorArguments\\n        );\\n\\n        // Deploy del contratto con gli argomenti del costruttore\\n        assembly {\\n            addr := create(\\n                0,\\n                add(bytecodeWithConstructor, 0x20),\\n                mload(bytecodeWithConstructor)\\n            )\\n            if iszero(extcodesize(addr)) {\\n                revert(0, 0)\\n            }\\n        }\\n\\n        address feed = addr;\\n\\n        feeds.add(address(feed));\\n        feedStore[encryptedVaultId].add(address(feed));\\n        createdContracts[address(feed)] = true;\\n\\n        emit FeedCreated(address(feed));\\n\\n        return address(feed);\\n    }\\n\\n    function getFeeds() external view returns (address[] memory) {\\n        return feeds.values();\\n    }\\n\\n    function getFeedsOwned(\\n        bytes32 vaultId\\n    ) external view returns (address[] memory) {\\n        return feedStore[vaultId].values();\\n    }\\n\\n    function getFeedsInfoOwned(\\n        bytes32 vaultId\\n    ) external view returns (Structures.Feed[] memory) {\\n        return _getFeedsInfo(feedStore[vaultId].values());\\n    }\\n\\n    function getFeedInfo(\\n        address _feed\\n    ) external view returns (Structures.Feed memory) {\\n        return _getFeedInfo(_feed);\\n    }\\n\\n    function getFeedsInfo() external view returns (Structures.Feed[] memory) {\\n        return _getFeedsInfo(feeds.values());\\n    }\\n\\n    function isContractCreated(\\n        address contractAddress\\n    ) external view returns (bool) {\\n        return createdContracts[contractAddress];\\n    }\\n\\n    function getCreationFee() internal view returns (uint256) {\\n        return IMecenateTreasury(settings.treasuryContract).fixedFee();\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xc4eb1ce4e998b14550a410886b7f6501c485c652f92bcc2929073494644fcb42\",\"license\":\"MIT\"},\"contracts/interfaces/IMecenateFeed.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateFeed {\\n    function getTotalStaked() external view returns (uint256);\\n\\n    function postCount() external view returns (uint256);\\n\\n    function acceptPost(\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce,\\n        Structures.Tokens,\\n        uint256 _amount\\n    ) external payable;\\n\\n    function getSellerStake() external view returns (uint256);\\n\\n    function getBuyerStake() external view returns (uint256);\\n\\n    function getPaymentRequested() external view returns (uint256);\\n\\n    function getStakeRequested() external view returns (uint256);\\n\\n    function getStatus() external view returns (Structures.PostStatus status);\\n\\n    function getTokenId() external view returns (Structures.Tokens tokenId);\\n\\n    function owner() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x72384288ffa7088867aaee37c436f980b531f961edc3ca131296e5cd75f19d12\"},\"contracts/interfaces/IMecenateTreasury.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\ninterface IMecenateTreasury {\\n    function globalFee() external view returns (uint256);\\n\\n    function fixedFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xade0e46553c55f99f424d2a5919ae62ab8f2b0829b0713aa539c2bf27850ed27\"},\"contracts/interfaces/IMecenateUsers.sol\":{\"content\":\"pragma solidity 0.8.19;\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateUsers {\\n    function checkifUserExist(bytes32 vaultId) external view returns (bool);\\n\\n    function getUserData(\\n        address user\\n    ) external view returns (Structures.User memory);\\n\\n    function getUserCount() external view returns (uint256);\\n\\n    function getUserAt(uint256 index) external view returns (address);\\n\\n    function getUserVaultIdAt(uint256 index) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xfa7b7f5d2fe5ff243867929f84ea43a4ddc4b397c2fbb0391a90a85c374523fe\"},\"contracts/interfaces/IMecenateVerifier.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\ninterface IMecenateVerifier {\\n    function sismoVerify(\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce\\n    ) external view returns (bytes memory, uint256, uint256, bytes memory);\\n}\\n\",\"keccak256\":\"0xbb8e2129daa782334399978a439719e5e935945ab1e0b0a510abbf2371c7fe30\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\n * @title Structures\\n * @dev This library defines various data structures used in the Mecenate platform.\\n */\\npragma solidity 0.8.19;\\n\\nlibrary Structures {\\n    enum PostStatus {\\n        Waiting,\\n        Proposed,\\n        Accepted,\\n        Submitted,\\n        Finalized,\\n        Punished,\\n        Revealed,\\n        Renounced\\n    }\\n    enum Tokens {\\n        NaN,\\n        MUSE,\\n        DAI\\n    }\\n    enum PostType {\\n        Text,\\n        Image,\\n        Video,\\n        Audio,\\n        File\\n    }\\n    enum PostDuration {\\n        OneDay,\\n        ThreeDays,\\n        OneWeek,\\n        TwoWeeks,\\n        OneMonth\\n    }\\n\\n    struct FeedSettings {\\n        uint256 punishmentRatio;\\n        uint256 postCount;\\n        address usersModuleContract;\\n        address factoryContract;\\n        address verifierContract;\\n        address vaultContract;\\n        address router;\\n        bytes encodedSymKey;\\n        bytes lastMessageForBuyer;\\n        bytes lastMessageForSeller;\\n        string version;\\n    }\\n\\n    struct FactorySettings {\\n        address treasuryContract;\\n        address usersModuleContract;\\n        address verifierContract;\\n        address vaultContract;\\n        address museToken;\\n        address daiToken;\\n        address wethToken;\\n        address router;\\n    }\\n\\n    /**\\n     * @dev Struct representing a post on the Mecenate platform.\\n     */\\n    struct Post {\\n        User creator;\\n        PostData postdata;\\n    }\\n\\n    /**\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\n     */\\n    struct PostData {\\n        PostSettings settings;\\n        PostEscrow escrow;\\n        PostEncryptedData data;\\n    }\\n\\n    /**\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\n     */\\n    struct PostEncryptedData {\\n        bytes encryptedData;\\n        bytes encryptedKey;\\n        bytes decryptedData;\\n    }\\n\\n    /**\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettings {\\n        PostStatus status;\\n        PostType postType;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n        uint256 duration;\\n        Tokens tokenId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the private settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettingPrivate {\\n        bytes vaultIdSeller;\\n        uint256 sellerTwitterId;\\n        uint256 sellerTelegramId;\\n        bytes vaultIdBuyer;\\n        uint256 buyerTwitterId;\\n        uint256 buyerTelegramId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\n     */\\n    struct PostEscrow {\\n        uint256 stake;\\n        uint256 payment;\\n        uint256 punishment;\\n        uint256 penalty;\\n    }\\n\\n    /**\\n     * @dev Struct representing a user on the Mecenate platform.\\n     */\\n    struct User {\\n        bytes32 vaultId;\\n    }\\n\\n    /**\\n     * @dev Struct representing a feed on the Mecenate platform.\\n     */\\n    struct Feed {\\n        address contractAddress;\\n        bytes32 operator;\\n        uint256 sellerStake;\\n        uint256 buyerStake;\\n        uint256 totalStake;\\n        uint256 postCount;\\n        uint256 paymentRequested;\\n        uint256 stakeRequested;\\n        PostStatus status;\\n        Tokens tokenId;\\n    }\\n\\n    /**\\n     * @dev Struct representing a bay request on the Mecenate platform.\\n     */\\n    struct BayRequest {\\n        bytes32 request;\\n        uint256 payment;\\n        uint256 stake;\\n        address postAddress;\\n        bool accepted;\\n        uint256 postCount;\\n        Tokens tokenId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the private settings of a bay request on the Mecenate platform.\\n     */\\n    struct BayRequestPrivate {\\n        bytes vaultIdSeller;\\n        bytes sellerResponse;\\n        bytes vaultIdBuyer;\\n        bytes buyerResponse;\\n        address buyerTo;\\n        bytes32 buyerNonce;\\n    }\\n}\\n\",\"keccak256\":\"0x98e685eac4c2cf3f590a6b0433ff0ae3c31c6a307e8b6f4d6cd6edea02550c4b\"},\"contracts/modules/FeedViewer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../library/Structures.sol\\\";\\nimport \\\"../interfaces/IMecenateFeed.sol\\\";\\n\\ncontract FeedViewer {\\n    function _getFeedInfo(\\n        address feed\\n    ) internal view returns (Structures.Feed memory) {\\n        Structures.Feed memory f;\\n\\n        IMecenateFeed mecenateFeed = IMecenateFeed(feed);\\n\\n        f.contractAddress = feed;\\n        f.operator = mecenateFeed.owner();\\n        f.sellerStake = mecenateFeed.getSellerStake();\\n        f.buyerStake = mecenateFeed.getBuyerStake();\\n        f.totalStake = mecenateFeed.getTotalStaked();\\n        f.postCount = mecenateFeed.postCount();\\n        f.paymentRequested = mecenateFeed.getPaymentRequested();\\n        f.stakeRequested = mecenateFeed.getStakeRequested();\\n        f.status = mecenateFeed.getStatus();\\n        f.tokenId = mecenateFeed.getTokenId();\\n\\n        return f;\\n    }\\n\\n    function _getFeedsInfo(\\n        address[] memory _feeds\\n    ) internal view returns (Structures.Feed[] memory) {\\n        uint256 len = _feeds.length;\\n        Structures.Feed[] memory f = new Structures.Feed[](len);\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            f[i] = _getFeedInfo(_feeds[i]);\\n        }\\n\\n        return f;\\n    }\\n}\\n\",\"keccak256\":\"0x58214c715deafa62fa928870e1aaca2afdc41c4f04c50dc823b692644d47a7e0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080346200010657601f6200245638819003918201601f19168301916001600160401b038311848410176200010b5780849260809460405283398101031262000106576200004d8162000121565b906200005c6020820162000121565b620000786060620000706040850162000121565b930162000121565b6000549360018060a01b03199333858716176000556040519560018060a01b03948580948193823391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a360ff19601154166011551687600754161760075516856006541617600655168360085416176008551690600954161760095561231f9081620001378239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620001065756fe6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c8063067bd3b4146101b657806318da0011146101b1578063237b0d3c146101ac5780634b57b0be146101a757806354600837146101a257806354fd4d501461019d5780635dc96d161461019857806364bb432c1461019357806367031bae1461018e5780636d944e6014610189578063715018a6146101845780637b2c835f1461017f5780637fe955d41461017a5780638da5cb5b14610175578063a6fbd9b014610170578063be22f5461461016b578063ca16721914610166578063cedf3ba214610157578063d223a56414610161578063d570a66d1461015c578063e58fdd0414610157578063e86ef35314610152578063e9318b471461014d578063f2fde38b14610148578063f77800e5146101435763f887ea400361000e57611488565b611454565b611339565b6112c9565b61124e565b611175565b61120e565b6111d5565b610db2565b610d7e565b610bdc565b610b8a565b610b0f565b610ab6565b610a2d565b6109b0565b61085c565b6106f7565b6106d4565b6105d7565b6104b1565b61042c565b6102d5565b6101d9565b346101d45760006003193601126101d4576020600354604051908152f35b600080fd5b346101d45760006003193601126101d457602073ffffffffffffffffffffffffffffffffffffffff60065416604051908152f35b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f601f19910116810190811067ffffffffffffffff82111761025f57604052565b61020d565b67ffffffffffffffff811161025f57601f01601f191660200190565b92919261028c82610264565b9161029a604051938461023c565b8294818452818301116101d4578281602093846000960137010152565b9080601f830112156101d4578160206102d293359101610280565b90565b346101d4576020806003193601126101d45767ffffffffffffffff6004358181116101d4576103089036906004016102b7565b916103116114bc565b825191821161025f5761032e8261032960025461052b565b611552565b80601f83116001146103875750819260009261037c575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c191617600255600080f35b015190503880610345565b90601f198316936103ba60026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90565b926000905b86821061041457505083600195106103dd575b505050811b01600255005b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c191690553880806103d2565b806001859682949686015181550195019301906103bf565b346101d45760006003193601126101d457602073ffffffffffffffffffffffffffffffffffffffff600c5416604051908152f35b6020908160408183019282815285518094520193019160005b828110610487575050505090565b835173ffffffffffffffffffffffffffffffffffffffff1685529381019392810192600101610479565b346101d4576020806003193601126101d457600435600052600f8152604060002090604051908181845491828152019360005281600020916000905b82821061051457610510856105048189038261023c565b60405191829182610460565b0390f35b8354865294850194600193840193909101906104ed565b90600182811c92168015610574575b602083101461054557565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f169161053a565b60005b8381106105915750506000910152565b8181015183820152602001610581565b90601f19601f6020936105bf8151809281875287808801910161057e565b0116010190565b9060206102d29281815201906105a1565b346101d4576000806003193601126106d157604051908060018054916105fc8361052b565b80865292828116908115610689575060011461062f575b610510856106238187038261023c565b604051918291826105c6565b92508083527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b82841061067157505050810160200161062382610510610613565b80546020858701810191909152909301928101610656565b869550610510969350602092506106239491507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001682840152151560051b8201019293610613565b80fd5b346101d45760006003193601126101d457602060ff601154166040519015158152f35b346101d4576020806003193601126101d45767ffffffffffffffff906004358281116101d457366023820112156101d45761073c903690602481600401359101610280565b916107456114bc565b825190811161025f576001916107648261075f855461052b565b6115b3565b80601f83116001146107ba57508192936000926107af575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600383901b1c191690821b179055005b01519050388061077c565b90601f198316946107ed60016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf690565b926000905b8782106108455750508385961061080e575b505050811b019055005b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c19169055388080610804565b8087859682949686015181550195019301906107f2565b346101d45760006003193601126101d457602073ffffffffffffffffffffffffffffffffffffffff60085416604051908152f35b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9060088210156108cc5752565b610890565b9060038210156108cc5752565b805173ffffffffffffffffffffffffffffffffffffffff16825261096591906020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e083015261095661010080830151908401906108bf565b610120809101519101906108d1565b565b6020908160408183019282815285518094520193019160005b82811061098e575050505090565b9091929382610140826109a460019489516108de565b01950193929101610980565b346101d4576020806003193601126101d457600435600052600f81526040600020604051918281835491828152019260005281600020916000905b828210610a1657610510610a0a87610a058189038261023c565b612240565b60405191829182610967565b8354855293840193600193840193909101906109eb565b346101d4576000806003193601126106d157610a476114bc565b8073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b801515036101d457565b346101d45760206003193601126101d457600435610ad381610aac565b610adb6114bc565b60ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00601154169115151617601155600080f35b346101d45760006003193601126101d457604051806004549182815260208091019260046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b916000905b828210610b7357610510856105048189038261023c565b835486529485019460019384019390910190610b5c565b346101d45760006003193601126101d457602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b73ffffffffffffffffffffffffffffffffffffffff8116036101d457565b346101d45760e06003193601126101d457610019600435610bfc81610bbe565b610d3d60243591610c0c83610bbe565b610cfc604435610c1b81610bbe565b60643592610c2884610bbe565b60843591610c3583610bbe565b60a43594610c4286610bbe565b60c43597610c4f89610bbe565b610c576114bc565b73ffffffffffffffffffffffffffffffffffffffff92838092817fffffffffffffffffffffffff0000000000000000000000000000000000000000971687600654161760065516856009541617600955168360075416176007551690600c541617600c5573ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000600a541617600a55565b73ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000600b541617600b55565b73ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000600d541617600d55565b346101d45760006003193601126101d457602073ffffffffffffffffffffffffffffffffffffffff600b5416604051908152f35b60606003193601126101d45760043567ffffffffffffffff81116101d457610dde9036906004016102b7565b60243590610deb82610bbe565b60443590610e0e60095473ffffffffffffffffffffffffffffffffffffffff1690565b9173ffffffffffffffffffffffffffffffffffffffff92610e328482163314611609565b84610e5260085473ffffffffffffffffffffffffffffffffffffffff1690565b92604051947f7276069d0000000000000000000000000000000000000000000000000000000086528580610e8e8460009b8c95600485016116fe565b03818988165afa9182156111435787958893611148575b50868060209485808251830101910190610ebe91611742565b9886815191012098600754610ee69073ffffffffffffffffffffffffffffffffffffffff1690565b978a6040519a8b9230918c8c860194610efe95611761565b0395601f19968781018b52610f13908b61023c565b14610f1d90611871565b16911614610f2a906118d6565b8160405180947f38aad32c0000000000000000000000000000000000000000000000000000000082528189818a6004820190610f6890602083019252565b0392165afa91821561114357610f8c61103593611023958a91611116575b50611950565b610f9f610f97611d94565b3410156119b5565b610ff58880808034610fe5610fcc610fcc60065473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b5af1610fef611a1a565b50611a4a565b611008611003600354611aaf565b600355565b611029611013611b0b565b9560405195869384018098611be5565b90611be5565b0390810183528261023c565b519084f091823b156111125791610510916110928261108d7fb658664a46408e6670a38ec7ea8b7614c9e2916184dff2fad99d3a7a3491ca7d979682169361107c85611c4b565b50600052600f602052604060002090565b611bfc565b506110eb6110c08373ffffffffffffffffffffffffffffffffffffffff166000526010602052604060002090565b60017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055565b60405194848695a273ffffffffffffffffffffffffffffffffffffffff1682526020820190565b8380fd5b6111369150833d851161113c575b61112e818361023c565b81019061193b565b38610f86565b503d611124565b611736565b9092506111689195503d8089833e611160818361023c565b8101906116b0565b9692915050949138610ea5565b346101d45760206003193601126101d45773ffffffffffffffffffffffffffffffffffffffff6004356111a781610bbe565b166000526010602052602060ff604060002054166040519015158152f35b6004359060ff821682036101d457565b346101d45760206003193601126101d45760ff6111f06111c5565b16600052600e602052602062ffffff60406000205416604051908152f35b346101d45760206003193601126101d45761014061123f60043561123181610bbe565b611239611d27565b50611e5f565b61124c60405180926108de565bf35b346101d45760006003193601126101d4576040516004805480835260009182526020808401927f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b92915b8282106112b257610510610a0a87610a058189038261023c565b835485529384019360019384019390910190611298565b346101d45760406003193601126101d4576112e26111c5565b6024359062ffffff82168092036101d45760ff906112fe6114bc565b16600052600e6020526040600020907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000825416179055600080f35b346101d45760206003193601126101d45760043561135681610bbe565b61135e6114bc565b73ffffffffffffffffffffffffffffffffffffffff80911680156113d0576000918254827fffffffffffffffffffffffff00000000000000000000000000000000000000008216178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b346101d45760006003193601126101d457602073ffffffffffffffffffffffffffffffffffffffff600a5416604051908152f35b346101d45760006003193601126101d457602073ffffffffffffffffffffffffffffffffffffffff600d5416604051908152f35b73ffffffffffffffffffffffffffffffffffffffff6000541633036114dd57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b818110611546575050565b6000815560010161153b565b90601f821161155f575050565b6109659160026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace906020601f840160051c830193106115a9575b601f0160051c019061153b565b909150819061159c565b90601f82116115c0575050565b6109659160016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6906020601f840160051c830193106115a957601f0160051c019061153b565b1561161057565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4f4e4c595f5641554c54000000000000000000000000000000000000000000006044820152fd5b81601f820112156101d457805161168481610264565b92611692604051948561023c565b818452602082840101116101d4576102d2916020808501910161057e565b916080838303126101d45782519067ffffffffffffffff918281116101d457836116db91860161166e565b9360208101519360408201519360608301519081116101d4576102d2920161166e565b73ffffffffffffffffffffffffffffffffffffffff61172b604093969594966060845260608401906105a1565b951660208201520152565b6040513d6000823e3d90fd5b91908260409103126101d4576020825161175b81610bbe565b92015190565b9491939290855273ffffffffffffffffffffffffffffffffffffffff9283809281602097168789015216604087015216606085015216608083015260c060a08301526000916001918254926117b58461052b565b938460c0850152818116908160001461182f57506001146117d8575b5050505090565b60008181529394507fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b85851061181b5750505060e092500101388080806117d1565b805485850160e00152938201938101611802565b91505060e094507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091509291921683830152151560051b0101388080806117d1565b1561187857565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f57524f4e475f4e4f4e43450000000000000000000000000000000000000000006044820152fd5b156118dd57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f57524f4e475f544f0000000000000000000000000000000000000000000000006044820152fd5b908160209103126101d457516102d281610aac565b1561195757565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f7573657220646f6573206e6f74206578697374000000000000000000000000006044820152fd5b156119bc57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f454e4f5547485f4645450000000000000000000000000000000000006044820152fd5b3d15611a45573d90611a2b82610264565b91611a39604051938461023c565b82523d6000602084013e565b606090565b15611a5157565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f43414c4c5f4641494c45440000000000000000000000000000000000000000006044820152fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114611adc5760010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6040519060008260025491611b1f8361052b565b80835292600190818116908115611ba55750600114611b46575b506109659250038361023c565b6002600090815291507f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace5b848310611b8a5750610965935050810160200138611b39565b81935090816020925483858a01015201910190918592611b71565b602093506109659592507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b82010138611b39565b90611bf86020928281519485920161057e565b0190565b73ffffffffffffffffffffffffffffffffffffffff6102d2921690611ccc565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b80600052600560205260406000205415600014611cc6576004546801000000000000000081101561025f576001810180600455811015611cc15781907f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0155600454906000526005602052604060002055600190565b611c1c565b50600090565b60008281526001820160208190526040822054611d20578254926801000000000000000084101561025f5760018401808255841015611cc15784604094828552602085200155549382526020522055600190565b5091505090565b60405190610140820182811067ffffffffffffffff82111761025f57604052816101206000918281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e0820152826101008201520152565b908160209103126101d4575190565b6004602073ffffffffffffffffffffffffffffffffffffffff60065416604051928380927f91792d5b0000000000000000000000000000000000000000000000000000000082525afa90811561114357600091611def575090565b6102d2915060203d8111611e10575b611e08818361023c565b810190611d85565b503d611dfe565b908160209103126101d4575160088110156101d45790565b60088210156108cc5752565b908160209103126101d4575160038110156101d45790565b60038210156108cc5752565b611e67611d27565b50611e70611d27565b73ffffffffffffffffffffffffffffffffffffffff90911680825260408051907f8da5cb5b00000000000000000000000000000000000000000000000000000000825260209260049284818581855afa908115611143576000916121f7575b508486015281517f5c63ed6900000000000000000000000000000000000000000000000000000000815284818581855afa908115611143576000916121da575b508286015281517f4c38d87700000000000000000000000000000000000000000000000000000000815284818581855afa908115611143576000916121bd575b50606086015281517f0917e77600000000000000000000000000000000000000000000000000000000815284818581855afa908115611143576000916121a0575b50608086015281517f17906c2e00000000000000000000000000000000000000000000000000000000815284818581855afa90811561114357600091612183575b5060a086015281517fd24e0c8700000000000000000000000000000000000000000000000000000000815284818581855afa90811561114357600091612166575b5060c086015281517ffaeb5e1700000000000000000000000000000000000000000000000000000000815284818581855afa90811561114357600091612149575b5060e08601528151917f4e69d56000000000000000000000000000000000000000000000000000000000835284838581855afa9283156111435785936120a69160009161211c575b506101008801611e2f565b51928380927f010a38f50000000000000000000000000000000000000000000000000000000082525afa908115611143576102d2926000926120ef575b50506101208301611e53565b61210e9250803d10612115575b612106818361023c565b810190611e3b565b38806120e3565b503d6120fc565b61213c9150853d8711612142575b612134818361023c565b810190611e17565b3861209b565b503d61212a565b6121609150853d8711611e1057611e08818361023c565b38612053565b61217d9150853d8711611e1057611e08818361023c565b38612012565b61219a9150853d8711611e1057611e08818361023c565b38611fd1565b6121b79150853d8711611e1057611e08818361023c565b38611f90565b6121d49150853d8711611e1057611e08818361023c565b38611f4f565b6121f19150853d8711611e1057611e08818361023c565b38611f0f565b61220e9150853d8711611e1057611e08818361023c565b38611ecf565b67ffffffffffffffff811161025f5760051b60200190565b8051821015611cc15760209160051b010190565b805161224b81612214565b91612259604051938461023c565b818352601f1961226883612214565b0160005b8181106122d257505060005b8281106122855750505090565b806122b273ffffffffffffffffffffffffffffffffffffffff6122ab6122cd948661222c565b5116611e5f565b6122bc828761222c565b526122c7818661222c565b50611aaf565b612278565b6020906122dd611d27565b8282880101520161226c56fea2646970667358221220299c28d264b56e9f01c2d4eeafde67adf75dba7242cb6d45357bffe81ab511fe64736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c8063067bd3b4146101b657806318da0011146101b1578063237b0d3c146101ac5780634b57b0be146101a757806354600837146101a257806354fd4d501461019d5780635dc96d161461019857806364bb432c1461019357806367031bae1461018e5780636d944e6014610189578063715018a6146101845780637b2c835f1461017f5780637fe955d41461017a5780638da5cb5b14610175578063a6fbd9b014610170578063be22f5461461016b578063ca16721914610166578063cedf3ba214610157578063d223a56414610161578063d570a66d1461015c578063e58fdd0414610157578063e86ef35314610152578063e9318b471461014d578063f2fde38b14610148578063f77800e5146101435763f887ea400361000e57611488565b611454565b611339565b6112c9565b61124e565b611175565b61120e565b6111d5565b610db2565b610d7e565b610bdc565b610b8a565b610b0f565b610ab6565b610a2d565b6109b0565b61085c565b6106f7565b6106d4565b6105d7565b6104b1565b61042c565b6102d5565b6101d9565b346101d45760006003193601126101d4576020600354604051908152f35b600080fd5b346101d45760006003193601126101d457602073ffffffffffffffffffffffffffffffffffffffff60065416604051908152f35b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f601f19910116810190811067ffffffffffffffff82111761025f57604052565b61020d565b67ffffffffffffffff811161025f57601f01601f191660200190565b92919261028c82610264565b9161029a604051938461023c565b8294818452818301116101d4578281602093846000960137010152565b9080601f830112156101d4578160206102d293359101610280565b90565b346101d4576020806003193601126101d45767ffffffffffffffff6004358181116101d4576103089036906004016102b7565b916103116114bc565b825191821161025f5761032e8261032960025461052b565b611552565b80601f83116001146103875750819260009261037c575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c191617600255600080f35b015190503880610345565b90601f198316936103ba60026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90565b926000905b86821061041457505083600195106103dd575b505050811b01600255005b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c191690553880806103d2565b806001859682949686015181550195019301906103bf565b346101d45760006003193601126101d457602073ffffffffffffffffffffffffffffffffffffffff600c5416604051908152f35b6020908160408183019282815285518094520193019160005b828110610487575050505090565b835173ffffffffffffffffffffffffffffffffffffffff1685529381019392810192600101610479565b346101d4576020806003193601126101d457600435600052600f8152604060002090604051908181845491828152019360005281600020916000905b82821061051457610510856105048189038261023c565b60405191829182610460565b0390f35b8354865294850194600193840193909101906104ed565b90600182811c92168015610574575b602083101461054557565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f169161053a565b60005b8381106105915750506000910152565b8181015183820152602001610581565b90601f19601f6020936105bf8151809281875287808801910161057e565b0116010190565b9060206102d29281815201906105a1565b346101d4576000806003193601126106d157604051908060018054916105fc8361052b565b80865292828116908115610689575060011461062f575b610510856106238187038261023c565b604051918291826105c6565b92508083527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b82841061067157505050810160200161062382610510610613565b80546020858701810191909152909301928101610656565b869550610510969350602092506106239491507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001682840152151560051b8201019293610613565b80fd5b346101d45760006003193601126101d457602060ff601154166040519015158152f35b346101d4576020806003193601126101d45767ffffffffffffffff906004358281116101d457366023820112156101d45761073c903690602481600401359101610280565b916107456114bc565b825190811161025f576001916107648261075f855461052b565b6115b3565b80601f83116001146107ba57508192936000926107af575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600383901b1c191690821b179055005b01519050388061077c565b90601f198316946107ed60016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf690565b926000905b8782106108455750508385961061080e575b505050811b019055005b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c19169055388080610804565b8087859682949686015181550195019301906107f2565b346101d45760006003193601126101d457602073ffffffffffffffffffffffffffffffffffffffff60085416604051908152f35b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9060088210156108cc5752565b610890565b9060038210156108cc5752565b805173ffffffffffffffffffffffffffffffffffffffff16825261096591906020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e083015261095661010080830151908401906108bf565b610120809101519101906108d1565b565b6020908160408183019282815285518094520193019160005b82811061098e575050505090565b9091929382610140826109a460019489516108de565b01950193929101610980565b346101d4576020806003193601126101d457600435600052600f81526040600020604051918281835491828152019260005281600020916000905b828210610a1657610510610a0a87610a058189038261023c565b612240565b60405191829182610967565b8354855293840193600193840193909101906109eb565b346101d4576000806003193601126106d157610a476114bc565b8073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b801515036101d457565b346101d45760206003193601126101d457600435610ad381610aac565b610adb6114bc565b60ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00601154169115151617601155600080f35b346101d45760006003193601126101d457604051806004549182815260208091019260046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b916000905b828210610b7357610510856105048189038261023c565b835486529485019460019384019390910190610b5c565b346101d45760006003193601126101d457602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b73ffffffffffffffffffffffffffffffffffffffff8116036101d457565b346101d45760e06003193601126101d457610019600435610bfc81610bbe565b610d3d60243591610c0c83610bbe565b610cfc604435610c1b81610bbe565b60643592610c2884610bbe565b60843591610c3583610bbe565b60a43594610c4286610bbe565b60c43597610c4f89610bbe565b610c576114bc565b73ffffffffffffffffffffffffffffffffffffffff92838092817fffffffffffffffffffffffff0000000000000000000000000000000000000000971687600654161760065516856009541617600955168360075416176007551690600c541617600c5573ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000600a541617600a55565b73ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000600b541617600b55565b73ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000600d541617600d55565b346101d45760006003193601126101d457602073ffffffffffffffffffffffffffffffffffffffff600b5416604051908152f35b60606003193601126101d45760043567ffffffffffffffff81116101d457610dde9036906004016102b7565b60243590610deb82610bbe565b60443590610e0e60095473ffffffffffffffffffffffffffffffffffffffff1690565b9173ffffffffffffffffffffffffffffffffffffffff92610e328482163314611609565b84610e5260085473ffffffffffffffffffffffffffffffffffffffff1690565b92604051947f7276069d0000000000000000000000000000000000000000000000000000000086528580610e8e8460009b8c95600485016116fe565b03818988165afa9182156111435787958893611148575b50868060209485808251830101910190610ebe91611742565b9886815191012098600754610ee69073ffffffffffffffffffffffffffffffffffffffff1690565b978a6040519a8b9230918c8c860194610efe95611761565b0395601f19968781018b52610f13908b61023c565b14610f1d90611871565b16911614610f2a906118d6565b8160405180947f38aad32c0000000000000000000000000000000000000000000000000000000082528189818a6004820190610f6890602083019252565b0392165afa91821561114357610f8c61103593611023958a91611116575b50611950565b610f9f610f97611d94565b3410156119b5565b610ff58880808034610fe5610fcc610fcc60065473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b5af1610fef611a1a565b50611a4a565b611008611003600354611aaf565b600355565b611029611013611b0b565b9560405195869384018098611be5565b90611be5565b0390810183528261023c565b519084f091823b156111125791610510916110928261108d7fb658664a46408e6670a38ec7ea8b7614c9e2916184dff2fad99d3a7a3491ca7d979682169361107c85611c4b565b50600052600f602052604060002090565b611bfc565b506110eb6110c08373ffffffffffffffffffffffffffffffffffffffff166000526010602052604060002090565b60017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055565b60405194848695a273ffffffffffffffffffffffffffffffffffffffff1682526020820190565b8380fd5b6111369150833d851161113c575b61112e818361023c565b81019061193b565b38610f86565b503d611124565b611736565b9092506111689195503d8089833e611160818361023c565b8101906116b0565b9692915050949138610ea5565b346101d45760206003193601126101d45773ffffffffffffffffffffffffffffffffffffffff6004356111a781610bbe565b166000526010602052602060ff604060002054166040519015158152f35b6004359060ff821682036101d457565b346101d45760206003193601126101d45760ff6111f06111c5565b16600052600e602052602062ffffff60406000205416604051908152f35b346101d45760206003193601126101d45761014061123f60043561123181610bbe565b611239611d27565b50611e5f565b61124c60405180926108de565bf35b346101d45760006003193601126101d4576040516004805480835260009182526020808401927f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b92915b8282106112b257610510610a0a87610a058189038261023c565b835485529384019360019384019390910190611298565b346101d45760406003193601126101d4576112e26111c5565b6024359062ffffff82168092036101d45760ff906112fe6114bc565b16600052600e6020526040600020907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000825416179055600080f35b346101d45760206003193601126101d45760043561135681610bbe565b61135e6114bc565b73ffffffffffffffffffffffffffffffffffffffff80911680156113d0576000918254827fffffffffffffffffffffffff00000000000000000000000000000000000000008216178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b346101d45760006003193601126101d457602073ffffffffffffffffffffffffffffffffffffffff600a5416604051908152f35b346101d45760006003193601126101d457602073ffffffffffffffffffffffffffffffffffffffff600d5416604051908152f35b73ffffffffffffffffffffffffffffffffffffffff6000541633036114dd57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b818110611546575050565b6000815560010161153b565b90601f821161155f575050565b6109659160026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace906020601f840160051c830193106115a9575b601f0160051c019061153b565b909150819061159c565b90601f82116115c0575050565b6109659160016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6906020601f840160051c830193106115a957601f0160051c019061153b565b1561161057565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f4f4e4c595f5641554c54000000000000000000000000000000000000000000006044820152fd5b81601f820112156101d457805161168481610264565b92611692604051948561023c565b818452602082840101116101d4576102d2916020808501910161057e565b916080838303126101d45782519067ffffffffffffffff918281116101d457836116db91860161166e565b9360208101519360408201519360608301519081116101d4576102d2920161166e565b73ffffffffffffffffffffffffffffffffffffffff61172b604093969594966060845260608401906105a1565b951660208201520152565b6040513d6000823e3d90fd5b91908260409103126101d4576020825161175b81610bbe565b92015190565b9491939290855273ffffffffffffffffffffffffffffffffffffffff9283809281602097168789015216604087015216606085015216608083015260c060a08301526000916001918254926117b58461052b565b938460c0850152818116908160001461182f57506001146117d8575b5050505090565b60008181529394507fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b85851061181b5750505060e092500101388080806117d1565b805485850160e00152938201938101611802565b91505060e094507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091509291921683830152151560051b0101388080806117d1565b1561187857565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f57524f4e475f4e4f4e43450000000000000000000000000000000000000000006044820152fd5b156118dd57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f57524f4e475f544f0000000000000000000000000000000000000000000000006044820152fd5b908160209103126101d457516102d281610aac565b1561195757565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f7573657220646f6573206e6f74206578697374000000000000000000000000006044820152fd5b156119bc57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f454e4f5547485f4645450000000000000000000000000000000000006044820152fd5b3d15611a45573d90611a2b82610264565b91611a39604051938461023c565b82523d6000602084013e565b606090565b15611a5157565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f43414c4c5f4641494c45440000000000000000000000000000000000000000006044820152fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114611adc5760010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6040519060008260025491611b1f8361052b565b80835292600190818116908115611ba55750600114611b46575b506109659250038361023c565b6002600090815291507f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace5b848310611b8a5750610965935050810160200138611b39565b81935090816020925483858a01015201910190918592611b71565b602093506109659592507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b82010138611b39565b90611bf86020928281519485920161057e565b0190565b73ffffffffffffffffffffffffffffffffffffffff6102d2921690611ccc565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b80600052600560205260406000205415600014611cc6576004546801000000000000000081101561025f576001810180600455811015611cc15781907f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0155600454906000526005602052604060002055600190565b611c1c565b50600090565b60008281526001820160208190526040822054611d20578254926801000000000000000084101561025f5760018401808255841015611cc15784604094828552602085200155549382526020522055600190565b5091505090565b60405190610140820182811067ffffffffffffffff82111761025f57604052816101206000918281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e0820152826101008201520152565b908160209103126101d4575190565b6004602073ffffffffffffffffffffffffffffffffffffffff60065416604051928380927f91792d5b0000000000000000000000000000000000000000000000000000000082525afa90811561114357600091611def575090565b6102d2915060203d8111611e10575b611e08818361023c565b810190611d85565b503d611dfe565b908160209103126101d4575160088110156101d45790565b60088210156108cc5752565b908160209103126101d4575160038110156101d45790565b60038210156108cc5752565b611e67611d27565b50611e70611d27565b73ffffffffffffffffffffffffffffffffffffffff90911680825260408051907f8da5cb5b00000000000000000000000000000000000000000000000000000000825260209260049284818581855afa908115611143576000916121f7575b508486015281517f5c63ed6900000000000000000000000000000000000000000000000000000000815284818581855afa908115611143576000916121da575b508286015281517f4c38d87700000000000000000000000000000000000000000000000000000000815284818581855afa908115611143576000916121bd575b50606086015281517f0917e77600000000000000000000000000000000000000000000000000000000815284818581855afa908115611143576000916121a0575b50608086015281517f17906c2e00000000000000000000000000000000000000000000000000000000815284818581855afa90811561114357600091612183575b5060a086015281517fd24e0c8700000000000000000000000000000000000000000000000000000000815284818581855afa90811561114357600091612166575b5060c086015281517ffaeb5e1700000000000000000000000000000000000000000000000000000000815284818581855afa90811561114357600091612149575b5060e08601528151917f4e69d56000000000000000000000000000000000000000000000000000000000835284838581855afa9283156111435785936120a69160009161211c575b506101008801611e2f565b51928380927f010a38f50000000000000000000000000000000000000000000000000000000082525afa908115611143576102d2926000926120ef575b50506101208301611e53565b61210e9250803d10612115575b612106818361023c565b810190611e3b565b38806120e3565b503d6120fc565b61213c9150853d8711612142575b612134818361023c565b810190611e17565b3861209b565b503d61212a565b6121609150853d8711611e1057611e08818361023c565b38612053565b61217d9150853d8711611e1057611e08818361023c565b38612012565b61219a9150853d8711611e1057611e08818361023c565b38611fd1565b6121b79150853d8711611e1057611e08818361023c565b38611f90565b6121d49150853d8711611e1057611e08818361023c565b38611f4f565b6121f19150853d8711611e1057611e08818361023c565b38611f0f565b61220e9150853d8711611e1057611e08818361023c565b38611ecf565b67ffffffffffffffff811161025f5760051b60200190565b8051821015611cc15760209160051b010190565b805161224b81612214565b91612259604051938461023c565b818352601f1961226883612214565b0160005b8181106122d257505060005b8281106122855750505090565b806122b273ffffffffffffffffffffffffffffffffffffffff6122ab6122cd948661222c565b5116611e5f565b6122bc828761222c565b526122c7818661222c565b50611aaf565b612278565b6020906122dd611d27565b8282880101520161226c56fea2646970667358221220299c28d264b56e9f01c2d4eeafde67adf75dba7242cb6d45357bffe81ab511fe64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6363,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "version",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 6365,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "feedByteCode",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes_storage"
      },
      {
        "astId": 6367,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "contractCounter",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 6370,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "feeds",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(AddressSet)4021_storage"
      },
      {
        "astId": 6373,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "settings",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(FactorySettings)8294_storage"
      },
      {
        "astId": 6377,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "routerFee",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint8,t_uint24)"
      },
      {
        "astId": 6382,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "feedStore",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)4021_storage)"
      },
      {
        "astId": 6386,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "createdContracts",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6393,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "burnEnabled",
        "offset": 0,
        "slot": "17",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)4021_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)4021_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint8,t_uint24)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint24)",
        "numberOfBytes": "32",
        "value": "t_uint24"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)4021_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 4020,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3706_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(FactorySettings)8294_storage": {
        "encoding": "inplace",
        "label": "struct Structures.FactorySettings",
        "members": [
          {
            "astId": 8279,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "treasuryContract",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8281,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "usersModuleContract",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 8283,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "verifierContract",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 8285,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "vaultContract",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 8287,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "museToken",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 8289,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "daiToken",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 8291,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "wethToken",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 8293,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "router",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Set)3706_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3701,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3705,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}