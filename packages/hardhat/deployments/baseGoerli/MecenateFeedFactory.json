{
  "address": "0x604346aC71597A9F2d3906A1708bcA50Cd66d275",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usersModuleContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasuryContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_verifierContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "FeedCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "sismoConnectResponse",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_nonce",
          "type": "bytes32"
        }
      ],
      "name": "buildFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usersModule",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wethToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_museToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_daiToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "changeMultipleSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_version",
          "type": "string"
        }
      ],
      "name": "changeVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daiToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feed",
          "type": "address"
        }
      ],
      "name": "getFeedInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "operator",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "sellerStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyerStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "postCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "paymentRequested",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeRequested",
              "type": "uint256"
            },
            {
              "internalType": "enum Structures.PostStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "enum Structures.Tokens",
              "name": "tokenId",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "version",
              "type": "string"
            }
          ],
          "internalType": "struct Structures.Feed",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeds",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeedsInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "operator",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "sellerStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyerStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "postCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "paymentRequested",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeRequested",
              "type": "uint256"
            },
            {
              "internalType": "enum Structures.PostStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "enum Structures.Tokens",
              "name": "tokenId",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "version",
              "type": "string"
            }
          ],
          "internalType": "struct Structures.Feed[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "vaultId",
          "type": "bytes32"
        }
      ],
      "name": "getFeedsInfoOwned",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "operator",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "sellerStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyerStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "postCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "paymentRequested",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeRequested",
              "type": "uint256"
            },
            {
              "internalType": "enum Structures.PostStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "enum Structures.Tokens",
              "name": "tokenId",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "version",
              "type": "string"
            }
          ],
          "internalType": "struct Structures.Feed[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "vaultId",
          "type": "bytes32"
        }
      ],
      "name": "getFeedsOwned",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "tokenId",
          "type": "uint8"
        }
      ],
      "name": "getRouterFee",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "identityContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "isContractCreated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feed",
          "type": "address"
        }
      ],
      "name": "isFeed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "museToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_burnEnabled",
          "type": "bool"
        }
      ],
      "name": "setBurnEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_byteCode",
          "type": "bytes"
        }
      ],
      "name": "setFeedByteCode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "tokenId",
          "type": "uint8"
        },
        {
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        }
      ],
      "name": "setRouterFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wethToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x4a09648e6c4c4a3b4049c3f9aac80108611b0e588c1d29aefc1636589a765461",
  "receipt": {
    "to": null,
    "from": "0x8aA5F726d9F868a21a8bd748E2f1E43bA31eb670",
    "contractAddress": "0x604346aC71597A9F2d3906A1708bcA50Cd66d275",
    "transactionIndex": 3,
    "gasUsed": "1831837",
    "logsBloom": "0x
    "blockHash": "0x91cc824de90cddf911a85460938fa1fec2c50236618bd53c0c1bfbdaa9e19b21",
    "transactionHash": "0x4a09648e6c4c4a3b4049c3f9aac80108611b0e588c1d29aefc1636589a765461",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 10791854,
        "transactionHash": "0x4a09648e6c4c4a3b4049c3f9aac80108611b0e588c1d29aefc1636589a765461",
        "address": "0x604346aC71597A9F2d3906A1708bcA50Cd66d275",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008aa5f726d9f868a21a8bd748e2f1e43ba31eb670"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x91cc824de90cddf911a85460938fa1fec2c50236618bd53c0c1bfbdaa9e19b21"
      }
    ],
    "blockNumber": 10791854,
    "cumulativeGasUsed": "1934543",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x805E6e2887C62B86aD3B667F68DC6c0EFa9A91d4",
    "0x1a05842Aa1750C136D43545CB7ab94cC96F8d0b2",
    "0x8CFb40101Fbd1a04b8F460CC5d419E94eFe0c74D",
    "0x0000000000000000000000000000000000000000"
  ],
  "numDeployments": 9,
  "solcInputHash": "8c9b0fec0ae76d41bc7eda99117fd16f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usersModuleContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_verifierContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"FeedCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"buildFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usersModule\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_museToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_daiToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"changeMultipleSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"}],\"name\":\"changeVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feed\",\"type\":\"address\"}],\"name\":\"getFeedInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"operator\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sellerStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentRequested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeRequested\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"internalType\":\"struct Structures.Feed\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeds\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeedsInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"operator\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sellerStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentRequested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeRequested\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"internalType\":\"struct Structures.Feed[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"name\":\"getFeedsInfoOwned\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"operator\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sellerStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentRequested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeRequested\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"internalType\":\"struct Structures.Feed[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"name\":\"getFeedsOwned\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"name\":\"getRouterFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identityContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"isContractCreated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feed\",\"type\":\"address\"}],\"name\":\"isFeed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"museToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_burnEnabled\",\"type\":\"bool\"}],\"name\":\"setBurnEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_byteCode\",\"type\":\"bytes\"}],\"name\":\"setFeedByteCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"setRouterFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/factories/MecenateFeedFactory.sol\":\"MecenateFeedFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/factories/MecenateFeedFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../interfaces/IMecenateUsers.sol\\\";\\nimport \\\"../interfaces/IMecenateTreasury.sol\\\";\\nimport \\\"../interfaces/IMecenateVerifier.sol\\\";\\nimport \\\"../modules/FeedViewer.sol\\\";\\n\\ncontract MecenateFeedFactory is Ownable, FeedViewer {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    string public version;\\n\\n    bytes internal feedByteCode;\\n\\n    uint256 public contractCounter;\\n    EnumerableSet.AddressSet internal feeds;\\n    Structures.FactorySettings internal settings;\\n    mapping(uint8 => uint24) internal routerFee;\\n    mapping(bytes32 => EnumerableSet.AddressSet) internal feedStore;\\n    mapping(address => bool) internal createdContracts;\\n\\n    event FeedCreated(address indexed addr);\\n\\n    bool public burnEnabled = false;\\n\\n    constructor(\\n        address _usersModuleContract,\\n        address _treasuryContract,\\n        address _verifierContract,\\n        address _vaultContract\\n    ) {\\n        settings.usersModuleContract = _usersModuleContract;\\n        settings.treasuryContract = _treasuryContract;\\n        settings.verifierContract = _verifierContract;\\n        settings.vaultContract = _vaultContract;\\n    }\\n\\n    function changeVersion(string memory _version) external onlyOwner {\\n        version = _version;\\n    }\\n\\n    function treasuryContract() external view returns (address) {\\n        return settings.treasuryContract;\\n    }\\n\\n    function identityContract() external view returns (address) {\\n        return settings.verifierContract;\\n    }\\n\\n    function daiToken() external view returns (address) {\\n        return settings.daiToken;\\n    }\\n\\n    function wethToken() external view returns (address) {\\n        return settings.wethToken;\\n    }\\n\\n    function museToken() external view returns (address) {\\n        return settings.museToken;\\n    }\\n\\n    function router() external view returns (address) {\\n        return settings.router;\\n    }\\n\\n    function getRouterFee(uint8 tokenId) external view returns (uint24) {\\n        return routerFee[tokenId];\\n    }\\n\\n    function setRouterFee(uint8 tokenId, uint24 fee) external onlyOwner {\\n        routerFee[tokenId] = fee;\\n    }\\n\\n    function setBurnEnabled(bool _burnEnabled) external onlyOwner {\\n        burnEnabled = _burnEnabled;\\n    }\\n\\n    function isFeed(address _feed) external view returns (bool) {\\n        return createdContracts[_feed];\\n    }\\n\\n    function changeMultipleSettings(\\n        address _treasury,\\n        address _vault,\\n        address _usersModule,\\n        address _wethToken,\\n        address _museToken,\\n        address _daiToken,\\n        address _router\\n    ) external onlyOwner {\\n        settings.treasuryContract = _treasury;\\n        settings.vaultContract = _vault;\\n        settings.usersModuleContract = _usersModule;\\n        settings.wethToken = _wethToken;\\n        settings.museToken = _museToken;\\n        settings.daiToken = _daiToken;\\n        settings.router = _router;\\n    }\\n\\n    function setFeedByteCode(bytes memory _byteCode) external onlyOwner {\\n        feedByteCode = _byteCode;\\n        // add version incremental to the current string\\n        version = string(abi.encodePacked(\\\"v2.0.1\\\"));\\n    }\\n\\n    function buildFeed(\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce\\n    ) external payable returns (address) {\\n        require(msg.sender == settings.vaultContract, \\\"ONLY_VAULT\\\");\\n        (\\n            bytes memory vaultId,\\n            ,\\n            ,\\n            bytes memory signedMessage\\n        ) = IMecenateVerifier(settings.verifierContract).sismoVerify(\\n                sismoConnectResponse,\\n                _to,\\n                _nonce\\n            );\\n\\n        (address to, bytes32 nonce) = abi.decode(\\n            signedMessage,\\n            (address, bytes32)\\n        );\\n\\n        bytes32 encryptedVaultId = keccak256(vaultId);\\n\\n        bytes memory constructorArguments = abi.encode(\\n            encryptedVaultId,\\n            settings.usersModuleContract,\\n            settings.verifierContract,\\n            settings.vaultContract,\\n            address(this),\\n            version\\n        );\\n\\n        require(_nonce == nonce, \\\"WRONG_NONCE\\\");\\n        require(_to == to, \\\"WRONG_TO\\\");\\n\\n        require(\\n            IMecenateUsers(settings.usersModuleContract).checkifUserExist(\\n                encryptedVaultId\\n            ),\\n            \\\"user does not exist\\\"\\n        );\\n\\n        require(msg.value >= getCreationFee(), \\\"NOT_ENOUGH_FEE\\\");\\n\\n        (bool _result, ) = payable(settings.treasuryContract).call{\\n            value: msg.value\\n        }(\\\"\\\");\\n\\n        require(_result, \\\"CALL_FAILED\\\");\\n\\n        contractCounter++;\\n\\n        address addr;\\n\\n        bytes memory tempByteCode = feedByteCode; // Carico la variabile di storage in una variabile locale\\n\\n        // Concatena il bytecode e gli argomenti del costruttore\\n        bytes memory bytecodeWithConstructor = abi.encodePacked(\\n            tempByteCode,\\n            constructorArguments\\n        );\\n\\n        // Deploy del contratto con gli argomenti del costruttore\\n        assembly {\\n            addr := create(\\n                0,\\n                add(bytecodeWithConstructor, 0x20),\\n                mload(bytecodeWithConstructor)\\n            )\\n            if iszero(extcodesize(addr)) {\\n                revert(0, 0)\\n            }\\n        }\\n\\n        address feed = addr;\\n\\n        feeds.add(address(feed));\\n        feedStore[encryptedVaultId].add(address(feed));\\n        createdContracts[address(feed)] = true;\\n\\n        emit FeedCreated(address(feed));\\n\\n        return address(feed);\\n    }\\n\\n    function getFeeds() external view returns (address[] memory) {\\n        return feeds.values();\\n    }\\n\\n    function getFeedsOwned(\\n        bytes32 vaultId\\n    ) external view returns (address[] memory) {\\n        return feedStore[vaultId].values();\\n    }\\n\\n    function getFeedsInfoOwned(\\n        bytes32 vaultId\\n    ) external view returns (Structures.Feed[] memory) {\\n        return _getFeedsInfo(feedStore[vaultId].values());\\n    }\\n\\n    function getFeedInfo(\\n        address _feed\\n    ) external view returns (Structures.Feed memory) {\\n        return _getFeedInfo(_feed);\\n    }\\n\\n    function getFeedsInfo() external view returns (Structures.Feed[] memory) {\\n        return _getFeedsInfo(feeds.values());\\n    }\\n\\n    function isContractCreated(\\n        address contractAddress\\n    ) external view returns (bool) {\\n        return createdContracts[contractAddress];\\n    }\\n\\n    function getCreationFee() internal view returns (uint256) {\\n        return IMecenateTreasury(settings.treasuryContract).fixedFee();\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x1c064465e1a0c2afad25a4a313519e7f516b3eb094fd3d23e817ee3e74941b6c\",\"license\":\"MIT\"},\"contracts/interfaces/IMecenateFeed.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateFeed {\\n    function getTotalStaked() external view returns (uint256);\\n\\n    function postCount() external view returns (uint256);\\n\\n    function acceptPost(\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce,\\n        Structures.Tokens,\\n        uint256 _amount\\n    ) external payable;\\n\\n    function getSellerStake() external view returns (uint256);\\n\\n    function getBuyerStake() external view returns (uint256);\\n\\n    function getPaymentRequested() external view returns (uint256);\\n\\n    function getStakeRequested() external view returns (uint256);\\n\\n    function getStatus() external view returns (Structures.PostStatus status);\\n\\n    function getTokenId() external view returns (Structures.Tokens tokenId);\\n\\n    function owner() external view returns (bytes32);\\n\\n    function version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd8497a7a697e4a734c97d5342b085f7eb0d0d64379ae0ab87b8b600521e4c638\"},\"contracts/interfaces/IMecenateTreasury.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateTreasury {\\r\\n    function globalFee() external view returns (uint256);\\r\\n\\r\\n    function fixedFee() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf544878bba8e01c837110d06eac56042957d59c593ba9083f686ef02aa9276a1\"},\"contracts/interfaces/IMecenateUsers.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\nimport \\\"../library/Structures.sol\\\";\\r\\n\\r\\ninterface IMecenateUsers {\\r\\n    function checkifUserExist(bytes32 vaultId) external view returns (bool);\\r\\n\\r\\n    function getUserData(\\r\\n        address user\\r\\n    ) external view returns (Structures.User memory);\\r\\n\\r\\n    function getUserCount() external view returns (uint256);\\r\\n\\r\\n    function getUserAt(uint256 index) external view returns (address);\\r\\n\\r\\n    function getUserVaultIdAt(uint256 index) external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0xcd2b91f5bebd5c880ac937b181771a0a722a9a71ff93c783da3c63137179a042\"},\"contracts/interfaces/IMecenateVerifier.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateVerifier {\\r\\n    function sismoVerify(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) external view returns (bytes memory, uint256, uint256, bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x46733b039d06e66a1f438c4fcc490eea06ed1ba2ddff7d5a0059d9e799f03d8d\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\n * @title Structures\\n * @dev This library defines various data structures used in the Mecenate platform.\\n */\\npragma solidity 0.8.19;\\n\\nlibrary Structures {\\n    enum PostStatus {\\n        Waiting,\\n        Proposed,\\n        Accepted,\\n        Submitted,\\n        Finalized,\\n        Punished,\\n        Revealed,\\n        Renounced\\n    }\\n    enum Tokens {\\n        NaN,\\n        MUSE,\\n        DAI\\n    }\\n    enum PostType {\\n        Text,\\n        Image,\\n        Video,\\n        Audio,\\n        File\\n    }\\n    enum PostDuration {\\n        OneDay,\\n        ThreeDays,\\n        OneWeek,\\n        TwoWeeks,\\n        OneMonth\\n    }\\n\\n    struct FeedSettings {\\n        uint256 punishmentRatio;\\n        uint256 postCount;\\n        address usersModuleContract;\\n        address factoryContract;\\n        address verifierContract;\\n        address vaultContract;\\n        address router;\\n        bytes encodedSymKey;\\n        bytes lastMessageForBuyer;\\n        bytes lastMessageForSeller;\\n        string version;\\n    }\\n\\n    struct FactorySettings {\\n        address treasuryContract;\\n        address usersModuleContract;\\n        address verifierContract;\\n        address vaultContract;\\n        address museToken;\\n        address daiToken;\\n        address wethToken;\\n        address router;\\n    }\\n\\n    /**\\n     * @dev Struct representing a post on the Mecenate platform.\\n     */\\n    struct Post {\\n        User creator;\\n        PostData postdata;\\n    }\\n\\n    /**\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\n     */\\n    struct PostData {\\n        PostSettings settings;\\n        PostEscrow escrow;\\n        PostEncryptedData data;\\n    }\\n\\n    /**\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\n     */\\n    struct PostEncryptedData {\\n        bytes encryptedData;\\n        bytes encryptedKey;\\n        bytes decryptedData;\\n    }\\n\\n    /**\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettings {\\n        PostStatus status;\\n        PostType postType;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n        uint256 duration;\\n        Tokens tokenId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the private settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettingPrivate {\\n        bytes vaultIdSeller;\\n        uint256 sellerTwitterId;\\n        uint256 sellerTelegramId;\\n        bytes vaultIdBuyer;\\n        uint256 buyerTwitterId;\\n        uint256 buyerTelegramId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\n     */\\n    struct PostEscrow {\\n        uint256 stake;\\n        uint256 payment;\\n        uint256 punishment;\\n        uint256 penalty;\\n    }\\n\\n    /**\\n     * @dev Struct representing a user on the Mecenate platform.\\n     */\\n    struct User {\\n        bytes32 vaultId;\\n    }\\n\\n    /**\\n     * @dev Struct representing a feed on the Mecenate platform.\\n     */\\n    struct Feed {\\n        address contractAddress;\\n        bytes32 operator;\\n        uint256 sellerStake;\\n        uint256 buyerStake;\\n        uint256 totalStake;\\n        uint256 postCount;\\n        uint256 paymentRequested;\\n        uint256 stakeRequested;\\n        PostStatus status;\\n        Tokens tokenId;\\n        string version;\\n    }\\n\\n    /**\\n     * @dev Struct representing a bay request on the Mecenate platform.\\n     */\\n    struct BayRequest {\\n        bytes32 request;\\n        uint256 payment;\\n        uint256 stake;\\n        address postAddress;\\n        bool accepted;\\n        uint256 postCount;\\n        Tokens tokenId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the private settings of a bay request on the Mecenate platform.\\n     */\\n    struct BayRequestPrivate {\\n        bytes vaultIdSeller;\\n        bytes sellerResponse;\\n        bytes vaultIdBuyer;\\n        bytes buyerResponse;\\n        address buyerTo;\\n        bytes32 buyerNonce;\\n    }\\n}\\n\",\"keccak256\":\"0x8b2807cacc112844ce06aee7c3ab099d50703cfb88f550ddf563ff0065b60c07\"},\"contracts/modules/FeedViewer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../library/Structures.sol\\\";\\nimport \\\"../interfaces/IMecenateFeed.sol\\\";\\n\\ncontract FeedViewer {\\n    function _getFeedInfo(\\n        address feed\\n    ) internal view returns (Structures.Feed memory) {\\n        Structures.Feed memory f;\\n\\n        IMecenateFeed mecenateFeed = IMecenateFeed(feed);\\n\\n        f.contractAddress = feed;\\n        f.operator = mecenateFeed.owner();\\n        f.sellerStake = mecenateFeed.getSellerStake();\\n        f.buyerStake = mecenateFeed.getBuyerStake();\\n        f.totalStake = mecenateFeed.getTotalStaked();\\n        f.postCount = mecenateFeed.postCount();\\n        f.paymentRequested = mecenateFeed.getPaymentRequested();\\n        f.stakeRequested = mecenateFeed.getStakeRequested();\\n        f.status = mecenateFeed.getStatus();\\n        f.tokenId = mecenateFeed.getTokenId();\\n        f.version = mecenateFeed.version();\\n\\n        return f;\\n    }\\n\\n    function _getFeedsInfo(\\n        address[] memory _feeds\\n    ) internal view returns (Structures.Feed[] memory) {\\n        uint256 len = _feeds.length;\\n        Structures.Feed[] memory f = new Structures.Feed[](len);\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            f[i] = _getFeedInfo(_feeds[i]);\\n        }\\n\\n        return f;\\n    }\\n}\\n\",\"keccak256\":\"0xc1fc8c5999cb6aadf168b958d93d67755858f33e45d839f4b2a73c3fe31e4978\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080346200010657601f62001f8f38819003918201601f19168301916001600160401b038311848410176200010b5780849260809460405283398101031262000106576200004d8162000121565b906200005c6020820162000121565b620000786060620000706040850162000121565b930162000121565b6000549360018060a01b03199333858716176000556040519560018060a01b03948580948193823391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a360ff196011541660115516876007541617600755168560065416176006551683600854161760085516906009541617600955611e589081620001378239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620001065756fe6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c8063067bd3b4146101b657806318da0011146101b1578063237b0d3c146101ac5780634b57b0be146101a757806354600837146101a257806354fd4d501461019d5780635dc96d161461019857806364bb432c1461019357806367031bae1461018e5780636d944e6014610189578063715018a6146101845780637b2c835f1461017f5780637fe955d41461017a5780638da5cb5b14610175578063a6fbd9b014610170578063be22f5461461016b578063ca16721914610166578063cedf3ba214610157578063d223a56414610161578063d570a66d1461015c578063e58fdd0414610157578063e86ef35314610152578063e9318b471461014d578063f2fde38b14610148578063f77800e5146101435763f887ea400361000e57611161565b611138565b611071565b61101d565b610fa2565b610ed2565b610f5d565b610f24565b610beb565b610bc2565b610ab0565b610a76565b6109fb565b6109c1565b61095c565b6108df565b61078a565b610673565b610650565b610583565b610476565b610409565b6102b0565b6101d9565b346101d45760003660031901126101d4576020600354604051908152f35b600080fd5b346101d45760003660031901126101d4576006546040516001600160a01b039091168152602090f35b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761023a57604052565b610202565b67ffffffffffffffff811161023a57601f01601f191660200190565b9291926102678261023f565b916102756040519384610218565b8294818452818301116101d4578281602093846000960137010152565b9080601f830112156101d4578160206102ad9335910161025b565b90565b346101d4576020806003193601126101d45767ffffffffffffffff6004358181116101d4576102e3903690600401610292565b6102eb61118a565b805191821161023a57610308826103036002546104f0565b6111f9565b8290601f831160011461037a57928261035c9361036a936100199660009261036f575b50508160011b916000199060031b1c1916176002555b60405192839182016006906576322e302e3160d01b81520190565b03601f198101835282610218565b6112a0565b01519050388061032b565b6002600052601f19831691907f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace9260005b8181106103f257509361036a9361001996936001938361035c98106103d9575b505050811b01600255610341565b015160001960f88460031b161c191690553880806103cb565b9293866001819287860151815501950193016103ab565b346101d45760003660031901126101d457600c546040516001600160a01b039091168152602090f35b6020908160408183019282815285518094520193019160005b828110610459575050505090565b83516001600160a01b03168552938101939281019260010161044b565b346101d4576020806003193601126101d457600435600052600f8152604060002090604051908181845491828152019360005281600020916000905b8282106104d9576104d5856104c981890382610218565b60405191829182610432565b0390f35b8354865294850194600193840193909101906104b2565b90600182811c92168015610520575b602083101461050a57565b634e487b7160e01b600052602260045260246000fd5b91607f16916104ff565b60005b83811061053d5750506000910152565b818101518382015260200161052d565b906020916105668151809281855285808601910161052a565b601f01601f1916010190565b9060206102ad92818152019061054d565b346101d45760008060031936011261064d57604051908060018054916105a8836104f0565b8086529282811690811561062357506001146105db575b6104d5856105cf81870382610218565b60405191829182610572565b9250808352600080516020611e038339815191525b82841061060b5750505081016020016105cf826104d56105bf565b805460208587018101919091529093019281016105f0565b8695506104d5969350602092506105cf94915060ff191682840152151560051b82010192936105bf565b80fd5b346101d45760003660031901126101d457602060ff601154166040519015158152f35b346101d4576020806003193601126101d45767ffffffffffffffff906004358281116101d457366023820112156101d4576106b890369060248160040135910161025b565b916106c161118a565b825190811161023a576001916106e0826106db85546104f0565b61125c565b80601f8311600114610718575081929360009261070d575b5050600019600383901b1c191690821b179055005b0151905038806106f8565b90601f198316946107396001600052600080516020611e0383398151915290565b926000905b8782106107735750508385961061075a575b505050811b019055005b015160001960f88460031b161c19169055388080610750565b80878596829496860151815501950193019061073e565b346101d45760003660031901126101d4576008546040516001600160a01b039091168152602090f35b634e487b7160e01b600052602160045260246000fd5b9060088210156107d65752565b6107b3565b9060038210156107d65752565b80516001600160a01b031682526102ad91906020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e083015261085361010080830151908401906107c9565b61086661012080830151908401906107db565b61014080910151916101608092820152019061054d565b602080820190808352835180925260408301928160408460051b8301019501936000915b8483106108b15750505050505090565b90919293949584806108cf600193603f198682030187528a516107e8565b98019301930191949392906108a1565b346101d4576020806003193601126101d457600435600052600f81526040600020604051918281835491828152019260005281600020916000905b828210610945576104d56109398761093481890382610218565b611d66565b6040519182918261087d565b83548552938401936001938401939091019061091a565b346101d45760008060031936011261064d5761097661118a565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b801515036101d457565b346101d45760203660031901126101d4576004356109de816109b7565b6109e661118a565b60ff8019601154169115151617601155600080f35b346101d45760003660031901126101d457604051806004549182815260208091019260046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b916000905b828210610a5f576104d5856104c981890382610218565b835486529485019460019384019390910190610a48565b346101d45760003660031901126101d4576000546040516001600160a01b039091168152602090f35b6001600160a01b038116036101d457565b346101d45760e03660031901126101d457610019600435610ad081610a9f565b610ba560243591610ae083610a9f565b610b88604435610aef81610a9f565b60643592610afc84610a9f565b60843591610b0983610a9f565b60a43594610b1686610a9f565b60c43597610b2389610a9f565b610b2b61118a565b60018060a01b0392838092816001600160601b0360a01b971687600654161760065516856009541617600955168360075416176007551690600c541617600c5560018060a01b03166001600160601b0360a01b600a541617600a55565b60018060a01b03166001600160601b0360a01b600b541617600b55565b60018060a01b03166001600160601b0360a01b600d541617600d55565b346101d45760003660031901126101d457600b546040516001600160a01b039091168152602090f35b60603660031901126101d45760043567ffffffffffffffff81116101d457610c17903690600401610292565b60243590610c2482610a9f565b6009546001600160a01b039190604435908316610c42338214611371565b60085485906001600160a01b03169260405194637276069d60e01b86528580610c738460009b8c9560048501611447565b03818988165afa918215610ea05787958893610ea5575b50868060209485808251830101910190610ca39161147f565b8951998701999099206007549099906001600160a01b0316978a6040519a8b9230918c8c860194610cd39561149e565b0395601f19968781018b52610ce8908b610218565b14610cf290611572565b16911614610cff906115ac565b604051630e2ab4cb60e21b815260048101869052928290849060249082908a165afa918215610ea057610d40610dce93610dbc958a91610e73575b506115f8565b610d53610d4b611947565b34101561163a565b610d8e8880808034610d7e610d72610d7260065460018060a01b031690565b6001600160a01b031690565b5af1610d88611677565b506116a7565b610da1610d9c6003546116e1565b600355565b610dc2610dac611706565b95604051958693840180986117c2565b906117c2565b03908101835282610218565b519084f091823b15610e6f57916104d591610e2b82610e267fb658664a46408e6670a38ec7ea8b7614c9e2916184dff2fad99d3a7a3491ca7d9796821693610e1585611802565b50600052600f602052604060002090565b6117d9565b506001600160a01b0382166000908152601060205260409020610e5590805460ff19166001179055565b60405194848695a26001600160a01b031682526020820190565b8380fd5b610e939150833d8511610e99575b610e8b8183610218565b8101906115e3565b38610d3a565b503d610e81565b611473565b909250610ec59195503d8089833e610ebd8183610218565b8101906113f9565b9692915050949138610c8a565b346101d45760203660031901126101d457600435610eef81610a9f565b60018060a01b03166000526010602052602060ff604060002054166040519015158152f35b6004359060ff821682036101d457565b346101d45760203660031901126101d45760ff610f3f610f14565b16600052600e602052602062ffffff60406000205416604051908152f35b346101d45760203660031901126101d4576104d5610f8e600435610f8081610a9f565b610f886118d4565b50611a26565b6040519182916020835260208301906107e8565b346101d45760003660031901126101d4576040516004805480835260009182526020808401927f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b92915b828210611006576104d56109398761093481890382610218565b835485529384019360019384019390910190610fec565b346101d45760403660031901126101d457611036610f14565b6024359062ffffff82168092036101d45760ff9061105261118a565b16600052600e60205260406000209062ffffff19825416179055600080f35b346101d45760203660031901126101d45760043561108e81610a9f565b61109661118a565b6001600160a01b0390811680156110e457600080546001600160a01b03198116831782559092167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b346101d45760003660031901126101d457600a546040516001600160a01b039091168152602090f35b346101d45760003660031901126101d457600d546040516001600160a01b039091168152602090f35b6000546001600160a01b0316330361119e57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b8181106111ed575050565b600081556001016111e2565b90601f8211611206575050565b6112509160026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace906020601f840160051c83019310611252575b601f0160051c01906111e2565b565b9091508190611243565b90601f8211611269575050565b611250916001600052600080516020611e03833981519152906020601f840160051c8301931061125257601f0160051c01906111e2565b90815167ffffffffffffffff811161023a576001906112c3816106db84546104f0565b602080601f83116001146112fe5750819293946000926112f3575b5050600019600383901b1c191690821b179055565b0151905038806112de565b90601f1983169561131f6001600052600080516020611e0383398151915290565b926000905b88821061135a5750508385969710611341575b505050811b019055565b015160001960f88460031b161c19169055388080611337565b808785968294968601518155019501930190611324565b1561137857565b60405162461bcd60e51b815260206004820152600a60248201526913d3931657d59055531560b21b6044820152606490fd5b909291926113b78161023f565b916113c56040519384610218565b8294828452828201116101d457602061125093019061052a565b9080601f830112156101d45781516102ad926020016113aa565b916080838303126101d45782519067ffffffffffffffff918281116101d457836114249186016113df565b9360208101519360408201519360608301519081116101d4576102ad92016113df565b61145f6040929594939560608352606083019061054d565b6001600160a01b0390951660208201520152565b6040513d6000823e3d90fd5b91908260409103126101d4576020825161149881610a9f565b92015190565b9081526001600160a01b0391821660208083019190915292821660408201529281166060840152909216608082015260c060a0820152600180546000939092916114e7846104f0565b938460c0850152818116908160001461154f575060011461150a575b5050505090565b6000818152939450600080516020611e038339815191525b85851061153b5750505060e09250010138808080611503565b805485850160e00152938201938101611522565b9250505060e0935060ff929192191683830152151560051b010138808080611503565b1561157957565b60405162461bcd60e51b815260206004820152600b60248201526a57524f4e475f4e4f4e434560a81b6044820152606490fd5b156115b357565b60405162461bcd60e51b815260206004820152600860248201526757524f4e475f544f60c01b6044820152606490fd5b908160209103126101d457516102ad816109b7565b156115ff57565b60405162461bcd60e51b81526020600482015260136024820152721d5cd95c88191bd95cc81b9bdd08195e1a5cdd606a1b6044820152606490fd5b1561164157565b60405162461bcd60e51b815260206004820152600e60248201526d4e4f545f454e4f5547485f46454560901b6044820152606490fd5b3d156116a2573d906116888261023f565b916116966040519384610218565b82523d6000602084013e565b606090565b156116ae57565b60405162461bcd60e51b815260206004820152600b60248201526a10d0531317d1905253115160aa1b6044820152606490fd5b60001981146116f05760010190565b634e487b7160e01b600052601160045260246000fd5b604051906000826002549161171a836104f0565b808352926001908181169081156117a05750600114611741575b5061125092500383610218565b6002600090815291507f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace5b8483106117855750611250935050810160200138611734565b81935090816020925483858a0101520191019091859261176c565b90506020925061125094915060ff191682840152151560051b82010138611734565b906117d56020928281519485920161052a565b0190565b6102ad916001600160a01b03169061187e565b634e487b7160e01b600052603260045260246000fd5b8060005260056020526040600020541560001461187857600454600160401b81101561023a5760018101806004558110156118735781907f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0155600454906000526005602052604060002055600190565b6117ec565b50600090565b600082815260018201602081905260408220546118cd57825492600160401b84101561023a57600184018082558410156118735784604094828552602085200155549382526020522055600190565b5091505090565b60405190610160820182811067ffffffffffffffff82111761023a57604052606061014083600080825280602083015280604083015280848301528060808301528060a08301528060c08301528060e0830152806101008301526101208201520152565b908160209103126101d4575190565b6006546040516391792d5b60e01b815290602090829060049082906001600160a01b03165afa908115610ea05760009161197f575090565b6102ad915060203d81116119a0575b6119988183610218565b810190611938565b503d61198e565b908160209103126101d4575160088110156101d45790565b60088210156107d65752565b908160209103126101d4575160038110156101d45790565b60038210156107d65752565b6020818303126101d45780519067ffffffffffffffff82116101d457019080601f830112156101d45781516102ad926020016113aa565b611a2e6118d4565b50611a376118d4565b6001600160a01b0390911680825260408051638da5cb5b60e01b8152600492602092909183818681865afa908115610ea057600091611d1d575b50858401528051635c63ed6960e01b815283818681865afa908115610ea057600091611d00575b50858201528051634c38d87760e01b815283818681865afa908115610ea057600091611ce3575b506060860152805163048bf3bb60e11b815283818681865afa908115610ea057600091611cc6575b5060808601528051630bc8361760e11b815283818681865afa908115610ea057600091611ca9575b5060a0860152805163d24e0c8760e01b815283818681865afa908115610ea057600091611c8c575b5060c0860152805163faeb5e1760e01b815283818681865afa908115610ea057600091611c6f575b5060e086015280516302734eab60e51b815283818681865afa8015610ea057611b9591600091611c42575b5061010087016119bf565b805163010a38f560e01b81529280848681865afa8015610ea057600094611bc9928692611c15575b505061012087016119e3565b5163054fd4d560e41b815292839182905afa908115610ea057600091611bf4575b5061014082015290565b611c0f913d8091833e611c078183610218565b8101906119ef565b38611bea565b611c349250803d10611c3b575b611c2c8183610218565b8101906119cb565b3880611bbd565b503d611c22565b611c629150853d8711611c68575b611c5a8183610218565b8101906119a7565b38611b8a565b503d611c50565b611c869150843d86116119a0576119988183610218565b38611b5f565b611ca39150843d86116119a0576119988183610218565b38611b37565b611cc09150843d86116119a0576119988183610218565b38611b0f565b611cdd9150843d86116119a0576119988183610218565b38611ae7565b611cfa9150843d86116119a0576119988183610218565b38611abf565b611d179150843d86116119a0576119988183610218565b38611a98565b611d349150843d86116119a0576119988183610218565b38611a71565b67ffffffffffffffff811161023a5760051b60200190565b80518210156118735760209160051b010190565b8051611d7181611d3a565b91611d7f6040519384610218565b818352601f19611d8e83611d3a565b0160005b818110611deb57505060005b828110611dab5750505090565b611de690611dcb6001600160a01b03611dc48386611d52565b5116611a26565b611dd58287611d52565b52611de08186611d52565b506116e1565b611d9e565b602090611df66118d4565b82828801015201611d9256feb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6a2646970667358221220a0e3e1d0e2da26753ff02395dc5157821f26ebb3431834c1fe66e9497853ef5264736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c8063067bd3b4146101b657806318da0011146101b1578063237b0d3c146101ac5780634b57b0be146101a757806354600837146101a257806354fd4d501461019d5780635dc96d161461019857806364bb432c1461019357806367031bae1461018e5780636d944e6014610189578063715018a6146101845780637b2c835f1461017f5780637fe955d41461017a5780638da5cb5b14610175578063a6fbd9b014610170578063be22f5461461016b578063ca16721914610166578063cedf3ba214610157578063d223a56414610161578063d570a66d1461015c578063e58fdd0414610157578063e86ef35314610152578063e9318b471461014d578063f2fde38b14610148578063f77800e5146101435763f887ea400361000e57611161565b611138565b611071565b61101d565b610fa2565b610ed2565b610f5d565b610f24565b610beb565b610bc2565b610ab0565b610a76565b6109fb565b6109c1565b61095c565b6108df565b61078a565b610673565b610650565b610583565b610476565b610409565b6102b0565b6101d9565b346101d45760003660031901126101d4576020600354604051908152f35b600080fd5b346101d45760003660031901126101d4576006546040516001600160a01b039091168152602090f35b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761023a57604052565b610202565b67ffffffffffffffff811161023a57601f01601f191660200190565b9291926102678261023f565b916102756040519384610218565b8294818452818301116101d4578281602093846000960137010152565b9080601f830112156101d4578160206102ad9335910161025b565b90565b346101d4576020806003193601126101d45767ffffffffffffffff6004358181116101d4576102e3903690600401610292565b6102eb61118a565b805191821161023a57610308826103036002546104f0565b6111f9565b8290601f831160011461037a57928261035c9361036a936100199660009261036f575b50508160011b916000199060031b1c1916176002555b60405192839182016006906576322e302e3160d01b81520190565b03601f198101835282610218565b6112a0565b01519050388061032b565b6002600052601f19831691907f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace9260005b8181106103f257509361036a9361001996936001938361035c98106103d9575b505050811b01600255610341565b015160001960f88460031b161c191690553880806103cb565b9293866001819287860151815501950193016103ab565b346101d45760003660031901126101d457600c546040516001600160a01b039091168152602090f35b6020908160408183019282815285518094520193019160005b828110610459575050505090565b83516001600160a01b03168552938101939281019260010161044b565b346101d4576020806003193601126101d457600435600052600f8152604060002090604051908181845491828152019360005281600020916000905b8282106104d9576104d5856104c981890382610218565b60405191829182610432565b0390f35b8354865294850194600193840193909101906104b2565b90600182811c92168015610520575b602083101461050a57565b634e487b7160e01b600052602260045260246000fd5b91607f16916104ff565b60005b83811061053d5750506000910152565b818101518382015260200161052d565b906020916105668151809281855285808601910161052a565b601f01601f1916010190565b9060206102ad92818152019061054d565b346101d45760008060031936011261064d57604051908060018054916105a8836104f0565b8086529282811690811561062357506001146105db575b6104d5856105cf81870382610218565b60405191829182610572565b9250808352600080516020611e038339815191525b82841061060b5750505081016020016105cf826104d56105bf565b805460208587018101919091529093019281016105f0565b8695506104d5969350602092506105cf94915060ff191682840152151560051b82010192936105bf565b80fd5b346101d45760003660031901126101d457602060ff601154166040519015158152f35b346101d4576020806003193601126101d45767ffffffffffffffff906004358281116101d457366023820112156101d4576106b890369060248160040135910161025b565b916106c161118a565b825190811161023a576001916106e0826106db85546104f0565b61125c565b80601f8311600114610718575081929360009261070d575b5050600019600383901b1c191690821b179055005b0151905038806106f8565b90601f198316946107396001600052600080516020611e0383398151915290565b926000905b8782106107735750508385961061075a575b505050811b019055005b015160001960f88460031b161c19169055388080610750565b80878596829496860151815501950193019061073e565b346101d45760003660031901126101d4576008546040516001600160a01b039091168152602090f35b634e487b7160e01b600052602160045260246000fd5b9060088210156107d65752565b6107b3565b9060038210156107d65752565b80516001600160a01b031682526102ad91906020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e083015261085361010080830151908401906107c9565b61086661012080830151908401906107db565b61014080910151916101608092820152019061054d565b602080820190808352835180925260408301928160408460051b8301019501936000915b8483106108b15750505050505090565b90919293949584806108cf600193603f198682030187528a516107e8565b98019301930191949392906108a1565b346101d4576020806003193601126101d457600435600052600f81526040600020604051918281835491828152019260005281600020916000905b828210610945576104d56109398761093481890382610218565b611d66565b6040519182918261087d565b83548552938401936001938401939091019061091a565b346101d45760008060031936011261064d5761097661118a565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b801515036101d457565b346101d45760203660031901126101d4576004356109de816109b7565b6109e661118a565b60ff8019601154169115151617601155600080f35b346101d45760003660031901126101d457604051806004549182815260208091019260046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b916000905b828210610a5f576104d5856104c981890382610218565b835486529485019460019384019390910190610a48565b346101d45760003660031901126101d4576000546040516001600160a01b039091168152602090f35b6001600160a01b038116036101d457565b346101d45760e03660031901126101d457610019600435610ad081610a9f565b610ba560243591610ae083610a9f565b610b88604435610aef81610a9f565b60643592610afc84610a9f565b60843591610b0983610a9f565b60a43594610b1686610a9f565b60c43597610b2389610a9f565b610b2b61118a565b60018060a01b0392838092816001600160601b0360a01b971687600654161760065516856009541617600955168360075416176007551690600c541617600c5560018060a01b03166001600160601b0360a01b600a541617600a55565b60018060a01b03166001600160601b0360a01b600b541617600b55565b60018060a01b03166001600160601b0360a01b600d541617600d55565b346101d45760003660031901126101d457600b546040516001600160a01b039091168152602090f35b60603660031901126101d45760043567ffffffffffffffff81116101d457610c17903690600401610292565b60243590610c2482610a9f565b6009546001600160a01b039190604435908316610c42338214611371565b60085485906001600160a01b03169260405194637276069d60e01b86528580610c738460009b8c9560048501611447565b03818988165afa918215610ea05787958893610ea5575b50868060209485808251830101910190610ca39161147f565b8951998701999099206007549099906001600160a01b0316978a6040519a8b9230918c8c860194610cd39561149e565b0395601f19968781018b52610ce8908b610218565b14610cf290611572565b16911614610cff906115ac565b604051630e2ab4cb60e21b815260048101869052928290849060249082908a165afa918215610ea057610d40610dce93610dbc958a91610e73575b506115f8565b610d53610d4b611947565b34101561163a565b610d8e8880808034610d7e610d72610d7260065460018060a01b031690565b6001600160a01b031690565b5af1610d88611677565b506116a7565b610da1610d9c6003546116e1565b600355565b610dc2610dac611706565b95604051958693840180986117c2565b906117c2565b03908101835282610218565b519084f091823b15610e6f57916104d591610e2b82610e267fb658664a46408e6670a38ec7ea8b7614c9e2916184dff2fad99d3a7a3491ca7d9796821693610e1585611802565b50600052600f602052604060002090565b6117d9565b506001600160a01b0382166000908152601060205260409020610e5590805460ff19166001179055565b60405194848695a26001600160a01b031682526020820190565b8380fd5b610e939150833d8511610e99575b610e8b8183610218565b8101906115e3565b38610d3a565b503d610e81565b611473565b909250610ec59195503d8089833e610ebd8183610218565b8101906113f9565b9692915050949138610c8a565b346101d45760203660031901126101d457600435610eef81610a9f565b60018060a01b03166000526010602052602060ff604060002054166040519015158152f35b6004359060ff821682036101d457565b346101d45760203660031901126101d45760ff610f3f610f14565b16600052600e602052602062ffffff60406000205416604051908152f35b346101d45760203660031901126101d4576104d5610f8e600435610f8081610a9f565b610f886118d4565b50611a26565b6040519182916020835260208301906107e8565b346101d45760003660031901126101d4576040516004805480835260009182526020808401927f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b92915b828210611006576104d56109398761093481890382610218565b835485529384019360019384019390910190610fec565b346101d45760403660031901126101d457611036610f14565b6024359062ffffff82168092036101d45760ff9061105261118a565b16600052600e60205260406000209062ffffff19825416179055600080f35b346101d45760203660031901126101d45760043561108e81610a9f565b61109661118a565b6001600160a01b0390811680156110e457600080546001600160a01b03198116831782559092167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b346101d45760003660031901126101d457600a546040516001600160a01b039091168152602090f35b346101d45760003660031901126101d457600d546040516001600160a01b039091168152602090f35b6000546001600160a01b0316330361119e57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b8181106111ed575050565b600081556001016111e2565b90601f8211611206575050565b6112509160026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace906020601f840160051c83019310611252575b601f0160051c01906111e2565b565b9091508190611243565b90601f8211611269575050565b611250916001600052600080516020611e03833981519152906020601f840160051c8301931061125257601f0160051c01906111e2565b90815167ffffffffffffffff811161023a576001906112c3816106db84546104f0565b602080601f83116001146112fe5750819293946000926112f3575b5050600019600383901b1c191690821b179055565b0151905038806112de565b90601f1983169561131f6001600052600080516020611e0383398151915290565b926000905b88821061135a5750508385969710611341575b505050811b019055565b015160001960f88460031b161c19169055388080611337565b808785968294968601518155019501930190611324565b1561137857565b60405162461bcd60e51b815260206004820152600a60248201526913d3931657d59055531560b21b6044820152606490fd5b909291926113b78161023f565b916113c56040519384610218565b8294828452828201116101d457602061125093019061052a565b9080601f830112156101d45781516102ad926020016113aa565b916080838303126101d45782519067ffffffffffffffff918281116101d457836114249186016113df565b9360208101519360408201519360608301519081116101d4576102ad92016113df565b61145f6040929594939560608352606083019061054d565b6001600160a01b0390951660208201520152565b6040513d6000823e3d90fd5b91908260409103126101d4576020825161149881610a9f565b92015190565b9081526001600160a01b0391821660208083019190915292821660408201529281166060840152909216608082015260c060a0820152600180546000939092916114e7846104f0565b938460c0850152818116908160001461154f575060011461150a575b5050505090565b6000818152939450600080516020611e038339815191525b85851061153b5750505060e09250010138808080611503565b805485850160e00152938201938101611522565b9250505060e0935060ff929192191683830152151560051b010138808080611503565b1561157957565b60405162461bcd60e51b815260206004820152600b60248201526a57524f4e475f4e4f4e434560a81b6044820152606490fd5b156115b357565b60405162461bcd60e51b815260206004820152600860248201526757524f4e475f544f60c01b6044820152606490fd5b908160209103126101d457516102ad816109b7565b156115ff57565b60405162461bcd60e51b81526020600482015260136024820152721d5cd95c88191bd95cc81b9bdd08195e1a5cdd606a1b6044820152606490fd5b1561164157565b60405162461bcd60e51b815260206004820152600e60248201526d4e4f545f454e4f5547485f46454560901b6044820152606490fd5b3d156116a2573d906116888261023f565b916116966040519384610218565b82523d6000602084013e565b606090565b156116ae57565b60405162461bcd60e51b815260206004820152600b60248201526a10d0531317d1905253115160aa1b6044820152606490fd5b60001981146116f05760010190565b634e487b7160e01b600052601160045260246000fd5b604051906000826002549161171a836104f0565b808352926001908181169081156117a05750600114611741575b5061125092500383610218565b6002600090815291507f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace5b8483106117855750611250935050810160200138611734565b81935090816020925483858a0101520191019091859261176c565b90506020925061125094915060ff191682840152151560051b82010138611734565b906117d56020928281519485920161052a565b0190565b6102ad916001600160a01b03169061187e565b634e487b7160e01b600052603260045260246000fd5b8060005260056020526040600020541560001461187857600454600160401b81101561023a5760018101806004558110156118735781907f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0155600454906000526005602052604060002055600190565b6117ec565b50600090565b600082815260018201602081905260408220546118cd57825492600160401b84101561023a57600184018082558410156118735784604094828552602085200155549382526020522055600190565b5091505090565b60405190610160820182811067ffffffffffffffff82111761023a57604052606061014083600080825280602083015280604083015280848301528060808301528060a08301528060c08301528060e0830152806101008301526101208201520152565b908160209103126101d4575190565b6006546040516391792d5b60e01b815290602090829060049082906001600160a01b03165afa908115610ea05760009161197f575090565b6102ad915060203d81116119a0575b6119988183610218565b810190611938565b503d61198e565b908160209103126101d4575160088110156101d45790565b60088210156107d65752565b908160209103126101d4575160038110156101d45790565b60038210156107d65752565b6020818303126101d45780519067ffffffffffffffff82116101d457019080601f830112156101d45781516102ad926020016113aa565b611a2e6118d4565b50611a376118d4565b6001600160a01b0390911680825260408051638da5cb5b60e01b8152600492602092909183818681865afa908115610ea057600091611d1d575b50858401528051635c63ed6960e01b815283818681865afa908115610ea057600091611d00575b50858201528051634c38d87760e01b815283818681865afa908115610ea057600091611ce3575b506060860152805163048bf3bb60e11b815283818681865afa908115610ea057600091611cc6575b5060808601528051630bc8361760e11b815283818681865afa908115610ea057600091611ca9575b5060a0860152805163d24e0c8760e01b815283818681865afa908115610ea057600091611c8c575b5060c0860152805163faeb5e1760e01b815283818681865afa908115610ea057600091611c6f575b5060e086015280516302734eab60e51b815283818681865afa8015610ea057611b9591600091611c42575b5061010087016119bf565b805163010a38f560e01b81529280848681865afa8015610ea057600094611bc9928692611c15575b505061012087016119e3565b5163054fd4d560e41b815292839182905afa908115610ea057600091611bf4575b5061014082015290565b611c0f913d8091833e611c078183610218565b8101906119ef565b38611bea565b611c349250803d10611c3b575b611c2c8183610218565b8101906119cb565b3880611bbd565b503d611c22565b611c629150853d8711611c68575b611c5a8183610218565b8101906119a7565b38611b8a565b503d611c50565b611c869150843d86116119a0576119988183610218565b38611b5f565b611ca39150843d86116119a0576119988183610218565b38611b37565b611cc09150843d86116119a0576119988183610218565b38611b0f565b611cdd9150843d86116119a0576119988183610218565b38611ae7565b611cfa9150843d86116119a0576119988183610218565b38611abf565b611d179150843d86116119a0576119988183610218565b38611a98565b611d349150843d86116119a0576119988183610218565b38611a71565b67ffffffffffffffff811161023a5760051b60200190565b80518210156118735760209160051b010190565b8051611d7181611d3a565b91611d7f6040519384610218565b818352601f19611d8e83611d3a565b0160005b818110611deb57505060005b828110611dab5750505090565b611de690611dcb6001600160a01b03611dc48386611d52565b5116611a26565b611dd58287611d52565b52611de08186611d52565b506116e1565b611d9e565b602090611df66118d4565b82828801015201611d9256feb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6a2646970667358221220a0e3e1d0e2da26753ff02395dc5157821f26ebb3431834c1fe66e9497853ef5264736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2835,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "version",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2837,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "feedByteCode",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes_storage"
      },
      {
        "astId": 2839,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "contractCounter",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2842,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "feeds",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(AddressSet)2416_storage"
      },
      {
        "astId": 2845,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "settings",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(FactorySettings)3778_storage"
      },
      {
        "astId": 2849,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "routerFee",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint8,t_uint24)"
      },
      {
        "astId": 2854,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "feedStore",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)2416_storage)"
      },
      {
        "astId": 2858,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "createdContracts",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2865,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "burnEnabled",
        "offset": 0,
        "slot": "17",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)2416_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)2416_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint8,t_uint24)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint24)",
        "numberOfBytes": "32",
        "value": "t_uint24"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)2416_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2415,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2101_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(FactorySettings)3778_storage": {
        "encoding": "inplace",
        "label": "struct Structures.FactorySettings",
        "members": [
          {
            "astId": 3763,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "treasuryContract",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3765,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "usersModuleContract",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3767,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "verifierContract",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 3769,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "vaultContract",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 3771,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "museToken",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 3773,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "daiToken",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 3775,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "wethToken",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 3777,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "router",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Set)2101_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2096,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2100,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}