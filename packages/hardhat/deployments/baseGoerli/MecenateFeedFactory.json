{
  "address": "0x81e74f728E06f559be14711f4e6a902AFb549075",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "FeedCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "buildFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "usersModule",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "easContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "easSchema",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "wethTokenAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "museTokenAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "daiTokenAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "routerAddr",
          "type": "address"
        }
      ],
      "name": "changeMultipleSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daiToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "easContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "easSchema",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getFeedInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sellerStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyerStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "postCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "paymentRequested",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeRequested",
              "type": "uint256"
            },
            {
              "internalType": "enum Structures.PostStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "enum Structures.Tokens",
              "name": "tokenId",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "version",
              "type": "string"
            }
          ],
          "internalType": "struct Structures.Feed",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeds",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeedsInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sellerStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyerStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "postCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "paymentRequested",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeRequested",
              "type": "uint256"
            },
            {
              "internalType": "enum Structures.PostStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "enum Structures.Tokens",
              "name": "tokenId",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "version",
              "type": "string"
            }
          ],
          "internalType": "struct Structures.Feed[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getFeedsInfoOwned",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sellerStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyerStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "postCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "paymentRequested",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeRequested",
              "type": "uint256"
            },
            {
              "internalType": "enum Structures.PostStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "enum Structures.Tokens",
              "name": "tokenId",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "version",
              "type": "string"
            }
          ],
          "internalType": "struct Structures.Feed[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getFeedsOwned",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "tokenId",
          "type": "uint8"
        }
      ],
      "name": "getRouterFee",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "isContractCreated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFeed",
          "type": "address"
        }
      ],
      "name": "isFeed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "museToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "newBurnEnabled",
          "type": "bool"
        }
      ],
      "name": "setBurnEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "newByteCode",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "newVersion",
          "type": "string"
        }
      ],
      "name": "setFeedByteCode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "tokenId",
          "type": "uint8"
        },
        {
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        }
      ],
      "name": "setRouterFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wethToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa078114d17c601948375d5b765481fb53e7c585c090b9a50e2d8a28925adcbaa",
  "receipt": {
    "to": null,
    "from": "0x8aA5F726d9F868a21a8bd748E2f1E43bA31eb670",
    "contractAddress": "0x81e74f728E06f559be14711f4e6a902AFb549075",
    "transactionIndex": 1,
    "gasUsed": "1976498",
    "logsBloom": "0x
    "blockHash": "0xa355ebf0c63d3639731e8e34a6078c24810da89d46d79303e8282843881e04ee",
    "transactionHash": "0xa078114d17c601948375d5b765481fb53e7c585c090b9a50e2d8a28925adcbaa",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 11181746,
        "transactionHash": "0xa078114d17c601948375d5b765481fb53e7c585c090b9a50e2d8a28925adcbaa",
        "address": "0x81e74f728E06f559be14711f4e6a902AFb549075",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008aa5f726d9f868a21a8bd748e2f1e43ba31eb670"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa355ebf0c63d3639731e8e34a6078c24810da89d46d79303e8282843881e04ee"
      }
    ],
    "blockNumber": 11181746,
    "cumulativeGasUsed": "2023339",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 15,
  "solcInputHash": "1df1e5248ce6cfac956a4b387ea3e358",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"FeedCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"buildFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usersModule\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"easContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"easSchema\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"wethTokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"museTokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiTokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"routerAddr\",\"type\":\"address\"}],\"name\":\"changeMultipleSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"easContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"easSchema\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getFeedInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellerStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentRequested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeRequested\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"internalType\":\"struct Structures.Feed\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeds\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeedsInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellerStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentRequested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeRequested\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"internalType\":\"struct Structures.Feed[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getFeedsInfoOwned\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellerStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentRequested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeRequested\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"internalType\":\"struct Structures.Feed[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getFeedsOwned\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"name\":\"getRouterFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"isContractCreated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeed\",\"type\":\"address\"}],\"name\":\"isFeed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"museToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newBurnEnabled\",\"type\":\"bool\"}],\"name\":\"setBurnEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"newByteCode\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"newVersion\",\"type\":\"string\"}],\"name\":\"setFeedByteCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"setRouterFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/factories/MecenateFeedFactory.sol\":\"MecenateFeedFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/factories/MecenateFeedFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../interfaces/IMecenateUsers.sol\\\";\\nimport \\\"../interfaces/IMecenateTreasury.sol\\\";\\nimport \\\"../modules/FeedViewer.sol\\\";\\n\\ncontract MecenateFeedFactory is Ownable, FeedViewer {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    EnumerableSet.AddressSet internal feeds;\\n\\n    Structures.FactorySettings internal settings;\\n\\n    bytes internal feedByteCode;\\n\\n    mapping(uint8 => uint24) internal routerFee;\\n\\n    mapping(address => EnumerableSet.AddressSet) internal feedStore;\\n\\n    mapping(address => bool) internal createdContracts;\\n\\n    string public version = \\\"v2.0.0\\\"; // Iitialized\\n\\n    bool public burnEnabled = false;\\n\\n    uint256 public contractCounter;\\n\\n    event FeedCreated(address indexed addr);\\n\\n    function _changeVersion(string memory newVersion) internal {\\n        version = newVersion;\\n    }\\n\\n    function treasuryContract() external view returns (address) {\\n        return settings.treasuryContract;\\n    }\\n\\n    function easSchema() external view returns (bytes32) {\\n        return settings.easSchema;\\n    }\\n\\n    function easContract() external view returns (address) {\\n        return settings.easContract;\\n    }\\n\\n    function daiToken() external view returns (address) {\\n        return settings.daiToken;\\n    }\\n\\n    function wethToken() external view returns (address) {\\n        return settings.wethToken;\\n    }\\n\\n    function museToken() external view returns (address) {\\n        return settings.museToken;\\n    }\\n\\n    function router() external view returns (address) {\\n        return settings.router;\\n    }\\n\\n    function getRouterFee(uint8 tokenId) external view returns (uint24) {\\n        return routerFee[tokenId];\\n    }\\n\\n    function setRouterFee(uint8 tokenId, uint24 fee) external onlyOwner {\\n        routerFee[tokenId] = fee;\\n    }\\n\\n    function setBurnEnabled(bool newBurnEnabled) external onlyOwner {\\n        burnEnabled = newBurnEnabled;\\n    }\\n\\n    function isFeed(address newFeed) external view returns (bool) {\\n        return createdContracts[newFeed];\\n    }\\n\\n    function changeMultipleSettings(\\n        address treasury,\\n        address usersModule,\\n        address easContract,\\n        bytes32 easSchema,\\n        address wethTokenAddr,\\n        address museTokenAddr,\\n        address daiTokenAddr,\\n        address routerAddr\\n    ) external onlyOwner {\\n        settings.treasuryContract = treasury;\\n        settings.usersModuleContract = usersModule;\\n        settings.easContract = easContract;\\n        settings.easSchema = easSchema;\\n        settings.wethToken = wethTokenAddr;\\n        settings.museToken = museTokenAddr;\\n        settings.daiToken = daiTokenAddr;\\n        settings.router = routerAddr;\\n    }\\n\\n    function setFeedByteCode(\\n        bytes memory newByteCode,\\n        string memory newVersion\\n    ) external onlyOwner {\\n        feedByteCode = newByteCode;\\n        _changeVersion(newVersion);\\n    }\\n\\n    function buildFeed() external payable returns (address) {\\n        bytes memory constructorArguments = abi.encode(\\n            msg.sender,\\n            settings.usersModuleContract,\\n            address(this),\\n            version\\n        );\\n\\n        require(\\n            IMecenateUsers(settings.usersModuleContract).checkifUserExist(\\n                msg.sender\\n            ),\\n            \\\"user does not exist\\\"\\n        );\\n\\n        require(msg.value >= getCreationFee(), \\\"NOT_ENOUGH_FEE\\\");\\n\\n        (bool _result, ) = payable(settings.treasuryContract).call{\\n            value: msg.value\\n        }(\\\"\\\");\\n\\n        require(_result, \\\"CALL_FAILED\\\");\\n\\n        contractCounter++;\\n\\n        address addr;\\n\\n        bytes memory tempByteCode = feedByteCode; // Carico la variabile di storage in una variabile locale\\n\\n        // Concatena il bytecode e gli argomenti del costruttore\\n        bytes memory bytecodeWithConstructor = abi.encodePacked(\\n            tempByteCode,\\n            constructorArguments\\n        );\\n\\n        // Deploy del contratto con gli argomenti del costruttore\\n        assembly {\\n            addr := create(\\n                0,\\n                add(bytecodeWithConstructor, 0x20),\\n                mload(bytecodeWithConstructor)\\n            )\\n            if iszero(extcodesize(addr)) {\\n                revert(0, 0)\\n            }\\n        }\\n\\n        address feed = addr;\\n\\n        feeds.add(address(feed));\\n\\n        feedStore[msg.sender].add(address(feed));\\n\\n        createdContracts[address(feed)] = true;\\n\\n        emit FeedCreated(address(feed));\\n\\n        return address(feed);\\n    }\\n\\n    function getFeeds() external view returns (address[] memory) {\\n        return feeds.values();\\n    }\\n\\n    function getFeedsOwned(\\n        address user\\n    ) external view returns (address[] memory) {\\n        return feedStore[user].values();\\n    }\\n\\n    function getFeedsInfoOwned(\\n        address user\\n    ) external view returns (Structures.Feed[] memory) {\\n        return _getFeedsInfo(feedStore[user].values());\\n    }\\n\\n    function getFeedInfo(\\n        address user\\n    ) external view returns (Structures.Feed memory) {\\n        return _getFeedInfo(user);\\n    }\\n\\n    function getFeedsInfo() external view returns (Structures.Feed[] memory) {\\n        return _getFeedsInfo(feeds.values());\\n    }\\n\\n    function isContractCreated(\\n        address contractAddress\\n    ) external view returns (bool) {\\n        return createdContracts[contractAddress];\\n    }\\n\\n    function getCreationFee() internal view returns (uint256) {\\n        return IMecenateTreasury(settings.treasuryContract).fixedFee();\\n    }\\n}\\n\",\"keccak256\":\"0x691588a245211f31f51267a5638645fb586bc41f76ff994e43edbef959609f97\",\"license\":\"MIT\"},\"contracts/interfaces/IMecenateFeed.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateFeed {\\n    function getTotalStaked() external view returns (uint256);\\n\\n    function postCount() external view returns (uint256);\\n\\n    function acceptPost(\\n        Structures.Tokens,\\n        uint256 _amount,\\n        address _from\\n    ) external payable;\\n\\n    function getSellerStake() external view returns (uint256);\\n\\n    function getBuyerStake() external view returns (uint256);\\n\\n    function getPaymentRequested() external view returns (uint256);\\n\\n    function getStakeRequested() external view returns (uint256);\\n\\n    function getStatus() external view returns (Structures.PostStatus status);\\n\\n    function getTokenId() external view returns (Structures.Tokens tokenId);\\n\\n    function owner() external view returns (address);\\n\\n    function version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x7eede94ce96f84da172bcd7df3625b818be25c3c94f5f01b4aa631c80c912777\"},\"contracts/interfaces/IMecenateTreasury.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateTreasury {\\r\\n    function globalFee() external view returns (uint256);\\r\\n\\r\\n    function fixedFee() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf544878bba8e01c837110d06eac56042957d59c593ba9083f686ef02aa9276a1\"},\"contracts/interfaces/IMecenateUsers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateUsers {\\n    function registerUser(bytes memory metadata) external;\\n\\n    function getUsers() external view returns (address[] memory);\\n\\n    function getUserCount() external view returns (uint256);\\n\\n    function getUserAt(uint256 index) external view returns (address);\\n\\n    function checkifUserExist(address userAddress) external view returns (bool);\\n\\n    function getPaginatedUsers(\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) external view returns (address[] memory);\\n\\n    function getUserMetadata(\\n        address userAddress\\n    ) external view returns (Structures.User memory);\\n\\n    function getUserPublicKey(\\n        address userAddress\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xf0ff65dbfea12d90cf106325b9478e31b284045327e5f0974db5374b8789e93c\",\"license\":\"MIT\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\n * @title Structures\\n * @dev This library defines various data structures used in the Mecenate platform.\\n */\\npragma solidity 0.8.19;\\n\\nlibrary Structures {\\n    enum PostStatus {\\n        Waiting,\\n        Proposed,\\n        Accepted,\\n        Submitted,\\n        Finalized,\\n        Punished,\\n        Revealed,\\n        Renounced\\n    }\\n\\n    enum Tokens {\\n        NaN,\\n        MUSE,\\n        DAI\\n    }\\n\\n    enum PostType {\\n        Text,\\n        Image,\\n        Video,\\n        Audio,\\n        File\\n    }\\n    enum PostDuration {\\n        OneDay,\\n        ThreeDays,\\n        OneWeek,\\n        TwoWeeks,\\n        OneMonth\\n    }\\n\\n    struct FeedSettings {\\n        uint256 punishmentRatio;\\n        uint256 postCount;\\n        address usersModuleContract;\\n        address factoryContract;\\n        address router;\\n        string version;\\n    }\\n\\n    struct FactorySettings {\\n        address treasuryContract;\\n        address usersModuleContract;\\n        address easContract;\\n        bytes32 easSchema;\\n        address museToken;\\n        address daiToken;\\n        address wethToken;\\n        address router;\\n    }\\n\\n    /**\\n     * @dev Struct representing a post on the Mecenate platform.\\n     */\\n    struct Post {\\n        User creator;\\n        PostData postdata;\\n    }\\n\\n    /**\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\n     */\\n    struct PostData {\\n        PostSettings settings;\\n        PostEscrow escrow;\\n        PostEncryptedData data;\\n    }\\n\\n    /**\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\n     */\\n    struct PostEncryptedData {\\n        bytes encryptedData;\\n        bytes encryptedKey;\\n        bytes decryptedData;\\n    }\\n\\n    /**\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettings {\\n        PostStatus status;\\n        PostType postType;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n        uint256 duration;\\n        Tokens tokenId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the private settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettingPrivate {\\n        address buyerAddress;\\n        address sellerAddress;\\n    }\\n\\n    /**\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\n     */\\n    struct PostEscrow {\\n        uint256 stake;\\n        uint256 payment;\\n        uint256 punishment;\\n        uint256 penalty;\\n    }\\n\\n    /**\\n     * @dev Struct representing a user on the Mecenate platform.\\n     */\\n    struct User {\\n        address evmAddress;\\n        bytes sismoVaultId;\\n        bytes publicKey;\\n    }\\n\\n    /**\\n     * @dev Struct representing a feed on the Mecenate platform.\\n     */\\n    struct Feed {\\n        address contractAddress;\\n        address owner;\\n        uint256 sellerStake;\\n        uint256 buyerStake;\\n        uint256 totalStake;\\n        uint256 postCount;\\n        uint256 paymentRequested;\\n        uint256 stakeRequested;\\n        PostStatus status;\\n        Tokens tokenId;\\n        string version;\\n    }\\n\\n    /**\\n     * @dev Struct representing a bay request on the Mecenate platform.\\n     */\\n    struct BayRequest {\\n        bytes request;\\n        uint256 payment;\\n        uint256 stake;\\n        address postAddress;\\n        bool accepted;\\n        uint256 postCount;\\n        Tokens tokenId;\\n        address buyerAddress;\\n    }\\n}\\n\",\"keccak256\":\"0xba5512854a95a55b3d6c7940cd22516d7d7f1d464263de250dfea4750de44152\"},\"contracts/modules/FeedViewer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../library/Structures.sol\\\";\\nimport \\\"../interfaces/IMecenateFeed.sol\\\";\\n\\ncontract FeedViewer {\\n    function _getFeedInfo(\\n        address feed\\n    ) internal view returns (Structures.Feed memory) {\\n        Structures.Feed memory f;\\n\\n        IMecenateFeed mecenateFeed = IMecenateFeed(feed);\\n\\n        f.contractAddress = feed;\\n        f.owner = mecenateFeed.owner();\\n        f.sellerStake = mecenateFeed.getSellerStake();\\n        f.buyerStake = mecenateFeed.getBuyerStake();\\n        f.totalStake = mecenateFeed.getTotalStaked();\\n        f.postCount = mecenateFeed.postCount();\\n        f.paymentRequested = mecenateFeed.getPaymentRequested();\\n        f.stakeRequested = mecenateFeed.getStakeRequested();\\n        f.status = mecenateFeed.getStatus();\\n        f.tokenId = mecenateFeed.getTokenId();\\n        f.version = mecenateFeed.version();\\n\\n        return f;\\n    }\\n\\n    function _getFeedsInfo(\\n        address[] memory _feeds\\n    ) internal view returns (Structures.Feed[] memory) {\\n        uint256 len = _feeds.length;\\n        Structures.Feed[] memory f = new Structures.Feed[](len);\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            f[i] = _getFeedInfo(_feeds[i]);\\n        }\\n\\n        return f;\\n    }\\n}\\n\",\"keccak256\":\"0x540b48b96bd4f84311931777ce979ebbd6eb6c14eab2cdd368b9a5b1777c7bdf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60808060405234620000e85760008054336001600160a01b0319821681178355906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a3600f546001918282811c92168015620000dd575b6020831014620000c957601f82116200009c575b600c65076322e302e360d41b01600f556010805460ff191690556122048481620000ee8239f35b600f8152601f60208220920160051c8201915b828110620000be575062000075565b8181558301620000af565b634e487b7160e01b81526022600452602490fd5b91607f169162000061565b600080fdfe6080604052600436101561001257600080fd5b60003560e01c8063067bd3b4146101b257806318da0011146101ad5780633ec4f23d146101a85780634b57b0be146101a357806354a12c9b1461019e57806354fd4d50146101995780635dc96d1614610194578063715018a61461018f5780637b2c835f1461018a5780637fe955d4146101855780638da5cb5b146101805780639496d7f11461017b578063ad86132414610176578063b2a2e9ca14610171578063be22f5461461016c578063ca5b4e5c14610167578063cd77b52c14610162578063cedf3ba214610153578063d223a5641461015d578063d570a66d14610158578063e58fdd0414610153578063e86ef3531461014e578063e9318b4714610149578063f2fde38b14610144578063f77800e51461013f5763f887ea401461013a57600080fd5b6111c9565b611195565b61107a565b61100a565b610f8d565b610eaf565b610f48565b610f0f565b610e7b565b610bcd565b610b99565b610b10565b610a74565b6107b6565b610764565b6106de565b610634565b6105ab565b610588565b610485565b610341565b610227565b610209565b6101d5565b346101d05760006003193601126101d0576020601154604051908152f35b600080fd5b346101d05760006003193601126101d057602073ffffffffffffffffffffffffffffffffffffffff60035416604051908152f35b346101d05760006003193601126101d0576020600654604051908152f35b346101d05760006003193601126101d057602073ffffffffffffffffffffffffffffffffffffffff60095416604051908152f35b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176102cb57604052565b61025b565b67ffffffffffffffff81116102cb57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b929192610316826102d0565b91610324604051938461028a565b8294818452818301116101d0578281602093846000960137010152565b346101d05760406003193601126101d05767ffffffffffffffff6004358181116101d057366023820112156101d05761038490369060248160040135910161030a565b6024359182116101d057366023830112156101d0576103b06103b692369060248160040135910161030a565b9061127c565b005b90600182811c92168015610401575b60208310146103d257565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f16916103c7565b60005b83811061041e5750506000910152565b818101518382015260200161040e565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f60209361046a8151809281875287808801910161040b565b0116010190565b90602061048292818152019061042e565b90565b346101d057600080600319360112610585576040519080600f546104a8816103b8565b8085529160019180831690811561053d57506001146104e2575b6104de856104d28187038261028a565b60405191829182610471565b0390f35b9250600f83527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8025b8284106105255750505081016020016104d2826104de6104c2565b8054602085870181019190915290930192810161050a565b8695506104de969350602092506104d29491507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001682840152151560051b82010192936104c2565b80fd5b346101d05760006003193601126101d057602060ff601054166040519015158152f35b346101d057600080600319360112610585576105c56111fd565b8073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b801515036101d057565b346101d05760206003193601126101d0576004356106518161062a565b6106596111fd565b60ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00601054169115151617601055600080f35b6020908160408183019282815285518094520193019160005b8281106106b4575050505090565b835173ffffffffffffffffffffffffffffffffffffffff16855293810193928101926001016106a6565b346101d05760006003193601126101d05760405180600191825492838252602080920193816000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6926000905b82821061074f576104de86610743818a038261028a565b6040519182918261068d565b8454875295860195938301939083019061072c565b346101d05760006003193601126101d057602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b73ffffffffffffffffffffffffffffffffffffffff8116036101d057565b346101d0576101006003193601126101d0576103b66004356107d781610798565b602435906107e482610798565b6044356107f081610798565b608435906107fd82610798565b60a4359061080a82610798565b60c4359161081783610798565b60e4359561082487610798565b61082c6111fd565b73ffffffffffffffffffffffffffffffffffffffff94858094818094817fffffffffffffffffffffffff00000000000000000000000000000000000000009b168b6003541617600355168960045416176004551687600554161760055560643560065516856009541617600955168360075416176007551690600854161760085573ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000600a541617600a55565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b90600882101561092a5752565b6108ee565b90600382101561092a5752565b805173ffffffffffffffffffffffffffffffffffffffff168252610482919060208181015173ffffffffffffffffffffffffffffffffffffffff169083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526109ca610100808301519084019061091d565b6109dd610120808301519084019061092f565b61014080910151916101608092820152019061042e565b602080820190808352835180925260408301928160408460051b8301019501936000915b848310610a285750505050505090565b9091929394958480610a64837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc086600196030187528a5161093c565b9801930193019194939290610a18565b346101d0576020806003193601126101d05773ffffffffffffffffffffffffffffffffffffffff600435610aa781610798565b16600052600d81526040600020604051918281835491828152019260005281600020916000905b828210610af9576104de610aed87610ae88189038261028a565b612107565b604051918291826109f4565b835485529384019360019384019390910190610ace565b346101d0576020806003193601126101d05773ffffffffffffffffffffffffffffffffffffffff600435610b4381610798565b16600052600d8152604060002090604051908181845491828152019360005281600020916000905b828210610b82576104de856107438189038261028a565b835486529485019460019384019390910190610b6b565b346101d05760006003193601126101d057602073ffffffffffffffffffffffffffffffffffffffff60085416604051908152f35b6000806003193601126105855760045473ffffffffffffffffffffffffffffffffffffffff1660405180610c06308433602085016115eb565b03610c377fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09182810184528361028a565b6040517f48990fcc000000000000000000000000000000000000000000000000000000008152336004820152906020828060248101038173ffffffffffffffffffffffffffffffffffffffff8098165afa908115610e7657610ca7610d5292610d46948891610e48575b5061170e565b610cba610cb2611b58565b341015611773565b610d108680808034610d00610ce7610ce760035473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b5af1610d0a6117d8565b50611808565b610d23610d1e60115461186d565b601155565b610d2b6118c9565b93604051938491610d406020840180986119a3565b906119a3565b0390810183528261028a565b519083f090813b15610e4457816104de917fb658664a46408e6670a38ec7ea8b7614c9e2916184dff2fad99d3a7a3491ca7d949316610d9081611a09565b50610dc482610dbf3373ffffffffffffffffffffffffffffffffffffffff16600052600d602052604060002090565b6119ba565b50610e1d610df28373ffffffffffffffffffffffffffffffffffffffff16600052600e602052604060002090565b60017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055565b60405194848695a273ffffffffffffffffffffffffffffffffffffffff1682526020820190565b8280fd5b610e69915060203d8111610e6f575b610e61818361028a565b8101906116ed565b38610ca1565b503d610e57565b611702565b346101d05760006003193601126101d057602073ffffffffffffffffffffffffffffffffffffffff60055416604051908152f35b346101d05760206003193601126101d05773ffffffffffffffffffffffffffffffffffffffff600435610ee181610798565b16600052600e602052602060ff604060002054166040519015158152f35b6004359060ff821682036101d057565b346101d05760206003193601126101d05760ff610f2a610eff565b16600052600c602052602062ffffff60406000205416604051908152f35b346101d05760206003193601126101d0576104de610f79600435610f6b81610798565b610f73611ae5565b50611c97565b60405191829160208352602083019061093c565b346101d05760006003193601126101d05760405180600190815491828252602080920192816000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6926000905b828210610ff5576104de610aed88610ae8818a038261028a565b84548652948501949383019390830190610fdb565b346101d05760406003193601126101d057611023610eff565b6024359062ffffff82168092036101d05760ff9061103f6111fd565b16600052600c6020526040600020907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000825416179055600080f35b346101d05760206003193601126101d05760043561109781610798565b61109f6111fd565b73ffffffffffffffffffffffffffffffffffffffff8091168015611111576000918254827fffffffffffffffffffffffff00000000000000000000000000000000000000008216178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b346101d05760006003193601126101d057602073ffffffffffffffffffffffffffffffffffffffff60075416604051908152f35b346101d05760006003193601126101d057602073ffffffffffffffffffffffffffffffffffffffff600a5416604051908152f35b73ffffffffffffffffffffffffffffffffffffffff60005416330361121e57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b906112856111fd565b815167ffffffffffffffff81116102cb576112aa816112a5600b546103b8565b6113f1565b602080601f831160011461130b575081906112fe94600092611300575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c191617600b556114a8565b565b0151905038806112c7565b9192937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0841661135d600b6000527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db990565b936000905b8282106113c25750509160019391856112fe9796941061138b575b505050811b01600b556114a8565b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c1916905538808061137d565b80600186978294978701518155019601940190611362565b8181106113e5575050565b600081556001016113da565b90601f82116113fe575050565b6112fe91600b6000527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db9906020601f840160051c83019310611448575b601f0160051c01906113da565b909150819061143b565b90601f821161145f575050565b6112fe91600f6000527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802906020601f840160051c8301931061144857601f0160051c01906113da565b90815167ffffffffffffffff81116102cb576114ce816114c9600f546103b8565b611452565b602080601f8311600114611527575081929360009261151c575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c191617600f55565b0151905038806114e8565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0831694611578600f6000527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80290565b926000905b8782106115d357505083600195961061159c575b505050811b01600f55565b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c19169055388080611591565b8060018596829496860151815501950193019061157d565b9273ffffffffffffffffffffffffffffffffffffffff809216845281602093168385015216604083015260806060830152600091600f549161162c836103b8565b9283608084015260019081811690816000146116ab5750600114611652575b5050505090565b600f60009081529394507f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8025b8585106116975750505060a0925001013880808061164b565b805485850160a0015293820193810161167e565b91505060a094507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091509291921683830152151560051b01013880808061164b565b908160209103126101d057516104828161062a565b6040513d6000823e3d90fd5b1561171557565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f7573657220646f6573206e6f74206578697374000000000000000000000000006044820152fd5b1561177a57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f454e4f5547485f4645450000000000000000000000000000000000006044820152fd5b3d15611803573d906117e9826102d0565b916117f7604051938461028a565b82523d6000602084013e565b606090565b1561180f57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f43414c4c5f4641494c45440000000000000000000000000000000000000000006044820152fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461189a5760010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60405190600082600b54916118dd836103b8565b808352926001908181169081156119635750600114611904575b506112fe9250038361028a565b600b600090815291507f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db95b84831061194857506112fe9350508101602001386118f7565b81935090816020925483858a0101520191019091859261192f565b602093506112fe9592507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b820101386118f7565b906119b66020928281519485920161040b565b0190565b73ffffffffffffffffffffffffffffffffffffffff610482921690611a8a565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b80600052600260205260406000205415600014611a8457600154680100000000000000008110156102cb576001810180600155811015611a7f5781907fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60155600154906000526002602052604060002055600190565b6119da565b50600090565b60008281526001820160208190526040822054611ade57825492680100000000000000008410156102cb5760018401808255841015611a7f5784604094828552602085200155549382526020522055600190565b5091505090565b60405190610160820182811067ffffffffffffffff8211176102cb57604052606061014083600080825280602083015280604083015280848301528060808301528060a08301528060c08301528060e0830152806101008301526101208201520152565b908160209103126101d0575190565b6004602073ffffffffffffffffffffffffffffffffffffffff60035416604051928380927f91792d5b0000000000000000000000000000000000000000000000000000000082525afa908115610e7657600091611bb3575090565b610482915060203d8111611bd4575b611bcc818361028a565b810190611b49565b503d611bc2565b908160209103126101d0575161048281610798565b908160209103126101d0575160088110156101d05790565b600882101561092a5752565b908160209103126101d0575160038110156101d05790565b600382101561092a5752565b6020818303126101d05780519067ffffffffffffffff82116101d0570181601f820112156101d0578051611c6b816102d0565b92611c79604051948561028a565b818452602082840101116101d057610482916020808501910161040b565b611c9f611ae5565b50611ca8611ae5565b73ffffffffffffffffffffffffffffffffffffffff90911680825260408051917f8da5cb5b00000000000000000000000000000000000000000000000000000000835260209160049383818681865afa8015610e7657611d27916000916120ae575b5073ffffffffffffffffffffffffffffffffffffffff1686850152565b80517f5c63ed6900000000000000000000000000000000000000000000000000000000815283818681865afa908115610e7657600091612091575b508186015280517f4c38d87700000000000000000000000000000000000000000000000000000000815283818681865afa908115610e7657600091612074575b50606086015280517f0917e77600000000000000000000000000000000000000000000000000000000815283818681865afa908115610e7657600091612057575b50608086015280517f17906c2e00000000000000000000000000000000000000000000000000000000815283818681865afa908115610e765760009161203a575b5060a086015280517fd24e0c8700000000000000000000000000000000000000000000000000000000815283818681865afa908115610e765760009161201d575b5060c086015280517ffaeb5e1700000000000000000000000000000000000000000000000000000000815283818681865afa908115610e7657600091612000575b5060e086015280517f4e69d56000000000000000000000000000000000000000000000000000000000815283818681865afa8015610e7657611ef591600091611fd3575b506101008701611c08565b8051927f010a38f500000000000000000000000000000000000000000000000000000000845280848681865afa8015610e7657600094611f42928692611fa6575b50506101208701611c2c565b51928380927f54fd4d500000000000000000000000000000000000000000000000000000000082525afa908115610e7657600091611f85575b5061014082015290565b611fa0913d8091833e611f98818361028a565b810190611c38565b38611f7b565b611fc59250803d10611fcc575b611fbd818361028a565b810190611c14565b3880611f36565b503d611fb3565b611ff39150853d8711611ff9575b611feb818361028a565b810190611bf0565b38611eea565b503d611fe1565b6120179150843d8611611bd457611bcc818361028a565b38611ea6565b6120349150843d8611611bd457611bcc818361028a565b38611e65565b6120519150843d8611611bd457611bcc818361028a565b38611e24565b61206e9150843d8611611bd457611bcc818361028a565b38611de3565b61208b9150843d8611611bd457611bcc818361028a565b38611da2565b6120a89150843d8611611bd457611bcc818361028a565b38611d62565b6120ce9150853d87116120d4575b6120c6818361028a565b810190611bdb565b38611d0a565b503d6120bc565b67ffffffffffffffff81116102cb5760051b60200190565b8051821015611a7f5760209160051b010190565b8051612112816120db565b91612120604051938461028a565b8183527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061214d836120db565b0160005b8181106121b757505060005b82811061216a5750505090565b8061219773ffffffffffffffffffffffffffffffffffffffff6121906121b294866120f3565b5116611c97565b6121a182876120f3565b526121ac81866120f3565b5061186d565b61215d565b6020906121c2611ae5565b8282880101520161215156fea2646970667358221220c2d6318c1cceb647a57093febaf6fdc535d4cdced14093c2333cb1d50a1236c964736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c8063067bd3b4146101b257806318da0011146101ad5780633ec4f23d146101a85780634b57b0be146101a357806354a12c9b1461019e57806354fd4d50146101995780635dc96d1614610194578063715018a61461018f5780637b2c835f1461018a5780637fe955d4146101855780638da5cb5b146101805780639496d7f11461017b578063ad86132414610176578063b2a2e9ca14610171578063be22f5461461016c578063ca5b4e5c14610167578063cd77b52c14610162578063cedf3ba214610153578063d223a5641461015d578063d570a66d14610158578063e58fdd0414610153578063e86ef3531461014e578063e9318b4714610149578063f2fde38b14610144578063f77800e51461013f5763f887ea401461013a57600080fd5b6111c9565b611195565b61107a565b61100a565b610f8d565b610eaf565b610f48565b610f0f565b610e7b565b610bcd565b610b99565b610b10565b610a74565b6107b6565b610764565b6106de565b610634565b6105ab565b610588565b610485565b610341565b610227565b610209565b6101d5565b346101d05760006003193601126101d0576020601154604051908152f35b600080fd5b346101d05760006003193601126101d057602073ffffffffffffffffffffffffffffffffffffffff60035416604051908152f35b346101d05760006003193601126101d0576020600654604051908152f35b346101d05760006003193601126101d057602073ffffffffffffffffffffffffffffffffffffffff60095416604051908152f35b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176102cb57604052565b61025b565b67ffffffffffffffff81116102cb57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b929192610316826102d0565b91610324604051938461028a565b8294818452818301116101d0578281602093846000960137010152565b346101d05760406003193601126101d05767ffffffffffffffff6004358181116101d057366023820112156101d05761038490369060248160040135910161030a565b6024359182116101d057366023830112156101d0576103b06103b692369060248160040135910161030a565b9061127c565b005b90600182811c92168015610401575b60208310146103d257565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f16916103c7565b60005b83811061041e5750506000910152565b818101518382015260200161040e565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f60209361046a8151809281875287808801910161040b565b0116010190565b90602061048292818152019061042e565b90565b346101d057600080600319360112610585576040519080600f546104a8816103b8565b8085529160019180831690811561053d57506001146104e2575b6104de856104d28187038261028a565b60405191829182610471565b0390f35b9250600f83527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8025b8284106105255750505081016020016104d2826104de6104c2565b8054602085870181019190915290930192810161050a565b8695506104de969350602092506104d29491507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001682840152151560051b82010192936104c2565b80fd5b346101d05760006003193601126101d057602060ff601054166040519015158152f35b346101d057600080600319360112610585576105c56111fd565b8073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b801515036101d057565b346101d05760206003193601126101d0576004356106518161062a565b6106596111fd565b60ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00601054169115151617601055600080f35b6020908160408183019282815285518094520193019160005b8281106106b4575050505090565b835173ffffffffffffffffffffffffffffffffffffffff16855293810193928101926001016106a6565b346101d05760006003193601126101d05760405180600191825492838252602080920193816000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6926000905b82821061074f576104de86610743818a038261028a565b6040519182918261068d565b8454875295860195938301939083019061072c565b346101d05760006003193601126101d057602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b73ffffffffffffffffffffffffffffffffffffffff8116036101d057565b346101d0576101006003193601126101d0576103b66004356107d781610798565b602435906107e482610798565b6044356107f081610798565b608435906107fd82610798565b60a4359061080a82610798565b60c4359161081783610798565b60e4359561082487610798565b61082c6111fd565b73ffffffffffffffffffffffffffffffffffffffff94858094818094817fffffffffffffffffffffffff00000000000000000000000000000000000000009b168b6003541617600355168960045416176004551687600554161760055560643560065516856009541617600955168360075416176007551690600854161760085573ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000600a541617600a55565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b90600882101561092a5752565b6108ee565b90600382101561092a5752565b805173ffffffffffffffffffffffffffffffffffffffff168252610482919060208181015173ffffffffffffffffffffffffffffffffffffffff169083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526109ca610100808301519084019061091d565b6109dd610120808301519084019061092f565b61014080910151916101608092820152019061042e565b602080820190808352835180925260408301928160408460051b8301019501936000915b848310610a285750505050505090565b9091929394958480610a64837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc086600196030187528a5161093c565b9801930193019194939290610a18565b346101d0576020806003193601126101d05773ffffffffffffffffffffffffffffffffffffffff600435610aa781610798565b16600052600d81526040600020604051918281835491828152019260005281600020916000905b828210610af9576104de610aed87610ae88189038261028a565b612107565b604051918291826109f4565b835485529384019360019384019390910190610ace565b346101d0576020806003193601126101d05773ffffffffffffffffffffffffffffffffffffffff600435610b4381610798565b16600052600d8152604060002090604051908181845491828152019360005281600020916000905b828210610b82576104de856107438189038261028a565b835486529485019460019384019390910190610b6b565b346101d05760006003193601126101d057602073ffffffffffffffffffffffffffffffffffffffff60085416604051908152f35b6000806003193601126105855760045473ffffffffffffffffffffffffffffffffffffffff1660405180610c06308433602085016115eb565b03610c377fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09182810184528361028a565b6040517f48990fcc000000000000000000000000000000000000000000000000000000008152336004820152906020828060248101038173ffffffffffffffffffffffffffffffffffffffff8098165afa908115610e7657610ca7610d5292610d46948891610e48575b5061170e565b610cba610cb2611b58565b341015611773565b610d108680808034610d00610ce7610ce760035473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b5af1610d0a6117d8565b50611808565b610d23610d1e60115461186d565b601155565b610d2b6118c9565b93604051938491610d406020840180986119a3565b906119a3565b0390810183528261028a565b519083f090813b15610e4457816104de917fb658664a46408e6670a38ec7ea8b7614c9e2916184dff2fad99d3a7a3491ca7d949316610d9081611a09565b50610dc482610dbf3373ffffffffffffffffffffffffffffffffffffffff16600052600d602052604060002090565b6119ba565b50610e1d610df28373ffffffffffffffffffffffffffffffffffffffff16600052600e602052604060002090565b60017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055565b60405194848695a273ffffffffffffffffffffffffffffffffffffffff1682526020820190565b8280fd5b610e69915060203d8111610e6f575b610e61818361028a565b8101906116ed565b38610ca1565b503d610e57565b611702565b346101d05760006003193601126101d057602073ffffffffffffffffffffffffffffffffffffffff60055416604051908152f35b346101d05760206003193601126101d05773ffffffffffffffffffffffffffffffffffffffff600435610ee181610798565b16600052600e602052602060ff604060002054166040519015158152f35b6004359060ff821682036101d057565b346101d05760206003193601126101d05760ff610f2a610eff565b16600052600c602052602062ffffff60406000205416604051908152f35b346101d05760206003193601126101d0576104de610f79600435610f6b81610798565b610f73611ae5565b50611c97565b60405191829160208352602083019061093c565b346101d05760006003193601126101d05760405180600190815491828252602080920192816000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6926000905b828210610ff5576104de610aed88610ae8818a038261028a565b84548652948501949383019390830190610fdb565b346101d05760406003193601126101d057611023610eff565b6024359062ffffff82168092036101d05760ff9061103f6111fd565b16600052600c6020526040600020907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000825416179055600080f35b346101d05760206003193601126101d05760043561109781610798565b61109f6111fd565b73ffffffffffffffffffffffffffffffffffffffff8091168015611111576000918254827fffffffffffffffffffffffff00000000000000000000000000000000000000008216178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b346101d05760006003193601126101d057602073ffffffffffffffffffffffffffffffffffffffff60075416604051908152f35b346101d05760006003193601126101d057602073ffffffffffffffffffffffffffffffffffffffff600a5416604051908152f35b73ffffffffffffffffffffffffffffffffffffffff60005416330361121e57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b906112856111fd565b815167ffffffffffffffff81116102cb576112aa816112a5600b546103b8565b6113f1565b602080601f831160011461130b575081906112fe94600092611300575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c191617600b556114a8565b565b0151905038806112c7565b9192937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0841661135d600b6000527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db990565b936000905b8282106113c25750509160019391856112fe9796941061138b575b505050811b01600b556114a8565b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c1916905538808061137d565b80600186978294978701518155019601940190611362565b8181106113e5575050565b600081556001016113da565b90601f82116113fe575050565b6112fe91600b6000527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db9906020601f840160051c83019310611448575b601f0160051c01906113da565b909150819061143b565b90601f821161145f575050565b6112fe91600f6000527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802906020601f840160051c8301931061144857601f0160051c01906113da565b90815167ffffffffffffffff81116102cb576114ce816114c9600f546103b8565b611452565b602080601f8311600114611527575081929360009261151c575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260011b9260031b1c191617600f55565b0151905038806114e8565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0831694611578600f6000527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80290565b926000905b8782106115d357505083600195961061159c575b505050811b01600f55565b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c19169055388080611591565b8060018596829496860151815501950193019061157d565b9273ffffffffffffffffffffffffffffffffffffffff809216845281602093168385015216604083015260806060830152600091600f549161162c836103b8565b9283608084015260019081811690816000146116ab5750600114611652575b5050505090565b600f60009081529394507f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8025b8585106116975750505060a0925001013880808061164b565b805485850160a0015293820193810161167e565b91505060a094507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091509291921683830152151560051b01013880808061164b565b908160209103126101d057516104828161062a565b6040513d6000823e3d90fd5b1561171557565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f7573657220646f6573206e6f74206578697374000000000000000000000000006044820152fd5b1561177a57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e4f545f454e4f5547485f4645450000000000000000000000000000000000006044820152fd5b3d15611803573d906117e9826102d0565b916117f7604051938461028a565b82523d6000602084013e565b606090565b1561180f57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f43414c4c5f4641494c45440000000000000000000000000000000000000000006044820152fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461189a5760010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60405190600082600b54916118dd836103b8565b808352926001908181169081156119635750600114611904575b506112fe9250038361028a565b600b600090815291507f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db95b84831061194857506112fe9350508101602001386118f7565b81935090816020925483858a0101520191019091859261192f565b602093506112fe9592507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b820101386118f7565b906119b66020928281519485920161040b565b0190565b73ffffffffffffffffffffffffffffffffffffffff610482921690611a8a565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b80600052600260205260406000205415600014611a8457600154680100000000000000008110156102cb576001810180600155811015611a7f5781907fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60155600154906000526002602052604060002055600190565b6119da565b50600090565b60008281526001820160208190526040822054611ade57825492680100000000000000008410156102cb5760018401808255841015611a7f5784604094828552602085200155549382526020522055600190565b5091505090565b60405190610160820182811067ffffffffffffffff8211176102cb57604052606061014083600080825280602083015280604083015280848301528060808301528060a08301528060c08301528060e0830152806101008301526101208201520152565b908160209103126101d0575190565b6004602073ffffffffffffffffffffffffffffffffffffffff60035416604051928380927f91792d5b0000000000000000000000000000000000000000000000000000000082525afa908115610e7657600091611bb3575090565b610482915060203d8111611bd4575b611bcc818361028a565b810190611b49565b503d611bc2565b908160209103126101d0575161048281610798565b908160209103126101d0575160088110156101d05790565b600882101561092a5752565b908160209103126101d0575160038110156101d05790565b600382101561092a5752565b6020818303126101d05780519067ffffffffffffffff82116101d0570181601f820112156101d0578051611c6b816102d0565b92611c79604051948561028a565b818452602082840101116101d057610482916020808501910161040b565b611c9f611ae5565b50611ca8611ae5565b73ffffffffffffffffffffffffffffffffffffffff90911680825260408051917f8da5cb5b00000000000000000000000000000000000000000000000000000000835260209160049383818681865afa8015610e7657611d27916000916120ae575b5073ffffffffffffffffffffffffffffffffffffffff1686850152565b80517f5c63ed6900000000000000000000000000000000000000000000000000000000815283818681865afa908115610e7657600091612091575b508186015280517f4c38d87700000000000000000000000000000000000000000000000000000000815283818681865afa908115610e7657600091612074575b50606086015280517f0917e77600000000000000000000000000000000000000000000000000000000815283818681865afa908115610e7657600091612057575b50608086015280517f17906c2e00000000000000000000000000000000000000000000000000000000815283818681865afa908115610e765760009161203a575b5060a086015280517fd24e0c8700000000000000000000000000000000000000000000000000000000815283818681865afa908115610e765760009161201d575b5060c086015280517ffaeb5e1700000000000000000000000000000000000000000000000000000000815283818681865afa908115610e7657600091612000575b5060e086015280517f4e69d56000000000000000000000000000000000000000000000000000000000815283818681865afa8015610e7657611ef591600091611fd3575b506101008701611c08565b8051927f010a38f500000000000000000000000000000000000000000000000000000000845280848681865afa8015610e7657600094611f42928692611fa6575b50506101208701611c2c565b51928380927f54fd4d500000000000000000000000000000000000000000000000000000000082525afa908115610e7657600091611f85575b5061014082015290565b611fa0913d8091833e611f98818361028a565b810190611c38565b38611f7b565b611fc59250803d10611fcc575b611fbd818361028a565b810190611c14565b3880611f36565b503d611fb3565b611ff39150853d8711611ff9575b611feb818361028a565b810190611bf0565b38611eea565b503d611fe1565b6120179150843d8611611bd457611bcc818361028a565b38611ea6565b6120349150843d8611611bd457611bcc818361028a565b38611e65565b6120519150843d8611611bd457611bcc818361028a565b38611e24565b61206e9150843d8611611bd457611bcc818361028a565b38611de3565b61208b9150843d8611611bd457611bcc818361028a565b38611da2565b6120a89150843d8611611bd457611bcc818361028a565b38611d62565b6120ce9150853d87116120d4575b6120c6818361028a565b810190611bdb565b38611d0a565b503d6120bc565b67ffffffffffffffff81116102cb5760051b60200190565b8051821015611a7f5760209160051b010190565b8051612112816120db565b91612120604051938461028a565b8183527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061214d836120db565b0160005b8181106121b757505060005b82811061216a5750505090565b8061219773ffffffffffffffffffffffffffffffffffffffff6121906121b294866120f3565b5116611c97565b6121a182876120f3565b526121ac81866120f3565b5061186d565b61215d565b6020906121c2611ae5565b8282880101520161215156fea2646970667358221220c2d6318c1cceb647a57093febaf6fdc535d4cdced14093c2333cb1d50a1236c964736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9863,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "feeds",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(AddressSet)7773_storage"
      },
      {
        "astId": 9866,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "settings",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(FactorySettings)16571_storage"
      },
      {
        "astId": 9868,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "feedByteCode",
        "offset": 0,
        "slot": "11",
        "type": "t_bytes_storage"
      },
      {
        "astId": 9872,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "routerFee",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint8,t_uint24)"
      },
      {
        "astId": 9877,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "feedStore",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_struct(AddressSet)7773_storage)"
      },
      {
        "astId": 9881,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "createdContracts",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 9884,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "version",
        "offset": 0,
        "slot": "15",
        "type": "t_string_storage"
      },
      {
        "astId": 9887,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "burnEnabled",
        "offset": 0,
        "slot": "16",
        "type": "t_bool"
      },
      {
        "astId": 9889,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "contractCounter",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(AddressSet)7773_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)7773_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint8,t_uint24)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint24)",
        "numberOfBytes": "32",
        "value": "t_uint24"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)7773_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 7772,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)7458_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(FactorySettings)16571_storage": {
        "encoding": "inplace",
        "label": "struct Structures.FactorySettings",
        "members": [
          {
            "astId": 16556,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "treasuryContract",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 16558,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "usersModuleContract",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 16560,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "easContract",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 16562,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "easSchema",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          },
          {
            "astId": 16564,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "museToken",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 16566,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "daiToken",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 16568,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "wethToken",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 16570,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "router",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Set)7458_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 7453,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 7457,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}