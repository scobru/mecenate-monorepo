{
  "address": "0x09cCD9c0a8663405703252A0a5b81b919EBf7C63",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "FeedCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "buildFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "usersModule",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "easContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "easSchema",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "wethTokenAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "museTokenAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "daiTokenAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "routerAddr",
          "type": "address"
        }
      ],
      "name": "changeMultipleSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daiToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "easContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "easSchema",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getFeedInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sellerStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyerStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "postCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "paymentRequested",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeRequested",
              "type": "uint256"
            },
            {
              "internalType": "enum Structures.PostStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "enum Structures.Tokens",
              "name": "tokenId",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "version",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "postId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Structures.Feed",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeds",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeedsInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sellerStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyerStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "postCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "paymentRequested",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeRequested",
              "type": "uint256"
            },
            {
              "internalType": "enum Structures.PostStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "enum Structures.Tokens",
              "name": "tokenId",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "version",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "postId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Structures.Feed[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getFeedsInfoOwned",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sellerStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyerStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "postCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "paymentRequested",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeRequested",
              "type": "uint256"
            },
            {
              "internalType": "enum Structures.PostStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "enum Structures.Tokens",
              "name": "tokenId",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "version",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "postId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct Structures.Feed[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getFeedsOwned",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "tokenId",
          "type": "uint8"
        }
      ],
      "name": "getRouterFee",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "isContractCreated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFeed",
          "type": "address"
        }
      ],
      "name": "isFeed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "major",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minor",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "museToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "patch",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "newBurnEnabled",
          "type": "bool"
        }
      ],
      "name": "setBurnEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "newByteCode",
          "type": "bytes"
        },
        {
          "internalType": "uint8",
          "name": "newMajor",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "newMinor",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "newPatch",
          "type": "uint8"
        }
      ],
      "name": "setFeedByteCode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "tokenId",
          "type": "uint8"
        },
        {
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        }
      ],
      "name": "setRouterFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wethToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x09bf769cb2f4a941915101554a9df721108bebd0fb6420f11973c269c8ac3a59",
  "receipt": {
    "to": null,
    "from": "0x8aA5F726d9F868a21a8bd748E2f1E43bA31eb670",
    "contractAddress": "0x09cCD9c0a8663405703252A0a5b81b919EBf7C63",
    "transactionIndex": 1,
    "gasUsed": "1573988",
    "logsBloom": "0x
    "blockHash": "0xee7ccaa244bc26c149181fc81d0c4d6010899e05842b6d8b54acdc3a018d4d0d",
    "transactionHash": "0x09bf769cb2f4a941915101554a9df721108bebd0fb6420f11973c269c8ac3a59",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 11646840,
        "transactionHash": "0x09bf769cb2f4a941915101554a9df721108bebd0fb6420f11973c269c8ac3a59",
        "address": "0x09cCD9c0a8663405703252A0a5b81b919EBf7C63",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008aa5f726d9f868a21a8bd748e2f1e43ba31eb670"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xee7ccaa244bc26c149181fc81d0c4d6010899e05842b6d8b54acdc3a018d4d0d"
      }
    ],
    "blockNumber": 11646840,
    "cumulativeGasUsed": "1620841",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "92732d8dc5d2dedc510f7d508169f721",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"FeedCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"buildFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usersModule\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"easContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"easSchema\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"wethTokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"museTokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiTokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"routerAddr\",\"type\":\"address\"}],\"name\":\"changeMultipleSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"easContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"easSchema\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getFeedInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellerStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentRequested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeRequested\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"postId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.Feed\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeds\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeedsInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellerStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentRequested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeRequested\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"postId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.Feed[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getFeedsInfoOwned\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellerStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentRequested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeRequested\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"postId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.Feed[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getFeedsOwned\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"name\":\"getRouterFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"isContractCreated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeed\",\"type\":\"address\"}],\"name\":\"isFeed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"major\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minor\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"museToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"patch\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newBurnEnabled\",\"type\":\"bool\"}],\"name\":\"setBurnEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"newByteCode\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"newMajor\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"newMinor\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"newPatch\",\"type\":\"uint8\"}],\"name\":\"setFeedByteCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"setRouterFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/factories/MecenateFeedFactory.sol\":\"MecenateFeedFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/factories/MecenateFeedFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../interfaces/IMecenateUsers.sol\\\";\\nimport \\\"../interfaces/IMecenateTreasury.sol\\\";\\nimport \\\"../modules/FeedViewer.sol\\\";\\n\\ncontract MecenateFeedFactory is Ownable, FeedViewer {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    EnumerableSet.AddressSet internal feeds;\\n\\n    Structures.FactorySettings internal settings;\\n\\n    bytes internal feedByteCode;\\n\\n    mapping(uint8 => uint24) internal routerFee;\\n\\n    mapping(address => EnumerableSet.AddressSet) internal feedStore;\\n\\n    mapping(address => bool) internal createdContracts;\\n\\n    string public version = \\\"v2.0.0\\\"; // Iitialized\\n\\n    bool public burnEnabled = false;\\n\\n    uint256 public contractCounter;\\n\\n    event FeedCreated(address indexed addr);\\n\\n    uint8 public major;\\n    uint8 public minor;\\n    uint8 public patch;\\n\\n    function treasuryContract() external view returns (address) {\\n        return settings.treasuryContract;\\n    }\\n\\n    function easSchema() external view returns (bytes32) {\\n        return settings.easSchema;\\n    }\\n\\n    function easContract() external view returns (address) {\\n        return settings.easContract;\\n    }\\n\\n    function daiToken() external view returns (address) {\\n        return settings.daiToken;\\n    }\\n\\n    function wethToken() external view returns (address) {\\n        return settings.wethToken;\\n    }\\n\\n    function museToken() external view returns (address) {\\n        return settings.museToken;\\n    }\\n\\n    function router() external view returns (address) {\\n        return settings.router;\\n    }\\n\\n    function getRouterFee(uint8 tokenId) external view returns (uint24) {\\n        return routerFee[tokenId];\\n    }\\n\\n    function setRouterFee(uint8 tokenId, uint24 fee) external onlyOwner {\\n        routerFee[tokenId] = fee;\\n    }\\n\\n    function setBurnEnabled(bool newBurnEnabled) external onlyOwner {\\n        burnEnabled = newBurnEnabled;\\n    }\\n\\n    function isFeed(address newFeed) external view returns (bool) {\\n        return createdContracts[newFeed];\\n    }\\n\\n    function changeMultipleSettings(\\n        address treasury,\\n        address usersModule,\\n        address easContract,\\n        bytes32 easSchema,\\n        address wethTokenAddr,\\n        address museTokenAddr,\\n        address daiTokenAddr,\\n        address routerAddr\\n    ) external onlyOwner {\\n        settings.treasuryContract = treasury;\\n        settings.usersModuleContract = usersModule;\\n        settings.easContract = easContract;\\n        settings.easSchema = easSchema;\\n        settings.wethToken = wethTokenAddr;\\n        settings.museToken = museTokenAddr;\\n        settings.daiToken = daiTokenAddr;\\n        settings.router = routerAddr;\\n    }\\n\\n    function setFeedByteCode(\\n        bytes memory newByteCode,\\n        uint8 newMajor,\\n        uint8 newMinor,\\n        uint8 newPatch\\n    ) external onlyOwner {\\n        major = newMajor;\\n        minor = newMinor;\\n        patch = newPatch;\\n        feedByteCode = newByteCode;\\n    }\\n\\n    function buildFeed() external payable returns (address) {\\n        bytes memory constructorArguments = abi.encode(\\n            msg.sender,\\n            settings.usersModuleContract,\\n            address(this),\\n            major,\\n            minor,\\n            patch\\n        );\\n\\n        require(\\n            IMecenateUsers(settings.usersModuleContract).checkifUserExist(\\n                msg.sender\\n            ),\\n            \\\"user does not exist\\\"\\n        );\\n\\n        require(msg.value >= getCreationFee(), \\\"NOT_ENOUGH_FEE\\\");\\n\\n        (bool _result, ) = payable(settings.treasuryContract).call{\\n            value: msg.value\\n        }(\\\"\\\");\\n\\n        require(_result, \\\"CALL_FAILED\\\");\\n\\n        contractCounter++;\\n\\n        address addr;\\n\\n        bytes memory tempByteCode = feedByteCode; // Carico la variabile di storage in una variabile locale\\n\\n        // Concatena il bytecode e gli argomenti del costruttore\\n        bytes memory bytecodeWithConstructor = abi.encodePacked(\\n            tempByteCode,\\n            constructorArguments\\n        );\\n\\n        // Deploy del contratto con gli argomenti del costruttore\\n        assembly {\\n            addr := create(\\n                0,\\n                add(bytecodeWithConstructor, 0x20),\\n                mload(bytecodeWithConstructor)\\n            )\\n            if iszero(extcodesize(addr)) {\\n                revert(0, 0)\\n            }\\n        }\\n\\n        address feed = addr;\\n\\n        feeds.add(address(feed));\\n\\n        feedStore[msg.sender].add(address(feed));\\n\\n        createdContracts[address(feed)] = true;\\n\\n        emit FeedCreated(address(feed));\\n\\n        return address(feed);\\n    }\\n\\n    function getFeeds() external view returns (address[] memory) {\\n        return feeds.values();\\n    }\\n\\n    function getFeedsOwned(\\n        address user\\n    ) external view returns (address[] memory) {\\n        return feedStore[user].values();\\n    }\\n\\n    function getFeedsInfoOwned(\\n        address user\\n    ) external view returns (Structures.Feed[] memory) {\\n        return _getFeedsInfo(feedStore[user].values());\\n    }\\n\\n    function getFeedInfo(\\n        address user\\n    ) external view returns (Structures.Feed memory) {\\n        return _getFeedInfo(user);\\n    }\\n\\n    function getFeedsInfo() external view returns (Structures.Feed[] memory) {\\n        return _getFeedsInfo(feeds.values());\\n    }\\n\\n    function isContractCreated(\\n        address contractAddress\\n    ) external view returns (bool) {\\n        return createdContracts[contractAddress];\\n    }\\n\\n    function getCreationFee() internal view returns (uint256) {\\n        return IMecenateTreasury(settings.treasuryContract).fixedFee();\\n    }\\n}\\n\",\"keccak256\":\"0xd83a5dd7bd15ef76eccee48b1d20389b81f1c25c8575172353baca40315b8311\",\"license\":\"MIT\"},\"contracts/interfaces/IMecenateFeed.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateFeed {\\n    function getPost() external view returns (Structures.Post memory);\\n\\n    function getTotalStaked() external view returns (uint256);\\n\\n    function postCount() external view returns (uint256);\\n\\n    function acceptPost(\\n        Structures.Tokens,\\n        uint256 _amount,\\n        address _funder,\\n        address _buyer\\n    ) external payable;\\n\\n    function getSellerStake() external view returns (uint256);\\n\\n    function getBuyerStake() external view returns (uint256);\\n\\n    function getPaymentRequested() external view returns (uint256);\\n\\n    function getStakeRequested() external view returns (uint256);\\n\\n    function getStatus() external view returns (Structures.PostStatus status);\\n\\n    function getTokenId() external view returns (Structures.Tokens tokenId);\\n\\n    function getPostId() external view returns (bytes32);\\n\\n    function getAllPostIds() external view returns (bytes32[] memory);\\n\\n    function getPostTimestamp(\\n        bytes32 postId\\n    ) external view returns (Structures.PostTimestamp memory);\\n\\n    function owner() external view returns (address);\\n\\n    function version() external view returns (string memory);\\n\\n    function getEncryptedPost() external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x6cc5d025bd490b2b4a62b6cf932e7540c8a5744083c468a4e78027a56803b5e8\"},\"contracts/interfaces/IMecenateTreasury.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\ninterface IMecenateTreasury {\\n    function globalFee() external view returns (uint256);\\n\\n    function fixedFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xade0e46553c55f99f424d2a5919ae62ab8f2b0829b0713aa539c2bf27850ed27\"},\"contracts/interfaces/IMecenateUsers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateUsers {\\n    function registerUser(bytes memory metadata) external;\\n\\n    function getUsers() external view returns (address[] memory);\\n\\n    function getUserCount() external view returns (uint256);\\n\\n    function getUserAt(uint256 index) external view returns (address);\\n\\n    function checkifUserExist(address userAddress) external view returns (bool);\\n\\n    function getPaginatedUsers(\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) external view returns (address[] memory);\\n\\n    function getUserMetadata(\\n        address userAddress\\n    ) external view returns (Structures.User memory);\\n\\n    function getUserPublicKey(\\n        address userAddress\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xf0ff65dbfea12d90cf106325b9478e31b284045327e5f0974db5374b8789e93c\",\"license\":\"MIT\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\n * @title Structures\\n * @dev This library defines various data structures used in the Mecenate platform.\\n */\\npragma solidity 0.8.19;\\n\\nlibrary Structures {\\n    enum PostStatus {\\n        Waiting,\\n        Proposed,\\n        Accepted,\\n        Submitted,\\n        Finalized,\\n        Punished,\\n        Revealed,\\n        Renounced\\n    }\\n\\n    enum PostResult {\\n        None,\\n        Valid,\\n        Punished\\n    }\\n\\n    enum Tokens {\\n        NaN,\\n        MUSE,\\n        DAI\\n    }\\n\\n    enum PostType {\\n        Text,\\n        Image,\\n        Video,\\n        Audio,\\n        File\\n    }\\n    enum PostDuration {\\n        OneDay,\\n        ThreeDays,\\n        OneWeek,\\n        TwoWeeks,\\n        OneMonth\\n    }\\n\\n    struct PostTimestamp {\\n        PostResult postResult;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n    }\\n\\n    struct FeedSettings {\\n        uint256 punishmentRatio;\\n        uint256 postCount;\\n        address usersModuleContract;\\n        address factoryContract;\\n        address router;\\n        string version;\\n    }\\n\\n    struct FactorySettings {\\n        address treasuryContract;\\n        address usersModuleContract;\\n        address easContract;\\n        bytes32 easSchema;\\n        address museToken;\\n        address daiToken;\\n        address wethToken;\\n        address router;\\n    }\\n\\n    /**\\n     * @dev Struct representing a post on the Mecenate platform.\\n     */\\n    struct Post {\\n        User creator;\\n        PostData postdata;\\n    }\\n\\n    /**\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\n     */\\n    struct PostData {\\n        PostSettings settings;\\n        PostEscrow escrow;\\n        PostEncryptedData data;\\n    }\\n\\n    /**\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\n     */\\n    struct PostEncryptedData {\\n        bytes encryptedData;\\n        bytes encryptedKey;\\n        bytes decryptedData;\\n    }\\n\\n    /**\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettings {\\n        PostStatus status;\\n        PostType postType;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n        uint256 duration;\\n        Tokens tokenId;\\n        bytes32 postId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\n     */\\n    struct PostEscrow {\\n        address buyer;\\n        address seller;\\n        uint256 stake;\\n        uint256 payment;\\n        uint256 punishment;\\n        uint256 penalty;\\n    }\\n\\n    /**\\n     * @dev Struct representing a user on the Mecenate platform.\\n     */\\n    struct User {\\n        address evmAddress;\\n        bytes sismoVaultId;\\n        bytes publicKey;\\n    }\\n\\n    /**\\n     * @dev Struct representing a feed on the Mecenate platform.\\n     */\\n    struct Feed {\\n        address contractAddress;\\n        address owner;\\n        uint256 sellerStake;\\n        uint256 buyerStake;\\n        uint256 totalStake;\\n        uint256 postCount;\\n        uint256 paymentRequested;\\n        uint256 stakeRequested;\\n        PostStatus status;\\n        Tokens tokenId;\\n        string version;\\n        bytes32 postId;\\n    }\\n\\n    /**\\n     * @dev Struct representing a bay request on the Mecenate platform.\\n     */\\n    struct BayRequest {\\n        bytes request;\\n        uint256 payment;\\n        uint256 stake;\\n        address postAddress;\\n        bool accepted;\\n        uint256 postCount;\\n        Tokens tokenId;\\n        address buyerAddress;\\n        bytes32 postId;\\n    }\\n}\\n\",\"keccak256\":\"0x7a1b8af538bd6b10ffdcd1015cc3bd8e509d38e4db62d8e304e91e889a580a1c\"},\"contracts/modules/FeedViewer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../library/Structures.sol\\\";\\nimport \\\"../interfaces/IMecenateFeed.sol\\\";\\n\\ncontract FeedViewer {\\n    function _getFeedInfo(\\n        address feed\\n    ) internal view returns (Structures.Feed memory) {\\n        Structures.Feed memory f;\\n\\n        IMecenateFeed mecenateFeed = IMecenateFeed(feed);\\n\\n        f.contractAddress = feed;\\n        f.owner = mecenateFeed.owner();\\n        f.sellerStake = mecenateFeed.getSellerStake();\\n        f.buyerStake = mecenateFeed.getBuyerStake();\\n        f.totalStake = mecenateFeed.getTotalStaked();\\n        f.postCount = mecenateFeed.postCount();\\n        f.paymentRequested = mecenateFeed.getPaymentRequested();\\n        f.stakeRequested = mecenateFeed.getStakeRequested();\\n        f.status = mecenateFeed.getStatus();\\n        f.tokenId = mecenateFeed.getTokenId();\\n        f.version = mecenateFeed.version();\\n        f.postId = mecenateFeed.getPostId();\\n\\n        return f;\\n    }\\n\\n    function _getFeedsInfo(\\n        address[] memory _feeds\\n    ) internal view returns (Structures.Feed[] memory) {\\n        uint256 len = _feeds.length;\\n        Structures.Feed[] memory f = new Structures.Feed[](len);\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            f[i] = _getFeedInfo(_feeds[i]);\\n        }\\n\\n        return f;\\n    }\\n}\\n\",\"keccak256\":\"0x3d86a409594e5b7bfdcfe52c2cb5148594ff0f5ecff4f2ab98fe69143a2a69a3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608080604052346100e05760008054336001600160a01b0319821681178355906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a3600f546001918282811c921680156100d6575b60208310146100c257601f8211610098575b600c65076322e302e360d41b01600f556010805460ff19169055611a968481620000e68239f35b600f8152601f60208220920160051c8201915b8281106100b85750610071565b81815583016100ab565b634e487b7160e01b81526022600452602490fd5b91607f169161005f565b600080fdfe6080604052600436101561001257600080fd5b60003560e01c8063067bd3b4146101e257806318da0011146101dd5780633ec4f23d146101d857806349975235146101d35780634b57b0be146101ce57806354fd4d50146101c95780635dc96d16146101c4578063715018a6146101bf5780637b2c835f146101ba5780637fe955d4146101b55780638da5cb5b146101b05780639407aeea146101ab5780639496d7f1146101a6578063ad861324146101a1578063b2a2e9ca1461019c578063bb834b0e14610197578063be22f54614610192578063ca5b4e5c1461018d578063cd77b52c14610188578063cedf3ba214610179578063d223a56414610183578063d570a66d1461017e578063e58fdd0414610179578063e86ef35314610174578063e9318b471461016f578063f2fde38b1461016a578063f77800e514610165578063f86d0b38146101605763f887ea401461015b57600080fd5b610f7c565b610f5b565b610f32565b610e6b565b610e17565b610d9a565b610cda565b610d55565b610d1c565b610cb1565b610a94565b610a6b565b610a47565b6109cd565b61093f565b610702565b610662565b6105dd565b610557565b6104d9565b610474565b610451565b61036c565b610270565b61024c565b61022e565b610205565b34610200576000366003190112610200576020601154604051908152f35b600080fd5b34610200576000366003190112610200576003546040516001600160a01b039091168152602090f35b34610200576000366003190112610200576020600654604051908152f35b3461020057600036600319011261020057602060ff60125460101c16604051908152f35b34610200576000366003190112610200576009546040516001600160a01b039091168152602090f35b90600182811c921680156102c9575b60208310146102b357565b634e487b7160e01b600052602260045260246000fd5b91607f16916102a8565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761030b57604052565b6102d3565b60005b8381106103235750506000910152565b8181015183820152602001610313565b9060209161034c81518092818552858086019101610310565b601f01601f1916010190565b906020610369928181520190610333565b90565b346102005760008060031936011261044e576040519080600f5461038f81610299565b8085529160019180831690811561042457506001146103c9575b6103c5856103b9818703826102e9565b60405191829182610358565b0390f35b9250600f83527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8025b82841061040c5750505081016020016103b9826103c56103a9565b805460208587018101919091529093019281016103f1565b8695506103c5969350602092506103b994915060ff191682840152151560051b82010192936103a9565b80fd5b3461020057600036600319011261020057602060ff601054166040519015158152f35b346102005760008060031936011261044e5761048e610fa5565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b8015150361020057565b34610200576020366003190112610200576004356104f6816104cf565b6104fe610fa5565b60ff8019601054169115151617601055600080f35b6020908160408183019282815285518094520193019160005b82811061053a575050505090565b83516001600160a01b03168552938101939281019260010161052c565b346102005760003660031901126102005760405180600191825492838252602080920193816000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6926000905b8282106105c8576103c5866105bc818a03826102e9565b60405191829182610513565b845487529586019593830193908301906105a5565b34610200576000366003190112610200576000546040516001600160a01b039091168152602090f35b67ffffffffffffffff811161030b57601f01601f191660200190565b6024359060ff8216820361020057565b6044359060ff8216820361020057565b6064359060ff8216820361020057565b6004359060ff8216820361020057565b346102005760803660031901126102005760043567ffffffffffffffff8111610200573660238201121561020057806004013561069e81610606565b906106ac60405192836102e9565b80825236602482850101116102005760208160009260246106ef960183860137830101526106d8610622565b6106e0610632565b906106e9610642565b92610ffd565b005b6001600160a01b0381160361020057565b3461020057610100366003190112610200576106ef600435610723816106f1565b60243590610730826106f1565b60443561073c816106f1565b60843590610749826106f1565b60a43590610756826106f1565b60c43591610763836106f1565b60e43595610770876106f1565b610778610fa5565b60018060a01b0394858094818094816bffffffffffffffffffffffff60a01b9b168b6003541617600355168960045416176004551687600554161760055560643560065516856009541617600955168360075416176007551690600854161760085560018060a01b03166bffffffffffffffffffffffff60a01b600a541617600a55565b634e487b7160e01b600052602160045260246000fd5b90600882101561081f5752565b6107fc565b90600382101561081f5752565b80516001600160a01b03168252906020828101516001600160a01b03169082015260408201516040820152606082015160608201526080820151608082015260a082015160a082015260c082015160c082015260e082015160e08201526108a16101008084015190830190610812565b6108b46101208084015190830190610824565b6108cf61014080840151906101808091850152830190610333565b916101608091015191015290565b602080820190808352835180925260408301928160408460051b8301019501936000915b8483106109115750505050505090565b909192939495848061092f600193603f198682030187528a51610831565b9801930193019194939290610901565b34610200576020806003193601126102005760043561095d816106f1565b60018060a01b0316600052600d81526040600020604051918281835491828152019260005281600020916000905b8282106109b6576103c56109aa876109a5818903826102e9565b6119c4565b604051918291826108dd565b83548552938401936001938401939091019061098b565b3461020057602080600319360112610200576004356109eb816106f1565b6001600160a01b03166000908152600d82526040808220905181548082529183528383208185019491939092915b828210610a30576103c5856105bc818903826102e9565b835486529485019460019384019390910190610a19565b3461020057600036600319011261020057602060ff60125460081c16604051908152f35b34610200576000366003190112610200576008546040516001600160a01b039091168152602090f35b60008060031936011261044e57600454601254604080513360208201526001600160a01b0390931690830181905230606084015260ff8083166080850152600883901c811660a085015260109290921c90911660c080840191909152825290601f19610b0160e0836102e9565b60405163122643f360e21b81523360048201526001600160a01b03939091906020908390602490829088165afa908115610cac57610b4d610bdd92610bd1948891610c7e575b506111ab565b610b60610b58611505565b3410156111ed565b610b9b8680808034610b8b610b7f610b7f60035460018060a01b031690565b6001600160a01b031690565b5af1610b9561122a565b5061125a565b610bae610ba9601154611294565b601155565b610bb66112b9565b93604051938491610bcb602084018098611377565b90611377565b039081018352826102e9565b519083f090813b15610c7a57816103c5917fb658664a46408e6670a38ec7ea8b7614c9e2916184dff2fad99d3a7a3491ca7d949316610c1b816113b7565b50336000908152600d60205260409020610c3690839061138e565b506001600160a01b0382166000908152600e60205260409020610c6090805460ff19166001179055565b60405194848695a26001600160a01b031682526020820190565b8280fd5b610c9f915060203d8111610ca5575b610c9781836102e9565b81019061118a565b38610b47565b503d610c8d565b61119f565b34610200576000366003190112610200576005546040516001600160a01b039091168152602090f35b3461020057602036600319011261020057600435610cf7816106f1565b60018060a01b0316600052600e602052602060ff604060002054166040519015158152f35b346102005760203660031901126102005760ff610d37610652565b16600052600c602052602062ffffff60406000205416604051908152f35b34610200576020366003190112610200576103c5610d86600435610d78816106f1565b610d80611489565b50611621565b604051918291602083526020830190610831565b346102005760003660031901126102005760405180600190815491828252602080920192816000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6926000905b828210610e02576103c56109aa886109a5818a03826102e9565b84548652948501949383019390830190610de8565b3461020057604036600319011261020057610e30610652565b6024359062ffffff82168092036102005760ff90610e4c610fa5565b16600052600c60205260406000209062ffffff19825416179055600080f35b3461020057602036600319011261020057600435610e88816106f1565b610e90610fa5565b6001600160a01b039081168015610ede57600080546001600160a01b03198116831782559092167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b34610200576000366003190112610200576007546040516001600160a01b039091168152602090f35b3461020057600036600319011261020057602060ff60125416604051908152f35b3461020057600036600319011261020057600a546040516001600160a01b039091168152602090f35b6000546001600160a01b03163303610fb957565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b939261ff009092919261100e610fa5565b60ff62ff00006012549260101b1694169062ffffff1916179160081b161717601255815167ffffffffffffffff811161030b5761105581611050600b54610299565b611119565b602080601f83116001146110915750819293600092611086575b50508160011b916000199060031b1c191617600b55565b01519050388061106f565b90601f198316946110c4600b6000527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db990565b926000905b8782106111015750508360019596106110e8575b505050811b01600b55565b015160001960f88460031b161c191690553880806110dd565b806001859682949686015181550195019301906110c9565b601f8111611125575050565b600090600b82527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db9906020601f850160051c83019410611180575b601f0160051c01915b82811061117557505050565b818155600101611169565b9092508290611160565b908160209103126102005751610369816104cf565b6040513d6000823e3d90fd5b156111b257565b60405162461bcd60e51b81526020600482015260136024820152721d5cd95c88191bd95cc81b9bdd08195e1a5cdd606a1b6044820152606490fd5b156111f457565b60405162461bcd60e51b815260206004820152600e60248201526d4e4f545f454e4f5547485f46454560901b6044820152606490fd5b3d15611255573d9061123b82610606565b9161124960405193846102e9565b82523d6000602084013e565b606090565b1561126157565b60405162461bcd60e51b815260206004820152600b60248201526a10d0531317d1905253115160aa1b6044820152606490fd5b60001981146112a35760010190565b634e487b7160e01b600052601160045260246000fd5b60405190600082600b54916112cd83610299565b8083529260019081811690811561135557506001146112f6575b506112f4925003836102e9565b565b600b600090815291507f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db95b84831061133a57506112f49350508101602001386112e7565b81935090816020925483858a01015201910190918592611321565b9050602092506112f494915060ff191682840152151560051b820101386112e7565b9061138a60209282815194859201610310565b0190565b610369916001600160a01b031690611433565b634e487b7160e01b600052603260045260246000fd5b8060005260026020526040600020541560001461142d57600154600160401b81101561030b5760018101806001558110156114285781907fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60155600154906000526002602052604060002055600190565b6113a1565b50600090565b6000828152600182016020819052604082205461148257825492600160401b84101561030b57600184018082558410156114285784604094828552602085200155549382526020522055600190565b5091505090565b60405190610180820182811067ffffffffffffffff82111761030b57604052816101606000918281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e0820152826101008201528261012082015260606101408201520152565b90816020910312610200575190565b6003546040516391792d5b60e01b815290602090829060049082906001600160a01b03165afa908115610cac5760009161153d575090565b610369915060203d811161155e575b61155681836102e9565b8101906114f6565b503d61154c565b908160209103126102005751610369816106f1565b90816020910312610200575160088110156102005790565b600882101561081f5752565b90816020910312610200575160038110156102005790565b600382101561081f5752565b6020818303126102005780519067ffffffffffffffff8211610200570181601f820112156102005780516115f581610606565b9261160360405194856102e9565b81845260208284010111610200576103699160208085019101610310565b611629611489565b50611632611489565b6001600160a01b0390911680825260408051638da5cb5b60e01b81526020926004929184818581855afa8015610cac5761167e9160009161196b575b506001600160a01b031686860152565b8151635c63ed6960e01b815284818581855afa908115610cac5760009161194e575b50858301528151634c38d87760e01b815284818581855afa908115610cac57600091611931575b506060860152815163048bf3bb60e11b815284818581855afa908115610cac57600091611914575b5060808601528151630bc8361760e11b815284818581855afa908115610cac576000916118f7575b5060a0860152815163d24e0c8760e01b815284818581855afa908115610cac576000916118da575b5060c0860152815163faeb5e1760e01b815284818581855afa908115610cac576000916118bd575b5060e086015281516302734eab60e51b815284818581855afa8015610cac5761179d91600091611890575b506101008701611592565b815163010a38f560e01b815284818581855afa8015610cac576117cd91600091611863575b5061012087016115b6565b815163054fd4d560e41b8152916000838581855afa8015610cac578593600091611842575b50610140870152516332946a8760e01b815292839182905afa918215610cac57600092611825575b505061016082015290565b61183b9250803d1061155e5761155681836102e9565b388061181a565b61185d913d8091833e61185581836102e9565b8101906115c2565b386117f2565b6118839150863d8811611889575b61187b81836102e9565b81019061159e565b386117c2565b503d611871565b6118b09150863d88116118b6575b6118a881836102e9565b81019061157a565b38611792565b503d61189e565b6118d49150853d871161155e5761155681836102e9565b38611767565b6118f19150853d871161155e5761155681836102e9565b3861173f565b61190e9150853d871161155e5761155681836102e9565b38611717565b61192b9150853d871161155e5761155681836102e9565b386116ef565b6119489150853d871161155e5761155681836102e9565b386116c7565b6119659150853d871161155e5761155681836102e9565b386116a0565b61198b9150863d8811611991575b61198381836102e9565b810190611565565b3861166e565b503d611979565b67ffffffffffffffff811161030b5760051b60200190565b80518210156114285760209160051b010190565b80516119cf81611998565b916119dd60405193846102e9565b818352601f196119ec83611998565b0160005b818110611a4957505060005b828110611a095750505090565b611a4490611a296001600160a01b03611a2283866119b0565b5116611621565b611a3382876119b0565b52611a3e81866119b0565b50611294565b6119fc565b602090611a54611489565b828288010152016119f056fea2646970667358221220eb079c888864c894d0a1ca05ae41a650b09f4eef992a59521dd9bd1db890ec9064736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c8063067bd3b4146101e257806318da0011146101dd5780633ec4f23d146101d857806349975235146101d35780634b57b0be146101ce57806354fd4d50146101c95780635dc96d16146101c4578063715018a6146101bf5780637b2c835f146101ba5780637fe955d4146101b55780638da5cb5b146101b05780639407aeea146101ab5780639496d7f1146101a6578063ad861324146101a1578063b2a2e9ca1461019c578063bb834b0e14610197578063be22f54614610192578063ca5b4e5c1461018d578063cd77b52c14610188578063cedf3ba214610179578063d223a56414610183578063d570a66d1461017e578063e58fdd0414610179578063e86ef35314610174578063e9318b471461016f578063f2fde38b1461016a578063f77800e514610165578063f86d0b38146101605763f887ea401461015b57600080fd5b610f7c565b610f5b565b610f32565b610e6b565b610e17565b610d9a565b610cda565b610d55565b610d1c565b610cb1565b610a94565b610a6b565b610a47565b6109cd565b61093f565b610702565b610662565b6105dd565b610557565b6104d9565b610474565b610451565b61036c565b610270565b61024c565b61022e565b610205565b34610200576000366003190112610200576020601154604051908152f35b600080fd5b34610200576000366003190112610200576003546040516001600160a01b039091168152602090f35b34610200576000366003190112610200576020600654604051908152f35b3461020057600036600319011261020057602060ff60125460101c16604051908152f35b34610200576000366003190112610200576009546040516001600160a01b039091168152602090f35b90600182811c921680156102c9575b60208310146102b357565b634e487b7160e01b600052602260045260246000fd5b91607f16916102a8565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761030b57604052565b6102d3565b60005b8381106103235750506000910152565b8181015183820152602001610313565b9060209161034c81518092818552858086019101610310565b601f01601f1916010190565b906020610369928181520190610333565b90565b346102005760008060031936011261044e576040519080600f5461038f81610299565b8085529160019180831690811561042457506001146103c9575b6103c5856103b9818703826102e9565b60405191829182610358565b0390f35b9250600f83527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8025b82841061040c5750505081016020016103b9826103c56103a9565b805460208587018101919091529093019281016103f1565b8695506103c5969350602092506103b994915060ff191682840152151560051b82010192936103a9565b80fd5b3461020057600036600319011261020057602060ff601054166040519015158152f35b346102005760008060031936011261044e5761048e610fa5565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b8015150361020057565b34610200576020366003190112610200576004356104f6816104cf565b6104fe610fa5565b60ff8019601054169115151617601055600080f35b6020908160408183019282815285518094520193019160005b82811061053a575050505090565b83516001600160a01b03168552938101939281019260010161052c565b346102005760003660031901126102005760405180600191825492838252602080920193816000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6926000905b8282106105c8576103c5866105bc818a03826102e9565b60405191829182610513565b845487529586019593830193908301906105a5565b34610200576000366003190112610200576000546040516001600160a01b039091168152602090f35b67ffffffffffffffff811161030b57601f01601f191660200190565b6024359060ff8216820361020057565b6044359060ff8216820361020057565b6064359060ff8216820361020057565b6004359060ff8216820361020057565b346102005760803660031901126102005760043567ffffffffffffffff8111610200573660238201121561020057806004013561069e81610606565b906106ac60405192836102e9565b80825236602482850101116102005760208160009260246106ef960183860137830101526106d8610622565b6106e0610632565b906106e9610642565b92610ffd565b005b6001600160a01b0381160361020057565b3461020057610100366003190112610200576106ef600435610723816106f1565b60243590610730826106f1565b60443561073c816106f1565b60843590610749826106f1565b60a43590610756826106f1565b60c43591610763836106f1565b60e43595610770876106f1565b610778610fa5565b60018060a01b0394858094818094816bffffffffffffffffffffffff60a01b9b168b6003541617600355168960045416176004551687600554161760055560643560065516856009541617600955168360075416176007551690600854161760085560018060a01b03166bffffffffffffffffffffffff60a01b600a541617600a55565b634e487b7160e01b600052602160045260246000fd5b90600882101561081f5752565b6107fc565b90600382101561081f5752565b80516001600160a01b03168252906020828101516001600160a01b03169082015260408201516040820152606082015160608201526080820151608082015260a082015160a082015260c082015160c082015260e082015160e08201526108a16101008084015190830190610812565b6108b46101208084015190830190610824565b6108cf61014080840151906101808091850152830190610333565b916101608091015191015290565b602080820190808352835180925260408301928160408460051b8301019501936000915b8483106109115750505050505090565b909192939495848061092f600193603f198682030187528a51610831565b9801930193019194939290610901565b34610200576020806003193601126102005760043561095d816106f1565b60018060a01b0316600052600d81526040600020604051918281835491828152019260005281600020916000905b8282106109b6576103c56109aa876109a5818903826102e9565b6119c4565b604051918291826108dd565b83548552938401936001938401939091019061098b565b3461020057602080600319360112610200576004356109eb816106f1565b6001600160a01b03166000908152600d82526040808220905181548082529183528383208185019491939092915b828210610a30576103c5856105bc818903826102e9565b835486529485019460019384019390910190610a19565b3461020057600036600319011261020057602060ff60125460081c16604051908152f35b34610200576000366003190112610200576008546040516001600160a01b039091168152602090f35b60008060031936011261044e57600454601254604080513360208201526001600160a01b0390931690830181905230606084015260ff8083166080850152600883901c811660a085015260109290921c90911660c080840191909152825290601f19610b0160e0836102e9565b60405163122643f360e21b81523360048201526001600160a01b03939091906020908390602490829088165afa908115610cac57610b4d610bdd92610bd1948891610c7e575b506111ab565b610b60610b58611505565b3410156111ed565b610b9b8680808034610b8b610b7f610b7f60035460018060a01b031690565b6001600160a01b031690565b5af1610b9561122a565b5061125a565b610bae610ba9601154611294565b601155565b610bb66112b9565b93604051938491610bcb602084018098611377565b90611377565b039081018352826102e9565b519083f090813b15610c7a57816103c5917fb658664a46408e6670a38ec7ea8b7614c9e2916184dff2fad99d3a7a3491ca7d949316610c1b816113b7565b50336000908152600d60205260409020610c3690839061138e565b506001600160a01b0382166000908152600e60205260409020610c6090805460ff19166001179055565b60405194848695a26001600160a01b031682526020820190565b8280fd5b610c9f915060203d8111610ca5575b610c9781836102e9565b81019061118a565b38610b47565b503d610c8d565b61119f565b34610200576000366003190112610200576005546040516001600160a01b039091168152602090f35b3461020057602036600319011261020057600435610cf7816106f1565b60018060a01b0316600052600e602052602060ff604060002054166040519015158152f35b346102005760203660031901126102005760ff610d37610652565b16600052600c602052602062ffffff60406000205416604051908152f35b34610200576020366003190112610200576103c5610d86600435610d78816106f1565b610d80611489565b50611621565b604051918291602083526020830190610831565b346102005760003660031901126102005760405180600190815491828252602080920192816000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6926000905b828210610e02576103c56109aa886109a5818a03826102e9565b84548652948501949383019390830190610de8565b3461020057604036600319011261020057610e30610652565b6024359062ffffff82168092036102005760ff90610e4c610fa5565b16600052600c60205260406000209062ffffff19825416179055600080f35b3461020057602036600319011261020057600435610e88816106f1565b610e90610fa5565b6001600160a01b039081168015610ede57600080546001600160a01b03198116831782559092167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b34610200576000366003190112610200576007546040516001600160a01b039091168152602090f35b3461020057600036600319011261020057602060ff60125416604051908152f35b3461020057600036600319011261020057600a546040516001600160a01b039091168152602090f35b6000546001600160a01b03163303610fb957565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b939261ff009092919261100e610fa5565b60ff62ff00006012549260101b1694169062ffffff1916179160081b161717601255815167ffffffffffffffff811161030b5761105581611050600b54610299565b611119565b602080601f83116001146110915750819293600092611086575b50508160011b916000199060031b1c191617600b55565b01519050388061106f565b90601f198316946110c4600b6000527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db990565b926000905b8782106111015750508360019596106110e8575b505050811b01600b55565b015160001960f88460031b161c191690553880806110dd565b806001859682949686015181550195019301906110c9565b601f8111611125575050565b600090600b82527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db9906020601f850160051c83019410611180575b601f0160051c01915b82811061117557505050565b818155600101611169565b9092508290611160565b908160209103126102005751610369816104cf565b6040513d6000823e3d90fd5b156111b257565b60405162461bcd60e51b81526020600482015260136024820152721d5cd95c88191bd95cc81b9bdd08195e1a5cdd606a1b6044820152606490fd5b156111f457565b60405162461bcd60e51b815260206004820152600e60248201526d4e4f545f454e4f5547485f46454560901b6044820152606490fd5b3d15611255573d9061123b82610606565b9161124960405193846102e9565b82523d6000602084013e565b606090565b1561126157565b60405162461bcd60e51b815260206004820152600b60248201526a10d0531317d1905253115160aa1b6044820152606490fd5b60001981146112a35760010190565b634e487b7160e01b600052601160045260246000fd5b60405190600082600b54916112cd83610299565b8083529260019081811690811561135557506001146112f6575b506112f4925003836102e9565b565b600b600090815291507f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db95b84831061133a57506112f49350508101602001386112e7565b81935090816020925483858a01015201910190918592611321565b9050602092506112f494915060ff191682840152151560051b820101386112e7565b9061138a60209282815194859201610310565b0190565b610369916001600160a01b031690611433565b634e487b7160e01b600052603260045260246000fd5b8060005260026020526040600020541560001461142d57600154600160401b81101561030b5760018101806001558110156114285781907fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60155600154906000526002602052604060002055600190565b6113a1565b50600090565b6000828152600182016020819052604082205461148257825492600160401b84101561030b57600184018082558410156114285784604094828552602085200155549382526020522055600190565b5091505090565b60405190610180820182811067ffffffffffffffff82111761030b57604052816101606000918281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e0820152826101008201528261012082015260606101408201520152565b90816020910312610200575190565b6003546040516391792d5b60e01b815290602090829060049082906001600160a01b03165afa908115610cac5760009161153d575090565b610369915060203d811161155e575b61155681836102e9565b8101906114f6565b503d61154c565b908160209103126102005751610369816106f1565b90816020910312610200575160088110156102005790565b600882101561081f5752565b90816020910312610200575160038110156102005790565b600382101561081f5752565b6020818303126102005780519067ffffffffffffffff8211610200570181601f820112156102005780516115f581610606565b9261160360405194856102e9565b81845260208284010111610200576103699160208085019101610310565b611629611489565b50611632611489565b6001600160a01b0390911680825260408051638da5cb5b60e01b81526020926004929184818581855afa8015610cac5761167e9160009161196b575b506001600160a01b031686860152565b8151635c63ed6960e01b815284818581855afa908115610cac5760009161194e575b50858301528151634c38d87760e01b815284818581855afa908115610cac57600091611931575b506060860152815163048bf3bb60e11b815284818581855afa908115610cac57600091611914575b5060808601528151630bc8361760e11b815284818581855afa908115610cac576000916118f7575b5060a0860152815163d24e0c8760e01b815284818581855afa908115610cac576000916118da575b5060c0860152815163faeb5e1760e01b815284818581855afa908115610cac576000916118bd575b5060e086015281516302734eab60e51b815284818581855afa8015610cac5761179d91600091611890575b506101008701611592565b815163010a38f560e01b815284818581855afa8015610cac576117cd91600091611863575b5061012087016115b6565b815163054fd4d560e41b8152916000838581855afa8015610cac578593600091611842575b50610140870152516332946a8760e01b815292839182905afa918215610cac57600092611825575b505061016082015290565b61183b9250803d1061155e5761155681836102e9565b388061181a565b61185d913d8091833e61185581836102e9565b8101906115c2565b386117f2565b6118839150863d8811611889575b61187b81836102e9565b81019061159e565b386117c2565b503d611871565b6118b09150863d88116118b6575b6118a881836102e9565b81019061157a565b38611792565b503d61189e565b6118d49150853d871161155e5761155681836102e9565b38611767565b6118f19150853d871161155e5761155681836102e9565b3861173f565b61190e9150853d871161155e5761155681836102e9565b38611717565b61192b9150853d871161155e5761155681836102e9565b386116ef565b6119489150853d871161155e5761155681836102e9565b386116c7565b6119659150853d871161155e5761155681836102e9565b386116a0565b61198b9150863d8811611991575b61198381836102e9565b810190611565565b3861166e565b503d611979565b67ffffffffffffffff811161030b5760051b60200190565b80518210156114285760209160051b010190565b80516119cf81611998565b916119dd60405193846102e9565b818352601f196119ec83611998565b0160005b818110611a4957505060005b828110611a095750505090565b611a4490611a296001600160a01b03611a2283866119b0565b5116611621565b611a3382876119b0565b52611a3e81866119b0565b50611294565b6119fc565b602090611a54611489565b828288010152016119f056fea2646970667358221220eb079c888864c894d0a1ca05ae41a650b09f4eef992a59521dd9bd1db890ec9064736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4767,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "feeds",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(AddressSet)3956_storage"
      },
      {
        "astId": 4770,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "settings",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(FactorySettings)7326_storage"
      },
      {
        "astId": 4772,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "feedByteCode",
        "offset": 0,
        "slot": "11",
        "type": "t_bytes_storage"
      },
      {
        "astId": 4776,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "routerFee",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint8,t_uint24)"
      },
      {
        "astId": 4781,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "feedStore",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_struct(AddressSet)3956_storage)"
      },
      {
        "astId": 4785,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "createdContracts",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4788,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "version",
        "offset": 0,
        "slot": "15",
        "type": "t_string_storage"
      },
      {
        "astId": 4791,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "burnEnabled",
        "offset": 0,
        "slot": "16",
        "type": "t_bool"
      },
      {
        "astId": 4793,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "contractCounter",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 4799,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "major",
        "offset": 0,
        "slot": "18",
        "type": "t_uint8"
      },
      {
        "astId": 4801,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "minor",
        "offset": 1,
        "slot": "18",
        "type": "t_uint8"
      },
      {
        "astId": 4803,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "patch",
        "offset": 2,
        "slot": "18",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(AddressSet)3956_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)3956_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint8,t_uint24)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint24)",
        "numberOfBytes": "32",
        "value": "t_uint24"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)3956_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3955,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3641_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(FactorySettings)7326_storage": {
        "encoding": "inplace",
        "label": "struct Structures.FactorySettings",
        "members": [
          {
            "astId": 7311,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "treasuryContract",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7313,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "usersModuleContract",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 7315,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "easContract",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 7317,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "easSchema",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          },
          {
            "astId": 7319,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "museToken",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 7321,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "daiToken",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 7323,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "wethToken",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 7325,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "router",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Set)3641_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3636,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3640,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}