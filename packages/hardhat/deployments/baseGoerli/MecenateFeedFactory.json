{
  "address": "0xeC155124BCFdA12d9752C142B534779389F08784",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newUsersModuleContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newTreasuryContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "FeedCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "buildFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "usersModule",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "wethTokenAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "museTokenAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "daiTokenAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "routerAddr",
          "type": "address"
        }
      ],
      "name": "changeMultipleSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daiToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getFeedInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sellerStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyerStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "postCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "paymentRequested",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeRequested",
              "type": "uint256"
            },
            {
              "internalType": "enum Structures.PostStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "enum Structures.Tokens",
              "name": "tokenId",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "version",
              "type": "string"
            }
          ],
          "internalType": "struct Structures.Feed",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeds",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeedsInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sellerStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyerStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "postCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "paymentRequested",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeRequested",
              "type": "uint256"
            },
            {
              "internalType": "enum Structures.PostStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "enum Structures.Tokens",
              "name": "tokenId",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "version",
              "type": "string"
            }
          ],
          "internalType": "struct Structures.Feed[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getFeedsInfoOwned",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sellerStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyerStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "postCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "paymentRequested",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeRequested",
              "type": "uint256"
            },
            {
              "internalType": "enum Structures.PostStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "enum Structures.Tokens",
              "name": "tokenId",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "version",
              "type": "string"
            }
          ],
          "internalType": "struct Structures.Feed[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getFeedsOwned",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "tokenId",
          "type": "uint8"
        }
      ],
      "name": "getRouterFee",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "isContractCreated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFeed",
          "type": "address"
        }
      ],
      "name": "isFeed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "museToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "newBurnEnabled",
          "type": "bool"
        }
      ],
      "name": "setBurnEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "newByteCode",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "newVersion",
          "type": "string"
        }
      ],
      "name": "setFeedByteCode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "tokenId",
          "type": "uint8"
        },
        {
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        }
      ],
      "name": "setRouterFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wethToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0d5f4ca1dac008de5a480461c44f08e2998bbd56df5be8de64254e511d7a7de3",
  "receipt": {
    "to": null,
    "from": "0x8aA5F726d9F868a21a8bd748E2f1E43bA31eb670",
    "contractAddress": "0xeC155124BCFdA12d9752C142B534779389F08784",
    "transactionIndex": 1,
    "gasUsed": "1632330",
    "logsBloom": "0x
    "blockHash": "0xde22e344da52cc8b7153ac743ab8945c1d584e3fa6dc1f40f23c7ba3a760f7aa",
    "transactionHash": "0x0d5f4ca1dac008de5a480461c44f08e2998bbd56df5be8de64254e511d7a7de3",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 11146086,
        "transactionHash": "0x0d5f4ca1dac008de5a480461c44f08e2998bbd56df5be8de64254e511d7a7de3",
        "address": "0xeC155124BCFdA12d9752C142B534779389F08784",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008aa5f726d9f868a21a8bd748e2f1e43ba31eb670"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xde22e344da52cc8b7153ac743ab8945c1d584e3fa6dc1f40f23c7ba3a760f7aa"
      }
    ],
    "blockNumber": 11146086,
    "cumulativeGasUsed": "1679183",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb27dc56e80DA00Fe939FC984fDb55b6E6107B5E7",
    "0x467C14497078f0f3A5367fd3953278c9f7Ea6736"
  ],
  "numDeployments": 14,
  "solcInputHash": "971a695ed1642262355fbc95ddbe1abf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newUsersModuleContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newTreasuryContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"FeedCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"buildFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usersModule\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wethTokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"museTokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiTokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"routerAddr\",\"type\":\"address\"}],\"name\":\"changeMultipleSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getFeedInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellerStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentRequested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeRequested\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"internalType\":\"struct Structures.Feed\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeds\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeedsInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellerStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentRequested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeRequested\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"internalType\":\"struct Structures.Feed[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getFeedsInfoOwned\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellerStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentRequested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeRequested\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"internalType\":\"struct Structures.Feed[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getFeedsOwned\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"name\":\"getRouterFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"isContractCreated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeed\",\"type\":\"address\"}],\"name\":\"isFeed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"museToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newBurnEnabled\",\"type\":\"bool\"}],\"name\":\"setBurnEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"newByteCode\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"newVersion\",\"type\":\"string\"}],\"name\":\"setFeedByteCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"setRouterFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/evm/factories/MecenateFeedFactory.sol\":\"MecenateFeedFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/evm/factories/MecenateFeedFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../interfaces/IMecenateUsers.sol\\\";\\nimport \\\"../interfaces/IMecenateTreasury.sol\\\";\\nimport \\\"../modules/FeedViewer.sol\\\";\\n\\ncontract MecenateFeedFactory is Ownable, FeedViewer {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    EnumerableSet.AddressSet internal feeds;\\n\\n    Structures.FactorySettings internal settings;\\n\\n    bytes internal feedByteCode;\\n\\n    mapping(uint8 => uint24) internal routerFee;\\n\\n    mapping(address => EnumerableSet.AddressSet) internal feedStore;\\n\\n    mapping(address => bool) internal createdContracts;\\n\\n    string public version = \\\"v2.0.0\\\"; // Iitialized\\n\\n    bool public burnEnabled = false;\\n\\n    uint256 public contractCounter;\\n\\n    event FeedCreated(address indexed addr);\\n\\n    constructor(address newUsersModuleContract, address newTreasuryContract) {\\n        settings.usersModuleContract = newUsersModuleContract;\\n        settings.treasuryContract = newTreasuryContract;\\n    }\\n\\n    function _changeVersion(string memory newVersion) internal {\\n        version = newVersion;\\n    }\\n\\n    function treasuryContract() external view returns (address) {\\n        return settings.treasuryContract;\\n    }\\n\\n    function daiToken() external view returns (address) {\\n        return settings.daiToken;\\n    }\\n\\n    function wethToken() external view returns (address) {\\n        return settings.wethToken;\\n    }\\n\\n    function museToken() external view returns (address) {\\n        return settings.museToken;\\n    }\\n\\n    function router() external view returns (address) {\\n        return settings.router;\\n    }\\n\\n    function getRouterFee(uint8 tokenId) external view returns (uint24) {\\n        return routerFee[tokenId];\\n    }\\n\\n    function setRouterFee(uint8 tokenId, uint24 fee) external onlyOwner {\\n        routerFee[tokenId] = fee;\\n    }\\n\\n    function setBurnEnabled(bool newBurnEnabled) external onlyOwner {\\n        burnEnabled = newBurnEnabled;\\n    }\\n\\n    function isFeed(address newFeed) external view returns (bool) {\\n        return createdContracts[newFeed];\\n    }\\n\\n    function changeMultipleSettings(\\n        address treasury,\\n        address usersModule,\\n        address wethTokenAddr,\\n        address museTokenAddr,\\n        address daiTokenAddr,\\n        address routerAddr\\n    ) external onlyOwner {\\n        settings.treasuryContract = treasury;\\n        settings.usersModuleContract = usersModule;\\n        settings.wethToken = wethTokenAddr;\\n        settings.museToken = museTokenAddr;\\n        settings.daiToken = daiTokenAddr;\\n        settings.router = routerAddr;\\n    }\\n\\n    function setFeedByteCode(\\n        bytes memory newByteCode,\\n        string memory newVersion\\n    ) external onlyOwner {\\n        feedByteCode = newByteCode;\\n        _changeVersion(newVersion);\\n    }\\n\\n    function buildFeed() external payable returns (address) {\\n        bytes memory constructorArguments = abi.encode(\\n            msg.sender,\\n            settings.usersModuleContract,\\n            address(this),\\n            version\\n        );\\n\\n        require(\\n            IMecenateUsers(settings.usersModuleContract).checkifUserExist(\\n                msg.sender\\n            ),\\n            \\\"user does not exist\\\"\\n        );\\n\\n        require(msg.value >= getCreationFee(), \\\"NOT_ENOUGH_FEE\\\");\\n\\n        (bool _result, ) = payable(settings.treasuryContract).call{\\n            value: msg.value\\n        }(\\\"\\\");\\n\\n        require(_result, \\\"CALL_FAILED\\\");\\n\\n        contractCounter++;\\n\\n        address addr;\\n\\n        bytes memory tempByteCode = feedByteCode; // Carico la variabile di storage in una variabile locale\\n\\n        // Concatena il bytecode e gli argomenti del costruttore\\n        bytes memory bytecodeWithConstructor = abi.encodePacked(\\n            tempByteCode,\\n            constructorArguments\\n        );\\n\\n        // Deploy del contratto con gli argomenti del costruttore\\n        assembly {\\n            addr := create(\\n                0,\\n                add(bytecodeWithConstructor, 0x20),\\n                mload(bytecodeWithConstructor)\\n            )\\n            if iszero(extcodesize(addr)) {\\n                revert(0, 0)\\n            }\\n        }\\n\\n        address feed = addr;\\n\\n        feeds.add(address(feed));\\n\\n        feedStore[msg.sender].add(address(feed));\\n\\n        createdContracts[address(feed)] = true;\\n\\n        emit FeedCreated(address(feed));\\n\\n        return address(feed);\\n    }\\n\\n    function getFeeds() external view returns (address[] memory) {\\n        return feeds.values();\\n    }\\n\\n    function getFeedsOwned(\\n        address user\\n    ) external view returns (address[] memory) {\\n        return feedStore[user].values();\\n    }\\n\\n    function getFeedsInfoOwned(\\n        address user\\n    ) external view returns (Structures.Feed[] memory) {\\n        return _getFeedsInfo(feedStore[user].values());\\n    }\\n\\n    function getFeedInfo(\\n        address user\\n    ) external view returns (Structures.Feed memory) {\\n        return _getFeedInfo(user);\\n    }\\n\\n    function getFeedsInfo() external view returns (Structures.Feed[] memory) {\\n        return _getFeedsInfo(feeds.values());\\n    }\\n\\n    function isContractCreated(\\n        address contractAddress\\n    ) external view returns (bool) {\\n        return createdContracts[contractAddress];\\n    }\\n\\n    function getCreationFee() internal view returns (uint256) {\\n        return IMecenateTreasury(settings.treasuryContract).fixedFee();\\n    }\\n}\\n\",\"keccak256\":\"0x0214262913c5d410d9c50e05591cdc6db7e9943f9e0191a8d1155d765626b2ec\",\"license\":\"MIT\"},\"contracts/evm/interfaces/IMecenateFeed.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateFeed {\\n    function getTotalStaked() external view returns (uint256);\\n\\n    function postCount() external view returns (uint256);\\n\\n    function acceptPost(\\n        Structures.Tokens,\\n        uint256 _amount,\\n        address _from\\n    ) external payable;\\n\\n    function getSellerStake() external view returns (uint256);\\n\\n    function getBuyerStake() external view returns (uint256);\\n\\n    function getPaymentRequested() external view returns (uint256);\\n\\n    function getStakeRequested() external view returns (uint256);\\n\\n    function getStatus() external view returns (Structures.PostStatus status);\\n\\n    function getTokenId() external view returns (Structures.Tokens tokenId);\\n\\n    function owner() external view returns (address);\\n\\n    function version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x7eede94ce96f84da172bcd7df3625b818be25c3c94f5f01b4aa631c80c912777\"},\"contracts/evm/interfaces/IMecenateTreasury.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateTreasury {\\r\\n    function globalFee() external view returns (uint256);\\r\\n\\r\\n    function fixedFee() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf544878bba8e01c837110d06eac56042957d59c593ba9083f686ef02aa9276a1\"},\"contracts/evm/interfaces/IMecenateUsers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateUsers {\\n    function registerUser(bytes memory metadata) external;\\n\\n    function getUsers() external view returns (address[] memory);\\n\\n    function getUserCount() external view returns (uint256);\\n\\n    function getUserAt(uint256 index) external view returns (address);\\n\\n    function checkifUserExist(address userAddress) external view returns (bool);\\n\\n    function getPaginatedUsers(\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) external view returns (address[] memory);\\n\\n    function getUserMetadata(\\n        address userAddress\\n    ) external view returns (Structures.User memory);\\n\\n    function getUserPublicKey(\\n        address userAddress\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xf0ff65dbfea12d90cf106325b9478e31b284045327e5f0974db5374b8789e93c\",\"license\":\"MIT\"},\"contracts/evm/library/Structures.sol\":{\"content\":\"/**\\n * @title Structures\\n * @dev This library defines various data structures used in the Mecenate platform.\\n */\\npragma solidity 0.8.19;\\n\\nlibrary Structures {\\n    enum PostStatus {\\n        Waiting,\\n        Proposed,\\n        Accepted,\\n        Submitted,\\n        Finalized,\\n        Punished,\\n        Revealed,\\n        Renounced\\n    }\\n\\n    enum Tokens {\\n        NaN,\\n        MUSE,\\n        DAI\\n    }\\n\\n    enum PostType {\\n        Text,\\n        Image,\\n        Video,\\n        Audio,\\n        File\\n    }\\n    enum PostDuration {\\n        OneDay,\\n        ThreeDays,\\n        OneWeek,\\n        TwoWeeks,\\n        OneMonth\\n    }\\n\\n    struct FeedSettings {\\n        uint256 punishmentRatio;\\n        uint256 postCount;\\n        address usersModuleContract;\\n        address factoryContract;\\n        address router;\\n        string version;\\n    }\\n\\n    struct FactorySettings {\\n        address treasuryContract;\\n        address usersModuleContract;\\n        address easContract;\\n        address museToken;\\n        address daiToken;\\n        address wethToken;\\n        address router;\\n    }\\n\\n    /**\\n     * @dev Struct representing a post on the Mecenate platform.\\n     */\\n    struct Post {\\n        User creator;\\n        PostData postdata;\\n    }\\n\\n    /**\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\n     */\\n    struct PostData {\\n        PostSettings settings;\\n        PostEscrow escrow;\\n        PostEncryptedData data;\\n    }\\n\\n    /**\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\n     */\\n    struct PostEncryptedData {\\n        bytes encryptedData;\\n        bytes encryptedKey;\\n        bytes decryptedData;\\n    }\\n\\n    /**\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettings {\\n        PostStatus status;\\n        PostType postType;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n        uint256 duration;\\n        Tokens tokenId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the private settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettingPrivate {\\n        address buyerAddress;\\n        address sellerAddress;\\n    }\\n\\n    /**\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\n     */\\n    struct PostEscrow {\\n        uint256 stake;\\n        uint256 payment;\\n        uint256 punishment;\\n        uint256 penalty;\\n    }\\n\\n    /**\\n     * @dev Struct representing a user on the Mecenate platform.\\n     */\\n    struct User {\\n        address evmAddress;\\n        bytes sismoVaultId;\\n        bytes publicKey;\\n    }\\n\\n    /**\\n     * @dev Struct representing a feed on the Mecenate platform.\\n     */\\n    struct Feed {\\n        address contractAddress;\\n        address owner;\\n        uint256 sellerStake;\\n        uint256 buyerStake;\\n        uint256 totalStake;\\n        uint256 postCount;\\n        uint256 paymentRequested;\\n        uint256 stakeRequested;\\n        PostStatus status;\\n        Tokens tokenId;\\n        string version;\\n    }\\n\\n    /**\\n     * @dev Struct representing a bay request on the Mecenate platform.\\n     */\\n    struct BayRequest {\\n        bytes request;\\n        uint256 payment;\\n        uint256 stake;\\n        address postAddress;\\n        bool accepted;\\n        uint256 postCount;\\n        Tokens tokenId;\\n        address buyerAddress;\\n    }\\n}\\n\",\"keccak256\":\"0xbb274940876e7ae5561fff2529195525643ae236818eef8134a31db129080b2e\"},\"contracts/evm/modules/FeedViewer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../library/Structures.sol\\\";\\nimport \\\"../interfaces/IMecenateFeed.sol\\\";\\n\\ncontract FeedViewer {\\n    function _getFeedInfo(\\n        address feed\\n    ) internal view returns (Structures.Feed memory) {\\n        Structures.Feed memory f;\\n\\n        IMecenateFeed mecenateFeed = IMecenateFeed(feed);\\n\\n        f.contractAddress = feed;\\n        f.owner = mecenateFeed.owner();\\n        f.sellerStake = mecenateFeed.getSellerStake();\\n        f.buyerStake = mecenateFeed.getBuyerStake();\\n        f.totalStake = mecenateFeed.getTotalStaked();\\n        f.postCount = mecenateFeed.postCount();\\n        f.paymentRequested = mecenateFeed.getPaymentRequested();\\n        f.stakeRequested = mecenateFeed.getStakeRequested();\\n        f.status = mecenateFeed.getStatus();\\n        f.tokenId = mecenateFeed.getTokenId();\\n        f.version = mecenateFeed.version();\\n\\n        return f;\\n    }\\n\\n    function _getFeedsInfo(\\n        address[] memory _feeds\\n    ) internal view returns (Structures.Feed[] memory) {\\n        uint256 len = _feeds.length;\\n        Structures.Feed[] memory f = new Structures.Feed[](len);\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            f[i] = _getFeedInfo(_feeds[i]);\\n        }\\n\\n        return f;\\n    }\\n}\\n\",\"keccak256\":\"0x540b48b96bd4f84311931777ce979ebbd6eb6c14eab2cdd368b9a5b1777c7bdf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080346200016457601f62001c5738819003918201601f19168301916001600160401b038311848410176200016957808492604094855283398101031262000164576200005a602062000052836200017f565b92016200017f565b600080546001600160a01b03198082163390811784556040519591946001600160a01b0394909390919085167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a3600e546001918282811c9216801562000159575b602083101462000145579085939291601f821162000115575b505050600c65076322e302e360d41b01600e5560ff19600f5416600f551683600454161760045516906003541617600355611ac29081620001958239f35b600e8152601f60208220920160051c8201915b828110620001375750620000d7565b818155879550830162000128565b634e487b7160e01b81526022600452602490fd5b91607f1691620000be565b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620001645756fe6080604052600436101561001257600080fd5b60003560e01c8063067bd3b41461019257806318da00111461018d5780632ae219b9146101885780634b57b0be1461018357806354a12c9b1461017e57806354fd4d50146101795780635dc96d1614610174578063715018a61461016f5780637b2c835f1461016a5780637fe955d4146101655780638da5cb5b14610160578063ad8613241461015b578063b2a2e9ca14610156578063be22f54614610151578063ca5b4e5c1461014c578063cedf3ba21461013d578063d223a56414610147578063d570a66d14610142578063e58fdd041461013d578063e86ef35314610138578063e9318b4714610133578063f2fde38b1461012e578063f77800e5146101295763f887ea401461012457600080fd5b610e09565b610de0565b610d19565b610cc5565b610c48565b610b78565b610c03565b610bca565b610989565b610960565b6108e6565b610858565b6106fa565b610674565b6105f6565b610591565b61056e565b61049b565b610390565b6102d7565b6101ef565b6101b5565b346101b05760003660031901126101b0576020601054604051908152f35b600080fd5b346101b05760003660031901126101b0576003546040516001600160a01b039091168152602090f35b6001600160a01b038116036101b057565b346101b05760c03660031901126101b0576102d560043561020f816101de565b6102b86024359161021f836101de565b6044359061022c826101de565b60643591610239836101de565b60843592610246846101de565b60a43595610253876101de565b61025b610e32565b60018060a01b0392838092816001600160601b0360a01b971687600354161760035516856004541617600455168360085416176008551690600654161760065560018060a01b03166001600160601b0360a01b6007541617600755565b60018060a01b03166001600160601b0360a01b6009541617600955565b005b346101b05760003660031901126101b0576008546040516001600160a01b039091168152602090f35b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761033857604052565b610300565b67ffffffffffffffff811161033857601f01601f191660200190565b9291926103658261033d565b916103736040519384610316565b8294818452818301116101b0578281602093846000960137010152565b346101b05760403660031901126101b05767ffffffffffffffff6004358181116101b057366023820112156101b0576103d3903690602481600401359101610359565b6024359182116101b057366023830112156101b0576103ff6102d5923690602481600401359101610359565b90610e8a565b90600182811c92168015610435575b602083101461041f57565b634e487b7160e01b600052602260045260246000fd5b91607f1691610414565b60005b8381106104525750506000910152565b8181015183820152602001610442565b9060209161047b8151809281855285808601910161043f565b601f01601f1916010190565b906020610498928181520190610462565b90565b346101b05760008060031936011261056b576040519080600e546104be81610405565b8085529160019180831690811561054157506001146104f8575b6104f4856104e881870382610316565b60405191829182610487565b0390f35b9250600e8352600080516020611a6d8339815191525b8284106105295750505081016020016104e8826104f46104d8565b8054602085870181019190915290930192810161050e565b8695506104f4969350602092506104e894915060ff191682840152151560051b82010192936104d8565b80fd5b346101b05760003660031901126101b057602060ff600f54166040519015158152f35b346101b05760008060031936011261056b576105ab610e32565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b801515036101b057565b346101b05760203660031901126101b057600435610613816105ec565b61061b610e32565b60ff8019600f54169115151617600f55600080f35b6020908160408183019282815285518094520193019160005b828110610657575050505090565b83516001600160a01b031685529381019392810192600101610649565b346101b05760003660031901126101b05760405180600191825492838252602080920193816000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6926000905b8282106106e5576104f4866106d9818a0382610316565b60405191829182610630565b845487529586019593830193908301906106c2565b346101b05760003660031901126101b0576000546040516001600160a01b039091168152602090f35b634e487b7160e01b600052602160045260246000fd5b9060088210156107465752565b610723565b9060038210156107465752565b80516001600160a01b0316825261049891906020818101516001600160a01b03169083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526107cc6101008083015190840190610739565b6107df610120808301519084019061074b565b610140809101519161016080928201520190610462565b602080820190808352835180925260408301928160408460051b8301019501936000915b84831061082a5750505050505090565b9091929394958480610848600193603f198682030187528a51610758565b980193019301919493929061081a565b346101b0576020806003193601126101b057600435610876816101de565b60018060a01b0316600052600c81526040600020604051918281835491828152019260005281600020916000905b8282106108cf576104f46108c3876108be81890382610316565b6119d0565b604051918291826107f6565b8354855293840193600193840193909101906108a4565b346101b0576020806003193601126101b057600435610904816101de565b6001600160a01b03166000908152600c82526040808220905181548082529183528383208185019491939092915b828210610949576104f4856106d981890382610316565b835486529485019460019384019390910190610932565b346101b05760003660031901126101b0576007546040516001600160a01b039091168152602090f35b60008060031936011261056b576004546001600160a01b0316604051806109b530843360208501611123565b036109c8601f1991828101845283610316565b60405163122643f360e21b81523360048201526001600160a01b03939091906020908390602490829088165afa908115610b7357610a14610aa492610a98948891610b45575b50611207565b610a27610a1f611556565b341015611249565b610a628680808034610a52610a46610a4660035460018060a01b031690565b6001600160a01b031690565b5af1610a5c611286565b506112b6565b610a75610a706010546112f0565b601055565b610a7d611315565b93604051938491610a926020840180986113d1565b906113d1565b03908101835282610316565b519083f090813b15610b4157816104f4917fb658664a46408e6670a38ec7ea8b7614c9e2916184dff2fad99d3a7a3491ca7d949316610ae281611411565b50336000908152600c60205260409020610afd9083906113e8565b506001600160a01b0382166000908152600d60205260409020610b2790805460ff19166001179055565b60405194848695a26001600160a01b031682526020820190565b8280fd5b610b66915060203d8111610b6c575b610b5e8183610316565b8101906111e6565b38610a0e565b503d610b54565b6111fb565b346101b05760203660031901126101b057600435610b95816101de565b60018060a01b0316600052600d602052602060ff604060002054166040519015158152f35b6004359060ff821682036101b057565b346101b05760203660031901126101b05760ff610be5610bba565b16600052600b602052602062ffffff60406000205416604051908152f35b346101b05760203660031901126101b0576104f4610c34600435610c26816101de565b610c2e6114e3565b50611672565b604051918291602083526020830190610758565b346101b05760003660031901126101b05760405180600190815491828252602080920192816000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6926000905b828210610cb0576104f46108c3886108be818a0382610316565b84548652948501949383019390830190610c96565b346101b05760403660031901126101b057610cde610bba565b6024359062ffffff82168092036101b05760ff90610cfa610e32565b16600052600b60205260406000209062ffffff19825416179055600080f35b346101b05760203660031901126101b057600435610d36816101de565b610d3e610e32565b6001600160a01b039081168015610d8c57600080546001600160a01b03198116831782559092167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b346101b05760003660031901126101b0576006546040516001600160a01b039091168152602090f35b346101b05760003660031901126101b0576009546040516001600160a01b039091168152602090f35b6000546001600160a01b03163303610e4657565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90610e93610e32565b815167ffffffffffffffff811161033857610eb881610eb3600a54610405565b610fa6565b602080601f8311600114610efc57508190610eef94600092610ef1575b50508160011b916000199060031b1c191617600a5561104b565b565b015190503880610ed5565b919293601f198416610f30600a6000527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a890565b936000905b828210610f77575050916001939185610eef97969410610f5e575b505050811b01600a5561104b565b015160001960f88460031b161c19169055388080610f50565b80600186978294978701518155019601940190610f35565b818110610f9a575050565b60008155600101610f8f565b90601f8211610fb3575050565b610eef91600a6000527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8906020601f840160051c83019310610ffd575b601f0160051c0190610f8f565b9091508190610ff0565b90601f8211611014575050565b610eef91600e600052600080516020611a6d833981519152906020601f840160051c83019310610ffd57601f0160051c0190610f8f565b90815167ffffffffffffffff8111610338576110718161106c600e54610405565b611007565b602080601f83116001146110ad57508192936000926110a2575b50508160011b916000199060031b1c191617600e55565b01519050388061108b565b90601f198316946110ce600e600052600080516020611a6d83398151915290565b926000905b87821061110b5750508360019596106110f2575b505050811b01600e55565b015160001960f88460031b161c191690553880806110e7565b806001859682949686015181550195019301906110d3565b9260018060a01b03809216845281602093168385015216604083015260806060830152600091600e549161115683610405565b9283608084015260019081811690816000146111c3575060011461117c575b5050505090565b600e6000908152939450600080516020611a6d8339815191525b8585106111af5750505060a09250010138808080611175565b805485850160a00152938201938101611196565b9250505060a0935060ff929192191683830152151560051b010138808080611175565b908160209103126101b05751610498816105ec565b6040513d6000823e3d90fd5b1561120e57565b60405162461bcd60e51b81526020600482015260136024820152721d5cd95c88191bd95cc81b9bdd08195e1a5cdd606a1b6044820152606490fd5b1561125057565b60405162461bcd60e51b815260206004820152600e60248201526d4e4f545f454e4f5547485f46454560901b6044820152606490fd5b3d156112b1573d906112978261033d565b916112a56040519384610316565b82523d6000602084013e565b606090565b156112bd57565b60405162461bcd60e51b815260206004820152600b60248201526a10d0531317d1905253115160aa1b6044820152606490fd5b60001981146112ff5760010190565b634e487b7160e01b600052601160045260246000fd5b60405190600082600a549161132983610405565b808352926001908181169081156113af5750600114611350575b50610eef92500383610316565b600a600090815291507fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a85b8483106113945750610eef935050810160200138611343565b81935090816020925483858a0101520191019091859261137b565b905060209250610eef94915060ff191682840152151560051b82010138611343565b906113e46020928281519485920161043f565b0190565b610498916001600160a01b03169061148d565b634e487b7160e01b600052603260045260246000fd5b8060005260026020526040600020541560001461148757600154600160401b8110156103385760018101806001558110156114825781907fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60155600154906000526002602052604060002055600190565b6113fb565b50600090565b600082815260018201602081905260408220546114dc57825492600160401b84101561033857600184018082558410156114825784604094828552602085200155549382526020522055600190565b5091505090565b60405190610160820182811067ffffffffffffffff82111761033857604052606061014083600080825280602083015280604083015280848301528060808301528060a08301528060c08301528060e0830152806101008301526101208201520152565b908160209103126101b0575190565b6003546040516391792d5b60e01b815290602090829060049082906001600160a01b03165afa908115610b735760009161158e575090565b610498915060203d81116115af575b6115a78183610316565b810190611547565b503d61159d565b908160209103126101b05751610498816101de565b908160209103126101b0575160088110156101b05790565b60088210156107465752565b908160209103126101b0575160038110156101b05790565b60038210156107465752565b6020818303126101b05780519067ffffffffffffffff82116101b0570181601f820112156101b05780516116468161033d565b926116546040519485610316565b818452602082840101116101b057610498916020808501910161043f565b61167a6114e3565b506116836114e3565b6001600160a01b0390911680825260408051638da5cb5b60e01b8152600492602092909183818681865afa8015610b73576116d091600091611977575b506001600160a01b031686850152565b8051635c63ed6960e01b815283818681865afa908115610b735760009161195a575b50858201528051634c38d87760e01b815283818681865afa908115610b735760009161193d575b506060860152805163048bf3bb60e11b815283818681865afa908115610b7357600091611920575b5060808601528051630bc8361760e11b815283818681865afa908115610b7357600091611903575b5060a0860152805163d24e0c8760e01b815283818681865afa908115610b73576000916118e6575b5060c0860152805163faeb5e1760e01b815283818681865afa908115610b73576000916118c9575b5060e086015280516302734eab60e51b815283818681865afa8015610b73576117ef9160009161189c575b5061010087016115e3565b805163010a38f560e01b81529280848681865afa8015610b735760009461182392869261186f575b50506101208701611607565b5163054fd4d560e41b815292839182905afa908115610b735760009161184e575b5061014082015290565b611869913d8091833e6118618183610316565b810190611613565b38611844565b61188e9250803d10611895575b6118868183610316565b8101906115ef565b3880611817565b503d61187c565b6118bc9150853d87116118c2575b6118b48183610316565b8101906115cb565b386117e4565b503d6118aa565b6118e09150843d86116115af576115a78183610316565b386117b9565b6118fd9150843d86116115af576115a78183610316565b38611791565b61191a9150843d86116115af576115a78183610316565b38611769565b6119379150843d86116115af576115a78183610316565b38611741565b6119549150843d86116115af576115a78183610316565b38611719565b6119719150843d86116115af576115a78183610316565b386116f2565b6119979150853d871161199d575b61198f8183610316565b8101906115b6565b386116c0565b503d611985565b67ffffffffffffffff81116103385760051b60200190565b80518210156114825760209160051b010190565b80516119db816119a4565b916119e96040519384610316565b818352601f196119f8836119a4565b0160005b818110611a5557505060005b828110611a155750505090565b611a5090611a356001600160a01b03611a2e83866119bc565b5116611672565b611a3f82876119bc565b52611a4a81866119bc565b506112f0565b611a08565b602090611a606114e3565b828288010152016119fc56febb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fda26469706673582212201f601b6ada260b8240cca2388d612f134ff28f93612cfed93f830619f3ee8b0664736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c8063067bd3b41461019257806318da00111461018d5780632ae219b9146101885780634b57b0be1461018357806354a12c9b1461017e57806354fd4d50146101795780635dc96d1614610174578063715018a61461016f5780637b2c835f1461016a5780637fe955d4146101655780638da5cb5b14610160578063ad8613241461015b578063b2a2e9ca14610156578063be22f54614610151578063ca5b4e5c1461014c578063cedf3ba21461013d578063d223a56414610147578063d570a66d14610142578063e58fdd041461013d578063e86ef35314610138578063e9318b4714610133578063f2fde38b1461012e578063f77800e5146101295763f887ea401461012457600080fd5b610e09565b610de0565b610d19565b610cc5565b610c48565b610b78565b610c03565b610bca565b610989565b610960565b6108e6565b610858565b6106fa565b610674565b6105f6565b610591565b61056e565b61049b565b610390565b6102d7565b6101ef565b6101b5565b346101b05760003660031901126101b0576020601054604051908152f35b600080fd5b346101b05760003660031901126101b0576003546040516001600160a01b039091168152602090f35b6001600160a01b038116036101b057565b346101b05760c03660031901126101b0576102d560043561020f816101de565b6102b86024359161021f836101de565b6044359061022c826101de565b60643591610239836101de565b60843592610246846101de565b60a43595610253876101de565b61025b610e32565b60018060a01b0392838092816001600160601b0360a01b971687600354161760035516856004541617600455168360085416176008551690600654161760065560018060a01b03166001600160601b0360a01b6007541617600755565b60018060a01b03166001600160601b0360a01b6009541617600955565b005b346101b05760003660031901126101b0576008546040516001600160a01b039091168152602090f35b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761033857604052565b610300565b67ffffffffffffffff811161033857601f01601f191660200190565b9291926103658261033d565b916103736040519384610316565b8294818452818301116101b0578281602093846000960137010152565b346101b05760403660031901126101b05767ffffffffffffffff6004358181116101b057366023820112156101b0576103d3903690602481600401359101610359565b6024359182116101b057366023830112156101b0576103ff6102d5923690602481600401359101610359565b90610e8a565b90600182811c92168015610435575b602083101461041f57565b634e487b7160e01b600052602260045260246000fd5b91607f1691610414565b60005b8381106104525750506000910152565b8181015183820152602001610442565b9060209161047b8151809281855285808601910161043f565b601f01601f1916010190565b906020610498928181520190610462565b90565b346101b05760008060031936011261056b576040519080600e546104be81610405565b8085529160019180831690811561054157506001146104f8575b6104f4856104e881870382610316565b60405191829182610487565b0390f35b9250600e8352600080516020611a6d8339815191525b8284106105295750505081016020016104e8826104f46104d8565b8054602085870181019190915290930192810161050e565b8695506104f4969350602092506104e894915060ff191682840152151560051b82010192936104d8565b80fd5b346101b05760003660031901126101b057602060ff600f54166040519015158152f35b346101b05760008060031936011261056b576105ab610e32565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b801515036101b057565b346101b05760203660031901126101b057600435610613816105ec565b61061b610e32565b60ff8019600f54169115151617600f55600080f35b6020908160408183019282815285518094520193019160005b828110610657575050505090565b83516001600160a01b031685529381019392810192600101610649565b346101b05760003660031901126101b05760405180600191825492838252602080920193816000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6926000905b8282106106e5576104f4866106d9818a0382610316565b60405191829182610630565b845487529586019593830193908301906106c2565b346101b05760003660031901126101b0576000546040516001600160a01b039091168152602090f35b634e487b7160e01b600052602160045260246000fd5b9060088210156107465752565b610723565b9060038210156107465752565b80516001600160a01b0316825261049891906020818101516001600160a01b03169083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526107cc6101008083015190840190610739565b6107df610120808301519084019061074b565b610140809101519161016080928201520190610462565b602080820190808352835180925260408301928160408460051b8301019501936000915b84831061082a5750505050505090565b9091929394958480610848600193603f198682030187528a51610758565b980193019301919493929061081a565b346101b0576020806003193601126101b057600435610876816101de565b60018060a01b0316600052600c81526040600020604051918281835491828152019260005281600020916000905b8282106108cf576104f46108c3876108be81890382610316565b6119d0565b604051918291826107f6565b8354855293840193600193840193909101906108a4565b346101b0576020806003193601126101b057600435610904816101de565b6001600160a01b03166000908152600c82526040808220905181548082529183528383208185019491939092915b828210610949576104f4856106d981890382610316565b835486529485019460019384019390910190610932565b346101b05760003660031901126101b0576007546040516001600160a01b039091168152602090f35b60008060031936011261056b576004546001600160a01b0316604051806109b530843360208501611123565b036109c8601f1991828101845283610316565b60405163122643f360e21b81523360048201526001600160a01b03939091906020908390602490829088165afa908115610b7357610a14610aa492610a98948891610b45575b50611207565b610a27610a1f611556565b341015611249565b610a628680808034610a52610a46610a4660035460018060a01b031690565b6001600160a01b031690565b5af1610a5c611286565b506112b6565b610a75610a706010546112f0565b601055565b610a7d611315565b93604051938491610a926020840180986113d1565b906113d1565b03908101835282610316565b519083f090813b15610b4157816104f4917fb658664a46408e6670a38ec7ea8b7614c9e2916184dff2fad99d3a7a3491ca7d949316610ae281611411565b50336000908152600c60205260409020610afd9083906113e8565b506001600160a01b0382166000908152600d60205260409020610b2790805460ff19166001179055565b60405194848695a26001600160a01b031682526020820190565b8280fd5b610b66915060203d8111610b6c575b610b5e8183610316565b8101906111e6565b38610a0e565b503d610b54565b6111fb565b346101b05760203660031901126101b057600435610b95816101de565b60018060a01b0316600052600d602052602060ff604060002054166040519015158152f35b6004359060ff821682036101b057565b346101b05760203660031901126101b05760ff610be5610bba565b16600052600b602052602062ffffff60406000205416604051908152f35b346101b05760203660031901126101b0576104f4610c34600435610c26816101de565b610c2e6114e3565b50611672565b604051918291602083526020830190610758565b346101b05760003660031901126101b05760405180600190815491828252602080920192816000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6926000905b828210610cb0576104f46108c3886108be818a0382610316565b84548652948501949383019390830190610c96565b346101b05760403660031901126101b057610cde610bba565b6024359062ffffff82168092036101b05760ff90610cfa610e32565b16600052600b60205260406000209062ffffff19825416179055600080f35b346101b05760203660031901126101b057600435610d36816101de565b610d3e610e32565b6001600160a01b039081168015610d8c57600080546001600160a01b03198116831782559092167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b346101b05760003660031901126101b0576006546040516001600160a01b039091168152602090f35b346101b05760003660031901126101b0576009546040516001600160a01b039091168152602090f35b6000546001600160a01b03163303610e4657565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90610e93610e32565b815167ffffffffffffffff811161033857610eb881610eb3600a54610405565b610fa6565b602080601f8311600114610efc57508190610eef94600092610ef1575b50508160011b916000199060031b1c191617600a5561104b565b565b015190503880610ed5565b919293601f198416610f30600a6000527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a890565b936000905b828210610f77575050916001939185610eef97969410610f5e575b505050811b01600a5561104b565b015160001960f88460031b161c19169055388080610f50565b80600186978294978701518155019601940190610f35565b818110610f9a575050565b60008155600101610f8f565b90601f8211610fb3575050565b610eef91600a6000527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8906020601f840160051c83019310610ffd575b601f0160051c0190610f8f565b9091508190610ff0565b90601f8211611014575050565b610eef91600e600052600080516020611a6d833981519152906020601f840160051c83019310610ffd57601f0160051c0190610f8f565b90815167ffffffffffffffff8111610338576110718161106c600e54610405565b611007565b602080601f83116001146110ad57508192936000926110a2575b50508160011b916000199060031b1c191617600e55565b01519050388061108b565b90601f198316946110ce600e600052600080516020611a6d83398151915290565b926000905b87821061110b5750508360019596106110f2575b505050811b01600e55565b015160001960f88460031b161c191690553880806110e7565b806001859682949686015181550195019301906110d3565b9260018060a01b03809216845281602093168385015216604083015260806060830152600091600e549161115683610405565b9283608084015260019081811690816000146111c3575060011461117c575b5050505090565b600e6000908152939450600080516020611a6d8339815191525b8585106111af5750505060a09250010138808080611175565b805485850160a00152938201938101611196565b9250505060a0935060ff929192191683830152151560051b010138808080611175565b908160209103126101b05751610498816105ec565b6040513d6000823e3d90fd5b1561120e57565b60405162461bcd60e51b81526020600482015260136024820152721d5cd95c88191bd95cc81b9bdd08195e1a5cdd606a1b6044820152606490fd5b1561125057565b60405162461bcd60e51b815260206004820152600e60248201526d4e4f545f454e4f5547485f46454560901b6044820152606490fd5b3d156112b1573d906112978261033d565b916112a56040519384610316565b82523d6000602084013e565b606090565b156112bd57565b60405162461bcd60e51b815260206004820152600b60248201526a10d0531317d1905253115160aa1b6044820152606490fd5b60001981146112ff5760010190565b634e487b7160e01b600052601160045260246000fd5b60405190600082600a549161132983610405565b808352926001908181169081156113af5750600114611350575b50610eef92500383610316565b600a600090815291507fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a85b8483106113945750610eef935050810160200138611343565b81935090816020925483858a0101520191019091859261137b565b905060209250610eef94915060ff191682840152151560051b82010138611343565b906113e46020928281519485920161043f565b0190565b610498916001600160a01b03169061148d565b634e487b7160e01b600052603260045260246000fd5b8060005260026020526040600020541560001461148757600154600160401b8110156103385760018101806001558110156114825781907fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60155600154906000526002602052604060002055600190565b6113fb565b50600090565b600082815260018201602081905260408220546114dc57825492600160401b84101561033857600184018082558410156114825784604094828552602085200155549382526020522055600190565b5091505090565b60405190610160820182811067ffffffffffffffff82111761033857604052606061014083600080825280602083015280604083015280848301528060808301528060a08301528060c08301528060e0830152806101008301526101208201520152565b908160209103126101b0575190565b6003546040516391792d5b60e01b815290602090829060049082906001600160a01b03165afa908115610b735760009161158e575090565b610498915060203d81116115af575b6115a78183610316565b810190611547565b503d61159d565b908160209103126101b05751610498816101de565b908160209103126101b0575160088110156101b05790565b60088210156107465752565b908160209103126101b0575160038110156101b05790565b60038210156107465752565b6020818303126101b05780519067ffffffffffffffff82116101b0570181601f820112156101b05780516116468161033d565b926116546040519485610316565b818452602082840101116101b057610498916020808501910161043f565b61167a6114e3565b506116836114e3565b6001600160a01b0390911680825260408051638da5cb5b60e01b8152600492602092909183818681865afa8015610b73576116d091600091611977575b506001600160a01b031686850152565b8051635c63ed6960e01b815283818681865afa908115610b735760009161195a575b50858201528051634c38d87760e01b815283818681865afa908115610b735760009161193d575b506060860152805163048bf3bb60e11b815283818681865afa908115610b7357600091611920575b5060808601528051630bc8361760e11b815283818681865afa908115610b7357600091611903575b5060a0860152805163d24e0c8760e01b815283818681865afa908115610b73576000916118e6575b5060c0860152805163faeb5e1760e01b815283818681865afa908115610b73576000916118c9575b5060e086015280516302734eab60e51b815283818681865afa8015610b73576117ef9160009161189c575b5061010087016115e3565b805163010a38f560e01b81529280848681865afa8015610b735760009461182392869261186f575b50506101208701611607565b5163054fd4d560e41b815292839182905afa908115610b735760009161184e575b5061014082015290565b611869913d8091833e6118618183610316565b810190611613565b38611844565b61188e9250803d10611895575b6118868183610316565b8101906115ef565b3880611817565b503d61187c565b6118bc9150853d87116118c2575b6118b48183610316565b8101906115cb565b386117e4565b503d6118aa565b6118e09150843d86116115af576115a78183610316565b386117b9565b6118fd9150843d86116115af576115a78183610316565b38611791565b61191a9150843d86116115af576115a78183610316565b38611769565b6119379150843d86116115af576115a78183610316565b38611741565b6119549150843d86116115af576115a78183610316565b38611719565b6119719150843d86116115af576115a78183610316565b386116f2565b6119979150853d871161199d575b61198f8183610316565b8101906115b6565b386116c0565b503d611985565b67ffffffffffffffff81116103385760051b60200190565b80518210156114825760209160051b010190565b80516119db816119a4565b916119e96040519384610316565b818352601f196119f8836119a4565b0160005b818110611a5557505060005b828110611a155750505090565b611a5090611a356001600160a01b03611a2e83866119bc565b5116611672565b611a3f82876119bc565b52611a4a81866119bc565b506112f0565b611a08565b602090611a606114e3565b828288010152016119fc56febb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fda26469706673582212201f601b6ada260b8240cca2388d612f134ff28f93612cfed93f830619f3ee8b0664736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/evm/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 765,
        "contract": "contracts/evm/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "feeds",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(AddressSet)460_storage"
      },
      {
        "astId": 768,
        "contract": "contracts/evm/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "settings",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(FactorySettings)1408_storage"
      },
      {
        "astId": 770,
        "contract": "contracts/evm/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "feedByteCode",
        "offset": 0,
        "slot": "10",
        "type": "t_bytes_storage"
      },
      {
        "astId": 774,
        "contract": "contracts/evm/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "routerFee",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint8,t_uint24)"
      },
      {
        "astId": 779,
        "contract": "contracts/evm/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "feedStore",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_struct(AddressSet)460_storage)"
      },
      {
        "astId": 783,
        "contract": "contracts/evm/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "createdContracts",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 786,
        "contract": "contracts/evm/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "version",
        "offset": 0,
        "slot": "14",
        "type": "t_string_storage"
      },
      {
        "astId": 789,
        "contract": "contracts/evm/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "burnEnabled",
        "offset": 0,
        "slot": "15",
        "type": "t_bool"
      },
      {
        "astId": 791,
        "contract": "contracts/evm/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "contractCounter",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(AddressSet)460_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)460_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint8,t_uint24)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint24)",
        "numberOfBytes": "32",
        "value": "t_uint24"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)460_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 459,
            "contract": "contracts/evm/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)145_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(FactorySettings)1408_storage": {
        "encoding": "inplace",
        "label": "struct Structures.FactorySettings",
        "members": [
          {
            "astId": 1395,
            "contract": "contracts/evm/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "treasuryContract",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1397,
            "contract": "contracts/evm/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "usersModuleContract",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1399,
            "contract": "contracts/evm/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "easContract",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1401,
            "contract": "contracts/evm/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "museToken",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 1403,
            "contract": "contracts/evm/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "daiToken",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 1405,
            "contract": "contracts/evm/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "wethToken",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 1407,
            "contract": "contracts/evm/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "router",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Set)145_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 140,
            "contract": "contracts/evm/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 144,
            "contract": "contracts/evm/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}