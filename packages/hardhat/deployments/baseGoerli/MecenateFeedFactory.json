{
  "address": "0x6eA1a3dB33d2863F1652f5b53267742B14C0A3fC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usersModuleContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasuryContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_verifierContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "FeedCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "sismoConnectResponse",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        }
      ],
      "name": "buildFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usersModule",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wethToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_museToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_daiToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "changeMultipleSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_version",
          "type": "string"
        }
      ],
      "name": "changeVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daiToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feed",
          "type": "address"
        }
      ],
      "name": "getFeedInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "operator",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "sellerStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyerStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "postCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "paymentRequested",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeRequested",
              "type": "uint256"
            },
            {
              "internalType": "enum Structures.PostStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "enum Structures.Tokens",
              "name": "tokenId",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "version",
              "type": "string"
            }
          ],
          "internalType": "struct Structures.Feed",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeds",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeedsInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "operator",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "sellerStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyerStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "postCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "paymentRequested",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeRequested",
              "type": "uint256"
            },
            {
              "internalType": "enum Structures.PostStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "enum Structures.Tokens",
              "name": "tokenId",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "version",
              "type": "string"
            }
          ],
          "internalType": "struct Structures.Feed[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "vaultId",
          "type": "bytes32"
        }
      ],
      "name": "getFeedsInfoOwned",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "operator",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "sellerStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "buyerStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "postCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "paymentRequested",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeRequested",
              "type": "uint256"
            },
            {
              "internalType": "enum Structures.PostStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "enum Structures.Tokens",
              "name": "tokenId",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "version",
              "type": "string"
            }
          ],
          "internalType": "struct Structures.Feed[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "vaultId",
          "type": "bytes32"
        }
      ],
      "name": "getFeedsOwned",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "tokenId",
          "type": "uint8"
        }
      ],
      "name": "getRouterFee",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "identityContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "isContractCreated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feed",
          "type": "address"
        }
      ],
      "name": "isFeed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "museToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_burnEnabled",
          "type": "bool"
        }
      ],
      "name": "setBurnEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_byteCode",
          "type": "bytes"
        }
      ],
      "name": "setFeedByteCode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "tokenId",
          "type": "uint8"
        },
        {
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        }
      ],
      "name": "setRouterFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wethToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x5bc2527c487b2373cd01929a92dfa510cf13eff67de42e487859bbad375af91d",
  "receipt": {
    "to": null,
    "from": "0x8aA5F726d9F868a21a8bd748E2f1E43bA31eb670",
    "contractAddress": "0x6eA1a3dB33d2863F1652f5b53267742B14C0A3fC",
    "transactionIndex": 1,
    "gasUsed": "1768987",
    "logsBloom": "0x80000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000100000000000000000000004000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000001000000000000000000000000000000000010000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xc04fb1574a4a3b44a00e6a8a6ce6db487e2623064e876fa4236c9cc6374e0b54",
    "transactionHash": "0x5bc2527c487b2373cd01929a92dfa510cf13eff67de42e487859bbad375af91d",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 11101563,
        "transactionHash": "0x5bc2527c487b2373cd01929a92dfa510cf13eff67de42e487859bbad375af91d",
        "address": "0x6eA1a3dB33d2863F1652f5b53267742B14C0A3fC",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008aa5f726d9f868a21a8bd748e2f1e43ba31eb670"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc04fb1574a4a3b44a00e6a8a6ce6db487e2623064e876fa4236c9cc6374e0b54"
      }
    ],
    "blockNumber": 11101563,
    "cumulativeGasUsed": "1815840",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x602B69dCe63dcDA1bA13b2698f98336876b60e8B",
    "0xF72356F915232705C3bd1a1F7eD03D5c5f67Ca29",
    "0xE489083a791C01F2c08600dc5E12051F82Ebc57f"
  ],
  "numDeployments": 11,
  "solcInputHash": "ecd027acd5b2c3f49b1ec8f0fd616964",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usersModuleContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_verifierContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"FeedCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"buildFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usersModule\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_museToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_daiToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"changeMultipleSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"}],\"name\":\"changeVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feed\",\"type\":\"address\"}],\"name\":\"getFeedInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"operator\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sellerStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentRequested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeRequested\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"internalType\":\"struct Structures.Feed\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeds\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeedsInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"operator\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sellerStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentRequested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeRequested\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"internalType\":\"struct Structures.Feed[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"name\":\"getFeedsInfoOwned\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"operator\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sellerStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentRequested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeRequested\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"internalType\":\"struct Structures.Feed[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"vaultId\",\"type\":\"bytes32\"}],\"name\":\"getFeedsOwned\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"name\":\"getRouterFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identityContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"isContractCreated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feed\",\"type\":\"address\"}],\"name\":\"isFeed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"museToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_burnEnabled\",\"type\":\"bool\"}],\"name\":\"setBurnEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_byteCode\",\"type\":\"bytes\"}],\"name\":\"setFeedByteCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"setRouterFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/factories/MecenateFeedFactory.sol\":\"MecenateFeedFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/factories/MecenateFeedFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../interfaces/IMecenateUsers.sol\\\";\\nimport \\\"../interfaces/IMecenateTreasury.sol\\\";\\nimport \\\"../interfaces/IMecenateVerifier.sol\\\";\\nimport \\\"../modules/FeedViewer.sol\\\";\\n\\ncontract MecenateFeedFactory is Ownable, FeedViewer {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    string public version;\\n\\n    bytes internal feedByteCode;\\n\\n    uint256 public contractCounter;\\n    EnumerableSet.AddressSet internal feeds;\\n    Structures.FactorySettings internal settings;\\n    mapping(uint8 => uint24) internal routerFee;\\n    mapping(bytes32 => EnumerableSet.AddressSet) internal feedStore;\\n    mapping(address => bool) internal createdContracts;\\n\\n    event FeedCreated(address indexed addr);\\n\\n    bool public burnEnabled = false;\\n\\n    constructor(\\n        address _usersModuleContract,\\n        address _treasuryContract,\\n        address _verifierContract\\n    ) {\\n        settings.usersModuleContract = _usersModuleContract;\\n        settings.treasuryContract = _treasuryContract;\\n        settings.verifierContract = _verifierContract;\\n    }\\n\\n    function changeVersion(string memory _version) external onlyOwner {\\n        version = _version;\\n    }\\n\\n    function treasuryContract() external view returns (address) {\\n        return settings.treasuryContract;\\n    }\\n\\n    function identityContract() external view returns (address) {\\n        return settings.verifierContract;\\n    }\\n\\n    function daiToken() external view returns (address) {\\n        return settings.daiToken;\\n    }\\n\\n    function wethToken() external view returns (address) {\\n        return settings.wethToken;\\n    }\\n\\n    function museToken() external view returns (address) {\\n        return settings.museToken;\\n    }\\n\\n    function router() external view returns (address) {\\n        return settings.router;\\n    }\\n\\n    function getRouterFee(uint8 tokenId) external view returns (uint24) {\\n        return routerFee[tokenId];\\n    }\\n\\n    function setRouterFee(uint8 tokenId, uint24 fee) external onlyOwner {\\n        routerFee[tokenId] = fee;\\n    }\\n\\n    function setBurnEnabled(bool _burnEnabled) external onlyOwner {\\n        burnEnabled = _burnEnabled;\\n    }\\n\\n    function isFeed(address _feed) external view returns (bool) {\\n        return createdContracts[_feed];\\n    }\\n\\n    function changeMultipleSettings(\\n        address _treasury,\\n        address _usersModule,\\n        address _wethToken,\\n        address _museToken,\\n        address _daiToken,\\n        address _router\\n    ) external onlyOwner {\\n        settings.treasuryContract = _treasury;\\n        settings.usersModuleContract = _usersModule;\\n        settings.wethToken = _wethToken;\\n        settings.museToken = _museToken;\\n        settings.daiToken = _daiToken;\\n        settings.router = _router;\\n    }\\n\\n    function setFeedByteCode(bytes memory _byteCode) external onlyOwner {\\n        feedByteCode = _byteCode;\\n        // add version incremental to the current string\\n        version = string(abi.encodePacked(\\\"v2.0.1\\\"));\\n    }\\n\\n    function buildFeed(\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        address _from\\n    ) external payable returns (address) {\\n        (bytes memory vaultId, , ) = IMecenateVerifier(\\n            settings.verifierContract\\n        ).sismoVerify(sismoConnectResponse, _to, _from);\\n\\n        bytes32 encryptedVaultId = keccak256(vaultId);\\n\\n        bytes memory constructorArguments = abi.encode(\\n            encryptedVaultId,\\n            settings.usersModuleContract,\\n            settings.verifierContract,\\n            address(this),\\n            version\\n        );\\n\\n        require(\\n            IMecenateUsers(settings.usersModuleContract).checkifUserExist(\\n                encryptedVaultId\\n            ),\\n            \\\"user does not exist\\\"\\n        );\\n\\n        require(msg.value >= getCreationFee(), \\\"NOT_ENOUGH_FEE\\\");\\n\\n        (bool _result, ) = payable(settings.treasuryContract).call{\\n            value: msg.value\\n        }(\\\"\\\");\\n\\n        require(_result, \\\"CALL_FAILED\\\");\\n\\n        contractCounter++;\\n\\n        address addr;\\n\\n        bytes memory tempByteCode = feedByteCode; // Carico la variabile di storage in una variabile locale\\n\\n        // Concatena il bytecode e gli argomenti del costruttore\\n        bytes memory bytecodeWithConstructor = abi.encodePacked(\\n            tempByteCode,\\n            constructorArguments\\n        );\\n\\n        // Deploy del contratto con gli argomenti del costruttore\\n        assembly {\\n            addr := create(\\n                0,\\n                add(bytecodeWithConstructor, 0x20),\\n                mload(bytecodeWithConstructor)\\n            )\\n            if iszero(extcodesize(addr)) {\\n                revert(0, 0)\\n            }\\n        }\\n\\n        address feed = addr;\\n\\n        feeds.add(address(feed));\\n        feedStore[encryptedVaultId].add(address(feed));\\n        createdContracts[address(feed)] = true;\\n\\n        emit FeedCreated(address(feed));\\n\\n        return address(feed);\\n    }\\n\\n    function getFeeds() external view returns (address[] memory) {\\n        return feeds.values();\\n    }\\n\\n    function getFeedsOwned(\\n        bytes32 vaultId\\n    ) external view returns (address[] memory) {\\n        return feedStore[vaultId].values();\\n    }\\n\\n    function getFeedsInfoOwned(\\n        bytes32 vaultId\\n    ) external view returns (Structures.Feed[] memory) {\\n        return _getFeedsInfo(feedStore[vaultId].values());\\n    }\\n\\n    function getFeedInfo(\\n        address _feed\\n    ) external view returns (Structures.Feed memory) {\\n        return _getFeedInfo(_feed);\\n    }\\n\\n    function getFeedsInfo() external view returns (Structures.Feed[] memory) {\\n        return _getFeedsInfo(feeds.values());\\n    }\\n\\n    function isContractCreated(\\n        address contractAddress\\n    ) external view returns (bool) {\\n        return createdContracts[contractAddress];\\n    }\\n\\n    function getCreationFee() internal view returns (uint256) {\\n        return IMecenateTreasury(settings.treasuryContract).fixedFee();\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x676274f54e3eb49181911d56f830a31ea8c00bd1d3f12d760c00b7855a73d8d7\",\"license\":\"MIT\"},\"contracts/interfaces/IMecenateFeed.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateFeed {\\n    function getTotalStaked() external view returns (uint256);\\n\\n    function postCount() external view returns (uint256);\\n\\n    function acceptPost(\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        address _from,\\n        Structures.Tokens,\\n        uint256 _amount\\n    ) external payable;\\n\\n    function getSellerStake() external view returns (uint256);\\n\\n    function getBuyerStake() external view returns (uint256);\\n\\n    function getPaymentRequested() external view returns (uint256);\\n\\n    function getStakeRequested() external view returns (uint256);\\n\\n    function getStatus() external view returns (Structures.PostStatus status);\\n\\n    function getTokenId() external view returns (Structures.Tokens tokenId);\\n\\n    function owner() external view returns (bytes32);\\n\\n    function version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x7896dbd570e3fda7ecd42708f58d201d199b3d9947f814547bcaf40631ae0654\"},\"contracts/interfaces/IMecenateTreasury.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateTreasury {\\r\\n    function globalFee() external view returns (uint256);\\r\\n\\r\\n    function fixedFee() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf544878bba8e01c837110d06eac56042957d59c593ba9083f686ef02aa9276a1\"},\"contracts/interfaces/IMecenateUsers.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\nimport \\\"../library/Structures.sol\\\";\\r\\n\\r\\ninterface IMecenateUsers {\\r\\n    function checkifUserExist(bytes32 vaultId) external view returns (bool);\\r\\n\\r\\n    function getUserData(\\r\\n        address user\\r\\n    ) external view returns (Structures.User memory);\\r\\n\\r\\n    function getUserCount() external view returns (uint256);\\r\\n\\r\\n    function getUserAt(uint256 index) external view returns (address);\\r\\n\\r\\n    function getUserVaultIdAt(uint256 index) external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0xcd2b91f5bebd5c880ac937b181771a0a722a9a71ff93c783da3c63137179a042\"},\"contracts/interfaces/IMecenateVerifier.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\ninterface IMecenateVerifier {\\n    function sismoVerify(\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        address _from\\n    ) external view returns (bytes memory, uint256, uint256);\\n}\\n\",\"keccak256\":\"0x49e4b2b0781bc6af8190f38864ea965b251a0ec4dc266f44bbb6f567adccabba\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\n * @title Structures\\n * @dev This library defines various data structures used in the Mecenate platform.\\n */\\npragma solidity 0.8.19;\\n\\nlibrary Structures {\\n    enum PostStatus {\\n        Waiting,\\n        Proposed,\\n        Accepted,\\n        Submitted,\\n        Finalized,\\n        Punished,\\n        Revealed,\\n        Renounced\\n    }\\n    enum Tokens {\\n        NaN,\\n        MUSE,\\n        DAI\\n    }\\n    enum PostType {\\n        Text,\\n        Image,\\n        Video,\\n        Audio,\\n        File\\n    }\\n    enum PostDuration {\\n        OneDay,\\n        ThreeDays,\\n        OneWeek,\\n        TwoWeeks,\\n        OneMonth\\n    }\\n\\n    struct FeedSettings {\\n        uint256 punishmentRatio;\\n        uint256 postCount;\\n        address usersModuleContract;\\n        address factoryContract;\\n        address verifierContract;\\n        address vaultContract;\\n        address router;\\n        bytes encodedSymKey;\\n        bytes lastMessageForBuyer;\\n        bytes lastMessageForSeller;\\n        string version;\\n    }\\n\\n    struct FactorySettings {\\n        address treasuryContract;\\n        address usersModuleContract;\\n        address verifierContract;\\n        address museToken;\\n        address daiToken;\\n        address wethToken;\\n        address router;\\n    }\\n\\n    /**\\n     * @dev Struct representing a post on the Mecenate platform.\\n     */\\n    struct Post {\\n        User creator;\\n        PostData postdata;\\n    }\\n\\n    /**\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\n     */\\n    struct PostData {\\n        PostSettings settings;\\n        PostEscrow escrow;\\n        PostEncryptedData data;\\n    }\\n\\n    /**\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\n     */\\n    struct PostEncryptedData {\\n        bytes encryptedData;\\n        bytes encryptedKey;\\n        bytes decryptedData;\\n    }\\n\\n    /**\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettings {\\n        PostStatus status;\\n        PostType postType;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n        uint256 duration;\\n        Tokens tokenId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the private settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettingPrivate {\\n        bytes vaultIdSeller;\\n        uint256 sellerTwitterId;\\n        uint256 sellerTelegramId;\\n        bytes vaultIdBuyer;\\n        uint256 buyerTwitterId;\\n        uint256 buyerTelegramId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\n     */\\n    struct PostEscrow {\\n        uint256 stake;\\n        uint256 payment;\\n        uint256 punishment;\\n        uint256 penalty;\\n    }\\n\\n    /**\\n     * @dev Struct representing a user on the Mecenate platform.\\n     */\\n    struct User {\\n        bytes32 vaultId;\\n    }\\n\\n    /**\\n     * @dev Struct representing a feed on the Mecenate platform.\\n     */\\n    struct Feed {\\n        address contractAddress;\\n        bytes32 operator;\\n        uint256 sellerStake;\\n        uint256 buyerStake;\\n        uint256 totalStake;\\n        uint256 postCount;\\n        uint256 paymentRequested;\\n        uint256 stakeRequested;\\n        PostStatus status;\\n        Tokens tokenId;\\n        string version;\\n    }\\n\\n    /**\\n     * @dev Struct representing a bay request on the Mecenate platform.\\n     */\\n    struct BayRequest {\\n        bytes32 request;\\n        uint256 payment;\\n        uint256 stake;\\n        address postAddress;\\n        bool accepted;\\n        uint256 postCount;\\n        Tokens tokenId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the private settings of a bay request on the Mecenate platform.\\n     */\\n    struct BayRequestPrivate {\\n        bytes vaultIdSeller;\\n        bytes sellerResponse;\\n        bytes vaultIdBuyer;\\n        bytes buyerResponse;\\n        address buyerTo;\\n        address buyerFrom;\\n    }\\n}\\n\",\"keccak256\":\"0x6ec5a0f56708e43d4f5e48abe88175867b7f2c23c3d849362872623136b7c6c1\"},\"contracts/modules/FeedViewer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../library/Structures.sol\\\";\\nimport \\\"../interfaces/IMecenateFeed.sol\\\";\\n\\ncontract FeedViewer {\\n    function _getFeedInfo(\\n        address feed\\n    ) internal view returns (Structures.Feed memory) {\\n        Structures.Feed memory f;\\n\\n        IMecenateFeed mecenateFeed = IMecenateFeed(feed);\\n\\n        f.contractAddress = feed;\\n        f.operator = mecenateFeed.owner();\\n        f.sellerStake = mecenateFeed.getSellerStake();\\n        f.buyerStake = mecenateFeed.getBuyerStake();\\n        f.totalStake = mecenateFeed.getTotalStaked();\\n        f.postCount = mecenateFeed.postCount();\\n        f.paymentRequested = mecenateFeed.getPaymentRequested();\\n        f.stakeRequested = mecenateFeed.getStakeRequested();\\n        f.status = mecenateFeed.getStatus();\\n        f.tokenId = mecenateFeed.getTokenId();\\n        f.version = mecenateFeed.version();\\n\\n        return f;\\n    }\\n\\n    function _getFeedsInfo(\\n        address[] memory _feeds\\n    ) internal view returns (Structures.Feed[] memory) {\\n        uint256 len = _feeds.length;\\n        Structures.Feed[] memory f = new Structures.Feed[](len);\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            f[i] = _getFeedInfo(_feeds[i]);\\n        }\\n\\n        return f;\\n    }\\n}\\n\",\"keccak256\":\"0xc1fc8c5999cb6aadf168b958d93d67755858f33e45d839f4b2a73c3fe31e4978\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608034620000f157601f62001e6438819003918201601f19168301916001600160401b03831184841017620000f657808492606094604052833981010312620000f1576200004d816200010c565b62000069604062000061602085016200010c565b93016200010c565b600080546001600160a01b03198082163390811784556040519691956001600160a01b0395948694859391908416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a360ff1960105416601055168560075416176007551683600654161760065516906008541617600855611d429081620001228239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620000f15756fe6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c8063067bd3b4146101b657806318da0011146101b15780632327c3ab146101ac578063237b0d3c146101a75780632ae219b9146101a25780634b57b0be1461019d578063546008371461019857806354fd4d50146101935780635dc96d161461018e57806364bb432c1461018957806367031bae146101845780636d944e601461017f578063715018a61461017a5780637b2c835f146101755780637fe955d4146101705780638da5cb5b1461016b578063be22f54614610166578063cedf3ba214610157578063d223a56414610161578063d570a66d1461015c578063e58fdd0414610157578063e86ef35314610152578063e9318b471461014d578063f2fde38b14610148578063f77800e5146101435763f887ea400361000e5761113b565b611112565b61104f565b610ffb565b610f80565b610eb7565b610f3f565b610f06565b610e8e565b610e65565b610dea565b610db0565b610d4b565b610cd3565b610b7e565b610a67565b610a44565b61096f565b61087c565b6107fd565b61072f565b6105d6565b610334565b6101d9565b346101d45760003660031901126101d4576020600354604051908152f35b600080fd5b346101d45760003660031901126101d4576006546040516001600160a01b039091168152602090f35b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761023a57604052565b610202565b67ffffffffffffffff811161023a57601f01601f191660200190565b9291926102678261023f565b916102756040519384610218565b8294818452818301116101d4578281602093846000960137010152565b9080601f830112156101d4578160206102ad9335910161025b565b90565b602435906001600160a01b03821682036101d457565b604435906001600160a01b03821682036101d457565b600435906001600160a01b03821682036101d457565b606435906001600160a01b03821682036101d457565b608435906001600160a01b03821682036101d457565b60a435906001600160a01b03821682036101d457565b60603660031901126101d45760043567ffffffffffffffff81116101d457610360903690600401610292565b6103686102b0565b6103706102c6565b6008546001600160a01b03169161039c6040519283926307c93c8f60e01b8452600096600485016113c6565b6001600160a01b039391859184919003818685165afa9182156105a75784926105ac575b50815160209283012060075490926103ef92916001600160a01b03169160405193849130908588868601611401565b03610402601f1991828101865285610218565b604051630e2ab4cb60e21b815260048101869052928290849060249082908a165afa9182156105a7576104436104d1936104bf958a9161057a575b506114e2565b61045661044e611831565b341015611524565b610491888080803461048161047561047560065460018060a01b031690565b6001600160a01b031690565b5af161048b611561565b50611591565b6104a461049f6003546115cb565b600355565b6104c56104af6115f0565b95604051958693840180986116ac565b906116ac565b03908101835282610218565b519084f091823b1561057657916105729161052e826105297fb658664a46408e6670a38ec7ea8b7614c9e2916184dff2fad99d3a7a3491ca7d9796821693610518856116ec565b50600052600e602052604060002090565b6116c3565b506001600160a01b0382166000908152600f6020526040902061055890805460ff19166001179055565b60405194848695a26001600160a01b031682526020820190565b0390f35b8380fd5b61059a9150833d85116105a0575b6105928183610218565b8101906114cd565b3861043d565b503d610588565b6113f5565b6103ef9192506105cd903d8087833e6105c58183610218565b810190611380565b505091906103c0565b346101d4576020806003193601126101d45767ffffffffffffffff6004358181116101d457610609903690600401610292565b610611611164565b805191821161023a5761062e826106296002546108ed565b6111d3565b8290601f83116001146106a0579282610682936106909361001996600092610695575b50508160011b916000199060031b1c1916176002555b60405192839182016006906576322e302e3160d01b81520190565b03601f198101835282610218565b61127a565b015190503880610651565b6002600052601f19831691907f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace9260005b8181106107185750936106909361001996936001938361068298106106ff575b505050811b01600255610667565b015160001960f88460031b161c191690553880806106f1565b9293866001819287860151815501950193016106d1565b346101d45760c03660031901126101d45761001961074b6102dc565b6107e06107566102b0565b9161075f6102c6565b906107686102f2565b91610771610308565b9261077a61031e565b95610783611164565b60018060a01b0392838092816001600160601b0360a01b9716876006541617600655168560075416176007551683600b541617600b551690600954161760095560018060a01b03166001600160601b0360a01b600a541617600a55565b60018060a01b03166001600160601b0360a01b600c541617600c55565b346101d45760003660031901126101d457600b546040516001600160a01b039091168152602090f35b60209060031901126101d45760043590565b6020908160408183019282815285518094520193019160005b82811061085f575050505090565b83516001600160a01b031685529381019392810192600101610851565b346101d45761088a36610826565b6000526020600e8152604060002090604051908181845491828152019360005281600020916000905b8282106108d657610572856108ca81890382610218565b60405191829182610838565b8354865294850194600193840193909101906108b3565b90600182811c9216801561091d575b602083101461090757565b634e487b7160e01b600052602260045260246000fd5b91607f16916108fc565b60005b83811061093a5750506000910152565b818101518382015260200161092a565b9060209161096381518092818552858086019101610927565b601f01601f1916010190565b346101d457600080600319360112610a415760405190806001805491610994836108ed565b80865292828116908115610a1757506001146109cf575b610572856109bb81870382610218565b60405191829160208352602083019061094a565b9250808352600080516020611ced8339815191525b8284106109ff5750505081016020016109bb826105726109ab565b805460208587018101919091529093019281016109e4565b869550610572969350602092506109bb94915060ff191682840152151560051b82010192936109ab565b80fd5b346101d45760003660031901126101d457602060ff601054166040519015158152f35b346101d4576020806003193601126101d45767ffffffffffffffff906004358281116101d457366023820112156101d457610aac90369060248160040135910161025b565b91610ab5611164565b825190811161023a57600191610ad482610acf85546108ed565b611236565b80601f8311600114610b0c5750819293600092610b01575b5050600019600383901b1c191690821b179055005b015190503880610aec565b90601f19831694610b2d6001600052600080516020611ced83398151915290565b926000905b878210610b6757505083859610610b4e575b505050811b019055005b015160001960f88460031b161c19169055388080610b44565b808785968294968601518155019501930190610b32565b346101d45760003660031901126101d4576008546040516001600160a01b039091168152602090f35b634e487b7160e01b600052602160045260246000fd5b906008821015610bca5752565b610ba7565b906003821015610bca5752565b80516001600160a01b031682526102ad91906020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e0830152610c476101008083015190840190610bbd565b610c5a6101208083015190840190610bcf565b61014080910151916101608092820152019061094a565b602080820190808352835180925260408301928160408460051b8301019501936000915b848310610ca55750505050505090565b9091929394958480610cc3600193603f198682030187528a51610bdc565b9801930193019194939290610c95565b346101d457610ce136610826565b6000526020600e81526040600020604051918281835491828152019260005281600020916000905b828210610d3457610572610d2887610d2381890382610218565b611c50565b60405191829182610c71565b835485529384019360019384019390910190610d09565b346101d457600080600319360112610a4157610d65611164565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b801515036101d457565b346101d45760203660031901126101d457600435610dcd81610da6565b610dd5611164565b60ff8019601054169115151617601055600080f35b346101d45760003660031901126101d457604051806004549182815260208091019260046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b916000905b828210610e4e57610572856108ca81890382610218565b835486529485019460019384019390910190610e37565b346101d45760003660031901126101d4576000546040516001600160a01b039091168152602090f35b346101d45760003660031901126101d457600a546040516001600160a01b039091168152602090f35b346101d45760203660031901126101d4576001600160a01b03610ed86102dc565b16600052600f602052602060ff604060002054166040519015158152f35b6004359060ff821682036101d457565b346101d45760203660031901126101d45760ff610f21610ef6565b16600052600d602052602062ffffff60406000205416604051908152f35b346101d45760203660031901126101d457610572610f6c610f5e6102dc565b610f666117be565b50611910565b604051918291602083526020830190610bdc565b346101d45760003660031901126101d4576040516004805480835260009182526020808401927f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b92915b828210610fe457610572610d2887610d2381890382610218565b835485529384019360019384019390910190610fca565b346101d45760403660031901126101d457611014610ef6565b6024359062ffffff82168092036101d45760ff90611030611164565b16600052600d60205260406000209062ffffff19825416179055600080f35b346101d45760203660031901126101d4576110686102dc565b611070611164565b6001600160a01b0390811680156110be57600080546001600160a01b03198116831782559092167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b346101d45760003660031901126101d4576009546040516001600160a01b039091168152602090f35b346101d45760003660031901126101d457600c546040516001600160a01b039091168152602090f35b6000546001600160a01b0316330361117857565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b8181106111c7575050565b600081556001016111bc565b90601f82116111e0575050565b61122a9160026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace906020601f840160051c8301931061122c575b601f0160051c01906111bc565b565b909150819061121d565b90601f8211611243575050565b61122a916001600052600080516020611ced833981519152906020601f840160051c8301931061122c57601f0160051c01906111bc565b90815167ffffffffffffffff811161023a5760019061129d81610acf84546108ed565b602080601f83116001146112d85750819293946000926112cd575b5050600019600383901b1c191690821b179055565b0151905038806112b8565b90601f198316956112f96001600052600080516020611ced83398151915290565b926000905b888210611334575050838596971061131b575b505050811b019055565b015160001960f88460031b161c19169055388080611311565b8087859682949686015181550195019301906112fe565b909291926113588161023f565b916113666040519384610218565b8294828452828201116101d457602061122a930190610927565b906060828203126101d457815167ffffffffffffffff81116101d45782019080601f830112156101d45781516113b89260200161134b565b916040602083015192015190565b916113de60409295949560608552606085019061094a565b6001600160a01b0391821660208501529416910152565b6040513d6000823e3d90fd5b9081526001600160a01b0391821660208083019190915292821660408201529216606083015260a060808301526001805460009390929091611442846108ed565b938460a085015281811690816000146114aa5750600114611465575b5050505090565b6000818152939450600080516020611ced8339815191525b8585106114965750505060c0925001013880808061145e565b805485850160c0015293820193810161147d565b9250505060c0935060ff929192191683830152151560051b01013880808061145e565b908160209103126101d457516102ad81610da6565b156114e957565b60405162461bcd60e51b81526020600482015260136024820152721d5cd95c88191bd95cc81b9bdd08195e1a5cdd606a1b6044820152606490fd5b1561152b57565b60405162461bcd60e51b815260206004820152600e60248201526d4e4f545f454e4f5547485f46454560901b6044820152606490fd5b3d1561158c573d906115728261023f565b916115806040519384610218565b82523d6000602084013e565b606090565b1561159857565b60405162461bcd60e51b815260206004820152600b60248201526a10d0531317d1905253115160aa1b6044820152606490fd5b60001981146115da5760010190565b634e487b7160e01b600052601160045260246000fd5b6040519060008260025491611604836108ed565b8083529260019081811690811561168a575060011461162b575b5061122a92500383610218565b6002600090815291507f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace5b84831061166f575061122a93505081016020013861161e565b81935090816020925483858a01015201910190918592611656565b90506020925061122a94915060ff191682840152151560051b8201013861161e565b906116bf60209282815194859201610927565b0190565b6102ad916001600160a01b031690611768565b634e487b7160e01b600052603260045260246000fd5b8060005260056020526040600020541560001461176257600454600160401b81101561023a57600181018060045581101561175d5781907f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0155600454906000526005602052604060002055600190565b6116d6565b50600090565b600082815260018201602081905260408220546117b757825492600160401b84101561023a576001840180825584101561175d5784604094828552602085200155549382526020522055600190565b5091505090565b60405190610160820182811067ffffffffffffffff82111761023a57604052606061014083600080825280602083015280604083015280848301528060808301528060a08301528060c08301528060e0830152806101008301526101208201520152565b908160209103126101d4575190565b6006546040516391792d5b60e01b815290602090829060049082906001600160a01b03165afa9081156105a757600091611869575090565b6102ad915060203d811161188a575b6118828183610218565b810190611822565b503d611878565b908160209103126101d4575160088110156101d45790565b6008821015610bca5752565b908160209103126101d4575160038110156101d45790565b6003821015610bca5752565b6020818303126101d45780519067ffffffffffffffff82116101d457019080601f830112156101d45781516102ad9260200161134b565b6119186117be565b506119216117be565b6001600160a01b0390911680825260408051638da5cb5b60e01b8152600492602092909183818681865afa9081156105a757600091611c07575b50858401528051635c63ed6960e01b815283818681865afa9081156105a757600091611bea575b50858201528051634c38d87760e01b815283818681865afa9081156105a757600091611bcd575b506060860152805163048bf3bb60e11b815283818681865afa9081156105a757600091611bb0575b5060808601528051630bc8361760e11b815283818681865afa9081156105a757600091611b93575b5060a0860152805163d24e0c8760e01b815283818681865afa9081156105a757600091611b76575b5060c0860152805163faeb5e1760e01b815283818681865afa9081156105a757600091611b59575b5060e086015280516302734eab60e51b815283818681865afa80156105a757611a7f91600091611b2c575b5061010087016118a9565b805163010a38f560e01b81529280848681865afa80156105a757600094611ab3928692611aff575b505061012087016118cd565b5163054fd4d560e41b815292839182905afa9081156105a757600091611ade575b5061014082015290565b611af9913d8091833e611af18183610218565b8101906118d9565b38611ad4565b611b1e9250803d10611b25575b611b168183610218565b8101906118b5565b3880611aa7565b503d611b0c565b611b4c9150853d8711611b52575b611b448183610218565b810190611891565b38611a74565b503d611b3a565b611b709150843d861161188a576118828183610218565b38611a49565b611b8d9150843d861161188a576118828183610218565b38611a21565b611baa9150843d861161188a576118828183610218565b386119f9565b611bc79150843d861161188a576118828183610218565b386119d1565b611be49150843d861161188a576118828183610218565b386119a9565b611c019150843d861161188a576118828183610218565b38611982565b611c1e9150843d861161188a576118828183610218565b3861195b565b67ffffffffffffffff811161023a5760051b60200190565b805182101561175d5760209160051b010190565b8051611c5b81611c24565b91611c696040519384610218565b818352601f19611c7883611c24565b0160005b818110611cd557505060005b828110611c955750505090565b611cd090611cb56001600160a01b03611cae8386611c3c565b5116611910565b611cbf8287611c3c565b52611cca8186611c3c565b506115cb565b611c88565b602090611ce06117be565b82828801015201611c7c56feb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6a2646970667358221220f24f5c5bb179de6381bd95e1d0ee38b09e779fce97e7a7da1b90e271463fb87364736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c8063067bd3b4146101b657806318da0011146101b15780632327c3ab146101ac578063237b0d3c146101a75780632ae219b9146101a25780634b57b0be1461019d578063546008371461019857806354fd4d50146101935780635dc96d161461018e57806364bb432c1461018957806367031bae146101845780636d944e601461017f578063715018a61461017a5780637b2c835f146101755780637fe955d4146101705780638da5cb5b1461016b578063be22f54614610166578063cedf3ba214610157578063d223a56414610161578063d570a66d1461015c578063e58fdd0414610157578063e86ef35314610152578063e9318b471461014d578063f2fde38b14610148578063f77800e5146101435763f887ea400361000e5761113b565b611112565b61104f565b610ffb565b610f80565b610eb7565b610f3f565b610f06565b610e8e565b610e65565b610dea565b610db0565b610d4b565b610cd3565b610b7e565b610a67565b610a44565b61096f565b61087c565b6107fd565b61072f565b6105d6565b610334565b6101d9565b346101d45760003660031901126101d4576020600354604051908152f35b600080fd5b346101d45760003660031901126101d4576006546040516001600160a01b039091168152602090f35b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761023a57604052565b610202565b67ffffffffffffffff811161023a57601f01601f191660200190565b9291926102678261023f565b916102756040519384610218565b8294818452818301116101d4578281602093846000960137010152565b9080601f830112156101d4578160206102ad9335910161025b565b90565b602435906001600160a01b03821682036101d457565b604435906001600160a01b03821682036101d457565b600435906001600160a01b03821682036101d457565b606435906001600160a01b03821682036101d457565b608435906001600160a01b03821682036101d457565b60a435906001600160a01b03821682036101d457565b60603660031901126101d45760043567ffffffffffffffff81116101d457610360903690600401610292565b6103686102b0565b6103706102c6565b6008546001600160a01b03169161039c6040519283926307c93c8f60e01b8452600096600485016113c6565b6001600160a01b039391859184919003818685165afa9182156105a75784926105ac575b50815160209283012060075490926103ef92916001600160a01b03169160405193849130908588868601611401565b03610402601f1991828101865285610218565b604051630e2ab4cb60e21b815260048101869052928290849060249082908a165afa9182156105a7576104436104d1936104bf958a9161057a575b506114e2565b61045661044e611831565b341015611524565b610491888080803461048161047561047560065460018060a01b031690565b6001600160a01b031690565b5af161048b611561565b50611591565b6104a461049f6003546115cb565b600355565b6104c56104af6115f0565b95604051958693840180986116ac565b906116ac565b03908101835282610218565b519084f091823b1561057657916105729161052e826105297fb658664a46408e6670a38ec7ea8b7614c9e2916184dff2fad99d3a7a3491ca7d9796821693610518856116ec565b50600052600e602052604060002090565b6116c3565b506001600160a01b0382166000908152600f6020526040902061055890805460ff19166001179055565b60405194848695a26001600160a01b031682526020820190565b0390f35b8380fd5b61059a9150833d85116105a0575b6105928183610218565b8101906114cd565b3861043d565b503d610588565b6113f5565b6103ef9192506105cd903d8087833e6105c58183610218565b810190611380565b505091906103c0565b346101d4576020806003193601126101d45767ffffffffffffffff6004358181116101d457610609903690600401610292565b610611611164565b805191821161023a5761062e826106296002546108ed565b6111d3565b8290601f83116001146106a0579282610682936106909361001996600092610695575b50508160011b916000199060031b1c1916176002555b60405192839182016006906576322e302e3160d01b81520190565b03601f198101835282610218565b61127a565b015190503880610651565b6002600052601f19831691907f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace9260005b8181106107185750936106909361001996936001938361068298106106ff575b505050811b01600255610667565b015160001960f88460031b161c191690553880806106f1565b9293866001819287860151815501950193016106d1565b346101d45760c03660031901126101d45761001961074b6102dc565b6107e06107566102b0565b9161075f6102c6565b906107686102f2565b91610771610308565b9261077a61031e565b95610783611164565b60018060a01b0392838092816001600160601b0360a01b9716876006541617600655168560075416176007551683600b541617600b551690600954161760095560018060a01b03166001600160601b0360a01b600a541617600a55565b60018060a01b03166001600160601b0360a01b600c541617600c55565b346101d45760003660031901126101d457600b546040516001600160a01b039091168152602090f35b60209060031901126101d45760043590565b6020908160408183019282815285518094520193019160005b82811061085f575050505090565b83516001600160a01b031685529381019392810192600101610851565b346101d45761088a36610826565b6000526020600e8152604060002090604051908181845491828152019360005281600020916000905b8282106108d657610572856108ca81890382610218565b60405191829182610838565b8354865294850194600193840193909101906108b3565b90600182811c9216801561091d575b602083101461090757565b634e487b7160e01b600052602260045260246000fd5b91607f16916108fc565b60005b83811061093a5750506000910152565b818101518382015260200161092a565b9060209161096381518092818552858086019101610927565b601f01601f1916010190565b346101d457600080600319360112610a415760405190806001805491610994836108ed565b80865292828116908115610a1757506001146109cf575b610572856109bb81870382610218565b60405191829160208352602083019061094a565b9250808352600080516020611ced8339815191525b8284106109ff5750505081016020016109bb826105726109ab565b805460208587018101919091529093019281016109e4565b869550610572969350602092506109bb94915060ff191682840152151560051b82010192936109ab565b80fd5b346101d45760003660031901126101d457602060ff601054166040519015158152f35b346101d4576020806003193601126101d45767ffffffffffffffff906004358281116101d457366023820112156101d457610aac90369060248160040135910161025b565b91610ab5611164565b825190811161023a57600191610ad482610acf85546108ed565b611236565b80601f8311600114610b0c5750819293600092610b01575b5050600019600383901b1c191690821b179055005b015190503880610aec565b90601f19831694610b2d6001600052600080516020611ced83398151915290565b926000905b878210610b6757505083859610610b4e575b505050811b019055005b015160001960f88460031b161c19169055388080610b44565b808785968294968601518155019501930190610b32565b346101d45760003660031901126101d4576008546040516001600160a01b039091168152602090f35b634e487b7160e01b600052602160045260246000fd5b906008821015610bca5752565b610ba7565b906003821015610bca5752565b80516001600160a01b031682526102ad91906020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e0830152610c476101008083015190840190610bbd565b610c5a6101208083015190840190610bcf565b61014080910151916101608092820152019061094a565b602080820190808352835180925260408301928160408460051b8301019501936000915b848310610ca55750505050505090565b9091929394958480610cc3600193603f198682030187528a51610bdc565b9801930193019194939290610c95565b346101d457610ce136610826565b6000526020600e81526040600020604051918281835491828152019260005281600020916000905b828210610d3457610572610d2887610d2381890382610218565b611c50565b60405191829182610c71565b835485529384019360019384019390910190610d09565b346101d457600080600319360112610a4157610d65611164565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b801515036101d457565b346101d45760203660031901126101d457600435610dcd81610da6565b610dd5611164565b60ff8019601054169115151617601055600080f35b346101d45760003660031901126101d457604051806004549182815260208091019260046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b916000905b828210610e4e57610572856108ca81890382610218565b835486529485019460019384019390910190610e37565b346101d45760003660031901126101d4576000546040516001600160a01b039091168152602090f35b346101d45760003660031901126101d457600a546040516001600160a01b039091168152602090f35b346101d45760203660031901126101d4576001600160a01b03610ed86102dc565b16600052600f602052602060ff604060002054166040519015158152f35b6004359060ff821682036101d457565b346101d45760203660031901126101d45760ff610f21610ef6565b16600052600d602052602062ffffff60406000205416604051908152f35b346101d45760203660031901126101d457610572610f6c610f5e6102dc565b610f666117be565b50611910565b604051918291602083526020830190610bdc565b346101d45760003660031901126101d4576040516004805480835260009182526020808401927f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b92915b828210610fe457610572610d2887610d2381890382610218565b835485529384019360019384019390910190610fca565b346101d45760403660031901126101d457611014610ef6565b6024359062ffffff82168092036101d45760ff90611030611164565b16600052600d60205260406000209062ffffff19825416179055600080f35b346101d45760203660031901126101d4576110686102dc565b611070611164565b6001600160a01b0390811680156110be57600080546001600160a01b03198116831782559092167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b346101d45760003660031901126101d4576009546040516001600160a01b039091168152602090f35b346101d45760003660031901126101d457600c546040516001600160a01b039091168152602090f35b6000546001600160a01b0316330361117857565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b8181106111c7575050565b600081556001016111bc565b90601f82116111e0575050565b61122a9160026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace906020601f840160051c8301931061122c575b601f0160051c01906111bc565b565b909150819061121d565b90601f8211611243575050565b61122a916001600052600080516020611ced833981519152906020601f840160051c8301931061122c57601f0160051c01906111bc565b90815167ffffffffffffffff811161023a5760019061129d81610acf84546108ed565b602080601f83116001146112d85750819293946000926112cd575b5050600019600383901b1c191690821b179055565b0151905038806112b8565b90601f198316956112f96001600052600080516020611ced83398151915290565b926000905b888210611334575050838596971061131b575b505050811b019055565b015160001960f88460031b161c19169055388080611311565b8087859682949686015181550195019301906112fe565b909291926113588161023f565b916113666040519384610218565b8294828452828201116101d457602061122a930190610927565b906060828203126101d457815167ffffffffffffffff81116101d45782019080601f830112156101d45781516113b89260200161134b565b916040602083015192015190565b916113de60409295949560608552606085019061094a565b6001600160a01b0391821660208501529416910152565b6040513d6000823e3d90fd5b9081526001600160a01b0391821660208083019190915292821660408201529216606083015260a060808301526001805460009390929091611442846108ed565b938460a085015281811690816000146114aa5750600114611465575b5050505090565b6000818152939450600080516020611ced8339815191525b8585106114965750505060c0925001013880808061145e565b805485850160c0015293820193810161147d565b9250505060c0935060ff929192191683830152151560051b01013880808061145e565b908160209103126101d457516102ad81610da6565b156114e957565b60405162461bcd60e51b81526020600482015260136024820152721d5cd95c88191bd95cc81b9bdd08195e1a5cdd606a1b6044820152606490fd5b1561152b57565b60405162461bcd60e51b815260206004820152600e60248201526d4e4f545f454e4f5547485f46454560901b6044820152606490fd5b3d1561158c573d906115728261023f565b916115806040519384610218565b82523d6000602084013e565b606090565b1561159857565b60405162461bcd60e51b815260206004820152600b60248201526a10d0531317d1905253115160aa1b6044820152606490fd5b60001981146115da5760010190565b634e487b7160e01b600052601160045260246000fd5b6040519060008260025491611604836108ed565b8083529260019081811690811561168a575060011461162b575b5061122a92500383610218565b6002600090815291507f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace5b84831061166f575061122a93505081016020013861161e565b81935090816020925483858a01015201910190918592611656565b90506020925061122a94915060ff191682840152151560051b8201013861161e565b906116bf60209282815194859201610927565b0190565b6102ad916001600160a01b031690611768565b634e487b7160e01b600052603260045260246000fd5b8060005260056020526040600020541560001461176257600454600160401b81101561023a57600181018060045581101561175d5781907f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0155600454906000526005602052604060002055600190565b6116d6565b50600090565b600082815260018201602081905260408220546117b757825492600160401b84101561023a576001840180825584101561175d5784604094828552602085200155549382526020522055600190565b5091505090565b60405190610160820182811067ffffffffffffffff82111761023a57604052606061014083600080825280602083015280604083015280848301528060808301528060a08301528060c08301528060e0830152806101008301526101208201520152565b908160209103126101d4575190565b6006546040516391792d5b60e01b815290602090829060049082906001600160a01b03165afa9081156105a757600091611869575090565b6102ad915060203d811161188a575b6118828183610218565b810190611822565b503d611878565b908160209103126101d4575160088110156101d45790565b6008821015610bca5752565b908160209103126101d4575160038110156101d45790565b6003821015610bca5752565b6020818303126101d45780519067ffffffffffffffff82116101d457019080601f830112156101d45781516102ad9260200161134b565b6119186117be565b506119216117be565b6001600160a01b0390911680825260408051638da5cb5b60e01b8152600492602092909183818681865afa9081156105a757600091611c07575b50858401528051635c63ed6960e01b815283818681865afa9081156105a757600091611bea575b50858201528051634c38d87760e01b815283818681865afa9081156105a757600091611bcd575b506060860152805163048bf3bb60e11b815283818681865afa9081156105a757600091611bb0575b5060808601528051630bc8361760e11b815283818681865afa9081156105a757600091611b93575b5060a0860152805163d24e0c8760e01b815283818681865afa9081156105a757600091611b76575b5060c0860152805163faeb5e1760e01b815283818681865afa9081156105a757600091611b59575b5060e086015280516302734eab60e51b815283818681865afa80156105a757611a7f91600091611b2c575b5061010087016118a9565b805163010a38f560e01b81529280848681865afa80156105a757600094611ab3928692611aff575b505061012087016118cd565b5163054fd4d560e41b815292839182905afa9081156105a757600091611ade575b5061014082015290565b611af9913d8091833e611af18183610218565b8101906118d9565b38611ad4565b611b1e9250803d10611b25575b611b168183610218565b8101906118b5565b3880611aa7565b503d611b0c565b611b4c9150853d8711611b52575b611b448183610218565b810190611891565b38611a74565b503d611b3a565b611b709150843d861161188a576118828183610218565b38611a49565b611b8d9150843d861161188a576118828183610218565b38611a21565b611baa9150843d861161188a576118828183610218565b386119f9565b611bc79150843d861161188a576118828183610218565b386119d1565b611be49150843d861161188a576118828183610218565b386119a9565b611c019150843d861161188a576118828183610218565b38611982565b611c1e9150843d861161188a576118828183610218565b3861195b565b67ffffffffffffffff811161023a5760051b60200190565b805182101561175d5760209160051b010190565b8051611c5b81611c24565b91611c696040519384610218565b818352601f19611c7883611c24565b0160005b818110611cd557505060005b828110611c955750505090565b611cd090611cb56001600160a01b03611cae8386611c3c565b5116611910565b611cbf8287611c3c565b52611cca8186611c3c565b506115cb565b611c88565b602090611ce06117be565b82828801015201611c7c56feb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6a2646970667358221220f24f5c5bb179de6381bd95e1d0ee38b09e779fce97e7a7da1b90e271463fb87364736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 337,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6535,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "version",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 6537,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "feedByteCode",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes_storage"
      },
      {
        "astId": 6539,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "contractCounter",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 6542,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "feeds",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(AddressSet)4351_storage"
      },
      {
        "astId": 6545,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "settings",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(FactorySettings)11489_storage"
      },
      {
        "astId": 6549,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "routerFee",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint8,t_uint24)"
      },
      {
        "astId": 6554,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "feedStore",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)4351_storage)"
      },
      {
        "astId": 6558,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "createdContracts",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6565,
        "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
        "label": "burnEnabled",
        "offset": 0,
        "slot": "16",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)4351_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)4351_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint8,t_uint24)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint24)",
        "numberOfBytes": "32",
        "value": "t_uint24"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)4351_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 4350,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4036_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(FactorySettings)11489_storage": {
        "encoding": "inplace",
        "label": "struct Structures.FactorySettings",
        "members": [
          {
            "astId": 11476,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "treasuryContract",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11478,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "usersModuleContract",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 11480,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "verifierContract",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 11482,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "museToken",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 11484,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "daiToken",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 11486,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "wethToken",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 11488,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "router",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Set)4036_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 4031,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4035,
            "contract": "contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}