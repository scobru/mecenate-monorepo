{
  "address": "0xDc7A41C229860aA1B67b83d6934C24d4Fd3aD629",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usersContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "pubKey",
          "type": "bytes"
        }
      ],
      "name": "KeySubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "encryptedKeys",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "pubKey",
          "type": "bytes"
        }
      ],
      "name": "getHash",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "encryptedData",
          "type": "bytes"
        }
      ],
      "name": "submitHash",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newUsersContract",
          "type": "address"
        }
      ],
      "name": "updateUsersContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usersContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0cb8544bbf5a2cd1e90b8811f694f5e23281ff85a3e3f4e39118c02be6e9ff15",
  "receipt": {
    "to": null,
    "from": "0x8aA5F726d9F868a21a8bd748E2f1E43bA31eb670",
    "contractAddress": "0xDc7A41C229860aA1B67b83d6934C24d4Fd3aD629",
    "transactionIndex": 1,
    "gasUsed": "596061",
    "logsBloom": "0x
    "blockHash": "0x004dfeecef5d2348fcad7ea785dc6905331f7e400c4dc5b50d14e74058f9fbbf",
    "transactionHash": "0x0cb8544bbf5a2cd1e90b8811f694f5e23281ff85a3e3f4e39118c02be6e9ff15",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 12406594,
        "transactionHash": "0x0cb8544bbf5a2cd1e90b8811f694f5e23281ff85a3e3f4e39118c02be6e9ff15",
        "address": "0xDc7A41C229860aA1B67b83d6934C24d4Fd3aD629",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008aa5f726d9f868a21a8bd748e2f1e43ba31eb670"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x004dfeecef5d2348fcad7ea785dc6905331f7e400c4dc5b50d14e74058f9fbbf"
      }
    ],
    "blockNumber": 12406594,
    "cumulativeGasUsed": "642914",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9F3f112e06F1685daeFe84DEBd3E98C0DC7E6C78",
    "0x6C4a827d1E9b4E836f98BB2601Ef5e32ceda0448"
  ],
  "numDeployments": 4,
  "solcInputHash": "919cb3fdb3bb48ba3e1f9392fbe04d92",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usersContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"}],\"name\":\"KeySubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"encryptedKeys\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"}],\"name\":\"getHash\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"}],\"name\":\"submitHash\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newUsersContract\",\"type\":\"address\"}],\"name\":\"updateUsersContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usersContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/layer/MecenatePay.sol\":\"MecenatePay\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/IMecenateTreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IMecenateTreasury {\\n    function globalFee() external view returns (uint256);\\n\\n    function fixedFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9a8a12dbff92e474bb1ff16707a0c5616ecb4bbcd534d92651906ad82db5861f\",\"license\":\"MIT\"},\"contracts/interfaces/IMecenateUsers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateUsers {\\n    function registerUser(bytes memory metadata) external;\\n\\n    function getUsers() external view returns (address[] memory);\\n\\n    function getUserCount() external view returns (uint256);\\n\\n    function getUserAt(uint256 index) external view returns (address);\\n\\n    function checkifUserExist(address userAddress) external view returns (bool);\\n\\n    function getPaginatedUsers(\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) external view returns (address[] memory);\\n\\n    function getUserMetadata(\\n        address userAddress\\n    ) external view returns (Structures.User memory);\\n\\n    function getUserPublicKey(\\n        address userAddress\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xb5c5e94f0e2267f1baaa559142b499fd1eacde240569b537a0678e0fcf2021f6\",\"license\":\"MIT\"},\"contracts/layer/MecenatePay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../interfaces/IMecenateUsers.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateTreasury.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract MecenatePay is Ownable {\\r\\n    mapping(bytes => bytes) public encryptedKeys;\\r\\n\\r\\n    address public usersContract;\\r\\n    address public treasury;\\r\\n\\r\\n    event KeySubmitted(address indexed user, bytes pubKey);\\r\\n\\r\\n    constructor(address _usersContract, address _treasury) {\\r\\n        usersContract = _usersContract;\\r\\n        treasury = _treasury;\\r\\n    }\\r\\n\\r\\n    function submitHash(bytes memory encryptedData) public payable {\\r\\n        (bytes memory encryptedKey, bytes memory pubKey) = abi.decode(\\r\\n            encryptedData,\\r\\n            (bytes, bytes)\\r\\n        );\\r\\n\\r\\n        uint256 fixedFee = IMecenateTreasury(treasury).fixedFee();\\r\\n\\r\\n        require(msg.value == fixedFee, \\\"Wrong Fee Value\\\");\\r\\n\\r\\n        (bool success, ) = treasury.call{value: msg.value}(\\\"\\\");\\r\\n\\r\\n        require(success, \\\"Transfer failed.\\\");\\r\\n\\r\\n        encryptedKeys[pubKey] = encryptedKey;\\r\\n\\r\\n        emit KeySubmitted(msg.sender, pubKey);\\r\\n    }\\r\\n\\r\\n    function getHash(bytes memory pubKey) public view returns (bytes memory) {\\r\\n        return encryptedKeys[pubKey];\\r\\n    }\\r\\n\\r\\n    function updateUsersContract(address newUsersContract) public onlyOwner {\\r\\n        usersContract = newUsersContract;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x590a1a07148e20585afd4d848ea82f3e43eb9dff9978f2ce28d0575c7c28d1d4\",\"license\":\"MIT\"},\"contracts/library/Structures.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @title Structures\\n * @dev This library defines various data structures used in the Mecenate platform.\\n */\\npragma solidity 0.8.19;\\n\\nlibrary Structures {\\n    enum PostStatus {\\n        Waiting,\\n        Proposed,\\n        Accepted,\\n        Submitted,\\n        Finalized,\\n        Punished,\\n        Revealed,\\n        Renounced\\n    }\\n\\n    enum PostResult {\\n        None,\\n        Valid,\\n        Punished\\n    }\\n\\n    enum Tokens {\\n        NaN,\\n        MUSE,\\n        DAI\\n    }\\n\\n    enum PostType {\\n        Text,\\n        Image,\\n        Video,\\n        Audio,\\n        File\\n    }\\n    enum PostDuration {\\n        OneDay,\\n        ThreeDays,\\n        OneWeek,\\n        TwoWeeks,\\n        OneMonth\\n    }\\n\\n    struct PostTimestamp {\\n        PostResult postResult;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n    }\\n\\n    struct FeedSettings {\\n        uint256 punishmentRatio;\\n        uint256 postCount;\\n        address usersModuleContract;\\n        address factoryContract;\\n        address router;\\n        string version;\\n    }\\n\\n    struct FactorySettings {\\n        address treasuryContract;\\n        address usersModuleContract;\\n        address easContract;\\n        bytes32 easSchema;\\n        address museToken;\\n        address daiToken;\\n        address wethToken;\\n        address router;\\n    }\\n\\n    /**\\n     * @dev Struct representing a post on the Mecenate platform.\\n     */\\n    struct Post {\\n        User creator;\\n        PostData postdata;\\n    }\\n\\n    /**\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\n     */\\n    struct PostData {\\n        PostSettings settings;\\n        PostEscrow escrow;\\n        PostEncryptedData data;\\n    }\\n\\n    /**\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\n     */\\n    struct PostEncryptedData {\\n        bytes encryptedData;\\n        bytes encryptedKey;\\n        bytes decryptedData;\\n    }\\n\\n    /**\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettings {\\n        PostStatus status;\\n        PostType postType;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n        uint256 duration;\\n        Tokens tokenId;\\n        bytes32 postId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\n     */\\n    struct PostEscrow {\\n        address buyer;\\n        address seller;\\n        uint256 stake;\\n        uint256 payment;\\n        uint256 punishment;\\n        uint256 penalty;\\n    }\\n\\n    /**\\n     * @dev Struct representing a user on the Mecenate platform.\\n     */\\n    struct User {\\n        address evmAddress;\\n        bytes sismoVaultId;\\n        bytes publicKey;\\n    }\\n\\n    /**\\n     * @dev Struct representing a feed on the Mecenate platform.\\n     */\\n    struct Feed {\\n        address contractAddress;\\n        address owner;\\n        uint256 sellerStake;\\n        uint256 buyerStake;\\n        uint256 totalStake;\\n        uint256 postCount;\\n        uint256 paymentRequested;\\n        uint256 stakeRequested;\\n        PostStatus status;\\n        Tokens tokenId;\\n        string version;\\n        bytes32 postId;\\n    }\\n\\n    /**\\n     * @dev Struct representing a bay request on the Mecenate platform.\\n     */\\n    struct BayRequest {\\n        bytes request;\\n        uint256 payment;\\n        uint256 stake;\\n        address postAddress;\\n        bool accepted;\\n        uint256 postCount;\\n        Tokens tokenId;\\n        address buyerAddress;\\n        bytes32 postId;\\n    }\\n}\\n\",\"keccak256\":\"0xe05441a5c2a661638f860772a3cafd66c583c6d759f3486dfee1d34da6934dc4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080346100c357601f61097338819003918201601f19168301916001600160401b038311848410176100c85780849260409485528339810103126100c357610052602061004b836100de565b92016100de565b60008054336001600160a01b0319808316821784556040519590946001600160a01b03949093859391908416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3168360025416176002551690600354161760035561088090816100f38239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036100c35756fe608060408181526004908136101561001657600080fd5b600092833560e01c908163142ebf3c14610597575080634b78896d14610153578063505da9e11461054e57806361d027b314610525578063715018a6146104c85780638da5cb5b146104a05780638f903c79146101a3578063b00140aa146101535763f2fde38b1461008757600080fd5b3461014f57602036600319011261014f576001600160a01b0382358181169391929084900361014b576100b86107ad565b83156100f957505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8480fd5b8280fd5b83823461019f5761019b90610190610181602061016f36610610565b8185519382858094519384920161067e565b810160018152030190206106db565b905191829182610781565b0390f35b5080fd5b5082906101af36610610565b908151820193602092828185880197031261014b57838101519567ffffffffffffffff9687811161049c5781866101e892850101610805565b918481015190888211610487576102029291018601610805565b9360018060a01b036003541684516391792d5b60e01b815282818681855afa908115610492578891610461575b50340361042c57868080809334905af13d15610427573d61024f816105f4565b9061025c875192836105bc565b815287833d92013e5b156103f257835191855161027c8185858a0161067e565b8301928281600195868152030190209381519889116103df57506102a084546106a1565b601f8111610399575b5081601f89116001146103165750968092819288997ef0a6069b4fee3a287b0f6e73983c9654d21d13810d914d14adc2393028cca498999461030b575b50501b916000199060031b1c19161790555b5180610305339482610781565b0390a280f35b0151925089806102e6565b909791601f198316988589528289209289905b8b8210610382575050837ef0a6069b4fee3a287b0f6e73983c9654d21d13810d914d14adc2393028cca498999a10610369575b505050811b0190556102f8565b015160001960f88460031b161c1916905587808061035c565b808785968294968601518155019501930190610329565b848852828820601f8a0160051c810191848b106103d5575b601f0160051c019084905b8281106103ca5750506102a9565b8981550184906103bc565b90915081906103b1565b634e487b7160e01b885260419052602487fd5b9050606492519162461bcd60e51b8352820152601060248201526f2a3930b739b332b9103330b4b632b21760811b6044820152fd5b610265565b845162461bcd60e51b8152808501839052600f60248201526e57726f6e67204665652056616c756560881b6044820152606490fd5b90508281813d831161048b575b61047881836105bc565b8101031261048757518961022f565b8780fd5b503d61046e565b86513d8a823e3d90fd5b8680fd5b83823461019f578160031936011261019f57905490516001600160a01b039091168152602090f35b83346105225780600319360112610522576104e16107ad565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b83823461019f578160031936011261019f5760035490516001600160a01b039091168152602090f35b50503461019f57602036600319011261019f57356001600160a01b0381169081900361019f5761057c6107ad565b6bffffffffffffffffffffffff60a01b600254161760025580f35b84903461019f578160031936011261019f576002546001600160a01b03168152602090f35b90601f8019910116810190811067ffffffffffffffff8211176105de57604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116105de57601f01601f191660200190565b60206003198201126106795760043567ffffffffffffffff8111610679578160238201121561067957806004013590610648826105f4565b9261065660405194856105bc565b828452602483830101116106795781600092602460209301838601378301015290565b600080fd5b60005b8381106106915750506000910152565b8181015183820152602001610681565b90600182811c921680156106d1575b60208310146106bb57565b634e487b7160e01b600052602260045260246000fd5b91607f16916106b0565b90604051918260008254926106ef846106a1565b90818452600194858116908160001461075e575060011461071b575b5050610719925003836105bc565b565b9093915060005260209081600020936000915b8183106107465750506107199350820101388061070b565b8554888401850152948501948794509183019161072e565b91505061071994506020925060ff191682840152151560051b820101388061070b565b604091602082526107a1815180928160208601526020868601910161067e565b601f01601f1916010190565b6000546001600160a01b031633036107c157565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b81601f8201121561067957805161081b816105f4565b9261082960405194856105bc565b8184526020828401011161067957610847916020808501910161067e565b9056fea2646970667358221220f78b7b6b1b741baccf5c7fbfb7077b29e8cb4921d3a69680200c1891845a08d764736f6c63430008130033",
  "deployedBytecode": "0x608060408181526004908136101561001657600080fd5b600092833560e01c908163142ebf3c14610597575080634b78896d14610153578063505da9e11461054e57806361d027b314610525578063715018a6146104c85780638da5cb5b146104a05780638f903c79146101a3578063b00140aa146101535763f2fde38b1461008757600080fd5b3461014f57602036600319011261014f576001600160a01b0382358181169391929084900361014b576100b86107ad565b83156100f957505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8480fd5b8280fd5b83823461019f5761019b90610190610181602061016f36610610565b8185519382858094519384920161067e565b810160018152030190206106db565b905191829182610781565b0390f35b5080fd5b5082906101af36610610565b908151820193602092828185880197031261014b57838101519567ffffffffffffffff9687811161049c5781866101e892850101610805565b918481015190888211610487576102029291018601610805565b9360018060a01b036003541684516391792d5b60e01b815282818681855afa908115610492578891610461575b50340361042c57868080809334905af13d15610427573d61024f816105f4565b9061025c875192836105bc565b815287833d92013e5b156103f257835191855161027c8185858a0161067e565b8301928281600195868152030190209381519889116103df57506102a084546106a1565b601f8111610399575b5081601f89116001146103165750968092819288997ef0a6069b4fee3a287b0f6e73983c9654d21d13810d914d14adc2393028cca498999461030b575b50501b916000199060031b1c19161790555b5180610305339482610781565b0390a280f35b0151925089806102e6565b909791601f198316988589528289209289905b8b8210610382575050837ef0a6069b4fee3a287b0f6e73983c9654d21d13810d914d14adc2393028cca498999a10610369575b505050811b0190556102f8565b015160001960f88460031b161c1916905587808061035c565b808785968294968601518155019501930190610329565b848852828820601f8a0160051c810191848b106103d5575b601f0160051c019084905b8281106103ca5750506102a9565b8981550184906103bc565b90915081906103b1565b634e487b7160e01b885260419052602487fd5b9050606492519162461bcd60e51b8352820152601060248201526f2a3930b739b332b9103330b4b632b21760811b6044820152fd5b610265565b845162461bcd60e51b8152808501839052600f60248201526e57726f6e67204665652056616c756560881b6044820152606490fd5b90508281813d831161048b575b61047881836105bc565b8101031261048757518961022f565b8780fd5b503d61046e565b86513d8a823e3d90fd5b8680fd5b83823461019f578160031936011261019f57905490516001600160a01b039091168152602090f35b83346105225780600319360112610522576104e16107ad565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b83823461019f578160031936011261019f5760035490516001600160a01b039091168152602090f35b50503461019f57602036600319011261019f57356001600160a01b0381169081900361019f5761057c6107ad565b6bffffffffffffffffffffffff60a01b600254161760025580f35b84903461019f578160031936011261019f576002546001600160a01b03168152602090f35b90601f8019910116810190811067ffffffffffffffff8211176105de57604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116105de57601f01601f191660200190565b60206003198201126106795760043567ffffffffffffffff8111610679578160238201121561067957806004013590610648826105f4565b9261065660405194856105bc565b828452602483830101116106795781600092602460209301838601378301015290565b600080fd5b60005b8381106106915750506000910152565b8181015183820152602001610681565b90600182811c921680156106d1575b60208310146106bb57565b634e487b7160e01b600052602260045260246000fd5b91607f16916106b0565b90604051918260008254926106ef846106a1565b90818452600194858116908160001461075e575060011461071b575b5050610719925003836105bc565b565b9093915060005260209081600020936000915b8183106107465750506107199350820101388061070b565b8554888401850152948501948794509183019161072e565b91505061071994506020925060ff191682840152151560051b820101388061070b565b604091602082526107a1815180928160208601526020868601910161067e565b601f01601f1916010190565b6000546001600160a01b031633036107c157565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b81601f8201121561067957805161081b816105f4565b9261082960405194856105bc565b8184526020828401011161067957610847916020808501910161067e565b9056fea2646970667358221220f78b7b6b1b741baccf5c7fbfb7077b29e8cb4921d3a69680200c1891845a08d764736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/layer/MecenatePay.sol:MecenatePay",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 216,
        "contract": "contracts/layer/MecenatePay.sol:MecenatePay",
        "label": "encryptedKeys",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes_memory_ptr,t_bytes_storage)"
      },
      {
        "astId": 218,
        "contract": "contracts/layer/MecenatePay.sol:MecenatePay",
        "label": "usersContract",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 220,
        "contract": "contracts/layer/MecenatePay.sol:MecenatePay",
        "label": "treasury",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes_memory_ptr,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      }
    }
  }
}