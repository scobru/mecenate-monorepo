{
  "address": "0xE79d2cB1bcc4e3612307b0B6142CFD1dcC9DA7D1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "mecenateUsersAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "mecenateFeedFactoryAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "mecenateBayAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "mecenateTreasuryAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "getStats",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalUsers",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBayRequests",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalFeeds",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "globalFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fixedFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "treasuryBalance",
              "type": "uint256"
            }
          ],
          "internalType": "struct MecenateStats.Stats",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mecenateBay",
      "outputs": [
        {
          "internalType": "contract IMecenateBay",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mecenateFeedFactory",
      "outputs": [
        {
          "internalType": "contract IMecenateFeedFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mecenateTreasury",
      "outputs": [
        {
          "internalType": "contract IMecenateTreasury",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mecenateUsers",
      "outputs": [
        {
          "internalType": "contract IMecenateUsers",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe8141a6a21d5f1b821b2332c2ab25e71d7a92cdcb5fc230e4fedfb9c7a37ea7f",
  "receipt": {
    "to": null,
    "from": "0x8aA5F726d9F868a21a8bd748E2f1E43bA31eb670",
    "contractAddress": "0xE79d2cB1bcc4e3612307b0B6142CFD1dcC9DA7D1",
    "transactionIndex": 1,
    "gasUsed": "446616",
    "logsBloom": "0x
    "blockHash": "0x4582f832985eca0880d8851afcfd7fb82cf059fc4de66c12e504f5df337fffd8",
    "transactionHash": "0xe8141a6a21d5f1b821b2332c2ab25e71d7a92cdcb5fc230e4fedfb9c7a37ea7f",
    "logs": [],
    "blockNumber": 11181757,
    "cumulativeGasUsed": "493457",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x69923B1551cd54F9084F0cf75b75DB8D7641bB33",
    "0x81e74f728E06f559be14711f4e6a902AFb549075",
    "0xF7684419314376Dd0942619721C66568DaBE99a6",
    "0x18fD96949A80d87dC1Fb84d54817602EE7080E33"
  ],
  "numDeployments": 18,
  "solcInputHash": "1df1e5248ce6cfac956a4b387ea3e358",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mecenateUsersAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mecenateFeedFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mecenateBayAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mecenateTreasuryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"getStats\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalUsers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBayRequests\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFeeds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"globalFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct MecenateStats.Stats\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mecenateBay\",\"outputs\":[{\"internalType\":\"contract IMecenateBay\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mecenateFeedFactory\",\"outputs\":[{\"internalType\":\"contract IMecenateFeedFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mecenateTreasury\",\"outputs\":[{\"internalType\":\"contract IMecenateTreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mecenateUsers\",\"outputs\":[{\"internalType\":\"contract IMecenateUsers\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MecenateStats.sol\":\"MecenateStats\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/MecenateStats.sol\":{\"content\":\"/**\\n * @title MecenateStats\\n * @dev This contract provides statistics about the Mecenate platform, including the total number of users, bay requests, feeds, global fee, fixed fee, and treasury balance.\\n */\\npragma solidity 0.8.19;\\n\\nimport \\\"./interfaces/IMecenateUsers.sol\\\";\\nimport \\\"./interfaces/IMecenateFeedFactory.sol\\\";\\nimport \\\"./interfaces/IMecenateBay.sol\\\";\\nimport \\\"./interfaces/IMecenateTreasury.sol\\\";\\n\\ncontract MecenateStats {\\n    struct Stats {\\n        uint256 totalUsers;\\n        uint256 totalBayRequests;\\n        uint256 totalFeeds;\\n        uint256 globalFee;\\n        uint256 fixedFee;\\n        uint256 treasuryBalance;\\n    }\\n\\n    IMecenateUsers public mecenateUsers;\\n    IMecenateFeedFactory public mecenateFeedFactory;\\n    IMecenateBay public mecenateBay;\\n    IMecenateTreasury public mecenateTreasury;\\n\\n    constructor(\\n        address mecenateUsersAddress,\\n        address mecenateFeedFactoryAddress,\\n        address mecenateBayAddress,\\n        address mecenateTreasuryAddress\\n    ) {\\n        mecenateUsers = IMecenateUsers(mecenateUsersAddress);\\n        mecenateFeedFactory = IMecenateFeedFactory(mecenateFeedFactoryAddress);\\n        mecenateBay = IMecenateBay(mecenateBayAddress);\\n        mecenateTreasury = IMecenateTreasury(mecenateTreasuryAddress);\\n    }\\n\\n    function getStats() public view returns (Stats memory) {\\n        uint256 totalBayRequests = mecenateBay.contractCounter();\\n        uint256 totalFeeds = mecenateFeedFactory.contractCounter();\\n\\n        return\\n            Stats(\\n                mecenateUsers.getUserCount(),\\n                totalBayRequests,\\n                totalFeeds,\\n                mecenateTreasury.globalFee(),\\n                mecenateTreasury.fixedFee(),\\n                address(mecenateTreasury).balance\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x9774c3050577fdb475550ee6c554d78704eb07070455dcd5e82a7442fa1a683a\"},\"contracts/interfaces/IMecenateBay.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\nimport \\\"../library/Structures.sol\\\";\\r\\n\\r\\ninterface IMecenateBay {\\r\\n    function allRequests()\\r\\n        external\\r\\n        view\\r\\n        returns (Structures.BayRequest[] memory);\\r\\n\\r\\n    function contractCounter() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x8964368dca5e796c8c094a3275105747756aa83f66079ef4cce5f7e1c512428d\"},\"contracts/interfaces/IMecenateFeedFactory.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\ninterface IMecenateFeedFactory {\\n    function owner() external view returns (address payable);\\n\\n    function treasuryContract() external view returns (address payable);\\n\\n    function identityContract() external view returns (address);\\n\\n    function feeds() external view returns (address[] memory);\\n\\n    function contractCounter() external view returns (uint256);\\n\\n    function isFeed(address _feed) external view returns (bool);\\n\\n    function museToken() external view returns (address);\\n\\n    function wethToken() external view returns (address);\\n\\n    function daiToken() external view returns (address);\\n\\n    function router() external view returns (address);\\n\\n    function getRouterFee(uint8 tokenId) external view returns (uint24);\\n\\n    function burnEnabled() external view returns (bool);\\n\\n    function version() external view returns (string memory);\\n\\n    function easSchema() external view returns (bytes32);\\n\\n    function easContract() external view returns (address);\\n}\\n\",\"keccak256\":\"0xad456733d0e345e6f153365591b8fe16271a35318611712272d498231fc636fa\"},\"contracts/interfaces/IMecenateTreasury.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateTreasury {\\r\\n    function globalFee() external view returns (uint256);\\r\\n\\r\\n    function fixedFee() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf544878bba8e01c837110d06eac56042957d59c593ba9083f686ef02aa9276a1\"},\"contracts/interfaces/IMecenateUsers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateUsers {\\n    function registerUser(bytes memory metadata) external;\\n\\n    function getUsers() external view returns (address[] memory);\\n\\n    function getUserCount() external view returns (uint256);\\n\\n    function getUserAt(uint256 index) external view returns (address);\\n\\n    function checkifUserExist(address userAddress) external view returns (bool);\\n\\n    function getPaginatedUsers(\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) external view returns (address[] memory);\\n\\n    function getUserMetadata(\\n        address userAddress\\n    ) external view returns (Structures.User memory);\\n\\n    function getUserPublicKey(\\n        address userAddress\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xf0ff65dbfea12d90cf106325b9478e31b284045327e5f0974db5374b8789e93c\",\"license\":\"MIT\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\n * @title Structures\\n * @dev This library defines various data structures used in the Mecenate platform.\\n */\\npragma solidity 0.8.19;\\n\\nlibrary Structures {\\n    enum PostStatus {\\n        Waiting,\\n        Proposed,\\n        Accepted,\\n        Submitted,\\n        Finalized,\\n        Punished,\\n        Revealed,\\n        Renounced\\n    }\\n\\n    enum Tokens {\\n        NaN,\\n        MUSE,\\n        DAI\\n    }\\n\\n    enum PostType {\\n        Text,\\n        Image,\\n        Video,\\n        Audio,\\n        File\\n    }\\n    enum PostDuration {\\n        OneDay,\\n        ThreeDays,\\n        OneWeek,\\n        TwoWeeks,\\n        OneMonth\\n    }\\n\\n    struct FeedSettings {\\n        uint256 punishmentRatio;\\n        uint256 postCount;\\n        address usersModuleContract;\\n        address factoryContract;\\n        address router;\\n        string version;\\n    }\\n\\n    struct FactorySettings {\\n        address treasuryContract;\\n        address usersModuleContract;\\n        address easContract;\\n        bytes32 easSchema;\\n        address museToken;\\n        address daiToken;\\n        address wethToken;\\n        address router;\\n    }\\n\\n    /**\\n     * @dev Struct representing a post on the Mecenate platform.\\n     */\\n    struct Post {\\n        User creator;\\n        PostData postdata;\\n    }\\n\\n    /**\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\n     */\\n    struct PostData {\\n        PostSettings settings;\\n        PostEscrow escrow;\\n        PostEncryptedData data;\\n    }\\n\\n    /**\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\n     */\\n    struct PostEncryptedData {\\n        bytes encryptedData;\\n        bytes encryptedKey;\\n        bytes decryptedData;\\n    }\\n\\n    /**\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettings {\\n        PostStatus status;\\n        PostType postType;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n        uint256 duration;\\n        Tokens tokenId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the private settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettingPrivate {\\n        address buyerAddress;\\n        address sellerAddress;\\n    }\\n\\n    /**\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\n     */\\n    struct PostEscrow {\\n        uint256 stake;\\n        uint256 payment;\\n        uint256 punishment;\\n        uint256 penalty;\\n    }\\n\\n    /**\\n     * @dev Struct representing a user on the Mecenate platform.\\n     */\\n    struct User {\\n        address evmAddress;\\n        bytes sismoVaultId;\\n        bytes publicKey;\\n    }\\n\\n    /**\\n     * @dev Struct representing a feed on the Mecenate platform.\\n     */\\n    struct Feed {\\n        address contractAddress;\\n        address owner;\\n        uint256 sellerStake;\\n        uint256 buyerStake;\\n        uint256 totalStake;\\n        uint256 postCount;\\n        uint256 paymentRequested;\\n        uint256 stakeRequested;\\n        PostStatus status;\\n        Tokens tokenId;\\n        string version;\\n    }\\n\\n    /**\\n     * @dev Struct representing a bay request on the Mecenate platform.\\n     */\\n    struct BayRequest {\\n        bytes request;\\n        uint256 payment;\\n        uint256 stake;\\n        address postAddress;\\n        bool accepted;\\n        uint256 postCount;\\n        Tokens tokenId;\\n        address buyerAddress;\\n    }\\n}\\n\",\"keccak256\":\"0xba5512854a95a55b3d6c7940cd22516d7d7f1d464263de250dfea4750de44152\"}},\"version\":1}",
  "bytecode": "0x6080346100b957601f61065b38819003918201601f19168301916001600160401b038311848410176100be578084926080946040528339810103126100b957610047816100d4565b90610054602082016100d4565b61006c6060610065604085016100d4565b93016100d4565b9060018060a01b03928380928160018060a01b0319971687600054161760005516856001541617600155168360025416176002551690600354161760035560405161057290816100e98239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036100b95756fe6080604081815260048036101561001557600080fd5b600092833560e01c908163139e3c541461046257508063295b7b9a1461040f5780633f16a3bb146103bc57806377260151146103655763c59d48471461005a57600080fd5b3461036157827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610361578151610093816104b0565b8381528360a060209282848201528286820152826060820152826080820152015273ffffffffffffffffffffffffffffffffffffffff90816002541693805192828486817f067bd3b400000000000000000000000000000000000000000000000000000000998a82525afa938415610328578794610332575b50828160015416968684518099819382525afa90811561032857859688969596926102f2575b5083818954168451988980927fb5cb15f70000000000000000000000000000000000000000000000000000000082525afa9687156102e85788976102b5575b5060035416928251937f808fc20600000000000000000000000000000000000000000000000000000000855281858781845afa94851561027c578995610286575b5081845180977f91792d5b00000000000000000000000000000000000000000000000000000000825281845afa95861561027c578996610245575b5060c09850319560a08451610201816104b0565b8981528381019283528581019485526060810196875260808101978852019687528351978852519087015251908501525160608401525160808301525160a0820152f35b9095508181813d8311610275575b61025d81836104fb565b810103126102715760c098505194386101ed565b8880fd5b503d610253565b84513d8b823e3d90fd5b9094508181813d83116102ae575b61029e81836104fb565b81010312610271575193386101b2565b503d610294565b9096508381813d83116102e1575b6102cd81836104fb565b810103126102dd57519538610171565b8780fd5b503d6102c3565b83513d8a823e3d90fd5b945090508284813d8111610321575b61030b81836104fb565b8101031261031d578593519038610132565b8680fd5b503d610301565b82513d89823e3d90fd5b9093508281813d831161035a575b61034a81836104fb565b8101031261031d5751923861010c565b503d610340565b8280fd5b5050346103b857817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103b85760209073ffffffffffffffffffffffffffffffffffffffff600154169051908152f35b5080fd5b5050346103b857817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103b85760209073ffffffffffffffffffffffffffffffffffffffff600254169051908152f35b5050346103b857817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103b85760209073ffffffffffffffffffffffffffffffffffffffff600354169051908152f35b8490346103b857817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103b85773ffffffffffffffffffffffffffffffffffffffff60209254168152f35b60c0810190811067ffffffffffffffff8211176104cc57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176104cc5760405256fea26469706673582212206af4c816f0efd54d28b70707e2879cba512931899acc8abff757fa5f5a01a09364736f6c63430008130033",
  "deployedBytecode": "0x6080604081815260048036101561001557600080fd5b600092833560e01c908163139e3c541461046257508063295b7b9a1461040f5780633f16a3bb146103bc57806377260151146103655763c59d48471461005a57600080fd5b3461036157827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610361578151610093816104b0565b8381528360a060209282848201528286820152826060820152826080820152015273ffffffffffffffffffffffffffffffffffffffff90816002541693805192828486817f067bd3b400000000000000000000000000000000000000000000000000000000998a82525afa938415610328578794610332575b50828160015416968684518099819382525afa90811561032857859688969596926102f2575b5083818954168451988980927fb5cb15f70000000000000000000000000000000000000000000000000000000082525afa9687156102e85788976102b5575b5060035416928251937f808fc20600000000000000000000000000000000000000000000000000000000855281858781845afa94851561027c578995610286575b5081845180977f91792d5b00000000000000000000000000000000000000000000000000000000825281845afa95861561027c578996610245575b5060c09850319560a08451610201816104b0565b8981528381019283528581019485526060810196875260808101978852019687528351978852519087015251908501525160608401525160808301525160a0820152f35b9095508181813d8311610275575b61025d81836104fb565b810103126102715760c098505194386101ed565b8880fd5b503d610253565b84513d8b823e3d90fd5b9094508181813d83116102ae575b61029e81836104fb565b81010312610271575193386101b2565b503d610294565b9096508381813d83116102e1575b6102cd81836104fb565b810103126102dd57519538610171565b8780fd5b503d6102c3565b83513d8a823e3d90fd5b945090508284813d8111610321575b61030b81836104fb565b8101031261031d578593519038610132565b8680fd5b503d610301565b82513d89823e3d90fd5b9093508281813d831161035a575b61034a81836104fb565b8101031261031d5751923861010c565b503d610340565b8280fd5b5050346103b857817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103b85760209073ffffffffffffffffffffffffffffffffffffffff600154169051908152f35b5080fd5b5050346103b857817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103b85760209073ffffffffffffffffffffffffffffffffffffffff600254169051908152f35b5050346103b857817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103b85760209073ffffffffffffffffffffffffffffffffffffffff600354169051908152f35b8490346103b857817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103b85773ffffffffffffffffffffffffffffffffffffffff60209254168152f35b60c0810190811067ffffffffffffffff8211176104cc57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176104cc5760405256fea26469706673582212206af4c816f0efd54d28b70707e2879cba512931899acc8abff757fa5f5a01a09364736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9030,
        "contract": "contracts/MecenateStats.sol:MecenateStats",
        "label": "mecenateUsers",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IMecenateUsers)15770"
      },
      {
        "astId": 9033,
        "contract": "contracts/MecenateStats.sol:MecenateStats",
        "label": "mecenateFeedFactory",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IMecenateFeedFactory)15699"
      },
      {
        "astId": 9036,
        "contract": "contracts/MecenateStats.sol:MecenateStats",
        "label": "mecenateBay",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IMecenateBay)15550"
      },
      {
        "astId": 9039,
        "contract": "contracts/MecenateStats.sol:MecenateStats",
        "label": "mecenateTreasury",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IMecenateTreasury)15712"
      }
    ],
    "types": {
      "t_contract(IMecenateBay)15550": {
        "encoding": "inplace",
        "label": "contract IMecenateBay",
        "numberOfBytes": "20"
      },
      "t_contract(IMecenateFeedFactory)15699": {
        "encoding": "inplace",
        "label": "contract IMecenateFeedFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IMecenateTreasury)15712": {
        "encoding": "inplace",
        "label": "contract IMecenateTreasury",
        "numberOfBytes": "20"
      },
      "t_contract(IMecenateUsers)15770": {
        "encoding": "inplace",
        "label": "contract IMecenateUsers",
        "numberOfBytes": "20"
      }
    }
  }
}