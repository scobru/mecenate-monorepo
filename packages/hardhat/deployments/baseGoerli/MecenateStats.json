{
  "address": "0x81bC9876af58Eb4D07f02B0B00f3829D74469D63",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mecenateUsers",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mecenateFeedFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mecenateBay",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mecenateTreasury",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "getStats",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalUsers",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBayRequests",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalFeeds",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "globalFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fixedFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "treasuryBalance",
              "type": "uint256"
            }
          ],
          "internalType": "struct MecenateStats.Stats",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mecenateBay",
      "outputs": [
        {
          "internalType": "contract IMecenateBay",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mecenateFeedFactory",
      "outputs": [
        {
          "internalType": "contract IMecenateFeedFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mecenateTreasury",
      "outputs": [
        {
          "internalType": "contract IMecenateTreasury",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mecenateUsers",
      "outputs": [
        {
          "internalType": "contract IMecenateUsers",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0409eaac8fbfb779c07e962340301ed72fedae4755e9ffa8116c71fbc0e5c902",
  "receipt": {
    "to": null,
    "from": "0x8aA5F726d9F868a21a8bd748E2f1E43bA31eb670",
    "contractAddress": "0x81bC9876af58Eb4D07f02B0B00f3829D74469D63",
    "transactionIndex": 1,
    "gasUsed": "446616",
    "logsBloom": "0x
    "blockHash": "0x73c80aa6f5e51585d121dbe06b7fe3eabb8565d07edd260c36482d057b095e99",
    "transactionHash": "0x0409eaac8fbfb779c07e962340301ed72fedae4755e9ffa8116c71fbc0e5c902",
    "logs": [],
    "blockNumber": 10677343,
    "cumulativeGasUsed": "494257",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x78329Ef4bEda65c8d54cD551Bc87F7d1AB6a20D9",
    "0xcB76cb094dE5c19e728ab996d619a841e2D227d6",
    "0xb75767b9D037A392e2B29f1C4139B54fa1A26e97",
    "0x31B428542C7197062EDe6CD2Fd30fC9dD6FA22F2"
  ],
  "numDeployments": 6,
  "solcInputHash": "a9ff469b4dc9c1829628556d6121bf42",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mecenateUsers\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mecenateFeedFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mecenateBay\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mecenateTreasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"getStats\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalUsers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBayRequests\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFeeds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"globalFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct MecenateStats.Stats\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mecenateBay\",\"outputs\":[{\"internalType\":\"contract IMecenateBay\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mecenateFeedFactory\",\"outputs\":[{\"internalType\":\"contract IMecenateFeedFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mecenateTreasury\",\"outputs\":[{\"internalType\":\"contract IMecenateTreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mecenateUsers\",\"outputs\":[{\"internalType\":\"contract IMecenateUsers\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MecenateStats.sol\":\"MecenateStats\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/MecenateStats.sol\":{\"content\":\"/**\\r\\n * @title MecenateStats\\r\\n * @dev This contract provides statistics about the Mecenate platform, including the total number of users, bay requests, feeds, global fee, fixed fee, and treasury balance.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./interfaces/IMecenateUsers.sol\\\";\\r\\nimport \\\"./interfaces/IMecenateFeedFactory.sol\\\";\\r\\nimport \\\"./interfaces/IMecenateBay.sol\\\";\\r\\nimport \\\"./interfaces/IMecenateTreasury.sol\\\";\\r\\n\\r\\ncontract MecenateStats {\\r\\n    struct Stats {\\r\\n        uint256 totalUsers;\\r\\n        uint256 totalBayRequests;\\r\\n        uint256 totalFeeds;\\r\\n        uint256 globalFee;\\r\\n        uint256 fixedFee;\\r\\n        uint256 treasuryBalance;\\r\\n    }\\r\\n\\r\\n    IMecenateUsers public mecenateUsers;\\r\\n    IMecenateFeedFactory public mecenateFeedFactory;\\r\\n    IMecenateBay public mecenateBay;\\r\\n    IMecenateTreasury public mecenateTreasury;\\r\\n\\r\\n    constructor(\\r\\n        address _mecenateUsers,\\r\\n        address _mecenateFeedFactory,\\r\\n        address _mecenateBay,\\r\\n        address _mecenateTreasury\\r\\n    ) {\\r\\n        mecenateUsers = IMecenateUsers(_mecenateUsers);\\r\\n        mecenateFeedFactory = IMecenateFeedFactory(_mecenateFeedFactory);\\r\\n        mecenateBay = IMecenateBay(_mecenateBay);\\r\\n        mecenateTreasury = IMecenateTreasury(_mecenateTreasury);\\r\\n    }\\r\\n\\r\\n    function getStats() public view returns (Stats memory) {\\r\\n        uint256 totalBayRequests = mecenateBay.contractCounter();\\r\\n        uint256 totalFeeds = mecenateFeedFactory.contractCounter();\\r\\n\\r\\n        return\\r\\n            Stats(\\r\\n                mecenateUsers.getUserCount(),\\r\\n                totalBayRequests,\\r\\n                totalFeeds,\\r\\n                mecenateTreasury.globalFee(),\\r\\n                mecenateTreasury.fixedFee(),\\r\\n                address(mecenateTreasury).balance\\r\\n            );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf15228f20ad43feabb1fb0ceb64e1998cddceace7a775a78497c146f70668c8f\"},\"contracts/interfaces/IMecenateBay.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\nimport \\\"../library/Structures.sol\\\";\\r\\n\\r\\ninterface IMecenateBay {\\r\\n    function allRequests()\\r\\n        external\\r\\n        view\\r\\n        returns (Structures.BayRequest[] memory);\\r\\n\\r\\n    function contractCounter() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x8964368dca5e796c8c094a3275105747756aa83f66079ef4cce5f7e1c512428d\"},\"contracts/interfaces/IMecenateFeedFactory.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateFeedFactory {\\r\\n    function owner() external view returns (address payable);\\r\\n\\r\\n    function treasuryContract() external view returns (address payable);\\r\\n\\r\\n    function identityContract() external view returns (address);\\r\\n\\r\\n    function feeds() external view returns (address[] memory);\\r\\n\\r\\n    function contractCounter() external view returns (uint256);\\r\\n\\r\\n    function isFeed(address _feed) external view returns (bool);\\r\\n\\r\\n    function museToken() external view returns (address);\\r\\n\\r\\n    function wethToken() external view returns (address);\\r\\n\\r\\n    function daiToken() external view returns (address);\\r\\n\\r\\n    function router() external view returns (address);\\r\\n\\r\\n    function getRouterFee(uint8 tokenId) external view returns (uint256);\\r\\n\\r\\n    function burnEnabled() external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x34f3a2c8cf73055546c1f92b163f179731c34a1814dbd7babc3b20841d8944ec\"},\"contracts/interfaces/IMecenateTreasury.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateTreasury {\\r\\n    function globalFee() external view returns (uint256);\\r\\n\\r\\n    function fixedFee() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf544878bba8e01c837110d06eac56042957d59c593ba9083f686ef02aa9276a1\"},\"contracts/interfaces/IMecenateUsers.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\nimport \\\"../library/Structures.sol\\\";\\r\\n\\r\\ninterface IMecenateUsers {\\r\\n    function checkifUserExist(bytes32 vaultId) external view returns (bool);\\r\\n\\r\\n    function getUserData(\\r\\n        address user\\r\\n    ) external view returns (Structures.User memory);\\r\\n\\r\\n    function getUserCount() external view returns (uint256);\\r\\n\\r\\n    function getUserAt(uint256 index) external view returns (address);\\r\\n\\r\\n    function getUserVaultIdAt(uint256 index) external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0xcd2b91f5bebd5c880ac937b181771a0a722a9a71ff93c783da3c63137179a042\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\r\\n * @title Structures\\r\\n * @dev This library defines various data structures used in the Mecenate platform.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nlibrary Structures {\\r\\n    enum PostStatus {\\r\\n        Waiting,\\r\\n        Proposed,\\r\\n        Accepted,\\r\\n        Submitted,\\r\\n        Finalized,\\r\\n        Punished,\\r\\n        Revealed,\\r\\n        Renounced\\r\\n    }\\r\\n    enum Tokens {\\r\\n        NaN,\\r\\n        MUSE,\\r\\n        DAI\\r\\n    }\\r\\n    enum PostType {\\r\\n        Text,\\r\\n        Image,\\r\\n        Video,\\r\\n        Audio,\\r\\n        File\\r\\n    }\\r\\n    enum PostDuration {\\r\\n        OneDay,\\r\\n        ThreeDays,\\r\\n        OneWeek,\\r\\n        TwoWeeks,\\r\\n        OneMonth\\r\\n    }\\r\\n\\r\\n    struct FeedSettings {\\r\\n        uint256 punishmentRatio;\\r\\n        uint256 postCount;\\r\\n        address usersModuleContract;\\r\\n        address factoryContract;\\r\\n        address verifierContract;\\r\\n        address vaultContract;\\r\\n        address router;\\r\\n        bytes encodedSymKey;\\r\\n        bytes lastMessageForBuyer;\\r\\n        bytes lastMessageForSeller;\\r\\n        string version;\\r\\n    }\\r\\n\\r\\n    struct FactorySettings {\\r\\n        address treasuryContract;\\r\\n        address usersModuleContract;\\r\\n        address verifierContract;\\r\\n        address vaultContract;\\r\\n        address museToken;\\r\\n        address daiToken;\\r\\n        address wethToken;\\r\\n        address router;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a post on the Mecenate platform.\\r\\n     */\\r\\n    struct Post {\\r\\n        User creator;\\r\\n        PostData postdata;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostData {\\r\\n        PostSettings settings;\\r\\n        PostEscrow escrow;\\r\\n        PostEncryptedData data;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostEncryptedData {\\r\\n        bytes encryptedData;\\r\\n        bytes encryptedKey;\\r\\n        bytes decryptedData;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostSettings {\\r\\n        PostStatus status;\\r\\n        PostType postType;\\r\\n        uint256 creationTimeStamp;\\r\\n        uint256 endTimeStamp;\\r\\n        uint256 duration;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the private settings of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostSettingPrivate {\\r\\n        bytes vaultIdSeller;\\r\\n        uint256 sellerTwitterId;\\r\\n        uint256 sellerTelegramId;\\r\\n        bytes vaultIdBuyer;\\r\\n        uint256 buyerTwitterId;\\r\\n        uint256 buyerTelegramId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostEscrow {\\r\\n        uint256 stake;\\r\\n        uint256 payment;\\r\\n        uint256 punishment;\\r\\n        uint256 penalty;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a user on the Mecenate platform.\\r\\n     */\\r\\n    struct User {\\r\\n        bytes32 vaultId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a feed on the Mecenate platform.\\r\\n     */\\r\\n    struct Feed {\\r\\n        address contractAddress;\\r\\n        bytes32 operator;\\r\\n        uint256 sellerStake;\\r\\n        uint256 buyerStake;\\r\\n        uint256 totalStake;\\r\\n        uint256 postCount;\\r\\n        uint256 paymentRequested;\\r\\n        uint256 stakeRequested;\\r\\n        PostStatus status;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a bay request on the Mecenate platform.\\r\\n     */\\r\\n    struct BayRequest {\\r\\n        bytes32 request;\\r\\n        uint256 payment;\\r\\n        uint256 stake;\\r\\n        address postAddress;\\r\\n        bool accepted;\\r\\n        uint256 postCount;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the private settings of a bay request on the Mecenate platform.\\r\\n     */\\r\\n    struct BayRequestPrivate {\\r\\n        bytes vaultIdSeller;\\r\\n        bytes sellerResponse;\\r\\n        bytes vaultIdBuyer;\\r\\n        bytes buyerResponse;\\r\\n        address buyerTo;\\r\\n        bytes32 buyerNonce;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7b6ab8775753a390fe793555975dc63a401b2c10ad09b949c5588177ca6c9f33\"}},\"version\":1}",
  "bytecode": "0x6080346100b957601f61065b38819003918201601f19168301916001600160401b038311848410176100be578084926080946040528339810103126100b957610047816100d4565b90610054602082016100d4565b61006c6060610065604085016100d4565b93016100d4565b9060018060a01b03928380928160018060a01b0319971687600054161760005516856001541617600155168360025416176002551690600354161760035560405161057290816100e98239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036100b95756fe6080604081815260048036101561001557600080fd5b600092833560e01c908163139e3c541461046257508063295b7b9a1461040f5780633f16a3bb146103bc57806377260151146103655763c59d48471461005a57600080fd5b3461036157827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610361578151610093816104b0565b8381528360a060209282848201528286820152826060820152826080820152015273ffffffffffffffffffffffffffffffffffffffff90816002541693805192828486817f067bd3b400000000000000000000000000000000000000000000000000000000998a82525afa938415610328578794610332575b50828160015416968684518099819382525afa90811561032857859688969596926102f2575b5083818954168451988980927fb5cb15f70000000000000000000000000000000000000000000000000000000082525afa9687156102e85788976102b5575b5060035416928251937f808fc20600000000000000000000000000000000000000000000000000000000855281858781845afa94851561027c578995610286575b5081845180977f91792d5b00000000000000000000000000000000000000000000000000000000825281845afa95861561027c578996610245575b5060c09850319560a08451610201816104b0565b8981528381019283528581019485526060810196875260808101978852019687528351978852519087015251908501525160608401525160808301525160a0820152f35b9095508181813d8311610275575b61025d81836104fb565b810103126102715760c098505194386101ed565b8880fd5b503d610253565b84513d8b823e3d90fd5b9094508181813d83116102ae575b61029e81836104fb565b81010312610271575193386101b2565b503d610294565b9096508381813d83116102e1575b6102cd81836104fb565b810103126102dd57519538610171565b8780fd5b503d6102c3565b83513d8a823e3d90fd5b945090508284813d8111610321575b61030b81836104fb565b8101031261031d578593519038610132565b8680fd5b503d610301565b82513d89823e3d90fd5b9093508281813d831161035a575b61034a81836104fb565b8101031261031d5751923861010c565b503d610340565b8280fd5b5050346103b857817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103b85760209073ffffffffffffffffffffffffffffffffffffffff600154169051908152f35b5080fd5b5050346103b857817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103b85760209073ffffffffffffffffffffffffffffffffffffffff600254169051908152f35b5050346103b857817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103b85760209073ffffffffffffffffffffffffffffffffffffffff600354169051908152f35b8490346103b857817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103b85773ffffffffffffffffffffffffffffffffffffffff60209254168152f35b60c0810190811067ffffffffffffffff8211176104cc57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176104cc5760405256fea2646970667358221220f88f6fdfa14fa10ef0f170b2a80448c3333639ad192ffcee8a955b5e3e41730264736f6c63430008130033",
  "deployedBytecode": "0x6080604081815260048036101561001557600080fd5b600092833560e01c908163139e3c541461046257508063295b7b9a1461040f5780633f16a3bb146103bc57806377260151146103655763c59d48471461005a57600080fd5b3461036157827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610361578151610093816104b0565b8381528360a060209282848201528286820152826060820152826080820152015273ffffffffffffffffffffffffffffffffffffffff90816002541693805192828486817f067bd3b400000000000000000000000000000000000000000000000000000000998a82525afa938415610328578794610332575b50828160015416968684518099819382525afa90811561032857859688969596926102f2575b5083818954168451988980927fb5cb15f70000000000000000000000000000000000000000000000000000000082525afa9687156102e85788976102b5575b5060035416928251937f808fc20600000000000000000000000000000000000000000000000000000000855281858781845afa94851561027c578995610286575b5081845180977f91792d5b00000000000000000000000000000000000000000000000000000000825281845afa95861561027c578996610245575b5060c09850319560a08451610201816104b0565b8981528381019283528581019485526060810196875260808101978852019687528351978852519087015251908501525160608401525160808301525160a0820152f35b9095508181813d8311610275575b61025d81836104fb565b810103126102715760c098505194386101ed565b8880fd5b503d610253565b84513d8b823e3d90fd5b9094508181813d83116102ae575b61029e81836104fb565b81010312610271575193386101b2565b503d610294565b9096508381813d83116102e1575b6102cd81836104fb565b810103126102dd57519538610171565b8780fd5b503d6102c3565b83513d8a823e3d90fd5b945090508284813d8111610321575b61030b81836104fb565b8101031261031d578593519038610132565b8680fd5b503d610301565b82513d89823e3d90fd5b9093508281813d831161035a575b61034a81836104fb565b8101031261031d5751923861010c565b503d610340565b8280fd5b5050346103b857817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103b85760209073ffffffffffffffffffffffffffffffffffffffff600154169051908152f35b5080fd5b5050346103b857817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103b85760209073ffffffffffffffffffffffffffffffffffffffff600254169051908152f35b5050346103b857817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103b85760209073ffffffffffffffffffffffffffffffffffffffff600354169051908152f35b8490346103b857817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103b85773ffffffffffffffffffffffffffffffffffffffff60209254168152f35b60c0810190811067ffffffffffffffff8211176104cc57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176104cc5760405256fea2646970667358221220f88f6fdfa14fa10ef0f170b2a80448c3333639ad192ffcee8a955b5e3e41730264736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9493,
        "contract": "contracts/MecenateStats.sol:MecenateStats",
        "label": "mecenateUsers",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IMecenateUsers)16965"
      },
      {
        "astId": 9496,
        "contract": "contracts/MecenateStats.sol:MecenateStats",
        "label": "mecenateFeedFactory",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IMecenateFeedFactory)16914"
      },
      {
        "astId": 9499,
        "contract": "contracts/MecenateStats.sol:MecenateStats",
        "label": "mecenateBay",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IMecenateBay)16781"
      },
      {
        "astId": 9502,
        "contract": "contracts/MecenateStats.sol:MecenateStats",
        "label": "mecenateTreasury",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IMecenateTreasury)16927"
      }
    ],
    "types": {
      "t_contract(IMecenateBay)16781": {
        "encoding": "inplace",
        "label": "contract IMecenateBay",
        "numberOfBytes": "20"
      },
      "t_contract(IMecenateFeedFactory)16914": {
        "encoding": "inplace",
        "label": "contract IMecenateFeedFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IMecenateTreasury)16927": {
        "encoding": "inplace",
        "label": "contract IMecenateTreasury",
        "numberOfBytes": "20"
      },
      "t_contract(IMecenateUsers)16965": {
        "encoding": "inplace",
        "label": "contract IMecenateUsers",
        "numberOfBytes": "20"
      }
    }
  }
}