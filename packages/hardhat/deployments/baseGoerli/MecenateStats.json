{
  "address": "0x236100d3aCf5F1f8B7B0faB10ba1B8E6130BFD3f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mecenateUsers",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mecenateFeedFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mecenateBay",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mecenateTreasury",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "getStats",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalUsers",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBayRequests",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalFeeds",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "globalFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fixedFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "treasuryBalance",
              "type": "uint256"
            }
          ],
          "internalType": "struct MecenateStats.Stats",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mecenateBay",
      "outputs": [
        {
          "internalType": "contract IMecenateBay",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mecenateFeedFactory",
      "outputs": [
        {
          "internalType": "contract IMecenateFeedFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mecenateTreasury",
      "outputs": [
        {
          "internalType": "contract IMecenateTreasury",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mecenateUsers",
      "outputs": [
        {
          "internalType": "contract IMecenateUsers",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc8cbe6fba6d7496dd4ed47e99d29211d8d3d25b2ff89db3b8612d1256b45fb74",
  "receipt": {
    "to": null,
    "from": "0x8aA5F726d9F868a21a8bd748E2f1E43bA31eb670",
    "contractAddress": "0x236100d3aCf5F1f8B7B0faB10ba1B8E6130BFD3f",
    "transactionIndex": 1,
    "gasUsed": "446604",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x70b8a5805e0cc64388dbc60890d5dab66e69ea658694d44acc0273ec5d4e28c7",
    "transactionHash": "0xc8cbe6fba6d7496dd4ed47e99d29211d8d3d25b2ff89db3b8612d1256b45fb74",
    "logs": [],
    "blockNumber": 10590848,
    "cumulativeGasUsed": "493457",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7E8664B5BA54AD234d62A5Af7197999181Ca3dC6",
    "0x8B90376A65C507F8aAEBd3ac40fFE588592A2d8C",
    "0x0891ccA4c044c43D00f77160c1D418cE506Dd14f",
    "0x27115aAa74b296D2461958498B5b4C99b8E10afA"
  ],
  "numDeployments": 7,
  "solcInputHash": "abe1b51c8b82362d524c8efc9e8c0e34",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mecenateUsers\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mecenateFeedFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mecenateBay\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mecenateTreasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"getStats\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalUsers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBayRequests\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFeeds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"globalFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct MecenateStats.Stats\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mecenateBay\",\"outputs\":[{\"internalType\":\"contract IMecenateBay\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mecenateFeedFactory\",\"outputs\":[{\"internalType\":\"contract IMecenateFeedFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mecenateTreasury\",\"outputs\":[{\"internalType\":\"contract IMecenateTreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mecenateUsers\",\"outputs\":[{\"internalType\":\"contract IMecenateUsers\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MecenateStats.sol\":\"MecenateStats\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/MecenateStats.sol\":{\"content\":\"/**\\n * @title MecenateStats\\n * @dev This contract provides statistics about the Mecenate platform, including the total number of users, bay requests, feeds, global fee, fixed fee, and treasury balance.\\n */\\npragma solidity 0.8.19;\\n\\nimport \\\"./interfaces/IMecenateUsers.sol\\\";\\nimport \\\"./interfaces/IMecenateFeedFactory.sol\\\";\\nimport \\\"./interfaces/IMecenateBay.sol\\\";\\nimport \\\"./interfaces/IMecenateTreasury.sol\\\";\\n\\ncontract MecenateStats {\\n    struct Stats {\\n        uint256 totalUsers;\\n        uint256 totalBayRequests;\\n        uint256 totalFeeds;\\n        uint256 globalFee;\\n        uint256 fixedFee;\\n        uint256 treasuryBalance;\\n    }\\n\\n    IMecenateUsers public mecenateUsers;\\n    IMecenateFeedFactory public mecenateFeedFactory;\\n    IMecenateBay public mecenateBay;\\n    IMecenateTreasury public mecenateTreasury;\\n\\n    constructor(\\n        address _mecenateUsers,\\n        address _mecenateFeedFactory,\\n        address _mecenateBay,\\n        address _mecenateTreasury\\n    ) {\\n        mecenateUsers = IMecenateUsers(_mecenateUsers);\\n        mecenateFeedFactory = IMecenateFeedFactory(_mecenateFeedFactory);\\n        mecenateBay = IMecenateBay(_mecenateBay);\\n        mecenateTreasury = IMecenateTreasury(_mecenateTreasury);\\n    }\\n\\n    function getStats() public view returns (Stats memory) {\\n        uint256 totalBayRequests = mecenateBay.contractCounter();\\n        uint256 totalFeeds = mecenateFeedFactory.contractCounter();\\n\\n        return\\n            Stats(\\n                mecenateUsers.getUserCount(),\\n                totalBayRequests,\\n                totalFeeds,\\n                mecenateTreasury.globalFee(),\\n                mecenateTreasury.fixedFee(),\\n                address(mecenateTreasury).balance\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x7168e8ae97d90857b9923a9e899e3302dcb6970d91e8511bc632f9f4d94c2a10\"},\"contracts/interfaces/IMecenateBay.sol\":{\"content\":\"pragma solidity 0.8.19;\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateBay {\\n    function allRequests()\\n        external\\n        view\\n        returns (Structures.BayRequest[] memory);\\n\\n    function contractCounter() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2360f82f352128e3e3783aca35ced8578a8d05533fcc5a21af66b69f71d11119\"},\"contracts/interfaces/IMecenateFeedFactory.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\ninterface IMecenateFeedFactory {\\n    function owner() external view returns (address payable);\\n\\n    function treasuryContract() external view returns (address payable);\\n\\n    function identityContract() external view returns (address);\\n\\n    function feeds() external view returns (address[] memory);\\n\\n    function contractCounter() external view returns (uint256);\\n\\n    function isFeed(address _feed) external view returns (bool);\\n\\n    function museToken() external view returns (address);\\n\\n    function wethToken() external view returns (address);\\n\\n    function daiToken() external view returns (address);\\n\\n    function router() external view returns (address);\\n\\n    function getRouterFee(uint8 tokenId) external view returns (uint256);\\n\\n    function burnEnabled() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x74d8cde749b17ace9473a06f8e8ca757864f05799f1ed131847a53f260e15319\"},\"contracts/interfaces/IMecenateTreasury.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\ninterface IMecenateTreasury {\\n    function globalFee() external view returns (uint256);\\n\\n    function fixedFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xade0e46553c55f99f424d2a5919ae62ab8f2b0829b0713aa539c2bf27850ed27\"},\"contracts/interfaces/IMecenateUsers.sol\":{\"content\":\"pragma solidity 0.8.19;\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateUsers {\\n    function checkifUserExist(bytes32 vaultId) external view returns (bool);\\n\\n    function getUserData(\\n        address user\\n    ) external view returns (Structures.User memory);\\n\\n    function getUserCount() external view returns (uint256);\\n\\n    function getUserAt(uint256 index) external view returns (address);\\n\\n    function getUserVaultIdAt(uint256 index) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xfa7b7f5d2fe5ff243867929f84ea43a4ddc4b397c2fbb0391a90a85c374523fe\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\n * @title Structures\\n * @dev This library defines various data structures used in the Mecenate platform.\\n */\\npragma solidity 0.8.19;\\n\\nlibrary Structures {\\n    enum PostStatus {\\n        Waiting,\\n        Proposed,\\n        Accepted,\\n        Submitted,\\n        Finalized,\\n        Punished,\\n        Revealed,\\n        Renounced\\n    }\\n    enum Tokens {\\n        NaN,\\n        MUSE,\\n        DAI\\n    }\\n    enum PostType {\\n        Text,\\n        Image,\\n        Video,\\n        Audio,\\n        File\\n    }\\n    enum PostDuration {\\n        OneDay,\\n        ThreeDays,\\n        OneWeek,\\n        TwoWeeks,\\n        OneMonth\\n    }\\n\\n    struct FeedSettings {\\n        uint256 punishmentRatio;\\n        uint256 postCount;\\n        address usersModuleContract;\\n        address factoryContract;\\n        address verifierContract;\\n        address vaultContract;\\n        address router;\\n        bytes encodedSymKey;\\n        bytes lastMessageForBuyer;\\n        bytes lastMessageForSeller;\\n        string version;\\n    }\\n\\n    struct FactorySettings {\\n        address treasuryContract;\\n        address usersModuleContract;\\n        address verifierContract;\\n        address vaultContract;\\n        address museToken;\\n        address daiToken;\\n        address wethToken;\\n        address router;\\n    }\\n\\n    /**\\n     * @dev Struct representing a post on the Mecenate platform.\\n     */\\n    struct Post {\\n        User creator;\\n        PostData postdata;\\n    }\\n\\n    /**\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\n     */\\n    struct PostData {\\n        PostSettings settings;\\n        PostEscrow escrow;\\n        PostEncryptedData data;\\n    }\\n\\n    /**\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\n     */\\n    struct PostEncryptedData {\\n        bytes encryptedData;\\n        bytes encryptedKey;\\n        bytes decryptedData;\\n    }\\n\\n    /**\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettings {\\n        PostStatus status;\\n        PostType postType;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n        uint256 duration;\\n        Tokens tokenId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the private settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettingPrivate {\\n        bytes vaultIdSeller;\\n        uint256 sellerTwitterId;\\n        uint256 sellerTelegramId;\\n        bytes vaultIdBuyer;\\n        uint256 buyerTwitterId;\\n        uint256 buyerTelegramId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\n     */\\n    struct PostEscrow {\\n        uint256 stake;\\n        uint256 payment;\\n        uint256 punishment;\\n        uint256 penalty;\\n    }\\n\\n    /**\\n     * @dev Struct representing a user on the Mecenate platform.\\n     */\\n    struct User {\\n        bytes32 vaultId;\\n    }\\n\\n    /**\\n     * @dev Struct representing a feed on the Mecenate platform.\\n     */\\n    struct Feed {\\n        address contractAddress;\\n        bytes32 operator;\\n        uint256 sellerStake;\\n        uint256 buyerStake;\\n        uint256 totalStake;\\n        uint256 postCount;\\n        uint256 paymentRequested;\\n        uint256 stakeRequested;\\n        PostStatus status;\\n        Tokens tokenId;\\n    }\\n\\n    /**\\n     * @dev Struct representing a bay request on the Mecenate platform.\\n     */\\n    struct BayRequest {\\n        bytes32 request;\\n        uint256 payment;\\n        uint256 stake;\\n        address postAddress;\\n        bool accepted;\\n        uint256 postCount;\\n        Tokens tokenId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the private settings of a bay request on the Mecenate platform.\\n     */\\n    struct BayRequestPrivate {\\n        bytes vaultIdSeller;\\n        bytes sellerResponse;\\n        bytes vaultIdBuyer;\\n        bytes buyerResponse;\\n        address buyerTo;\\n        bytes32 buyerNonce;\\n    }\\n}\\n\",\"keccak256\":\"0x98e685eac4c2cf3f590a6b0433ff0ae3c31c6a307e8b6f4d6cd6edea02550c4b\"}},\"version\":1}",
  "bytecode": "0x6080346100b957601f61065b38819003918201601f19168301916001600160401b038311848410176100be578084926080946040528339810103126100b957610047816100d4565b90610054602082016100d4565b61006c6060610065604085016100d4565b93016100d4565b9060018060a01b03928380928160018060a01b0319971687600054161760005516856001541617600155168360025416176002551690600354161760035560405161057290816100e98239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036100b95756fe6080604081815260048036101561001557600080fd5b600092833560e01c908163139e3c541461046257508063295b7b9a1461040f5780633f16a3bb146103bc57806377260151146103655763c59d48471461005a57600080fd5b3461036157827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610361578151610093816104b0565b8381528360a060209282848201528286820152826060820152826080820152015273ffffffffffffffffffffffffffffffffffffffff90816002541693805192828486817f067bd3b400000000000000000000000000000000000000000000000000000000998a82525afa938415610328578794610332575b50828160015416968684518099819382525afa90811561032857859688969596926102f2575b5083818954168451988980927fb5cb15f70000000000000000000000000000000000000000000000000000000082525afa9687156102e85788976102b5575b5060035416928251937f808fc20600000000000000000000000000000000000000000000000000000000855281858781845afa94851561027c578995610286575b5081845180977f91792d5b00000000000000000000000000000000000000000000000000000000825281845afa95861561027c578996610245575b5060c09850319560a08451610201816104b0565b8981528381019283528581019485526060810196875260808101978852019687528351978852519087015251908501525160608401525160808301525160a0820152f35b9095508181813d8311610275575b61025d81836104fb565b810103126102715760c098505194386101ed565b8880fd5b503d610253565b84513d8b823e3d90fd5b9094508181813d83116102ae575b61029e81836104fb565b81010312610271575193386101b2565b503d610294565b9096508381813d83116102e1575b6102cd81836104fb565b810103126102dd57519538610171565b8780fd5b503d6102c3565b83513d8a823e3d90fd5b945090508284813d8111610321575b61030b81836104fb565b8101031261031d578593519038610132565b8680fd5b503d610301565b82513d89823e3d90fd5b9093508281813d831161035a575b61034a81836104fb565b8101031261031d5751923861010c565b503d610340565b8280fd5b5050346103b857817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103b85760209073ffffffffffffffffffffffffffffffffffffffff600154169051908152f35b5080fd5b5050346103b857817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103b85760209073ffffffffffffffffffffffffffffffffffffffff600254169051908152f35b5050346103b857817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103b85760209073ffffffffffffffffffffffffffffffffffffffff600354169051908152f35b8490346103b857817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103b85773ffffffffffffffffffffffffffffffffffffffff60209254168152f35b60c0810190811067ffffffffffffffff8211176104cc57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176104cc5760405256fea26469706673582212202b98f1b4e9aec797c53bf129e447e8b6bef213a73f6519c0291984a5f445b5a964736f6c63430008130033",
  "deployedBytecode": "0x6080604081815260048036101561001557600080fd5b600092833560e01c908163139e3c541461046257508063295b7b9a1461040f5780633f16a3bb146103bc57806377260151146103655763c59d48471461005a57600080fd5b3461036157827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610361578151610093816104b0565b8381528360a060209282848201528286820152826060820152826080820152015273ffffffffffffffffffffffffffffffffffffffff90816002541693805192828486817f067bd3b400000000000000000000000000000000000000000000000000000000998a82525afa938415610328578794610332575b50828160015416968684518099819382525afa90811561032857859688969596926102f2575b5083818954168451988980927fb5cb15f70000000000000000000000000000000000000000000000000000000082525afa9687156102e85788976102b5575b5060035416928251937f808fc20600000000000000000000000000000000000000000000000000000000855281858781845afa94851561027c578995610286575b5081845180977f91792d5b00000000000000000000000000000000000000000000000000000000825281845afa95861561027c578996610245575b5060c09850319560a08451610201816104b0565b8981528381019283528581019485526060810196875260808101978852019687528351978852519087015251908501525160608401525160808301525160a0820152f35b9095508181813d8311610275575b61025d81836104fb565b810103126102715760c098505194386101ed565b8880fd5b503d610253565b84513d8b823e3d90fd5b9094508181813d83116102ae575b61029e81836104fb565b81010312610271575193386101b2565b503d610294565b9096508381813d83116102e1575b6102cd81836104fb565b810103126102dd57519538610171565b8780fd5b503d6102c3565b83513d8a823e3d90fd5b945090508284813d8111610321575b61030b81836104fb565b8101031261031d578593519038610132565b8680fd5b503d610301565b82513d89823e3d90fd5b9093508281813d831161035a575b61034a81836104fb565b8101031261031d5751923861010c565b503d610340565b8280fd5b5050346103b857817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103b85760209073ffffffffffffffffffffffffffffffffffffffff600154169051908152f35b5080fd5b5050346103b857817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103b85760209073ffffffffffffffffffffffffffffffffffffffff600254169051908152f35b5050346103b857817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103b85760209073ffffffffffffffffffffffffffffffffffffffff600354169051908152f35b8490346103b857817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103b85773ffffffffffffffffffffffffffffffffffffffff60209254168152f35b60c0810190811067ffffffffffffffff8211176104cc57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176104cc5760405256fea26469706673582212202b98f1b4e9aec797c53bf129e447e8b6bef213a73f6519c0291984a5f445b5a964736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4950,
        "contract": "contracts/MecenateStats.sol:MecenateStats",
        "label": "mecenateUsers",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IMecenateUsers)7324"
      },
      {
        "astId": 4953,
        "contract": "contracts/MecenateStats.sol:MecenateStats",
        "label": "mecenateFeedFactory",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IMecenateFeedFactory)7273"
      },
      {
        "astId": 4956,
        "contract": "contracts/MecenateStats.sol:MecenateStats",
        "label": "mecenateBay",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IMecenateBay)7140"
      },
      {
        "astId": 4959,
        "contract": "contracts/MecenateStats.sol:MecenateStats",
        "label": "mecenateTreasury",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IMecenateTreasury)7286"
      }
    ],
    "types": {
      "t_contract(IMecenateBay)7140": {
        "encoding": "inplace",
        "label": "contract IMecenateBay",
        "numberOfBytes": "20"
      },
      "t_contract(IMecenateFeedFactory)7273": {
        "encoding": "inplace",
        "label": "contract IMecenateFeedFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IMecenateTreasury)7286": {
        "encoding": "inplace",
        "label": "contract IMecenateTreasury",
        "numberOfBytes": "20"
      },
      "t_contract(IMecenateUsers)7324": {
        "encoding": "inplace",
        "label": "contract IMecenateUsers",
        "numberOfBytes": "20"
      }
    }
  }
}