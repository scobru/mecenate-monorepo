{
  "address": "0xD46961440a0F69bae6D3F6A33472f5802Ce4C8F6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usersMouduleContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_verifierContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "user",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "request",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "payment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stake",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "postAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "accepted",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "postCount",
              "type": "uint256"
            },
            {
              "internalType": "enum Structures.Tokens",
              "name": "tokenId",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct Structures.BayRequest",
          "name": "",
          "type": "tuple"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "RequestAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "user",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "request",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "payment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stake",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "postAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "accepted",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "postCount",
              "type": "uint256"
            },
            {
              "internalType": "enum Structures.Tokens",
              "name": "tokenId",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct Structures.BayRequest",
          "name": "",
          "type": "tuple"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "RequestCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_feed",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "sismoConnectResponse",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_nonce",
          "type": "bytes32"
        }
      ],
      "name": "acceptRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allRequests",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "request",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "postAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "accepted",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "postCount",
          "type": "uint256"
        },
        {
          "internalType": "enum Structures.Tokens",
          "name": "tokenId",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allRequestsPrivate",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "vaultIdSeller",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "sellerResponse",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "vaultIdBuyer",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "buyerResponse",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "buyerTo",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "buyerNonce",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_daiToken",
          "type": "address"
        }
      ],
      "name": "changeDaiToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_museToken",
          "type": "address"
        }
      ],
      "name": "changeMuseToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usersModule",
          "type": "address"
        }
      ],
      "name": "changeUsersModule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "changeVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        }
      ],
      "name": "changeVerifier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "request",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "payment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stake",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "postAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "accepted",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "postCount",
              "type": "uint256"
            },
            {
              "internalType": "enum Structures.Tokens",
              "name": "tokenId",
              "type": "uint8"
            }
          ],
          "internalType": "struct Structures.BayRequest",
          "name": "request",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "sismoConnectResponse",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_nonce",
          "type": "bytes32"
        }
      ],
      "name": "createRequest",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "request",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "payment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stake",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "postAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "accepted",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "postCount",
              "type": "uint256"
            },
            {
              "internalType": "enum Structures.Tokens",
              "name": "tokenId",
              "type": "uint8"
            }
          ],
          "internalType": "struct Structures.BayRequest",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daiToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_user",
          "type": "bytes32"
        }
      ],
      "name": "getRequestForAddress",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "request",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "payment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stake",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "postAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "accepted",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "postCount",
              "type": "uint256"
            },
            {
              "internalType": "enum Structures.Tokens",
              "name": "tokenId",
              "type": "uint8"
            }
          ],
          "internalType": "struct Structures.BayRequest[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequests",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "request",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "payment",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stake",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "postAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "accepted",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "postCount",
              "type": "uint256"
            },
            {
              "internalType": "enum Structures.Tokens",
              "name": "tokenId",
              "type": "uint8"
            }
          ],
          "internalType": "struct Structures.BayRequest[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "museToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "sismoConnectResponse",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_nonce",
          "type": "bytes32"
        }
      ],
      "name": "removeRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requests",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "request",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "payment",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "postAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "accepted",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "postCount",
          "type": "uint256"
        },
        {
          "internalType": "enum Structures.Tokens",
          "name": "tokenId",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usersMouduleContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifierContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xc753e6f488b8b713a287e099ebd13b9f221a70c6b213d2f3a733b054d615ced0",
  "receipt": {
    "to": null,
    "from": "0x8aA5F726d9F868a21a8bd748E2f1E43bA31eb670",
    "contractAddress": "0xD46961440a0F69bae6D3F6A33472f5802Ce4C8F6",
    "transactionIndex": 1,
    "gasUsed": "2972267",
    "logsBloom": "0x
    "blockHash": "0x0423b2092044c73726789863db299619837649bf54b91dc7c6b118767fad7ef6",
    "transactionHash": "0xc753e6f488b8b713a287e099ebd13b9f221a70c6b213d2f3a733b054d615ced0",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 10630666,
        "transactionHash": "0xc753e6f488b8b713a287e099ebd13b9f221a70c6b213d2f3a733b054d615ced0",
        "address": "0xD46961440a0F69bae6D3F6A33472f5802Ce4C8F6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008aa5f726d9f868a21a8bd748e2f1e43ba31eb670"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x0423b2092044c73726789863db299619837649bf54b91dc7c6b118767fad7ef6"
      }
    ],
    "blockNumber": 10630666,
    "cumulativeGasUsed": "3019120",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2A6D216e3053344C0FEeAED5e6503289Ade2Dab0",
    "0xA3Aa50BC3980B5a05dAe85C2A11f657d0c52Fb2f",
    "0xf2E39EE7c49fBc40f84495197C7B9EdaB929D4a2"
  ],
  "numDeployments": 1,
  "solcInputHash": "a9ff469b4dc9c1829628556d6121bf42",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usersMouduleContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_verifierContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"user\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"request\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"postAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"postCount\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct Structures.BayRequest\",\"name\":\"\",\"type\":\"tuple\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"RequestAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"user\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"request\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"postAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"postCount\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct Structures.BayRequest\",\"name\":\"\",\"type\":\"tuple\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"RequestCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feed\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"acceptRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allRequests\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"request\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"postAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"postCount\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allRequestsPrivate\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"vaultIdSeller\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sellerResponse\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"vaultIdBuyer\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"buyerResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"buyerTo\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"buyerNonce\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_daiToken\",\"type\":\"address\"}],\"name\":\"changeDaiToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_museToken\",\"type\":\"address\"}],\"name\":\"changeMuseToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usersModule\",\"type\":\"address\"}],\"name\":\"changeUsersModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"changeVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"}],\"name\":\"changeVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"request\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"postAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"postCount\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.BayRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"createRequest\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"request\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"postAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"postCount\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.BayRequest\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_user\",\"type\":\"bytes32\"}],\"name\":\"getRequestForAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"request\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"postAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"postCount\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.BayRequest[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequests\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"request\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"postAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"postCount\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.BayRequest[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"museToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"removeRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"request\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"postAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"postCount\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usersMouduleContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifierContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/layer/MecenateBay.sol\":\"MecenateBay\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/interfaces/IMecenateFeed.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"../library/Structures.sol\\\";\\r\\n\\r\\ninterface IMecenateFeed {\\r\\n    function getTotalStaked() external view returns (uint256);\\r\\n\\r\\n    function postCount() external view returns (uint256);\\r\\n\\r\\n    function acceptPost(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce,\\r\\n        Structures.Tokens,\\r\\n        uint256 _amount\\r\\n    ) external payable;\\r\\n\\r\\n    function getSellerStake() external view returns (uint256);\\r\\n\\r\\n    function getBuyerStake() external view returns (uint256);\\r\\n\\r\\n    function getPaymentRequested() external view returns (uint256);\\r\\n\\r\\n    function getStakeRequested() external view returns (uint256);\\r\\n\\r\\n    function getStatus() external view returns (Structures.PostStatus status);\\r\\n\\r\\n    function getTokenId() external view returns (Structures.Tokens tokenId);\\r\\n\\r\\n    function owner() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0x556b5270df23b66f64339009c79eb2e1c4fd60c9c9b98593aadc46ab76b5351e\"},\"contracts/interfaces/IMecenateUsers.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\nimport \\\"../library/Structures.sol\\\";\\r\\n\\r\\ninterface IMecenateUsers {\\r\\n    function checkifUserExist(bytes32 vaultId) external view returns (bool);\\r\\n\\r\\n    function getUserData(\\r\\n        address user\\r\\n    ) external view returns (Structures.User memory);\\r\\n\\r\\n    function getUserCount() external view returns (uint256);\\r\\n\\r\\n    function getUserAt(uint256 index) external view returns (address);\\r\\n\\r\\n    function getUserVaultIdAt(uint256 index) external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0xcd2b91f5bebd5c880ac937b181771a0a722a9a71ff93c783da3c63137179a042\"},\"contracts/interfaces/IMecenateVerifier.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateVerifier {\\r\\n    function sismoVerify(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) external view returns (bytes memory, uint256, uint256, bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x46733b039d06e66a1f438c4fcc490eea06ed1ba2ddff7d5a0059d9e799f03d8d\"},\"contracts/layer/MecenateBay.sol\":{\"content\":\"/**\\r\\n * @title MecenateBay\\r\\n * @dev This contract manages the creation and acceptance of requests for Mecenate feeds. It also verifies user identity using the Sismo protocol.\\r\\n */\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateVerifier.sol\\\";\\r\\nimport \\\"../library/Structures.sol\\\";\\r\\nimport \\\"../modules/FeedViewer.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateUsers.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\ncontract MecenateBay is Ownable, FeedViewer {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    Structures.BayRequest[] public allRequests;\\r\\n\\r\\n    Structures.BayRequestPrivate[] public allRequestsPrivate;\\r\\n\\r\\n    address public usersMouduleContract;\\r\\n\\r\\n    address public verifierContract;\\r\\n\\r\\n    address public vaultContract;\\r\\n\\r\\n    address public museToken;\\r\\n\\r\\n    address public daiToken;\\r\\n\\r\\n    mapping(bytes32 => Structures.BayRequest[]) public requests;\\r\\n\\r\\n    uint256 public contractCounter;\\r\\n\\r\\n    mapping(uint256 => bytes) private sismoResponseMapping;\\r\\n\\r\\n    event RequestCreated(\\r\\n        bytes32 indexed user,\\r\\n        Structures.BayRequest,\\r\\n        uint256 indexed index\\r\\n    );\\r\\n\\r\\n    event RequestAccepted(\\r\\n        bytes32 indexed user,\\r\\n        Structures.BayRequest,\\r\\n        uint256 indexed index\\r\\n    );\\r\\n\\r\\n    constructor(\\r\\n        address _usersMouduleContract,\\r\\n        address _verifierContract,\\r\\n        address _vaultContract\\r\\n    ) {\\r\\n        usersMouduleContract = _usersMouduleContract;\\r\\n        verifierContract = _verifierContract;\\r\\n        vaultContract = _vaultContract;\\r\\n    }\\r\\n\\r\\n    function changeMuseToken(address _museToken) external onlyOwner {\\r\\n        museToken = _museToken;\\r\\n    }\\r\\n\\r\\n    function changeDaiToken(address _daiToken) external onlyOwner {\\r\\n        daiToken = _daiToken;\\r\\n    }\\r\\n\\r\\n    function createRequest(\\r\\n        Structures.BayRequest memory request,\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) public payable returns (Structures.BayRequest memory) {\\r\\n        if (request.tokenId == Structures.Tokens.NaN) {\\r\\n            require(msg.value > 0, \\\"BAY:payment is not enough\\\");\\r\\n        } else if (request.tokenId == Structures.Tokens.DAI) {\\r\\n            IERC20(daiToken).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                request.payment\\r\\n            );\\r\\n        } else if (request.tokenId == Structures.Tokens.MUSE) {\\r\\n            IERC20(museToken).safeTransferFrom(\\r\\n                msg.sender,\\r\\n                address(this),\\r\\n                request.payment\\r\\n            );\\r\\n        }\\r\\n\\r\\n        require(request.payment > 0, \\\"BAY:payment is not enough\\\");\\r\\n\\r\\n        (bytes memory vaultId, , , ) = _sismoVerify(\\r\\n            sismoConnectResponse,\\r\\n            _to,\\r\\n            _nonce\\r\\n        );\\r\\n\\r\\n        bytes32 encryptedVaultId = keccak256(vaultId);\\r\\n\\r\\n        require(\\r\\n            IMecenateUsers(usersMouduleContract).checkifUserExist(\\r\\n                keccak256(vaultId)\\r\\n            ),\\r\\n            \\\"user does not exist\\\"\\r\\n        );\\r\\n\\r\\n        require(request.stake > 0, \\\"BAY:stake is not enough\\\");\\r\\n\\r\\n        require(request.payment == msg.value, \\\"BAY:payment is not enough\\\");\\r\\n\\r\\n        require(request.payment > 0, \\\"BAY:payment is not enough\\\");\\r\\n\\r\\n        requests[encryptedVaultId].push(request);\\r\\n\\r\\n        allRequests.push(request);\\r\\n\\r\\n        allRequestsPrivate.push(\\r\\n            Structures.BayRequestPrivate({\\r\\n                vaultIdSeller: \\\"0x00\\\",\\r\\n                sellerResponse: \\\"0x00\\\",\\r\\n                vaultIdBuyer: vaultId,\\r\\n                buyerResponse: sismoConnectResponse,\\r\\n                buyerTo: _to,\\r\\n                buyerNonce: _nonce\\r\\n            })\\r\\n        );\\r\\n\\r\\n        contractCounter++;\\r\\n\\r\\n        emit RequestCreated(encryptedVaultId, request, allRequests.length - 1);\\r\\n    }\\r\\n\\r\\n    function acceptRequest(\\r\\n        uint256 index,\\r\\n        address _feed,\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) public {\\r\\n        (bytes memory vaultId, , , ) = _sismoVerify(\\r\\n            sismoConnectResponse,\\r\\n            _to,\\r\\n            _nonce\\r\\n        );\\r\\n\\r\\n        bytes32 encryptedVaultId = keccak256(vaultId);\\r\\n\\r\\n        Structures.Feed memory feed = _getFeedInfo(_feed);\\r\\n\\r\\n        require(\\r\\n            allRequests[index].payment >= feed.paymentRequested,\\r\\n            \\\"BAY:payment is not the same of the feed\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            feed.stakeRequested >= allRequests[index].stake,\\r\\n            \\\"BAY:stake is not the same of the feed\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            IMecenateUsers(usersMouduleContract).checkifUserExist(\\r\\n                encryptedVaultId\\r\\n            ),\\r\\n            \\\"BAY:user does not exist\\\"\\r\\n        );\\r\\n\\r\\n        allRequestsPrivate.push(\\r\\n            Structures.BayRequestPrivate({\\r\\n                vaultIdSeller: vaultId,\\r\\n                sellerResponse: sismoConnectResponse,\\r\\n                vaultIdBuyer: allRequestsPrivate[index].vaultIdBuyer,\\r\\n                buyerResponse: allRequestsPrivate[index].buyerResponse,\\r\\n                buyerTo: allRequestsPrivate[index].buyerTo,\\r\\n                buyerNonce: allRequestsPrivate[index].buyerNonce\\r\\n            })\\r\\n        );\\r\\n\\r\\n        if (allRequests[index].tokenId != Structures.Tokens.NaN) {\\r\\n            if (allRequests[index].tokenId == Structures.Tokens.DAI) {\\r\\n                IERC20(daiToken).approve(\\r\\n                    msg.sender,\\r\\n                    allRequests[index].payment\\r\\n                );\\r\\n            } else if (allRequests[index].tokenId == Structures.Tokens.MUSE) {\\r\\n                IERC20(museToken).approve(\\r\\n                    msg.sender,\\r\\n                    allRequests[index].payment\\r\\n                );\\r\\n            }\\r\\n\\r\\n            IMecenateFeed(_feed).acceptPost{value: 0}(\\r\\n                allRequestsPrivate[index].buyerResponse,\\r\\n                allRequestsPrivate[index].buyerTo,\\r\\n                allRequestsPrivate[index].buyerNonce,\\r\\n                allRequests[index].tokenId,\\r\\n                allRequests[index].payment\\r\\n            );\\r\\n        } else {\\r\\n            IMecenateFeed(_feed).acceptPost{value: allRequests[index].payment}(\\r\\n                allRequestsPrivate[index].buyerResponse,\\r\\n                allRequestsPrivate[index].buyerTo,\\r\\n                allRequestsPrivate[index].buyerNonce,\\r\\n                allRequests[index].tokenId,\\r\\n                allRequests[index].payment\\r\\n            );\\r\\n        }\\r\\n\\r\\n        allRequests[index].accepted = true;\\r\\n\\r\\n        allRequests[index].postAddress = _feed;\\r\\n\\r\\n        allRequests[index].postCount = feed.postCount;\\r\\n\\r\\n        emit RequestAccepted(encryptedVaultId, allRequests[index], index);\\r\\n    }\\r\\n\\r\\n    function _sismoVerify(\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) internal view returns (bytes memory, uint256, uint256, bytes memory) {\\r\\n        (\\r\\n            bytes memory vaultId,\\r\\n            uint256 twitterId,\\r\\n            uint256 telegramId,\\r\\n            bytes memory signedMessage\\r\\n        ) = IMecenateVerifier(verifierContract).sismoVerify(\\r\\n                sismoConnectResponse,\\r\\n                _to,\\r\\n                _nonce\\r\\n            );\\r\\n\\r\\n        (address to, bytes32 nonce) = abi.decode(\\r\\n            signedMessage,\\r\\n            (address, bytes32)\\r\\n        );\\r\\n\\r\\n        require(_nonce == nonce, \\\"Not Same Nonce\\\");\\r\\n\\r\\n        return (vaultId, twitterId, telegramId, signedMessage);\\r\\n    }\\r\\n\\r\\n    function getRequests()\\r\\n        public\\r\\n        view\\r\\n        returns (Structures.BayRequest[] memory)\\r\\n    {\\r\\n        return allRequests;\\r\\n    }\\r\\n\\r\\n    function getRequestForAddress(\\r\\n        bytes32 _user\\r\\n    ) public view returns (Structures.BayRequest[] memory) {\\r\\n        return requests[_user];\\r\\n    }\\r\\n\\r\\n    // remov\\u00e9the request and refund the user delete the array and move the last element to the index\\r\\n    function removeRequest(\\r\\n        uint256 index,\\r\\n        bytes memory sismoConnectResponse,\\r\\n        address _to,\\r\\n        bytes32 _nonce\\r\\n    ) public {\\r\\n        (\\r\\n            bytes memory vaultId,\\r\\n            uint256 twitterId,\\r\\n            uint256 telegramId,\\r\\n            bytes memory signedMessage\\r\\n        ) = _sismoVerify(sismoConnectResponse, _to, _nonce);\\r\\n\\r\\n        bytes32 encryptedVaultId = keccak256(vaultId);\\r\\n\\r\\n        require(\\r\\n            encryptedVaultId ==\\r\\n                keccak256(allRequestsPrivate[index].vaultIdBuyer),\\r\\n            \\\"BAY:you are not the buyer\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            allRequests[index].accepted == false,\\r\\n            \\\"BAY:request is already accepted\\\"\\r\\n        );\\r\\n\\r\\n        Structures.BayRequest memory requestToRemove = allRequests[index];\\r\\n\\r\\n        //  send eth with data to the vaultctx\\r\\n        (bool _result, ) = vaultContract.call{value: requestToRemove.payment}(\\r\\n            sismoConnectResponse\\r\\n        );\\r\\n\\r\\n        require(_result, \\\"BAY:Vault call failed\\\");\\r\\n\\r\\n        // Remove from allRequests array\\r\\n        uint256 lastIndex = allRequests.length - 1;\\r\\n        if (index < lastIndex) {\\r\\n            allRequests[index] = allRequests[lastIndex];\\r\\n        }\\r\\n        allRequests.pop();\\r\\n\\r\\n        // Remove from allRequestsPrivate array\\r\\n        uint256 lastIndexPrivate = allRequestsPrivate.length - 1;\\r\\n        if (index < lastIndexPrivate) {\\r\\n            allRequestsPrivate[index] = allRequestsPrivate[lastIndexPrivate];\\r\\n        }\\r\\n        allRequestsPrivate.pop();\\r\\n\\r\\n        // Remove from requests mapping\\r\\n        for (uint256 i = 0; i < requests[encryptedVaultId].length; i++) {\\r\\n            if (\\r\\n                requests[encryptedVaultId][i].payment ==\\r\\n                requestToRemove.payment &&\\r\\n                requests[encryptedVaultId][i].stake == requestToRemove.stake &&\\r\\n                requests[encryptedVaultId][i].postAddress ==\\r\\n                requestToRemove.postAddress &&\\r\\n                requests[encryptedVaultId][i].postCount ==\\r\\n                requestToRemove.postCount\\r\\n            ) {\\r\\n                uint256 lastIndexSender = requests[encryptedVaultId].length - 1;\\r\\n                if (i < lastIndexSender) {\\r\\n                    requests[encryptedVaultId][i] = requests[encryptedVaultId][\\r\\n                        lastIndexSender\\r\\n                    ];\\r\\n                }\\r\\n                requests[encryptedVaultId].pop();\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function changeVault(address _vault) external onlyOwner {\\r\\n        vaultContract = _vault;\\r\\n    }\\r\\n\\r\\n    function changeVerifier(address _verifier) external onlyOwner {\\r\\n        verifierContract = _verifier;\\r\\n    }\\r\\n\\r\\n    function changeUsersModule(address _usersModule) external onlyOwner {\\r\\n        usersMouduleContract = _usersModule;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x2ae38fc6754bce37239a94727765398139ba013402c0076a6ff644513653fcff\",\"license\":\"MIT\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\r\\n * @title Structures\\r\\n * @dev This library defines various data structures used in the Mecenate platform.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nlibrary Structures {\\r\\n    enum PostStatus {\\r\\n        Waiting,\\r\\n        Proposed,\\r\\n        Accepted,\\r\\n        Submitted,\\r\\n        Finalized,\\r\\n        Punished,\\r\\n        Revealed,\\r\\n        Renounced\\r\\n    }\\r\\n    enum Tokens {\\r\\n        NaN,\\r\\n        MUSE,\\r\\n        DAI\\r\\n    }\\r\\n    enum PostType {\\r\\n        Text,\\r\\n        Image,\\r\\n        Video,\\r\\n        Audio,\\r\\n        File\\r\\n    }\\r\\n    enum PostDuration {\\r\\n        OneDay,\\r\\n        ThreeDays,\\r\\n        OneWeek,\\r\\n        TwoWeeks,\\r\\n        OneMonth\\r\\n    }\\r\\n\\r\\n    struct FeedSettings {\\r\\n        uint256 punishmentRatio;\\r\\n        uint256 postCount;\\r\\n        address usersModuleContract;\\r\\n        address factoryContract;\\r\\n        address verifierContract;\\r\\n        address vaultContract;\\r\\n        address router;\\r\\n        bytes encodedSymKey;\\r\\n        bytes lastMessageForBuyer;\\r\\n        bytes lastMessageForSeller;\\r\\n        string version;\\r\\n    }\\r\\n\\r\\n    struct FactorySettings {\\r\\n        address treasuryContract;\\r\\n        address usersModuleContract;\\r\\n        address verifierContract;\\r\\n        address vaultContract;\\r\\n        address museToken;\\r\\n        address daiToken;\\r\\n        address wethToken;\\r\\n        address router;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a post on the Mecenate platform.\\r\\n     */\\r\\n    struct Post {\\r\\n        User creator;\\r\\n        PostData postdata;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostData {\\r\\n        PostSettings settings;\\r\\n        PostEscrow escrow;\\r\\n        PostEncryptedData data;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostEncryptedData {\\r\\n        bytes encryptedData;\\r\\n        bytes encryptedKey;\\r\\n        bytes decryptedData;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostSettings {\\r\\n        PostStatus status;\\r\\n        PostType postType;\\r\\n        uint256 creationTimeStamp;\\r\\n        uint256 endTimeStamp;\\r\\n        uint256 duration;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the private settings of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostSettingPrivate {\\r\\n        bytes vaultIdSeller;\\r\\n        uint256 sellerTwitterId;\\r\\n        uint256 sellerTelegramId;\\r\\n        bytes vaultIdBuyer;\\r\\n        uint256 buyerTwitterId;\\r\\n        uint256 buyerTelegramId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\r\\n     */\\r\\n    struct PostEscrow {\\r\\n        uint256 stake;\\r\\n        uint256 payment;\\r\\n        uint256 punishment;\\r\\n        uint256 penalty;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a user on the Mecenate platform.\\r\\n     */\\r\\n    struct User {\\r\\n        bytes32 vaultId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a feed on the Mecenate platform.\\r\\n     */\\r\\n    struct Feed {\\r\\n        address contractAddress;\\r\\n        bytes32 operator;\\r\\n        uint256 sellerStake;\\r\\n        uint256 buyerStake;\\r\\n        uint256 totalStake;\\r\\n        uint256 postCount;\\r\\n        uint256 paymentRequested;\\r\\n        uint256 stakeRequested;\\r\\n        PostStatus status;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing a bay request on the Mecenate platform.\\r\\n     */\\r\\n    struct BayRequest {\\r\\n        bytes32 request;\\r\\n        uint256 payment;\\r\\n        uint256 stake;\\r\\n        address postAddress;\\r\\n        bool accepted;\\r\\n        uint256 postCount;\\r\\n        Tokens tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Struct representing the private settings of a bay request on the Mecenate platform.\\r\\n     */\\r\\n    struct BayRequestPrivate {\\r\\n        bytes vaultIdSeller;\\r\\n        bytes sellerResponse;\\r\\n        bytes vaultIdBuyer;\\r\\n        bytes buyerResponse;\\r\\n        address buyerTo;\\r\\n        bytes32 buyerNonce;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7b6ab8775753a390fe793555975dc63a401b2c10ad09b949c5588177ca6c9f33\"},\"contracts/modules/FeedViewer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"../library/Structures.sol\\\";\\r\\nimport \\\"../interfaces/IMecenateFeed.sol\\\";\\r\\n\\r\\ncontract FeedViewer {\\r\\n    function _getFeedInfo(\\r\\n        address feed\\r\\n    ) internal view returns (Structures.Feed memory) {\\r\\n        Structures.Feed memory f;\\r\\n\\r\\n        IMecenateFeed mecenateFeed = IMecenateFeed(feed);\\r\\n\\r\\n        f.contractAddress = feed;\\r\\n        f.operator = mecenateFeed.owner();\\r\\n        f.sellerStake = mecenateFeed.getSellerStake();\\r\\n        f.buyerStake = mecenateFeed.getBuyerStake();\\r\\n        f.totalStake = mecenateFeed.getTotalStaked();\\r\\n        f.postCount = mecenateFeed.postCount();\\r\\n        f.paymentRequested = mecenateFeed.getPaymentRequested();\\r\\n        f.stakeRequested = mecenateFeed.getStakeRequested();\\r\\n        f.status = mecenateFeed.getStatus();\\r\\n        f.tokenId = mecenateFeed.getTokenId();\\r\\n\\r\\n        return f;\\r\\n    }\\r\\n\\r\\n    function _getFeedsInfo(\\r\\n        address[] memory _feeds\\r\\n    ) internal view returns (Structures.Feed[] memory) {\\r\\n        uint256 len = _feeds.length;\\r\\n        Structures.Feed[] memory f = new Structures.Feed[](len);\\r\\n\\r\\n        for (uint256 i = 0; i < len; i++) {\\r\\n            f[i] = _getFeedInfo(_feeds[i]);\\r\\n        }\\r\\n\\r\\n        return f;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x52a1bb08cb33e895e99db8c2a32889e1ba6fdfd20c87b0c1d7ef1b6846910285\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608034620000e757601f6200344c38819003918201601f19168301916001600160401b03831184841017620000ec57808492606094604052833981010312620000e7576200004d8162000102565b620000696040620000616020850162000102565b930162000102565b600080546001600160a01b03198082163390811784556040519691956001600160a01b0395948694859391908416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a31685600354161760035516836004541617600455169060055416176005556133349081620001188239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620000e75756fe608080604052600436101561001d575b50361561001b57600080fd5b005b600090813560e01c908163067bd3b4146125bd575080630f3cd888146125715780632274346b1461254a578063346207b61461158357806360e232a914611537578063715018a6146114d05780638416e3041461140a5780638813ce12146113605780638da5cb5b1461133a5780639655e6d8146113045780639791003614610e065780639bf4ec2f14610d9b5780639c673fe514610d4f578063a357427d14610caf578063b041377014610c88578063be22f54614610c61578063c4bb77d014610c15578063c81ac6461461029b578063cf04fb941461024f578063cf69568814610228578063f2fde38b146101415763f77800e50361000f573461013e578060031936011261013e5760206001600160a01b0360065416604051908152f35b80fd5b503461013e57602060031936011261013e5761015b6125d9565b6101636129cb565b6001600160a01b038091169081156101be576000548273ffffffffffffffffffffffffffffffffffffffff19821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b608460405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b503461013e578060031936011261013e5760206001600160a01b0360045416604051908152f35b503461013e57602060031936011261013e576001600160a01b036102716125d9565b6102796129cb565b1673ffffffffffffffffffffffffffffffffffffffff19600454161760045580f35b5060031936016101408112610c115760e01361013e57604051906102be82612635565b6004358252602435602083015260443560408301526102db6125ef565b60608301526084358015158103610c1157608083015260a43560a083015260c4356003811015610c115760c083015260e43567ffffffffffffffff8111610c115761032a9036906004016126ac565b906001600160a01b0361010435166101043503610c0c576040519161034e83612635565b8183528160208401528160408401528160608401528160808401528160a08401528160c084015260c08401516003811015610bf857610b8d57610392341515612a23565b6103a160208501511515612a23565b6103b2610124356101043583612eda565b5050508051602082012091602460206001600160a01b0360035416604051928380927f38aad32c0000000000000000000000000000000000000000000000000000000082528860048301525afa908115610b82578591610b53575b5015610b0f57604086015115610acb5761042c60208701513414612a23565b61043b60208701511515612a23565b828452600860205260408420805468010000000000000000811015610918576104699160018201815561277f565b610a9f578651815560208701516001820155604087015160028201556105056001600160a01b03606089015116600383019073ffffffffffffffffffffffffffffffffffffffff19825416178155608089015115157fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff74ff0000000000000000000000000000000000000000835492151560a01b169116179055565b60a0870151600482015560c08701516003811015610ab55760056105299201612a86565b600154680100000000000000008110156109185780600161054d92016001556126f3565b610a9f578651815560208701516001820155604087015160028201556105e8600382016001600160a01b0360608a01511673ffffffffffffffffffffffffffffffffffffffff19825416178155608089015115157fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff74ff0000000000000000000000000000000000000000835492151560a01b169116179055565b60a0870151600482015560c08701516003811015610ab557600561060c9201612a86565b6040519161061983612605565b610621612abd565b835261062b612abd565b6020840152604083015260608201526001600160a01b03610104351660808201526101243560a082015260025468010000000000000000811015610918578060016106799201600255612744565b919091610a9f57805180519067ffffffffffffffff82116109185781906106aa826106a4875461279b565b87612b0d565b602090601f8311600114610a3357600092610a28575b50506000198260011b9260031b1c19161782555b602081015180519067ffffffffffffffff8211610918578190610707826106fe600188015461279b565b60018801612b0d565b602090601f83116001146109b6576000926109ab575b50506000198260011b9260031b1c19161760018301555b604081015180519067ffffffffffffffff82116109185781906107678261075e600288015461279b565b60028801612b0d565b602090601f83116001146109395760009261092e575b50506000198260011b9260031b1c19161760028301555b60038201606082015180519067ffffffffffffffff8211610918576107c3826107bd855461279b565b85612b0d565b602090601f83116001146108aa57918060a094926005969460009261089f575b50506000198260011b9260031b1c19161790555b600484016001600160a01b0360808301511673ffffffffffffffffffffffffffffffffffffffff198254161790550151910155610835600954612b52565b60095560015491600019830192831161088b57507fe9a2b6f068c8e156e02b1fa5a51213d9f1811ceb25dc05211a1df6b0f0f5110260e0809561087b60405180926128ef565ba361088960405180926128ef565bf35b80634e487b7160e01b602492526011600452fd5b0151905038806107e3565b90601f198316918460005260206000209260005b81811061090057509260019285926005989660a09896106108e7575b505050811b0190556107f7565b015160001960f88460031b161c191690553880806108da565b929360206001819287860151815501950193016108be565b634e487b7160e01b600052604160045260246000fd5b01519050388061077d565b9250600285016000526020600020906000935b601f1984168510610990576001945083601f19811610610977575b505050811b016002830155610794565b015160001960f88460031b161c19169055388080610967565b8181015183556020948501946001909301929091019061094c565b01519050388061071d565b9250600185016000526020600020906000935b601f1984168510610a0d576001945083601f198116106109f4575b505050811b016001830155610734565b015160001960f88460031b161c191690553880806109e4565b818101518355602094850194600190930192909101906109c9565b0151905038806106c0565b9250846000526020600020906000935b601f1984168510610a84576001945083601f19811610610a6b575b505050811b0182556106d4565b015160001960f88460031b161c19169055388080610a5e565b81810151835560209485019460019093019290910190610a43565b634e487b7160e01b600052600060045260246000fd5b634e487b7160e01b600052602160045260246000fd5b606460405162461bcd60e51b815260206004820152601760248201527f4241593a7374616b65206973206e6f7420656e6f7567680000000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601360248201527f7573657220646f6573206e6f74206578697374000000000000000000000000006044820152fd5b610b75915060203d602011610b7b575b610b6d818361266d565b810190612a6e565b3861040d565b503d610b63565b6040513d87823e3d90fd5b60c08401516003811015610bf857600203610bc557610bc06001600160a01b036007541660208601519030903390612b77565b610392565b60c08401516003811015610bf85760010361039257610bc06001600160a01b036006541660208601519030903390612b77565b602483634e487b7160e01b81526021600452fd5b600080fd5b5080fd5b503461013e57602060031936011261013e576001600160a01b03610c376125d9565b610c3f6129cb565b1673ffffffffffffffffffffffffffffffffffffffff19600354161760035580f35b503461013e578060031936011261013e5760206001600160a01b0360075416604051908152f35b503461013e578060031936011261013e5760206001600160a01b0360035416604051908152f35b503461013e57602080600319360112610c1157600435825260088152604082209182549067ffffffffffffffff8211610d3b579260405192610cf6818460051b018561266d565b82845280840191855280852094915b838310610d1e5760405180610d1a8782612942565b0390f35b600682600192610d2d89613051565b815201960192019194610d05565b80634e487b7160e01b602492526041600452fd5b503461013e57602060031936011261013e576001600160a01b03610d716125d9565b610d796129cb565b1673ffffffffffffffffffffffffffffffffffffffff19600754161760075580f35b503461013e57602060031936011261013e57600435600154811015610c1157610dc3906126f3565b508054610d1a600183015491600284015493600381015460ff6005600484015493015416926040519687966001600160a01b0360ff8560a01c169416928861298a565b503461013e57608060031936011261013e5760043560243567ffffffffffffffff811161130057610e3b9036906004016126ac565b6044356001600160a01b0381168103610c0c57610e5c906064359083612eda565b5050506020815191012091610e7c6002610e7583612744565b50016127d5565b6020815191012083036112bc5760ff6003610e96836126f3565b50015460a01c16611278578380610eb5610eaf846126f3565b50613051565b936001600160a01b03600554166020860151602083519301915af1610ed8612cd0565b50156112345760015460001981019081116110bb57808210611218575b50600154801561106c5760001901610f0c816126f3565b610a9f576005816000809355826001820155826002820155826003820155826004820155015560015560025460001981019081116110bb5780821061117f575b5050600254801561116b57610f646000198201612744565b61115857906000600583610f7a60001995613257565b610f8660018201613257565b610f9260028201613257565b610f9e60038201613257565b876004820155015501600255825b82845260088060205260408520805483101561115057610fce8360019261277f565b5001546020840151148061112b575b806110f4575b806110cf575b610ffc5750610ff790612b52565b610fac565b9280925084528260205260408420549060001982019182116110bb57818110611082575b50508252602052604081208054801561106c576000190190611042828261277f565b610a9f57600581600080935582600182015582600282015582600382015582600482015501555580f35b634e487b7160e01b600052603160045260246000fd5b6110ae61109c6110b493858852866020526040882061277f565b5091848752856020526040872061277f565b906130b5565b3880611020565b602485634e487b7160e01b81526011600452fd5b508385528060205260046110e6836040882061277f565b50015460a084015114610fe9565b50838552806020526001600160a01b036003611113846040892061277f565b500154166001600160a01b0360608501511614610fe3565b50838552806020526002611142836040882061277f565b500154604084015114610fdd565b505050505080f35b602485634e487b7160e01b815280600452fd5b602484634e487b7160e01b81526031600452fd5b61118b61119291612744565b5091612744565b91909161115857818114610f4c576005816111ae829385613179565b6111be6001820160018601613179565b6111ce6002820160028601613179565b6111de6003820160038601613179565b600484016001600160a01b0360048301541673ffffffffffffffffffffffffffffffffffffffff1982541617905501549101553880610f4c565b61122461122e916126f3565b506110ae836126f3565b38610ef5565b606460405162461bcd60e51b815260206004820152601560248201527f4241593a5661756c742063616c6c206661696c656400000000000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601f60248201527f4241593a7265717565737420697320616c7265616479206163636570746564006044820152fd5b606460405162461bcd60e51b815260206004820152601960248201527f4241593a796f7520617265206e6f7420746865206275796572000000000000006044820152fd5b8280fd5b503461013e57604060031936011261013e576024356004358252600860205260408220805482101561130057610dc3925061277f565b503461013e578060031936011261013e576001600160a01b036020915416604051908152f35b503461013e578060031936011261013e57600190815467ffffffffffffffff81116113f65760405191602061139a818460051b018561266d565b8284528482527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf68185015b8484106113da5760405180610d1a8882612942565b60068388926113e885613051565b8152019201930192906113c5565b602482634e487b7160e01b81526041600452fd5b503461013e57602060031936011261013e576004359060025482101561013e5761149761143683612744565b50611440816127d5565b9061144d600182016127d5565b6114c161145c600284016127d5565b6114b361146b600386016127d5565b916114a560056001600160a01b0360048901541697015495604051998a9960c08b5260c08b01906128bd565b9089820360208b01526128bd565b9087820360408901526128bd565b9085820360608701526128bd565b91608084015260a08301520390f35b503461013e578060031936011261013e576114e96129cb565b60006001600160a01b03815473ffffffffffffffffffffffffffffffffffffffff1981168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b503461013e57602060031936011261013e576001600160a01b036115596125d9565b6115616129cb565b1673ffffffffffffffffffffffffffffffffffffffff19600554161760055580f35b503461013e5760a060031936011261013e576024356001600160a01b0381168103610c115760443567ffffffffffffffff8111611300576115c89036906004016126ac565b906115de6115d46125ef565b6084359084612eda565b5050509182516020840120926115f26132a0565b506115fb6132a0565b916001600160a01b03841683526040517f8da5cb5b0000000000000000000000000000000000000000000000000000000081526020816004816001600160a01b0389165afa90811561227d578791612518575b5060208401526040517f5c63ed690000000000000000000000000000000000000000000000000000000081526020816004816001600160a01b0389165afa90811561227d5787916124e6575b5060408401526040517f4c38d8770000000000000000000000000000000000000000000000000000000081526020816004816001600160a01b0389165afa90811561227d5787916124b4575b5060608401526040517f0917e7760000000000000000000000000000000000000000000000000000000081526020816004816001600160a01b0389165afa90811561227d578791612482575b5060808401526040517f17906c2e0000000000000000000000000000000000000000000000000000000081526020816004816001600160a01b0389165afa90811561227d578791612450575b5060a08401526040517fd24e0c870000000000000000000000000000000000000000000000000000000081526020816004816001600160a01b0389165afa90811561227d57879161241e575b5060c08401526040517ffaeb5e170000000000000000000000000000000000000000000000000000000081526020816004816001600160a01b0389165afa90811561227d5787916123ec575b5060e08401526040517f4e69d5600000000000000000000000000000000000000000000000000000000081526020816004816001600160a01b0389165afa90811561227d5787916123b1575b50600881101561239d576101008401526040517f010a38f50000000000000000000000000000000000000000000000000000000081526020816004816001600160a01b0389165afa801561227d57879061235c575b6118c691506101208501613045565b60016118d36004356126f3565b50015460c0840151116122f25760e083015160026118f26004356126f3565b5001541161228857602460206001600160a01b0360035416604051928380927f38aad32c0000000000000000000000000000000000000000000000000000000082528a60048301525afa90811561227d57879161225e575b501561221a5761195b600435612744565b506119c1600361196c600435612744565b506119b660026001600160a01b0360046119868135612744565b50015416956005611998600435612744565b50015497604051996119a98b612605565b8a5260208a0152016127d5565b6040870152016127d5565b6060840152608083015260a082015260025468010000000000000000811015612206578060016119f49201600255612744565b9190916121f357805180519067ffffffffffffffff8211612077578190611a1f826106a4875461279b565b602090601f831160011461218a57899261217f575b50506000198260011b9260031b1c19161782555b602081015180519067ffffffffffffffff8211612077578190611a72826106fe600188015461279b565b602090601f8311600114612110578992612105575b50506000198260011b9260031b1c19161760018301555b604081015180519067ffffffffffffffff8211612077578190611ac88261075e600288015461279b565b602090601f831160011461209657899261208b575b50506000198260011b9260031b1c19161760028301555b606081015180519067ffffffffffffffff821161207757611b2582611b1c600387015461279b565b60038701612b0d565b602090601f83116001146120055791806005949260a0948b92611ffa575b50506000198260011b9260031b1c19161760038501555b600484016001600160a01b0360808301511673ffffffffffffffffffffffffffffffffffffffff19825416179055015191015560ff6005611b9c6004356126f3565b500154166003811015611ef15715611f055760ff6005611bbd6004356126f3565b500154166003811015611ef157600203611e7b57836020611c366001600160a01b03600754166001611bf06004356126f3565b5001546040517f095ea7b3000000000000000000000000000000000000000000000000000000008152336004820152602481019190915293849283919082906044820190565b03925af18015610b8257611e5c575b505b83611c53600435612744565b506001600160a01b036004611c688135612744565b50015416906005611c7a600435612744565b5001549060ff6005611c8d6004356126f3565b50015416906001611c9f6004356126f3565b500154926001600160a01b0388163b15611e58578593600393611cf19260405197889687967f200f852c0000000000000000000000000000000000000000000000000000000088520160048701612d9c565b0381836001600160a01b0389165af18015611e4d57611e35575b505060a0915b6003611d1e6004356126f3565b5001740100000000000000000000000000000000000000007fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff8254161790556001600160a01b036003611d726004356126f3565b5001911673ffffffffffffffffffffffffffffffffffffffff1982541617905501516004611da081356126f3565b500155611dae6004356126f3565b5090611e0a60ff6005604051948054865260018101546020870152600281015460408701528260038201546001600160a01b038116606089015260a01c1615156080870152600481015460a087015201541660c08401906128e2565b7f83c2cca80e93944a5016ae3e3f51bd5e9275d6459dfdbfdad3fe85d918d92f3360e060043593a380f35b611e3e90612621565b611e49578338611d0b565b8380fd5b6040513d84823e3d90fd5b8580fd5b611e749060203d602011610b7b57610b6d818361266d565b5038611c45565b60ff6005611e8a6004356126f3565b500154166003811015611ef157600103611c4757836020611ebd6001600160a01b03600654166001611bf06004356126f3565b03925af18015610b8257611ed2575b50611c47565b611eea9060203d602011610b7b57610b6d818361266d565b5038611ecc565b602485634e487b7160e01b81526021600452fd5b906001611f136004356126f3565b50015484611f22600435612744565b50916001600160a01b036004611f388135612744565b50015416906005611f4a600435612744565b5001549360ff6005611f5d6004356126f3565b50015416906001611f6f6004356126f3565b500154916001600160a01b0388163b15611e5857600392611fc191604051988997889687967f200f852c0000000000000000000000000000000000000000000000000000000088520160048701612d9c565b03916001600160a01b0387165af18015610b8257611fe4575b509060a091611d11565b93611ff260a0939295612621565b939091611fda565b015190503880611b43565b906003850189526020892091895b601f198516811061205f5750926005949260019260a09583601f19811610612046575b505050811b016003850155611b5a565b015160001960f88460031b161c19169055388080612036565b91926020600181928685015181550194019201612013565b602488634e487b7160e01b81526041600452fd5b015190503880611add565b9250600285018952602089209089935b601f19841685106120ea576001945083601f198116106120d1575b505050811b016002830155611af4565b015160001960f88460031b161c191690553880806120c1565b818101518355602094850194600190930192909101906120a6565b015190503880611a87565b9250600185018952602089209089935b601f1984168510612164576001945083601f1981161061214b575b505050811b016001830155611a9e565b015160001960f88460031b161c1916905538808061213b565b81810151835560209485019460019093019290910190612120565b015190503880611a34565b9250848952602089209089935b601f19841685106121d8576001945083601f198116106121bf575b505050811b018255611a48565b015160001960f88460031b161c191690553880806121b2565b81810151835560209485019460019093019290910190612197565b602486634e487b7160e01b815280600452fd5b602486634e487b7160e01b81526041600452fd5b606460405162461bcd60e51b815260206004820152601760248201527f4241593a7573657220646f6573206e6f742065786973740000000000000000006044820152fd5b612277915060203d602011610b7b57610b6d818361266d565b3861194a565b6040513d89823e3d90fd5b608460405162461bcd60e51b815260206004820152602560248201527f4241593a7374616b65206973206e6f74207468652073616d65206f662074686560448201527f20666565640000000000000000000000000000000000000000000000000000006064820152fd5b608460405162461bcd60e51b815260206004820152602760248201527f4241593a7061796d656e74206973206e6f74207468652073616d65206f66207460448201527f68652066656564000000000000000000000000000000000000000000000000006064820152fd5b506020813d602011612395575b816123766020938361266d565b8101031261239157516003811015612391576118c6906118b7565b8680fd5b3d9150612369565b602487634e487b7160e01b81526021600452fd5b90506020813d6020116123e4575b816123cc6020938361266d565b81010312612391575160088110156123915738611862565b3d91506123bf565b90506020813d602011612416575b816124076020938361266d565b81010312612391575138611816565b3d91506123fa565b90506020813d602011612448575b816124396020938361266d565b810103126123915751386117ca565b3d915061242c565b90506020813d60201161247a575b8161246b6020938361266d565b8101031261239157513861177e565b3d915061245e565b90506020813d6020116124ac575b8161249d6020938361266d565b81010312612391575138611732565b3d9150612490565b90506020813d6020116124de575b816124cf6020938361266d565b810103126123915751386116e6565b3d91506124c2565b90506020813d602011612510575b816125016020938361266d565b8101031261239157513861169a565b3d91506124f4565b90506020813d602011612542575b816125336020938361266d565b8101031261239157513861164e565b3d9150612526565b503461013e578060031936011261013e5760206001600160a01b0360055416604051908152f35b503461013e57602060031936011261013e576001600160a01b036125936125d9565b61259b6129cb565b1673ffffffffffffffffffffffffffffffffffffffff19600654161760065580f35b905034610c115781600319360112610c11576020906009548152f35b600435906001600160a01b0382168203610c0c57565b606435906001600160a01b0382168203610c0c57565b60c0810190811067ffffffffffffffff82111761091857604052565b67ffffffffffffffff811161091857604052565b60e0810190811067ffffffffffffffff82111761091857604052565b6040810190811067ffffffffffffffff82111761091857604052565b90601f601f19910116810190811067ffffffffffffffff82111761091857604052565b67ffffffffffffffff811161091857601f01601f191660200190565b81601f82011215610c0c578035906126c382612690565b926126d1604051948561266d565b82845260208383010111610c0c57816000926020809301838601378301015290565b60015481101561272e576006906001600052027fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60190600090565b634e487b7160e01b600052603260045260246000fd5b60025481101561272e576006906002600052027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0190600090565b805482101561272e576000526006602060002091020190600090565b90600182811c921680156127cb575b60208310146127b557565b634e487b7160e01b600052602260045260246000fd5b91607f16916127aa565b90604051918260008254926127e98461279b565b9081845260019485811690816000146128585750600114612815575b50506128139250038361266d565b565b9093915060005260209081600020936000915b81831061284057505061281393508201013880612805565b85548884018501529485019487945091830191612828565b90506128139550602093507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b8201013880612805565b60005b8381106128ad5750506000910152565b818101518382015260200161289d565b90601f19601f6020936128db8151809281875287808801910161289a565b0116010190565b906003821015610ab55752565b9060c080612813938051845260208101516020850152604081015160408501526001600160a01b03606082015116606085015260808101511515608085015260a081015160a085015201519101906128e2565b6020908160408183019282815285518094520193019160005b828110612969575050505090565b909192938260e08261297e60019489516128ef565b0195019392910161295b565b9260c0946001600160a01b039161281398949a9997939a60e087019b8752602087015260408601521660608401521515608083015260a082015201906128e2565b6001600160a01b036000541633036129df57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b15612a2a57565b606460405162461bcd60e51b815260206004820152601960248201527f4241593a7061796d656e74206973206e6f7420656e6f756768000000000000006044820152fd5b90816020910312610c0c57518015158103610c0c5790565b906003811015610ab55760ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008354169116179055565b60405190612aca82612651565b600482527f30783030000000000000000000000000000000000000000000000000000000006020830152565b818110612b01575050565b60008155600101612af6565b9190601f8111612b1c57505050565b612813926000526020600020906020601f840160051c83019310612b48575b601f0160051c0190612af6565b9091508190612b3b565b6000198114612b615760010190565b634e487b7160e01b600052601160045260246000fd5b919290926040519160208301947f23b872dd0000000000000000000000000000000000000000000000000000000086526001600160a01b039283809216602486015216604484015260648301526064825260a082019282841067ffffffffffffffff85111761091857612c36946000928392866040521693612bf886612651565b602086527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460c0820152519082855af1612c30612cd0565b91612d00565b8051908115918215612cb6575b505015612c4c57565b608460405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b612cc99250602080918301019101612a6e565b3880612c43565b3d15612cfb573d90612ce182612690565b91612cef604051938461266d565b82523d6000602084013e565b606090565b91929015612d615750815115612d14575090565b3b15612d1d5790565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b825190915015612d745750805190602001fd5b612d989060405191829162461bcd60e51b83526020600484015260248301906128bd565b0390fd5b9290959493919560a084526000908054612db58161279b565b918260a08801526001918281169081600014612e475750600114612e02575b50505091612dfe916001600160a01b036080959498166020850152604084015260608301906128e2565b0152565b909250600052602080600020926000935b838510612e335750505050830160c001816001600160a01b036080612dd4565b805488860160c00152938201938101612e13565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660c0808a019190915293151560051b880190930193508492506001600160a01b03915060809050612dd4565b81601f82011215610c0c578051612eab81612690565b92612eb9604051948561266d565b81845260208284010111610c0c57612ed7916020808501910161289a565b90565b92919091612f306001600160a01b03948594856004541691604092835197889586937f7276069d0000000000000000000000000000000000000000000000000000000085526060600486015260648501906128bd565b9316602483015286604483015281600095869403915afa93841561303a5782809781978297612fc8575b508387805181010312610c115760208701519081160361013e57508185015103612f85575093929190565b6064905162461bcd60e51b815260206004820152600e60248201527f4e6f742053616d65204e6f6e63650000000000000000000000000000000000006044820152fd5b98509550925094503d8083883e612fdf818861266d565b8601946080878703126113005786519267ffffffffffffffff93848111610c11578761300c918a01612e95565b96602089015194848a0151996060810151918211611e495761302f929101612e95565b969397969538612f5a565b5051903d90823e3d90fd5b6003821015610ab55752565b9061281360405161306181612635565b60c060ff600583968054855260018101546020860152600281015460408601528260038201546001600160a01b038116606088015260a01c1615156080860152600481015460a08601520154169101613045565b90610a9f578181036130c5575050565b600560ff81846128139554855560018101546001860155600281015460028601556131656003860184600384016001600160a01b0381541673ffffffffffffffffffffffffffffffffffffffff198454161783555460a01c167fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff74ff0000000000000000000000000000000000000000835492151560a01b169116179055565b600481015460048601550154169101612a86565b908082146132535761318b815461279b565b9067ffffffffffffffff82116109185781906131b1826131ab865461279b565b86612b0d565b600090601f83116001146131e7576000926131dc575b50506000198260011b9260031b1c1916179055565b0154905038806131c7565b91601f1916918152602091828220908583528383209383905b82821061323a575050908460019594939210613221575b505050811b019055565b015460001960f88460031b161c19169055388080613217565b8495819295850154815560018091019601940190613200565b5050565b613261815461279b565b908161326b575050565b81601f6000931160011461327d575055565b90808391825261329c601f60208420940160051c840160018501612af6565b5555565b60405190610140820182811067ffffffffffffffff82111761091857604052816101206000918281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e082015282610100820152015256fea2646970667358221220ca0ebe17548b67e15ceefc1382f03a11f82d6c9e3739b28879312975d941724564736f6c63430008130033",
  "deployedBytecode": "0x608080604052600436101561001d575b50361561001b57600080fd5b005b600090813560e01c908163067bd3b4146125bd575080630f3cd888146125715780632274346b1461254a578063346207b61461158357806360e232a914611537578063715018a6146114d05780638416e3041461140a5780638813ce12146113605780638da5cb5b1461133a5780639655e6d8146113045780639791003614610e065780639bf4ec2f14610d9b5780639c673fe514610d4f578063a357427d14610caf578063b041377014610c88578063be22f54614610c61578063c4bb77d014610c15578063c81ac6461461029b578063cf04fb941461024f578063cf69568814610228578063f2fde38b146101415763f77800e50361000f573461013e578060031936011261013e5760206001600160a01b0360065416604051908152f35b80fd5b503461013e57602060031936011261013e5761015b6125d9565b6101636129cb565b6001600160a01b038091169081156101be576000548273ffffffffffffffffffffffffffffffffffffffff19821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b608460405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b503461013e578060031936011261013e5760206001600160a01b0360045416604051908152f35b503461013e57602060031936011261013e576001600160a01b036102716125d9565b6102796129cb565b1673ffffffffffffffffffffffffffffffffffffffff19600454161760045580f35b5060031936016101408112610c115760e01361013e57604051906102be82612635565b6004358252602435602083015260443560408301526102db6125ef565b60608301526084358015158103610c1157608083015260a43560a083015260c4356003811015610c115760c083015260e43567ffffffffffffffff8111610c115761032a9036906004016126ac565b906001600160a01b0361010435166101043503610c0c576040519161034e83612635565b8183528160208401528160408401528160608401528160808401528160a08401528160c084015260c08401516003811015610bf857610b8d57610392341515612a23565b6103a160208501511515612a23565b6103b2610124356101043583612eda565b5050508051602082012091602460206001600160a01b0360035416604051928380927f38aad32c0000000000000000000000000000000000000000000000000000000082528860048301525afa908115610b82578591610b53575b5015610b0f57604086015115610acb5761042c60208701513414612a23565b61043b60208701511515612a23565b828452600860205260408420805468010000000000000000811015610918576104699160018201815561277f565b610a9f578651815560208701516001820155604087015160028201556105056001600160a01b03606089015116600383019073ffffffffffffffffffffffffffffffffffffffff19825416178155608089015115157fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff74ff0000000000000000000000000000000000000000835492151560a01b169116179055565b60a0870151600482015560c08701516003811015610ab55760056105299201612a86565b600154680100000000000000008110156109185780600161054d92016001556126f3565b610a9f578651815560208701516001820155604087015160028201556105e8600382016001600160a01b0360608a01511673ffffffffffffffffffffffffffffffffffffffff19825416178155608089015115157fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff74ff0000000000000000000000000000000000000000835492151560a01b169116179055565b60a0870151600482015560c08701516003811015610ab557600561060c9201612a86565b6040519161061983612605565b610621612abd565b835261062b612abd565b6020840152604083015260608201526001600160a01b03610104351660808201526101243560a082015260025468010000000000000000811015610918578060016106799201600255612744565b919091610a9f57805180519067ffffffffffffffff82116109185781906106aa826106a4875461279b565b87612b0d565b602090601f8311600114610a3357600092610a28575b50506000198260011b9260031b1c19161782555b602081015180519067ffffffffffffffff8211610918578190610707826106fe600188015461279b565b60018801612b0d565b602090601f83116001146109b6576000926109ab575b50506000198260011b9260031b1c19161760018301555b604081015180519067ffffffffffffffff82116109185781906107678261075e600288015461279b565b60028801612b0d565b602090601f83116001146109395760009261092e575b50506000198260011b9260031b1c19161760028301555b60038201606082015180519067ffffffffffffffff8211610918576107c3826107bd855461279b565b85612b0d565b602090601f83116001146108aa57918060a094926005969460009261089f575b50506000198260011b9260031b1c19161790555b600484016001600160a01b0360808301511673ffffffffffffffffffffffffffffffffffffffff198254161790550151910155610835600954612b52565b60095560015491600019830192831161088b57507fe9a2b6f068c8e156e02b1fa5a51213d9f1811ceb25dc05211a1df6b0f0f5110260e0809561087b60405180926128ef565ba361088960405180926128ef565bf35b80634e487b7160e01b602492526011600452fd5b0151905038806107e3565b90601f198316918460005260206000209260005b81811061090057509260019285926005989660a09896106108e7575b505050811b0190556107f7565b015160001960f88460031b161c191690553880806108da565b929360206001819287860151815501950193016108be565b634e487b7160e01b600052604160045260246000fd5b01519050388061077d565b9250600285016000526020600020906000935b601f1984168510610990576001945083601f19811610610977575b505050811b016002830155610794565b015160001960f88460031b161c19169055388080610967565b8181015183556020948501946001909301929091019061094c565b01519050388061071d565b9250600185016000526020600020906000935b601f1984168510610a0d576001945083601f198116106109f4575b505050811b016001830155610734565b015160001960f88460031b161c191690553880806109e4565b818101518355602094850194600190930192909101906109c9565b0151905038806106c0565b9250846000526020600020906000935b601f1984168510610a84576001945083601f19811610610a6b575b505050811b0182556106d4565b015160001960f88460031b161c19169055388080610a5e565b81810151835560209485019460019093019290910190610a43565b634e487b7160e01b600052600060045260246000fd5b634e487b7160e01b600052602160045260246000fd5b606460405162461bcd60e51b815260206004820152601760248201527f4241593a7374616b65206973206e6f7420656e6f7567680000000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601360248201527f7573657220646f6573206e6f74206578697374000000000000000000000000006044820152fd5b610b75915060203d602011610b7b575b610b6d818361266d565b810190612a6e565b3861040d565b503d610b63565b6040513d87823e3d90fd5b60c08401516003811015610bf857600203610bc557610bc06001600160a01b036007541660208601519030903390612b77565b610392565b60c08401516003811015610bf85760010361039257610bc06001600160a01b036006541660208601519030903390612b77565b602483634e487b7160e01b81526021600452fd5b600080fd5b5080fd5b503461013e57602060031936011261013e576001600160a01b03610c376125d9565b610c3f6129cb565b1673ffffffffffffffffffffffffffffffffffffffff19600354161760035580f35b503461013e578060031936011261013e5760206001600160a01b0360075416604051908152f35b503461013e578060031936011261013e5760206001600160a01b0360035416604051908152f35b503461013e57602080600319360112610c1157600435825260088152604082209182549067ffffffffffffffff8211610d3b579260405192610cf6818460051b018561266d565b82845280840191855280852094915b838310610d1e5760405180610d1a8782612942565b0390f35b600682600192610d2d89613051565b815201960192019194610d05565b80634e487b7160e01b602492526041600452fd5b503461013e57602060031936011261013e576001600160a01b03610d716125d9565b610d796129cb565b1673ffffffffffffffffffffffffffffffffffffffff19600754161760075580f35b503461013e57602060031936011261013e57600435600154811015610c1157610dc3906126f3565b508054610d1a600183015491600284015493600381015460ff6005600484015493015416926040519687966001600160a01b0360ff8560a01c169416928861298a565b503461013e57608060031936011261013e5760043560243567ffffffffffffffff811161130057610e3b9036906004016126ac565b6044356001600160a01b0381168103610c0c57610e5c906064359083612eda565b5050506020815191012091610e7c6002610e7583612744565b50016127d5565b6020815191012083036112bc5760ff6003610e96836126f3565b50015460a01c16611278578380610eb5610eaf846126f3565b50613051565b936001600160a01b03600554166020860151602083519301915af1610ed8612cd0565b50156112345760015460001981019081116110bb57808210611218575b50600154801561106c5760001901610f0c816126f3565b610a9f576005816000809355826001820155826002820155826003820155826004820155015560015560025460001981019081116110bb5780821061117f575b5050600254801561116b57610f646000198201612744565b61115857906000600583610f7a60001995613257565b610f8660018201613257565b610f9260028201613257565b610f9e60038201613257565b876004820155015501600255825b82845260088060205260408520805483101561115057610fce8360019261277f565b5001546020840151148061112b575b806110f4575b806110cf575b610ffc5750610ff790612b52565b610fac565b9280925084528260205260408420549060001982019182116110bb57818110611082575b50508252602052604081208054801561106c576000190190611042828261277f565b610a9f57600581600080935582600182015582600282015582600382015582600482015501555580f35b634e487b7160e01b600052603160045260246000fd5b6110ae61109c6110b493858852866020526040882061277f565b5091848752856020526040872061277f565b906130b5565b3880611020565b602485634e487b7160e01b81526011600452fd5b508385528060205260046110e6836040882061277f565b50015460a084015114610fe9565b50838552806020526001600160a01b036003611113846040892061277f565b500154166001600160a01b0360608501511614610fe3565b50838552806020526002611142836040882061277f565b500154604084015114610fdd565b505050505080f35b602485634e487b7160e01b815280600452fd5b602484634e487b7160e01b81526031600452fd5b61118b61119291612744565b5091612744565b91909161115857818114610f4c576005816111ae829385613179565b6111be6001820160018601613179565b6111ce6002820160028601613179565b6111de6003820160038601613179565b600484016001600160a01b0360048301541673ffffffffffffffffffffffffffffffffffffffff1982541617905501549101553880610f4c565b61122461122e916126f3565b506110ae836126f3565b38610ef5565b606460405162461bcd60e51b815260206004820152601560248201527f4241593a5661756c742063616c6c206661696c656400000000000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601f60248201527f4241593a7265717565737420697320616c7265616479206163636570746564006044820152fd5b606460405162461bcd60e51b815260206004820152601960248201527f4241593a796f7520617265206e6f7420746865206275796572000000000000006044820152fd5b8280fd5b503461013e57604060031936011261013e576024356004358252600860205260408220805482101561130057610dc3925061277f565b503461013e578060031936011261013e576001600160a01b036020915416604051908152f35b503461013e578060031936011261013e57600190815467ffffffffffffffff81116113f65760405191602061139a818460051b018561266d565b8284528482527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf68185015b8484106113da5760405180610d1a8882612942565b60068388926113e885613051565b8152019201930192906113c5565b602482634e487b7160e01b81526041600452fd5b503461013e57602060031936011261013e576004359060025482101561013e5761149761143683612744565b50611440816127d5565b9061144d600182016127d5565b6114c161145c600284016127d5565b6114b361146b600386016127d5565b916114a560056001600160a01b0360048901541697015495604051998a9960c08b5260c08b01906128bd565b9089820360208b01526128bd565b9087820360408901526128bd565b9085820360608701526128bd565b91608084015260a08301520390f35b503461013e578060031936011261013e576114e96129cb565b60006001600160a01b03815473ffffffffffffffffffffffffffffffffffffffff1981168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b503461013e57602060031936011261013e576001600160a01b036115596125d9565b6115616129cb565b1673ffffffffffffffffffffffffffffffffffffffff19600554161760055580f35b503461013e5760a060031936011261013e576024356001600160a01b0381168103610c115760443567ffffffffffffffff8111611300576115c89036906004016126ac565b906115de6115d46125ef565b6084359084612eda565b5050509182516020840120926115f26132a0565b506115fb6132a0565b916001600160a01b03841683526040517f8da5cb5b0000000000000000000000000000000000000000000000000000000081526020816004816001600160a01b0389165afa90811561227d578791612518575b5060208401526040517f5c63ed690000000000000000000000000000000000000000000000000000000081526020816004816001600160a01b0389165afa90811561227d5787916124e6575b5060408401526040517f4c38d8770000000000000000000000000000000000000000000000000000000081526020816004816001600160a01b0389165afa90811561227d5787916124b4575b5060608401526040517f0917e7760000000000000000000000000000000000000000000000000000000081526020816004816001600160a01b0389165afa90811561227d578791612482575b5060808401526040517f17906c2e0000000000000000000000000000000000000000000000000000000081526020816004816001600160a01b0389165afa90811561227d578791612450575b5060a08401526040517fd24e0c870000000000000000000000000000000000000000000000000000000081526020816004816001600160a01b0389165afa90811561227d57879161241e575b5060c08401526040517ffaeb5e170000000000000000000000000000000000000000000000000000000081526020816004816001600160a01b0389165afa90811561227d5787916123ec575b5060e08401526040517f4e69d5600000000000000000000000000000000000000000000000000000000081526020816004816001600160a01b0389165afa90811561227d5787916123b1575b50600881101561239d576101008401526040517f010a38f50000000000000000000000000000000000000000000000000000000081526020816004816001600160a01b0389165afa801561227d57879061235c575b6118c691506101208501613045565b60016118d36004356126f3565b50015460c0840151116122f25760e083015160026118f26004356126f3565b5001541161228857602460206001600160a01b0360035416604051928380927f38aad32c0000000000000000000000000000000000000000000000000000000082528a60048301525afa90811561227d57879161225e575b501561221a5761195b600435612744565b506119c1600361196c600435612744565b506119b660026001600160a01b0360046119868135612744565b50015416956005611998600435612744565b50015497604051996119a98b612605565b8a5260208a0152016127d5565b6040870152016127d5565b6060840152608083015260a082015260025468010000000000000000811015612206578060016119f49201600255612744565b9190916121f357805180519067ffffffffffffffff8211612077578190611a1f826106a4875461279b565b602090601f831160011461218a57899261217f575b50506000198260011b9260031b1c19161782555b602081015180519067ffffffffffffffff8211612077578190611a72826106fe600188015461279b565b602090601f8311600114612110578992612105575b50506000198260011b9260031b1c19161760018301555b604081015180519067ffffffffffffffff8211612077578190611ac88261075e600288015461279b565b602090601f831160011461209657899261208b575b50506000198260011b9260031b1c19161760028301555b606081015180519067ffffffffffffffff821161207757611b2582611b1c600387015461279b565b60038701612b0d565b602090601f83116001146120055791806005949260a0948b92611ffa575b50506000198260011b9260031b1c19161760038501555b600484016001600160a01b0360808301511673ffffffffffffffffffffffffffffffffffffffff19825416179055015191015560ff6005611b9c6004356126f3565b500154166003811015611ef15715611f055760ff6005611bbd6004356126f3565b500154166003811015611ef157600203611e7b57836020611c366001600160a01b03600754166001611bf06004356126f3565b5001546040517f095ea7b3000000000000000000000000000000000000000000000000000000008152336004820152602481019190915293849283919082906044820190565b03925af18015610b8257611e5c575b505b83611c53600435612744565b506001600160a01b036004611c688135612744565b50015416906005611c7a600435612744565b5001549060ff6005611c8d6004356126f3565b50015416906001611c9f6004356126f3565b500154926001600160a01b0388163b15611e58578593600393611cf19260405197889687967f200f852c0000000000000000000000000000000000000000000000000000000088520160048701612d9c565b0381836001600160a01b0389165af18015611e4d57611e35575b505060a0915b6003611d1e6004356126f3565b5001740100000000000000000000000000000000000000007fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff8254161790556001600160a01b036003611d726004356126f3565b5001911673ffffffffffffffffffffffffffffffffffffffff1982541617905501516004611da081356126f3565b500155611dae6004356126f3565b5090611e0a60ff6005604051948054865260018101546020870152600281015460408701528260038201546001600160a01b038116606089015260a01c1615156080870152600481015460a087015201541660c08401906128e2565b7f83c2cca80e93944a5016ae3e3f51bd5e9275d6459dfdbfdad3fe85d918d92f3360e060043593a380f35b611e3e90612621565b611e49578338611d0b565b8380fd5b6040513d84823e3d90fd5b8580fd5b611e749060203d602011610b7b57610b6d818361266d565b5038611c45565b60ff6005611e8a6004356126f3565b500154166003811015611ef157600103611c4757836020611ebd6001600160a01b03600654166001611bf06004356126f3565b03925af18015610b8257611ed2575b50611c47565b611eea9060203d602011610b7b57610b6d818361266d565b5038611ecc565b602485634e487b7160e01b81526021600452fd5b906001611f136004356126f3565b50015484611f22600435612744565b50916001600160a01b036004611f388135612744565b50015416906005611f4a600435612744565b5001549360ff6005611f5d6004356126f3565b50015416906001611f6f6004356126f3565b500154916001600160a01b0388163b15611e5857600392611fc191604051988997889687967f200f852c0000000000000000000000000000000000000000000000000000000088520160048701612d9c565b03916001600160a01b0387165af18015610b8257611fe4575b509060a091611d11565b93611ff260a0939295612621565b939091611fda565b015190503880611b43565b906003850189526020892091895b601f198516811061205f5750926005949260019260a09583601f19811610612046575b505050811b016003850155611b5a565b015160001960f88460031b161c19169055388080612036565b91926020600181928685015181550194019201612013565b602488634e487b7160e01b81526041600452fd5b015190503880611add565b9250600285018952602089209089935b601f19841685106120ea576001945083601f198116106120d1575b505050811b016002830155611af4565b015160001960f88460031b161c191690553880806120c1565b818101518355602094850194600190930192909101906120a6565b015190503880611a87565b9250600185018952602089209089935b601f1984168510612164576001945083601f1981161061214b575b505050811b016001830155611a9e565b015160001960f88460031b161c1916905538808061213b565b81810151835560209485019460019093019290910190612120565b015190503880611a34565b9250848952602089209089935b601f19841685106121d8576001945083601f198116106121bf575b505050811b018255611a48565b015160001960f88460031b161c191690553880806121b2565b81810151835560209485019460019093019290910190612197565b602486634e487b7160e01b815280600452fd5b602486634e487b7160e01b81526041600452fd5b606460405162461bcd60e51b815260206004820152601760248201527f4241593a7573657220646f6573206e6f742065786973740000000000000000006044820152fd5b612277915060203d602011610b7b57610b6d818361266d565b3861194a565b6040513d89823e3d90fd5b608460405162461bcd60e51b815260206004820152602560248201527f4241593a7374616b65206973206e6f74207468652073616d65206f662074686560448201527f20666565640000000000000000000000000000000000000000000000000000006064820152fd5b608460405162461bcd60e51b815260206004820152602760248201527f4241593a7061796d656e74206973206e6f74207468652073616d65206f66207460448201527f68652066656564000000000000000000000000000000000000000000000000006064820152fd5b506020813d602011612395575b816123766020938361266d565b8101031261239157516003811015612391576118c6906118b7565b8680fd5b3d9150612369565b602487634e487b7160e01b81526021600452fd5b90506020813d6020116123e4575b816123cc6020938361266d565b81010312612391575160088110156123915738611862565b3d91506123bf565b90506020813d602011612416575b816124076020938361266d565b81010312612391575138611816565b3d91506123fa565b90506020813d602011612448575b816124396020938361266d565b810103126123915751386117ca565b3d915061242c565b90506020813d60201161247a575b8161246b6020938361266d565b8101031261239157513861177e565b3d915061245e565b90506020813d6020116124ac575b8161249d6020938361266d565b81010312612391575138611732565b3d9150612490565b90506020813d6020116124de575b816124cf6020938361266d565b810103126123915751386116e6565b3d91506124c2565b90506020813d602011612510575b816125016020938361266d565b8101031261239157513861169a565b3d91506124f4565b90506020813d602011612542575b816125336020938361266d565b8101031261239157513861164e565b3d9150612526565b503461013e578060031936011261013e5760206001600160a01b0360055416604051908152f35b503461013e57602060031936011261013e576001600160a01b036125936125d9565b61259b6129cb565b1673ffffffffffffffffffffffffffffffffffffffff19600654161760065580f35b905034610c115781600319360112610c11576020906009548152f35b600435906001600160a01b0382168203610c0c57565b606435906001600160a01b0382168203610c0c57565b60c0810190811067ffffffffffffffff82111761091857604052565b67ffffffffffffffff811161091857604052565b60e0810190811067ffffffffffffffff82111761091857604052565b6040810190811067ffffffffffffffff82111761091857604052565b90601f601f19910116810190811067ffffffffffffffff82111761091857604052565b67ffffffffffffffff811161091857601f01601f191660200190565b81601f82011215610c0c578035906126c382612690565b926126d1604051948561266d565b82845260208383010111610c0c57816000926020809301838601378301015290565b60015481101561272e576006906001600052027fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60190600090565b634e487b7160e01b600052603260045260246000fd5b60025481101561272e576006906002600052027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0190600090565b805482101561272e576000526006602060002091020190600090565b90600182811c921680156127cb575b60208310146127b557565b634e487b7160e01b600052602260045260246000fd5b91607f16916127aa565b90604051918260008254926127e98461279b565b9081845260019485811690816000146128585750600114612815575b50506128139250038361266d565b565b9093915060005260209081600020936000915b81831061284057505061281393508201013880612805565b85548884018501529485019487945091830191612828565b90506128139550602093507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0091501682840152151560051b8201013880612805565b60005b8381106128ad5750506000910152565b818101518382015260200161289d565b90601f19601f6020936128db8151809281875287808801910161289a565b0116010190565b906003821015610ab55752565b9060c080612813938051845260208101516020850152604081015160408501526001600160a01b03606082015116606085015260808101511515608085015260a081015160a085015201519101906128e2565b6020908160408183019282815285518094520193019160005b828110612969575050505090565b909192938260e08261297e60019489516128ef565b0195019392910161295b565b9260c0946001600160a01b039161281398949a9997939a60e087019b8752602087015260408601521660608401521515608083015260a082015201906128e2565b6001600160a01b036000541633036129df57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b15612a2a57565b606460405162461bcd60e51b815260206004820152601960248201527f4241593a7061796d656e74206973206e6f7420656e6f756768000000000000006044820152fd5b90816020910312610c0c57518015158103610c0c5790565b906003811015610ab55760ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008354169116179055565b60405190612aca82612651565b600482527f30783030000000000000000000000000000000000000000000000000000000006020830152565b818110612b01575050565b60008155600101612af6565b9190601f8111612b1c57505050565b612813926000526020600020906020601f840160051c83019310612b48575b601f0160051c0190612af6565b9091508190612b3b565b6000198114612b615760010190565b634e487b7160e01b600052601160045260246000fd5b919290926040519160208301947f23b872dd0000000000000000000000000000000000000000000000000000000086526001600160a01b039283809216602486015216604484015260648301526064825260a082019282841067ffffffffffffffff85111761091857612c36946000928392866040521693612bf886612651565b602086527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460c0820152519082855af1612c30612cd0565b91612d00565b8051908115918215612cb6575b505015612c4c57565b608460405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b612cc99250602080918301019101612a6e565b3880612c43565b3d15612cfb573d90612ce182612690565b91612cef604051938461266d565b82523d6000602084013e565b606090565b91929015612d615750815115612d14575090565b3b15612d1d5790565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b825190915015612d745750805190602001fd5b612d989060405191829162461bcd60e51b83526020600484015260248301906128bd565b0390fd5b9290959493919560a084526000908054612db58161279b565b918260a08801526001918281169081600014612e475750600114612e02575b50505091612dfe916001600160a01b036080959498166020850152604084015260608301906128e2565b0152565b909250600052602080600020926000935b838510612e335750505050830160c001816001600160a01b036080612dd4565b805488860160c00152938201938101612e13565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660c0808a019190915293151560051b880190930193508492506001600160a01b03915060809050612dd4565b81601f82011215610c0c578051612eab81612690565b92612eb9604051948561266d565b81845260208284010111610c0c57612ed7916020808501910161289a565b90565b92919091612f306001600160a01b03948594856004541691604092835197889586937f7276069d0000000000000000000000000000000000000000000000000000000085526060600486015260648501906128bd565b9316602483015286604483015281600095869403915afa93841561303a5782809781978297612fc8575b508387805181010312610c115760208701519081160361013e57508185015103612f85575093929190565b6064905162461bcd60e51b815260206004820152600e60248201527f4e6f742053616d65204e6f6e63650000000000000000000000000000000000006044820152fd5b98509550925094503d8083883e612fdf818861266d565b8601946080878703126113005786519267ffffffffffffffff93848111610c11578761300c918a01612e95565b96602089015194848a0151996060810151918211611e495761302f929101612e95565b969397969538612f5a565b5051903d90823e3d90fd5b6003821015610ab55752565b9061281360405161306181612635565b60c060ff600583968054855260018101546020860152600281015460408601528260038201546001600160a01b038116606088015260a01c1615156080860152600481015460a08601520154169101613045565b90610a9f578181036130c5575050565b600560ff81846128139554855560018101546001860155600281015460028601556131656003860184600384016001600160a01b0381541673ffffffffffffffffffffffffffffffffffffffff198454161783555460a01c167fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff74ff0000000000000000000000000000000000000000835492151560a01b169116179055565b600481015460048601550154169101612a86565b908082146132535761318b815461279b565b9067ffffffffffffffff82116109185781906131b1826131ab865461279b565b86612b0d565b600090601f83116001146131e7576000926131dc575b50506000198260011b9260031b1c1916179055565b0154905038806131c7565b91601f1916918152602091828220908583528383209383905b82821061323a575050908460019594939210613221575b505050811b019055565b015460001960f88460031b161c19169055388080613217565b8495819295850154815560018091019601940190613200565b5050565b613261815461279b565b908161326b575050565b81601f6000931160011461327d575055565b90808391825261329c601f60208420940160051c840160018501612af6565b5555565b60405190610140820182811067ffffffffffffffff82111761091857604052816101206000918281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e082015282610100820152015256fea2646970667358221220ca0ebe17548b67e15ceefc1382f03a11f82d6c9e3739b28879312975d941724564736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 291,
        "contract": "contracts/layer/MecenateBay.sol:MecenateBay",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 17771,
        "contract": "contracts/layer/MecenateBay.sol:MecenateBay",
        "label": "allRequests",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(BayRequest)18968_storage)dyn_storage"
      },
      {
        "astId": 17775,
        "contract": "contracts/layer/MecenateBay.sol:MecenateBay",
        "label": "allRequestsPrivate",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(BayRequestPrivate)18981_storage)dyn_storage"
      },
      {
        "astId": 17777,
        "contract": "contracts/layer/MecenateBay.sol:MecenateBay",
        "label": "usersMouduleContract",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 17779,
        "contract": "contracts/layer/MecenateBay.sol:MecenateBay",
        "label": "verifierContract",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 17781,
        "contract": "contracts/layer/MecenateBay.sol:MecenateBay",
        "label": "vaultContract",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 17783,
        "contract": "contracts/layer/MecenateBay.sol:MecenateBay",
        "label": "museToken",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 17785,
        "contract": "contracts/layer/MecenateBay.sol:MecenateBay",
        "label": "daiToken",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 17791,
        "contract": "contracts/layer/MecenateBay.sol:MecenateBay",
        "label": "requests",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_array(t_struct(BayRequest)18968_storage)dyn_storage)"
      },
      {
        "astId": 17793,
        "contract": "contracts/layer/MecenateBay.sol:MecenateBay",
        "label": "contractCounter",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 17797,
        "contract": "contracts/layer/MecenateBay.sol:MecenateBay",
        "label": "sismoResponseMapping",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_bytes_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(BayRequest)18968_storage)dyn_storage": {
        "base": "t_struct(BayRequest)18968_storage",
        "encoding": "dynamic_array",
        "label": "struct Structures.BayRequest[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(BayRequestPrivate)18981_storage)dyn_storage": {
        "base": "t_struct(BayRequestPrivate)18981_storage",
        "encoding": "dynamic_array",
        "label": "struct Structures.BayRequestPrivate[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_enum(Tokens)18812": {
        "encoding": "inplace",
        "label": "enum Structures.Tokens",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_array(t_struct(BayRequest)18968_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Structures.BayRequest[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(BayRequest)18968_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_struct(BayRequest)18968_storage": {
        "encoding": "inplace",
        "label": "struct Structures.BayRequest",
        "members": [
          {
            "astId": 18954,
            "contract": "contracts/layer/MecenateBay.sol:MecenateBay",
            "label": "request",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 18956,
            "contract": "contracts/layer/MecenateBay.sol:MecenateBay",
            "label": "payment",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 18958,
            "contract": "contracts/layer/MecenateBay.sol:MecenateBay",
            "label": "stake",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 18960,
            "contract": "contracts/layer/MecenateBay.sol:MecenateBay",
            "label": "postAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 18962,
            "contract": "contracts/layer/MecenateBay.sol:MecenateBay",
            "label": "accepted",
            "offset": 20,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 18964,
            "contract": "contracts/layer/MecenateBay.sol:MecenateBay",
            "label": "postCount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 18967,
            "contract": "contracts/layer/MecenateBay.sol:MecenateBay",
            "label": "tokenId",
            "offset": 0,
            "slot": "5",
            "type": "t_enum(Tokens)18812"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(BayRequestPrivate)18981_storage": {
        "encoding": "inplace",
        "label": "struct Structures.BayRequestPrivate",
        "members": [
          {
            "astId": 18970,
            "contract": "contracts/layer/MecenateBay.sol:MecenateBay",
            "label": "vaultIdSeller",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes_storage"
          },
          {
            "astId": 18972,
            "contract": "contracts/layer/MecenateBay.sol:MecenateBay",
            "label": "sellerResponse",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes_storage"
          },
          {
            "astId": 18974,
            "contract": "contracts/layer/MecenateBay.sol:MecenateBay",
            "label": "vaultIdBuyer",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          },
          {
            "astId": 18976,
            "contract": "contracts/layer/MecenateBay.sol:MecenateBay",
            "label": "buyerResponse",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes_storage"
          },
          {
            "astId": 18978,
            "contract": "contracts/layer/MecenateBay.sol:MecenateBay",
            "label": "buyerTo",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 18980,
            "contract": "contracts/layer/MecenateBay.sol:MecenateBay",
            "label": "buyerNonce",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}