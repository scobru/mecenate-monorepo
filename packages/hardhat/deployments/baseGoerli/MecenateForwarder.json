{
  "address": "0xf2ed946165e44D6DE248D25C5C76078310Ca36ab",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_encryptedVaultId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "encryptedVaultId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x62ed21b8dfc8734a53856570984da9ce64834ed5ca4587287a4360066f2aafed",
  "receipt": {
    "to": null,
    "from": "0x8aA5F726d9F868a21a8bd748E2f1E43bA31eb670",
    "contractAddress": "0xf2ed946165e44D6DE248D25C5C76078310Ca36ab",
    "transactionIndex": 1,
    "gasUsed": "306323",
    "logsBloom": "0x
    "blockHash": "0xc50b0589862be0ae83342f6893b57f4ecbfb8268901fc670f622c83eb305dfa6",
    "transactionHash": "0x62ed21b8dfc8734a53856570984da9ce64834ed5ca4587287a4360066f2aafed",
    "logs": [],
    "blockNumber": 10791887,
    "cumulativeGasUsed": "353176",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000000000000000000000000000000000000000000000000000000000",
    "0x3C04d0efB13cEFA36cC8BeE04f2f00Ed8F66De58"
  ],
  "numDeployments": 6,
  "solcInputHash": "f55bf99d73b66c19475e56e5f20b9a14",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_encryptedVaultId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"encryptedVaultId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MecenateForwarder.sol\":\"MecenateForwarder\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/MecenateForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMecenateVault {\\n    function depositToken(\\n        address _token,\\n        uint256 _amount,\\n        bytes32 encryptedVaultId\\n    ) external;\\n\\n    function depositETH(bytes32 encryptedVaultId) external payable;\\n}\\n\\ninterface IMecenateForwarderFactory {\\n    function getVault() external view returns (address);\\n}\\n\\ncontract MecenateForwarder {\\n    bytes32 public encryptedVaultId;\\n\\n    address public factory;\\n\\n    constructor(bytes32 _encryptedVaultId, address _factory) {\\n        encryptedVaultId = _encryptedVaultId;\\n        factory = _factory;\\n    }\\n\\n    function depositToken(address token, uint256 amount) external {\\n        address vault = IMecenateForwarderFactory(factory).getVault();\\n\\n        // Approva il token\\n        require(IERC20(token).approve(vault, amount), \\\"Approve failed\\\");\\n\\n        IMecenateVault(vault).depositToken(token, amount, encryptedVaultId);\\n    }\\n\\n    receive() external payable {\\n        address vault = IMecenateForwarderFactory(factory).getVault();\\n\\n        // Esegui il deposito in ETH\\n        (bool success, ) = payable(vault).call{value: msg.value}(\\n            abi.encodeWithSignature(\\\"depositETH(bytes32)\\\", encryptedVaultId)\\n        );\\n\\n        require(success, \\\"Deposit failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x7d7938321e2c02ceef6bd71120e7407497721bca9236b6bab419bbc1af3da1af\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60803461007e57601f6104b038819003918201601f19168301916001600160401b0383118484101761008357808492604094855283398101031261007e5780516020909101516001600160a01b038116919082900361007e57600055600180546001600160a01b031916919091179055604051610416908161009a8239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe60806040908082526004908136101561016d575b50361561001f57600080fd5b60015482516311b2515f60e31b81526020916001600160a01b0390839083908690829085165afa91821561016257600092610133575b5060005485519284840191636b46cea760e11b8352602485015260248452606084019367ffffffffffffffff948181108682111761011e57885251600093849391923491165af1903d15610118573d908111610103578451906100c1601f8201601f1916850183610384565b81526000833d92013e5b156100d257005b606492519162461bcd60e51b8352820152600e60248201526d11195c1bdcda5d0819985a5b195960921b6044820152fd5b604184634e487b7160e01b6000525260246000fd5b506100cb565b604188634e487b7160e01b6000525260246000fd5b610154919250833d851161015b575b61014c8183610384565b8101906103bc565b9038610055565b503d610142565b85513d6000823e3d90fd5b600090813560e01c9081631a58a6a61461036a57508063338b5dea146101c35763c45a0155036100135782346101bf57816003193601126101bf5760015490516001600160a01b039091168152602090f35b5080fd5b50913461036657806003193601126103665781356001600160a01b0381811693918490036103625760243590806001541684519182916311b2515f60e31b8352828660209485935afa928315610339578893610343575b5085519263095ea7b360e01b84521691828582015283602482015281816044818b8b5af19081156103395788916102ff575b50156102cc5750908591825495813b156102c85783606492875198899586946384abac9560e01b865289860152602485015260448401525af180156102be57610293578380f35b67ffffffffffffffff83116102ab5750523880808380f35b634e487b7160e01b845260419052602483fd5b82513d86823e3d90fd5b8380fd5b8360649186519162461bcd60e51b8352820152600e60248201526d105c1c1c9bdd994819985a5b195960921b6044820152fd5b90508181813d8311610332575b6103168183610384565b8101031261032e5751801515810361032e573861024c565b8780fd5b503d61030c565b86513d8a823e3d90fd5b61035b919350823d841161015b5761014c8183610384565b913861021a565b8480fd5b8280fd5b9050346101bf57816003193601126101bf57602091548152f35b90601f8019910116810190811067ffffffffffffffff8211176103a657604052565b634e487b7160e01b600052604160045260246000fd5b908160209103126103db57516001600160a01b03811681036103db5790565b600080fdfea26469706673582212208a6423907ad8c0858649fc881974c80991ac02f6db7c1d4ef6b10378d38764c864736f6c63430008130033",
  "deployedBytecode": "0x60806040908082526004908136101561016d575b50361561001f57600080fd5b60015482516311b2515f60e31b81526020916001600160a01b0390839083908690829085165afa91821561016257600092610133575b5060005485519284840191636b46cea760e11b8352602485015260248452606084019367ffffffffffffffff948181108682111761011e57885251600093849391923491165af1903d15610118573d908111610103578451906100c1601f8201601f1916850183610384565b81526000833d92013e5b156100d257005b606492519162461bcd60e51b8352820152600e60248201526d11195c1bdcda5d0819985a5b195960921b6044820152fd5b604184634e487b7160e01b6000525260246000fd5b506100cb565b604188634e487b7160e01b6000525260246000fd5b610154919250833d851161015b575b61014c8183610384565b8101906103bc565b9038610055565b503d610142565b85513d6000823e3d90fd5b600090813560e01c9081631a58a6a61461036a57508063338b5dea146101c35763c45a0155036100135782346101bf57816003193601126101bf5760015490516001600160a01b039091168152602090f35b5080fd5b50913461036657806003193601126103665781356001600160a01b0381811693918490036103625760243590806001541684519182916311b2515f60e31b8352828660209485935afa928315610339578893610343575b5085519263095ea7b360e01b84521691828582015283602482015281816044818b8b5af19081156103395788916102ff575b50156102cc5750908591825495813b156102c85783606492875198899586946384abac9560e01b865289860152602485015260448401525af180156102be57610293578380f35b67ffffffffffffffff83116102ab5750523880808380f35b634e487b7160e01b845260419052602483fd5b82513d86823e3d90fd5b8380fd5b8360649186519162461bcd60e51b8352820152600e60248201526d105c1c1c9bdd994819985a5b195960921b6044820152fd5b90508181813d8311610332575b6103168183610384565b8101031261032e5751801515810361032e573861024c565b8780fd5b503d61030c565b86513d8a823e3d90fd5b61035b919350823d841161015b5761014c8183610384565b913861021a565b8480fd5b8280fd5b9050346101bf57816003193601126101bf57602091548152f35b90601f8019910116810190811067ffffffffffffffff8211176103a657604052565b634e487b7160e01b600052604160045260246000fd5b908160209103126103db57516001600160a01b03811681036103db5790565b600080fdfea26469706673582212208a6423907ad8c0858649fc881974c80991ac02f6db7c1d4ef6b10378d38764c864736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9383,
        "contract": "contracts/MecenateForwarder.sol:MecenateForwarder",
        "label": "encryptedVaultId",
        "offset": 0,
        "slot": "0",
        "type": "t_bytes32"
      },
      {
        "astId": 9385,
        "contract": "contracts/MecenateForwarder.sol:MecenateForwarder",
        "label": "factory",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      }
    }
  }
}