{
  "address": "0xF2eaE9Ce6e941d29bC2e38CDB22DdA6F79253093",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes16",
          "name": "_appId",
          "type": "bytes16"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "enum AuthType",
          "name": "authType",
          "type": "uint8"
        }
      ],
      "name": "AuthTypeNotFoundInVerifiedResult",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ADDRESSES_PROVIDER_V2",
      "outputs": [
        {
          "internalType": "contract IAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "APP_ID",
      "outputs": [
        {
          "internalType": "bytes16",
          "name": "",
          "type": "bytes16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IS_IMPERSONATION_MODE",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SISMO_CONNECT_LIB_VERSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "appId",
      "outputs": [
        {
          "internalType": "bytes16",
          "name": "",
          "type": "bytes16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "config",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes16",
              "name": "appId",
              "type": "bytes16"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "isImpersonationMode",
                  "type": "bool"
                }
              ],
              "internalType": "struct VaultConfig",
              "name": "vault",
              "type": "tuple"
            }
          ],
          "internalType": "struct SismoConnectConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "sismoConnectResponse",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_nonce",
          "type": "bytes32"
        }
      ],
      "name": "sismoVerify",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1848945b95d2bd4c004fb80179ec75c716fca7a6715c171418f957eddcf1fa71",
  "receipt": {
    "to": null,
    "from": "0x8aA5F726d9F868a21a8bd748E2f1E43bA31eb670",
    "contractAddress": "0xF2eaE9Ce6e941d29bC2e38CDB22DdA6F79253093",
    "transactionIndex": 16,
    "gasUsed": "1874291",
    "logsBloom": "0x
    "blockHash": "0x5755b2b20373d412c73688a74763742598edb4196226b7d0854183fe783681d2",
    "transactionHash": "0x1848945b95d2bd4c004fb80179ec75c716fca7a6715c171418f957eddcf1fa71",
    "logs": [],
    "blockNumber": 4377676,
    "cumulativeGasUsed": "4315181",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6c434d2de6efa3e7169bc58843b74d74"
  ],
  "numDeployments": 1,
  "solcInputHash": "1c44eacd89272d51fa104e5a7d17594c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"_appId\",\"type\":\"bytes16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"enum AuthType\",\"name\":\"authType\",\"type\":\"uint8\"}],\"name\":\"AuthTypeNotFoundInVerifiedResult\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ADDRESSES_PROVIDER_V2\",\"outputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"APP_ID\",\"outputs\":[{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IS_IMPERSONATION_MODE\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SISMO_CONNECT_LIB_VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes16\",\"name\":\"appId\",\"type\":\"bytes16\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isImpersonationMode\",\"type\":\"bool\"}],\"internalType\":\"struct VaultConfig\",\"name\":\"vault\",\"type\":\"tuple\"}],\"internalType\":\"struct SismoConnectConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sismoConnectResponse\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_nonce\",\"type\":\"bytes32\"}],\"name\":\"sismoVerify\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MecenateVerifier.sol\":\"MecenateVerifier\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/MecenateVerifier.sol\":{\"content\":\"/**\\n * @title MecenateVerifier\\n * @dev Contract that verifies user identity using SismoConnect and returns user's vaultId, twitterId and telegramId.\\n */\\npragma solidity ^0.8.17;\\nimport \\\"./helpers/SismoConnectLib.sol\\\";\\n\\ncontract MecenateVerifier is SismoConnect {\\n    bytes16 public appId;\\n\\n    constructor(bytes16 _appId) SismoConnect(buildConfig(_appId)) {\\n        appId = _appId;\\n    }\\n\\n    function sismoVerify(\\n        bytes memory sismoConnectResponse,\\n        address _to,\\n        bytes32 _nonce\\n    ) external view returns (bytes memory, uint256, uint256, bytes memory) {\\n        require(sismoConnectResponse.length > 0, \\\"empty response\\\");\\n\\n        // Build authorization requests\\n        AuthRequest[] memory auths = new AuthRequest[](3);\\n\\n        auths[0] = buildAuth(AuthType.VAULT);\\n\\n        auths[1] = buildAuth({\\n            authType: AuthType.TWITTER,\\n            isOptional: true,\\n            isSelectableByUser: true\\n        });\\n\\n        auths[2] = buildAuth({\\n            authType: AuthType.TELEGRAM,\\n            isOptional: true,\\n            isSelectableByUser: true\\n        });\\n\\n        // Verify the response\\n        SismoConnectVerifiedResult memory result = verify({\\n            responseBytes: sismoConnectResponse,\\n            auths: auths,\\n            signature: buildSignature({message: abi.encode(_to, _nonce)})\\n        });\\n\\n        bytes memory signedMessage = SismoConnectHelper.getSignedMessage(\\n            result\\n        );\\n\\n        // Store the verified auths\\n        VerifiedAuth[] memory _verifiedAuths = new VerifiedAuth[](\\n            result.auths.length\\n        );\\n\\n        for (uint256 i = 0; i < result.auths.length; i++) {\\n            _verifiedAuths[i] = result.auths[i];\\n        }\\n\\n        // Get the vaultId of the user\\n        // --> vaultId = hash(userVaultSecret, appId)\\n        uint256 vaultId = SismoConnectHelper.getUserId(result, AuthType.VAULT);\\n\\n        // Convert the vaultId to bytes\\n        bytes memory vaultIdBytes = abi.encodePacked(vaultId);\\n\\n        // Get the userId of the user\\n        uint256 twitterId = 0;\\n        uint256 telegramId = 0;\\n\\n        for (uint256 i = 0; i < _verifiedAuths.length; i++) {\\n            if (_verifiedAuths[i].authType == AuthType.TWITTER) {\\n                twitterId = SismoConnectHelper.getUserId(\\n                    result,\\n                    AuthType.TWITTER\\n                );\\n            } else if (_verifiedAuths[i].authType == AuthType.TELEGRAM) {\\n                telegramId = SismoConnectHelper.getUserId(\\n                    result,\\n                    AuthType.TELEGRAM\\n                );\\n            }\\n        }\\n\\n        return (vaultIdBytes, twitterId, telegramId, signedMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x6858d0536834b2e991fbdce649c3db1c75caea0ac70e2f880d8e39b62840ab29\"},\"contracts/helpers/SismoConnectLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {RequestBuilder, SismoConnectRequest, SismoConnectResponse, SismoConnectConfig} from \\\"./utils/RequestBuilder.sol\\\";\\nimport {AuthRequestBuilder, AuthRequest, Auth, VerifiedAuth, AuthType} from \\\"./utils/AuthRequestBuilder.sol\\\";\\nimport {ClaimRequestBuilder, ClaimRequest, Claim, VerifiedClaim, ClaimType} from \\\"./utils/ClaimRequestBuilder.sol\\\";\\nimport {SignatureBuilder, SignatureRequest, Signature} from \\\"./utils/SignatureBuilder.sol\\\";\\nimport {VaultConfig} from \\\"./utils/Structs.sol\\\";\\nimport {ISismoConnectVerifier, SismoConnectVerifiedResult} from \\\"./interfaces/ISismoConnectVerifier.sol\\\";\\nimport {IAddressesProvider} from \\\"./interfaces/IAddressesProvider.sol\\\";\\nimport {SismoConnectHelper} from \\\"./utils/SismoConnectHelper.sol\\\";\\n\\ncontract SismoConnect {\\n    uint256 public constant SISMO_CONNECT_LIB_VERSION = 2;\\n\\n    IAddressesProvider public constant ADDRESSES_PROVIDER_V2 =\\n        IAddressesProvider(0x3Cd5334eB64ebBd4003b72022CC25465f1BFcEe6);\\n\\n    ISismoConnectVerifier immutable _sismoConnectVerifier;\\n\\n    // external libraries\\n    AuthRequestBuilder immutable _authRequestBuilder;\\n    ClaimRequestBuilder immutable _claimRequestBuilder;\\n    SignatureBuilder immutable _signatureBuilder;\\n    RequestBuilder immutable _requestBuilder;\\n\\n    // config\\n    bytes16 public immutable APP_ID;\\n    bool public immutable IS_IMPERSONATION_MODE;\\n\\n    constructor(SismoConnectConfig memory _config) {\\n        APP_ID = _config.appId;\\n        IS_IMPERSONATION_MODE = _config.vault.isImpersonationMode;\\n\\n        _sismoConnectVerifier = ISismoConnectVerifier(\\n            ADDRESSES_PROVIDER_V2.get(string(\\\"sismoConnectVerifier-v1.2\\\"))\\n        );\\n        // external libraries\\n        _authRequestBuilder = AuthRequestBuilder(\\n            ADDRESSES_PROVIDER_V2.get(string(\\\"authRequestBuilder-v1.1\\\"))\\n        );\\n        _claimRequestBuilder = ClaimRequestBuilder(\\n            ADDRESSES_PROVIDER_V2.get(string(\\\"claimRequestBuilder-v1.1\\\"))\\n        );\\n        _signatureBuilder = SignatureBuilder(\\n            ADDRESSES_PROVIDER_V2.get(string(\\\"signatureBuilder-v1.1\\\"))\\n        );\\n        _requestBuilder = RequestBuilder(\\n            ADDRESSES_PROVIDER_V2.get(string(\\\"requestBuilder-v1.1\\\"))\\n        );\\n    }\\n\\n    // public function because it needs to be used by this contract and can be used by other contracts\\n    function config() public view returns (SismoConnectConfig memory) {\\n        return buildConfig(APP_ID);\\n    }\\n\\n    function buildConfig(\\n        bytes16 appId\\n    ) internal pure returns (SismoConnectConfig memory) {\\n        SismoConnectConfig memory result = SismoConnectConfig({\\n            appId: appId,\\n            vault: buildVaultConfig()\\n        });\\n        require(appId != bytes16(0), \\\"appId cannot be empty\\\");\\n        require(\\n            result.vault.isImpersonationMode == false,\\n            \\\"impersonation mode is not supported\\\"\\n        );\\n        return result;\\n    }\\n\\n    function buildVaultConfig() internal pure returns (VaultConfig memory) {\\n        return VaultConfig({isImpersonationMode: false});\\n    }\\n\\n    function verify(\\n        bytes memory responseBytes,\\n        AuthRequest[] memory auths,\\n        SignatureRequest memory signature\\n    ) internal view returns (SismoConnectVerifiedResult memory) {\\n        SismoConnectResponse memory response = abi.decode(\\n            responseBytes,\\n            (SismoConnectResponse)\\n        );\\n        SismoConnectRequest memory request = buildRequest(auths, signature);\\n        return _sismoConnectVerifier.verify(response, request, config());\\n    }\\n\\n    function buildAuth(\\n        AuthType authType,\\n        bool isOptional,\\n        bool isSelectableByUser\\n    ) internal view returns (AuthRequest memory) {\\n        return\\n            _authRequestBuilder.build(authType, isOptional, isSelectableByUser);\\n    }\\n\\n    function buildAuth(\\n        AuthType authType\\n    ) internal view returns (AuthRequest memory) {\\n        return _authRequestBuilder.build(authType);\\n    }\\n\\n    function buildSignature(\\n        bytes memory message\\n    ) internal view returns (SignatureRequest memory) {\\n        return _signatureBuilder.build(message);\\n    }\\n\\n    function buildRequest(\\n        AuthRequest[] memory auths,\\n        SignatureRequest memory signature\\n    ) internal view returns (SismoConnectRequest memory) {\\n        return _requestBuilder.build(auths, signature);\\n    }\\n\\n    function _GET_EMPTY_SIGNATURE_REQUEST()\\n        internal\\n        view\\n        returns (SignatureRequest memory)\\n    {\\n        return _signatureBuilder.buildEmpty();\\n    }\\n}\\n\",\"keccak256\":\"0x6d267a25892e4d994c0461da51e9436e76f21a20e70e74c2850f916840d4e0c8\",\"license\":\"MIT\"},\"contracts/helpers/interfaces/IAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IAddressesProvider {\\n    /**\\n     * @dev Sets the address of a contract.\\n     * @param contractAddress Address of the contract.\\n     * @param contractName Name of the contract.\\n     */\\n    function set(address contractAddress, string memory contractName) external;\\n\\n    /**\\n     * @dev Sets the address of multiple contracts.\\n     * @param contractAddresses Addresses of the contracts.\\n     * @param contractNames Names of the contracts.\\n     */\\n    function setBatch(\\n        address[] calldata contractAddresses,\\n        string[] calldata contractNames\\n    ) external;\\n\\n    /**\\n     * @dev Returns the address of a contract.\\n     * @param contractName Name of the contract (string).\\n     * @return Address of the contract.\\n     */\\n    function get(string memory contractName) external view returns (address);\\n\\n    /**\\n     * @dev Returns the address of a contract.\\n     * @param contractNameHash Hash of the name of the contract (bytes32).\\n     * @return Address of the contract.\\n     */\\n    function get(bytes32 contractNameHash) external view returns (address);\\n\\n    /**\\n     * @dev Returns the addresses of all contracts inputed.\\n     * @param contractNames Names of the contracts as strings.\\n     */\\n    function getBatch(\\n        string[] calldata contractNames\\n    ) external view returns (address[] memory);\\n\\n    /**\\n     * @dev Returns the addresses of all contracts inputed.\\n     * @param contractNamesHash Names of the contracts as strings.\\n     */\\n    function getBatch(\\n        bytes32[] calldata contractNamesHash\\n    ) external view returns (address[] memory);\\n\\n    /**\\n     * @dev Returns the addresses of all contracts in `_contractNames`\\n     * @return Names, Hashed Names and Addresses of all contracts.\\n     */\\n    function getAll()\\n        external\\n        view\\n        returns (string[] memory, bytes32[] memory, address[] memory);\\n}\\n\",\"keccak256\":\"0x5f1135d19d7813377136a0ef08c976d229e29ec7ae0889e0c8f4450cb31919be\",\"license\":\"MIT\"},\"contracts/helpers/interfaces/ISismoConnectVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"../utils/Structs.sol\\\";\\n\\ninterface ISismoConnectVerifier {\\n    event VerifierSet(bytes32, address);\\n\\n    error AppIdMismatch(bytes16 receivedAppId, bytes16 expectedAppId);\\n    error NamespaceMismatch(\\n        bytes16 receivedNamespace,\\n        bytes16 expectedNamespace\\n    );\\n    error VersionMismatch(bytes32 requestVersion, bytes32 responseVersion);\\n    error SignatureMessageMismatch(\\n        bytes requestMessageSignature,\\n        bytes responseMessageSignature\\n    );\\n\\n    function verify(\\n        SismoConnectResponse memory response,\\n        SismoConnectRequest memory request,\\n        SismoConnectConfig memory config\\n    ) external view returns (SismoConnectVerifiedResult memory);\\n\\n    function SISMO_CONNECT_VERSION() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x57cb5bc66fc79dc98111727958c9310c02fc632db0c3b1d07e2dfa8aefeb49e1\",\"license\":\"MIT\"},\"contracts/helpers/utils/AuthRequestBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Structs.sol\\\";\\n\\ncontract AuthRequestBuilder {\\n    // default values for Auth Request\\n    bool public constant DEFAULT_AUTH_REQUEST_IS_ANON = false;\\n    uint256 public constant DEFAULT_AUTH_REQUEST_USER_ID = 0;\\n    bool public constant DEFAULT_AUTH_REQUEST_IS_OPTIONAL = false;\\n    bytes public constant DEFAULT_AUTH_REQUEST_EXTRA_DATA = \\\"\\\";\\n\\n    error InvalidUserIdAndIsSelectableByUserAuthType();\\n    error InvalidUserIdAndAuthType();\\n\\n    function build(\\n        AuthType authType,\\n        bool isAnon,\\n        uint256 userId,\\n        bool isOptional,\\n        bool isSelectableByUser,\\n        bytes memory extraData\\n    ) external pure returns (AuthRequest memory) {\\n        return\\n            _build({\\n                authType: authType,\\n                isAnon: isAnon,\\n                userId: userId,\\n                isOptional: isOptional,\\n                isSelectableByUser: isSelectableByUser,\\n                extraData: extraData\\n            });\\n    }\\n\\n    function build(\\n        AuthType authType,\\n        bool isAnon,\\n        uint256 userId,\\n        bytes memory extraData\\n    ) external pure returns (AuthRequest memory) {\\n        return\\n            _build({\\n                authType: authType,\\n                isAnon: isAnon,\\n                userId: userId,\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\n                extraData: extraData\\n            });\\n    }\\n\\n    function build(\\n        AuthType authType\\n    ) external pure returns (AuthRequest memory) {\\n        return\\n            _build({\\n                authType: authType,\\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        AuthType authType,\\n        bool isAnon\\n    ) external pure returns (AuthRequest memory) {\\n        return\\n            _build({\\n                authType: authType,\\n                isAnon: isAnon,\\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        AuthType authType,\\n        uint256 userId\\n    ) external pure returns (AuthRequest memory) {\\n        return\\n            _build({\\n                authType: authType,\\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\n                userId: userId,\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        AuthType authType,\\n        bytes memory extraData\\n    ) external pure returns (AuthRequest memory) {\\n        return\\n            _build({\\n                authType: authType,\\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\n                extraData: extraData\\n            });\\n    }\\n\\n    function build(\\n        AuthType authType,\\n        bool isAnon,\\n        uint256 userId\\n    ) external pure returns (AuthRequest memory) {\\n        return\\n            _build({\\n                authType: authType,\\n                isAnon: isAnon,\\n                userId: userId,\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        AuthType authType,\\n        bool isAnon,\\n        bytes memory extraData\\n    ) external pure returns (AuthRequest memory) {\\n        return\\n            _build({\\n                authType: authType,\\n                isAnon: isAnon,\\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\n                extraData: extraData\\n            });\\n    }\\n\\n    function build(\\n        AuthType authType,\\n        uint256 userId,\\n        bytes memory extraData\\n    ) external pure returns (AuthRequest memory) {\\n        return\\n            _build({\\n                authType: authType,\\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\n                userId: userId,\\n                isOptional: DEFAULT_AUTH_REQUEST_IS_OPTIONAL,\\n                extraData: extraData\\n            });\\n    }\\n\\n    // allow dev to choose for isOptional\\n    // the user is ask to choose isSelectableByUser to avoid the function signature collision\\n    // between build(AuthType authType, bool isOptional) and build(AuthType authType, bool isAnon)\\n\\n    function build(\\n        AuthType authType,\\n        bool isOptional,\\n        bool isSelectableByUser\\n    ) external pure returns (AuthRequest memory) {\\n        return\\n            _build({\\n                authType: authType,\\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\\n                isOptional: isOptional,\\n                isSelectableByUser: isSelectableByUser,\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        AuthType authType,\\n        bool isOptional,\\n        bool isSelectableByUser,\\n        uint256 userId\\n    ) external pure returns (AuthRequest memory) {\\n        return\\n            _build({\\n                authType: authType,\\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\n                userId: userId,\\n                isOptional: isOptional,\\n                isSelectableByUser: isSelectableByUser,\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    // the user is ask to choose isSelectableByUser to avoid the function signature collision\\n    // between build(AuthType authType, bool isAnon, bool isOptional) and build(AuthType authType, bool isOptional, bool isSelectableByUser)\\n\\n    function build(\\n        AuthType authType,\\n        bool isAnon,\\n        bool isOptional,\\n        bool isSelectableByUser\\n    ) external pure returns (AuthRequest memory) {\\n        return\\n            _build({\\n                authType: authType,\\n                isAnon: isAnon,\\n                userId: DEFAULT_AUTH_REQUEST_USER_ID,\\n                isOptional: isOptional,\\n                isSelectableByUser: isSelectableByUser,\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        AuthType authType,\\n        uint256 userId,\\n        bool isOptional\\n    ) external pure returns (AuthRequest memory) {\\n        return\\n            _build({\\n                authType: authType,\\n                isAnon: DEFAULT_AUTH_REQUEST_IS_ANON,\\n                userId: userId,\\n                isOptional: isOptional,\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        AuthType authType,\\n        bool isAnon,\\n        uint256 userId,\\n        bool isOptional\\n    ) external pure returns (AuthRequest memory) {\\n        return\\n            _build({\\n                authType: authType,\\n                isAnon: isAnon,\\n                userId: userId,\\n                isOptional: isOptional,\\n                extraData: DEFAULT_AUTH_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function _build(\\n        AuthType authType,\\n        bool isAnon,\\n        uint256 userId,\\n        bool isOptional,\\n        bytes memory extraData\\n    ) internal pure returns (AuthRequest memory) {\\n        return\\n            _build({\\n                authType: authType,\\n                isAnon: isAnon,\\n                userId: userId,\\n                isOptional: isOptional,\\n                isSelectableByUser: _authIsSelectableDefaultValue(\\n                    authType,\\n                    userId\\n                ),\\n                extraData: extraData\\n            });\\n    }\\n\\n    function _build(\\n        AuthType authType,\\n        bool isAnon,\\n        uint256 userId,\\n        bool isOptional,\\n        bool isSelectableByUser,\\n        bytes memory extraData\\n    ) internal pure returns (AuthRequest memory) {\\n        // When `userId` is 0, it means the app does not require a specific auth account and the user needs\\n        // to choose the account they want to use for the app.\\n        // When `isSelectableByUser` is true, the user can select the account they want to use.\\n        // The combination of `userId = 0` and `isSelectableByUser = false` does not make sense and should not be used.\\n        // If this combination is detected, the function will revert with an error.\\n        if (\\n            authType != AuthType.VAULT &&\\n            userId == 0 &&\\n            isSelectableByUser == false\\n        ) {\\n            revert InvalidUserIdAndIsSelectableByUserAuthType();\\n        }\\n        // When requesting an authType VAULT, the `userId` must be 0 and isSelectableByUser must be true.\\n        if (\\n            authType == AuthType.VAULT &&\\n            userId != 0 &&\\n            isSelectableByUser == false\\n        ) {\\n            revert InvalidUserIdAndAuthType();\\n        }\\n        return\\n            AuthRequest({\\n                authType: authType,\\n                isAnon: isAnon,\\n                userId: userId,\\n                isOptional: isOptional,\\n                isSelectableByUser: isSelectableByUser,\\n                extraData: extraData\\n            });\\n    }\\n\\n    function _authIsSelectableDefaultValue(\\n        AuthType authType,\\n        uint256 requestedUserId\\n    ) internal pure returns (bool) {\\n        // isSelectableByUser value should always be false in case of VAULT authType.\\n        // This is because the user can't select the account they want to use for the app.\\n        // the userId = Hash(VaultSecret, AppId) in the case of VAULT authType.\\n        if (authType == AuthType.VAULT) {\\n            return false;\\n        }\\n        // When `requestedUserId` is 0, it means no specific auth account is requested by the app,\\n        // so we want the default value for `isSelectableByUser` to be `true`.\\n        if (requestedUserId == 0) {\\n            return true;\\n        }\\n        // When `requestedUserId` is not 0, it means a specific auth account is requested by the app,\\n        // so we want the default value for `isSelectableByUser` to be `false`.\\n        else {\\n            return false;\\n        }\\n        // However, the dev can still override this default value by setting `isSelectableByUser` to `true`.\\n    }\\n}\\n\",\"keccak256\":\"0xdc917673da6e3aeddd07bc734320776726a55a96b9996e1c5272202f002d1fe2\",\"license\":\"MIT\"},\"contracts/helpers/utils/ClaimRequestBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Structs.sol\\\";\\n\\ncontract ClaimRequestBuilder {\\n    // default value for Claim Request\\n    bytes16 public constant DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP =\\n        bytes16(\\\"latest\\\");\\n    uint256 public constant DEFAULT_CLAIM_REQUEST_VALUE = 1;\\n    ClaimType public constant DEFAULT_CLAIM_REQUEST_TYPE = ClaimType.GTE;\\n    bool public constant DEFAULT_CLAIM_REQUEST_IS_OPTIONAL = false;\\n    bool public constant DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER = true;\\n    bytes public constant DEFAULT_CLAIM_REQUEST_EXTRA_DATA = \\\"\\\";\\n\\n    function build(\\n        bytes16 groupId,\\n        bytes16 groupTimestamp,\\n        uint256 value,\\n        ClaimType claimType,\\n        bool isOptional,\\n        bool isSelectableByUser,\\n        bytes memory extraData\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                claimType: claimType,\\n                groupId: groupId,\\n                groupTimestamp: groupTimestamp,\\n                value: value,\\n                isOptional: isOptional,\\n                isSelectableByUser: isSelectableByUser,\\n                extraData: extraData\\n            });\\n    }\\n\\n    function build(\\n        bytes16 groupId,\\n        bytes16 groupTimestamp,\\n        uint256 value,\\n        ClaimType claimType,\\n        bytes memory extraData\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                claimType: claimType,\\n                groupId: groupId,\\n                groupTimestamp: groupTimestamp,\\n                value: value,\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n                extraData: extraData\\n            });\\n    }\\n\\n    function build(\\n        bytes16 groupId\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                groupId: groupId,\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        bytes16 groupId,\\n        bytes16 groupTimestamp\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                groupId: groupId,\\n                groupTimestamp: groupTimestamp,\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        bytes16 groupId,\\n        uint256 value\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                groupId: groupId,\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\n                value: value,\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        bytes16 groupId,\\n        ClaimType claimType\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                groupId: groupId,\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\n                claimType: claimType,\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        bytes16 groupId,\\n        bytes memory extraData\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                groupId: groupId,\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n                extraData: extraData\\n            });\\n    }\\n\\n    function build(\\n        bytes16 groupId,\\n        bytes16 groupTimestamp,\\n        uint256 value\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                groupId: groupId,\\n                groupTimestamp: groupTimestamp,\\n                value: value,\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        bytes16 groupId,\\n        bytes16 groupTimestamp,\\n        ClaimType claimType\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                groupId: groupId,\\n                groupTimestamp: groupTimestamp,\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\n                claimType: claimType,\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        bytes16 groupId,\\n        bytes16 groupTimestamp,\\n        bytes memory extraData\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                groupId: groupId,\\n                groupTimestamp: groupTimestamp,\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n                extraData: extraData\\n            });\\n    }\\n\\n    function build(\\n        bytes16 groupId,\\n        uint256 value,\\n        ClaimType claimType\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                groupId: groupId,\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\n                value: value,\\n                claimType: claimType,\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        bytes16 groupId,\\n        uint256 value,\\n        bytes memory extraData\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                groupId: groupId,\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\n                value: value,\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n                extraData: extraData\\n            });\\n    }\\n\\n    function build(\\n        bytes16 groupId,\\n        ClaimType claimType,\\n        bytes memory extraData\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                groupId: groupId,\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\n                claimType: claimType,\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n                extraData: extraData\\n            });\\n    }\\n\\n    function build(\\n        bytes16 groupId,\\n        bytes16 groupTimestamp,\\n        uint256 value,\\n        ClaimType claimType\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                groupId: groupId,\\n                groupTimestamp: groupTimestamp,\\n                value: value,\\n                claimType: claimType,\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        bytes16 groupId,\\n        bytes16 groupTimestamp,\\n        uint256 value,\\n        bytes memory extraData\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                groupId: groupId,\\n                groupTimestamp: groupTimestamp,\\n                value: value,\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n                extraData: extraData\\n            });\\n    }\\n\\n    function build(\\n        bytes16 groupId,\\n        bytes16 groupTimestamp,\\n        ClaimType claimType,\\n        bytes memory extraData\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                groupId: groupId,\\n                groupTimestamp: groupTimestamp,\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\n                claimType: claimType,\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n                extraData: extraData\\n            });\\n    }\\n\\n    function build(\\n        bytes16 groupId,\\n        uint256 value,\\n        ClaimType claimType,\\n        bytes memory extraData\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                groupId: groupId,\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\n                value: value,\\n                claimType: claimType,\\n                isOptional: DEFAULT_CLAIM_REQUEST_IS_OPTIONAL,\\n                isSelectableByUser: DEFAULT_CLAIM_REQUEST_IS_SELECTABLE_BY_USER,\\n                extraData: extraData\\n            });\\n    }\\n\\n    // allow dev to choose for isOptional\\n    // we force to also set isSelectableByUser\\n    // otherwise function signatures would be colliding\\n    // between build(bytes16 groupId, bool isOptional) and build(bytes16 groupId, bool isSelectableByUser)\\n    // we keep this logic for all function signature combinations\\n\\n    function build(\\n        bytes16 groupId,\\n        bool isOptional,\\n        bool isSelectableByUser\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                groupId: groupId,\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\n                isOptional: isOptional,\\n                isSelectableByUser: isSelectableByUser,\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        bytes16 groupId,\\n        bytes16 groupTimestamp,\\n        bool isOptional,\\n        bool isSelectableByUser\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                groupId: groupId,\\n                groupTimestamp: groupTimestamp,\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\n                isOptional: isOptional,\\n                isSelectableByUser: isSelectableByUser,\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        bytes16 groupId,\\n        uint256 value,\\n        bool isOptional,\\n        bool isSelectableByUser\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                groupId: groupId,\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\n                value: value,\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\n                isOptional: isOptional,\\n                isSelectableByUser: isSelectableByUser,\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        bytes16 groupId,\\n        ClaimType claimType,\\n        bool isOptional,\\n        bool isSelectableByUser\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                groupId: groupId,\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\n                claimType: claimType,\\n                isOptional: isOptional,\\n                isSelectableByUser: isSelectableByUser,\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        bytes16 groupId,\\n        bytes16 groupTimestamp,\\n        uint256 value,\\n        bool isOptional,\\n        bool isSelectableByUser\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                groupId: groupId,\\n                groupTimestamp: groupTimestamp,\\n                value: value,\\n                claimType: DEFAULT_CLAIM_REQUEST_TYPE,\\n                isOptional: isOptional,\\n                isSelectableByUser: isSelectableByUser,\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        bytes16 groupId,\\n        bytes16 groupTimestamp,\\n        ClaimType claimType,\\n        bool isOptional,\\n        bool isSelectableByUser\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                groupId: groupId,\\n                groupTimestamp: groupTimestamp,\\n                value: DEFAULT_CLAIM_REQUEST_VALUE,\\n                claimType: claimType,\\n                isOptional: isOptional,\\n                isSelectableByUser: isSelectableByUser,\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        bytes16 groupId,\\n        uint256 value,\\n        ClaimType claimType,\\n        bool isOptional,\\n        bool isSelectableByUser\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                groupId: groupId,\\n                groupTimestamp: DEFAULT_CLAIM_REQUEST_GROUP_TIMESTAMP,\\n                value: value,\\n                claimType: claimType,\\n                isOptional: isOptional,\\n                isSelectableByUser: isSelectableByUser,\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        bytes16 groupId,\\n        bytes16 groupTimestamp,\\n        uint256 value,\\n        ClaimType claimType,\\n        bool isOptional,\\n        bool isSelectableByUser\\n    ) external pure returns (ClaimRequest memory) {\\n        return\\n            ClaimRequest({\\n                groupId: groupId,\\n                groupTimestamp: groupTimestamp,\\n                value: value,\\n                claimType: claimType,\\n                isOptional: isOptional,\\n                isSelectableByUser: isSelectableByUser,\\n                extraData: DEFAULT_CLAIM_REQUEST_EXTRA_DATA\\n            });\\n    }\\n}\\n\",\"keccak256\":\"0xba0027bff993008a781805e7ae87a07d639cfefa816c5612518ce4da53289dbc\",\"license\":\"MIT\"},\"contracts/helpers/utils/RequestBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Structs.sol\\\";\\nimport {SignatureBuilder} from \\\"./SignatureBuilder.sol\\\";\\n\\ncontract RequestBuilder {\\n    // default value for namespace\\n    bytes16 public constant DEFAULT_NAMESPACE = bytes16(keccak256(\\\"main\\\"));\\n    // default value for a signature request\\n    SignatureRequest DEFAULT_SIGNATURE_REQUEST =\\n        SignatureRequest({\\n            message: \\\"MESSAGE_SELECTED_BY_USER\\\",\\n            isSelectableByUser: false,\\n            extraData: \\\"\\\"\\n        });\\n\\n    function build(\\n        AuthRequest memory auth,\\n        ClaimRequest memory claim,\\n        SignatureRequest memory signature,\\n        bytes16 namespace\\n    ) external pure returns (SismoConnectRequest memory) {\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\n        auths[0] = auth;\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\n        claims[0] = claim;\\n        return (\\n            SismoConnectRequest({\\n                namespace: namespace,\\n                auths: auths,\\n                claims: claims,\\n                signature: signature\\n            })\\n        );\\n    }\\n\\n    function build(\\n        AuthRequest memory auth,\\n        ClaimRequest memory claim,\\n        bytes16 namespace\\n    ) external view returns (SismoConnectRequest memory) {\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\n        auths[0] = auth;\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\n        claims[0] = claim;\\n        return (\\n            SismoConnectRequest({\\n                namespace: namespace,\\n                auths: auths,\\n                claims: claims,\\n                signature: DEFAULT_SIGNATURE_REQUEST\\n            })\\n        );\\n    }\\n\\n    function build(\\n        ClaimRequest memory claim,\\n        SignatureRequest memory signature,\\n        bytes16 namespace\\n    ) external pure returns (SismoConnectRequest memory) {\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\n        claims[0] = claim;\\n        return (\\n            SismoConnectRequest({\\n                namespace: namespace,\\n                auths: auths,\\n                claims: claims,\\n                signature: signature\\n            })\\n        );\\n    }\\n\\n    function build(\\n        ClaimRequest memory claim,\\n        bytes16 namespace\\n    ) external view returns (SismoConnectRequest memory) {\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\n        claims[0] = claim;\\n        return (\\n            SismoConnectRequest({\\n                namespace: namespace,\\n                auths: auths,\\n                claims: claims,\\n                signature: DEFAULT_SIGNATURE_REQUEST\\n            })\\n        );\\n    }\\n\\n    function build(\\n        AuthRequest memory auth,\\n        SignatureRequest memory signature,\\n        bytes16 namespace\\n    ) external pure returns (SismoConnectRequest memory) {\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\n        auths[0] = auth;\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\n        return (\\n            SismoConnectRequest({\\n                namespace: namespace,\\n                auths: auths,\\n                claims: claims,\\n                signature: signature\\n            })\\n        );\\n    }\\n\\n    function build(\\n        AuthRequest memory auth,\\n        bytes16 namespace\\n    ) external view returns (SismoConnectRequest memory) {\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\n        auths[0] = auth;\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\n        return (\\n            SismoConnectRequest({\\n                namespace: namespace,\\n                auths: auths,\\n                claims: claims,\\n                signature: DEFAULT_SIGNATURE_REQUEST\\n            })\\n        );\\n    }\\n\\n    function build(\\n        AuthRequest memory auth,\\n        ClaimRequest memory claim,\\n        SignatureRequest memory signature\\n    ) external pure returns (SismoConnectRequest memory) {\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\n        auths[0] = auth;\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\n        claims[0] = claim;\\n        return (\\n            SismoConnectRequest({\\n                namespace: DEFAULT_NAMESPACE,\\n                auths: auths,\\n                claims: claims,\\n                signature: signature\\n            })\\n        );\\n    }\\n\\n    function build(\\n        AuthRequest memory auth,\\n        ClaimRequest memory claim\\n    ) external view returns (SismoConnectRequest memory) {\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\n        auths[0] = auth;\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\n        claims[0] = claim;\\n        return (\\n            SismoConnectRequest({\\n                namespace: DEFAULT_NAMESPACE,\\n                auths: auths,\\n                claims: claims,\\n                signature: DEFAULT_SIGNATURE_REQUEST\\n            })\\n        );\\n    }\\n\\n    function build(\\n        AuthRequest memory auth,\\n        SignatureRequest memory signature\\n    ) external pure returns (SismoConnectRequest memory) {\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\n        auths[0] = auth;\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\n        return (\\n            SismoConnectRequest({\\n                namespace: DEFAULT_NAMESPACE,\\n                auths: auths,\\n                claims: claims,\\n                signature: signature\\n            })\\n        );\\n    }\\n\\n    function build(\\n        AuthRequest memory auth\\n    ) external view returns (SismoConnectRequest memory) {\\n        AuthRequest[] memory auths = new AuthRequest[](1);\\n        auths[0] = auth;\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\n        return (\\n            SismoConnectRequest({\\n                namespace: DEFAULT_NAMESPACE,\\n                auths: auths,\\n                claims: claims,\\n                signature: DEFAULT_SIGNATURE_REQUEST\\n            })\\n        );\\n    }\\n\\n    function build(\\n        ClaimRequest memory claim,\\n        SignatureRequest memory signature\\n    ) external pure returns (SismoConnectRequest memory) {\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\n        claims[0] = claim;\\n        return (\\n            SismoConnectRequest({\\n                namespace: DEFAULT_NAMESPACE,\\n                auths: auths,\\n                claims: claims,\\n                signature: signature\\n            })\\n        );\\n    }\\n\\n    function build(\\n        ClaimRequest memory claim\\n    ) external view returns (SismoConnectRequest memory) {\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\n        ClaimRequest[] memory claims = new ClaimRequest[](1);\\n        claims[0] = claim;\\n        return (\\n            SismoConnectRequest({\\n                namespace: DEFAULT_NAMESPACE,\\n                auths: auths,\\n                claims: claims,\\n                signature: DEFAULT_SIGNATURE_REQUEST\\n            })\\n        );\\n    }\\n\\n    // build with arrays for auths and claims\\n    function build(\\n        AuthRequest[] memory auths,\\n        ClaimRequest[] memory claims,\\n        SignatureRequest memory signature,\\n        bytes16 namespace\\n    ) external pure returns (SismoConnectRequest memory) {\\n        return (\\n            SismoConnectRequest({\\n                namespace: namespace,\\n                auths: auths,\\n                claims: claims,\\n                signature: signature\\n            })\\n        );\\n    }\\n\\n    function build(\\n        AuthRequest[] memory auths,\\n        ClaimRequest[] memory claims,\\n        bytes16 namespace\\n    ) external view returns (SismoConnectRequest memory) {\\n        return (\\n            SismoConnectRequest({\\n                namespace: namespace,\\n                auths: auths,\\n                claims: claims,\\n                signature: DEFAULT_SIGNATURE_REQUEST\\n            })\\n        );\\n    }\\n\\n    function build(\\n        ClaimRequest[] memory claims,\\n        SignatureRequest memory signature,\\n        bytes16 namespace\\n    ) external pure returns (SismoConnectRequest memory) {\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\n        return (\\n            SismoConnectRequest({\\n                namespace: namespace,\\n                auths: auths,\\n                claims: claims,\\n                signature: signature\\n            })\\n        );\\n    }\\n\\n    function build(\\n        ClaimRequest[] memory claims,\\n        bytes16 namespace\\n    ) external view returns (SismoConnectRequest memory) {\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\n        return (\\n            SismoConnectRequest({\\n                namespace: namespace,\\n                auths: auths,\\n                claims: claims,\\n                signature: DEFAULT_SIGNATURE_REQUEST\\n            })\\n        );\\n    }\\n\\n    function build(\\n        AuthRequest[] memory auths,\\n        SignatureRequest memory signature,\\n        bytes16 namespace\\n    ) external pure returns (SismoConnectRequest memory) {\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\n        return (\\n            SismoConnectRequest({\\n                namespace: namespace,\\n                auths: auths,\\n                claims: claims,\\n                signature: signature\\n            })\\n        );\\n    }\\n\\n    function build(\\n        AuthRequest[] memory auths,\\n        bytes16 namespace\\n    ) external view returns (SismoConnectRequest memory) {\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\n        return (\\n            SismoConnectRequest({\\n                namespace: namespace,\\n                auths: auths,\\n                claims: claims,\\n                signature: DEFAULT_SIGNATURE_REQUEST\\n            })\\n        );\\n    }\\n\\n    function build(\\n        AuthRequest[] memory auths,\\n        ClaimRequest[] memory claims,\\n        SignatureRequest memory signature\\n    ) external pure returns (SismoConnectRequest memory) {\\n        return (\\n            SismoConnectRequest({\\n                namespace: DEFAULT_NAMESPACE,\\n                auths: auths,\\n                claims: claims,\\n                signature: signature\\n            })\\n        );\\n    }\\n\\n    function build(\\n        AuthRequest[] memory auths,\\n        ClaimRequest[] memory claims\\n    ) external view returns (SismoConnectRequest memory) {\\n        return (\\n            SismoConnectRequest({\\n                namespace: DEFAULT_NAMESPACE,\\n                auths: auths,\\n                claims: claims,\\n                signature: DEFAULT_SIGNATURE_REQUEST\\n            })\\n        );\\n    }\\n\\n    function build(\\n        AuthRequest[] memory auths,\\n        SignatureRequest memory signature\\n    ) external pure returns (SismoConnectRequest memory) {\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\n        return (\\n            SismoConnectRequest({\\n                namespace: DEFAULT_NAMESPACE,\\n                auths: auths,\\n                claims: claims,\\n                signature: signature\\n            })\\n        );\\n    }\\n\\n    function build(\\n        AuthRequest[] memory auths\\n    ) external view returns (SismoConnectRequest memory) {\\n        ClaimRequest[] memory claims = new ClaimRequest[](0);\\n        return (\\n            SismoConnectRequest({\\n                namespace: DEFAULT_NAMESPACE,\\n                auths: auths,\\n                claims: claims,\\n                signature: DEFAULT_SIGNATURE_REQUEST\\n            })\\n        );\\n    }\\n\\n    function build(\\n        ClaimRequest[] memory claims,\\n        SignatureRequest memory signature\\n    ) external pure returns (SismoConnectRequest memory) {\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\n        return (\\n            SismoConnectRequest({\\n                namespace: DEFAULT_NAMESPACE,\\n                auths: auths,\\n                claims: claims,\\n                signature: signature\\n            })\\n        );\\n    }\\n\\n    function build(\\n        ClaimRequest[] memory claims\\n    ) external view returns (SismoConnectRequest memory) {\\n        AuthRequest[] memory auths = new AuthRequest[](0);\\n        return (\\n            SismoConnectRequest({\\n                namespace: DEFAULT_NAMESPACE,\\n                auths: auths,\\n                claims: claims,\\n                signature: DEFAULT_SIGNATURE_REQUEST\\n            })\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x0550adf7ad1ecddd6b1008913a8729f8fdda351d8ad1e91ccf971af5a625341d\",\"license\":\"MIT\"},\"contracts/helpers/utils/SignatureBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Structs.sol\\\";\\n\\ncontract SignatureBuilder {\\n    // default values for Signature Request\\n    bytes public constant DEFAULT_SIGNATURE_REQUEST_MESSAGE =\\n        \\\"MESSAGE_SELECTED_BY_USER\\\";\\n    bool public constant DEFAULT_SIGNATURE_REQUEST_IS_SELECTABLE_BY_USER =\\n        false;\\n    bytes public constant DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA = \\\"\\\";\\n\\n    function build(\\n        bytes memory message\\n    ) external pure returns (SignatureRequest memory) {\\n        return\\n            SignatureRequest({\\n                message: message,\\n                isSelectableByUser: DEFAULT_SIGNATURE_REQUEST_IS_SELECTABLE_BY_USER,\\n                extraData: DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        bytes memory message,\\n        bool isSelectableByUser\\n    ) external pure returns (SignatureRequest memory) {\\n        return\\n            SignatureRequest({\\n                message: message,\\n                isSelectableByUser: isSelectableByUser,\\n                extraData: DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        bytes memory message,\\n        bytes memory extraData\\n    ) external pure returns (SignatureRequest memory) {\\n        return\\n            SignatureRequest({\\n                message: message,\\n                isSelectableByUser: DEFAULT_SIGNATURE_REQUEST_IS_SELECTABLE_BY_USER,\\n                extraData: extraData\\n            });\\n    }\\n\\n    function build(\\n        bytes memory message,\\n        bool isSelectableByUser,\\n        bytes memory extraData\\n    ) external pure returns (SignatureRequest memory) {\\n        return\\n            SignatureRequest({\\n                message: message,\\n                isSelectableByUser: isSelectableByUser,\\n                extraData: extraData\\n            });\\n    }\\n\\n    function build(\\n        bool isSelectableByUser\\n    ) external pure returns (SignatureRequest memory) {\\n        return\\n            SignatureRequest({\\n                message: DEFAULT_SIGNATURE_REQUEST_MESSAGE,\\n                isSelectableByUser: isSelectableByUser,\\n                extraData: DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA\\n            });\\n    }\\n\\n    function build(\\n        bool isSelectableByUser,\\n        bytes memory extraData\\n    ) external pure returns (SignatureRequest memory) {\\n        return\\n            SignatureRequest({\\n                message: DEFAULT_SIGNATURE_REQUEST_MESSAGE,\\n                isSelectableByUser: isSelectableByUser,\\n                extraData: extraData\\n            });\\n    }\\n\\n    function buildEmpty() external pure returns (SignatureRequest memory) {\\n        return\\n            SignatureRequest({\\n                message: DEFAULT_SIGNATURE_REQUEST_MESSAGE,\\n                isSelectableByUser: DEFAULT_SIGNATURE_REQUEST_IS_SELECTABLE_BY_USER,\\n                extraData: DEFAULT_SIGNATURE_REQUEST_EXTRA_DATA\\n            });\\n    }\\n}\\n\",\"keccak256\":\"0xbde2c641c6defa59a545060ff475feed58522c295c2f5f2cd0e0436f1f440216\",\"license\":\"MIT\"},\"contracts/helpers/utils/SismoConnectHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Structs.sol\\\";\\n\\nlibrary SismoConnectHelper {\\n    error AuthTypeNotFoundInVerifiedResult(AuthType authType);\\n\\n    function getUserId(\\n        SismoConnectVerifiedResult memory result,\\n        AuthType authType\\n    ) internal pure returns (uint256) {\\n        // get the first userId that matches the authType\\n        for (uint256 i = 0; i < result.auths.length; i++) {\\n            if (result.auths[i].authType == authType) {\\n                return result.auths[i].userId;\\n            }\\n        }\\n        revert AuthTypeNotFoundInVerifiedResult(authType);\\n    }\\n\\n    function getUserIds(\\n        SismoConnectVerifiedResult memory result,\\n        AuthType authType\\n    ) internal pure returns (uint256[] memory) {\\n        // get all userIds that match the authType\\n        uint256[] memory userIds = new uint256[](result.auths.length);\\n        for (uint256 i = 0; i < result.auths.length; i++) {\\n            if (result.auths[i].authType == authType) {\\n                userIds[i] = result.auths[i].userId;\\n            }\\n        }\\n        return userIds;\\n    }\\n\\n    function getSignedMessage(\\n        SismoConnectVerifiedResult memory result\\n    ) internal pure returns (bytes memory) {\\n        return result.signedMessage;\\n    }\\n}\\n\",\"keccak256\":\"0x807291f1d7bd91087b954384954f6fb88e324baa75651f807339dd5c04d2ed39\",\"license\":\"MIT\"},\"contracts/helpers/utils/Structs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nstruct SismoConnectRequest {\\n    bytes16 namespace;\\n    AuthRequest[] auths;\\n    ClaimRequest[] claims;\\n    SignatureRequest signature;\\n}\\n\\nstruct SismoConnectConfig {\\n    bytes16 appId;\\n    VaultConfig vault;\\n}\\n\\nstruct VaultConfig {\\n    bool isImpersonationMode;\\n}\\n\\nstruct AuthRequest {\\n    AuthType authType;\\n    uint256 userId; // default: 0\\n    // flags\\n    bool isAnon; // default: false -> true not supported yet, need to throw if true\\n    bool isOptional; // default: false\\n    bool isSelectableByUser; // default: true\\n    //\\n    bytes extraData; // default: \\\"\\\"\\n}\\n\\nstruct ClaimRequest {\\n    ClaimType claimType; // default: GTE\\n    bytes16 groupId;\\n    bytes16 groupTimestamp; // default: bytes16(\\\"latest\\\")\\n    uint256 value; // default: 1\\n    // flags\\n    bool isOptional; // default: false\\n    bool isSelectableByUser; // default: true\\n    //\\n    bytes extraData; // default: \\\"\\\"\\n}\\n\\nstruct SignatureRequest {\\n    bytes message; // default: \\\"MESSAGE_SELECTED_BY_USER\\\"\\n    bool isSelectableByUser; // default: false\\n    bytes extraData; // default: \\\"\\\"\\n}\\n\\nenum AuthType {\\n    VAULT,\\n    GITHUB,\\n    TWITTER,\\n    EVM_ACCOUNT,\\n    TELEGRAM,\\n    DISCORD\\n}\\n\\nenum ClaimType {\\n    GTE,\\n    GT,\\n    EQ,\\n    LT,\\n    LTE\\n}\\n\\nstruct Auth {\\n    AuthType authType;\\n    bool isAnon;\\n    bool isSelectableByUser;\\n    uint256 userId;\\n    bytes extraData;\\n}\\n\\nstruct Claim {\\n    ClaimType claimType;\\n    bytes16 groupId;\\n    bytes16 groupTimestamp;\\n    bool isSelectableByUser;\\n    uint256 value;\\n    bytes extraData;\\n}\\n\\nstruct Signature {\\n    bytes message;\\n    bytes extraData;\\n}\\n\\nstruct SismoConnectResponse {\\n    bytes16 appId;\\n    bytes16 namespace;\\n    bytes32 version;\\n    bytes signedMessage;\\n    SismoConnectProof[] proofs;\\n}\\n\\nstruct SismoConnectProof {\\n    Auth[] auths;\\n    Claim[] claims;\\n    bytes32 provingScheme;\\n    bytes proofData;\\n    bytes extraData;\\n}\\n\\nstruct SismoConnectVerifiedResult {\\n    bytes16 appId;\\n    bytes16 namespace;\\n    bytes32 version;\\n    VerifiedAuth[] auths;\\n    VerifiedClaim[] claims;\\n    bytes signedMessage;\\n}\\n\\nstruct VerifiedAuth {\\n    AuthType authType;\\n    bool isAnon;\\n    uint256 userId;\\n    bytes extraData;\\n    bytes proofData;\\n}\\n\\nstruct VerifiedClaim {\\n    ClaimType claimType;\\n    bytes16 groupId;\\n    bytes16 groupTimestamp;\\n    uint256 value;\\n    bytes extraData;\\n    uint256 proofId;\\n    bytes proofData;\\n}\\n\",\"keccak256\":\"0xd89e74c139d4a9c6e66d446f10b494b07f699ec7122e2a5aee8140c30e7ecafb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610160604081815234620004d557816200254c803803809162000023828562000528565b8339602093849181010312620004d557516001600160801b03198082169290838303620004d5578151906200005882620004da565b600091828152868451916200006d836200050c565b848352015281835162000080816200050c565b528251946200008f866200050c565b828652835190620000a082620004da565b8082528782019687521562000491578551516200044157819051169461012095865251511515936101409485528351620000da81620004da565b601981527f7369736d6f436f6e6e65637456657269666965722d76312e320000000000000088820152845190816200012163349f642f60e11b92838352600483016200056d565b038983733cd5334eb64ebbd4003b72022cc25465f1bfcee69281845afa9283156200043757869362000413575b506001600160a01b039283166080528651620001ad908b906200017181620004da565b601781527f61757468526571756573744275696c6465722d76312e3100000000000000000082820152895180938192878352600483016200056d565b0381855afa908115620003c5579084918891620003f1575b501660a052620002188a8851620001dc81620004da565b601881527f636c61696d526571756573744275696c6465722d76312e31000000000000000082820152895180938192878352600483016200056d565b0381855afa908115620003c5579084918891620003cf575b501660c052620002838a88516200024781620004da565b601581527f7369676e61747572654275696c6465722d76312e31000000000000000000000082820152895180938192878352600483016200056d565b0381855afa908115620003c5579184620002f294928d948a91620003a3575b501660e052885191620002b583620004da565b601383527f726571756573744275696c6465722d76312e31000000000000000000000000008484015289518095819482938352600483016200056d565b03915afa9889156200039957859962000363575b50506101009716875260801c908254161790555191611f939384620005b9853960805184610c76015260a05184610249015260c05184505060e0518461039901525183610aee01525182818160af0152611ac40152518160eb0152f35b62000388929950803d1062000391575b6200037f818362000528565b8101906200054c565b96388062000306565b503d62000373565b86513d87823e3d90fd5b620003be9150853d871162000391576200037f818362000528565b38620002a2565b88513d89823e3d90fd5b620003ea91508c8d3d1062000391576200037f818362000528565b3862000230565b6200040c91508c8d3d1062000391576200037f818362000528565b38620001c5565b6200042f9193508a3d8c1162000391576200037f818362000528565b91386200014e565b87513d88823e3d90fd5b835162461bcd60e51b815260048101889052602360248201527f696d706572736f6e6174696f6e206d6f6465206973206e6f7420737570706f726044820152621d195960ea1b6064820152608490fd5b835162461bcd60e51b815260048101889052601560248201527f61707049642063616e6e6f7420626520656d70747900000000000000000000006044820152606490fd5b600080fd5b604081019081106001600160401b03821117620004f657604052565b634e487b7160e01b600052604160045260246000fd5b602081019081106001600160401b03821117620004f657604052565b601f909101601f19168101906001600160401b03821190821017620004f657604052565b90816020910312620004d557516001600160a01b0381168103620004d55790565b6020808252825181830181905290939260005b828110620005a357505060409293506000838284010152601f8019910116010190565b8181018601518482016040015285016200058056fe6101e080604052600436101561001457600080fd5b60003560e01c9081634691630114611803575080637276069d1461017b57806379502c551461013b57806380afdea814610110578063a183dc27146100d3578063c187bbc11461008e5763c9512d991461006d57600080fd5b3461008957600036600319011261008957602060405160028152f35b600080fd5b346100895760003660031901126100895760206040516001600160801b03197f0000000000000000000000000000000000000000000000000000000000000000168152f35b346100895760003660031901126100895760206040517f000000000000000000000000000000000000000000000000000000000000000015158152f35b3461008957600036600319011261008957602060005460801b604051906001600160801b0319168152f35b34610089576000366003190112610089576040610156611a84565b61017982518092602080916001600160801b031981511684520151511515910152565bf35b34610089576060366003190112610089576004356001600160401b0381116100895736602382011215610089578060040135906101c66101ba83611924565b60405180608052611903565b8160805152366024838301011161008957816000926024602093018360805101376080510101526024356001600160a01b038116908190036100895760805151156117cd57604051906102188261187c565b6003825260005b606081106117b6575061023061199e565b50604051633a0ba6ff60e01b81526000600482018190527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316919081602481855afa90811561120c5760009161179b575b50610293846119d3565b5261029d836119d3565b506102a661199e565b50604051630c3bcacd60e41b808252600260048301526001602483018190526044830152600082606481865afa801561120c576000928391611781575b506102ed866119f6565b526102f7856119f6565b5061030061199e565b50606460405180948193825260048083015260016024830152600160448301525afa91821561120c5761039592600092839161175f575b5061034185611a06565b5261034b84611a06565b5060405190602082015260443560408201526040815261036a816118e8565b610372611d9d565b5060405180938192631a0d7ccb60e21b8352602060048401526024830190611962565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561120c5760009161171e575b50606060a06040516103e381611830565b600081526000602082015260006040820152828082015282608082015201526080518051810161018052602081610180510312610089576020810151610100526001600160401b0361010051116100895760a09061010051016101805103126100895760405161045281611861565b6104656020610100516080510101611b93565b815261047a6040610100516080510101611b93565b6020820152606061010051608051010151604082015261010051608051016080810151906001600160401b0382116100895760206104c092816101805101920101611ba8565b6060820152610100516080510160a081015160c0526001600160401b0360c051116100895760206101805101603f60c05183010112156100895760c05101602001519161050c83611987565b9361051a6040519586611903565b838552602085019460c0516101005160805101016020610180510160408760051b8301011161008957604001610120529194935b60c05161010051608051010160408260051b820101610120511015610a7a5761012051516101c0526001600160401b036101c051116100895760a090601f19906101c0510161018051030112610089576040516101a0526105b16101a051611861565b6101c05160c05161010051608051010101604081015160e0526001600160401b0360e051116100895760206101805101605f60e05183010112156100895760409060e0510101516101405261060861014051611987565b956106166040519788611903565b610140518752602087019260e0516101c05160c05161010051608051010101016020610180510160606101405160051b8301011161008957606001935b60e0516101c05160c05161010051608051010101019060606101405160051b830101861015610794578551916001600160401b038311610089576101805160a09184019003603f19011261008957604051916106ae83611861565b60608160e0516101c05160c051610100516080510101010101015160068110156100895783526106f560808260e0516101c05160c051610100518551010101010101611bed565b602084015261071c60a08260e0516101c05160c05161010051608051010101010101611bed565b604084015260c08160e0516101c05183516101005160805101010101010151606084015260e0516101c05160c0516101005160805101010101019060e0820151926001600160401b038411610089576107846020949360608695866101805101920101611ba8565b6080820152815201940193610653565b5050939196909492506101a051526101c05160c05161010051608051010101606081015160a0526001600160401b0360a051116100895760206101805101605f60a05183010112156100895760409060a051010151610160526107f961016051611987565b956108076040519788611903565b610160518752602087019260a0516101c05160c05161010051608051010101016020610180510160606101605160051b8301011161008957606001935b60a0516101c05160c05161010051608051010101019060606101605160051b8301018610156109ac578551916001600160401b038311610089576101805160c09184019003603f190112610089576040519161089f83611830565b60608160a0516101c05160c051610100516080510101010101015160058110156100895783526108e660808260a0516101c05160c051610100518551010101010101611b93565b602084015261090c60a08281516101c05160c05161010051608051010101010101611b93565b604084015261093260c08260a0516101c051835161010051608051010101010101611bed565b606084015260e08160a0516101c05160c0516101005160805101010101010151608084015260a0516101c05160c05161010051608051010101010190610100820151926001600160401b0384116100895761099c6020949360608695866101805101920101611ba8565b60a0820152815201940193610844565b50509493925094909560206101a051015260806101c05160c051610100518351010101015160406101a05101526101c05160c0516101005160805101010160a0810151906001600160401b038211610089576040610a139260206101805101920101611ba8565b60606101a05101526101c05160c051610100516080510101019060c08201516001600160401b038111610089576020926040610a5792856101805101920101611ba8565b60806101a05101526101a05181520194602061012051016101205291949361054e565b84876000610ad886886080860152604051610a948161187c565b83815260606020820152606060408201526060610aaf611d9d565b910152610aea6040519485938493632ceb1e8d60e01b8552604060048601526044850190611c14565b83810360031901602485015290611cb7565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561120c5760009161145a575b5090610b31611a84565b906040519283916312b037ff60e01b8352608060048401526001600160801b031981511660848401526001600160801b031960208201511660a4840152604081015160c48401526080610b94606083015160a060e4870152610124860190611962565b9101519060831984820301610104850152815180825260208201916020808360051b8301019401926000915b8383106112b05750505050506003198382030160248401526001600160801b03198251168152610bff6020830151608060208401526080830190611c14565b916040810151928281036040840152835180825260208201916020808360051b8301019601926000915b8383106112185788600081808d610c72610c518e8e60608f0151906060818403910152611cb7565b82516001600160801b03191660448501526020909201515115156064840152565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561120c57600091610e6a575b5060a081015190606081019081515192610cc884611987565b93610cd66040519586611903565b808552610ce5601f1991611987565b0160005b818110610e3157505060005b83518051821015610d2f5790610d0e81610d2a93611a16565b51610d198288611a16565b52610d248187611a16565b50611a2a565b610cf5565b50509150610d3c81611e23565b60405190602082015260208152610d52816118b2565b600080936000915b8651831015610df757610d76610d708489611a16565b51611a4f565b60069081811015610de157600203610da2575050610d9c610d9685611f01565b92611a2a565b91610d5a565b610db2610d70858a969496611a16565b90811015610de157600414610dcb575b610d9c90611a2a565b9450610d9c610dd985611ea6565b959050610dc2565b634e487b7160e01b600052602160045260246000fd5b610e2d8491610e159388604051958695608087526080870190611962565b92602086015260408501528382036060850152611962565b0390f35b602090604051610e4081611861565b60008152600083820152600060408201526060808201526060608082015282828901015201610ce9565b90503d806000833e610e7c8183611903565b6020828281010312610089578151916001600160401b0383116100895760c083820183830103126100895760405192610eb484611830565b610ebf818301611b93565b8452610ecf602082840101611b93565b602085015281810160408181015190860152606001516001600160401b03811161008957838301601f828486010101121561008957808284010151610f1381611987565b91610f216040519384611903565b8183526020830186860160208460051b84888a0101010111610089576020828688010101905b60208460051b84888a01010101821061112257505050506060850152608081830101516001600160401b03811161008957838301601f828486010101121561008957808284010151610f9881611987565b91610fa66040519384611903565b8183526020830186860160208460051b84888a0101010111610089576020828688010101905b60208460051b84888a0101010182106110175750505050608085015260a08183010151906001600160401b0382116100895761100c938301920101611ba8565b60a082015281610caf565b81516001600160401b0381116100895760e0888801850182018a8a0103601f190112610089576040519161104a83611897565b602082868a8c01010101516005811015610089578352611072604083878b8d01010101611b93565b6020840152611089606083878b8d01010101611b93565b6040840152888801850182016080810151606085015260a001516001600160401b038111610089576110c9908b8b01908a8c018801850101602001611ba8565b60808401528888018501820160c081015160a085015260e00151906001600160401b038211610089576020936111108b868096958f968b8f84998601950101010101611ba8565b60c08201528152019201919050610fcc565b81516001600160401b0381116100895760a0888801850182018a8a0103601f190112610089576040519161115583611861565b602082868a8c0101010151600681101561008957835261117d604083878b8d01010101611bed565b60208401528888018501820160608101516040850152608001516001600160401b038111610089576111bd908b8b01908a8c018801850101602001611ba8565b606084015260a082868a8c0101010151906001600160401b038211610089576020936111fa8b868096958f968b8f84998601950101010101611ba8565b60808201528152019201919050610f47565b6040513d6000823e3d90fd5b919397509193949560208061129c600193601f1986820301875260e08c5191611242818451611c07565b6001600160801b03198584015116858201526001600160801b031960408401511660408201526060830151606082015260808301511515608082015260a0830151151560a08201528160c080940151938201520190611962565b990193019301909289979695949293610c29565b91939596509193601f1982820301835285519060a0810182519060a08352815180915260c08301602060c08360051b86010193019160005b8181106113f7575050505060208301519082810360208401528151808252602082016020808360051b85010194019260005b838110611376575050505050611363836020936080611352869560406001990151604085015260608501518482036060860152611962565b920151906080818403910152611962565b9701930193019092889695949293610bc0565b90919293946020806113ea600193601f1987820301885260c060a08b5161139e848251611c07565b6001600160801b03198682015116868501526001600160801b03196040820151166040850152606081015115156060850152608081015160808501520151918160a08201520190611962565b970195940192910161131a565b9091929360208061144e60019360bf198a820301885260a060808a5161141e848251611bfa565b85810151151586850152604081015115156040850152606081015160608501520151918160808201520190611962565b960194019291016112e8565b90503d806000833e61146c8183611903565b6020828281010312610089578151916001600160401b038311610089576080838201838301031261008957604051926114a48461187c565b6114af818301611b93565b8452602081830101516001600160401b03811161008957838301601f8284860101011215610089578082840101516114e681611987565b916114f46040519384611903565b8183526020830186860160208460051b84888a0101010111610089576020828688010101905b60208460051b84888a0101010182106116e457505050506020850152604081830101516001600160401b03811161008957838301601f82848601010112156100895780828401015161156b81611987565b916115796040519384611903565b8183526020830186860160208460051b84888a0101010111610089576020828688010101905b60208460051b84888a0101010182106115ea5750505050604085015260608183010151906001600160401b038211610089576115df938301920101611dbd565b606082015282610b27565b81516001600160401b0381116100895760e0888801850182018a8a0103601f190112610089576040519161161d83611897565b602082868a8c01010101516005811015610089578352611645604083878b8d01010101611b93565b602084015261165c606083878b8d01010101611b93565b6040840152888801850182016080810151606085015261167e9060a001611bed565b608084015261169560c083878b8d01010101611bed565b60a084015260e082868a8c0101010151906001600160401b038211610089576020936116d28b868096958f968b8f84998601950101010101611ba8565b60c0820152815201920191905061159f565b8151906001600160401b0382116100895760208092916117118a838095898f8e9085019401010101611ced565b815201920191905061151a565b3d9150816000823e6117308282611903565b60208183810103126100895780516001600160401b038111610089576117599282019101611dbd565b826103d2565b61177b91503d8085833e6117738183611903565b810190611d78565b85610337565b61179591503d8085833e6117738183611903565b866102e3565b6117b091503d806000833e6117738183611903565b84610289565b6020906117c161199e565b8282860101520161021f565b60405162461bcd60e51b815260206004820152600e60248201526d656d70747920726573706f6e736560901b6044820152606490fd5b346100895760003660031901126100895780733cd5334eb64ebbd4003b72022cc25465f1bfcee660209252f35b60c081019081106001600160401b0382111761184b57604052565b634e487b7160e01b600052604160045260246000fd5b60a081019081106001600160401b0382111761184b57604052565b608081019081106001600160401b0382111761184b57604052565b60e081019081106001600160401b0382111761184b57604052565b604081019081106001600160401b0382111761184b57604052565b602081019081106001600160401b0382111761184b57604052565b606081019081106001600160401b0382111761184b57604052565b90601f801991011681019081106001600160401b0382111761184b57604052565b6001600160401b03811161184b57601f01601f191660200190565b60005b8381106119525750506000910152565b8181015183820152602001611942565b9060209161197b8151809281855285808601910161193f565b601f01601f1916010190565b6001600160401b03811161184b5760051b60200190565b604051906119ab82611830565b606060a083600081526000602082015260006040820152600083820152600060808201520152565b8051156119e05760200190565b634e487b7160e01b600052603260045260246000fd5b8051600110156119e05760400190565b8051600210156119e05760600190565b80518210156119e05760209160051b010190565b6000198114611a395760010190565b634e487b7160e01b600052601160045260246000fd5b516006811015610de15790565b60405190611a69826118b2565b60008252604051602083611a7c836118cd565b600083520152565b611a8c611a5c565b50611a95611a5c565b506000604051611aa4816118cd565b52604051611ab1816118cd565b6000815260405190611ac2826118b2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160801b0319168083526020830191825215611b56575151611b055790565b60405162461bcd60e51b815260206004820152602360248201527f696d706572736f6e6174696f6e206d6f6465206973206e6f7420737570706f726044820152621d195960ea1b6064820152608490fd5b60405162461bcd60e51b815260206004820152601560248201527461707049642063616e6e6f7420626520656d70747960581b6044820152606490fd5b51906001600160801b03198216820361008957565b81601f82011215610089578051611bbe81611924565b92611bcc6040519485611903565b8184526020828401011161008957611bea916020808501910161193f565b90565b5190811515820361008957565b906006821015610de15752565b906005821015610de15752565b908082519081815260208091019281808460051b8301019501936000915b848310611c425750505050505090565b9091929394958480611ca7600193601f198682030187528a51611c66828251611bfa565b838101518483015260408082015115159083015260608082015115159083015260808082015115159083015260a0809101519160c080928201520190611962565b9801930193019194939290611c32565b611bea916040611cd08351606084526060840190611962565b926020810151151560208401520151906040818403910152611962565b919060c0838203126100895760405190611d0682611830565b81938051600681101561008957835260208101516020840152611d2b60408201611bed565b6040840152611d3c60608201611bed565b6060840152611d4d60808201611bed565b608084015260a0810151916001600160401b0383116100895760a092611d739201611ba8565b910152565b906020828203126100895781516001600160401b03811161008957611bea9201611ced565b60405190611daa826118e8565b6060604083828152600060208201520152565b91906060838203126100895760405190611dd6826118e8565b81938051916001600160401b03928381116100895781611df7918401611ba8565b8452611e0560208301611bed565b6020850152604082015192831161008957604092611d739201611ba8565b6000805b6060830180518051831015611e8d57610d7083611e4392611a16565b6006811015611e795715611e645750611e5d606091611a2a565b9050611e27565b60409350611e73925051611a16565b51015190565b634e487b7160e01b84526021600452602484fd5b60405163267ac2cf60e01b815260048101859052602490fd5b6000805b6060830180518051831015611ee957610d7083611ec692611a16565b6006811015611e7957600414611e645750611ee2606091611a2a565b9050611eaa565b60405163267ac2cf60e01b8152600480820152602490fd5b6000805b6060830180518051831015611f4457610d7083611f2192611a16565b6006811015611e7957600214611e645750611f3d606091611a2a565b9050611f05565b60405163267ac2cf60e01b815260026004820152602490fdfea2646970667358221220ce2eb019cd166c0a3b4fd42e9f5dd31b4a230a16d49585cb59eeb1fde4722e8164736f6c63430008130033",
  "deployedBytecode": "0x6101e080604052600436101561001457600080fd5b60003560e01c9081634691630114611803575080637276069d1461017b57806379502c551461013b57806380afdea814610110578063a183dc27146100d3578063c187bbc11461008e5763c9512d991461006d57600080fd5b3461008957600036600319011261008957602060405160028152f35b600080fd5b346100895760003660031901126100895760206040516001600160801b03197f0000000000000000000000000000000000000000000000000000000000000000168152f35b346100895760003660031901126100895760206040517f000000000000000000000000000000000000000000000000000000000000000015158152f35b3461008957600036600319011261008957602060005460801b604051906001600160801b0319168152f35b34610089576000366003190112610089576040610156611a84565b61017982518092602080916001600160801b031981511684520151511515910152565bf35b34610089576060366003190112610089576004356001600160401b0381116100895736602382011215610089578060040135906101c66101ba83611924565b60405180608052611903565b8160805152366024838301011161008957816000926024602093018360805101376080510101526024356001600160a01b038116908190036100895760805151156117cd57604051906102188261187c565b6003825260005b606081106117b6575061023061199e565b50604051633a0ba6ff60e01b81526000600482018190527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316919081602481855afa90811561120c5760009161179b575b50610293846119d3565b5261029d836119d3565b506102a661199e565b50604051630c3bcacd60e41b808252600260048301526001602483018190526044830152600082606481865afa801561120c576000928391611781575b506102ed866119f6565b526102f7856119f6565b5061030061199e565b50606460405180948193825260048083015260016024830152600160448301525afa91821561120c5761039592600092839161175f575b5061034185611a06565b5261034b84611a06565b5060405190602082015260443560408201526040815261036a816118e8565b610372611d9d565b5060405180938192631a0d7ccb60e21b8352602060048401526024830190611962565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561120c5760009161171e575b50606060a06040516103e381611830565b600081526000602082015260006040820152828082015282608082015201526080518051810161018052602081610180510312610089576020810151610100526001600160401b0361010051116100895760a09061010051016101805103126100895760405161045281611861565b6104656020610100516080510101611b93565b815261047a6040610100516080510101611b93565b6020820152606061010051608051010151604082015261010051608051016080810151906001600160401b0382116100895760206104c092816101805101920101611ba8565b6060820152610100516080510160a081015160c0526001600160401b0360c051116100895760206101805101603f60c05183010112156100895760c05101602001519161050c83611987565b9361051a6040519586611903565b838552602085019460c0516101005160805101016020610180510160408760051b8301011161008957604001610120529194935b60c05161010051608051010160408260051b820101610120511015610a7a5761012051516101c0526001600160401b036101c051116100895760a090601f19906101c0510161018051030112610089576040516101a0526105b16101a051611861565b6101c05160c05161010051608051010101604081015160e0526001600160401b0360e051116100895760206101805101605f60e05183010112156100895760409060e0510101516101405261060861014051611987565b956106166040519788611903565b610140518752602087019260e0516101c05160c05161010051608051010101016020610180510160606101405160051b8301011161008957606001935b60e0516101c05160c05161010051608051010101019060606101405160051b830101861015610794578551916001600160401b038311610089576101805160a09184019003603f19011261008957604051916106ae83611861565b60608160e0516101c05160c051610100516080510101010101015160068110156100895783526106f560808260e0516101c05160c051610100518551010101010101611bed565b602084015261071c60a08260e0516101c05160c05161010051608051010101010101611bed565b604084015260c08160e0516101c05183516101005160805101010101010151606084015260e0516101c05160c0516101005160805101010101019060e0820151926001600160401b038411610089576107846020949360608695866101805101920101611ba8565b6080820152815201940193610653565b5050939196909492506101a051526101c05160c05161010051608051010101606081015160a0526001600160401b0360a051116100895760206101805101605f60a05183010112156100895760409060a051010151610160526107f961016051611987565b956108076040519788611903565b610160518752602087019260a0516101c05160c05161010051608051010101016020610180510160606101605160051b8301011161008957606001935b60a0516101c05160c05161010051608051010101019060606101605160051b8301018610156109ac578551916001600160401b038311610089576101805160c09184019003603f190112610089576040519161089f83611830565b60608160a0516101c05160c051610100516080510101010101015160058110156100895783526108e660808260a0516101c05160c051610100518551010101010101611b93565b602084015261090c60a08281516101c05160c05161010051608051010101010101611b93565b604084015261093260c08260a0516101c051835161010051608051010101010101611bed565b606084015260e08160a0516101c05160c0516101005160805101010101010151608084015260a0516101c05160c05161010051608051010101010190610100820151926001600160401b0384116100895761099c6020949360608695866101805101920101611ba8565b60a0820152815201940193610844565b50509493925094909560206101a051015260806101c05160c051610100518351010101015160406101a05101526101c05160c0516101005160805101010160a0810151906001600160401b038211610089576040610a139260206101805101920101611ba8565b60606101a05101526101c05160c051610100516080510101019060c08201516001600160401b038111610089576020926040610a5792856101805101920101611ba8565b60806101a05101526101a05181520194602061012051016101205291949361054e565b84876000610ad886886080860152604051610a948161187c565b83815260606020820152606060408201526060610aaf611d9d565b910152610aea6040519485938493632ceb1e8d60e01b8552604060048601526044850190611c14565b83810360031901602485015290611cb7565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561120c5760009161145a575b5090610b31611a84565b906040519283916312b037ff60e01b8352608060048401526001600160801b031981511660848401526001600160801b031960208201511660a4840152604081015160c48401526080610b94606083015160a060e4870152610124860190611962565b9101519060831984820301610104850152815180825260208201916020808360051b8301019401926000915b8383106112b05750505050506003198382030160248401526001600160801b03198251168152610bff6020830151608060208401526080830190611c14565b916040810151928281036040840152835180825260208201916020808360051b8301019601926000915b8383106112185788600081808d610c72610c518e8e60608f0151906060818403910152611cb7565b82516001600160801b03191660448501526020909201515115156064840152565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561120c57600091610e6a575b5060a081015190606081019081515192610cc884611987565b93610cd66040519586611903565b808552610ce5601f1991611987565b0160005b818110610e3157505060005b83518051821015610d2f5790610d0e81610d2a93611a16565b51610d198288611a16565b52610d248187611a16565b50611a2a565b610cf5565b50509150610d3c81611e23565b60405190602082015260208152610d52816118b2565b600080936000915b8651831015610df757610d76610d708489611a16565b51611a4f565b60069081811015610de157600203610da2575050610d9c610d9685611f01565b92611a2a565b91610d5a565b610db2610d70858a969496611a16565b90811015610de157600414610dcb575b610d9c90611a2a565b9450610d9c610dd985611ea6565b959050610dc2565b634e487b7160e01b600052602160045260246000fd5b610e2d8491610e159388604051958695608087526080870190611962565b92602086015260408501528382036060850152611962565b0390f35b602090604051610e4081611861565b60008152600083820152600060408201526060808201526060608082015282828901015201610ce9565b90503d806000833e610e7c8183611903565b6020828281010312610089578151916001600160401b0383116100895760c083820183830103126100895760405192610eb484611830565b610ebf818301611b93565b8452610ecf602082840101611b93565b602085015281810160408181015190860152606001516001600160401b03811161008957838301601f828486010101121561008957808284010151610f1381611987565b91610f216040519384611903565b8183526020830186860160208460051b84888a0101010111610089576020828688010101905b60208460051b84888a01010101821061112257505050506060850152608081830101516001600160401b03811161008957838301601f828486010101121561008957808284010151610f9881611987565b91610fa66040519384611903565b8183526020830186860160208460051b84888a0101010111610089576020828688010101905b60208460051b84888a0101010182106110175750505050608085015260a08183010151906001600160401b0382116100895761100c938301920101611ba8565b60a082015281610caf565b81516001600160401b0381116100895760e0888801850182018a8a0103601f190112610089576040519161104a83611897565b602082868a8c01010101516005811015610089578352611072604083878b8d01010101611b93565b6020840152611089606083878b8d01010101611b93565b6040840152888801850182016080810151606085015260a001516001600160401b038111610089576110c9908b8b01908a8c018801850101602001611ba8565b60808401528888018501820160c081015160a085015260e00151906001600160401b038211610089576020936111108b868096958f968b8f84998601950101010101611ba8565b60c08201528152019201919050610fcc565b81516001600160401b0381116100895760a0888801850182018a8a0103601f190112610089576040519161115583611861565b602082868a8c0101010151600681101561008957835261117d604083878b8d01010101611bed565b60208401528888018501820160608101516040850152608001516001600160401b038111610089576111bd908b8b01908a8c018801850101602001611ba8565b606084015260a082868a8c0101010151906001600160401b038211610089576020936111fa8b868096958f968b8f84998601950101010101611ba8565b60808201528152019201919050610f47565b6040513d6000823e3d90fd5b919397509193949560208061129c600193601f1986820301875260e08c5191611242818451611c07565b6001600160801b03198584015116858201526001600160801b031960408401511660408201526060830151606082015260808301511515608082015260a0830151151560a08201528160c080940151938201520190611962565b990193019301909289979695949293610c29565b91939596509193601f1982820301835285519060a0810182519060a08352815180915260c08301602060c08360051b86010193019160005b8181106113f7575050505060208301519082810360208401528151808252602082016020808360051b85010194019260005b838110611376575050505050611363836020936080611352869560406001990151604085015260608501518482036060860152611962565b920151906080818403910152611962565b9701930193019092889695949293610bc0565b90919293946020806113ea600193601f1987820301885260c060a08b5161139e848251611c07565b6001600160801b03198682015116868501526001600160801b03196040820151166040850152606081015115156060850152608081015160808501520151918160a08201520190611962565b970195940192910161131a565b9091929360208061144e60019360bf198a820301885260a060808a5161141e848251611bfa565b85810151151586850152604081015115156040850152606081015160608501520151918160808201520190611962565b960194019291016112e8565b90503d806000833e61146c8183611903565b6020828281010312610089578151916001600160401b038311610089576080838201838301031261008957604051926114a48461187c565b6114af818301611b93565b8452602081830101516001600160401b03811161008957838301601f8284860101011215610089578082840101516114e681611987565b916114f46040519384611903565b8183526020830186860160208460051b84888a0101010111610089576020828688010101905b60208460051b84888a0101010182106116e457505050506020850152604081830101516001600160401b03811161008957838301601f82848601010112156100895780828401015161156b81611987565b916115796040519384611903565b8183526020830186860160208460051b84888a0101010111610089576020828688010101905b60208460051b84888a0101010182106115ea5750505050604085015260608183010151906001600160401b038211610089576115df938301920101611dbd565b606082015282610b27565b81516001600160401b0381116100895760e0888801850182018a8a0103601f190112610089576040519161161d83611897565b602082868a8c01010101516005811015610089578352611645604083878b8d01010101611b93565b602084015261165c606083878b8d01010101611b93565b6040840152888801850182016080810151606085015261167e9060a001611bed565b608084015261169560c083878b8d01010101611bed565b60a084015260e082868a8c0101010151906001600160401b038211610089576020936116d28b868096958f968b8f84998601950101010101611ba8565b60c0820152815201920191905061159f565b8151906001600160401b0382116100895760208092916117118a838095898f8e9085019401010101611ced565b815201920191905061151a565b3d9150816000823e6117308282611903565b60208183810103126100895780516001600160401b038111610089576117599282019101611dbd565b826103d2565b61177b91503d8085833e6117738183611903565b810190611d78565b85610337565b61179591503d8085833e6117738183611903565b866102e3565b6117b091503d806000833e6117738183611903565b84610289565b6020906117c161199e565b8282860101520161021f565b60405162461bcd60e51b815260206004820152600e60248201526d656d70747920726573706f6e736560901b6044820152606490fd5b346100895760003660031901126100895780733cd5334eb64ebbd4003b72022cc25465f1bfcee660209252f35b60c081019081106001600160401b0382111761184b57604052565b634e487b7160e01b600052604160045260246000fd5b60a081019081106001600160401b0382111761184b57604052565b608081019081106001600160401b0382111761184b57604052565b60e081019081106001600160401b0382111761184b57604052565b604081019081106001600160401b0382111761184b57604052565b602081019081106001600160401b0382111761184b57604052565b606081019081106001600160401b0382111761184b57604052565b90601f801991011681019081106001600160401b0382111761184b57604052565b6001600160401b03811161184b57601f01601f191660200190565b60005b8381106119525750506000910152565b8181015183820152602001611942565b9060209161197b8151809281855285808601910161193f565b601f01601f1916010190565b6001600160401b03811161184b5760051b60200190565b604051906119ab82611830565b606060a083600081526000602082015260006040820152600083820152600060808201520152565b8051156119e05760200190565b634e487b7160e01b600052603260045260246000fd5b8051600110156119e05760400190565b8051600210156119e05760600190565b80518210156119e05760209160051b010190565b6000198114611a395760010190565b634e487b7160e01b600052601160045260246000fd5b516006811015610de15790565b60405190611a69826118b2565b60008252604051602083611a7c836118cd565b600083520152565b611a8c611a5c565b50611a95611a5c565b506000604051611aa4816118cd565b52604051611ab1816118cd565b6000815260405190611ac2826118b2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160801b0319168083526020830191825215611b56575151611b055790565b60405162461bcd60e51b815260206004820152602360248201527f696d706572736f6e6174696f6e206d6f6465206973206e6f7420737570706f726044820152621d195960ea1b6064820152608490fd5b60405162461bcd60e51b815260206004820152601560248201527461707049642063616e6e6f7420626520656d70747960581b6044820152606490fd5b51906001600160801b03198216820361008957565b81601f82011215610089578051611bbe81611924565b92611bcc6040519485611903565b8184526020828401011161008957611bea916020808501910161193f565b90565b5190811515820361008957565b906006821015610de15752565b906005821015610de15752565b908082519081815260208091019281808460051b8301019501936000915b848310611c425750505050505090565b9091929394958480611ca7600193601f198682030187528a51611c66828251611bfa565b838101518483015260408082015115159083015260608082015115159083015260808082015115159083015260a0809101519160c080928201520190611962565b9801930193019194939290611c32565b611bea916040611cd08351606084526060840190611962565b926020810151151560208401520151906040818403910152611962565b919060c0838203126100895760405190611d0682611830565b81938051600681101561008957835260208101516020840152611d2b60408201611bed565b6040840152611d3c60608201611bed565b6060840152611d4d60808201611bed565b608084015260a0810151916001600160401b0383116100895760a092611d739201611ba8565b910152565b906020828203126100895781516001600160401b03811161008957611bea9201611ced565b60405190611daa826118e8565b6060604083828152600060208201520152565b91906060838203126100895760405190611dd6826118e8565b81938051916001600160401b03928381116100895781611df7918401611ba8565b8452611e0560208301611bed565b6020850152604082015192831161008957604092611d739201611ba8565b6000805b6060830180518051831015611e8d57610d7083611e4392611a16565b6006811015611e795715611e645750611e5d606091611a2a565b9050611e27565b60409350611e73925051611a16565b51015190565b634e487b7160e01b84526021600452602484fd5b60405163267ac2cf60e01b815260048101859052602490fd5b6000805b6060830180518051831015611ee957610d7083611ec692611a16565b6006811015611e7957600414611e645750611ee2606091611a2a565b9050611eaa565b60405163267ac2cf60e01b8152600480820152602490fd5b6000805b6060830180518051831015611f4457610d7083611f2192611a16565b6006811015611e7957600214611e645750611f3d606091611a2a565b9050611f05565b60405163267ac2cf60e01b815260026004820152602490fdfea2646970667358221220ce2eb019cd166c0a3b4fd42e9f5dd31b4a230a16d49585cb59eeb1fde4722e8164736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10921,
        "contract": "contracts/MecenateVerifier.sol:MecenateVerifier",
        "label": "appId",
        "offset": 0,
        "slot": "0",
        "type": "t_bytes16"
      }
    ],
    "types": {
      "t_bytes16": {
        "encoding": "inplace",
        "label": "bytes16",
        "numberOfBytes": "16"
      }
    }
  }
}