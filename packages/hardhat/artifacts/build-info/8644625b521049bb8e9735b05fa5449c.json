{"id":"8644625b521049bb8e9735b05fa5449c","_format":"hh-sol-build-info-1","solcVersion":"0.8.19","solcLongVersion":"0.8.19+commit.7dd6d404","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"},"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol":{"content":"// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"},"contracts/features/MecenateFeed.sol":{"content":"/**\n * @title MecenateFeed\n * @dev This contract implements the MecenateFeed feature, which allows users to create and manage posts for crowdfunding campaigns.\n * The contract inherits from several modules that provide functionality for post creation, acceptance, submission, finalization, and renouncement.\n * The contract also provides several view functions to retrieve information about a post's buyer payment, seller deposit, seller stake, buyer stake, payment requested, post status, and post count.\n */\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"../modules/Events.sol\";\nimport \"../modules/Creation.sol\";\nimport \"../modules/Acceptance.sol\";\nimport \"../modules/Submission.sol\";\nimport \"../modules/Finalization.sol\";\nimport \"../modules/Renounce.sol\";\n\ncontract MecenateFeed is\n    Events,\n    Creation,\n    Acceptance,\n    Renounce,\n    Submission,\n    Finalization\n{\n    constructor(\n        address _owner,\n        address _usersModuleContract,\n        address _factoryContract,\n        uint256 _major,\n        uint256 _minor,\n        uint256 _patch\n    ) Data(_usersModuleContract, _factoryContract, _major, _minor, _patch) {\n        owner = _owner;\n    }\n}\n"},"contracts/helpers/eas/Common.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// A representation of an empty/uninitialized UID.\nbytes32 constant EMPTY_UID = 0;\n\n// A zero expiration represents an non-expiring attestation.\nuint64 constant NO_EXPIRATION_TIME = 0;\n\nerror AccessDenied();\nerror DeadlineExpired();\nerror InvalidEAS();\nerror InvalidLength();\nerror InvalidSignature();\nerror NotFound();\n\n/// @notice A struct representing ECDSA signature data.\nstruct Signature {\n    uint8 v; // The recovery ID.\n    bytes32 r; // The x-coordinate of the nonce R.\n    bytes32 s; // The signature data.\n}\n\n/// @notice A struct representing a single attestation.\nstruct Attestation {\n    bytes32 uid; // A unique identifier of the attestation.\n    bytes32 schema; // The unique identifier of the schema.\n    uint64 time; // The time when the attestation was created (Unix timestamp).\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\n    bytes32 refUID; // The UID of the related attestation.\n    address recipient; // The recipient of the attestation.\n    address attester; // The attester/sender of the attestation.\n    bool revocable; // Whether the attestation is revocable.\n    bytes data; // Custom attestation data.\n}\n\n/// @notice A helper function to work with unchecked iterators in loops.\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\n    unchecked {\n        j = i + 1;\n    }\n}\n"},"contracts/helpers/eas/IEAS.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport {ISchemaRegistry} from \"./ISchemaRegistry.sol\";\nimport {Attestation, Signature} from \"./Common.sol\";\n\n/// @notice A struct representing the arguments of the attestation request.\nstruct AttestationRequestData {\n    address recipient; // The recipient of the attestation.\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\n    bool revocable; // Whether the attestation is revocable.\n    bytes32 refUID; // The UID of the related attestation.\n    bytes data; // Custom attestation data.\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\n}\n\n/// @notice A struct representing the full arguments of the attestation request.\nstruct AttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData data; // The arguments of the attestation request.\n}\n\n/// @notice A struct representing the full arguments of the full delegated attestation request.\nstruct DelegatedAttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData data; // The arguments of the attestation request.\n    Signature signature; // The ECDSA signature data.\n    address attester; // The attesting account.\n    uint64 deadline; // The deadline of the signature/request.\n}\n\n/// @notice A struct representing the full arguments of the multi attestation request.\nstruct MultiAttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData[] data; // The arguments of the attestation request.\n}\n\n/// @notice A struct representing the full arguments of the delegated multi attestation request.\nstruct MultiDelegatedAttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData[] data; // The arguments of the attestation requests.\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\n    address attester; // The attesting account.\n    uint64 deadline; // The deadline of the signature/request.\n}\n\n/// @notice A struct representing the arguments of the revocation request.\nstruct RevocationRequestData {\n    bytes32 uid; // The UID of the attestation to revoke.\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\n}\n\n/// @notice A struct representing the full arguments of the revocation request.\nstruct RevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData data; // The arguments of the revocation request.\n}\n\n/// @notice A struct representing the arguments of the full delegated revocation request.\nstruct DelegatedRevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData data; // The arguments of the revocation request.\n    Signature signature; // The ECDSA signature data.\n    address revoker; // The revoking account.\n    uint64 deadline; // The deadline of the signature/request.\n}\n\n/// @notice A struct representing the full arguments of the multi revocation request.\nstruct MultiRevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData[] data; // The arguments of the revocation request.\n}\n\n/// @notice A struct representing the full arguments of the delegated multi revocation request.\nstruct MultiDelegatedRevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData[] data; // The arguments of the revocation requests.\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\n    address revoker; // The revoking account.\n    uint64 deadline; // The deadline of the signature/request.\n}\n\n/// @title IEAS\n/// @notice EAS - Ethereum Attestation Service interface.\ninterface IEAS {\n    /// @notice Emitted when an attestation has been made.\n    /// @param recipient The recipient of the attestation.\n    /// @param attester The attesting account.\n    /// @param uid The UID the revoked attestation.\n    /// @param schemaUID The UID of the schema.\n    event Attested(\n        address indexed recipient,\n        address indexed attester,\n        bytes32 uid,\n        bytes32 indexed schemaUID\n    );\n\n    /// @notice Emitted when an attestation has been revoked.\n    /// @param recipient The recipient of the attestation.\n    /// @param attester The attesting account.\n    /// @param schemaUID The UID of the schema.\n    /// @param uid The UID the revoked attestation.\n    event Revoked(\n        address indexed recipient,\n        address indexed attester,\n        bytes32 uid,\n        bytes32 indexed schemaUID\n    );\n\n    /// @notice Emitted when a data has been timestamped.\n    /// @param data The data.\n    /// @param timestamp The timestamp.\n    event Timestamped(bytes32 indexed data, uint64 indexed timestamp);\n\n    /// @notice Emitted when a data has been revoked.\n    /// @param revoker The address of the revoker.\n    /// @param data The data.\n    /// @param timestamp The timestamp.\n    event RevokedOffchain(\n        address indexed revoker,\n        bytes32 indexed data,\n        uint64 indexed timestamp\n    );\n\n    /// @notice Returns the address of the global schema registry.\n    /// @return The address of the global schema registry.\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\n\n    /// @notice Attests to a specific schema.\n    /// @param request The arguments of the attestation request.\n    /// @return The UID of the new attestation.\n    ///\n    /// Example:\n    ///     attest({\n    ///         schema: \"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\",\n    ///         data: {\n    ///             recipient: \"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\",\n    ///             expirationTime: 0,\n    ///             revocable: true,\n    ///             refUID: \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n    ///             data: \"0xF00D\",\n    ///             value: 0\n    ///         }\n    ///     })\n    function attest(\n        AttestationRequest calldata request\n    ) external payable returns (bytes32);\n\n    /// @notice Attests to a specific schema via the provided ECDSA signature.\n    /// @param delegatedRequest The arguments of the delegated attestation request.\n    /// @return The UID of the new attestation.\n    ///\n    /// Example:\n    ///     attestByDelegation({\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n    ///         data: {\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n    ///             expirationTime: 1673891048,\n    ///             revocable: true,\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    ///             data: '0x1234',\n    ///             value: 0\n    ///         },\n    ///         signature: {\n    ///             v: 28,\n    ///             r: '0x148c...b25b',\n    ///             s: '0x5a72...be22'\n    ///         },\n    ///         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',\n    ///         deadline: 1673891048\n    ///     })\n    function attestByDelegation(\n        DelegatedAttestationRequest calldata delegatedRequest\n    ) external payable returns (bytes32);\n\n    /// @notice Attests to multiple schemas.\n    /// @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\n    ///     schema ids to benefit from the best batching optimization.\n    /// @return The UIDs of the new attestations.\n    ///\n    /// Example:\n    ///     multiAttest([{\n    ///         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\n    ///         data: [{\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n    ///             expirationTime: 1673891048,\n    ///             revocable: true,\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    ///             data: '0x1234',\n    ///             value: 1000\n    ///         },\n    ///         {\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n    ///             expirationTime: 0,\n    ///             revocable: false,\n    ///             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\n    ///             data: '0x00',\n    ///             value: 0\n    ///         }],\n    ///     },\n    ///     {\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\n    ///         data: [{\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n    ///             expirationTime: 0,\n    ///             revocable: true,\n    ///             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\n    ///             data: '0x12345678',\n    ///             value: 0\n    ///         },\n    ///     }])\n    function multiAttest(\n        MultiAttestationRequest[] calldata multiRequests\n    ) external payable returns (bytes32[] memory);\n\n    /// @notice Attests to multiple schemas using via provided ECDSA signatures.\n    /// @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\n    ///     grouped by distinct schema ids to benefit from the best batching optimization.\n    /// @return The UIDs of the new attestations.\n    ///\n    /// Example:\n    ///     multiAttestByDelegation([{\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n    ///         data: [{\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n    ///             expirationTime: 1673891048,\n    ///             revocable: true,\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    ///             data: '0x1234',\n    ///             value: 0\n    ///         },\n    ///         {\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n    ///             expirationTime: 0,\n    ///             revocable: false,\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    ///             data: '0x00',\n    ///             value: 0\n    ///         }],\n    ///         signatures: [{\n    ///             v: 28,\n    ///             r: '0x148c...b25b',\n    ///             s: '0x5a72...be22'\n    ///         },\n    ///         {\n    ///             v: 28,\n    ///             r: '0x487s...67bb',\n    ///             s: '0x12ad...2366'\n    ///         }],\n    ///         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',\n    ///         deadline: 1673891048\n    ///     }])\n    function multiAttestByDelegation(\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\n    ) external payable returns (bytes32[] memory);\n\n    /// @notice Revokes an existing attestation to a specific schema.\n    /// @param request The arguments of the revocation request.\n    ///\n    /// Example:\n    ///     revoke({\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n    ///         data: {\n    ///             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\n    ///             value: 0\n    ///         }\n    ///     })\n    function revoke(RevocationRequest calldata request) external payable;\n\n    /// @notice Revokes an existing attestation to a specific schema via the provided ECDSA signature.\n    /// @param delegatedRequest The arguments of the delegated revocation request.\n    ///\n    /// Example:\n    ///     revokeByDelegation({\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n    ///         data: {\n    ///             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\n    ///             value: 0\n    ///         },\n    ///         signature: {\n    ///             v: 27,\n    ///             r: '0xb593...7142',\n    ///             s: '0x0f5b...2cce'\n    ///         },\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\n    ///         deadline: 1673891048\n    ///     })\n    function revokeByDelegation(\n        DelegatedRevocationRequest calldata delegatedRequest\n    ) external payable;\n\n    /// @notice Revokes existing attestations to multiple schemas.\n    /// @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\n    ///     schema ids to benefit from the best batching optimization.\n    ///\n    /// Example:\n    ///     multiRevoke([{\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n    ///         data: [{\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\n    ///             value: 1000\n    ///         },\n    ///         {\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\n    ///             value: 0\n    ///         }],\n    ///     },\n    ///     {\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\n    ///         data: [{\n    ///             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\n    ///             value: 0\n    ///         },\n    ///     }])\n    function multiRevoke(\n        MultiRevocationRequest[] calldata multiRequests\n    ) external payable;\n\n    /// @notice Revokes existing attestations to multiple schemas via provided ECDSA signatures.\n    /// @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests\n    ///     should be grouped by distinct schema ids to benefit from the best batching optimization.\n    ///\n    /// Example:\n    ///     multiRevokeByDelegation([{\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n    ///         data: [{\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\n    ///             value: 1000\n    ///         },\n    ///         {\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\n    ///             value: 0\n    ///         }],\n    ///         signatures: [{\n    ///             v: 28,\n    ///             r: '0x148c...b25b',\n    ///             s: '0x5a72...be22'\n    ///         },\n    ///         {\n    ///             v: 28,\n    ///             r: '0x487s...67bb',\n    ///             s: '0x12ad...2366'\n    ///         }],\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\n    ///         deadline: 1673891048\n    ///     }])\n    function multiRevokeByDelegation(\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\n    ) external payable;\n\n    /// @notice Timestamps the specified bytes32 data.\n    /// @param data The data to timestamp.\n    /// @return The timestamp the data was timestamped with.\n    function timestamp(bytes32 data) external returns (uint64);\n\n    /// @notice Timestamps the specified multiple bytes32 data.\n    /// @param data The data to timestamp.\n    /// @return The timestamp the data was timestamped with.\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\n\n    /// @notice Revokes the specified bytes32 data.\n    /// @param data The data to timestamp.\n    /// @return The timestamp the data was revoked with.\n    function revokeOffchain(bytes32 data) external returns (uint64);\n\n    /// @notice Revokes the specified multiple bytes32 data.\n    /// @param data The data to timestamp.\n    /// @return The timestamp the data was revoked with.\n    function multiRevokeOffchain(\n        bytes32[] calldata data\n    ) external returns (uint64);\n\n    /// @notice Returns an existing attestation by UID.\n    /// @param uid The UID of the attestation to retrieve.\n    /// @return The attestation data members.\n    function getAttestation(\n        bytes32 uid\n    ) external view returns (Attestation memory);\n\n    /// @notice Checks whether an attestation exists.\n    /// @param uid The UID of the attestation to retrieve.\n    /// @return Whether an attestation exists.\n    function isAttestationValid(bytes32 uid) external view returns (bool);\n\n    /// @notice Returns the timestamp that the specified data was timestamped with.\n    /// @param data The data to query.\n    /// @return The timestamp the data was timestamped with.\n    function getTimestamp(bytes32 data) external view returns (uint64);\n\n    /// @notice Returns the timestamp that the specified data was timestamped with.\n    /// @param data The data to query.\n    /// @return The timestamp the data was timestamped with.\n    function getRevokeOffchain(\n        address revoker,\n        bytes32 data\n    ) external view returns (uint64);\n}\n"},"contracts/helpers/eas/ISchemaRegistry.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport {ISchemaResolver} from \"./ISchemaResolver.sol\";\n\n/// @notice A struct representing a record for a submitted schema.\nstruct SchemaRecord {\n    bytes32 uid; // The unique identifier of the schema.\n    ISchemaResolver resolver; // Optional schema resolver.\n    bool revocable; // Whether the schema allows revocations explicitly.\n    string schema; // Custom specification of the schema (e.g., an ABI).\n}\n\n/// @title ISchemaRegistry\n/// @notice The interface of global attestation schemas for the Ethereum Attestation Service protocol.\ninterface ISchemaRegistry {\n    /// @notice Emitted when a new schema has been registered\n    /// @param uid The schema UID.\n    /// @param registerer The address of the account used to register the schema.\n    /// @param schema The schema data.\n    event Registered(\n        bytes32 indexed uid,\n        address indexed registerer,\n        SchemaRecord schema\n    );\n\n    /// @notice Submits and reserves a new schema\n    /// @param schema The schema data schema.\n    /// @param resolver An optional schema resolver.\n    /// @param revocable Whether the schema allows revocations explicitly.\n    /// @return The UID of the new schema.\n    function register(\n        string calldata schema,\n        ISchemaResolver resolver,\n        bool revocable\n    ) external returns (bytes32);\n\n    /// @notice Returns an existing schema by UID\n    /// @param uid The UID of the schema to retrieve.\n    /// @return The schema data members.\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\n}\n"},"contracts/helpers/eas/ISchemaResolver.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport {Attestation} from \"./Common.sol\";\n\n/// @title ISchemaResolver\n/// @notice The interface of an optional schema resolver.\ninterface ISchemaResolver {\n    /// @notice Checks if the resolver can be sent ETH.\n    /// @return Whether the resolver supports ETH transfers.\n    function isPayable() external pure returns (bool);\n\n    /// @notice Processes an attestation and verifies whether it's valid.\n    /// @param attestation The new attestation.\n    /// @return Whether the attestation is valid.\n    function attest(\n        Attestation calldata attestation\n    ) external payable returns (bool);\n\n    /// @notice Processes multiple attestations and verifies whether they are valid.\n    /// @param attestations The new attestations.\n    /// @param values Explicit ETH amounts which were sent with each attestation.\n    /// @return Whether all the attestations are valid.\n    function multiAttest(\n        Attestation[] calldata attestations,\n        uint256[] calldata values\n    ) external payable returns (bool);\n\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\n    /// @param attestation The existing attestation to be revoked.\n    /// @return Whether the attestation can be revoked.\n    function revoke(\n        Attestation calldata attestation\n    ) external payable returns (bool);\n\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\n    /// @param attestations The existing attestations to be revoked.\n    /// @param values Explicit ETH amounts which were sent with each revocation.\n    /// @return Whether the attestations can be revoked.\n    function multiRevoke(\n        Attestation[] calldata attestations,\n        uint256[] calldata values\n    ) external payable returns (bool);\n}\n"},"contracts/interfaces/IMecenateBay.sol":{"content":"pragma solidity 0.8.19;\r\nimport \"../library/Structures.sol\";\r\n\r\ninterface IMecenateBay {\r\n    function allRequests()\r\n        external\r\n        view\r\n        returns (Structures.BayRequest[] memory);\r\n\r\n    function contractCounter() external view returns (uint256);\r\n}\r\n"},"contracts/interfaces/IMecenateFeed.sol":{"content":"pragma solidity 0.8.19;\n\nimport \"../library/Structures.sol\";\n\ninterface IMecenateFeed {\n    function getPost() external view returns (Structures.Post memory);\n\n    function getTotalStaked() external view returns (uint256);\n\n    function postCount() external view returns (uint256);\n\n    function acceptPost(\n        Structures.Tokens,\n        uint256 _amount,\n        address _funder,\n        address _buyer\n    ) external payable;\n\n    function getSellerStake() external view returns (uint256);\n\n    function getBuyerStake() external view returns (uint256);\n\n    function getPaymentRequested() external view returns (uint256);\n\n    function getStakeRequested() external view returns (uint256);\n\n    function getStatus() external view returns (Structures.PostStatus status);\n\n    function getTokenId() external view returns (Structures.Tokens tokenId);\n\n    function owner() external view returns (address);\n\n    function version() external view returns (string memory);\n\n    function getEncryptedPost() external view returns (bytes memory);\n}\n"},"contracts/interfaces/IMecenateFeedFactory.sol":{"content":"pragma solidity 0.8.19;\n\ninterface IMecenateFeedFactory {\n    function owner() external view returns (address payable);\n\n    function treasuryContract() external view returns (address payable);\n\n    function feeds() external view returns (address[] memory);\n\n    function contractCounter() external view returns (uint256);\n\n    function isFeed(address _feed) external view returns (bool);\n\n    function museToken() external view returns (address);\n\n    function wethToken() external view returns (address);\n\n    function daiToken() external view returns (address);\n\n    function router() external view returns (address);\n\n    function getRouterFee(uint8 tokenId) external view returns (uint24);\n\n    function burnEnabled() external view returns (bool);\n\n    function version() external view returns (string memory);\n\n    function easSchema() external view returns (bytes32);\n\n    function easContract() external view returns (address);\n}\n"},"contracts/interfaces/IMecenateTreasury.sol":{"content":"pragma solidity 0.8.19;\r\n\r\ninterface IMecenateTreasury {\r\n    function globalFee() external view returns (uint256);\r\n\r\n    function fixedFee() external view returns (uint256);\r\n}\r\n"},"contracts/interfaces/IMecenateUsers.sol":{"content":"// SPDX-License-Identifier: MIT\n\nimport \"../library/Structures.sol\";\n\ninterface IMecenateUsers {\n    function registerUser(bytes memory metadata) external;\n\n    function getUsers() external view returns (address[] memory);\n\n    function getUserCount() external view returns (uint256);\n\n    function getUserAt(uint256 index) external view returns (address);\n\n    function checkifUserExist(address userAddress) external view returns (bool);\n\n    function getPaginatedUsers(\n        uint256 startIndex,\n        uint256 endIndex\n    ) external view returns (address[] memory);\n\n    function getUserMetadata(\n        address userAddress\n    ) external view returns (Structures.User memory);\n\n    function getUserPublicKey(\n        address userAddress\n    ) external view returns (bytes memory);\n}\n"},"contracts/interfaces/IMUSE.sol":{"content":"pragma solidity 0.8.19;\n\n// import IERC20 from openzeppelin\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IMUSE is IERC20 {\n    function increaseAllowance(\n        address spender,\n        uint256 addedValue\n    ) external returns (bool);\n\n    function decreaseAllowance(\n        address spender,\n        uint256 subtractedValue\n    ) external returns (bool);\n\n    function mint(uint256 amount) external;\n\n    function burn(uint256 amount) external;\n}\n"},"contracts/interfaces/IWETH.sol":{"content":"pragma solidity 0.8.19;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function withdraw(uint256) external;\r\n}\r\n"},"contracts/library/Structures.sol":{"content":"/**\n * @title Structures\n * @dev This library defines various data structures used in the Mecenate platform.\n */\npragma solidity 0.8.19;\n\nlibrary Structures {\n    enum PostStatus {\n        Waiting,\n        Proposed,\n        Accepted,\n        Submitted,\n        Finalized,\n        Punished,\n        Revealed,\n        Renounced\n    }\n\n    enum Tokens {\n        NaN,\n        MUSE,\n        DAI\n    }\n\n    enum PostType {\n        Text,\n        Image,\n        Video,\n        Audio,\n        File\n    }\n    enum PostDuration {\n        OneDay,\n        ThreeDays,\n        OneWeek,\n        TwoWeeks,\n        OneMonth\n    }\n\n    struct FeedSettings {\n        uint256 punishmentRatio;\n        uint256 postCount;\n        address usersModuleContract;\n        address factoryContract;\n        address router;\n        string version;\n    }\n\n    struct FactorySettings {\n        address treasuryContract;\n        address usersModuleContract;\n        address easContract;\n        bytes32 easSchema;\n        address museToken;\n        address daiToken;\n        address wethToken;\n        address router;\n    }\n\n    /**\n     * @dev Struct representing a post on the Mecenate platform.\n     */\n    struct Post {\n        User creator;\n        PostData postdata;\n    }\n\n    /**\n     * @dev Struct representing the data of a post on the Mecenate platform.\n     */\n    struct PostData {\n        PostSettings settings;\n        PostEscrow escrow;\n        PostEncryptedData data;\n    }\n\n    /**\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\n     */\n    struct PostEncryptedData {\n        bytes encryptedData;\n        bytes encryptedKey;\n        bytes decryptedData;\n    }\n\n    /**\n     * @dev Struct representing the settings of a post on the Mecenate platform.\n     */\n    struct PostSettings {\n        PostStatus status;\n        PostType postType;\n        uint256 creationTimeStamp;\n        uint256 endTimeStamp;\n        uint256 duration;\n        Tokens tokenId;\n    }\n\n    /**\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\n     */\n    struct PostEscrow {\n        address buyer;\n        address seller;\n        uint256 stake;\n        uint256 payment;\n        uint256 punishment;\n        uint256 penalty;\n    }\n\n    /**\n     * @dev Struct representing a user on the Mecenate platform.\n     */\n    struct User {\n        address evmAddress;\n        bytes sismoVaultId;\n        bytes publicKey;\n    }\n\n    /**\n     * @dev Struct representing a feed on the Mecenate platform.\n     */\n    struct Feed {\n        address contractAddress;\n        address owner;\n        uint256 sellerStake;\n        uint256 buyerStake;\n        uint256 totalStake;\n        uint256 postCount;\n        uint256 paymentRequested;\n        uint256 stakeRequested;\n        PostStatus status;\n        Tokens tokenId;\n        string version;\n    }\n\n    /**\n     * @dev Struct representing a bay request on the Mecenate platform.\n     */\n    struct BayRequest {\n        bytes request;\n        uint256 payment;\n        uint256 stake;\n        address postAddress;\n        bool accepted;\n        uint256 postCount;\n        Tokens tokenId;\n        address buyerAddress;\n    }\n}\n"},"contracts/modules/Acceptance.sol":{"content":"/**\n * @title Acceptance\n * @dev This contract is an abstract contract that inherits from Events and Staking contracts. It provides a function to accept a post and add stake to the post. The function accepts a Sismo Connect response as a parameter and verifies the user existence. It also checks if the user is not the seller and if the post is in Proposed status. If the post has an escrow payment, it checks if the buyer has paid enough and adds the payment to the post's escrow. If the post does not have an escrow payment, it requires a payment from the buyer and adds it to the post's escrow. Finally, it changes the post status to Accepted and emits an Accepted event.\n */\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport \"./Events.sol\";\nimport \"./Staking.sol\";\n\nabstract contract Acceptance is Events, Staking {\n    function acceptPost(\n        Structures.Tokens tokenId,\n        uint256 paymentAmount,\n        address funder,\n        address buyer\n    ) external payable virtual {\n        require(\n            validStatuses[uint8(Structures.PostStatus.Proposed)],\n            \"INVALID_STATUS\"\n        );\n\n        _checkToken(tokenId);\n\n        uint256 amountToAdd = tokenId == Structures.Tokens.NaN\n            ? msg.value\n            : paymentAmount;\n\n        // Use local variable for repeated calls\n        uint256 sellerStake = Deposit._getDeposit(\n            tokenId,\n            post.postdata.escrow.seller\n        );\n\n        require(sellerStake >= post.postdata.escrow.stake, \"STAKE_INCORRECT\");\n\n        require(\n            IMecenateUsers(settings.usersModuleContract).checkifUserExist(\n                buyer\n            ),\n            \"USERT_NOT_EXIST\"\n        );\n\n        require(\n            msg.sender != post.postdata.escrow.seller ||\n                buyer != post.postdata.escrow.seller,\n            \"YOU_ARE_THE_SELLER\"\n        );\n\n        if (post.postdata.escrow.payment > 0) {\n            require(\n                paymentAmount >= post.postdata.escrow.payment,\n                \"NOT_ENOUGH_PAYMENT\"\n            );\n        } else {\n            require(msg.value > 0, \"ZERO_MSGVALUE\");\n\n            require(paymentAmount > 0, \"ZERO_PAYMENT\");\n        }\n\n        uint256 payment = _addStake(tokenId, buyer, funder, amountToAdd);\n\n        post.postdata.escrow.payment = payment;\n\n        post.postdata.escrow.buyer = buyer;\n\n        post.postdata.settings.status = Structures.PostStatus.Accepted;\n\n        _changeStatus(Structures.PostStatus.Accepted);\n\n        emit Accepted(post);\n    }\n}\n"},"contracts/modules/BurnDAI.sol":{"content":"pragma solidity 0.8.19;\n\nimport \"./BurnMUSE.sol\";\nimport \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"../interfaces/IWETH.sol\";\n\nabstract contract BurnDAI is BurnMUSE {\n    using SafeMath for uint256;\n\n    function _burnFrom(\n        address from,\n        uint256 value\n    ) internal override returns (bool success) {\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\n            .transferFrom(from, address(this), value);\n\n        _burn(value);\n\n        return true;\n    }\n\n    function _burnDai(uint256 value) internal returns (bool success) {\n        // approve uniswap for token transfer\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\n            .approve(settings.router, value);\n\n        // swap IMecenateFeedFactory(settings.factoryContract).daiToken() for MUSE\n        uint256 tokens_sold = value;\n\n        uint256 tokens_bought = _swapTokensForToken(\n            IMecenateFeedFactory(settings.factoryContract).daiToken(),\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\n            IMecenateFeedFactory(settings.factoryContract).getRouterFee(0),\n            tokens_sold\n        );\n\n        uint256 tokens_sold_to_muse = _swapTokensForToken(\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\n            IMecenateFeedFactory(settings.factoryContract).museToken(),\n            IMecenateFeedFactory(settings.factoryContract).getRouterFee(1),\n            tokens_bought\n        );\n\n        IERC20(IMecenateFeedFactory(settings.factoryContract).museToken())\n            .approve(\n                IMecenateFeedFactory(settings.factoryContract).museToken(),\n                tokens_sold_to_muse\n            );\n\n        // burn MUSE\n        BurnMUSE._burn(tokens_sold_to_muse);\n\n        return true;\n    }\n\n    function _burnWeth(uint256 value) internal returns (bool success) {\n        // deposit IMecenateFeedFactory(settings.factoryContract).wethToken()\n        IWETH(IMecenateFeedFactory(settings.factoryContract).wethToken())\n            .deposit{value: value}();\n\n        // approve uniswap for token transfer\n        IERC20(IMecenateFeedFactory(settings.factoryContract).wethToken())\n            .approve(settings.router, value);\n\n        // swap IMecenateFeedFactory(settings.factoryContract).wethToken() for MUSE\n        uint256 tokens_sold = value;\n\n        uint256 tokens_bought = _swapTokensForToken(\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\n            IMecenateFeedFactory(settings.factoryContract).museToken(),\n            IMecenateFeedFactory(settings.factoryContract).getRouterFee(1),\n            tokens_sold\n        );\n\n        IERC20(IMecenateFeedFactory(settings.factoryContract).museToken())\n            .approve(\n                IMecenateFeedFactory(settings.factoryContract).museToken(),\n                tokens_bought\n            );\n\n        // burn MUSE\n        BurnMUSE._burn(tokens_bought);\n\n        return true;\n    }\n\n    function getTokenAddress()\n        internal\n        view\n        virtual\n        override\n        returns (address token)\n    {\n        return IMecenateFeedFactory(settings.factoryContract).daiToken();\n    }\n\n    function getExchangeAddress()\n        internal\n        view\n        override\n        returns (address exchange)\n    {\n        exchange = settings.router;\n    }\n\n    function _swapTokensForToken(\n        address tokenIn,\n        address tokenOut,\n        uint24 fee,\n        uint256 amountIn\n    ) internal returns (uint256 amountOut) {\n        // Check and approve allowance\n        uint256 allowance = IERC20(tokenIn).allowance(\n            address(this),\n            settings.router\n        );\n        if (allowance < amountIn) {\n            IERC20(tokenIn).approve(settings.router, type(uint256).max);\n        }\n\n        // Prepare parameters\n        address recipient = address(this);\n        uint256 deadline = block.timestamp + 60; // 15 seconds from the current block timestamp\n\n        // Perform the swap\n        // Refer to the Uniswap V3 documentation for details on the params.\n        amountOut = ISwapRouter(settings.router).exactInputSingle(\n            ISwapRouter.ExactInputSingleParams({\n                tokenIn: tokenIn,\n                tokenOut: tokenOut,\n                fee: fee,\n                recipient: recipient,\n                deadline: deadline,\n                amountIn: amountIn,\n                amountOutMinimum: 0, // you may want to set a minimum here\n                sqrtPriceLimitX96: 0\n            })\n        );\n\n        return amountOut;\n    }\n}\n"},"contracts/modules/BurnMUSE.sol":{"content":"pragma solidity 0.8.19;\nimport \"../interfaces/IMUSE.sol\";\nimport \"../interfaces/IMecenateFeedFactory.sol\";\nimport \"./Events.sol\";\n\nabstract contract BurnMUSE is Events {\n    function _burn(uint256 value) internal virtual returns (bool success) {\n        IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken()).burn(\n            value\n        );\n        return true;\n    }\n\n    function _burnFrom(\n        address from,\n        uint256 value\n    ) internal virtual returns (bool success) {\n        IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken())\n            .transferFrom(from, address(this), value);\n        _burn(value);\n        return true;\n    }\n\n    function getTokenAddress() internal view virtual returns (address token) {\n        return IMecenateFeedFactory(settings.factoryContract).museToken();\n    }\n\n    function getExchangeAddress()\n        internal\n        view\n        virtual\n        returns (address exchange)\n    {\n        exchange = IMecenateFeedFactory(settings.factoryContract).router();\n    }\n}\n"},"contracts/modules/Creation.sol":{"content":"/**\n * @title Creation\n * @dev This contract is an abstract contract that inherits from Staking contract. It provides a function to create a post with the given parameters. The function requires the user to be the owner of the post and to have a stake. The post can have different durations and types. The function returns the created post.\n */\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"./Staking.sol\";\n\nabstract contract Creation is Staking {\n    function createPost(\n        bytes memory encryptedHash,\n        Structures.PostType postType,\n        Structures.PostDuration postDuration,\n        uint256 payment,\n        uint256 stakeAmount,\n        Structures.Tokens tokenId,\n        address funder,\n        address seller,\n        bool useStake\n    )\n        external\n        payable\n        onlyValidTokenID(tokenId)\n        returns (Structures.Post memory)\n    {\n        require(msg.sender == owner);\n\n        require(\n            IMecenateUsers(settings.usersModuleContract).checkifUserExist(\n                seller\n            ),\n            \"USER_NOT_EXIST\"\n        );\n\n        require(\n            validStatuses[uint8(post.postdata.settings.status)],\n            \"INVALID_STATUS\"\n        );\n\n        require(stakeAmount > 0, \"STAKE_AMOUNT_ZERO\");\n\n        require(payment > 0, \"PAYMENT_ZERO\");\n\n        uint256 stake;\n\n        if (useStake) {\n            require(\n                Deposit._getDeposit(tokenId, seller) >= stakeAmount,\n                \"STAKE_INCORRECT\"\n            );\n\n            stake = stakeAmount;\n        } else {\n            if (tokenId == Structures.Tokens.NaN) {\n                require(msg.value == stakeAmount, \"WRONG_MSG_VALUE\");\n            }\n\n            stake = _addStake(tokenId, seller, funder, stakeAmount);\n        }\n\n        uint256 duration = postDurationToDays[uint8(postDuration)];\n\n        _changeStatus(Structures.PostStatus.Proposed);\n\n        Structures.User memory creator = IMecenateUsers(\n            settings.usersModuleContract\n        ).getUserMetadata(seller);\n\n        // Initialize the new Post struct with named arguments for clarity\n        Structures.Post memory newPost = Structures.Post({\n            creator: creator,\n            postdata: Structures.PostData({\n                settings: Structures.PostSettings({\n                    postType: postType,\n                    status: Structures.PostStatus.Proposed,\n                    creationTimeStamp: block.timestamp,\n                    endTimeStamp: 0,\n                    duration: duration,\n                    tokenId: tokenId\n                }),\n                escrow: Structures.PostEscrow({\n                    buyer: address(0),\n                    seller: seller,\n                    stake: stake,\n                    payment: payment,\n                    punishment: 0,\n                    penalty: 0\n                }),\n                data: Structures.PostEncryptedData({\n                    encryptedData: encryptedHash,\n                    encryptedKey: ZEROHASH,\n                    decryptedData: ZEROHASH\n                })\n            })\n        });\n\n        // Update storage and emit event\n        post = newPost;\n\n        settings.postCount++;\n\n        emit Created(newPost);\n\n        return newPost;\n    }\n}\n"},"contracts/modules/Data.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"../interfaces/IMecenateFeed.sol\";\nimport \"../interfaces/IMecenateUsers.sol\";\nimport \"../interfaces/IMecenateTreasury.sol\";\nimport \"../interfaces/IMecenateFeedFactory.sol\";\nimport \"../helpers/eas/IEAS.sol\";\nimport \"./Version.sol\";\n\n/**\n * @title Data\n * @dev This contract stores data related to Mecenate posts and provides functions to interact with it.\n */\ncontract Data is Version {\n    bytes internal constant ZEROHASH = \"0x00\";\n\n    address public owner;\n\n    Structures.Post public post;\n\n    Structures.FeedSettings internal settings;\n\n    mapping(uint8 => uint256) internal postDurationToDays;\n\n    mapping(uint8 => bool) internal validStatuses;\n\n    constructor(\n        address usersModuleContract,\n        address factoryContract,\n        uint256 _major,\n        uint256 _minor,\n        uint256 _patch\n    ) Version(_major, _minor, _patch) {\n        settings.punishmentRatio = 100000000000000000; // Constant value\n        settings.postCount = 0; // Initialize postCount to 0\n        settings.usersModuleContract = usersModuleContract;\n        settings.factoryContract = msg.sender;\n        settings.router = IMecenateFeedFactory(factoryContract).router();\n        settings.version = _version();\n\n        post.postdata.settings.status = Structures.PostStatus.Waiting;\n\n        postDurationToDays[uint8(Structures.PostDuration.OneDay)] = 1 days;\n        postDurationToDays[uint8(Structures.PostDuration.ThreeDays)] = 3 days;\n        postDurationToDays[uint8(Structures.PostDuration.OneWeek)] = 7 days;\n        postDurationToDays[uint8(Structures.PostDuration.TwoWeeks)] = 14 days;\n        postDurationToDays[uint8(Structures.PostDuration.OneMonth)] = 30 days;\n\n        validStatuses[uint8(Structures.PostStatus.Waiting)] = true;\n    }\n\n    function _changeStatus(Structures.PostStatus newStatus) internal {\n        validStatuses[uint8(post.postdata.settings.status)] = false;\n        validStatuses[uint8(newStatus)] = true;\n        post.postdata.settings.status = newStatus;\n    }\n\n    function getStatus() external view returns (Structures.PostStatus) {\n        return post.postdata.settings.status;\n    }\n\n    function getTokenId() external view returns (Structures.Tokens) {\n        return post.postdata.settings.tokenId;\n    }\n\n    function getTokenIdAddress() public view returns (address) {\n        if (post.postdata.settings.tokenId == Structures.Tokens.MUSE) {\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\n        } else if (post.postdata.settings.tokenId == Structures.Tokens.DAI) {\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\n        } else {\n            return address(0);\n        }\n    }\n\n    function _checkToken(Structures.Tokens _token) internal view {\n        require(_token == post.postdata.settings.tokenId, \"WRONG_TOKEN\");\n    }\n\n    function getPaymentRequested() external view returns (uint256) {\n        return post.postdata.escrow.payment;\n    }\n\n    function getStakeRequested() external view returns (uint256) {\n        return post.postdata.escrow.stake;\n    }\n\n    function postCount() external view returns (uint256) {\n        return settings.postCount;\n    }\n\n    function getEncryptedPost() external view returns (bytes memory) {\n        return post.postdata.data.encryptedData;\n    }\n\n    function getPost() external view returns (Structures.Post memory) {\n        return post;\n    }\n\n    receive() external payable {}\n}\n"},"contracts/modules/Deposit.sol":{"content":"pragma solidity 0.8.19;\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./TokenManager.sol\";\n\ncontract Deposit {\n    using SafeMath for uint256;\n\n    mapping(uint256 => mapping(address => uint256)) private _deposit;\n\n    event DepositIncreased(\n        Structures.Tokens tokenID,\n        address user,\n        uint256 amount,\n        uint256 newDeposit\n    );\n    event DepositDecreased(\n        Structures.Tokens tokenID,\n        address user,\n        uint256 amount,\n        uint256 newDeposit\n    );\n\n    function _increaseDeposit(\n        Structures.Tokens tokenID,\n        address user,\n        uint256 amountToAdd\n    ) internal returns (uint256 newDeposit) {\n        // calculate new deposit amount\n        newDeposit = _deposit[uint256(tokenID)][user].add(amountToAdd);\n\n        // set new stake to storage\n        _deposit[uint256(tokenID)][user] = newDeposit;\n\n        // emit event\n        emit DepositIncreased(tokenID, user, amountToAdd, newDeposit);\n\n        // return\n        return newDeposit;\n    }\n\n    function _decreaseDeposit(\n        Structures.Tokens tokenID,\n        address user,\n        uint256 amountToRemove\n    ) internal returns (uint256 newDeposit) {\n        // get current deposit\n        uint256 currentDeposit = _deposit[uint256(tokenID)][user];\n\n        // check if sufficient deposit\n        require(currentDeposit >= amountToRemove, \"INSUFFICIENT_DEPOSIT\");\n\n        // calculate new deposit amount\n        newDeposit = currentDeposit.sub(amountToRemove);\n\n        // set new stake to storage\n        _deposit[uint256(tokenID)][user] = newDeposit;\n\n        // emit event\n        emit DepositDecreased(tokenID, user, amountToRemove, newDeposit);\n\n        // return\n        return newDeposit;\n    }\n\n    function _clearDeposit(\n        Structures.Tokens tokenID,\n        address user\n    ) internal returns (uint256 amountRemoved) {\n        // get current deposit\n        uint256 currentDeposit = _deposit[uint256(tokenID)][user];\n\n        // remove deposit\n        _decreaseDeposit(tokenID, user, currentDeposit);\n\n        // return\n        return currentDeposit;\n    }\n\n    function _getDeposit(\n        Structures.Tokens tokenID,\n        address user\n    ) internal view returns (uint256 deposit) {\n        return _deposit[uint256(tokenID)][user];\n    }\n}\n"},"contracts/modules/Events.sol":{"content":"/**\r\n * @title Events\r\n * @dev This abstract contract defines the events related to the Mecenate platform's post lifecycle.\r\n */\r\npragma solidity 0.8.19;\r\n\r\nimport \"./Data.sol\";\r\n\r\nabstract contract Events is Data {\r\n    event Created(Structures.Post post);\r\n    event Accepted(Structures.Post post);\r\n    event Valid(Structures.Post post);\r\n    event Invalid(Structures.Post post);\r\n    event Finalized(Structures.Post post);\r\n    event MadePublic(Structures.Post post);\r\n    event Renounced(Structures.Post post);\r\n}\r\n"},"contracts/modules/Finalization.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\nimport \"./Staking.sol\";\n\nabstract contract Finalization is Staking {\n    function finalizePost(\n        bool valid,\n        uint256 punishment,\n        bytes32 uid\n    ) external virtual {\n        require(msg.sender == post.postdata.escrow.buyer, \"NOT_SELLER\");\n\n        require(\n            post.postdata.settings.status == Structures.PostStatus.Submitted,\n            \"NOT_SUBMITTED\"\n        );\n\n        IEAS eas = IEAS(\n            IMecenateFeedFactory(settings.factoryContract).easContract()\n        );\n\n        Attestation memory attestation = eas.getAttestation(uid);\n\n        require(\n            attestation.attester == post.postdata.escrow.buyer,\n            \"INVALID_ATTESTATION\"\n        );\n\n        require(\n            attestation.recipient == post.postdata.escrow.seller,\n            \"INVALID_RECIPIENT\"\n        );\n\n        require(\n            attestation.schema ==\n                IMecenateFeedFactory(settings.factoryContract).easSchema(),\n            \"INVALID_SCHEMA\"\n        );\n\n        (bool easResult, address feed, bytes memory postBytes) = abi.decode(\n            attestation.data,\n            (bool, address, bytes)\n        );\n\n        require(feed == address(this), \"INVALID_FEED\");\n\n        require(\n            keccak256(abi.encode(postBytes)) ==\n                keccak256(abi.encode(post.postdata.data.encryptedData)),\n            \"INVALID_POST\"\n        );\n\n        // Common contract addresses and variables\n        address treasuryContract = IMecenateFeedFactory(\n            settings.factoryContract\n        ).treasuryContract();\n\n        uint256 buyerFee = (post.postdata.escrow.payment *\n            IMecenateTreasury(treasuryContract).globalFee()) / 10000;\n\n        uint256 amountToAdd = post.postdata.escrow.payment - buyerFee;\n\n        // Variables for stake changes\n        uint256 buyerStake;\n\n        uint256 sellerStake;\n\n        if (post.postdata.settings.endTimeStamp < block.timestamp || valid) {\n            require(easResult == valid, \"INVALID_ATTESTATION\");\n\n            // Code for both the timeout and the valid case\n            buyerStake = Deposit._decreaseDeposit(\n                post.postdata.settings.tokenId,\n                post.postdata.escrow.buyer,\n                post.postdata.escrow.payment\n            );\n\n            sellerStake = Deposit._increaseDeposit(\n                post.postdata.settings.tokenId,\n                post.postdata.escrow.seller,\n                amountToAdd\n            );\n\n            _burn(post.postdata.settings.tokenId, treasuryContract, buyerFee);\n\n            post.postdata.escrow.stake = sellerStake;\n\n            post.postdata.escrow.payment = buyerStake;\n\n            _changeStatus(\n                valid\n                    ? Structures.PostStatus.Finalized\n                    : Structures.PostStatus.Punished\n            );\n\n            emit Valid(post);\n        } else if (!valid) {\n            require(easResult == valid, \"INVALID_ATTESTATION\");\n\n            require(\n                punishment <= post.postdata.escrow.stake,\n                \"PUNISHMENT_TOO_HIGH\"\n            );\n            require(settings.punishmentRatio < 1e18, \"PUNISHMENT_RATIO_HIGH\");\n\n            uint256 penalty = (punishment * settings.punishmentRatio) / 1e18;\n\n            post.postdata.escrow.payment = _burnStake(\n                post.postdata.settings.tokenId,\n                post.postdata.escrow.buyer,\n                penalty\n            );\n\n            post.postdata.escrow.stake = _burnStake(\n                post.postdata.settings.tokenId,\n                post.postdata.escrow.seller,\n                punishment\n            );\n\n            // Update status and penalties\n            post.postdata.settings.status = Structures.PostStatus.Punished;\n\n            post.postdata.escrow.punishment = punishment;\n\n            post.postdata.escrow.penalty = penalty;\n\n            _changeStatus(Structures.PostStatus.Punished);\n\n            emit Invalid(post);\n        }\n    }\n}\n"},"contracts/modules/Renounce.sol":{"content":"/**\n * @title Renounce\n * @dev This abstract contract extends the Staking contract and provides functionality for a seller to renounce a post.\n * The seller can only renounce a post if they are the original creator of the post and the post is in the Accepted or Submitted status.\n * Renouncing a post refunds the buyer's payment and transfers the seller's stake to the seller's address.\n * The post struct is reset and the post status is updated to Renounced.\n * This contract also provides an internal function for refunding a post, which is called by the renouncePost function.\n */\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport \"./Staking.sol\";\n\nabstract contract Renounce is Staking {\n    function renouncePost() external {\n        require(msg.sender == post.postdata.escrow.seller, \"NOT_SELLER\");\n\n        // Validate the post status\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\n\n        require(validStatuses[uint8(currentStatus)], \"INVALID_STATUS\");\n\n        // Reset post and post settings\n        post = Structures.Post(\n            Structures.User({\n                evmAddress: address(0),\n                sismoVaultId: ZEROHASH,\n                publicKey: ZEROHASH\n            }),\n            Structures.PostData({\n                settings: Structures.PostSettings({\n                    status: Structures.PostStatus.Renounced,\n                    postType: Structures.PostType.Text,\n                    creationTimeStamp: 0,\n                    endTimeStamp: 0,\n                    duration: 0,\n                    tokenId: Structures.Tokens.NaN\n                }),\n                escrow: Structures.PostEscrow({\n                    buyer: address(0),\n                    seller: address(0),\n                    stake: 0,\n                    payment: 0,\n                    punishment: 0,\n                    penalty: 0\n                }),\n                data: Structures.PostEncryptedData({\n                    encryptedData: \"\",\n                    encryptedKey: \"\",\n                    decryptedData: \"\"\n                })\n            })\n        );\n\n        // Emit event\n        emit Renounced(post);\n    }\n}\n"},"contracts/modules/Staking.sol":{"content":"/**\n * @title Staking\n * @dev This contract handles staking functionality for the Mecenate platform.\n * It allows users to add, take, and burn stakes, and provides functions to get the total staked amount and individual stake amounts.\n * It also includes a modifier to check the status of a post before allowing stake-related transactions.\n */\npragma solidity 0.8.19;\n\nimport \"./Deposit.sol\";\nimport \"./Events.sol\";\n\nabstract contract Staking is Events, Deposit, TokenManager {\n    using SafeMath for uint256;\n\n    event StakeBurned(address staker, uint256 amount);\n\n    event StakeTaken(address staker, uint256 amount, Structures.Tokens tokenId);\n\n    event StakeAdded(address staker, uint256 amount, Structures.Tokens tokenId);\n\n    function _addStake(\n        Structures.Tokens tokenId,\n        address staker,\n        address funder,\n        uint256 amountToAdd\n    ) internal returns (uint256 newStake) {\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\n\n        require(\n            currentStatus != Structures.PostStatus.Accepted &&\n                currentStatus != Structures.PostStatus.Submitted,\n            \"INVALID_STATUS\"\n        );\n\n        require(amountToAdd > 0, \"STAKE_REQUIRED\");\n\n        if (tokenId != Structures.Tokens.NaN) {\n            _transferFrom(tokenId, funder, address(this), amountToAdd);\n        }\n\n        newStake = Deposit._increaseDeposit(tokenId, staker, amountToAdd);\n\n        emit StakeAdded(staker, amountToAdd, tokenId);\n\n        return newStake;\n    }\n\n    function _takeStake(\n        Structures.Tokens tokenId,\n        address staker,\n        address receiver,\n        uint256 amountToTake\n    ) internal returns (uint256 newStake) {\n        // Memorizza lo status del post in una variabile per evitare accessi ridondanti allo storage\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\n\n        // Verifica che lo status del post sia valido per procedere\n        require(\n            currentStatus != Structures.PostStatus.Accepted &&\n                currentStatus != Structures.PostStatus.Submitted,\n            \"INVALID_STATUS\"\n        );\n\n        // Effettua il trasferimento del token o dell'Ether\n        if (tokenId == Structures.Tokens.NaN) {\n            //(bool result, ) = payable(_to).call{value: amountToTake}(\"\");\n            //require(result, \"CALL_FAILED\");\n            payable(receiver).transfer(amountToTake);\n        } else {\n            _transfer(tokenId, receiver, amountToTake);\n        }\n\n        // Aggiorna il deposito e emette un evento\n        newStake = Deposit._decreaseDeposit(tokenId, staker, amountToTake);\n        emit StakeTaken(staker, amountToTake, tokenId);\n\n        return newStake;\n    }\n\n    function _takeFullStake(\n        Structures.Tokens tokenId,\n        address staker,\n        address receiver\n    ) internal returns (uint256 amountTaken) {\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, staker);\n\n        uint256 newStake = _takeStake(\n            tokenId,\n            staker,\n            receiver,\n            currentDeposit\n        );\n\n        return newStake;\n    }\n\n    function _burnStake(\n        Structures.Tokens tokenId,\n        address staker,\n        uint256 amountToBurn\n    ) internal returns (uint256 newStake) {\n        uint256 newDeposit = Deposit._decreaseDeposit(\n            tokenId,\n            staker,\n            amountToBurn\n        );\n\n        bool burnEnabled = IMecenateFeedFactory(settings.factoryContract)\n            .burnEnabled();\n\n        address treasuryContract = IMecenateFeedFactory(\n            settings.factoryContract\n        ).treasuryContract();\n\n        if (burnEnabled == false) {\n            if (tokenId == Structures.Tokens.NaN) {\n                (bool result, ) = payable(treasuryContract).call{\n                    value: amountToBurn\n                }(\"\");\n                require(result, \"CALL_FAILED\");\n            } else {\n                _transfer(tokenId, treasuryContract, amountToBurn);\n            }\n        } else {\n            if (tokenId == Structures.Tokens.DAI) {\n                _burnDai(amountToBurn);\n            } else if (tokenId == Structures.Tokens.MUSE) {\n                _burn(amountToBurn);\n            } else if (tokenId == Structures.Tokens.NaN) {\n                _burnWeth(amountToBurn);\n            }\n        }\n\n        emit StakeBurned(staker, amountToBurn);\n\n        return newDeposit;\n    }\n\n    function _burnFullStake(\n        Structures.Tokens tokenId,\n        address staker\n    ) internal returns (uint256 amountBurned) {\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, staker);\n\n        _burnStake(tokenId, staker, currentDeposit);\n\n        return currentDeposit;\n    }\n\n    function getStake(\n        Structures.Tokens tokenId,\n        address staker\n    ) external view returns (uint256 amount) {\n        // get deposit\n        amount = Deposit._getDeposit(tokenId, staker);\n        // explicit return\n        return amount;\n    }\n\n    function getTotalStaked() external view returns (uint256) {\n        uint256 amountSeller = Deposit._getDeposit(\n            post.postdata.settings.tokenId,\n            post.postdata.escrow.seller\n        );\n\n        uint256 amountBuyer = Deposit._getDeposit(\n            post.postdata.settings.tokenId,\n            post.postdata.escrow.buyer\n        );\n\n        return (amountSeller + amountBuyer);\n    }\n\n    function addStake(\n        Structures.Tokens tokenId,\n        address _funder,\n        uint256 amountToAdd\n    ) external payable returns (uint256) {\n        require(tokenId == post.postdata.settings.tokenId, \"WRONG_TOKEN\");\n\n        // Check if the encryptedVaultId matches with either the buyer or the seller\n        require(\n            msg.sender == post.postdata.escrow.buyer ||\n                msg.sender == post.postdata.escrow.seller,\n            \"WRONG_MSGSENDER\"\n        );\n\n        // Determine the amount to add based on the role (buyer or seller)\n        uint256 actualAmountToAdd = (msg.sender == post.postdata.escrow.seller)\n            ? msg.value\n            : amountToAdd;\n\n        // Update the stake\n        uint256 newStake = _addStake(\n            tokenId,\n            msg.sender,\n            _funder,\n            actualAmountToAdd\n        );\n\n        // Update the corresponding escrow value based on the role\n        if (msg.sender == post.postdata.escrow.buyer) {\n            post.postdata.escrow.payment = newStake;\n        } else {\n            post.postdata.escrow.stake = newStake;\n        }\n\n        return newStake;\n    }\n\n    function takeStake(\n        Structures.Tokens tokenId,\n        address receiver,\n        uint256 amountToTake\n    ) external returns (uint256) {\n        require(tokenId == post.postdata.settings.tokenId, \"WRONG_TOKEN\");\n\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, msg.sender);\n\n        require(currentDeposit >= amountToTake, \"NOT_ENOUGH_STAKE\");\n\n        uint256 newBalance = _takeStake(\n            tokenId,\n            msg.sender,\n            receiver,\n            amountToTake\n        );\n\n        if (msg.sender == post.postdata.escrow.buyer) {\n            post.postdata.escrow.payment = newBalance;\n        } else {\n            post.postdata.escrow.stake = newBalance;\n        }\n\n        return newBalance;\n    }\n\n    function takeFullStake(\n        Structures.Tokens tokenId,\n        address receiver\n    ) external returns (uint256) {\n        require(tokenId == post.postdata.settings.tokenId, \"WRONG_TOKEN\");\n\n        uint256 newBalance = _takeFullStake(tokenId, msg.sender, receiver);\n\n        if (msg.sender == post.postdata.escrow.buyer) {\n            post.postdata.escrow.payment = newBalance;\n        } else if (msg.sender == post.postdata.escrow.seller) {\n            post.postdata.escrow.stake = newBalance;\n        }\n\n        return newBalance;\n    }\n\n    function getSellerStake() external view returns (uint256 amount) {\n        // get deposit\n        amount = Deposit._getDeposit(\n            post.postdata.settings.tokenId,\n            post.postdata.escrow.seller\n        );\n        // explicit return\n        return amount;\n    }\n\n    function getBuyerStake() external view returns (uint256 amount) {\n        // get deposit\n        amount = Deposit._getDeposit(\n            post.postdata.settings.tokenId,\n            post.postdata.escrow.buyer\n        );\n        // explicit return\n        return amount;\n    }\n}\n"},"contracts/modules/Submission.sol":{"content":"/**\n * @title Submission\n * @dev This contract is an abstract contract that defines the functions for submitting and revealing data for a post. It inherits from the Events contract.\n */\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"./Events.sol\";\n\nabstract contract Submission is Events {\n    function submitHash(bytes memory encryptedKey) external virtual {\n        require(msg.sender == post.postdata.escrow.seller, \"NOT_SELLER\");\n\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\n        require(\n            validStatuses[uint8(currentStatus)] &&\n                (currentStatus == Structures.PostStatus.Accepted ||\n                    currentStatus == Structures.PostStatus.Submitted),\n            \"WRONG_STATUS\"\n        );\n\n        require(\n            IMecenateUsers(settings.usersModuleContract).checkifUserExist(\n                msg.sender\n            ),\n            \"User does not exist\"\n        );\n\n        require(post.creator.evmAddress == msg.sender, \"NOT_SELLER\");\n\n        _changeStatus(Structures.PostStatus.Submitted);\n\n        post.postdata.data.encryptedKey = encryptedKey;\n        post.postdata.settings.status = Structures.PostStatus.Submitted;\n        post.postdata.settings.endTimeStamp =\n            block.timestamp +\n            post.postdata.settings.duration;\n\n        emit Valid(post);\n    }\n\n    function revealData(\n        bytes memory decryptedData\n    ) external virtual returns (bytes memory) {\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\n        require(\n            validStatuses[uint8(currentStatus)] &&\n                (currentStatus == Structures.PostStatus.Submitted ||\n                    currentStatus == Structures.PostStatus.Revealed ||\n                    currentStatus == Structures.PostStatus.Finalized),\n            \"INVALID_STATUS\"\n        );\n\n        require(\n            msg.sender != post.postdata.escrow.seller,\n            \"YOU_ARE_THE_SELLER\"\n        );\n\n        require(\n            currentStatus == Structures.PostStatus.Finalized,\n            \"NOT_FINALIZED\"\n        );\n\n        post.postdata.data.decryptedData = decryptedData;\n        post.postdata.settings.status = Structures.PostStatus.Revealed;\n\n        emit MadePublic(post);\n\n        return decryptedData;\n    }\n}\n"},"contracts/modules/TokenManager.sol":{"content":"pragma solidity 0.8.19;\n\nimport \"./BurnDAI.sol\";\n\nabstract contract TokenManager is BurnDAI {\n    function _getTokenAddress(\n        Structures.Tokens tokenID\n    ) internal view returns (address) {\n        if (tokenID == Structures.Tokens.DAI)\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\n        if (tokenID == Structures.Tokens.MUSE)\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\n        return address(0);\n    }\n\n    function _checkAllowance(\n        Structures.Tokens tokenID,\n        address from,\n        address to,\n        uint256 value\n    ) internal view {\n        address tokenAddress = _getTokenAddress(tokenID);\n        require(\n            IERC20(tokenAddress).allowance(from, to) >= value,\n            \"INSUFFICIENT_ALLOWANCE\"\n        );\n    }\n\n    modifier onlyValidTokenID(Structures.Tokens tokenID) {\n        require(\n            tokenID == Structures.Tokens.MUSE ||\n                tokenID == Structures.Tokens.DAI ||\n                tokenID == Structures.Tokens.NaN,\n            \"WRONG_TOKEN\"\n        );\n        _;\n    }\n\n    function isValidTokenID(\n        Structures.Tokens tokenID\n    ) internal pure returns (bool validity) {\n        return\n            tokenID == Structures.Tokens.MUSE ||\n            tokenID == Structures.Tokens.DAI;\n    }\n\n    function _transfer(\n        Structures.Tokens tokenID,\n        address to,\n        uint256 value\n    ) internal onlyValidTokenID(tokenID) {\n        require(\n            IERC20(_getTokenAddress(tokenID)).transfer(to, value),\n            \"TRANSFER_FAILED\"\n        );\n    }\n\n    function _transferFrom(\n        Structures.Tokens tokenID,\n        address from,\n        address to,\n        uint256 value\n    ) internal onlyValidTokenID(tokenID) {\n        address tokenAddress = _getTokenAddress(tokenID);\n        _checkAllowance(tokenID, from, to, value);\n        require(\n            IERC20(tokenAddress).transferFrom(from, to, value),\n            \"TRANSFER_FAILED\"\n        );\n    }\n\n    function _burn(\n        Structures.Tokens tokenID,\n        address _receiver,\n        uint256 value\n    ) internal onlyValidTokenID(tokenID) returns (bool success) {\n        bool burnEnabled = IMecenateFeedFactory(settings.factoryContract)\n            .burnEnabled();\n\n        if (burnEnabled == false) {\n            if (tokenID == Structures.Tokens.NaN) {\n                (bool result, ) = payable(_receiver).call{value: value}(\"\");\n                require(result, \"CALL_FAILED\");\n            } else {\n                TokenManager._transfer(tokenID, _receiver, value);\n            }\n        } else {\n            if (tokenID == Structures.Tokens.DAI) {\n                _burnDai(value);\n            } else if (tokenID == Structures.Tokens.MUSE) {\n                _burn(value);\n            } else if (tokenID == Structures.Tokens.NaN) {\n                _burnWeth(value);\n            }\n        }\n\n        return true;\n    }\n\n    function _burnFrom(\n        Structures.Tokens tokenID,\n        address from,\n        uint256 value\n    ) internal onlyValidTokenID(tokenID) {\n        address treasury = IMecenateFeedFactory(settings.factoryContract)\n            .treasuryContract();\n\n        if (tokenID == Structures.Tokens.DAI) {\n            IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\n                .transferFrom(from, treasury, value);\n        } else if (tokenID == Structures.Tokens.MUSE) {\n            BurnMUSE._burnFrom(from, value);\n        }\n    }\n\n    function _approve(\n        Structures.Tokens tokenID,\n        address spender,\n        uint256 value\n    ) internal onlyValidTokenID(tokenID) {\n        if (tokenID == Structures.Tokens.DAI) {\n            require(\n                IERC20(\n                    IMecenateFeedFactory(settings.factoryContract).daiToken()\n                ).approve(spender, value),\n                \"APPROVE_FAILED\"\n            );\n        } else if (tokenID == Structures.Tokens.MUSE) {\n            uint256 currentAllowance = IMUSE(\n                IMecenateFeedFactory(settings.factoryContract).museToken()\n            ).allowance(msg.sender, spender);\n\n            uint256 newAllowance = currentAllowance + value;\n            require(\n                IMUSE(IMecenateFeedFactory(settings.factoryContract).daiToken())\n                    .increaseAllowance(spender, newAllowance),\n                \"APPROVE_FAILED\"\n            );\n        }\n    }\n\n    function totalSupply(\n        Structures.Tokens tokenID\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\n        return IERC20(_getTokenAddress(tokenID)).totalSupply();\n    }\n\n    function balanceOf(\n        Structures.Tokens tokenID,\n        address who\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\n        return IERC20(_getTokenAddress(tokenID)).balanceOf(who);\n    }\n\n    function allowance(\n        Structures.Tokens tokenID,\n        address owner,\n        address spender\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\n        return IERC20(_getTokenAddress(tokenID)).allowance(owner, spender);\n    }\n}\n"},"contracts/modules/Version.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport {Strings} from \"@openzeppelin/contracts/utils/Strings.sol\";\n\n/// @title Semver\n/// @notice A simple contract for managing contract versions.\nabstract contract Version {\n    // Contract's major version number.\n    uint256 private immutable _major;\n\n    // Contract's minor version number.\n    uint256 private immutable _minor;\n\n    // Contract's patch version number.\n    uint256 private immutable _path;\n\n    /// @dev Create a new Semver instance.\n    /// @param major Major version number.\n    /// @param minor Minor version number.\n    /// @param patch Patch version number.\n    constructor(uint256 major, uint256 minor, uint256 patch) {\n        _major = major;\n        _minor = minor;\n        _path = patch;\n    }\n\n    /// @notice Returns the full semver contract version.\n    /// @return Semver contract version as a string.\n    function version() external view returns (string memory) {\n        return\n            string(\n                abi.encodePacked(\n                    Strings.toString(_major),\n                    \".\",\n                    Strings.toString(_minor),\n                    \".\",\n                    Strings.toString(_path)\n                )\n            );\n    }\n\n    function _version() internal view returns (string memory) {\n        return\n            string(\n                abi.encodePacked(\n                    Strings.toString(_major),\n                    \".\",\n                    Strings.toString(_minor),\n                    \".\",\n                    Strings.toString(_path)\n                )\n            );\n    }\n}\n"},"contracts/stats/MecenateStats.sol":{"content":"/**\n * @title MecenateStats\n * @dev This contract provides statistics about the Mecenate platform, including the total number of users, bay requests, feeds, global fee, fixed fee, and treasury balance.\n */\npragma solidity 0.8.19;\n\nimport \"../interfaces/IMecenateUsers.sol\";\nimport \"../interfaces/IMecenateFeedFactory.sol\";\nimport \"../interfaces/IMecenateBay.sol\";\nimport \"../interfaces/IMecenateTreasury.sol\";\n\ncontract MecenateStats {\n    struct Stats {\n        uint256 totalUsers;\n        uint256 totalBayRequests;\n        uint256 totalFeeds;\n        uint256 globalFee;\n        uint256 fixedFee;\n        uint256 treasuryBalance;\n    }\n\n    IMecenateUsers public mecenateUsers;\n    IMecenateFeedFactory public mecenateFeedFactory;\n    IMecenateBay public mecenateBay;\n    IMecenateTreasury public mecenateTreasury;\n\n    constructor(\n        address mecenateUsersAddress,\n        address mecenateFeedFactoryAddress,\n        address mecenateBayAddress,\n        address mecenateTreasuryAddress\n    ) {\n        mecenateUsers = IMecenateUsers(mecenateUsersAddress);\n        mecenateFeedFactory = IMecenateFeedFactory(mecenateFeedFactoryAddress);\n        mecenateBay = IMecenateBay(mecenateBayAddress);\n        mecenateTreasury = IMecenateTreasury(mecenateTreasuryAddress);\n    }\n\n    function getStats() public view returns (Stats memory) {\n        uint256 totalBayRequests = mecenateBay.contractCounter();\n        uint256 totalFeeds = mecenateFeedFactory.contractCounter();\n\n        return\n            Stats(\n                mecenateUsers.getUserCount(),\n                totalBayRequests,\n                totalFeeds,\n                mecenateTreasury.globalFee(),\n                mecenateTreasury.fixedFee(),\n                address(mecenateTreasury).balance\n            );\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"viaIR":true,"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates","devdoc","userdoc"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/interfaces/IMUSE.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/interfaces/IMUSE.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/interfaces/IMecenateBay.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/interfaces/IMecenateBay.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/interfaces/IMecenateFeed.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/interfaces/IMecenateFeed.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/interfaces/IMecenateFeedFactory.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/interfaces/IMecenateFeedFactory.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/interfaces/IMecenateTreasury.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/interfaces/IMecenateTreasury.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/interfaces/IWETH.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/interfaces/IWETH.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/library/Structures.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/library/Structures.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/modules/BurnDAI.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/modules/BurnDAI.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/modules/BurnMUSE.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/modules/BurnMUSE.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/modules/Deposit.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/modules/Deposit.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/modules/Events.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/modules/Events.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/modules/Staking.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/modules/Staking.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/modules/TokenManager.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/modules/TokenManager.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"1878","formattedMessage":"Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/stats/MecenateStats.sol\n\n","message":"SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/stats/MecenateStats.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"3420","formattedMessage":"Warning: Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.19;\"\n--> contracts/interfaces/IMecenateUsers.sol\n\n","message":"Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.19;\"","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/interfaces/IMecenateUsers.sol","start":-1},"type":"Warning"}],"sources":{"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[77]},"id":78,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:0"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"131:70:0","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":77,"linearizedBaseContracts":[77],"name":"IERC20","nameLocation":"212:6:0","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":3,"nodeType":"StructuredDocumentation","src":"225:158:0","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":11,"name":"Transfer","nameLocation":"394:8:0","nodeType":"EventDefinition","parameters":{"id":10,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"419:4:0","nodeType":"VariableDeclaration","scope":11,"src":"403:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4,"name":"address","nodeType":"ElementaryTypeName","src":"403:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"441:2:0","nodeType":"VariableDeclaration","scope":11,"src":"425:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6,"name":"address","nodeType":"ElementaryTypeName","src":"425:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":9,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"453:5:0","nodeType":"VariableDeclaration","scope":11,"src":"445:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8,"name":"uint256","nodeType":"ElementaryTypeName","src":"445:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"402:57:0"},"src":"388:72:0"},{"anonymous":false,"documentation":{"id":12,"nodeType":"StructuredDocumentation","src":"466:148:0","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":20,"name":"Approval","nameLocation":"625:8:0","nodeType":"EventDefinition","parameters":{"id":19,"nodeType":"ParameterList","parameters":[{"constant":false,"id":14,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"650:5:0","nodeType":"VariableDeclaration","scope":20,"src":"634:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13,"name":"address","nodeType":"ElementaryTypeName","src":"634:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":16,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"673:7:0","nodeType":"VariableDeclaration","scope":20,"src":"657:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":15,"name":"address","nodeType":"ElementaryTypeName","src":"657:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":18,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"690:5:0","nodeType":"VariableDeclaration","scope":20,"src":"682:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":17,"name":"uint256","nodeType":"ElementaryTypeName","src":"682:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"633:63:0"},"src":"619:78:0"},{"documentation":{"id":21,"nodeType":"StructuredDocumentation","src":"703:66:0","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":26,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"783:11:0","nodeType":"FunctionDefinition","parameters":{"id":22,"nodeType":"ParameterList","parameters":[],"src":"794:2:0"},"returnParameters":{"id":25,"nodeType":"ParameterList","parameters":[{"constant":false,"id":24,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":26,"src":"820:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":23,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"819:9:0"},"scope":77,"src":"774:55:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":27,"nodeType":"StructuredDocumentation","src":"835:72:0","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":34,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"921:9:0","nodeType":"FunctionDefinition","parameters":{"id":30,"nodeType":"ParameterList","parameters":[{"constant":false,"id":29,"mutability":"mutable","name":"account","nameLocation":"939:7:0","nodeType":"VariableDeclaration","scope":34,"src":"931:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":28,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"930:17:0"},"returnParameters":{"id":33,"nodeType":"ParameterList","parameters":[{"constant":false,"id":32,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":34,"src":"971:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":31,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"970:9:0"},"scope":77,"src":"912:68:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":35,"nodeType":"StructuredDocumentation","src":"986:202:0","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":44,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1202:8:0","nodeType":"FunctionDefinition","parameters":{"id":40,"nodeType":"ParameterList","parameters":[{"constant":false,"id":37,"mutability":"mutable","name":"to","nameLocation":"1219:2:0","nodeType":"VariableDeclaration","scope":44,"src":"1211:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":36,"name":"address","nodeType":"ElementaryTypeName","src":"1211:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":39,"mutability":"mutable","name":"amount","nameLocation":"1231:6:0","nodeType":"VariableDeclaration","scope":44,"src":"1223:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":38,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1210:28:0"},"returnParameters":{"id":43,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":44,"src":"1257:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":41,"name":"bool","nodeType":"ElementaryTypeName","src":"1257:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1256:6:0"},"scope":77,"src":"1193:70:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":45,"nodeType":"StructuredDocumentation","src":"1269:264:0","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":54,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1547:9:0","nodeType":"FunctionDefinition","parameters":{"id":50,"nodeType":"ParameterList","parameters":[{"constant":false,"id":47,"mutability":"mutable","name":"owner","nameLocation":"1565:5:0","nodeType":"VariableDeclaration","scope":54,"src":"1557:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":46,"name":"address","nodeType":"ElementaryTypeName","src":"1557:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":49,"mutability":"mutable","name":"spender","nameLocation":"1580:7:0","nodeType":"VariableDeclaration","scope":54,"src":"1572:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":48,"name":"address","nodeType":"ElementaryTypeName","src":"1572:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1556:32:0"},"returnParameters":{"id":53,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":54,"src":"1612:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":51,"name":"uint256","nodeType":"ElementaryTypeName","src":"1612:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1611:9:0"},"scope":77,"src":"1538:83:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":55,"nodeType":"StructuredDocumentation","src":"1627:642:0","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":64,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2283:7:0","nodeType":"FunctionDefinition","parameters":{"id":60,"nodeType":"ParameterList","parameters":[{"constant":false,"id":57,"mutability":"mutable","name":"spender","nameLocation":"2299:7:0","nodeType":"VariableDeclaration","scope":64,"src":"2291:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":56,"name":"address","nodeType":"ElementaryTypeName","src":"2291:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":59,"mutability":"mutable","name":"amount","nameLocation":"2316:6:0","nodeType":"VariableDeclaration","scope":64,"src":"2308:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":58,"name":"uint256","nodeType":"ElementaryTypeName","src":"2308:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2290:33:0"},"returnParameters":{"id":63,"nodeType":"ParameterList","parameters":[{"constant":false,"id":62,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":64,"src":"2342:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":61,"name":"bool","nodeType":"ElementaryTypeName","src":"2342:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2341:6:0"},"scope":77,"src":"2274:74:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":65,"nodeType":"StructuredDocumentation","src":"2354:287:0","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":76,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2655:12:0","nodeType":"FunctionDefinition","parameters":{"id":72,"nodeType":"ParameterList","parameters":[{"constant":false,"id":67,"mutability":"mutable","name":"from","nameLocation":"2676:4:0","nodeType":"VariableDeclaration","scope":76,"src":"2668:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":66,"name":"address","nodeType":"ElementaryTypeName","src":"2668:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":69,"mutability":"mutable","name":"to","nameLocation":"2690:2:0","nodeType":"VariableDeclaration","scope":76,"src":"2682:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":68,"name":"address","nodeType":"ElementaryTypeName","src":"2682:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":71,"mutability":"mutable","name":"amount","nameLocation":"2702:6:0","nodeType":"VariableDeclaration","scope":76,"src":"2694:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":70,"name":"uint256","nodeType":"ElementaryTypeName","src":"2694:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2667:42:0"},"returnParameters":{"id":75,"nodeType":"ParameterList","parameters":[{"constant":false,"id":74,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":76,"src":"2728:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":73,"name":"bool","nodeType":"ElementaryTypeName","src":"2728:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2727:6:0"},"scope":77,"src":"2646:88:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":78,"src":"202:2534:0","usedErrors":[]}],"src":"106:2631:0"},"id":0},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[1172],"SignedMath":[1589],"Strings":[306]},"id":307,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":79,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:1"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":80,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":307,"sourceUnit":1173,"src":"126:25:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","file":"./math/SignedMath.sol","id":81,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":307,"sourceUnit":1590,"src":"152:31:1","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":82,"nodeType":"StructuredDocumentation","src":"185:34:1","text":" @dev String operations."},"fullyImplemented":true,"id":306,"linearizedBaseContracts":[306],"name":"Strings","nameLocation":"228:7:1","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":85,"mutability":"constant","name":"_SYMBOLS","nameLocation":"267:8:1","nodeType":"VariableDeclaration","scope":306,"src":"242:54:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":83,"name":"bytes16","nodeType":"ElementaryTypeName","src":"242:7:1","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":84,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"278:18:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":88,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"325:15:1","nodeType":"VariableDeclaration","scope":306,"src":"302:43:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":86,"name":"uint8","nodeType":"ElementaryTypeName","src":"302:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":87,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"343:2:1","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":135,"nodeType":"Block","src":"518:625:1","statements":[{"id":134,"nodeType":"UncheckedBlock","src":"528:609:1","statements":[{"assignments":[97],"declarations":[{"constant":false,"id":97,"mutability":"mutable","name":"length","nameLocation":"560:6:1","nodeType":"VariableDeclaration","scope":134,"src":"552:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":96,"name":"uint256","nodeType":"ElementaryTypeName","src":"552:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":104,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":100,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":91,"src":"580:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":98,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1172,"src":"569:4:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$1172_$","typeString":"type(library Math)"}},"id":99,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"574:5:1","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":1009,"src":"569:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":101,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"569:17:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":102,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"589:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"569:21:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"552:38:1"},{"assignments":[106],"declarations":[{"constant":false,"id":106,"mutability":"mutable","name":"buffer","nameLocation":"618:6:1","nodeType":"VariableDeclaration","scope":134,"src":"604:20:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":105,"name":"string","nodeType":"ElementaryTypeName","src":"604:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":111,"initialValue":{"arguments":[{"id":109,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":97,"src":"638:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":108,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"627:10:1","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":107,"name":"string","nodeType":"ElementaryTypeName","src":"631:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":110,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"627:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"604:41:1"},{"assignments":[113],"declarations":[{"constant":false,"id":113,"mutability":"mutable","name":"ptr","nameLocation":"667:3:1","nodeType":"VariableDeclaration","scope":134,"src":"659:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":112,"name":"uint256","nodeType":"ElementaryTypeName","src":"659:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":114,"nodeType":"VariableDeclarationStatement","src":"659:11:1"},{"AST":{"nodeType":"YulBlock","src":"740:67:1","statements":[{"nodeType":"YulAssignment","src":"758:35:1","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"769:6:1"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"781:2:1","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"785:6:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"777:3:1"},"nodeType":"YulFunctionCall","src":"777:15:1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"765:3:1"},"nodeType":"YulFunctionCall","src":"765:28:1"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"758:3:1"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":106,"isOffset":false,"isSlot":false,"src":"769:6:1","valueSize":1},{"declaration":97,"isOffset":false,"isSlot":false,"src":"785:6:1","valueSize":1},{"declaration":113,"isOffset":false,"isSlot":false,"src":"758:3:1","valueSize":1}],"id":115,"nodeType":"InlineAssembly","src":"731:76:1"},{"body":{"id":130,"nodeType":"Block","src":"833:267:1","statements":[{"expression":{"id":118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"851:5:1","subExpression":{"id":117,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":113,"src":"851:3:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":119,"nodeType":"ExpressionStatement","src":"851:5:1"},{"AST":{"nodeType":"YulBlock","src":"934:84:1","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"964:3:1"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"978:5:1"},{"kind":"number","nodeType":"YulLiteral","src":"985:2:1","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"974:3:1"},"nodeType":"YulFunctionCall","src":"974:14:1"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"990:8:1"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"969:4:1"},"nodeType":"YulFunctionCall","src":"969:30:1"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"956:7:1"},"nodeType":"YulFunctionCall","src":"956:44:1"},"nodeType":"YulExpressionStatement","src":"956:44:1"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":85,"isOffset":false,"isSlot":false,"src":"990:8:1","valueSize":1},{"declaration":113,"isOffset":false,"isSlot":false,"src":"964:3:1","valueSize":1},{"declaration":91,"isOffset":false,"isSlot":false,"src":"978:5:1","valueSize":1}],"id":120,"nodeType":"InlineAssembly","src":"925:93:1"},{"expression":{"id":123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":121,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":91,"src":"1035:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":122,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1044:2:1","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1035:11:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":124,"nodeType":"ExpressionStatement","src":"1035:11:1"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":125,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":91,"src":"1068:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1077:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1068:10:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":129,"nodeType":"IfStatement","src":"1064:21:1","trueBody":{"id":128,"nodeType":"Break","src":"1080:5:1"}}]},"condition":{"hexValue":"74727565","id":116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"827:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":131,"nodeType":"WhileStatement","src":"820:280:1"},{"expression":{"id":132,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":106,"src":"1120:6:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":95,"id":133,"nodeType":"Return","src":"1113:13:1"}]}]},"documentation":{"id":89,"nodeType":"StructuredDocumentation","src":"352:90:1","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":136,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"456:8:1","nodeType":"FunctionDefinition","parameters":{"id":92,"nodeType":"ParameterList","parameters":[{"constant":false,"id":91,"mutability":"mutable","name":"value","nameLocation":"473:5:1","nodeType":"VariableDeclaration","scope":136,"src":"465:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":90,"name":"uint256","nodeType":"ElementaryTypeName","src":"465:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"464:15:1"},"returnParameters":{"id":95,"nodeType":"ParameterList","parameters":[{"constant":false,"id":94,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":136,"src":"503:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":93,"name":"string","nodeType":"ElementaryTypeName","src":"503:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"502:15:1"},"scope":306,"src":"447:696:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":163,"nodeType":"Block","src":"1313:103:1","statements":[{"expression":{"arguments":[{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":148,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":139,"src":"1354:5:1","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":149,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1362:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1354:9:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":152,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1372:2:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1354:20:1","trueExpression":{"hexValue":"2d","id":151,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1366:3:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":157,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":139,"src":"1400:5:1","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":155,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1589,"src":"1385:10:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMath_$1589_$","typeString":"type(library SignedMath)"}},"id":156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1396:3:1","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":1588,"src":"1385:14:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":158,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1385:21:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":154,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[136,164],"referencedDeclaration":136,"src":"1376:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":159,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1376:31:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":146,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1337:3:1","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":147,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1341:12:1","memberName":"encodePacked","nodeType":"MemberAccess","src":"1337:16:1","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":160,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1337:71:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":145,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1330:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":144,"name":"string","nodeType":"ElementaryTypeName","src":"1330:6:1","typeDescriptions":{}}},"id":161,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1330:79:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":143,"id":162,"nodeType":"Return","src":"1323:86:1"}]},"documentation":{"id":137,"nodeType":"StructuredDocumentation","src":"1149:89:1","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":164,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"1252:8:1","nodeType":"FunctionDefinition","parameters":{"id":140,"nodeType":"ParameterList","parameters":[{"constant":false,"id":139,"mutability":"mutable","name":"value","nameLocation":"1268:5:1","nodeType":"VariableDeclaration","scope":164,"src":"1261:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":138,"name":"int256","nodeType":"ElementaryTypeName","src":"1261:6:1","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1260:14:1"},"returnParameters":{"id":143,"nodeType":"ParameterList","parameters":[{"constant":false,"id":142,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":164,"src":"1298:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":141,"name":"string","nodeType":"ElementaryTypeName","src":"1298:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1297:15:1"},"scope":306,"src":"1243:173:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":183,"nodeType":"Block","src":"1595:100:1","statements":[{"id":182,"nodeType":"UncheckedBlock","src":"1605:84:1","statements":[{"expression":{"arguments":[{"id":173,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":167,"src":"1648:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":176,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":167,"src":"1667:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":174,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1172,"src":"1655:4:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$1172_$","typeString":"type(library Math)"}},"id":175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1660:6:1","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":1132,"src":"1655:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":177,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1655:18:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1676:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1655:22:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":172,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[184,260,280],"referencedDeclaration":260,"src":"1636:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":180,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1636:42:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":171,"id":181,"nodeType":"Return","src":"1629:49:1"}]}]},"documentation":{"id":165,"nodeType":"StructuredDocumentation","src":"1422:94:1","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":184,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1530:11:1","nodeType":"FunctionDefinition","parameters":{"id":168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":167,"mutability":"mutable","name":"value","nameLocation":"1550:5:1","nodeType":"VariableDeclaration","scope":184,"src":"1542:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":166,"name":"uint256","nodeType":"ElementaryTypeName","src":"1542:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1541:15:1"},"returnParameters":{"id":171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":170,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":184,"src":"1580:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":169,"name":"string","nodeType":"ElementaryTypeName","src":"1580:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1579:15:1"},"scope":306,"src":"1521:174:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":259,"nodeType":"Block","src":"1908:347:1","statements":[{"assignments":[195],"declarations":[{"constant":false,"id":195,"mutability":"mutable","name":"buffer","nameLocation":"1931:6:1","nodeType":"VariableDeclaration","scope":259,"src":"1918:19:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":194,"name":"bytes","nodeType":"ElementaryTypeName","src":"1918:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":204,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1950:1:1","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":199,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"1954:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1950:10:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1963:1:1","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1950:14:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":197,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1940:9:1","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":196,"name":"bytes","nodeType":"ElementaryTypeName","src":"1944:5:1","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":203,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1940:25:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1918:47:1"},{"expression":{"id":209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":205,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":195,"src":"1975:6:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":207,"indexExpression":{"hexValue":"30","id":206,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1982:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1975:9:1","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":208,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1987:3:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1975:15:1","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":210,"nodeType":"ExpressionStatement","src":"1975:15:1"},{"expression":{"id":215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":211,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":195,"src":"2000:6:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":213,"indexExpression":{"hexValue":"31","id":212,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2007:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2000:9:1","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":214,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2012:3:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2000:15:1","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":216,"nodeType":"ExpressionStatement","src":"2000:15:1"},{"body":{"id":245,"nodeType":"Block","src":"2070:83:1","statements":[{"expression":{"id":239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":231,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":195,"src":"2084:6:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":233,"indexExpression":{"id":232,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":218,"src":"2091:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2084:9:1","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":234,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":85,"src":"2096:8:1","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":238,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":235,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":187,"src":"2105:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":236,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2113:3:1","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2105:11:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2096:21:1","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2084:33:1","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":240,"nodeType":"ExpressionStatement","src":"2084:33:1"},{"expression":{"id":243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":241,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":187,"src":"2131:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":242,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2141:1:1","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2131:11:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":244,"nodeType":"ExpressionStatement","src":"2131:11:1"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":225,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":218,"src":"2058:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":226,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2062:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2058:5:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":246,"initializationExpression":{"assignments":[218],"declarations":[{"constant":false,"id":218,"mutability":"mutable","name":"i","nameLocation":"2038:1:1","nodeType":"VariableDeclaration","scope":246,"src":"2030:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":217,"name":"uint256","nodeType":"ElementaryTypeName","src":"2030:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":224,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2042:1:1","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":220,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"2046:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2042:10:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2055:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2042:14:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2030:26:1"},"loopExpression":{"expression":{"id":229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2065:3:1","subExpression":{"id":228,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":218,"src":"2067:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":230,"nodeType":"ExpressionStatement","src":"2065:3:1"},"nodeType":"ForStatement","src":"2025:128:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":248,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":187,"src":"2170:5:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2179:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2170:10:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2182:34:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":247,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2162:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":252,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2162:55:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":253,"nodeType":"ExpressionStatement","src":"2162:55:1"},{"expression":{"arguments":[{"id":256,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":195,"src":"2241:6:1","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":255,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2234:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":254,"name":"string","nodeType":"ElementaryTypeName","src":"2234:6:1","typeDescriptions":{}}},"id":257,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2234:14:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":193,"id":258,"nodeType":"Return","src":"2227:21:1"}]},"documentation":{"id":185,"nodeType":"StructuredDocumentation","src":"1701:112:1","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":260,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1827:11:1","nodeType":"FunctionDefinition","parameters":{"id":190,"nodeType":"ParameterList","parameters":[{"constant":false,"id":187,"mutability":"mutable","name":"value","nameLocation":"1847:5:1","nodeType":"VariableDeclaration","scope":260,"src":"1839:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":186,"name":"uint256","nodeType":"ElementaryTypeName","src":"1839:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":189,"mutability":"mutable","name":"length","nameLocation":"1862:6:1","nodeType":"VariableDeclaration","scope":260,"src":"1854:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":188,"name":"uint256","nodeType":"ElementaryTypeName","src":"1854:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1838:31:1"},"returnParameters":{"id":193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":192,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":260,"src":"1893:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":191,"name":"string","nodeType":"ElementaryTypeName","src":"1893:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1892:15:1"},"scope":306,"src":"1818:437:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":279,"nodeType":"Block","src":"2480:76:1","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":273,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":263,"src":"2525:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":272,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2517:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":271,"name":"uint160","nodeType":"ElementaryTypeName","src":"2517:7:1","typeDescriptions":{}}},"id":274,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2517:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":270,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2509:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":269,"name":"uint256","nodeType":"ElementaryTypeName","src":"2509:7:1","typeDescriptions":{}}},"id":275,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2509:22:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":276,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":88,"src":"2533:15:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":268,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[184,260,280],"referencedDeclaration":260,"src":"2497:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2497:52:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":267,"id":278,"nodeType":"Return","src":"2490:59:1"}]},"documentation":{"id":261,"nodeType":"StructuredDocumentation","src":"2261:141:1","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":280,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2416:11:1","nodeType":"FunctionDefinition","parameters":{"id":264,"nodeType":"ParameterList","parameters":[{"constant":false,"id":263,"mutability":"mutable","name":"addr","nameLocation":"2436:4:1","nodeType":"VariableDeclaration","scope":280,"src":"2428:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":262,"name":"address","nodeType":"ElementaryTypeName","src":"2428:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2427:14:1"},"returnParameters":{"id":267,"nodeType":"ParameterList","parameters":[{"constant":false,"id":266,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":280,"src":"2465:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":265,"name":"string","nodeType":"ElementaryTypeName","src":"2465:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2464:15:1"},"scope":306,"src":"2407:149:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":304,"nodeType":"Block","src":"2711:66:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":293,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":283,"src":"2744:1:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":292,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2738:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":291,"name":"bytes","nodeType":"ElementaryTypeName","src":"2738:5:1","typeDescriptions":{}}},"id":294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2738:8:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":290,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2728:9:1","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":295,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2728:19:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":299,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":285,"src":"2767:1:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":298,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2761:5:1","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":297,"name":"bytes","nodeType":"ElementaryTypeName","src":"2761:5:1","typeDescriptions":{}}},"id":300,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2761:8:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":296,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2751:9:1","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":301,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2751:19:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2728:42:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":289,"id":303,"nodeType":"Return","src":"2721:49:1"}]},"documentation":{"id":281,"nodeType":"StructuredDocumentation","src":"2562:66:1","text":" @dev Returns true if the two strings are equal."},"id":305,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2642:5:1","nodeType":"FunctionDefinition","parameters":{"id":286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":283,"mutability":"mutable","name":"a","nameLocation":"2662:1:1","nodeType":"VariableDeclaration","scope":305,"src":"2648:15:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":282,"name":"string","nodeType":"ElementaryTypeName","src":"2648:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":285,"mutability":"mutable","name":"b","nameLocation":"2679:1:1","nodeType":"VariableDeclaration","scope":305,"src":"2665:15:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":284,"name":"string","nodeType":"ElementaryTypeName","src":"2665:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2647:34:1"},"returnParameters":{"id":289,"nodeType":"ParameterList","parameters":[{"constant":false,"id":288,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":305,"src":"2705:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":287,"name":"bool","nodeType":"ElementaryTypeName","src":"2705:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2704:6:1"},"scope":306,"src":"2633:144:1","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":307,"src":"220:2559:1","usedErrors":[]}],"src":"101:2679:1"},"id":1},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[1172]},"id":1173,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":308,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:2"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":309,"nodeType":"StructuredDocumentation","src":"128:73:2","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":1172,"linearizedBaseContracts":[1172],"name":"Math","nameLocation":"210:4:2","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":313,"members":[{"id":310,"name":"Down","nameLocation":"245:4:2","nodeType":"EnumValue","src":"245:4:2"},{"id":311,"name":"Up","nameLocation":"287:2:2","nodeType":"EnumValue","src":"287:2:2"},{"id":312,"name":"Zero","nameLocation":"318:4:2","nodeType":"EnumValue","src":"318:4:2"}],"name":"Rounding","nameLocation":"226:8:2","nodeType":"EnumDefinition","src":"221:122:2"},{"body":{"id":330,"nodeType":"Block","src":"480:37:2","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":323,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":316,"src":"497:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":324,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":318,"src":"501:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"497:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":327,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":318,"src":"509:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"497:13:2","trueExpression":{"id":326,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":316,"src":"505:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":322,"id":329,"nodeType":"Return","src":"490:20:2"}]},"documentation":{"id":314,"nodeType":"StructuredDocumentation","src":"349:59:2","text":" @dev Returns the largest of two numbers."},"id":331,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"422:3:2","nodeType":"FunctionDefinition","parameters":{"id":319,"nodeType":"ParameterList","parameters":[{"constant":false,"id":316,"mutability":"mutable","name":"a","nameLocation":"434:1:2","nodeType":"VariableDeclaration","scope":331,"src":"426:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":315,"name":"uint256","nodeType":"ElementaryTypeName","src":"426:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":318,"mutability":"mutable","name":"b","nameLocation":"445:1:2","nodeType":"VariableDeclaration","scope":331,"src":"437:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":317,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:22:2"},"returnParameters":{"id":322,"nodeType":"ParameterList","parameters":[{"constant":false,"id":321,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":331,"src":"471:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":320,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"470:9:2"},"scope":1172,"src":"413:104:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":348,"nodeType":"Block","src":"655:37:2","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":341,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":334,"src":"672:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":342,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":336,"src":"676:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"672:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":345,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":336,"src":"684:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"672:13:2","trueExpression":{"id":344,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":334,"src":"680:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":340,"id":347,"nodeType":"Return","src":"665:20:2"}]},"documentation":{"id":332,"nodeType":"StructuredDocumentation","src":"523:60:2","text":" @dev Returns the smallest of two numbers."},"id":349,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"597:3:2","nodeType":"FunctionDefinition","parameters":{"id":337,"nodeType":"ParameterList","parameters":[{"constant":false,"id":334,"mutability":"mutable","name":"a","nameLocation":"609:1:2","nodeType":"VariableDeclaration","scope":349,"src":"601:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":333,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":336,"mutability":"mutable","name":"b","nameLocation":"620:1:2","nodeType":"VariableDeclaration","scope":349,"src":"612:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":335,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:2"},"returnParameters":{"id":340,"nodeType":"ParameterList","parameters":[{"constant":false,"id":339,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":349,"src":"646:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":338,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:9:2"},"scope":1172,"src":"588:104:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":371,"nodeType":"Block","src":"876:82:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":359,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":352,"src":"931:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":360,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":354,"src":"935:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"931:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":362,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"930:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":363,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":352,"src":"941:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":364,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":354,"src":"945:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":366,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"940:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"950:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"940:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"930:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":358,"id":370,"nodeType":"Return","src":"923:28:2"}]},"documentation":{"id":350,"nodeType":"StructuredDocumentation","src":"698:102:2","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":372,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"814:7:2","nodeType":"FunctionDefinition","parameters":{"id":355,"nodeType":"ParameterList","parameters":[{"constant":false,"id":352,"mutability":"mutable","name":"a","nameLocation":"830:1:2","nodeType":"VariableDeclaration","scope":372,"src":"822:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":351,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":354,"mutability":"mutable","name":"b","nameLocation":"841:1:2","nodeType":"VariableDeclaration","scope":372,"src":"833:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":353,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:22:2"},"returnParameters":{"id":358,"nodeType":"ParameterList","parameters":[{"constant":false,"id":357,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":372,"src":"867:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":356,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"866:9:2"},"scope":1172,"src":"805:153:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":396,"nodeType":"Block","src":"1228:123:2","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":382,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":375,"src":"1316:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":383,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1321:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1316:6:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":386,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":375,"src":"1330:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":387,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1334:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1330:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":389,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1329:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":390,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":377,"src":"1339:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1329:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":392,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1343:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1329:15:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1316:28:2","trueExpression":{"hexValue":"30","id":385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1325:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":381,"id":395,"nodeType":"Return","src":"1309:35:2"}]},"documentation":{"id":373,"nodeType":"StructuredDocumentation","src":"964:188:2","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":397,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1166:7:2","nodeType":"FunctionDefinition","parameters":{"id":378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":375,"mutability":"mutable","name":"a","nameLocation":"1182:1:2","nodeType":"VariableDeclaration","scope":397,"src":"1174:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":374,"name":"uint256","nodeType":"ElementaryTypeName","src":"1174:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":377,"mutability":"mutable","name":"b","nameLocation":"1193:1:2","nodeType":"VariableDeclaration","scope":397,"src":"1185:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":376,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1173:22:2"},"returnParameters":{"id":381,"nodeType":"ParameterList","parameters":[{"constant":false,"id":380,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":397,"src":"1219:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":379,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1218:9:2"},"scope":1172,"src":"1157:194:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":519,"nodeType":"Block","src":"1765:4115:2","statements":[{"id":518,"nodeType":"UncheckedBlock","src":"1775:4099:2","statements":[{"assignments":[410],"declarations":[{"constant":false,"id":410,"mutability":"mutable","name":"prod0","nameLocation":"2104:5:2","nodeType":"VariableDeclaration","scope":518,"src":"2096:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":409,"name":"uint256","nodeType":"ElementaryTypeName","src":"2096:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":411,"nodeType":"VariableDeclarationStatement","src":"2096:13:2"},{"assignments":[413],"declarations":[{"constant":false,"id":413,"mutability":"mutable","name":"prod1","nameLocation":"2176:5:2","nodeType":"VariableDeclaration","scope":518,"src":"2168:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":412,"name":"uint256","nodeType":"ElementaryTypeName","src":"2168:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":414,"nodeType":"VariableDeclarationStatement","src":"2168:13:2"},{"AST":{"nodeType":"YulBlock","src":"2248:157:2","statements":[{"nodeType":"YulVariableDeclaration","src":"2266:30:2","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2283:1:2"},{"name":"y","nodeType":"YulIdentifier","src":"2286:1:2"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2293:1:2","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2289:3:2"},"nodeType":"YulFunctionCall","src":"2289:6:2"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2276:6:2"},"nodeType":"YulFunctionCall","src":"2276:20:2"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2270:2:2","type":""}]},{"nodeType":"YulAssignment","src":"2313:18:2","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2326:1:2"},{"name":"y","nodeType":"YulIdentifier","src":"2329:1:2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2322:3:2"},"nodeType":"YulFunctionCall","src":"2322:9:2"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2313:5:2"}]},{"nodeType":"YulAssignment","src":"2348:43:2","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2365:2:2"},{"name":"prod0","nodeType":"YulIdentifier","src":"2369:5:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2361:3:2"},"nodeType":"YulFunctionCall","src":"2361:14:2"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2380:2:2"},{"name":"prod0","nodeType":"YulIdentifier","src":"2384:5:2"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2377:2:2"},"nodeType":"YulFunctionCall","src":"2377:13:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2357:3:2"},"nodeType":"YulFunctionCall","src":"2357:34:2"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2348:5:2"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":410,"isOffset":false,"isSlot":false,"src":"2313:5:2","valueSize":1},{"declaration":410,"isOffset":false,"isSlot":false,"src":"2369:5:2","valueSize":1},{"declaration":410,"isOffset":false,"isSlot":false,"src":"2384:5:2","valueSize":1},{"declaration":413,"isOffset":false,"isSlot":false,"src":"2348:5:2","valueSize":1},{"declaration":400,"isOffset":false,"isSlot":false,"src":"2283:1:2","valueSize":1},{"declaration":400,"isOffset":false,"isSlot":false,"src":"2326:1:2","valueSize":1},{"declaration":402,"isOffset":false,"isSlot":false,"src":"2286:1:2","valueSize":1},{"declaration":402,"isOffset":false,"isSlot":false,"src":"2329:1:2","valueSize":1}],"id":415,"nodeType":"InlineAssembly","src":"2239:166:2"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":416,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":413,"src":"2486:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":417,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2495:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2486:10:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":424,"nodeType":"IfStatement","src":"2482:368:2","trueBody":{"id":423,"nodeType":"Block","src":"2498:352:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":419,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":410,"src":"2816:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":420,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":404,"src":"2824:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2816:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":408,"id":422,"nodeType":"Return","src":"2809:26:2"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":426,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":404,"src":"2960:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":427,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":413,"src":"2974:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2960:19:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d6174683a206d756c446976206f766572666c6f77","id":429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2981:23:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""},"value":"Math: mulDiv overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""}],"id":425,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2952:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2952:53:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":431,"nodeType":"ExpressionStatement","src":"2952:53:2"},{"assignments":[433],"declarations":[{"constant":false,"id":433,"mutability":"mutable","name":"remainder","nameLocation":"3269:9:2","nodeType":"VariableDeclaration","scope":518,"src":"3261:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":432,"name":"uint256","nodeType":"ElementaryTypeName","src":"3261:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":434,"nodeType":"VariableDeclarationStatement","src":"3261:17:2"},{"AST":{"nodeType":"YulBlock","src":"3301:291:2","statements":[{"nodeType":"YulAssignment","src":"3370:38:2","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3390:1:2"},{"name":"y","nodeType":"YulIdentifier","src":"3393:1:2"},{"name":"denominator","nodeType":"YulIdentifier","src":"3396:11:2"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3383:6:2"},"nodeType":"YulFunctionCall","src":"3383:25:2"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3370:9:2"}]},{"nodeType":"YulAssignment","src":"3490:41:2","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3503:5:2"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3513:9:2"},{"name":"prod0","nodeType":"YulIdentifier","src":"3524:5:2"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3510:2:2"},"nodeType":"YulFunctionCall","src":"3510:20:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3499:3:2"},"nodeType":"YulFunctionCall","src":"3499:32:2"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3490:5:2"}]},{"nodeType":"YulAssignment","src":"3548:30:2","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3561:5:2"},{"name":"remainder","nodeType":"YulIdentifier","src":"3568:9:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3557:3:2"},"nodeType":"YulFunctionCall","src":"3557:21:2"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3548:5:2"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":404,"isOffset":false,"isSlot":false,"src":"3396:11:2","valueSize":1},{"declaration":410,"isOffset":false,"isSlot":false,"src":"3524:5:2","valueSize":1},{"declaration":410,"isOffset":false,"isSlot":false,"src":"3548:5:2","valueSize":1},{"declaration":410,"isOffset":false,"isSlot":false,"src":"3561:5:2","valueSize":1},{"declaration":413,"isOffset":false,"isSlot":false,"src":"3490:5:2","valueSize":1},{"declaration":413,"isOffset":false,"isSlot":false,"src":"3503:5:2","valueSize":1},{"declaration":433,"isOffset":false,"isSlot":false,"src":"3370:9:2","valueSize":1},{"declaration":433,"isOffset":false,"isSlot":false,"src":"3513:9:2","valueSize":1},{"declaration":433,"isOffset":false,"isSlot":false,"src":"3568:9:2","valueSize":1},{"declaration":400,"isOffset":false,"isSlot":false,"src":"3390:1:2","valueSize":1},{"declaration":402,"isOffset":false,"isSlot":false,"src":"3393:1:2","valueSize":1}],"id":435,"nodeType":"InlineAssembly","src":"3292:300:2"},{"assignments":[437],"declarations":[{"constant":false,"id":437,"mutability":"mutable","name":"twos","nameLocation":"3907:4:2","nodeType":"VariableDeclaration","scope":518,"src":"3899:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":436,"name":"uint256","nodeType":"ElementaryTypeName","src":"3899:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":445,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":438,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":404,"src":"3914:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3929:12:2","subExpression":{"id":439,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":404,"src":"3930:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":441,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3944:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3929:16:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":443,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3928:18:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3914:32:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3899:47:2"},{"AST":{"nodeType":"YulBlock","src":"3969:362:2","statements":[{"nodeType":"YulAssignment","src":"4034:37:2","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"4053:11:2"},{"name":"twos","nodeType":"YulIdentifier","src":"4066:4:2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4049:3:2"},"nodeType":"YulFunctionCall","src":"4049:22:2"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"4034:11:2"}]},{"nodeType":"YulAssignment","src":"4138:25:2","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"4151:5:2"},{"name":"twos","nodeType":"YulIdentifier","src":"4158:4:2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4147:3:2"},"nodeType":"YulFunctionCall","src":"4147:16:2"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"4138:5:2"}]},{"nodeType":"YulAssignment","src":"4278:39:2","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4298:1:2","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4301:4:2"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4294:3:2"},"nodeType":"YulFunctionCall","src":"4294:12:2"},{"name":"twos","nodeType":"YulIdentifier","src":"4308:4:2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4290:3:2"},"nodeType":"YulFunctionCall","src":"4290:23:2"},{"kind":"number","nodeType":"YulLiteral","src":"4315:1:2","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4286:3:2"},"nodeType":"YulFunctionCall","src":"4286:31:2"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"4278:4:2"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":404,"isOffset":false,"isSlot":false,"src":"4034:11:2","valueSize":1},{"declaration":404,"isOffset":false,"isSlot":false,"src":"4053:11:2","valueSize":1},{"declaration":410,"isOffset":false,"isSlot":false,"src":"4138:5:2","valueSize":1},{"declaration":410,"isOffset":false,"isSlot":false,"src":"4151:5:2","valueSize":1},{"declaration":437,"isOffset":false,"isSlot":false,"src":"4066:4:2","valueSize":1},{"declaration":437,"isOffset":false,"isSlot":false,"src":"4158:4:2","valueSize":1},{"declaration":437,"isOffset":false,"isSlot":false,"src":"4278:4:2","valueSize":1},{"declaration":437,"isOffset":false,"isSlot":false,"src":"4301:4:2","valueSize":1},{"declaration":437,"isOffset":false,"isSlot":false,"src":"4308:4:2","valueSize":1}],"id":446,"nodeType":"InlineAssembly","src":"3960:371:2"},{"expression":{"id":451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":447,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":410,"src":"4397:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":448,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":413,"src":"4406:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":449,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":437,"src":"4414:4:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4406:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4397:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":452,"nodeType":"ExpressionStatement","src":"4397:21:2"},{"assignments":[454],"declarations":[{"constant":false,"id":454,"mutability":"mutable","name":"inverse","nameLocation":"4744:7:2","nodeType":"VariableDeclaration","scope":518,"src":"4736:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":453,"name":"uint256","nodeType":"ElementaryTypeName","src":"4736:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":461,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":455,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4755:1:2","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":456,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":404,"src":"4759:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4755:15:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":458,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4754:17:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":459,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4774:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4754:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4736:39:2"},{"expression":{"id":468,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":462,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":454,"src":"4992:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":463,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5003:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":464,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":404,"src":"5007:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":465,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":454,"src":"5021:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5007:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5003:25:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4992:36:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":469,"nodeType":"ExpressionStatement","src":"4992:36:2"},{"expression":{"id":476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":470,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":454,"src":"5061:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":471,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5072:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":472,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":404,"src":"5076:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":473,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":454,"src":"5090:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5076:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5072:25:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5061:36:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":477,"nodeType":"ExpressionStatement","src":"5061:36:2"},{"expression":{"id":484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":478,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":454,"src":"5131:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":479,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5142:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":480,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":404,"src":"5146:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":481,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":454,"src":"5160:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5146:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5142:25:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5131:36:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":485,"nodeType":"ExpressionStatement","src":"5131:36:2"},{"expression":{"id":492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":486,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":454,"src":"5201:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":487,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5212:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":488,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":404,"src":"5216:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":489,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":454,"src":"5230:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5216:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5212:25:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5201:36:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":493,"nodeType":"ExpressionStatement","src":"5201:36:2"},{"expression":{"id":500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":494,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":454,"src":"5271:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":495,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5282:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":496,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":404,"src":"5286:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":497,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":454,"src":"5300:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5286:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5282:25:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5271:36:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":501,"nodeType":"ExpressionStatement","src":"5271:36:2"},{"expression":{"id":508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":502,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":454,"src":"5342:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":503,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5353:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":504,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":404,"src":"5357:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":505,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":454,"src":"5371:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5357:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5353:25:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5342:36:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":509,"nodeType":"ExpressionStatement","src":"5342:36:2"},{"expression":{"id":514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":510,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":407,"src":"5812:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":511,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":410,"src":"5821:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":512,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":454,"src":"5829:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5821:15:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5812:24:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":515,"nodeType":"ExpressionStatement","src":"5812:24:2"},{"expression":{"id":516,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":407,"src":"5857:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":408,"id":517,"nodeType":"Return","src":"5850:13:2"}]}]},"documentation":{"id":398,"nodeType":"StructuredDocumentation","src":"1357:305:2","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":520,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1676:6:2","nodeType":"FunctionDefinition","parameters":{"id":405,"nodeType":"ParameterList","parameters":[{"constant":false,"id":400,"mutability":"mutable","name":"x","nameLocation":"1691:1:2","nodeType":"VariableDeclaration","scope":520,"src":"1683:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":399,"name":"uint256","nodeType":"ElementaryTypeName","src":"1683:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":402,"mutability":"mutable","name":"y","nameLocation":"1702:1:2","nodeType":"VariableDeclaration","scope":520,"src":"1694:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":401,"name":"uint256","nodeType":"ElementaryTypeName","src":"1694:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":404,"mutability":"mutable","name":"denominator","nameLocation":"1713:11:2","nodeType":"VariableDeclaration","scope":520,"src":"1705:19:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":403,"name":"uint256","nodeType":"ElementaryTypeName","src":"1705:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1682:43:2"},"returnParameters":{"id":408,"nodeType":"ParameterList","parameters":[{"constant":false,"id":407,"mutability":"mutable","name":"result","nameLocation":"1757:6:2","nodeType":"VariableDeclaration","scope":520,"src":"1749:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":406,"name":"uint256","nodeType":"ElementaryTypeName","src":"1749:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1748:16:2"},"scope":1172,"src":"1667:4213:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":563,"nodeType":"Block","src":"6122:189:2","statements":[{"assignments":[536],"declarations":[{"constant":false,"id":536,"mutability":"mutable","name":"result","nameLocation":"6140:6:2","nodeType":"VariableDeclaration","scope":563,"src":"6132:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":535,"name":"uint256","nodeType":"ElementaryTypeName","src":"6132:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":542,"initialValue":{"arguments":[{"id":538,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":523,"src":"6156:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":539,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":525,"src":"6159:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":540,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":527,"src":"6162:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":537,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[520,564],"referencedDeclaration":520,"src":"6149:6:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":541,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6149:25:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6132:42:2"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$313","typeString":"enum Math.Rounding"},"id":546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":543,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":530,"src":"6188:8:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$313","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":544,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":313,"src":"6200:8:2","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$313_$","typeString":"type(enum Math.Rounding)"}},"id":545,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6209:2:2","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":311,"src":"6200:11:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$313","typeString":"enum Math.Rounding"}},"src":"6188:23:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":548,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":523,"src":"6222:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":549,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":525,"src":"6225:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":550,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":527,"src":"6228:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":547,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"6215:6:2","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":551,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6215:25:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":552,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6243:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6215:29:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6188:56:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":560,"nodeType":"IfStatement","src":"6184:98:2","trueBody":{"id":559,"nodeType":"Block","src":"6246:36:2","statements":[{"expression":{"id":557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":555,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":536,"src":"6260:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":556,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6270:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6260:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":558,"nodeType":"ExpressionStatement","src":"6260:11:2"}]}},{"expression":{"id":561,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":536,"src":"6298:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":534,"id":562,"nodeType":"Return","src":"6291:13:2"}]},"documentation":{"id":521,"nodeType":"StructuredDocumentation","src":"5886:121:2","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":564,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"6021:6:2","nodeType":"FunctionDefinition","parameters":{"id":531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":523,"mutability":"mutable","name":"x","nameLocation":"6036:1:2","nodeType":"VariableDeclaration","scope":564,"src":"6028:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":522,"name":"uint256","nodeType":"ElementaryTypeName","src":"6028:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":525,"mutability":"mutable","name":"y","nameLocation":"6047:1:2","nodeType":"VariableDeclaration","scope":564,"src":"6039:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":524,"name":"uint256","nodeType":"ElementaryTypeName","src":"6039:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":527,"mutability":"mutable","name":"denominator","nameLocation":"6058:11:2","nodeType":"VariableDeclaration","scope":564,"src":"6050:19:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":526,"name":"uint256","nodeType":"ElementaryTypeName","src":"6050:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":530,"mutability":"mutable","name":"rounding","nameLocation":"6080:8:2","nodeType":"VariableDeclaration","scope":564,"src":"6071:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$313","typeString":"enum Math.Rounding"},"typeName":{"id":529,"nodeType":"UserDefinedTypeName","pathNode":{"id":528,"name":"Rounding","nameLocations":["6071:8:2"],"nodeType":"IdentifierPath","referencedDeclaration":313,"src":"6071:8:2"},"referencedDeclaration":313,"src":"6071:8:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$313","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"6027:62:2"},"returnParameters":{"id":534,"nodeType":"ParameterList","parameters":[{"constant":false,"id":533,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":564,"src":"6113:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":532,"name":"uint256","nodeType":"ElementaryTypeName","src":"6113:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6112:9:2"},"scope":1172,"src":"6012:299:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":675,"nodeType":"Block","src":"6587:1585:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":572,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":567,"src":"6601:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6606:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6601:6:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":578,"nodeType":"IfStatement","src":"6597:45:2","trueBody":{"id":577,"nodeType":"Block","src":"6609:33:2","statements":[{"expression":{"hexValue":"30","id":575,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6630:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":571,"id":576,"nodeType":"Return","src":"6623:8:2"}]}},{"assignments":[580],"declarations":[{"constant":false,"id":580,"mutability":"mutable","name":"result","nameLocation":"7329:6:2","nodeType":"VariableDeclaration","scope":675,"src":"7321:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":579,"name":"uint256","nodeType":"ElementaryTypeName","src":"7321:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":589,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":581,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7338:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":583,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":567,"src":"7349:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":582,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[844,880],"referencedDeclaration":844,"src":"7344:4:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":584,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7344:7:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":585,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7355:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7344:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":587,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7343:14:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7338:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7321:36:2"},{"id":674,"nodeType":"UncheckedBlock","src":"7758:408:2","statements":[{"expression":{"id":599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":590,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"7782:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":591,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"7792:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":592,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":567,"src":"7801:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":593,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"7805:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7801:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7792:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":596,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7791:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":597,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7816:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7791:26:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7782:35:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":600,"nodeType":"ExpressionStatement","src":"7782:35:2"},{"expression":{"id":610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":601,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"7831:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":602,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"7841:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":603,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":567,"src":"7850:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":604,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"7854:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7850:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7841:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":607,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7840:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":608,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7865:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7840:26:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7831:35:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":611,"nodeType":"ExpressionStatement","src":"7831:35:2"},{"expression":{"id":621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":612,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"7880:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":613,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"7890:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":614,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":567,"src":"7899:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":615,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"7903:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7899:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7890:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":618,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7889:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":619,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7914:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7889:26:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7880:35:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":622,"nodeType":"ExpressionStatement","src":"7880:35:2"},{"expression":{"id":632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":623,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"7929:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":624,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"7939:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":625,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":567,"src":"7948:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":626,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"7952:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7948:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7939:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":629,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7938:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":630,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7963:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7938:26:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7929:35:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":633,"nodeType":"ExpressionStatement","src":"7929:35:2"},{"expression":{"id":643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":634,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"7978:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":635,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"7988:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":636,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":567,"src":"7997:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":637,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"8001:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7997:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7988:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":640,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7987:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":641,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8012:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7987:26:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7978:35:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":644,"nodeType":"ExpressionStatement","src":"7978:35:2"},{"expression":{"id":654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":645,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"8027:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":646,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"8037:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":647,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":567,"src":"8046:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":648,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"8050:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8046:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8037:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":651,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8036:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":652,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8061:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8036:26:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8027:35:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":655,"nodeType":"ExpressionStatement","src":"8027:35:2"},{"expression":{"id":665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":656,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"8076:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":657,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"8086:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":658,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":567,"src":"8095:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":659,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"8099:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8095:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8086:19:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":662,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8085:21:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":663,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8110:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8085:26:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8076:35:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":666,"nodeType":"ExpressionStatement","src":"8076:35:2"},{"expression":{"arguments":[{"id":668,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"8136:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":669,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":567,"src":"8144:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":670,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"8148:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8144:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":667,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":349,"src":"8132:3:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":672,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8132:23:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":571,"id":673,"nodeType":"Return","src":"8125:30:2"}]}]},"documentation":{"id":565,"nodeType":"StructuredDocumentation","src":"6317:208:2","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":676,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6539:4:2","nodeType":"FunctionDefinition","parameters":{"id":568,"nodeType":"ParameterList","parameters":[{"constant":false,"id":567,"mutability":"mutable","name":"a","nameLocation":"6552:1:2","nodeType":"VariableDeclaration","scope":676,"src":"6544:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":566,"name":"uint256","nodeType":"ElementaryTypeName","src":"6544:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6543:11:2"},"returnParameters":{"id":571,"nodeType":"ParameterList","parameters":[{"constant":false,"id":570,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":676,"src":"6578:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":569,"name":"uint256","nodeType":"ElementaryTypeName","src":"6578:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6577:9:2"},"scope":1172,"src":"6530:1642:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":711,"nodeType":"Block","src":"8348:161:2","statements":[{"id":710,"nodeType":"UncheckedBlock","src":"8358:145:2","statements":[{"assignments":[688],"declarations":[{"constant":false,"id":688,"mutability":"mutable","name":"result","nameLocation":"8390:6:2","nodeType":"VariableDeclaration","scope":710,"src":"8382:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":687,"name":"uint256","nodeType":"ElementaryTypeName","src":"8382:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":692,"initialValue":{"arguments":[{"id":690,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":679,"src":"8404:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":689,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[676,712],"referencedDeclaration":676,"src":"8399:4:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":691,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8399:7:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8382:24:2"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":693,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"8427:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$313","typeString":"enum Math.Rounding"},"id":697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":694,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"8437:8:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$313","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":695,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":313,"src":"8449:8:2","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$313_$","typeString":"type(enum Math.Rounding)"}},"id":696,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8458:2:2","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":311,"src":"8449:11:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$313","typeString":"enum Math.Rounding"}},"src":"8437:23:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":698,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"8464:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":699,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"8473:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8464:15:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":701,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":679,"src":"8482:1:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8464:19:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8437:46:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":705,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8490:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8437:54:2","trueExpression":{"hexValue":"31","id":704,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8486:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":707,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8436:56:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8427:65:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":686,"id":709,"nodeType":"Return","src":"8420:72:2"}]}]},"documentation":{"id":677,"nodeType":"StructuredDocumentation","src":"8178:89:2","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":712,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8281:4:2","nodeType":"FunctionDefinition","parameters":{"id":683,"nodeType":"ParameterList","parameters":[{"constant":false,"id":679,"mutability":"mutable","name":"a","nameLocation":"8294:1:2","nodeType":"VariableDeclaration","scope":712,"src":"8286:9:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":678,"name":"uint256","nodeType":"ElementaryTypeName","src":"8286:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":682,"mutability":"mutable","name":"rounding","nameLocation":"8306:8:2","nodeType":"VariableDeclaration","scope":712,"src":"8297:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$313","typeString":"enum Math.Rounding"},"typeName":{"id":681,"nodeType":"UserDefinedTypeName","pathNode":{"id":680,"name":"Rounding","nameLocations":["8297:8:2"],"nodeType":"IdentifierPath","referencedDeclaration":313,"src":"8297:8:2"},"referencedDeclaration":313,"src":"8297:8:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$313","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8285:30:2"},"returnParameters":{"id":686,"nodeType":"ParameterList","parameters":[{"constant":false,"id":685,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":712,"src":"8339:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":684,"name":"uint256","nodeType":"ElementaryTypeName","src":"8339:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8338:9:2"},"scope":1172,"src":"8272:237:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":843,"nodeType":"Block","src":"8694:922:2","statements":[{"assignments":[721],"declarations":[{"constant":false,"id":721,"mutability":"mutable","name":"result","nameLocation":"8712:6:2","nodeType":"VariableDeclaration","scope":843,"src":"8704:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":720,"name":"uint256","nodeType":"ElementaryTypeName","src":"8704:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":723,"initialValue":{"hexValue":"30","id":722,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8721:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8704:18:2"},{"id":840,"nodeType":"UncheckedBlock","src":"8732:855:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":724,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":715,"src":"8760:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8769:3:2","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8760:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":727,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8775:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8760:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":738,"nodeType":"IfStatement","src":"8756:99:2","trueBody":{"id":737,"nodeType":"Block","src":"8778:77:2","statements":[{"expression":{"id":731,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":729,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":715,"src":"8796:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":730,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8806:3:2","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8796:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":732,"nodeType":"ExpressionStatement","src":"8796:13:2"},{"expression":{"id":735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":733,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":721,"src":"8827:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":734,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8837:3:2","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8827:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":736,"nodeType":"ExpressionStatement","src":"8827:13:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":739,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":715,"src":"8872:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":740,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8881:2:2","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8872:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":742,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8886:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8872:15:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":753,"nodeType":"IfStatement","src":"8868:96:2","trueBody":{"id":752,"nodeType":"Block","src":"8889:75:2","statements":[{"expression":{"id":746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":744,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":715,"src":"8907:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":745,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8917:2:2","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8907:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":747,"nodeType":"ExpressionStatement","src":"8907:12:2"},{"expression":{"id":750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":748,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":721,"src":"8937:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8947:2:2","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8937:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":751,"nodeType":"ExpressionStatement","src":"8937:12:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":754,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":715,"src":"8981:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":755,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8990:2:2","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8981:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":757,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8995:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8981:15:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":768,"nodeType":"IfStatement","src":"8977:96:2","trueBody":{"id":767,"nodeType":"Block","src":"8998:75:2","statements":[{"expression":{"id":761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":759,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":715,"src":"9016:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":760,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9026:2:2","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9016:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":762,"nodeType":"ExpressionStatement","src":"9016:12:2"},{"expression":{"id":765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":763,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":721,"src":"9046:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":764,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9056:2:2","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9046:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":766,"nodeType":"ExpressionStatement","src":"9046:12:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":769,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":715,"src":"9090:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":770,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9099:2:2","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9090:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":772,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9104:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9090:15:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":783,"nodeType":"IfStatement","src":"9086:96:2","trueBody":{"id":782,"nodeType":"Block","src":"9107:75:2","statements":[{"expression":{"id":776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":774,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":715,"src":"9125:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":775,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9135:2:2","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9125:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":777,"nodeType":"ExpressionStatement","src":"9125:12:2"},{"expression":{"id":780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":778,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":721,"src":"9155:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":779,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9165:2:2","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9155:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":781,"nodeType":"ExpressionStatement","src":"9155:12:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":784,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":715,"src":"9199:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":785,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9208:1:2","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9199:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":787,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9212:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9199:14:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":798,"nodeType":"IfStatement","src":"9195:93:2","trueBody":{"id":797,"nodeType":"Block","src":"9215:73:2","statements":[{"expression":{"id":791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":789,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":715,"src":"9233:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":790,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9243:1:2","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9233:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":792,"nodeType":"ExpressionStatement","src":"9233:11:2"},{"expression":{"id":795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":793,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":721,"src":"9262:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":794,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9272:1:2","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9262:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":796,"nodeType":"ExpressionStatement","src":"9262:11:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":799,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":715,"src":"9305:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9314:1:2","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9305:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":802,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9318:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9305:14:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":813,"nodeType":"IfStatement","src":"9301:93:2","trueBody":{"id":812,"nodeType":"Block","src":"9321:73:2","statements":[{"expression":{"id":806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":804,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":715,"src":"9339:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9349:1:2","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9339:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":807,"nodeType":"ExpressionStatement","src":"9339:11:2"},{"expression":{"id":810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":808,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":721,"src":"9368:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":809,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9378:1:2","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9368:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":811,"nodeType":"ExpressionStatement","src":"9368:11:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":818,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":814,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":715,"src":"9411:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":815,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9420:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9411:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":817,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9424:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9411:14:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":828,"nodeType":"IfStatement","src":"9407:93:2","trueBody":{"id":827,"nodeType":"Block","src":"9427:73:2","statements":[{"expression":{"id":821,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":819,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":715,"src":"9445:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":820,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9455:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9445:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":822,"nodeType":"ExpressionStatement","src":"9445:11:2"},{"expression":{"id":825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":823,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":721,"src":"9474:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":824,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9484:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9474:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":826,"nodeType":"ExpressionStatement","src":"9474:11:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":833,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":829,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":715,"src":"9517:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":830,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9526:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9517:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":832,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9530:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9517:14:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":839,"nodeType":"IfStatement","src":"9513:64:2","trueBody":{"id":838,"nodeType":"Block","src":"9533:44:2","statements":[{"expression":{"id":836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":834,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":721,"src":"9551:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":835,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9561:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9551:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":837,"nodeType":"ExpressionStatement","src":"9551:11:2"}]}}]},{"expression":{"id":841,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":721,"src":"9603:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":719,"id":842,"nodeType":"Return","src":"9596:13:2"}]},"documentation":{"id":713,"nodeType":"StructuredDocumentation","src":"8515:113:2","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":844,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8642:4:2","nodeType":"FunctionDefinition","parameters":{"id":716,"nodeType":"ParameterList","parameters":[{"constant":false,"id":715,"mutability":"mutable","name":"value","nameLocation":"8655:5:2","nodeType":"VariableDeclaration","scope":844,"src":"8647:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":714,"name":"uint256","nodeType":"ElementaryTypeName","src":"8647:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8646:15:2"},"returnParameters":{"id":719,"nodeType":"ParameterList","parameters":[{"constant":false,"id":718,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":844,"src":"8685:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":717,"name":"uint256","nodeType":"ElementaryTypeName","src":"8685:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8684:9:2"},"scope":1172,"src":"8633:983:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":879,"nodeType":"Block","src":"9849:165:2","statements":[{"id":878,"nodeType":"UncheckedBlock","src":"9859:149:2","statements":[{"assignments":[856],"declarations":[{"constant":false,"id":856,"mutability":"mutable","name":"result","nameLocation":"9891:6:2","nodeType":"VariableDeclaration","scope":878,"src":"9883:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":855,"name":"uint256","nodeType":"ElementaryTypeName","src":"9883:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":860,"initialValue":{"arguments":[{"id":858,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":847,"src":"9905:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":857,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[844,880],"referencedDeclaration":844,"src":"9900:4:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":859,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9900:11:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9883:28:2"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":861,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":856,"src":"9932:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$313","typeString":"enum Math.Rounding"},"id":865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":862,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":850,"src":"9942:8:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$313","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":863,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":313,"src":"9954:8:2","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$313_$","typeString":"type(enum Math.Rounding)"}},"id":864,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9963:2:2","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":311,"src":"9954:11:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$313","typeString":"enum Math.Rounding"}},"src":"9942:23:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":866,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9969:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":867,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":856,"src":"9974:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9969:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":869,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":847,"src":"9983:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9969:19:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9942:46:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":873,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9995:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9942:54:2","trueExpression":{"hexValue":"31","id":872,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9991:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":875,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9941:56:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9932:65:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":854,"id":877,"nodeType":"Return","src":"9925:72:2"}]}]},"documentation":{"id":845,"nodeType":"StructuredDocumentation","src":"9622:142:2","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":880,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9778:4:2","nodeType":"FunctionDefinition","parameters":{"id":851,"nodeType":"ParameterList","parameters":[{"constant":false,"id":847,"mutability":"mutable","name":"value","nameLocation":"9791:5:2","nodeType":"VariableDeclaration","scope":880,"src":"9783:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":846,"name":"uint256","nodeType":"ElementaryTypeName","src":"9783:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":850,"mutability":"mutable","name":"rounding","nameLocation":"9807:8:2","nodeType":"VariableDeclaration","scope":880,"src":"9798:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$313","typeString":"enum Math.Rounding"},"typeName":{"id":849,"nodeType":"UserDefinedTypeName","pathNode":{"id":848,"name":"Rounding","nameLocations":["9798:8:2"],"nodeType":"IdentifierPath","referencedDeclaration":313,"src":"9798:8:2"},"referencedDeclaration":313,"src":"9798:8:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$313","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9782:34:2"},"returnParameters":{"id":854,"nodeType":"ParameterList","parameters":[{"constant":false,"id":853,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":880,"src":"9840:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":852,"name":"uint256","nodeType":"ElementaryTypeName","src":"9840:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9839:9:2"},"scope":1172,"src":"9769:245:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1008,"nodeType":"Block","src":"10201:854:2","statements":[{"assignments":[889],"declarations":[{"constant":false,"id":889,"mutability":"mutable","name":"result","nameLocation":"10219:6:2","nodeType":"VariableDeclaration","scope":1008,"src":"10211:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":888,"name":"uint256","nodeType":"ElementaryTypeName","src":"10211:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":891,"initialValue":{"hexValue":"30","id":890,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10228:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10211:18:2"},{"id":1005,"nodeType":"UncheckedBlock","src":"10239:787:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":892,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":883,"src":"10267:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":895,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":893,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10276:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":894,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10282:2:2","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10276:8:2","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10267:17:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":908,"nodeType":"IfStatement","src":"10263:103:2","trueBody":{"id":907,"nodeType":"Block","src":"10286:80:2","statements":[{"expression":{"id":901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":897,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":883,"src":"10304:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":900,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":898,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10313:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":899,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10319:2:2","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10313:8:2","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10304:17:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":902,"nodeType":"ExpressionStatement","src":"10304:17:2"},{"expression":{"id":905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":903,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"10339:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":904,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10349:2:2","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10339:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":906,"nodeType":"ExpressionStatement","src":"10339:12:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":909,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":883,"src":"10383:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":912,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":910,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10392:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":911,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10398:2:2","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10392:8:2","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10383:17:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":925,"nodeType":"IfStatement","src":"10379:103:2","trueBody":{"id":924,"nodeType":"Block","src":"10402:80:2","statements":[{"expression":{"id":918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":914,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":883,"src":"10420:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":917,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":915,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10429:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":916,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10435:2:2","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10429:8:2","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10420:17:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":919,"nodeType":"ExpressionStatement","src":"10420:17:2"},{"expression":{"id":922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":920,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"10455:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":921,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10465:2:2","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10455:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":923,"nodeType":"ExpressionStatement","src":"10455:12:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":926,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":883,"src":"10499:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":929,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":927,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10508:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":928,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10514:2:2","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10508:8:2","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10499:17:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":942,"nodeType":"IfStatement","src":"10495:103:2","trueBody":{"id":941,"nodeType":"Block","src":"10518:80:2","statements":[{"expression":{"id":935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":931,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":883,"src":"10536:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":934,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":932,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10545:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":933,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10551:2:2","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10545:8:2","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10536:17:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":936,"nodeType":"ExpressionStatement","src":"10536:17:2"},{"expression":{"id":939,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":937,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"10571:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":938,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10581:2:2","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10571:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":940,"nodeType":"ExpressionStatement","src":"10571:12:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":943,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":883,"src":"10615:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":946,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":944,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10624:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":945,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10630:1:2","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10624:7:2","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10615:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":959,"nodeType":"IfStatement","src":"10611:100:2","trueBody":{"id":958,"nodeType":"Block","src":"10633:78:2","statements":[{"expression":{"id":952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":948,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":883,"src":"10651:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":951,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":949,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10660:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":950,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10666:1:2","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10660:7:2","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10651:16:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":953,"nodeType":"ExpressionStatement","src":"10651:16:2"},{"expression":{"id":956,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":954,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"10685:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":955,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10695:1:2","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10685:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":957,"nodeType":"ExpressionStatement","src":"10685:11:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":960,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":883,"src":"10728:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":963,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":961,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10737:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":962,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10743:1:2","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10737:7:2","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10728:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":976,"nodeType":"IfStatement","src":"10724:100:2","trueBody":{"id":975,"nodeType":"Block","src":"10746:78:2","statements":[{"expression":{"id":969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":965,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":883,"src":"10764:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":968,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":966,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10773:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":967,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10779:1:2","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10773:7:2","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10764:16:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":970,"nodeType":"ExpressionStatement","src":"10764:16:2"},{"expression":{"id":973,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":971,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"10798:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":972,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10808:1:2","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10798:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":974,"nodeType":"ExpressionStatement","src":"10798:11:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":977,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":883,"src":"10841:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":980,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":978,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10850:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":979,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10856:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10850:7:2","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10841:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":993,"nodeType":"IfStatement","src":"10837:100:2","trueBody":{"id":992,"nodeType":"Block","src":"10859:78:2","statements":[{"expression":{"id":986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":982,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":883,"src":"10877:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":985,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":983,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10886:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":984,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10892:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10886:7:2","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10877:16:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":987,"nodeType":"ExpressionStatement","src":"10877:16:2"},{"expression":{"id":990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":988,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"10911:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":989,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10921:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10911:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":991,"nodeType":"ExpressionStatement","src":"10911:11:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":994,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":883,"src":"10954:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":997,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":995,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10963:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":996,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10969:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10963:7:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10954:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1004,"nodeType":"IfStatement","src":"10950:66:2","trueBody":{"id":1003,"nodeType":"Block","src":"10972:44:2","statements":[{"expression":{"id":1001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":999,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"10990:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1000,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11000:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10990:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1002,"nodeType":"ExpressionStatement","src":"10990:11:2"}]}}]},{"expression":{"id":1006,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":889,"src":"11042:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":887,"id":1007,"nodeType":"Return","src":"11035:13:2"}]},"documentation":{"id":881,"nodeType":"StructuredDocumentation","src":"10020:114:2","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":1009,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10148:5:2","nodeType":"FunctionDefinition","parameters":{"id":884,"nodeType":"ParameterList","parameters":[{"constant":false,"id":883,"mutability":"mutable","name":"value","nameLocation":"10162:5:2","nodeType":"VariableDeclaration","scope":1009,"src":"10154:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":882,"name":"uint256","nodeType":"ElementaryTypeName","src":"10154:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10153:15:2"},"returnParameters":{"id":887,"nodeType":"ParameterList","parameters":[{"constant":false,"id":886,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1009,"src":"10192:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":885,"name":"uint256","nodeType":"ElementaryTypeName","src":"10192:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10191:9:2"},"scope":1172,"src":"10139:916:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1044,"nodeType":"Block","src":"11290:167:2","statements":[{"id":1043,"nodeType":"UncheckedBlock","src":"11300:151:2","statements":[{"assignments":[1021],"declarations":[{"constant":false,"id":1021,"mutability":"mutable","name":"result","nameLocation":"11332:6:2","nodeType":"VariableDeclaration","scope":1043,"src":"11324:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1020,"name":"uint256","nodeType":"ElementaryTypeName","src":"11324:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1025,"initialValue":{"arguments":[{"id":1023,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1012,"src":"11347:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1022,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[1009,1045],"referencedDeclaration":1009,"src":"11341:5:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1024,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11341:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11324:29:2"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1026,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1021,"src":"11374:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$313","typeString":"enum Math.Rounding"},"id":1030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1027,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1015,"src":"11384:8:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$313","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1028,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":313,"src":"11396:8:2","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$313_$","typeString":"type(enum Math.Rounding)"}},"id":1029,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11405:2:2","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":311,"src":"11396:11:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$313","typeString":"enum Math.Rounding"}},"src":"11384:23:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1031,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11411:2:2","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":1032,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1021,"src":"11417:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11411:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1034,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1012,"src":"11426:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11411:20:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11384:47:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1038,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11438:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11384:55:2","trueExpression":{"hexValue":"31","id":1037,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11434:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1040,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11383:57:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11374:66:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1019,"id":1042,"nodeType":"Return","src":"11367:73:2"}]}]},"documentation":{"id":1010,"nodeType":"StructuredDocumentation","src":"11061:143:2","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":1045,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"11218:5:2","nodeType":"FunctionDefinition","parameters":{"id":1016,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1012,"mutability":"mutable","name":"value","nameLocation":"11232:5:2","nodeType":"VariableDeclaration","scope":1045,"src":"11224:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1011,"name":"uint256","nodeType":"ElementaryTypeName","src":"11224:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1015,"mutability":"mutable","name":"rounding","nameLocation":"11248:8:2","nodeType":"VariableDeclaration","scope":1045,"src":"11239:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$313","typeString":"enum Math.Rounding"},"typeName":{"id":1014,"nodeType":"UserDefinedTypeName","pathNode":{"id":1013,"name":"Rounding","nameLocations":["11239:8:2"],"nodeType":"IdentifierPath","referencedDeclaration":313,"src":"11239:8:2"},"referencedDeclaration":313,"src":"11239:8:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$313","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"11223:34:2"},"returnParameters":{"id":1019,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1018,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1045,"src":"11281:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1017,"name":"uint256","nodeType":"ElementaryTypeName","src":"11281:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11280:9:2"},"scope":1172,"src":"11209:248:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1131,"nodeType":"Block","src":"11771:600:2","statements":[{"assignments":[1054],"declarations":[{"constant":false,"id":1054,"mutability":"mutable","name":"result","nameLocation":"11789:6:2","nodeType":"VariableDeclaration","scope":1131,"src":"11781:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1053,"name":"uint256","nodeType":"ElementaryTypeName","src":"11781:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1056,"initialValue":{"hexValue":"30","id":1055,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11798:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11781:18:2"},{"id":1128,"nodeType":"UncheckedBlock","src":"11809:533:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1057,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1048,"src":"11837:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":1058,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11846:3:2","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11837:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1060,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11852:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11837:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1071,"nodeType":"IfStatement","src":"11833:98:2","trueBody":{"id":1070,"nodeType":"Block","src":"11855:76:2","statements":[{"expression":{"id":1064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1062,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1048,"src":"11873:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":1063,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11883:3:2","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11873:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1065,"nodeType":"ExpressionStatement","src":"11873:13:2"},{"expression":{"id":1068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1066,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"11904:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":1067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11914:2:2","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11904:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1069,"nodeType":"ExpressionStatement","src":"11904:12:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1072,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1048,"src":"11948:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":1073,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11957:2:2","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11948:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1075,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11962:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11948:15:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1086,"nodeType":"IfStatement","src":"11944:95:2","trueBody":{"id":1085,"nodeType":"Block","src":"11965:74:2","statements":[{"expression":{"id":1079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1077,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1048,"src":"11983:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":1078,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11993:2:2","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11983:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1080,"nodeType":"ExpressionStatement","src":"11983:12:2"},{"expression":{"id":1083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1081,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"12013:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":1082,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12023:1:2","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12013:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1084,"nodeType":"ExpressionStatement","src":"12013:11:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1087,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1048,"src":"12056:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":1088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12065:2:2","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12056:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1090,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12070:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12056:15:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1101,"nodeType":"IfStatement","src":"12052:95:2","trueBody":{"id":1100,"nodeType":"Block","src":"12073:74:2","statements":[{"expression":{"id":1094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1092,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1048,"src":"12091:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":1093,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12101:2:2","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12091:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1095,"nodeType":"ExpressionStatement","src":"12091:12:2"},{"expression":{"id":1098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1096,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"12121:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":1097,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12131:1:2","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12121:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1099,"nodeType":"ExpressionStatement","src":"12121:11:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1102,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1048,"src":"12164:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":1103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12173:2:2","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12164:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1105,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12178:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12164:15:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1116,"nodeType":"IfStatement","src":"12160:95:2","trueBody":{"id":1115,"nodeType":"Block","src":"12181:74:2","statements":[{"expression":{"id":1109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1107,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1048,"src":"12199:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":1108,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12209:2:2","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12199:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1110,"nodeType":"ExpressionStatement","src":"12199:12:2"},{"expression":{"id":1113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1111,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"12229:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":1112,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12239:1:2","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12229:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1114,"nodeType":"ExpressionStatement","src":"12229:11:2"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1117,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1048,"src":"12272:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":1118,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12281:1:2","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12272:10:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12285:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12272:14:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1127,"nodeType":"IfStatement","src":"12268:64:2","trueBody":{"id":1126,"nodeType":"Block","src":"12288:44:2","statements":[{"expression":{"id":1124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1122,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"12306:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1123,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12316:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12306:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1125,"nodeType":"ExpressionStatement","src":"12306:11:2"}]}}]},{"expression":{"id":1129,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"12358:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1052,"id":1130,"nodeType":"Return","src":"12351:13:2"}]},"documentation":{"id":1046,"nodeType":"StructuredDocumentation","src":"11463:240:2","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":1132,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11717:6:2","nodeType":"FunctionDefinition","parameters":{"id":1049,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1048,"mutability":"mutable","name":"value","nameLocation":"11732:5:2","nodeType":"VariableDeclaration","scope":1132,"src":"11724:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1047,"name":"uint256","nodeType":"ElementaryTypeName","src":"11724:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11723:15:2"},"returnParameters":{"id":1052,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1051,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1132,"src":"11762:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1050,"name":"uint256","nodeType":"ElementaryTypeName","src":"11762:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11761:9:2"},"scope":1172,"src":"11708:663:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1170,"nodeType":"Block","src":"12608:174:2","statements":[{"id":1169,"nodeType":"UncheckedBlock","src":"12618:158:2","statements":[{"assignments":[1144],"declarations":[{"constant":false,"id":1144,"mutability":"mutable","name":"result","nameLocation":"12650:6:2","nodeType":"VariableDeclaration","scope":1169,"src":"12642:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1143,"name":"uint256","nodeType":"ElementaryTypeName","src":"12642:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1148,"initialValue":{"arguments":[{"id":1146,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"12666:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1145,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[1132,1171],"referencedDeclaration":1132,"src":"12659:6:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1147,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12659:13:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12642:30:2"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1149,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1144,"src":"12693:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$313","typeString":"enum Math.Rounding"},"id":1153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1150,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1138,"src":"12703:8:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$313","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1151,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":313,"src":"12715:8:2","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$313_$","typeString":"type(enum Math.Rounding)"}},"id":1152,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12724:2:2","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":311,"src":"12715:11:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$313","typeString":"enum Math.Rounding"}},"src":"12703:23:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1161,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1154,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12730:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1155,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1144,"src":"12736:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":1156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12746:1:2","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"12736:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1158,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12735:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12730:18:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1160,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"12751:5:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12730:26:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12703:53:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1164,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12763:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12703:61:2","trueExpression":{"hexValue":"31","id":1163,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12759:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1166,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12702:63:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12693:72:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1142,"id":1168,"nodeType":"Return","src":"12686:79:2"}]}]},"documentation":{"id":1133,"nodeType":"StructuredDocumentation","src":"12377:144:2","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":1171,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12535:6:2","nodeType":"FunctionDefinition","parameters":{"id":1139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1135,"mutability":"mutable","name":"value","nameLocation":"12550:5:2","nodeType":"VariableDeclaration","scope":1171,"src":"12542:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1134,"name":"uint256","nodeType":"ElementaryTypeName","src":"12542:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1138,"mutability":"mutable","name":"rounding","nameLocation":"12566:8:2","nodeType":"VariableDeclaration","scope":1171,"src":"12557:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$313","typeString":"enum Math.Rounding"},"typeName":{"id":1137,"nodeType":"UserDefinedTypeName","pathNode":{"id":1136,"name":"Rounding","nameLocations":["12557:8:2"],"nodeType":"IdentifierPath","referencedDeclaration":313,"src":"12557:8:2"},"referencedDeclaration":313,"src":"12557:8:2","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$313","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"12541:34:2"},"returnParameters":{"id":1142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1141,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1171,"src":"12599:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1140,"name":"uint256","nodeType":"ElementaryTypeName","src":"12599:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12598:9:2"},"scope":1172,"src":"12526:256:2","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1173,"src":"202:12582:2","usedErrors":[]}],"src":"103:12682:2"},"id":2},"@openzeppelin/contracts/utils/math/SafeMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SafeMath.sol","exportedSymbols":{"SafeMath":[1484]},"id":1485,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1174,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:3"},{"abstract":false,"baseContracts":[],"canonicalName":"SafeMath","contractDependencies":[],"contractKind":"library","documentation":{"id":1175,"nodeType":"StructuredDocumentation","src":"285:196:3","text":" @dev Wrappers over Solidity's arithmetic operations.\n NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n now has built in overflow checking."},"fullyImplemented":true,"id":1484,"linearizedBaseContracts":[1484],"name":"SafeMath","nameLocation":"490:8:3","nodeType":"ContractDefinition","nodes":[{"body":{"id":1206,"nodeType":"Block","src":"717:140:3","statements":[{"id":1205,"nodeType":"UncheckedBlock","src":"727:124:3","statements":[{"assignments":[1188],"declarations":[{"constant":false,"id":1188,"mutability":"mutable","name":"c","nameLocation":"759:1:3","nodeType":"VariableDeclaration","scope":1205,"src":"751:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1187,"name":"uint256","nodeType":"ElementaryTypeName","src":"751:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1192,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1189,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1178,"src":"763:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1190,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1180,"src":"767:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"763:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"751:17:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1193,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1188,"src":"786:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1194,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1178,"src":"790:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"786:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1200,"nodeType":"IfStatement","src":"782:28:3","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"801:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"808:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1198,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"800:10:3","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1186,"id":1199,"nodeType":"Return","src":"793:17:3"}},{"expression":{"components":[{"hexValue":"74727565","id":1201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"832:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":1202,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1188,"src":"838:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1203,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"831:9:3","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1186,"id":1204,"nodeType":"Return","src":"824:16:3"}]}]},"documentation":{"id":1176,"nodeType":"StructuredDocumentation","src":"505:131:3","text":" @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":1207,"implemented":true,"kind":"function","modifiers":[],"name":"tryAdd","nameLocation":"650:6:3","nodeType":"FunctionDefinition","parameters":{"id":1181,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1178,"mutability":"mutable","name":"a","nameLocation":"665:1:3","nodeType":"VariableDeclaration","scope":1207,"src":"657:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1177,"name":"uint256","nodeType":"ElementaryTypeName","src":"657:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1180,"mutability":"mutable","name":"b","nameLocation":"676:1:3","nodeType":"VariableDeclaration","scope":1207,"src":"668:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1179,"name":"uint256","nodeType":"ElementaryTypeName","src":"668:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"656:22:3"},"returnParameters":{"id":1186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1183,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1207,"src":"702:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1182,"name":"bool","nodeType":"ElementaryTypeName","src":"702:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1185,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1207,"src":"708:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1184,"name":"uint256","nodeType":"ElementaryTypeName","src":"708:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"701:15:3"},"scope":1484,"src":"641:216:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1234,"nodeType":"Block","src":"1078:113:3","statements":[{"id":1233,"nodeType":"UncheckedBlock","src":"1088:97:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1219,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1212,"src":"1116:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1220,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1210,"src":"1120:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1116:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1226,"nodeType":"IfStatement","src":"1112:28:3","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1131:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1138:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1224,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1130:10:3","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1218,"id":1225,"nodeType":"Return","src":"1123:17:3"}},{"expression":{"components":[{"hexValue":"74727565","id":1227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1162:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1228,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1210,"src":"1168:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1229,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1212,"src":"1172:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1168:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1231,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1161:13:3","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1218,"id":1232,"nodeType":"Return","src":"1154:20:3"}]}]},"documentation":{"id":1208,"nodeType":"StructuredDocumentation","src":"863:134:3","text":" @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":1235,"implemented":true,"kind":"function","modifiers":[],"name":"trySub","nameLocation":"1011:6:3","nodeType":"FunctionDefinition","parameters":{"id":1213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1210,"mutability":"mutable","name":"a","nameLocation":"1026:1:3","nodeType":"VariableDeclaration","scope":1235,"src":"1018:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1209,"name":"uint256","nodeType":"ElementaryTypeName","src":"1018:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1212,"mutability":"mutable","name":"b","nameLocation":"1037:1:3","nodeType":"VariableDeclaration","scope":1235,"src":"1029:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1211,"name":"uint256","nodeType":"ElementaryTypeName","src":"1029:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1017:22:3"},"returnParameters":{"id":1218,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1215,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1235,"src":"1063:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1214,"name":"bool","nodeType":"ElementaryTypeName","src":"1063:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1217,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1235,"src":"1069:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1216,"name":"uint256","nodeType":"ElementaryTypeName","src":"1069:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1062:15:3"},"scope":1484,"src":"1002:189:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1276,"nodeType":"Block","src":"1415:417:3","statements":[{"id":1275,"nodeType":"UncheckedBlock","src":"1425:401:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1247,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1238,"src":"1683:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1248,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1688:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1683:6:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1254,"nodeType":"IfStatement","src":"1679:28:3","trueBody":{"expression":{"components":[{"hexValue":"74727565","id":1250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1699:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"hexValue":"30","id":1251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1705:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1252,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1698:9:3","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1246,"id":1253,"nodeType":"Return","src":"1691:16:3"}},{"assignments":[1256],"declarations":[{"constant":false,"id":1256,"mutability":"mutable","name":"c","nameLocation":"1729:1:3","nodeType":"VariableDeclaration","scope":1275,"src":"1721:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1255,"name":"uint256","nodeType":"ElementaryTypeName","src":"1721:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1260,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1257,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1238,"src":"1733:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1258,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1240,"src":"1737:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1733:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1721:17:3"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1261,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1256,"src":"1756:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1262,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1238,"src":"1760:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1756:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1264,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1240,"src":"1765:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1756:10:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1270,"nodeType":"IfStatement","src":"1752:33:3","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1776:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1267,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1783:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1268,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1775:10:3","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1246,"id":1269,"nodeType":"Return","src":"1768:17:3"}},{"expression":{"components":[{"hexValue":"74727565","id":1271,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1807:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":1272,"name":"c","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1256,"src":"1813:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1273,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1806:9:3","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1246,"id":1274,"nodeType":"Return","src":"1799:16:3"}]}]},"documentation":{"id":1236,"nodeType":"StructuredDocumentation","src":"1197:137:3","text":" @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"},"id":1277,"implemented":true,"kind":"function","modifiers":[],"name":"tryMul","nameLocation":"1348:6:3","nodeType":"FunctionDefinition","parameters":{"id":1241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1238,"mutability":"mutable","name":"a","nameLocation":"1363:1:3","nodeType":"VariableDeclaration","scope":1277,"src":"1355:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1237,"name":"uint256","nodeType":"ElementaryTypeName","src":"1355:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1240,"mutability":"mutable","name":"b","nameLocation":"1374:1:3","nodeType":"VariableDeclaration","scope":1277,"src":"1366:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1239,"name":"uint256","nodeType":"ElementaryTypeName","src":"1366:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1354:22:3"},"returnParameters":{"id":1246,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1243,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1277,"src":"1400:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1242,"name":"bool","nodeType":"ElementaryTypeName","src":"1400:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1245,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1277,"src":"1406:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1244,"name":"uint256","nodeType":"ElementaryTypeName","src":"1406:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1399:15:3"},"scope":1484,"src":"1339:493:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1304,"nodeType":"Block","src":"2057:114:3","statements":[{"id":1303,"nodeType":"UncheckedBlock","src":"2067:98:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1289,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1282,"src":"2095:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2100:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2095:6:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1296,"nodeType":"IfStatement","src":"2091:29:3","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1292,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2111:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1293,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2118:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1294,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2110:10:3","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1288,"id":1295,"nodeType":"Return","src":"2103:17:3"}},{"expression":{"components":[{"hexValue":"74727565","id":1297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2142:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1298,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1280,"src":"2148:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1299,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1282,"src":"2152:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2148:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1301,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2141:13:3","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1288,"id":1302,"nodeType":"Return","src":"2134:20:3"}]}]},"documentation":{"id":1278,"nodeType":"StructuredDocumentation","src":"1838:138:3","text":" @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"},"id":1305,"implemented":true,"kind":"function","modifiers":[],"name":"tryDiv","nameLocation":"1990:6:3","nodeType":"FunctionDefinition","parameters":{"id":1283,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1280,"mutability":"mutable","name":"a","nameLocation":"2005:1:3","nodeType":"VariableDeclaration","scope":1305,"src":"1997:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1279,"name":"uint256","nodeType":"ElementaryTypeName","src":"1997:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1282,"mutability":"mutable","name":"b","nameLocation":"2016:1:3","nodeType":"VariableDeclaration","scope":1305,"src":"2008:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1281,"name":"uint256","nodeType":"ElementaryTypeName","src":"2008:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1996:22:3"},"returnParameters":{"id":1288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1285,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1305,"src":"2042:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1284,"name":"bool","nodeType":"ElementaryTypeName","src":"2042:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1287,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1305,"src":"2048:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1286,"name":"uint256","nodeType":"ElementaryTypeName","src":"2048:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2041:15:3"},"scope":1484,"src":"1981:190:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1332,"nodeType":"Block","src":"2406:114:3","statements":[{"id":1331,"nodeType":"UncheckedBlock","src":"2416:98:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1317,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1310,"src":"2444:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1318,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2449:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2444:6:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1324,"nodeType":"IfStatement","src":"2440:29:3","trueBody":{"expression":{"components":[{"hexValue":"66616c7365","id":1320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2460:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":1321,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2467:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1322,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2459:10:3","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_rational_0_by_1_$","typeString":"tuple(bool,int_const 0)"}},"functionReturnParameters":1316,"id":1323,"nodeType":"Return","src":"2452:17:3"}},{"expression":{"components":[{"hexValue":"74727565","id":1325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2491:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1326,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1308,"src":"2497:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":1327,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1310,"src":"2501:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2497:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1329,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2490:13:3","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_uint256_$","typeString":"tuple(bool,uint256)"}},"functionReturnParameters":1316,"id":1330,"nodeType":"Return","src":"2483:20:3"}]}]},"documentation":{"id":1306,"nodeType":"StructuredDocumentation","src":"2177:148:3","text":" @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"},"id":1333,"implemented":true,"kind":"function","modifiers":[],"name":"tryMod","nameLocation":"2339:6:3","nodeType":"FunctionDefinition","parameters":{"id":1311,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1308,"mutability":"mutable","name":"a","nameLocation":"2354:1:3","nodeType":"VariableDeclaration","scope":1333,"src":"2346:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1307,"name":"uint256","nodeType":"ElementaryTypeName","src":"2346:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1310,"mutability":"mutable","name":"b","nameLocation":"2365:1:3","nodeType":"VariableDeclaration","scope":1333,"src":"2357:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1309,"name":"uint256","nodeType":"ElementaryTypeName","src":"2357:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2345:22:3"},"returnParameters":{"id":1316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1313,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1333,"src":"2391:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1312,"name":"bool","nodeType":"ElementaryTypeName","src":"2391:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1315,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1333,"src":"2397:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1314,"name":"uint256","nodeType":"ElementaryTypeName","src":"2397:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2390:15:3"},"scope":1484,"src":"2330:190:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1347,"nodeType":"Block","src":"2822:29:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1343,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"2839:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1344,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1338,"src":"2843:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2839:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1342,"id":1346,"nodeType":"Return","src":"2832:12:3"}]},"documentation":{"id":1334,"nodeType":"StructuredDocumentation","src":"2526:224:3","text":" @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."},"id":1348,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"2764:3:3","nodeType":"FunctionDefinition","parameters":{"id":1339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1336,"mutability":"mutable","name":"a","nameLocation":"2776:1:3","nodeType":"VariableDeclaration","scope":1348,"src":"2768:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1335,"name":"uint256","nodeType":"ElementaryTypeName","src":"2768:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1338,"mutability":"mutable","name":"b","nameLocation":"2787:1:3","nodeType":"VariableDeclaration","scope":1348,"src":"2779:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1337,"name":"uint256","nodeType":"ElementaryTypeName","src":"2779:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2767:22:3"},"returnParameters":{"id":1342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1341,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1348,"src":"2813:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1340,"name":"uint256","nodeType":"ElementaryTypeName","src":"2813:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2812:9:3"},"scope":1484,"src":"2755:96:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1362,"nodeType":"Block","src":"3189:29:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1358,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1351,"src":"3206:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1359,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1353,"src":"3210:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3206:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1357,"id":1361,"nodeType":"Return","src":"3199:12:3"}]},"documentation":{"id":1349,"nodeType":"StructuredDocumentation","src":"2857:260:3","text":" @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."},"id":1363,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nameLocation":"3131:3:3","nodeType":"FunctionDefinition","parameters":{"id":1354,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1351,"mutability":"mutable","name":"a","nameLocation":"3143:1:3","nodeType":"VariableDeclaration","scope":1363,"src":"3135:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1350,"name":"uint256","nodeType":"ElementaryTypeName","src":"3135:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1353,"mutability":"mutable","name":"b","nameLocation":"3154:1:3","nodeType":"VariableDeclaration","scope":1363,"src":"3146:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1352,"name":"uint256","nodeType":"ElementaryTypeName","src":"3146:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3134:22:3"},"returnParameters":{"id":1357,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1356,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1363,"src":"3180:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1355,"name":"uint256","nodeType":"ElementaryTypeName","src":"3180:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3179:9:3"},"scope":1484,"src":"3122:96:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1377,"nodeType":"Block","src":"3532:29:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1373,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1366,"src":"3549:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1374,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1368,"src":"3553:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3549:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1372,"id":1376,"nodeType":"Return","src":"3542:12:3"}]},"documentation":{"id":1364,"nodeType":"StructuredDocumentation","src":"3224:236:3","text":" @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."},"id":1378,"implemented":true,"kind":"function","modifiers":[],"name":"mul","nameLocation":"3474:3:3","nodeType":"FunctionDefinition","parameters":{"id":1369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1366,"mutability":"mutable","name":"a","nameLocation":"3486:1:3","nodeType":"VariableDeclaration","scope":1378,"src":"3478:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1365,"name":"uint256","nodeType":"ElementaryTypeName","src":"3478:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1368,"mutability":"mutable","name":"b","nameLocation":"3497:1:3","nodeType":"VariableDeclaration","scope":1378,"src":"3489:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1367,"name":"uint256","nodeType":"ElementaryTypeName","src":"3489:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3477:22:3"},"returnParameters":{"id":1372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1371,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1378,"src":"3523:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1370,"name":"uint256","nodeType":"ElementaryTypeName","src":"3523:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3522:9:3"},"scope":1484,"src":"3465:96:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1392,"nodeType":"Block","src":"3917:29:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1388,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1381,"src":"3934:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1389,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1383,"src":"3938:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3934:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1387,"id":1391,"nodeType":"Return","src":"3927:12:3"}]},"documentation":{"id":1379,"nodeType":"StructuredDocumentation","src":"3567:278:3","text":" @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator.\n Requirements:\n - The divisor cannot be zero."},"id":1393,"implemented":true,"kind":"function","modifiers":[],"name":"div","nameLocation":"3859:3:3","nodeType":"FunctionDefinition","parameters":{"id":1384,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1381,"mutability":"mutable","name":"a","nameLocation":"3871:1:3","nodeType":"VariableDeclaration","scope":1393,"src":"3863:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1380,"name":"uint256","nodeType":"ElementaryTypeName","src":"3863:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1383,"mutability":"mutable","name":"b","nameLocation":"3882:1:3","nodeType":"VariableDeclaration","scope":1393,"src":"3874:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1382,"name":"uint256","nodeType":"ElementaryTypeName","src":"3874:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3862:22:3"},"returnParameters":{"id":1387,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1386,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1393,"src":"3908:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1385,"name":"uint256","nodeType":"ElementaryTypeName","src":"3908:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3907:9:3"},"scope":1484,"src":"3850:96:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1407,"nodeType":"Block","src":"4466:29:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1403,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1396,"src":"4483:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":1404,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1398,"src":"4487:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4483:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1402,"id":1406,"nodeType":"Return","src":"4476:12:3"}]},"documentation":{"id":1394,"nodeType":"StructuredDocumentation","src":"3952:442:3","text":" @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":1408,"implemented":true,"kind":"function","modifiers":[],"name":"mod","nameLocation":"4408:3:3","nodeType":"FunctionDefinition","parameters":{"id":1399,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1396,"mutability":"mutable","name":"a","nameLocation":"4420:1:3","nodeType":"VariableDeclaration","scope":1408,"src":"4412:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1395,"name":"uint256","nodeType":"ElementaryTypeName","src":"4412:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1398,"mutability":"mutable","name":"b","nameLocation":"4431:1:3","nodeType":"VariableDeclaration","scope":1408,"src":"4423:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1397,"name":"uint256","nodeType":"ElementaryTypeName","src":"4423:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4411:22:3"},"returnParameters":{"id":1402,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1401,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1408,"src":"4457:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1400,"name":"uint256","nodeType":"ElementaryTypeName","src":"4457:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4456:9:3"},"scope":1484,"src":"4399:96:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1432,"nodeType":"Block","src":"5054:106:3","statements":[{"id":1431,"nodeType":"UncheckedBlock","src":"5064:90:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1421,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1413,"src":"5096:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":1422,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1411,"src":"5101:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5096:6:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1424,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1415,"src":"5104:12:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1420,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5088:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1425,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5088:29:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1426,"nodeType":"ExpressionStatement","src":"5088:29:3"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1427,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1411,"src":"5138:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1428,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1413,"src":"5142:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5138:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1419,"id":1430,"nodeType":"Return","src":"5131:12:3"}]}]},"documentation":{"id":1409,"nodeType":"StructuredDocumentation","src":"4501:453:3","text":" @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."},"id":1433,"implemented":true,"kind":"function","modifiers":[],"name":"sub","nameLocation":"4968:3:3","nodeType":"FunctionDefinition","parameters":{"id":1416,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1411,"mutability":"mutable","name":"a","nameLocation":"4980:1:3","nodeType":"VariableDeclaration","scope":1433,"src":"4972:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1410,"name":"uint256","nodeType":"ElementaryTypeName","src":"4972:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1413,"mutability":"mutable","name":"b","nameLocation":"4991:1:3","nodeType":"VariableDeclaration","scope":1433,"src":"4983:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1412,"name":"uint256","nodeType":"ElementaryTypeName","src":"4983:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1415,"mutability":"mutable","name":"errorMessage","nameLocation":"5008:12:3","nodeType":"VariableDeclaration","scope":1433,"src":"4994:26:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1414,"name":"string","nodeType":"ElementaryTypeName","src":"4994:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4971:50:3"},"returnParameters":{"id":1419,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1418,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1433,"src":"5045:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1417,"name":"uint256","nodeType":"ElementaryTypeName","src":"5045:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5044:9:3"},"scope":1484,"src":"4959:201:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1457,"nodeType":"Block","src":"5739:105:3","statements":[{"id":1456,"nodeType":"UncheckedBlock","src":"5749:89:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1446,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1438,"src":"5781:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1447,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5785:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5781:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1449,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1440,"src":"5788:12:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1445,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5773:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1450,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5773:28:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1451,"nodeType":"ExpressionStatement","src":"5773:28:3"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1452,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1436,"src":"5822:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1453,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1438,"src":"5826:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5822:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1444,"id":1455,"nodeType":"Return","src":"5815:12:3"}]}]},"documentation":{"id":1434,"nodeType":"StructuredDocumentation","src":"5166:473:3","text":" @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":1458,"implemented":true,"kind":"function","modifiers":[],"name":"div","nameLocation":"5653:3:3","nodeType":"FunctionDefinition","parameters":{"id":1441,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1436,"mutability":"mutable","name":"a","nameLocation":"5665:1:3","nodeType":"VariableDeclaration","scope":1458,"src":"5657:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1435,"name":"uint256","nodeType":"ElementaryTypeName","src":"5657:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1438,"mutability":"mutable","name":"b","nameLocation":"5676:1:3","nodeType":"VariableDeclaration","scope":1458,"src":"5668:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1437,"name":"uint256","nodeType":"ElementaryTypeName","src":"5668:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1440,"mutability":"mutable","name":"errorMessage","nameLocation":"5693:12:3","nodeType":"VariableDeclaration","scope":1458,"src":"5679:26:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1439,"name":"string","nodeType":"ElementaryTypeName","src":"5679:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5656:50:3"},"returnParameters":{"id":1444,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1443,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1458,"src":"5730:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1442,"name":"uint256","nodeType":"ElementaryTypeName","src":"5730:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5729:9:3"},"scope":1484,"src":"5644:200:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1482,"nodeType":"Block","src":"6585:105:3","statements":[{"id":1481,"nodeType":"UncheckedBlock","src":"6595:89:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1471,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1463,"src":"6627:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6631:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6627:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1474,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1465,"src":"6634:12:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1470,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6619:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1475,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6619:28:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1476,"nodeType":"ExpressionStatement","src":"6619:28:3"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1477,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1461,"src":"6668:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":1478,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1463,"src":"6672:1:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6668:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1469,"id":1480,"nodeType":"Return","src":"6661:12:3"}]}]},"documentation":{"id":1459,"nodeType":"StructuredDocumentation","src":"5850:635:3","text":" @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":1483,"implemented":true,"kind":"function","modifiers":[],"name":"mod","nameLocation":"6499:3:3","nodeType":"FunctionDefinition","parameters":{"id":1466,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1461,"mutability":"mutable","name":"a","nameLocation":"6511:1:3","nodeType":"VariableDeclaration","scope":1483,"src":"6503:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1460,"name":"uint256","nodeType":"ElementaryTypeName","src":"6503:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1463,"mutability":"mutable","name":"b","nameLocation":"6522:1:3","nodeType":"VariableDeclaration","scope":1483,"src":"6514:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1462,"name":"uint256","nodeType":"ElementaryTypeName","src":"6514:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1465,"mutability":"mutable","name":"errorMessage","nameLocation":"6539:12:3","nodeType":"VariableDeclaration","scope":1483,"src":"6525:26:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1464,"name":"string","nodeType":"ElementaryTypeName","src":"6525:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6502:50:3"},"returnParameters":{"id":1469,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1468,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1483,"src":"6576:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1467,"name":"uint256","nodeType":"ElementaryTypeName","src":"6576:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6575:9:3"},"scope":1484,"src":"6490:200:3","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1485,"src":"482:6210:3","usedErrors":[]}],"src":"107:6586:3"},"id":3},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","exportedSymbols":{"SignedMath":[1589]},"id":1590,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1486,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"109:23:4"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMath","contractDependencies":[],"contractKind":"library","documentation":{"id":1487,"nodeType":"StructuredDocumentation","src":"134:80:4","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":1589,"linearizedBaseContracts":[1589],"name":"SignedMath","nameLocation":"223:10:4","nodeType":"ContractDefinition","nodes":[{"body":{"id":1504,"nodeType":"Block","src":"375:37:4","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1497,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1490,"src":"392:1:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1498,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"396:1:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"392:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1501,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"404:1:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":1502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"392:13:4","trueExpression":{"id":1500,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1490,"src":"400:1:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":1496,"id":1503,"nodeType":"Return","src":"385:20:4"}]},"documentation":{"id":1488,"nodeType":"StructuredDocumentation","src":"240:66:4","text":" @dev Returns the largest of two signed numbers."},"id":1505,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"320:3:4","nodeType":"FunctionDefinition","parameters":{"id":1493,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1490,"mutability":"mutable","name":"a","nameLocation":"331:1:4","nodeType":"VariableDeclaration","scope":1505,"src":"324:8:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1489,"name":"int256","nodeType":"ElementaryTypeName","src":"324:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1492,"mutability":"mutable","name":"b","nameLocation":"341:1:4","nodeType":"VariableDeclaration","scope":1505,"src":"334:8:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1491,"name":"int256","nodeType":"ElementaryTypeName","src":"334:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"323:20:4"},"returnParameters":{"id":1496,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1495,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1505,"src":"367:6:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1494,"name":"int256","nodeType":"ElementaryTypeName","src":"367:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"366:8:4"},"scope":1589,"src":"311:101:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1522,"nodeType":"Block","src":"554:37:4","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1515,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1508,"src":"571:1:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1516,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1510,"src":"575:1:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"571:5:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1519,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1510,"src":"583:1:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":1520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"571:13:4","trueExpression":{"id":1518,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1508,"src":"579:1:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":1514,"id":1521,"nodeType":"Return","src":"564:20:4"}]},"documentation":{"id":1506,"nodeType":"StructuredDocumentation","src":"418:67:4","text":" @dev Returns the smallest of two signed numbers."},"id":1523,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"499:3:4","nodeType":"FunctionDefinition","parameters":{"id":1511,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1508,"mutability":"mutable","name":"a","nameLocation":"510:1:4","nodeType":"VariableDeclaration","scope":1523,"src":"503:8:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1507,"name":"int256","nodeType":"ElementaryTypeName","src":"503:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1510,"mutability":"mutable","name":"b","nameLocation":"520:1:4","nodeType":"VariableDeclaration","scope":1523,"src":"513:8:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1509,"name":"int256","nodeType":"ElementaryTypeName","src":"513:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"502:20:4"},"returnParameters":{"id":1514,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1513,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1523,"src":"546:6:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1512,"name":"int256","nodeType":"ElementaryTypeName","src":"546:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"545:8:4"},"scope":1589,"src":"490:101:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1566,"nodeType":"Block","src":"796:162:4","statements":[{"assignments":[1534],"declarations":[{"constant":false,"id":1534,"mutability":"mutable","name":"x","nameLocation":"865:1:4","nodeType":"VariableDeclaration","scope":1566,"src":"858:8:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1533,"name":"int256","nodeType":"ElementaryTypeName","src":"858:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":1547,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1535,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1526,"src":"870:1:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":1536,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1528,"src":"874:1:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"870:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1538,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"869:7:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1539,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1526,"src":"881:1:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":1540,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1528,"src":"885:1:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"881:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1542,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:7:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1543,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"891:1:4","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"880:12:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1545,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"879:14:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"869:24:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"858:35:4"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1548,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1534,"src":"910:1:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1553,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1534,"src":"930:1:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":1552,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"922:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1551,"name":"uint256","nodeType":"ElementaryTypeName","src":"922:7:4","typeDescriptions":{}}},"id":1554,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"922:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":1555,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"936:3:4","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"922:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1550,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"915:6:4","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":1549,"name":"int256","nodeType":"ElementaryTypeName","src":"915:6:4","typeDescriptions":{}}},"id":1557,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"915:25:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1560,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1558,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1526,"src":"944:1:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":1559,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1528,"src":"948:1:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"944:5:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1561,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"943:7:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"915:35:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1563,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"914:37:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"910:41:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":1532,"id":1565,"nodeType":"Return","src":"903:48:4"}]},"documentation":{"id":1524,"nodeType":"StructuredDocumentation","src":"597:126:4","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":1567,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"737:7:4","nodeType":"FunctionDefinition","parameters":{"id":1529,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1526,"mutability":"mutable","name":"a","nameLocation":"752:1:4","nodeType":"VariableDeclaration","scope":1567,"src":"745:8:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1525,"name":"int256","nodeType":"ElementaryTypeName","src":"745:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1528,"mutability":"mutable","name":"b","nameLocation":"762:1:4","nodeType":"VariableDeclaration","scope":1567,"src":"755:8:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1527,"name":"int256","nodeType":"ElementaryTypeName","src":"755:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"744:20:4"},"returnParameters":{"id":1532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1531,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1567,"src":"788:6:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1530,"name":"int256","nodeType":"ElementaryTypeName","src":"788:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"787:8:4"},"scope":1589,"src":"728:230:4","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1587,"nodeType":"Block","src":"1102:158:4","statements":[{"id":1586,"nodeType":"UncheckedBlock","src":"1112:142:4","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1577,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1570,"src":"1227:1:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":1578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1232:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1227:6:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1240:2:4","subExpression":{"id":1581,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1570,"src":"1241:1:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":1583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1227:15:4","trueExpression":{"id":1580,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1570,"src":"1236:1:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":1576,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1219:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1575,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:4","typeDescriptions":{}}},"id":1584,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1219:24:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1574,"id":1585,"nodeType":"Return","src":"1212:31:4"}]}]},"documentation":{"id":1568,"nodeType":"StructuredDocumentation","src":"964:78:4","text":" @dev Returns the absolute unsigned value of a signed value."},"id":1588,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1056:3:4","nodeType":"FunctionDefinition","parameters":{"id":1571,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1570,"mutability":"mutable","name":"n","nameLocation":"1067:1:4","nodeType":"VariableDeclaration","scope":1588,"src":"1060:8:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1569,"name":"int256","nodeType":"ElementaryTypeName","src":"1060:6:4","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1059:10:4"},"returnParameters":{"id":1574,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1573,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1588,"src":"1093:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1572,"name":"uint256","nodeType":"ElementaryTypeName","src":"1093:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1092:9:4"},"scope":1589,"src":"1047:213:4","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1590,"src":"215:1047:4","usedErrors":[]}],"src":"109:1154:4"},"id":4},"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol":{"ast":{"absolutePath":"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol","exportedSymbols":{"IUniswapV3SwapCallback":[1603]},"id":1604,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":1591,"literals":["solidity",">=","0.5",".0"],"nodeType":"PragmaDirective","src":"45:24:5"},{"abstract":false,"baseContracts":[],"canonicalName":"IUniswapV3SwapCallback","contractDependencies":[],"contractKind":"interface","documentation":{"id":1592,"nodeType":"StructuredDocumentation","src":"71:144:5","text":"@title Callback for IUniswapV3PoolActions#swap\n @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface"},"fullyImplemented":false,"id":1603,"linearizedBaseContracts":[1603],"name":"IUniswapV3SwapCallback","nameLocation":"225:22:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1593,"nodeType":"StructuredDocumentation","src":"254:898:5","text":"@notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n @dev In the implementation you must pay the pool tokens owed for the swap.\n The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call"},"functionSelector":"fa461e33","id":1602,"implemented":false,"kind":"function","modifiers":[],"name":"uniswapV3SwapCallback","nameLocation":"1166:21:5","nodeType":"FunctionDefinition","parameters":{"id":1600,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1595,"mutability":"mutable","name":"amount0Delta","nameLocation":"1204:12:5","nodeType":"VariableDeclaration","scope":1602,"src":"1197:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1594,"name":"int256","nodeType":"ElementaryTypeName","src":"1197:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1597,"mutability":"mutable","name":"amount1Delta","nameLocation":"1233:12:5","nodeType":"VariableDeclaration","scope":1602,"src":"1226:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1596,"name":"int256","nodeType":"ElementaryTypeName","src":"1226:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1599,"mutability":"mutable","name":"data","nameLocation":"1270:4:5","nodeType":"VariableDeclaration","scope":1602,"src":"1255:19:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1598,"name":"bytes","nodeType":"ElementaryTypeName","src":"1255:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1187:93:5"},"returnParameters":{"id":1601,"nodeType":"ParameterList","parameters":[],"src":"1289:0:5"},"scope":1603,"src":"1157:133:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1604,"src":"215:1077:5","usedErrors":[]}],"src":"45:1248:5"},"id":5},"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol":{"ast":{"absolutePath":"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol","exportedSymbols":{"ISwapRouter":[1703],"IUniswapV3SwapCallback":[1603]},"id":1704,"license":"GPL-2.0-or-later","nodeType":"SourceUnit","nodes":[{"id":1605,"literals":["solidity",">=","0.7",".5"],"nodeType":"PragmaDirective","src":"45:24:6"},{"id":1606,"literals":["abicoder","v2"],"nodeType":"PragmaDirective","src":"70:19:6"},{"absolutePath":"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol","file":"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol","id":1607,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1704,"sourceUnit":1604,"src":"91:83:6","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1609,"name":"IUniswapV3SwapCallback","nameLocations":["305:22:6"],"nodeType":"IdentifierPath","referencedDeclaration":1603,"src":"305:22:6"},"id":1610,"nodeType":"InheritanceSpecifier","src":"305:22:6"}],"canonicalName":"ISwapRouter","contractDependencies":[],"contractKind":"interface","documentation":{"id":1608,"nodeType":"StructuredDocumentation","src":"176:104:6","text":"@title Router token swapping functionality\n @notice Functions for swapping tokens via Uniswap V3"},"fullyImplemented":false,"id":1703,"linearizedBaseContracts":[1703,1603],"name":"ISwapRouter","nameLocation":"290:11:6","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ISwapRouter.ExactInputSingleParams","id":1627,"members":[{"constant":false,"id":1612,"mutability":"mutable","name":"tokenIn","nameLocation":"382:7:6","nodeType":"VariableDeclaration","scope":1627,"src":"374:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1611,"name":"address","nodeType":"ElementaryTypeName","src":"374:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1614,"mutability":"mutable","name":"tokenOut","nameLocation":"407:8:6","nodeType":"VariableDeclaration","scope":1627,"src":"399:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1613,"name":"address","nodeType":"ElementaryTypeName","src":"399:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1616,"mutability":"mutable","name":"fee","nameLocation":"432:3:6","nodeType":"VariableDeclaration","scope":1627,"src":"425:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":1615,"name":"uint24","nodeType":"ElementaryTypeName","src":"425:6:6","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"},{"constant":false,"id":1618,"mutability":"mutable","name":"recipient","nameLocation":"453:9:6","nodeType":"VariableDeclaration","scope":1627,"src":"445:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1617,"name":"address","nodeType":"ElementaryTypeName","src":"445:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1620,"mutability":"mutable","name":"deadline","nameLocation":"480:8:6","nodeType":"VariableDeclaration","scope":1627,"src":"472:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1619,"name":"uint256","nodeType":"ElementaryTypeName","src":"472:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1622,"mutability":"mutable","name":"amountIn","nameLocation":"506:8:6","nodeType":"VariableDeclaration","scope":1627,"src":"498:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1621,"name":"uint256","nodeType":"ElementaryTypeName","src":"498:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1624,"mutability":"mutable","name":"amountOutMinimum","nameLocation":"532:16:6","nodeType":"VariableDeclaration","scope":1627,"src":"524:24:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1623,"name":"uint256","nodeType":"ElementaryTypeName","src":"524:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1626,"mutability":"mutable","name":"sqrtPriceLimitX96","nameLocation":"566:17:6","nodeType":"VariableDeclaration","scope":1627,"src":"558:25:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1625,"name":"uint160","nodeType":"ElementaryTypeName","src":"558:7:6","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"name":"ExactInputSingleParams","nameLocation":"341:22:6","nodeType":"StructDefinition","scope":1703,"src":"334:256:6","visibility":"public"},{"documentation":{"id":1628,"nodeType":"StructuredDocumentation","src":"596:250:6","text":"@notice Swaps `amountIn` of one token for as much as possible of another token\n @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n @return amountOut The amount of the received token"},"functionSelector":"414bf389","id":1636,"implemented":false,"kind":"function","modifiers":[],"name":"exactInputSingle","nameLocation":"860:16:6","nodeType":"FunctionDefinition","parameters":{"id":1632,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1631,"mutability":"mutable","name":"params","nameLocation":"909:6:6","nodeType":"VariableDeclaration","scope":1636,"src":"877:38:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputSingleParams_$1627_calldata_ptr","typeString":"struct ISwapRouter.ExactInputSingleParams"},"typeName":{"id":1630,"nodeType":"UserDefinedTypeName","pathNode":{"id":1629,"name":"ExactInputSingleParams","nameLocations":["877:22:6"],"nodeType":"IdentifierPath","referencedDeclaration":1627,"src":"877:22:6"},"referencedDeclaration":1627,"src":"877:22:6","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputSingleParams_$1627_storage_ptr","typeString":"struct ISwapRouter.ExactInputSingleParams"}},"visibility":"internal"}],"src":"876:40:6"},"returnParameters":{"id":1635,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1634,"mutability":"mutable","name":"amountOut","nameLocation":"951:9:6","nodeType":"VariableDeclaration","scope":1636,"src":"943:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1633,"name":"uint256","nodeType":"ElementaryTypeName","src":"943:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"942:19:6"},"scope":1703,"src":"851:111:6","stateMutability":"payable","virtual":false,"visibility":"external"},{"canonicalName":"ISwapRouter.ExactInputParams","id":1647,"members":[{"constant":false,"id":1638,"mutability":"mutable","name":"path","nameLocation":"1008:4:6","nodeType":"VariableDeclaration","scope":1647,"src":"1002:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":1637,"name":"bytes","nodeType":"ElementaryTypeName","src":"1002:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1640,"mutability":"mutable","name":"recipient","nameLocation":"1030:9:6","nodeType":"VariableDeclaration","scope":1647,"src":"1022:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1639,"name":"address","nodeType":"ElementaryTypeName","src":"1022:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1642,"mutability":"mutable","name":"deadline","nameLocation":"1057:8:6","nodeType":"VariableDeclaration","scope":1647,"src":"1049:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1641,"name":"uint256","nodeType":"ElementaryTypeName","src":"1049:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1644,"mutability":"mutable","name":"amountIn","nameLocation":"1083:8:6","nodeType":"VariableDeclaration","scope":1647,"src":"1075:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1643,"name":"uint256","nodeType":"ElementaryTypeName","src":"1075:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1646,"mutability":"mutable","name":"amountOutMinimum","nameLocation":"1109:16:6","nodeType":"VariableDeclaration","scope":1647,"src":"1101:24:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1645,"name":"uint256","nodeType":"ElementaryTypeName","src":"1101:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"ExactInputParams","nameLocation":"975:16:6","nodeType":"StructDefinition","scope":1703,"src":"968:164:6","visibility":"public"},{"documentation":{"id":1648,"nodeType":"StructuredDocumentation","src":"1138:273:6","text":"@notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n @return amountOut The amount of the received token"},"functionSelector":"c04b8d59","id":1656,"implemented":false,"kind":"function","modifiers":[],"name":"exactInput","nameLocation":"1425:10:6","nodeType":"FunctionDefinition","parameters":{"id":1652,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1651,"mutability":"mutable","name":"params","nameLocation":"1462:6:6","nodeType":"VariableDeclaration","scope":1656,"src":"1436:32:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputParams_$1647_calldata_ptr","typeString":"struct ISwapRouter.ExactInputParams"},"typeName":{"id":1650,"nodeType":"UserDefinedTypeName","pathNode":{"id":1649,"name":"ExactInputParams","nameLocations":["1436:16:6"],"nodeType":"IdentifierPath","referencedDeclaration":1647,"src":"1436:16:6"},"referencedDeclaration":1647,"src":"1436:16:6","typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputParams_$1647_storage_ptr","typeString":"struct ISwapRouter.ExactInputParams"}},"visibility":"internal"}],"src":"1435:34:6"},"returnParameters":{"id":1655,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1654,"mutability":"mutable","name":"amountOut","nameLocation":"1504:9:6","nodeType":"VariableDeclaration","scope":1656,"src":"1496:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1653,"name":"uint256","nodeType":"ElementaryTypeName","src":"1496:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1495:19:6"},"scope":1703,"src":"1416:99:6","stateMutability":"payable","virtual":false,"visibility":"external"},{"canonicalName":"ISwapRouter.ExactOutputSingleParams","id":1673,"members":[{"constant":false,"id":1658,"mutability":"mutable","name":"tokenIn","nameLocation":"1570:7:6","nodeType":"VariableDeclaration","scope":1673,"src":"1562:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1657,"name":"address","nodeType":"ElementaryTypeName","src":"1562:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1660,"mutability":"mutable","name":"tokenOut","nameLocation":"1595:8:6","nodeType":"VariableDeclaration","scope":1673,"src":"1587:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1659,"name":"address","nodeType":"ElementaryTypeName","src":"1587:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1662,"mutability":"mutable","name":"fee","nameLocation":"1620:3:6","nodeType":"VariableDeclaration","scope":1673,"src":"1613:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":1661,"name":"uint24","nodeType":"ElementaryTypeName","src":"1613:6:6","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"},{"constant":false,"id":1664,"mutability":"mutable","name":"recipient","nameLocation":"1641:9:6","nodeType":"VariableDeclaration","scope":1673,"src":"1633:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1663,"name":"address","nodeType":"ElementaryTypeName","src":"1633:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1666,"mutability":"mutable","name":"deadline","nameLocation":"1668:8:6","nodeType":"VariableDeclaration","scope":1673,"src":"1660:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1665,"name":"uint256","nodeType":"ElementaryTypeName","src":"1660:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1668,"mutability":"mutable","name":"amountOut","nameLocation":"1694:9:6","nodeType":"VariableDeclaration","scope":1673,"src":"1686:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1667,"name":"uint256","nodeType":"ElementaryTypeName","src":"1686:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1670,"mutability":"mutable","name":"amountInMaximum","nameLocation":"1721:15:6","nodeType":"VariableDeclaration","scope":1673,"src":"1713:23:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1669,"name":"uint256","nodeType":"ElementaryTypeName","src":"1713:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1672,"mutability":"mutable","name":"sqrtPriceLimitX96","nameLocation":"1754:17:6","nodeType":"VariableDeclaration","scope":1673,"src":"1746:25:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"},"typeName":{"id":1671,"name":"uint160","nodeType":"ElementaryTypeName","src":"1746:7:6","typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"visibility":"internal"}],"name":"ExactOutputSingleParams","nameLocation":"1528:23:6","nodeType":"StructDefinition","scope":1703,"src":"1521:257:6","visibility":"public"},{"documentation":{"id":1674,"nodeType":"StructuredDocumentation","src":"1784:250:6","text":"@notice Swaps as little as possible of one token for `amountOut` of another token\n @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n @return amountIn The amount of the input token"},"functionSelector":"db3e2198","id":1682,"implemented":false,"kind":"function","modifiers":[],"name":"exactOutputSingle","nameLocation":"2048:17:6","nodeType":"FunctionDefinition","parameters":{"id":1678,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1677,"mutability":"mutable","name":"params","nameLocation":"2099:6:6","nodeType":"VariableDeclaration","scope":1682,"src":"2066:39:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_ExactOutputSingleParams_$1673_calldata_ptr","typeString":"struct ISwapRouter.ExactOutputSingleParams"},"typeName":{"id":1676,"nodeType":"UserDefinedTypeName","pathNode":{"id":1675,"name":"ExactOutputSingleParams","nameLocations":["2066:23:6"],"nodeType":"IdentifierPath","referencedDeclaration":1673,"src":"2066:23:6"},"referencedDeclaration":1673,"src":"2066:23:6","typeDescriptions":{"typeIdentifier":"t_struct$_ExactOutputSingleParams_$1673_storage_ptr","typeString":"struct ISwapRouter.ExactOutputSingleParams"}},"visibility":"internal"}],"src":"2065:41:6"},"returnParameters":{"id":1681,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1680,"mutability":"mutable","name":"amountIn","nameLocation":"2141:8:6","nodeType":"VariableDeclaration","scope":1682,"src":"2133:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1679,"name":"uint256","nodeType":"ElementaryTypeName","src":"2133:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2132:18:6"},"scope":1703,"src":"2039:112:6","stateMutability":"payable","virtual":false,"visibility":"external"},{"canonicalName":"ISwapRouter.ExactOutputParams","id":1693,"members":[{"constant":false,"id":1684,"mutability":"mutable","name":"path","nameLocation":"2198:4:6","nodeType":"VariableDeclaration","scope":1693,"src":"2192:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":1683,"name":"bytes","nodeType":"ElementaryTypeName","src":"2192:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1686,"mutability":"mutable","name":"recipient","nameLocation":"2220:9:6","nodeType":"VariableDeclaration","scope":1693,"src":"2212:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1685,"name":"address","nodeType":"ElementaryTypeName","src":"2212:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1688,"mutability":"mutable","name":"deadline","nameLocation":"2247:8:6","nodeType":"VariableDeclaration","scope":1693,"src":"2239:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1687,"name":"uint256","nodeType":"ElementaryTypeName","src":"2239:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1690,"mutability":"mutable","name":"amountOut","nameLocation":"2273:9:6","nodeType":"VariableDeclaration","scope":1693,"src":"2265:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1689,"name":"uint256","nodeType":"ElementaryTypeName","src":"2265:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1692,"mutability":"mutable","name":"amountInMaximum","nameLocation":"2300:15:6","nodeType":"VariableDeclaration","scope":1693,"src":"2292:23:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1691,"name":"uint256","nodeType":"ElementaryTypeName","src":"2292:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"ExactOutputParams","nameLocation":"2164:17:6","nodeType":"StructDefinition","scope":1703,"src":"2157:165:6","visibility":"public"},{"documentation":{"id":1694,"nodeType":"StructuredDocumentation","src":"2328:284:6","text":"@notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n @return amountIn The amount of the input token"},"functionSelector":"f28c0498","id":1702,"implemented":false,"kind":"function","modifiers":[],"name":"exactOutput","nameLocation":"2626:11:6","nodeType":"FunctionDefinition","parameters":{"id":1698,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1697,"mutability":"mutable","name":"params","nameLocation":"2665:6:6","nodeType":"VariableDeclaration","scope":1702,"src":"2638:33:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_ExactOutputParams_$1693_calldata_ptr","typeString":"struct ISwapRouter.ExactOutputParams"},"typeName":{"id":1696,"nodeType":"UserDefinedTypeName","pathNode":{"id":1695,"name":"ExactOutputParams","nameLocations":["2638:17:6"],"nodeType":"IdentifierPath","referencedDeclaration":1693,"src":"2638:17:6"},"referencedDeclaration":1693,"src":"2638:17:6","typeDescriptions":{"typeIdentifier":"t_struct$_ExactOutputParams_$1693_storage_ptr","typeString":"struct ISwapRouter.ExactOutputParams"}},"visibility":"internal"}],"src":"2637:35:6"},"returnParameters":{"id":1701,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1700,"mutability":"mutable","name":"amountIn","nameLocation":"2707:8:6","nodeType":"VariableDeclaration","scope":1702,"src":"2699:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1699,"name":"uint256","nodeType":"ElementaryTypeName","src":"2699:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2698:18:6"},"scope":1703,"src":"2617:100:6","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":1704,"src":"280:2439:6","usedErrors":[]}],"src":"45:2675:6"},"id":6},"contracts/features/MecenateFeed.sol":{"ast":{"absolutePath":"contracts/features/MecenateFeed.sol","exportedSymbols":{"Acceptance":[2856],"Attestation":[1799],"AttestationRequest":[1841],"AttestationRequestData":[1835],"BurnDAI":[3202],"BurnMUSE":[3293],"Creation":[3507],"Data":[3857],"DelegatedAttestationRequest":[1854],"DelegatedRevocationRequest":[1900],"Deposit":[4049],"Events":[4090],"Finalization":[4489],"IEAS":[2108],"IERC20":[77],"IMUSE":[2246],"IMecenateFeed":[2341],"IMecenateFeedFactory":[2419],"IMecenateTreasury":[2432],"IMecenateUsers":[2490],"ISchemaRegistry":[2156],"ISwapRouter":[1703],"IUniswapV3SwapCallback":[1603],"IWETH":[2510],"MecenateFeed":[1751],"MultiAttestationRequest":[1861],"MultiDelegatedAttestationRequest":[1876],"MultiDelegatedRevocationRequest":[1922],"MultiRevocationRequest":[1907],"Renounce":[4588],"RevocationRequest":[1887],"RevocationRequestData":[1881],"SafeMath":[1484],"Signature":[1778],"Staking":[5316],"Strings":[306],"Structures":[2671],"Submission":[5537],"TokenManager":[6040],"Version":[6130]},"id":1752,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1705,"literals":["solidity","^","0.8",".9"],"nodeType":"PragmaDirective","src":"542:23:7"},{"absolutePath":"contracts/modules/Events.sol","file":"../modules/Events.sol","id":1706,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1752,"sourceUnit":4091,"src":"567:31:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/modules/Creation.sol","file":"../modules/Creation.sol","id":1707,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1752,"sourceUnit":3508,"src":"599:33:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/modules/Acceptance.sol","file":"../modules/Acceptance.sol","id":1708,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1752,"sourceUnit":2857,"src":"633:35:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/modules/Submission.sol","file":"../modules/Submission.sol","id":1709,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1752,"sourceUnit":5538,"src":"669:35:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/modules/Finalization.sol","file":"../modules/Finalization.sol","id":1710,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1752,"sourceUnit":4490,"src":"705:37:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/modules/Renounce.sol","file":"../modules/Renounce.sol","id":1711,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1752,"sourceUnit":4589,"src":"743:33:7","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1712,"name":"Events","nameLocations":["807:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":4090,"src":"807:6:7"},"id":1713,"nodeType":"InheritanceSpecifier","src":"807:6:7"},{"baseName":{"id":1714,"name":"Creation","nameLocations":["819:8:7"],"nodeType":"IdentifierPath","referencedDeclaration":3507,"src":"819:8:7"},"id":1715,"nodeType":"InheritanceSpecifier","src":"819:8:7"},{"baseName":{"id":1716,"name":"Acceptance","nameLocations":["833:10:7"],"nodeType":"IdentifierPath","referencedDeclaration":2856,"src":"833:10:7"},"id":1717,"nodeType":"InheritanceSpecifier","src":"833:10:7"},{"baseName":{"id":1718,"name":"Renounce","nameLocations":["849:8:7"],"nodeType":"IdentifierPath","referencedDeclaration":4588,"src":"849:8:7"},"id":1719,"nodeType":"InheritanceSpecifier","src":"849:8:7"},{"baseName":{"id":1720,"name":"Submission","nameLocations":["863:10:7"],"nodeType":"IdentifierPath","referencedDeclaration":5537,"src":"863:10:7"},"id":1721,"nodeType":"InheritanceSpecifier","src":"863:10:7"},{"baseName":{"id":1722,"name":"Finalization","nameLocations":["879:12:7"],"nodeType":"IdentifierPath","referencedDeclaration":4489,"src":"879:12:7"},"id":1723,"nodeType":"InheritanceSpecifier","src":"879:12:7"}],"canonicalName":"MecenateFeed","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":1751,"linearizedBaseContracts":[1751,4489,5537,4588,2856,3507,5316,6040,3202,3293,4049,4090,3857,6130],"name":"MecenateFeed","nameLocation":"787:12:7","nodeType":"ContractDefinition","nodes":[{"body":{"id":1749,"nodeType":"Block","src":"1153:31:7","statements":[{"expression":{"id":1747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1745,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3523,"src":"1163:5:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1746,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1725,"src":"1171:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1163:14:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1748,"nodeType":"ExpressionStatement","src":"1163:14:7"}]},"id":1750,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":1738,"name":"_usersModuleContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1727,"src":"1089:20:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1739,"name":"_factoryContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1729,"src":"1111:16:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1740,"name":"_major","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1731,"src":"1129:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1741,"name":"_minor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1733,"src":"1137:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1742,"name":"_patch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1735,"src":"1145:6:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1743,"kind":"baseConstructorSpecifier","modifierName":{"id":1737,"name":"Data","nameLocations":["1084:4:7"],"nodeType":"IdentifierPath","referencedDeclaration":3857,"src":"1084:4:7"},"nodeType":"ModifierInvocation","src":"1084:68:7"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1736,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1725,"mutability":"mutable","name":"_owner","nameLocation":"927:6:7","nodeType":"VariableDeclaration","scope":1750,"src":"919:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1724,"name":"address","nodeType":"ElementaryTypeName","src":"919:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1727,"mutability":"mutable","name":"_usersModuleContract","nameLocation":"951:20:7","nodeType":"VariableDeclaration","scope":1750,"src":"943:28:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1726,"name":"address","nodeType":"ElementaryTypeName","src":"943:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1729,"mutability":"mutable","name":"_factoryContract","nameLocation":"989:16:7","nodeType":"VariableDeclaration","scope":1750,"src":"981:24:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1728,"name":"address","nodeType":"ElementaryTypeName","src":"981:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1731,"mutability":"mutable","name":"_major","nameLocation":"1023:6:7","nodeType":"VariableDeclaration","scope":1750,"src":"1015:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1730,"name":"uint256","nodeType":"ElementaryTypeName","src":"1015:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1733,"mutability":"mutable","name":"_minor","nameLocation":"1047:6:7","nodeType":"VariableDeclaration","scope":1750,"src":"1039:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1732,"name":"uint256","nodeType":"ElementaryTypeName","src":"1039:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1735,"mutability":"mutable","name":"_patch","nameLocation":"1071:6:7","nodeType":"VariableDeclaration","scope":1750,"src":"1063:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1734,"name":"uint256","nodeType":"ElementaryTypeName","src":"1063:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"909:174:7"},"returnParameters":{"id":1744,"nodeType":"ParameterList","parameters":[],"src":"1153:0:7"},"scope":1751,"src":"898:286:7","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":1752,"src":"778:408:7","usedErrors":[]}],"src":"542:645:7"},"id":7},"contracts/helpers/eas/Common.sol":{"ast":{"absolutePath":"contracts/helpers/eas/Common.sol","exportedSymbols":{"AccessDenied":[1761],"Attestation":[1799],"DeadlineExpired":[1763],"EMPTY_UID":[1756],"InvalidEAS":[1765],"InvalidLength":[1767],"InvalidSignature":[1769],"NO_EXPIRATION_TIME":[1759],"NotFound":[1771],"Signature":[1778],"uncheckedInc":[1815]},"id":1816,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1753,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:8"},{"constant":true,"id":1756,"mutability":"constant","name":"EMPTY_UID","nameLocation":"126:9:8","nodeType":"VariableDeclaration","scope":1816,"src":"109:30:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1754,"name":"bytes32","nodeType":"ElementaryTypeName","src":"109:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"30","id":1755,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"138:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"visibility":"internal"},{"constant":true,"id":1759,"mutability":"constant","name":"NO_EXPIRATION_TIME","nameLocation":"219:18:8","nodeType":"VariableDeclaration","scope":1816,"src":"203:38:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1757,"name":"uint64","nodeType":"ElementaryTypeName","src":"203:6:8","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"value":{"hexValue":"30","id":1758,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"240:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"visibility":"internal"},{"errorSelector":"4ca88867","id":1761,"name":"AccessDenied","nameLocation":"250:12:8","nodeType":"ErrorDefinition","parameters":{"id":1760,"nodeType":"ParameterList","parameters":[],"src":"262:2:8"},"src":"244:21:8"},{"errorSelector":"1ab7da6b","id":1763,"name":"DeadlineExpired","nameLocation":"272:15:8","nodeType":"ErrorDefinition","parameters":{"id":1762,"nodeType":"ParameterList","parameters":[],"src":"287:2:8"},"src":"266:24:8"},{"errorSelector":"83780ffe","id":1765,"name":"InvalidEAS","nameLocation":"297:10:8","nodeType":"ErrorDefinition","parameters":{"id":1764,"nodeType":"ParameterList","parameters":[],"src":"307:2:8"},"src":"291:19:8"},{"errorSelector":"947d5a84","id":1767,"name":"InvalidLength","nameLocation":"317:13:8","nodeType":"ErrorDefinition","parameters":{"id":1766,"nodeType":"ParameterList","parameters":[],"src":"330:2:8"},"src":"311:22:8"},{"errorSelector":"8baa579f","id":1769,"name":"InvalidSignature","nameLocation":"340:16:8","nodeType":"ErrorDefinition","parameters":{"id":1768,"nodeType":"ParameterList","parameters":[],"src":"356:2:8"},"src":"334:25:8"},{"errorSelector":"c5723b51","id":1771,"name":"NotFound","nameLocation":"366:8:8","nodeType":"ErrorDefinition","parameters":{"id":1770,"nodeType":"ParameterList","parameters":[],"src":"374:2:8"},"src":"360:17:8"},{"canonicalName":"Signature","id":1778,"members":[{"constant":false,"id":1773,"mutability":"mutable","name":"v","nameLocation":"464:1:8","nodeType":"VariableDeclaration","scope":1778,"src":"458:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1772,"name":"uint8","nodeType":"ElementaryTypeName","src":"458:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1775,"mutability":"mutable","name":"r","nameLocation":"499:1:8","nodeType":"VariableDeclaration","scope":1778,"src":"491:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1774,"name":"bytes32","nodeType":"ElementaryTypeName","src":"491:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1777,"mutability":"mutable","name":"s","nameLocation":"550:1:8","nodeType":"VariableDeclaration","scope":1778,"src":"542:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1776,"name":"bytes32","nodeType":"ElementaryTypeName","src":"542:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Signature","nameLocation":"442:9:8","nodeType":"StructDefinition","scope":1816,"src":"435:142:8","visibility":"public"},{"canonicalName":"Attestation","id":1799,"members":[{"constant":false,"id":1780,"mutability":"mutable","name":"uid","nameLocation":"668:3:8","nodeType":"VariableDeclaration","scope":1799,"src":"660:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1779,"name":"bytes32","nodeType":"ElementaryTypeName","src":"660:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1782,"mutability":"mutable","name":"schema","nameLocation":"728:6:8","nodeType":"VariableDeclaration","scope":1799,"src":"720:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1781,"name":"bytes32","nodeType":"ElementaryTypeName","src":"720:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1784,"mutability":"mutable","name":"time","nameLocation":"787:4:8","nodeType":"VariableDeclaration","scope":1799,"src":"780:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1783,"name":"uint64","nodeType":"ElementaryTypeName","src":"780:6:8","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1786,"mutability":"mutable","name":"expirationTime","nameLocation":"867:14:8","nodeType":"VariableDeclaration","scope":1799,"src":"860:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1785,"name":"uint64","nodeType":"ElementaryTypeName","src":"860:6:8","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1788,"mutability":"mutable","name":"revocationTime","nameLocation":"953:14:8","nodeType":"VariableDeclaration","scope":1799,"src":"946:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1787,"name":"uint64","nodeType":"ElementaryTypeName","src":"946:6:8","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1790,"mutability":"mutable","name":"refUID","nameLocation":"1044:6:8","nodeType":"VariableDeclaration","scope":1799,"src":"1036:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1789,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1036:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1792,"mutability":"mutable","name":"recipient","nameLocation":"1103:9:8","nodeType":"VariableDeclaration","scope":1799,"src":"1095:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1791,"name":"address","nodeType":"ElementaryTypeName","src":"1095:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1794,"mutability":"mutable","name":"attester","nameLocation":"1163:8:8","nodeType":"VariableDeclaration","scope":1799,"src":"1155:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1793,"name":"address","nodeType":"ElementaryTypeName","src":"1155:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1796,"mutability":"mutable","name":"revocable","nameLocation":"1225:9:8","nodeType":"VariableDeclaration","scope":1799,"src":"1220:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1795,"name":"bool","nodeType":"ElementaryTypeName","src":"1220:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1798,"mutability":"mutable","name":"data","nameLocation":"1287:4:8","nodeType":"VariableDeclaration","scope":1799,"src":"1281:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":1797,"name":"bytes","nodeType":"ElementaryTypeName","src":"1281:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"Attestation","nameLocation":"642:11:8","nodeType":"StructDefinition","scope":1816,"src":"635:687:8","visibility":"public"},{"body":{"id":1814,"nodeType":"Block","src":"1455:44:8","statements":[{"id":1813,"nodeType":"UncheckedBlock","src":"1461:36:8","statements":[{"expression":{"id":1811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1807,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1805,"src":"1481:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1808,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1802,"src":"1485:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1809,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1489:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1485:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1481:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1812,"nodeType":"ExpressionStatement","src":"1481:9:8"}]}]},"documentation":{"id":1800,"nodeType":"StructuredDocumentation","src":"1324:73:8","text":"@notice A helper function to work with unchecked iterators in loops."},"id":1815,"implemented":true,"kind":"freeFunction","modifiers":[],"name":"uncheckedInc","nameLocation":"1406:12:8","nodeType":"FunctionDefinition","parameters":{"id":1803,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1802,"mutability":"mutable","name":"i","nameLocation":"1427:1:8","nodeType":"VariableDeclaration","scope":1815,"src":"1419:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1801,"name":"uint256","nodeType":"ElementaryTypeName","src":"1419:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1418:11:8"},"returnParameters":{"id":1806,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1805,"mutability":"mutable","name":"j","nameLocation":"1452:1:8","nodeType":"VariableDeclaration","scope":1815,"src":"1444:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1804,"name":"uint256","nodeType":"ElementaryTypeName","src":"1444:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1443:11:8"},"scope":1816,"src":"1397:102:8","stateMutability":"pure","virtual":false,"visibility":"internal"}],"src":"33:1467:8"},"id":8},"contracts/helpers/eas/IEAS.sol":{"ast":{"absolutePath":"contracts/helpers/eas/IEAS.sol","exportedSymbols":{"Attestation":[1799],"AttestationRequest":[1841],"AttestationRequestData":[1835],"DelegatedAttestationRequest":[1854],"DelegatedRevocationRequest":[1900],"IEAS":[2108],"ISchemaRegistry":[2156],"MultiAttestationRequest":[1861],"MultiDelegatedAttestationRequest":[1876],"MultiDelegatedRevocationRequest":[1922],"MultiRevocationRequest":[1907],"RevocationRequest":[1887],"RevocationRequestData":[1881],"Signature":[1778]},"id":2109,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1817,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:9"},{"absolutePath":"contracts/helpers/eas/ISchemaRegistry.sol","file":"./ISchemaRegistry.sol","id":1819,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2109,"sourceUnit":2157,"src":"58:54:9","symbolAliases":[{"foreign":{"id":1818,"name":"ISchemaRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2156,"src":"66:15:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/helpers/eas/Common.sol","file":"./Common.sol","id":1822,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2109,"sourceUnit":1816,"src":"113:52:9","symbolAliases":[{"foreign":{"id":1820,"name":"Attestation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1799,"src":"121:11:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1821,"name":"Signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1778,"src":"134:9:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"canonicalName":"AttestationRequestData","id":1835,"members":[{"constant":false,"id":1824,"mutability":"mutable","name":"recipient","nameLocation":"287:9:9","nodeType":"VariableDeclaration","scope":1835,"src":"279:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1823,"name":"address","nodeType":"ElementaryTypeName","src":"279:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1826,"mutability":"mutable","name":"expirationTime","nameLocation":"346:14:9","nodeType":"VariableDeclaration","scope":1835,"src":"339:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1825,"name":"uint64","nodeType":"ElementaryTypeName","src":"339:6:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":1828,"mutability":"mutable","name":"revocable","nameLocation":"430:9:9","nodeType":"VariableDeclaration","scope":1835,"src":"425:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1827,"name":"bool","nodeType":"ElementaryTypeName","src":"425:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1830,"mutability":"mutable","name":"refUID","nameLocation":"494:6:9","nodeType":"VariableDeclaration","scope":1835,"src":"486:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1829,"name":"bytes32","nodeType":"ElementaryTypeName","src":"486:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1832,"mutability":"mutable","name":"data","nameLocation":"551:4:9","nodeType":"VariableDeclaration","scope":1835,"src":"545:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":1831,"name":"bytes","nodeType":"ElementaryTypeName","src":"545:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1834,"mutability":"mutable","name":"value","nameLocation":"597:5:9","nodeType":"VariableDeclaration","scope":1835,"src":"589:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1833,"name":"uint256","nodeType":"ElementaryTypeName","src":"589:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"AttestationRequestData","nameLocation":"250:22:9","nodeType":"StructDefinition","scope":2109,"src":"243:466:9","visibility":"public"},{"canonicalName":"AttestationRequest","id":1841,"members":[{"constant":false,"id":1837,"mutability":"mutable","name":"schema","nameLocation":"832:6:9","nodeType":"VariableDeclaration","scope":1841,"src":"824:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1836,"name":"bytes32","nodeType":"ElementaryTypeName","src":"824:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1840,"mutability":"mutable","name":"data","nameLocation":"907:4:9","nodeType":"VariableDeclaration","scope":1841,"src":"884:27:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$1835_storage_ptr","typeString":"struct AttestationRequestData"},"typeName":{"id":1839,"nodeType":"UserDefinedTypeName","pathNode":{"id":1838,"name":"AttestationRequestData","nameLocations":["884:22:9"],"nodeType":"IdentifierPath","referencedDeclaration":1835,"src":"884:22:9"},"referencedDeclaration":1835,"src":"884:22:9","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$1835_storage_ptr","typeString":"struct AttestationRequestData"}},"visibility":"internal"}],"name":"AttestationRequest","nameLocation":"799:18:9","nodeType":"StructDefinition","scope":2109,"src":"792:167:9","visibility":"public"},{"canonicalName":"DelegatedAttestationRequest","id":1854,"members":[{"constant":false,"id":1843,"mutability":"mutable","name":"schema","nameLocation":"1106:6:9","nodeType":"VariableDeclaration","scope":1854,"src":"1098:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1842,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1098:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1846,"mutability":"mutable","name":"data","nameLocation":"1181:4:9","nodeType":"VariableDeclaration","scope":1854,"src":"1158:27:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$1835_storage_ptr","typeString":"struct AttestationRequestData"},"typeName":{"id":1845,"nodeType":"UserDefinedTypeName","pathNode":{"id":1844,"name":"AttestationRequestData","nameLocations":["1158:22:9"],"nodeType":"IdentifierPath","referencedDeclaration":1835,"src":"1158:22:9"},"referencedDeclaration":1835,"src":"1158:22:9","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$1835_storage_ptr","typeString":"struct AttestationRequestData"}},"visibility":"internal"},{"constant":false,"id":1849,"mutability":"mutable","name":"signature","nameLocation":"1246:9:9","nodeType":"VariableDeclaration","scope":1854,"src":"1236:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Signature_$1778_storage_ptr","typeString":"struct Signature"},"typeName":{"id":1848,"nodeType":"UserDefinedTypeName","pathNode":{"id":1847,"name":"Signature","nameLocations":["1236:9:9"],"nodeType":"IdentifierPath","referencedDeclaration":1778,"src":"1236:9:9"},"referencedDeclaration":1778,"src":"1236:9:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signature_$1778_storage_ptr","typeString":"struct Signature"}},"visibility":"internal"},{"constant":false,"id":1851,"mutability":"mutable","name":"attester","nameLocation":"1298:8:9","nodeType":"VariableDeclaration","scope":1854,"src":"1290:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1850,"name":"address","nodeType":"ElementaryTypeName","src":"1290:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1853,"mutability":"mutable","name":"deadline","nameLocation":"1345:8:9","nodeType":"VariableDeclaration","scope":1854,"src":"1338:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1852,"name":"uint64","nodeType":"ElementaryTypeName","src":"1338:6:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"name":"DelegatedAttestationRequest","nameLocation":"1064:27:9","nodeType":"StructDefinition","scope":2109,"src":"1057:341:9","visibility":"public"},{"canonicalName":"MultiAttestationRequest","id":1861,"members":[{"constant":false,"id":1856,"mutability":"mutable","name":"schema","nameLocation":"1532:6:9","nodeType":"VariableDeclaration","scope":1861,"src":"1524:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1855,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1524:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1860,"mutability":"mutable","name":"data","nameLocation":"1609:4:9","nodeType":"VariableDeclaration","scope":1861,"src":"1584:29:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestData_$1835_storage_$dyn_storage_ptr","typeString":"struct AttestationRequestData[]"},"typeName":{"baseType":{"id":1858,"nodeType":"UserDefinedTypeName","pathNode":{"id":1857,"name":"AttestationRequestData","nameLocations":["1584:22:9"],"nodeType":"IdentifierPath","referencedDeclaration":1835,"src":"1584:22:9"},"referencedDeclaration":1835,"src":"1584:22:9","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$1835_storage_ptr","typeString":"struct AttestationRequestData"}},"id":1859,"nodeType":"ArrayTypeName","src":"1584:24:9","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestData_$1835_storage_$dyn_storage_ptr","typeString":"struct AttestationRequestData[]"}},"visibility":"internal"}],"name":"MultiAttestationRequest","nameLocation":"1494:23:9","nodeType":"StructDefinition","scope":2109,"src":"1487:174:9","visibility":"public"},{"canonicalName":"MultiDelegatedAttestationRequest","id":1876,"members":[{"constant":false,"id":1863,"mutability":"mutable","name":"schema","nameLocation":"1814:6:9","nodeType":"VariableDeclaration","scope":1876,"src":"1806:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1862,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1806:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1867,"mutability":"mutable","name":"data","nameLocation":"1891:4:9","nodeType":"VariableDeclaration","scope":1876,"src":"1866:29:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestData_$1835_storage_$dyn_storage_ptr","typeString":"struct AttestationRequestData[]"},"typeName":{"baseType":{"id":1865,"nodeType":"UserDefinedTypeName","pathNode":{"id":1864,"name":"AttestationRequestData","nameLocations":["1866:22:9"],"nodeType":"IdentifierPath","referencedDeclaration":1835,"src":"1866:22:9"},"referencedDeclaration":1835,"src":"1866:22:9","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequestData_$1835_storage_ptr","typeString":"struct AttestationRequestData"}},"id":1866,"nodeType":"ArrayTypeName","src":"1866:24:9","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationRequestData_$1835_storage_$dyn_storage_ptr","typeString":"struct AttestationRequestData[]"}},"visibility":"internal"},{"constant":false,"id":1871,"mutability":"mutable","name":"signatures","nameLocation":"1959:10:9","nodeType":"VariableDeclaration","scope":1876,"src":"1947:22:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Signature_$1778_storage_$dyn_storage_ptr","typeString":"struct Signature[]"},"typeName":{"baseType":{"id":1869,"nodeType":"UserDefinedTypeName","pathNode":{"id":1868,"name":"Signature","nameLocations":["1947:9:9"],"nodeType":"IdentifierPath","referencedDeclaration":1778,"src":"1947:9:9"},"referencedDeclaration":1778,"src":"1947:9:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signature_$1778_storage_ptr","typeString":"struct Signature"}},"id":1870,"nodeType":"ArrayTypeName","src":"1947:11:9","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Signature_$1778_storage_$dyn_storage_ptr","typeString":"struct Signature[]"}},"visibility":"internal"},{"constant":false,"id":1873,"mutability":"mutable","name":"attester","nameLocation":"2094:8:9","nodeType":"VariableDeclaration","scope":1876,"src":"2086:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1872,"name":"address","nodeType":"ElementaryTypeName","src":"2086:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1875,"mutability":"mutable","name":"deadline","nameLocation":"2141:8:9","nodeType":"VariableDeclaration","scope":1876,"src":"2134:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1874,"name":"uint64","nodeType":"ElementaryTypeName","src":"2134:6:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"name":"MultiDelegatedAttestationRequest","nameLocation":"1767:32:9","nodeType":"StructDefinition","scope":2109,"src":"1760:434:9","visibility":"public"},{"canonicalName":"RevocationRequestData","id":1881,"members":[{"constant":false,"id":1878,"mutability":"mutable","name":"uid","nameLocation":"2314:3:9","nodeType":"VariableDeclaration","scope":1881,"src":"2306:11:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1877,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2306:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1880,"mutability":"mutable","name":"value","nameLocation":"2372:5:9","nodeType":"VariableDeclaration","scope":1881,"src":"2364:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1879,"name":"uint256","nodeType":"ElementaryTypeName","src":"2364:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"RevocationRequestData","nameLocation":"2278:21:9","nodeType":"StructDefinition","scope":2109,"src":"2271:213:9","visibility":"public"},{"canonicalName":"RevocationRequest","id":1887,"members":[{"constant":false,"id":1883,"mutability":"mutable","name":"schema","nameLocation":"2605:6:9","nodeType":"VariableDeclaration","scope":1887,"src":"2597:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1882,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2597:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1886,"mutability":"mutable","name":"data","nameLocation":"2679:4:9","nodeType":"VariableDeclaration","scope":1887,"src":"2657:26:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_RevocationRequestData_$1881_storage_ptr","typeString":"struct RevocationRequestData"},"typeName":{"id":1885,"nodeType":"UserDefinedTypeName","pathNode":{"id":1884,"name":"RevocationRequestData","nameLocations":["2657:21:9"],"nodeType":"IdentifierPath","referencedDeclaration":1881,"src":"2657:21:9"},"referencedDeclaration":1881,"src":"2657:21:9","typeDescriptions":{"typeIdentifier":"t_struct$_RevocationRequestData_$1881_storage_ptr","typeString":"struct RevocationRequestData"}},"visibility":"internal"}],"name":"RevocationRequest","nameLocation":"2573:17:9","nodeType":"StructDefinition","scope":2109,"src":"2566:164:9","visibility":"public"},{"canonicalName":"DelegatedRevocationRequest","id":1900,"members":[{"constant":false,"id":1889,"mutability":"mutable","name":"schema","nameLocation":"2870:6:9","nodeType":"VariableDeclaration","scope":1900,"src":"2862:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1888,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2862:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1892,"mutability":"mutable","name":"data","nameLocation":"2944:4:9","nodeType":"VariableDeclaration","scope":1900,"src":"2922:26:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_RevocationRequestData_$1881_storage_ptr","typeString":"struct RevocationRequestData"},"typeName":{"id":1891,"nodeType":"UserDefinedTypeName","pathNode":{"id":1890,"name":"RevocationRequestData","nameLocations":["2922:21:9"],"nodeType":"IdentifierPath","referencedDeclaration":1881,"src":"2922:21:9"},"referencedDeclaration":1881,"src":"2922:21:9","typeDescriptions":{"typeIdentifier":"t_struct$_RevocationRequestData_$1881_storage_ptr","typeString":"struct RevocationRequestData"}},"visibility":"internal"},{"constant":false,"id":1895,"mutability":"mutable","name":"signature","nameLocation":"3008:9:9","nodeType":"VariableDeclaration","scope":1900,"src":"2998:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Signature_$1778_storage_ptr","typeString":"struct Signature"},"typeName":{"id":1894,"nodeType":"UserDefinedTypeName","pathNode":{"id":1893,"name":"Signature","nameLocations":["2998:9:9"],"nodeType":"IdentifierPath","referencedDeclaration":1778,"src":"2998:9:9"},"referencedDeclaration":1778,"src":"2998:9:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signature_$1778_storage_ptr","typeString":"struct Signature"}},"visibility":"internal"},{"constant":false,"id":1897,"mutability":"mutable","name":"revoker","nameLocation":"3060:7:9","nodeType":"VariableDeclaration","scope":1900,"src":"3052:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1896,"name":"address","nodeType":"ElementaryTypeName","src":"3052:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1899,"mutability":"mutable","name":"deadline","nameLocation":"3105:8:9","nodeType":"VariableDeclaration","scope":1900,"src":"3098:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1898,"name":"uint64","nodeType":"ElementaryTypeName","src":"3098:6:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"name":"DelegatedRevocationRequest","nameLocation":"2829:26:9","nodeType":"StructDefinition","scope":2109,"src":"2822:336:9","visibility":"public"},{"canonicalName":"MultiRevocationRequest","id":1907,"members":[{"constant":false,"id":1902,"mutability":"mutable","name":"schema","nameLocation":"3290:6:9","nodeType":"VariableDeclaration","scope":1907,"src":"3282:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1901,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3282:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1906,"mutability":"mutable","name":"data","nameLocation":"3366:4:9","nodeType":"VariableDeclaration","scope":1907,"src":"3342:28:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RevocationRequestData_$1881_storage_$dyn_storage_ptr","typeString":"struct RevocationRequestData[]"},"typeName":{"baseType":{"id":1904,"nodeType":"UserDefinedTypeName","pathNode":{"id":1903,"name":"RevocationRequestData","nameLocations":["3342:21:9"],"nodeType":"IdentifierPath","referencedDeclaration":1881,"src":"3342:21:9"},"referencedDeclaration":1881,"src":"3342:21:9","typeDescriptions":{"typeIdentifier":"t_struct$_RevocationRequestData_$1881_storage_ptr","typeString":"struct RevocationRequestData"}},"id":1905,"nodeType":"ArrayTypeName","src":"3342:23:9","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RevocationRequestData_$1881_storage_$dyn_storage_ptr","typeString":"struct RevocationRequestData[]"}},"visibility":"internal"}],"name":"MultiRevocationRequest","nameLocation":"3253:22:9","nodeType":"StructDefinition","scope":2109,"src":"3246:171:9","visibility":"public"},{"canonicalName":"MultiDelegatedRevocationRequest","id":1922,"members":[{"constant":false,"id":1909,"mutability":"mutable","name":"schema","nameLocation":"3568:6:9","nodeType":"VariableDeclaration","scope":1922,"src":"3560:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1908,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3560:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1913,"mutability":"mutable","name":"data","nameLocation":"3644:4:9","nodeType":"VariableDeclaration","scope":1922,"src":"3620:28:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RevocationRequestData_$1881_storage_$dyn_storage_ptr","typeString":"struct RevocationRequestData[]"},"typeName":{"baseType":{"id":1911,"nodeType":"UserDefinedTypeName","pathNode":{"id":1910,"name":"RevocationRequestData","nameLocations":["3620:21:9"],"nodeType":"IdentifierPath","referencedDeclaration":1881,"src":"3620:21:9"},"referencedDeclaration":1881,"src":"3620:21:9","typeDescriptions":{"typeIdentifier":"t_struct$_RevocationRequestData_$1881_storage_ptr","typeString":"struct RevocationRequestData"}},"id":1912,"nodeType":"ArrayTypeName","src":"3620:23:9","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_RevocationRequestData_$1881_storage_$dyn_storage_ptr","typeString":"struct RevocationRequestData[]"}},"visibility":"internal"},{"constant":false,"id":1917,"mutability":"mutable","name":"signatures","nameLocation":"3711:10:9","nodeType":"VariableDeclaration","scope":1922,"src":"3699:22:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Signature_$1778_storage_$dyn_storage_ptr","typeString":"struct Signature[]"},"typeName":{"baseType":{"id":1915,"nodeType":"UserDefinedTypeName","pathNode":{"id":1914,"name":"Signature","nameLocations":["3699:9:9"],"nodeType":"IdentifierPath","referencedDeclaration":1778,"src":"3699:9:9"},"referencedDeclaration":1778,"src":"3699:9:9","typeDescriptions":{"typeIdentifier":"t_struct$_Signature_$1778_storage_ptr","typeString":"struct Signature"}},"id":1916,"nodeType":"ArrayTypeName","src":"3699:11:9","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Signature_$1778_storage_$dyn_storage_ptr","typeString":"struct Signature[]"}},"visibility":"internal"},{"constant":false,"id":1919,"mutability":"mutable","name":"revoker","nameLocation":"3846:7:9","nodeType":"VariableDeclaration","scope":1922,"src":"3838:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1918,"name":"address","nodeType":"ElementaryTypeName","src":"3838:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1921,"mutability":"mutable","name":"deadline","nameLocation":"3891:8:9","nodeType":"VariableDeclaration","scope":1922,"src":"3884:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1920,"name":"uint64","nodeType":"ElementaryTypeName","src":"3884:6:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"name":"MultiDelegatedRevocationRequest","nameLocation":"3522:31:9","nodeType":"StructDefinition","scope":2109,"src":"3515:429:9","visibility":"public"},{"abstract":false,"baseContracts":[],"canonicalName":"IEAS","contractDependencies":[],"contractKind":"interface","documentation":{"id":1923,"nodeType":"StructuredDocumentation","src":"3946:74:9","text":"@title IEAS\n @notice EAS - Ethereum Attestation Service interface."},"fullyImplemented":false,"id":2108,"linearizedBaseContracts":[2108],"name":"IEAS","nameLocation":"4030:4:9","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1924,"nodeType":"StructuredDocumentation","src":"4041:260:9","text":"@notice Emitted when an attestation has been made.\n @param recipient The recipient of the attestation.\n @param attester The attesting account.\n @param uid The UID the revoked attestation.\n @param schemaUID The UID of the schema."},"eventSelector":"8bf46bf4cfd674fa735a3d63ec1c9ad4153f033c290341f3a588b75685141b35","id":1934,"name":"Attested","nameLocation":"4312:8:9","nodeType":"EventDefinition","parameters":{"id":1933,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1926,"indexed":true,"mutability":"mutable","name":"recipient","nameLocation":"4346:9:9","nodeType":"VariableDeclaration","scope":1934,"src":"4330:25:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1925,"name":"address","nodeType":"ElementaryTypeName","src":"4330:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1928,"indexed":true,"mutability":"mutable","name":"attester","nameLocation":"4381:8:9","nodeType":"VariableDeclaration","scope":1934,"src":"4365:24:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1927,"name":"address","nodeType":"ElementaryTypeName","src":"4365:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1930,"indexed":false,"mutability":"mutable","name":"uid","nameLocation":"4407:3:9","nodeType":"VariableDeclaration","scope":1934,"src":"4399:11:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1929,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4399:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1932,"indexed":true,"mutability":"mutable","name":"schemaUID","nameLocation":"4436:9:9","nodeType":"VariableDeclaration","scope":1934,"src":"4420:25:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1931,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4420:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4320:131:9"},"src":"4306:146:9"},{"anonymous":false,"documentation":{"id":1935,"nodeType":"StructuredDocumentation","src":"4458:263:9","text":"@notice Emitted when an attestation has been revoked.\n @param recipient The recipient of the attestation.\n @param attester The attesting account.\n @param schemaUID The UID of the schema.\n @param uid The UID the revoked attestation."},"eventSelector":"f930a6e2523c9cc298691873087a740550b8fc85a0680830414c148ed927f615","id":1945,"name":"Revoked","nameLocation":"4732:7:9","nodeType":"EventDefinition","parameters":{"id":1944,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1937,"indexed":true,"mutability":"mutable","name":"recipient","nameLocation":"4765:9:9","nodeType":"VariableDeclaration","scope":1945,"src":"4749:25:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1936,"name":"address","nodeType":"ElementaryTypeName","src":"4749:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1939,"indexed":true,"mutability":"mutable","name":"attester","nameLocation":"4800:8:9","nodeType":"VariableDeclaration","scope":1945,"src":"4784:24:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1938,"name":"address","nodeType":"ElementaryTypeName","src":"4784:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1941,"indexed":false,"mutability":"mutable","name":"uid","nameLocation":"4826:3:9","nodeType":"VariableDeclaration","scope":1945,"src":"4818:11:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1940,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4818:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1943,"indexed":true,"mutability":"mutable","name":"schemaUID","nameLocation":"4855:9:9","nodeType":"VariableDeclaration","scope":1945,"src":"4839:25:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1942,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4839:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4739:131:9"},"src":"4726:145:9"},{"anonymous":false,"documentation":{"id":1946,"nodeType":"StructuredDocumentation","src":"4877:123:9","text":"@notice Emitted when a data has been timestamped.\n @param data The data.\n @param timestamp The timestamp."},"eventSelector":"5aafceeb1c7ad58e4a84898bdee37c02c0fc46e7d24e6b60e8209449f183459f","id":1952,"name":"Timestamped","nameLocation":"5011:11:9","nodeType":"EventDefinition","parameters":{"id":1951,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1948,"indexed":true,"mutability":"mutable","name":"data","nameLocation":"5039:4:9","nodeType":"VariableDeclaration","scope":1952,"src":"5023:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1947,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5023:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1950,"indexed":true,"mutability":"mutable","name":"timestamp","nameLocation":"5060:9:9","nodeType":"VariableDeclaration","scope":1952,"src":"5045:24:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1949,"name":"uint64","nodeType":"ElementaryTypeName","src":"5045:6:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"5022:48:9"},"src":"5005:66:9"},{"anonymous":false,"documentation":{"id":1953,"nodeType":"StructuredDocumentation","src":"5077:170:9","text":"@notice Emitted when a data has been revoked.\n @param revoker The address of the revoker.\n @param data The data.\n @param timestamp The timestamp."},"eventSelector":"92a1f7a41a7c585a8b09e25b195e225b1d43248daca46b0faf9e0792777a2229","id":1961,"name":"RevokedOffchain","nameLocation":"5258:15:9","nodeType":"EventDefinition","parameters":{"id":1960,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1955,"indexed":true,"mutability":"mutable","name":"revoker","nameLocation":"5299:7:9","nodeType":"VariableDeclaration","scope":1961,"src":"5283:23:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1954,"name":"address","nodeType":"ElementaryTypeName","src":"5283:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1957,"indexed":true,"mutability":"mutable","name":"data","nameLocation":"5332:4:9","nodeType":"VariableDeclaration","scope":1961,"src":"5316:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1956,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5316:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1959,"indexed":true,"mutability":"mutable","name":"timestamp","nameLocation":"5361:9:9","nodeType":"VariableDeclaration","scope":1961,"src":"5346:24:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1958,"name":"uint64","nodeType":"ElementaryTypeName","src":"5346:6:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"5273:103:9"},"src":"5252:125:9"},{"documentation":{"id":1962,"nodeType":"StructuredDocumentation","src":"5383:121:9","text":"@notice Returns the address of the global schema registry.\n @return The address of the global schema registry."},"functionSelector":"f10b5cc8","id":1968,"implemented":false,"kind":"function","modifiers":[],"name":"getSchemaRegistry","nameLocation":"5518:17:9","nodeType":"FunctionDefinition","parameters":{"id":1963,"nodeType":"ParameterList","parameters":[],"src":"5535:2:9"},"returnParameters":{"id":1967,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1966,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1968,"src":"5561:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ISchemaRegistry_$2156","typeString":"contract ISchemaRegistry"},"typeName":{"id":1965,"nodeType":"UserDefinedTypeName","pathNode":{"id":1964,"name":"ISchemaRegistry","nameLocations":["5561:15:9"],"nodeType":"IdentifierPath","referencedDeclaration":2156,"src":"5561:15:9"},"referencedDeclaration":2156,"src":"5561:15:9","typeDescriptions":{"typeIdentifier":"t_contract$_ISchemaRegistry_$2156","typeString":"contract ISchemaRegistry"}},"visibility":"internal"}],"src":"5560:17:9"},"scope":2108,"src":"5509:69:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1969,"nodeType":"StructuredDocumentation","src":"5584:665:9","text":"@notice Attests to a specific schema.\n @param request The arguments of the attestation request.\n @return The UID of the new attestation.\n Example:\n     attest({\n         schema: \"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\",\n         data: {\n             recipient: \"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\",\n             expirationTime: 0,\n             revocable: true,\n             refUID: \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n             data: \"0xF00D\",\n             value: 0\n         }\n     })"},"functionSelector":"f17325e7","id":1977,"implemented":false,"kind":"function","modifiers":[],"name":"attest","nameLocation":"6263:6:9","nodeType":"FunctionDefinition","parameters":{"id":1973,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1972,"mutability":"mutable","name":"request","nameLocation":"6307:7:9","nodeType":"VariableDeclaration","scope":1977,"src":"6279:35:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequest_$1841_calldata_ptr","typeString":"struct AttestationRequest"},"typeName":{"id":1971,"nodeType":"UserDefinedTypeName","pathNode":{"id":1970,"name":"AttestationRequest","nameLocations":["6279:18:9"],"nodeType":"IdentifierPath","referencedDeclaration":1841,"src":"6279:18:9"},"referencedDeclaration":1841,"src":"6279:18:9","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationRequest_$1841_storage_ptr","typeString":"struct AttestationRequest"}},"visibility":"internal"}],"src":"6269:51:9"},"returnParameters":{"id":1976,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1975,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1977,"src":"6347:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1974,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6347:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6346:9:9"},"scope":2108,"src":"6254:102:9","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":1978,"nodeType":"StructuredDocumentation","src":"6362:1004:9","text":"@notice Attests to a specific schema via the provided ECDSA signature.\n @param delegatedRequest The arguments of the delegated attestation request.\n @return The UID of the new attestation.\n Example:\n     attestByDelegation({\n         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n         data: {\n             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n             expirationTime: 1673891048,\n             revocable: true,\n             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n             data: '0x1234',\n             value: 0\n         },\n         signature: {\n             v: 28,\n             r: '0x148c...b25b',\n             s: '0x5a72...be22'\n         },\n         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',\n         deadline: 1673891048\n     })"},"functionSelector":"3c042715","id":1986,"implemented":false,"kind":"function","modifiers":[],"name":"attestByDelegation","nameLocation":"7380:18:9","nodeType":"FunctionDefinition","parameters":{"id":1982,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1981,"mutability":"mutable","name":"delegatedRequest","nameLocation":"7445:16:9","nodeType":"VariableDeclaration","scope":1986,"src":"7408:53:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_DelegatedAttestationRequest_$1854_calldata_ptr","typeString":"struct DelegatedAttestationRequest"},"typeName":{"id":1980,"nodeType":"UserDefinedTypeName","pathNode":{"id":1979,"name":"DelegatedAttestationRequest","nameLocations":["7408:27:9"],"nodeType":"IdentifierPath","referencedDeclaration":1854,"src":"7408:27:9"},"referencedDeclaration":1854,"src":"7408:27:9","typeDescriptions":{"typeIdentifier":"t_struct$_DelegatedAttestationRequest_$1854_storage_ptr","typeString":"struct DelegatedAttestationRequest"}},"visibility":"internal"}],"src":"7398:69:9"},"returnParameters":{"id":1985,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1984,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1986,"src":"7494:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1983,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7494:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7493:9:9"},"scope":2108,"src":"7371:132:9","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":1987,"nodeType":"StructuredDocumentation","src":"7509:1656:9","text":"@notice Attests to multiple schemas.\n @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\n     schema ids to benefit from the best batching optimization.\n @return The UIDs of the new attestations.\n Example:\n     multiAttest([{\n         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\n         data: [{\n             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n             expirationTime: 1673891048,\n             revocable: true,\n             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n             data: '0x1234',\n             value: 1000\n         },\n         {\n             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n             expirationTime: 0,\n             revocable: false,\n             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\n             data: '0x00',\n             value: 0\n         }],\n     },\n     {\n         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\n         data: [{\n             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n             expirationTime: 0,\n             revocable: true,\n             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\n             data: '0x12345678',\n             value: 0\n         },\n     }])"},"functionSelector":"44adc90e","id":1997,"implemented":false,"kind":"function","modifiers":[],"name":"multiAttest","nameLocation":"9179:11:9","nodeType":"FunctionDefinition","parameters":{"id":1992,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1991,"mutability":"mutable","name":"multiRequests","nameLocation":"9235:13:9","nodeType":"VariableDeclaration","scope":1997,"src":"9200:48:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiAttestationRequest_$1861_calldata_ptr_$dyn_calldata_ptr","typeString":"struct MultiAttestationRequest[]"},"typeName":{"baseType":{"id":1989,"nodeType":"UserDefinedTypeName","pathNode":{"id":1988,"name":"MultiAttestationRequest","nameLocations":["9200:23:9"],"nodeType":"IdentifierPath","referencedDeclaration":1861,"src":"9200:23:9"},"referencedDeclaration":1861,"src":"9200:23:9","typeDescriptions":{"typeIdentifier":"t_struct$_MultiAttestationRequest_$1861_storage_ptr","typeString":"struct MultiAttestationRequest"}},"id":1990,"nodeType":"ArrayTypeName","src":"9200:25:9","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiAttestationRequest_$1861_storage_$dyn_storage_ptr","typeString":"struct MultiAttestationRequest[]"}},"visibility":"internal"}],"src":"9190:64:9"},"returnParameters":{"id":1996,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1995,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1997,"src":"9281:16:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1993,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9281:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1994,"nodeType":"ArrayTypeName","src":"9281:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"9280:18:9"},"scope":2108,"src":"9170:129:9","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":1998,"nodeType":"StructuredDocumentation","src":"9305:1642:9","text":"@notice Attests to multiple schemas using via provided ECDSA signatures.\n @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\n     grouped by distinct schema ids to benefit from the best batching optimization.\n @return The UIDs of the new attestations.\n Example:\n     multiAttestByDelegation([{\n         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n         data: [{\n             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n             expirationTime: 1673891048,\n             revocable: true,\n             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n             data: '0x1234',\n             value: 0\n         },\n         {\n             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n             expirationTime: 0,\n             revocable: false,\n             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n             data: '0x00',\n             value: 0\n         }],\n         signatures: [{\n             v: 28,\n             r: '0x148c...b25b',\n             s: '0x5a72...be22'\n         },\n         {\n             v: 28,\n             r: '0x487s...67bb',\n             s: '0x12ad...2366'\n         }],\n         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',\n         deadline: 1673891048\n     }])"},"functionSelector":"95411525","id":2008,"implemented":false,"kind":"function","modifiers":[],"name":"multiAttestByDelegation","nameLocation":"10961:23:9","nodeType":"FunctionDefinition","parameters":{"id":2003,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2002,"mutability":"mutable","name":"multiDelegatedRequests","nameLocation":"11038:22:9","nodeType":"VariableDeclaration","scope":2008,"src":"10994:66:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiDelegatedAttestationRequest_$1876_calldata_ptr_$dyn_calldata_ptr","typeString":"struct MultiDelegatedAttestationRequest[]"},"typeName":{"baseType":{"id":2000,"nodeType":"UserDefinedTypeName","pathNode":{"id":1999,"name":"MultiDelegatedAttestationRequest","nameLocations":["10994:32:9"],"nodeType":"IdentifierPath","referencedDeclaration":1876,"src":"10994:32:9"},"referencedDeclaration":1876,"src":"10994:32:9","typeDescriptions":{"typeIdentifier":"t_struct$_MultiDelegatedAttestationRequest_$1876_storage_ptr","typeString":"struct MultiDelegatedAttestationRequest"}},"id":2001,"nodeType":"ArrayTypeName","src":"10994:34:9","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiDelegatedAttestationRequest_$1876_storage_$dyn_storage_ptr","typeString":"struct MultiDelegatedAttestationRequest[]"}},"visibility":"internal"}],"src":"10984:82:9"},"returnParameters":{"id":2007,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2006,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2008,"src":"11093:16:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2004,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11093:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2005,"nodeType":"ArrayTypeName","src":"11093:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"11092:18:9"},"scope":2108,"src":"10952:159:9","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":2009,"nodeType":"StructuredDocumentation","src":"11117:450:9","text":"@notice Revokes an existing attestation to a specific schema.\n @param request The arguments of the revocation request.\n Example:\n     revoke({\n         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n         data: {\n             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\n             value: 0\n         }\n     })"},"functionSelector":"46926267","id":2015,"implemented":false,"kind":"function","modifiers":[],"name":"revoke","nameLocation":"11581:6:9","nodeType":"FunctionDefinition","parameters":{"id":2013,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2012,"mutability":"mutable","name":"request","nameLocation":"11615:7:9","nodeType":"VariableDeclaration","scope":2015,"src":"11588:34:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_RevocationRequest_$1887_calldata_ptr","typeString":"struct RevocationRequest"},"typeName":{"id":2011,"nodeType":"UserDefinedTypeName","pathNode":{"id":2010,"name":"RevocationRequest","nameLocations":["11588:17:9"],"nodeType":"IdentifierPath","referencedDeclaration":1887,"src":"11588:17:9"},"referencedDeclaration":1887,"src":"11588:17:9","typeDescriptions":{"typeIdentifier":"t_struct$_RevocationRequest_$1887_storage_ptr","typeString":"struct RevocationRequest"}},"visibility":"internal"}],"src":"11587:36:9"},"returnParameters":{"id":2014,"nodeType":"ParameterList","parameters":[],"src":"11640:0:9"},"scope":2108,"src":"11572:69:9","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":2016,"nodeType":"StructuredDocumentation","src":"11647:777:9","text":"@notice Revokes an existing attestation to a specific schema via the provided ECDSA signature.\n @param delegatedRequest The arguments of the delegated revocation request.\n Example:\n     revokeByDelegation({\n         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n         data: {\n             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\n             value: 0\n         },\n         signature: {\n             v: 27,\n             r: '0xb593...7142',\n             s: '0x0f5b...2cce'\n         },\n         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\n         deadline: 1673891048\n     })"},"functionSelector":"a6d4dbc7","id":2022,"implemented":false,"kind":"function","modifiers":[],"name":"revokeByDelegation","nameLocation":"12438:18:9","nodeType":"FunctionDefinition","parameters":{"id":2020,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2019,"mutability":"mutable","name":"delegatedRequest","nameLocation":"12502:16:9","nodeType":"VariableDeclaration","scope":2022,"src":"12466:52:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_DelegatedRevocationRequest_$1900_calldata_ptr","typeString":"struct DelegatedRevocationRequest"},"typeName":{"id":2018,"nodeType":"UserDefinedTypeName","pathNode":{"id":2017,"name":"DelegatedRevocationRequest","nameLocations":["12466:26:9"],"nodeType":"IdentifierPath","referencedDeclaration":1900,"src":"12466:26:9"},"referencedDeclaration":1900,"src":"12466:26:9","typeDescriptions":{"typeIdentifier":"t_struct$_DelegatedRevocationRequest_$1900_storage_ptr","typeString":"struct DelegatedRevocationRequest"}},"visibility":"internal"}],"src":"12456:68:9"},"returnParameters":{"id":2021,"nodeType":"ParameterList","parameters":[],"src":"12541:0:9"},"scope":2108,"src":"12429:113:9","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":2023,"nodeType":"StructuredDocumentation","src":"12548:1039:9","text":"@notice Revokes existing attestations to multiple schemas.\n @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\n     schema ids to benefit from the best batching optimization.\n Example:\n     multiRevoke([{\n         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n         data: [{\n             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\n             value: 1000\n         },\n         {\n             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\n             value: 0\n         }],\n     },\n     {\n         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\n         data: [{\n             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\n             value: 0\n         },\n     }])"},"functionSelector":"4cb7e9e5","id":2030,"implemented":false,"kind":"function","modifiers":[],"name":"multiRevoke","nameLocation":"13601:11:9","nodeType":"FunctionDefinition","parameters":{"id":2028,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2027,"mutability":"mutable","name":"multiRequests","nameLocation":"13656:13:9","nodeType":"VariableDeclaration","scope":2030,"src":"13622:47:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiRevocationRequest_$1907_calldata_ptr_$dyn_calldata_ptr","typeString":"struct MultiRevocationRequest[]"},"typeName":{"baseType":{"id":2025,"nodeType":"UserDefinedTypeName","pathNode":{"id":2024,"name":"MultiRevocationRequest","nameLocations":["13622:22:9"],"nodeType":"IdentifierPath","referencedDeclaration":1907,"src":"13622:22:9"},"referencedDeclaration":1907,"src":"13622:22:9","typeDescriptions":{"typeIdentifier":"t_struct$_MultiRevocationRequest_$1907_storage_ptr","typeString":"struct MultiRevocationRequest"}},"id":2026,"nodeType":"ArrayTypeName","src":"13622:24:9","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiRevocationRequest_$1907_storage_$dyn_storage_ptr","typeString":"struct MultiRevocationRequest[]"}},"visibility":"internal"}],"src":"13612:63:9"},"returnParameters":{"id":2029,"nodeType":"ParameterList","parameters":[],"src":"13692:0:9"},"scope":2108,"src":"13592:101:9","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":2031,"nodeType":"StructuredDocumentation","src":"13699:1229:9","text":"@notice Revokes existing attestations to multiple schemas via provided ECDSA signatures.\n @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests\n     should be grouped by distinct schema ids to benefit from the best batching optimization.\n Example:\n     multiRevokeByDelegation([{\n         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n         data: [{\n             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\n             value: 1000\n         },\n         {\n             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\n             value: 0\n         }],\n         signatures: [{\n             v: 28,\n             r: '0x148c...b25b',\n             s: '0x5a72...be22'\n         },\n         {\n             v: 28,\n             r: '0x487s...67bb',\n             s: '0x12ad...2366'\n         }],\n         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\n         deadline: 1673891048\n     }])"},"functionSelector":"0eabf660","id":2038,"implemented":false,"kind":"function","modifiers":[],"name":"multiRevokeByDelegation","nameLocation":"14942:23:9","nodeType":"FunctionDefinition","parameters":{"id":2036,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2035,"mutability":"mutable","name":"multiDelegatedRequests","nameLocation":"15018:22:9","nodeType":"VariableDeclaration","scope":2038,"src":"14975:65:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiDelegatedRevocationRequest_$1922_calldata_ptr_$dyn_calldata_ptr","typeString":"struct MultiDelegatedRevocationRequest[]"},"typeName":{"baseType":{"id":2033,"nodeType":"UserDefinedTypeName","pathNode":{"id":2032,"name":"MultiDelegatedRevocationRequest","nameLocations":["14975:31:9"],"nodeType":"IdentifierPath","referencedDeclaration":1922,"src":"14975:31:9"},"referencedDeclaration":1922,"src":"14975:31:9","typeDescriptions":{"typeIdentifier":"t_struct$_MultiDelegatedRevocationRequest_$1922_storage_ptr","typeString":"struct MultiDelegatedRevocationRequest"}},"id":2034,"nodeType":"ArrayTypeName","src":"14975:33:9","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiDelegatedRevocationRequest_$1922_storage_$dyn_storage_ptr","typeString":"struct MultiDelegatedRevocationRequest[]"}},"visibility":"internal"}],"src":"14965:81:9"},"returnParameters":{"id":2037,"nodeType":"ParameterList","parameters":[],"src":"15063:0:9"},"scope":2108,"src":"14933:131:9","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":2039,"nodeType":"StructuredDocumentation","src":"15070:154:9","text":"@notice Timestamps the specified bytes32 data.\n @param data The data to timestamp.\n @return The timestamp the data was timestamped with."},"functionSelector":"4d003070","id":2046,"implemented":false,"kind":"function","modifiers":[],"name":"timestamp","nameLocation":"15238:9:9","nodeType":"FunctionDefinition","parameters":{"id":2042,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2041,"mutability":"mutable","name":"data","nameLocation":"15256:4:9","nodeType":"VariableDeclaration","scope":2046,"src":"15248:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2040,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15248:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"15247:14:9"},"returnParameters":{"id":2045,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2044,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2046,"src":"15280:6:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2043,"name":"uint64","nodeType":"ElementaryTypeName","src":"15280:6:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"15279:8:9"},"scope":2108,"src":"15229:59:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2047,"nodeType":"StructuredDocumentation","src":"15294:163:9","text":"@notice Timestamps the specified multiple bytes32 data.\n @param data The data to timestamp.\n @return The timestamp the data was timestamped with."},"functionSelector":"e71ff365","id":2055,"implemented":false,"kind":"function","modifiers":[],"name":"multiTimestamp","nameLocation":"15471:14:9","nodeType":"FunctionDefinition","parameters":{"id":2051,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2050,"mutability":"mutable","name":"data","nameLocation":"15505:4:9","nodeType":"VariableDeclaration","scope":2055,"src":"15486:23:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2048,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15486:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2049,"nodeType":"ArrayTypeName","src":"15486:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"15485:25:9"},"returnParameters":{"id":2054,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2053,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2055,"src":"15529:6:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2052,"name":"uint64","nodeType":"ElementaryTypeName","src":"15529:6:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"15528:8:9"},"scope":2108,"src":"15462:75:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2056,"nodeType":"StructuredDocumentation","src":"15543:147:9","text":"@notice Revokes the specified bytes32 data.\n @param data The data to timestamp.\n @return The timestamp the data was revoked with."},"functionSelector":"cf190f34","id":2063,"implemented":false,"kind":"function","modifiers":[],"name":"revokeOffchain","nameLocation":"15704:14:9","nodeType":"FunctionDefinition","parameters":{"id":2059,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2058,"mutability":"mutable","name":"data","nameLocation":"15727:4:9","nodeType":"VariableDeclaration","scope":2063,"src":"15719:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2057,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15719:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"15718:14:9"},"returnParameters":{"id":2062,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2061,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2063,"src":"15751:6:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2060,"name":"uint64","nodeType":"ElementaryTypeName","src":"15751:6:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"15750:8:9"},"scope":2108,"src":"15695:64:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2064,"nodeType":"StructuredDocumentation","src":"15765:156:9","text":"@notice Revokes the specified multiple bytes32 data.\n @param data The data to timestamp.\n @return The timestamp the data was revoked with."},"functionSelector":"13893f61","id":2072,"implemented":false,"kind":"function","modifiers":[],"name":"multiRevokeOffchain","nameLocation":"15935:19:9","nodeType":"FunctionDefinition","parameters":{"id":2068,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2067,"mutability":"mutable","name":"data","nameLocation":"15983:4:9","nodeType":"VariableDeclaration","scope":2072,"src":"15964:23:9","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2065,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15964:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2066,"nodeType":"ArrayTypeName","src":"15964:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"15954:39:9"},"returnParameters":{"id":2071,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2070,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2072,"src":"16012:6:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2069,"name":"uint64","nodeType":"ElementaryTypeName","src":"16012:6:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"16011:8:9"},"scope":2108,"src":"15926:94:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2073,"nodeType":"StructuredDocumentation","src":"16026:156:9","text":"@notice Returns an existing attestation by UID.\n @param uid The UID of the attestation to retrieve.\n @return The attestation data members."},"functionSelector":"a3112a64","id":2081,"implemented":false,"kind":"function","modifiers":[],"name":"getAttestation","nameLocation":"16196:14:9","nodeType":"FunctionDefinition","parameters":{"id":2076,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2075,"mutability":"mutable","name":"uid","nameLocation":"16228:3:9","nodeType":"VariableDeclaration","scope":2081,"src":"16220:11:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2074,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16220:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"16210:27:9"},"returnParameters":{"id":2080,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2079,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2081,"src":"16261:18:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$1799_memory_ptr","typeString":"struct Attestation"},"typeName":{"id":2078,"nodeType":"UserDefinedTypeName","pathNode":{"id":2077,"name":"Attestation","nameLocations":["16261:11:9"],"nodeType":"IdentifierPath","referencedDeclaration":1799,"src":"16261:11:9"},"referencedDeclaration":1799,"src":"16261:11:9","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$1799_storage_ptr","typeString":"struct Attestation"}},"visibility":"internal"}],"src":"16260:20:9"},"scope":2108,"src":"16187:94:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2082,"nodeType":"StructuredDocumentation","src":"16287:155:9","text":"@notice Checks whether an attestation exists.\n @param uid The UID of the attestation to retrieve.\n @return Whether an attestation exists."},"functionSelector":"e30bb563","id":2089,"implemented":false,"kind":"function","modifiers":[],"name":"isAttestationValid","nameLocation":"16456:18:9","nodeType":"FunctionDefinition","parameters":{"id":2085,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2084,"mutability":"mutable","name":"uid","nameLocation":"16483:3:9","nodeType":"VariableDeclaration","scope":2089,"src":"16475:11:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2083,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16475:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"16474:13:9"},"returnParameters":{"id":2088,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2087,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2089,"src":"16511:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2086,"name":"bool","nodeType":"ElementaryTypeName","src":"16511:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"16510:6:9"},"scope":2108,"src":"16447:70:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2090,"nodeType":"StructuredDocumentation","src":"16523:179:9","text":"@notice Returns the timestamp that the specified data was timestamped with.\n @param data The data to query.\n @return The timestamp the data was timestamped with."},"functionSelector":"d45c4435","id":2097,"implemented":false,"kind":"function","modifiers":[],"name":"getTimestamp","nameLocation":"16716:12:9","nodeType":"FunctionDefinition","parameters":{"id":2093,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2092,"mutability":"mutable","name":"data","nameLocation":"16737:4:9","nodeType":"VariableDeclaration","scope":2097,"src":"16729:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2091,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16729:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"16728:14:9"},"returnParameters":{"id":2096,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2095,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2097,"src":"16766:6:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2094,"name":"uint64","nodeType":"ElementaryTypeName","src":"16766:6:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"16765:8:9"},"scope":2108,"src":"16707:67:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2098,"nodeType":"StructuredDocumentation","src":"16780:179:9","text":"@notice Returns the timestamp that the specified data was timestamped with.\n @param data The data to query.\n @return The timestamp the data was timestamped with."},"functionSelector":"b469318d","id":2107,"implemented":false,"kind":"function","modifiers":[],"name":"getRevokeOffchain","nameLocation":"16973:17:9","nodeType":"FunctionDefinition","parameters":{"id":2103,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2100,"mutability":"mutable","name":"revoker","nameLocation":"17008:7:9","nodeType":"VariableDeclaration","scope":2107,"src":"17000:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2099,"name":"address","nodeType":"ElementaryTypeName","src":"17000:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2102,"mutability":"mutable","name":"data","nameLocation":"17033:4:9","nodeType":"VariableDeclaration","scope":2107,"src":"17025:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2101,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17025:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"16990:53:9"},"returnParameters":{"id":2106,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2105,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2107,"src":"17067:6:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2104,"name":"uint64","nodeType":"ElementaryTypeName","src":"17067:6:9","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"17066:8:9"},"scope":2108,"src":"16964:111:9","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2109,"src":"4020:13057:9","usedErrors":[]}],"src":"33:17045:9"},"id":9},"contracts/helpers/eas/ISchemaRegistry.sol":{"ast":{"absolutePath":"contracts/helpers/eas/ISchemaRegistry.sol","exportedSymbols":{"ISchemaRegistry":[2156],"ISchemaResolver":[2212],"SchemaRecord":[2122]},"id":2157,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2110,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:10"},{"absolutePath":"contracts/helpers/eas/ISchemaResolver.sol","file":"./ISchemaResolver.sol","id":2112,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2157,"sourceUnit":2213,"src":"58:54:10","symbolAliases":[{"foreign":{"id":2111,"name":"ISchemaResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2212,"src":"66:15:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"canonicalName":"SchemaRecord","id":2122,"members":[{"constant":false,"id":2114,"mutability":"mutable","name":"uid","nameLocation":"215:3:10","nodeType":"VariableDeclaration","scope":2122,"src":"207:11:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2113,"name":"bytes32","nodeType":"ElementaryTypeName","src":"207:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2117,"mutability":"mutable","name":"resolver","nameLocation":"280:8:10","nodeType":"VariableDeclaration","scope":2122,"src":"264:24:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ISchemaResolver_$2212","typeString":"contract ISchemaResolver"},"typeName":{"id":2116,"nodeType":"UserDefinedTypeName","pathNode":{"id":2115,"name":"ISchemaResolver","nameLocations":["264:15:10"],"nodeType":"IdentifierPath","referencedDeclaration":2212,"src":"264:15:10"},"referencedDeclaration":2212,"src":"264:15:10","typeDescriptions":{"typeIdentifier":"t_contract$_ISchemaResolver_$2212","typeString":"contract ISchemaResolver"}},"visibility":"internal"},{"constant":false,"id":2119,"mutability":"mutable","name":"revocable","nameLocation":"328:9:10","nodeType":"VariableDeclaration","scope":2122,"src":"323:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2118,"name":"bool","nodeType":"ElementaryTypeName","src":"323:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2121,"mutability":"mutable","name":"schema","nameLocation":"403:6:10","nodeType":"VariableDeclaration","scope":2122,"src":"396:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2120,"name":"string","nodeType":"ElementaryTypeName","src":"396:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"SchemaRecord","nameLocation":"188:12:10","nodeType":"StructDefinition","scope":2157,"src":"181:285:10","visibility":"public"},{"abstract":false,"baseContracts":[],"canonicalName":"ISchemaRegistry","contractDependencies":[],"contractKind":"interface","documentation":{"id":2123,"nodeType":"StructuredDocumentation","src":"468:130:10","text":"@title ISchemaRegistry\n @notice The interface of global attestation schemas for the Ethereum Attestation Service protocol."},"fullyImplemented":false,"id":2156,"linearizedBaseContracts":[2156],"name":"ISchemaRegistry","nameLocation":"608:15:10","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":2124,"nodeType":"StructuredDocumentation","src":"630:213:10","text":"@notice Emitted when a new schema has been registered\n @param uid The schema UID.\n @param registerer The address of the account used to register the schema.\n @param schema The schema data."},"eventSelector":"d0b86852e21f9e5fa4bc3b0cff9757ffe243d50c4b43968a42202153d651ea5e","id":2133,"name":"Registered","nameLocation":"854:10:10","nodeType":"EventDefinition","parameters":{"id":2132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2126,"indexed":true,"mutability":"mutable","name":"uid","nameLocation":"890:3:10","nodeType":"VariableDeclaration","scope":2133,"src":"874:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2125,"name":"bytes32","nodeType":"ElementaryTypeName","src":"874:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2128,"indexed":true,"mutability":"mutable","name":"registerer","nameLocation":"919:10:10","nodeType":"VariableDeclaration","scope":2133,"src":"903:26:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2127,"name":"address","nodeType":"ElementaryTypeName","src":"903:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2131,"indexed":false,"mutability":"mutable","name":"schema","nameLocation":"952:6:10","nodeType":"VariableDeclaration","scope":2133,"src":"939:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_SchemaRecord_$2122_memory_ptr","typeString":"struct SchemaRecord"},"typeName":{"id":2130,"nodeType":"UserDefinedTypeName","pathNode":{"id":2129,"name":"SchemaRecord","nameLocations":["939:12:10"],"nodeType":"IdentifierPath","referencedDeclaration":2122,"src":"939:12:10"},"referencedDeclaration":2122,"src":"939:12:10","typeDescriptions":{"typeIdentifier":"t_struct$_SchemaRecord_$2122_storage_ptr","typeString":"struct SchemaRecord"}},"visibility":"internal"}],"src":"864:100:10"},"src":"848:117:10"},{"documentation":{"id":2134,"nodeType":"StructuredDocumentation","src":"971:262:10","text":"@notice Submits and reserves a new schema\n @param schema The schema data schema.\n @param resolver An optional schema resolver.\n @param revocable Whether the schema allows revocations explicitly.\n @return The UID of the new schema."},"functionSelector":"60d7a278","id":2146,"implemented":false,"kind":"function","modifiers":[],"name":"register","nameLocation":"1247:8:10","nodeType":"FunctionDefinition","parameters":{"id":2142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2136,"mutability":"mutable","name":"schema","nameLocation":"1281:6:10","nodeType":"VariableDeclaration","scope":2146,"src":"1265:22:10","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":2135,"name":"string","nodeType":"ElementaryTypeName","src":"1265:6:10","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2139,"mutability":"mutable","name":"resolver","nameLocation":"1313:8:10","nodeType":"VariableDeclaration","scope":2146,"src":"1297:24:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ISchemaResolver_$2212","typeString":"contract ISchemaResolver"},"typeName":{"id":2138,"nodeType":"UserDefinedTypeName","pathNode":{"id":2137,"name":"ISchemaResolver","nameLocations":["1297:15:10"],"nodeType":"IdentifierPath","referencedDeclaration":2212,"src":"1297:15:10"},"referencedDeclaration":2212,"src":"1297:15:10","typeDescriptions":{"typeIdentifier":"t_contract$_ISchemaResolver_$2212","typeString":"contract ISchemaResolver"}},"visibility":"internal"},{"constant":false,"id":2141,"mutability":"mutable","name":"revocable","nameLocation":"1336:9:10","nodeType":"VariableDeclaration","scope":2146,"src":"1331:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2140,"name":"bool","nodeType":"ElementaryTypeName","src":"1331:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1255:96:10"},"returnParameters":{"id":2145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2144,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2146,"src":"1370:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2143,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1370:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1369:9:10"},"scope":2156,"src":"1238:141:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2147,"nodeType":"StructuredDocumentation","src":"1385:140:10","text":"@notice Returns an existing schema by UID\n @param uid The UID of the schema to retrieve.\n @return The schema data members."},"functionSelector":"a2ea7c6e","id":2155,"implemented":false,"kind":"function","modifiers":[],"name":"getSchema","nameLocation":"1539:9:10","nodeType":"FunctionDefinition","parameters":{"id":2150,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2149,"mutability":"mutable","name":"uid","nameLocation":"1557:3:10","nodeType":"VariableDeclaration","scope":2155,"src":"1549:11:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2148,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1549:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1548:13:10"},"returnParameters":{"id":2154,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2153,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2155,"src":"1585:19:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_SchemaRecord_$2122_memory_ptr","typeString":"struct SchemaRecord"},"typeName":{"id":2152,"nodeType":"UserDefinedTypeName","pathNode":{"id":2151,"name":"SchemaRecord","nameLocations":["1585:12:10"],"nodeType":"IdentifierPath","referencedDeclaration":2122,"src":"1585:12:10"},"referencedDeclaration":2122,"src":"1585:12:10","typeDescriptions":{"typeIdentifier":"t_struct$_SchemaRecord_$2122_storage_ptr","typeString":"struct SchemaRecord"}},"visibility":"internal"}],"src":"1584:21:10"},"scope":2156,"src":"1530:76:10","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2157,"src":"598:1010:10","usedErrors":[]}],"src":"33:1576:10"},"id":10},"contracts/helpers/eas/ISchemaResolver.sol":{"ast":{"absolutePath":"contracts/helpers/eas/ISchemaResolver.sol","exportedSymbols":{"Attestation":[1799],"ISchemaResolver":[2212]},"id":2213,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2158,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:11"},{"absolutePath":"contracts/helpers/eas/Common.sol","file":"./Common.sol","id":2160,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2213,"sourceUnit":1816,"src":"58:41:11","symbolAliases":[{"foreign":{"id":2159,"name":"Attestation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1799,"src":"66:11:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ISchemaResolver","contractDependencies":[],"contractKind":"interface","documentation":{"id":2161,"nodeType":"StructuredDocumentation","src":"101:85:11","text":"@title ISchemaResolver\n @notice The interface of an optional schema resolver."},"fullyImplemented":false,"id":2212,"linearizedBaseContracts":[2212],"name":"ISchemaResolver","nameLocation":"196:15:11","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2162,"nodeType":"StructuredDocumentation","src":"218:112:11","text":"@notice Checks if the resolver can be sent ETH.\n @return Whether the resolver supports ETH transfers."},"functionSelector":"ce46e046","id":2167,"implemented":false,"kind":"function","modifiers":[],"name":"isPayable","nameLocation":"344:9:11","nodeType":"FunctionDefinition","parameters":{"id":2163,"nodeType":"ParameterList","parameters":[],"src":"353:2:11"},"returnParameters":{"id":2166,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2165,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2167,"src":"379:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2164,"name":"bool","nodeType":"ElementaryTypeName","src":"379:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"378:6:11"},"scope":2212,"src":"335:50:11","stateMutability":"pure","virtual":false,"visibility":"external"},{"documentation":{"id":2168,"nodeType":"StructuredDocumentation","src":"391:167:11","text":"@notice Processes an attestation and verifies whether it's valid.\n @param attestation The new attestation.\n @return Whether the attestation is valid."},"functionSelector":"e60c3505","id":2176,"implemented":false,"kind":"function","modifiers":[],"name":"attest","nameLocation":"572:6:11","nodeType":"FunctionDefinition","parameters":{"id":2172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2171,"mutability":"mutable","name":"attestation","nameLocation":"609:11:11","nodeType":"VariableDeclaration","scope":2176,"src":"588:32:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$1799_calldata_ptr","typeString":"struct Attestation"},"typeName":{"id":2170,"nodeType":"UserDefinedTypeName","pathNode":{"id":2169,"name":"Attestation","nameLocations":["588:11:11"],"nodeType":"IdentifierPath","referencedDeclaration":1799,"src":"588:11:11"},"referencedDeclaration":1799,"src":"588:11:11","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$1799_storage_ptr","typeString":"struct Attestation"}},"visibility":"internal"}],"src":"578:48:11"},"returnParameters":{"id":2175,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2174,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2176,"src":"653:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2173,"name":"bool","nodeType":"ElementaryTypeName","src":"653:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"652:6:11"},"scope":2212,"src":"563:96:11","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":2177,"nodeType":"StructuredDocumentation","src":"665:268:11","text":"@notice Processes multiple attestations and verifies whether they are valid.\n @param attestations The new attestations.\n @param values Explicit ETH amounts which were sent with each attestation.\n @return Whether all the attestations are valid."},"functionSelector":"91db0b7e","id":2189,"implemented":false,"kind":"function","modifiers":[],"name":"multiAttest","nameLocation":"947:11:11","nodeType":"FunctionDefinition","parameters":{"id":2185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2181,"mutability":"mutable","name":"attestations","nameLocation":"991:12:11","nodeType":"VariableDeclaration","scope":2189,"src":"968:35:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Attestation_$1799_calldata_ptr_$dyn_calldata_ptr","typeString":"struct Attestation[]"},"typeName":{"baseType":{"id":2179,"nodeType":"UserDefinedTypeName","pathNode":{"id":2178,"name":"Attestation","nameLocations":["968:11:11"],"nodeType":"IdentifierPath","referencedDeclaration":1799,"src":"968:11:11"},"referencedDeclaration":1799,"src":"968:11:11","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$1799_storage_ptr","typeString":"struct Attestation"}},"id":2180,"nodeType":"ArrayTypeName","src":"968:13:11","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Attestation_$1799_storage_$dyn_storage_ptr","typeString":"struct Attestation[]"}},"visibility":"internal"},{"constant":false,"id":2184,"mutability":"mutable","name":"values","nameLocation":"1032:6:11","nodeType":"VariableDeclaration","scope":2189,"src":"1013:25:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2182,"name":"uint256","nodeType":"ElementaryTypeName","src":"1013:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2183,"nodeType":"ArrayTypeName","src":"1013:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"958:86:11"},"returnParameters":{"id":2188,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2187,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2189,"src":"1071:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2186,"name":"bool","nodeType":"ElementaryTypeName","src":"1071:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1070:6:11"},"scope":2212,"src":"938:139:11","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":2190,"nodeType":"StructuredDocumentation","src":"1083:205:11","text":"@notice Processes an attestation revocation and verifies if it can be revoked.\n @param attestation The existing attestation to be revoked.\n @return Whether the attestation can be revoked."},"functionSelector":"e49617e1","id":2198,"implemented":false,"kind":"function","modifiers":[],"name":"revoke","nameLocation":"1302:6:11","nodeType":"FunctionDefinition","parameters":{"id":2194,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2193,"mutability":"mutable","name":"attestation","nameLocation":"1339:11:11","nodeType":"VariableDeclaration","scope":2198,"src":"1318:32:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$1799_calldata_ptr","typeString":"struct Attestation"},"typeName":{"id":2192,"nodeType":"UserDefinedTypeName","pathNode":{"id":2191,"name":"Attestation","nameLocations":["1318:11:11"],"nodeType":"IdentifierPath","referencedDeclaration":1799,"src":"1318:11:11"},"referencedDeclaration":1799,"src":"1318:11:11","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$1799_storage_ptr","typeString":"struct Attestation"}},"visibility":"internal"}],"src":"1308:48:11"},"returnParameters":{"id":2197,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2196,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2198,"src":"1383:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2195,"name":"bool","nodeType":"ElementaryTypeName","src":"1383:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1382:6:11"},"scope":2212,"src":"1293:96:11","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":2199,"nodeType":"StructuredDocumentation","src":"1395:297:11","text":"@notice Processes revocation of multiple attestation and verifies they can be revoked.\n @param attestations The existing attestations to be revoked.\n @param values Explicit ETH amounts which were sent with each revocation.\n @return Whether the attestations can be revoked."},"functionSelector":"88e5b2d9","id":2211,"implemented":false,"kind":"function","modifiers":[],"name":"multiRevoke","nameLocation":"1706:11:11","nodeType":"FunctionDefinition","parameters":{"id":2207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2203,"mutability":"mutable","name":"attestations","nameLocation":"1750:12:11","nodeType":"VariableDeclaration","scope":2211,"src":"1727:35:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Attestation_$1799_calldata_ptr_$dyn_calldata_ptr","typeString":"struct Attestation[]"},"typeName":{"baseType":{"id":2201,"nodeType":"UserDefinedTypeName","pathNode":{"id":2200,"name":"Attestation","nameLocations":["1727:11:11"],"nodeType":"IdentifierPath","referencedDeclaration":1799,"src":"1727:11:11"},"referencedDeclaration":1799,"src":"1727:11:11","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$1799_storage_ptr","typeString":"struct Attestation"}},"id":2202,"nodeType":"ArrayTypeName","src":"1727:13:11","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Attestation_$1799_storage_$dyn_storage_ptr","typeString":"struct Attestation[]"}},"visibility":"internal"},{"constant":false,"id":2206,"mutability":"mutable","name":"values","nameLocation":"1791:6:11","nodeType":"VariableDeclaration","scope":2211,"src":"1772:25:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2204,"name":"uint256","nodeType":"ElementaryTypeName","src":"1772:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2205,"nodeType":"ArrayTypeName","src":"1772:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1717:86:11"},"returnParameters":{"id":2210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2209,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2211,"src":"1830:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2208,"name":"bool","nodeType":"ElementaryTypeName","src":"1830:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1829:6:11"},"scope":2212,"src":"1697:139:11","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":2213,"src":"186:1652:11","usedErrors":[]}],"src":"33:1806:11"},"id":11},"contracts/interfaces/IMUSE.sol":{"ast":{"absolutePath":"contracts/interfaces/IMUSE.sol","exportedSymbols":{"IERC20":[77],"IMUSE":[2246]},"id":2247,"nodeType":"SourceUnit","nodes":[{"id":2214,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"0:23:12"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":2215,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2247,"sourceUnit":78,"src":"60:56:12","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2216,"name":"IERC20","nameLocations":["137:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":77,"src":"137:6:12"},"id":2217,"nodeType":"InheritanceSpecifier","src":"137:6:12"}],"canonicalName":"IMUSE","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":2246,"linearizedBaseContracts":[2246,77],"name":"IMUSE","nameLocation":"128:5:12","nodeType":"ContractDefinition","nodes":[{"functionSelector":"39509351","id":2226,"implemented":false,"kind":"function","modifiers":[],"name":"increaseAllowance","nameLocation":"159:17:12","nodeType":"FunctionDefinition","parameters":{"id":2222,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2219,"mutability":"mutable","name":"spender","nameLocation":"194:7:12","nodeType":"VariableDeclaration","scope":2226,"src":"186:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2218,"name":"address","nodeType":"ElementaryTypeName","src":"186:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2221,"mutability":"mutable","name":"addedValue","nameLocation":"219:10:12","nodeType":"VariableDeclaration","scope":2226,"src":"211:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2220,"name":"uint256","nodeType":"ElementaryTypeName","src":"211:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"176:59:12"},"returnParameters":{"id":2225,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2224,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2226,"src":"254:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2223,"name":"bool","nodeType":"ElementaryTypeName","src":"254:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"253:6:12"},"scope":2246,"src":"150:110:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"a457c2d7","id":2235,"implemented":false,"kind":"function","modifiers":[],"name":"decreaseAllowance","nameLocation":"275:17:12","nodeType":"FunctionDefinition","parameters":{"id":2231,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2228,"mutability":"mutable","name":"spender","nameLocation":"310:7:12","nodeType":"VariableDeclaration","scope":2235,"src":"302:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2227,"name":"address","nodeType":"ElementaryTypeName","src":"302:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2230,"mutability":"mutable","name":"subtractedValue","nameLocation":"335:15:12","nodeType":"VariableDeclaration","scope":2235,"src":"327:23:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2229,"name":"uint256","nodeType":"ElementaryTypeName","src":"327:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"292:64:12"},"returnParameters":{"id":2234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2233,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2235,"src":"375:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2232,"name":"bool","nodeType":"ElementaryTypeName","src":"375:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"374:6:12"},"scope":2246,"src":"266:115:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"a0712d68","id":2240,"implemented":false,"kind":"function","modifiers":[],"name":"mint","nameLocation":"396:4:12","nodeType":"FunctionDefinition","parameters":{"id":2238,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2237,"mutability":"mutable","name":"amount","nameLocation":"409:6:12","nodeType":"VariableDeclaration","scope":2240,"src":"401:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2236,"name":"uint256","nodeType":"ElementaryTypeName","src":"401:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"400:16:12"},"returnParameters":{"id":2239,"nodeType":"ParameterList","parameters":[],"src":"425:0:12"},"scope":2246,"src":"387:39:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"42966c68","id":2245,"implemented":false,"kind":"function","modifiers":[],"name":"burn","nameLocation":"441:4:12","nodeType":"FunctionDefinition","parameters":{"id":2243,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2242,"mutability":"mutable","name":"amount","nameLocation":"454:6:12","nodeType":"VariableDeclaration","scope":2245,"src":"446:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2241,"name":"uint256","nodeType":"ElementaryTypeName","src":"446:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"445:16:12"},"returnParameters":{"id":2244,"nodeType":"ParameterList","parameters":[],"src":"470:0:12"},"scope":2246,"src":"432:39:12","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2247,"src":"118:355:12","usedErrors":[]}],"src":"0:474:12"},"id":12},"contracts/interfaces/IMecenateBay.sol":{"ast":{"absolutePath":"contracts/interfaces/IMecenateBay.sol","exportedSymbols":{"IMecenateBay":[2262],"Structures":[2671]},"id":2263,"nodeType":"SourceUnit","nodes":[{"id":2248,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"0:23:13"},{"absolutePath":"contracts/library/Structures.sol","file":"../library/Structures.sol","id":2249,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2263,"sourceUnit":2672,"src":"25:35:13","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IMecenateBay","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":2262,"linearizedBaseContracts":[2262],"name":"IMecenateBay","nameLocation":"74:12:13","nodeType":"ContractDefinition","nodes":[{"functionSelector":"8a4473a9","id":2256,"implemented":false,"kind":"function","modifiers":[],"name":"allRequests","nameLocation":"103:11:13","nodeType":"FunctionDefinition","parameters":{"id":2250,"nodeType":"ParameterList","parameters":[],"src":"114:2:13"},"returnParameters":{"id":2255,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2254,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2256,"src":"167:30:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_BayRequest_$2670_memory_ptr_$dyn_memory_ptr","typeString":"struct Structures.BayRequest[]"},"typeName":{"baseType":{"id":2252,"nodeType":"UserDefinedTypeName","pathNode":{"id":2251,"name":"Structures.BayRequest","nameLocations":["167:10:13","178:10:13"],"nodeType":"IdentifierPath","referencedDeclaration":2670,"src":"167:21:13"},"referencedDeclaration":2670,"src":"167:21:13","typeDescriptions":{"typeIdentifier":"t_struct$_BayRequest_$2670_storage_ptr","typeString":"struct Structures.BayRequest"}},"id":2253,"nodeType":"ArrayTypeName","src":"167:23:13","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_BayRequest_$2670_storage_$dyn_storage_ptr","typeString":"struct Structures.BayRequest[]"}},"visibility":"internal"}],"src":"166:32:13"},"scope":2262,"src":"94:105:13","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"067bd3b4","id":2261,"implemented":false,"kind":"function","modifiers":[],"name":"contractCounter","nameLocation":"216:15:13","nodeType":"FunctionDefinition","parameters":{"id":2257,"nodeType":"ParameterList","parameters":[],"src":"231:2:13"},"returnParameters":{"id":2260,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2259,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2261,"src":"257:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2258,"name":"uint256","nodeType":"ElementaryTypeName","src":"257:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"256:9:13"},"scope":2262,"src":"207:59:13","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2263,"src":"64:205:13","usedErrors":[]}],"src":"0:271:13"},"id":13},"contracts/interfaces/IMecenateFeed.sol":{"ast":{"absolutePath":"contracts/interfaces/IMecenateFeed.sol","exportedSymbols":{"IMecenateFeed":[2341],"Structures":[2671]},"id":2342,"nodeType":"SourceUnit","nodes":[{"id":2264,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"0:23:14"},{"absolutePath":"contracts/library/Structures.sol","file":"../library/Structures.sol","id":2265,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2342,"sourceUnit":2672,"src":"25:35:14","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IMecenateFeed","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":2341,"linearizedBaseContracts":[2341],"name":"IMecenateFeed","nameLocation":"72:13:14","nodeType":"ContractDefinition","nodes":[{"functionSelector":"8c6838ba","id":2271,"implemented":false,"kind":"function","modifiers":[],"name":"getPost","nameLocation":"101:7:14","nodeType":"FunctionDefinition","parameters":{"id":2266,"nodeType":"ParameterList","parameters":[],"src":"108:2:14"},"returnParameters":{"id":2270,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2269,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2271,"src":"134:22:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_memory_ptr","typeString":"struct Structures.Post"},"typeName":{"id":2268,"nodeType":"UserDefinedTypeName","pathNode":{"id":2267,"name":"Structures.Post","nameLocations":["134:10:14","145:4:14"],"nodeType":"IdentifierPath","referencedDeclaration":2574,"src":"134:15:14"},"referencedDeclaration":2574,"src":"134:15:14","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage_ptr","typeString":"struct Structures.Post"}},"visibility":"internal"}],"src":"133:24:14"},"scope":2341,"src":"92:66:14","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"0917e776","id":2276,"implemented":false,"kind":"function","modifiers":[],"name":"getTotalStaked","nameLocation":"173:14:14","nodeType":"FunctionDefinition","parameters":{"id":2272,"nodeType":"ParameterList","parameters":[],"src":"187:2:14"},"returnParameters":{"id":2275,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2274,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2276,"src":"213:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2273,"name":"uint256","nodeType":"ElementaryTypeName","src":"213:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"212:9:14"},"scope":2341,"src":"164:58:14","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"17906c2e","id":2281,"implemented":false,"kind":"function","modifiers":[],"name":"postCount","nameLocation":"237:9:14","nodeType":"FunctionDefinition","parameters":{"id":2277,"nodeType":"ParameterList","parameters":[],"src":"246:2:14"},"returnParameters":{"id":2280,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2279,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2281,"src":"272:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2278,"name":"uint256","nodeType":"ElementaryTypeName","src":"272:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"271:9:14"},"scope":2341,"src":"228:53:14","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"07388dba","id":2293,"implemented":false,"kind":"function","modifiers":[],"name":"acceptPost","nameLocation":"296:10:14","nodeType":"FunctionDefinition","parameters":{"id":2291,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2284,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2293,"src":"316:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"typeName":{"id":2283,"nodeType":"UserDefinedTypeName","pathNode":{"id":2282,"name":"Structures.Tokens","nameLocations":["316:10:14","327:6:14"],"nodeType":"IdentifierPath","referencedDeclaration":2525,"src":"316:17:14"},"referencedDeclaration":2525,"src":"316:17:14","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":2286,"mutability":"mutable","name":"_amount","nameLocation":"351:7:14","nodeType":"VariableDeclaration","scope":2293,"src":"343:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2285,"name":"uint256","nodeType":"ElementaryTypeName","src":"343:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2288,"mutability":"mutable","name":"_funder","nameLocation":"376:7:14","nodeType":"VariableDeclaration","scope":2293,"src":"368:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2287,"name":"address","nodeType":"ElementaryTypeName","src":"368:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2290,"mutability":"mutable","name":"_buyer","nameLocation":"401:6:14","nodeType":"VariableDeclaration","scope":2293,"src":"393:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2289,"name":"address","nodeType":"ElementaryTypeName","src":"393:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"306:107:14"},"returnParameters":{"id":2292,"nodeType":"ParameterList","parameters":[],"src":"430:0:14"},"scope":2341,"src":"287:144:14","stateMutability":"payable","virtual":false,"visibility":"external"},{"functionSelector":"5c63ed69","id":2298,"implemented":false,"kind":"function","modifiers":[],"name":"getSellerStake","nameLocation":"446:14:14","nodeType":"FunctionDefinition","parameters":{"id":2294,"nodeType":"ParameterList","parameters":[],"src":"460:2:14"},"returnParameters":{"id":2297,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2296,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2298,"src":"486:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2295,"name":"uint256","nodeType":"ElementaryTypeName","src":"486:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"485:9:14"},"scope":2341,"src":"437:58:14","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"4c38d877","id":2303,"implemented":false,"kind":"function","modifiers":[],"name":"getBuyerStake","nameLocation":"510:13:14","nodeType":"FunctionDefinition","parameters":{"id":2299,"nodeType":"ParameterList","parameters":[],"src":"523:2:14"},"returnParameters":{"id":2302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2301,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2303,"src":"549:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2300,"name":"uint256","nodeType":"ElementaryTypeName","src":"549:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"548:9:14"},"scope":2341,"src":"501:57:14","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"d24e0c87","id":2308,"implemented":false,"kind":"function","modifiers":[],"name":"getPaymentRequested","nameLocation":"573:19:14","nodeType":"FunctionDefinition","parameters":{"id":2304,"nodeType":"ParameterList","parameters":[],"src":"592:2:14"},"returnParameters":{"id":2307,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2306,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2308,"src":"618:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2305,"name":"uint256","nodeType":"ElementaryTypeName","src":"618:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"617:9:14"},"scope":2341,"src":"564:63:14","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"faeb5e17","id":2313,"implemented":false,"kind":"function","modifiers":[],"name":"getStakeRequested","nameLocation":"642:17:14","nodeType":"FunctionDefinition","parameters":{"id":2309,"nodeType":"ParameterList","parameters":[],"src":"659:2:14"},"returnParameters":{"id":2312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2311,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2313,"src":"685:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2310,"name":"uint256","nodeType":"ElementaryTypeName","src":"685:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"684:9:14"},"scope":2341,"src":"633:61:14","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"4e69d560","id":2319,"implemented":false,"kind":"function","modifiers":[],"name":"getStatus","nameLocation":"709:9:14","nodeType":"FunctionDefinition","parameters":{"id":2314,"nodeType":"ParameterList","parameters":[],"src":"718:2:14"},"returnParameters":{"id":2318,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2317,"mutability":"mutable","name":"status","nameLocation":"766:6:14","nodeType":"VariableDeclaration","scope":2319,"src":"744:28:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"},"typeName":{"id":2316,"nodeType":"UserDefinedTypeName","pathNode":{"id":2315,"name":"Structures.PostStatus","nameLocations":["744:10:14","755:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":2521,"src":"744:21:14"},"referencedDeclaration":2521,"src":"744:21:14","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"visibility":"internal"}],"src":"743:30:14"},"scope":2341,"src":"700:74:14","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"010a38f5","id":2325,"implemented":false,"kind":"function","modifiers":[],"name":"getTokenId","nameLocation":"789:10:14","nodeType":"FunctionDefinition","parameters":{"id":2320,"nodeType":"ParameterList","parameters":[],"src":"799:2:14"},"returnParameters":{"id":2324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2323,"mutability":"mutable","name":"tokenId","nameLocation":"843:7:14","nodeType":"VariableDeclaration","scope":2325,"src":"825:25:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"typeName":{"id":2322,"nodeType":"UserDefinedTypeName","pathNode":{"id":2321,"name":"Structures.Tokens","nameLocations":["825:10:14","836:6:14"],"nodeType":"IdentifierPath","referencedDeclaration":2525,"src":"825:17:14"},"referencedDeclaration":2525,"src":"825:17:14","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"visibility":"internal"}],"src":"824:27:14"},"scope":2341,"src":"780:72:14","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"8da5cb5b","id":2330,"implemented":false,"kind":"function","modifiers":[],"name":"owner","nameLocation":"867:5:14","nodeType":"FunctionDefinition","parameters":{"id":2326,"nodeType":"ParameterList","parameters":[],"src":"872:2:14"},"returnParameters":{"id":2329,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2328,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2330,"src":"898:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2327,"name":"address","nodeType":"ElementaryTypeName","src":"898:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"897:9:14"},"scope":2341,"src":"858:49:14","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"54fd4d50","id":2335,"implemented":false,"kind":"function","modifiers":[],"name":"version","nameLocation":"922:7:14","nodeType":"FunctionDefinition","parameters":{"id":2331,"nodeType":"ParameterList","parameters":[],"src":"929:2:14"},"returnParameters":{"id":2334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2333,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2335,"src":"955:13:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2332,"name":"string","nodeType":"ElementaryTypeName","src":"955:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"954:15:14"},"scope":2341,"src":"913:57:14","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"729e2eb1","id":2340,"implemented":false,"kind":"function","modifiers":[],"name":"getEncryptedPost","nameLocation":"985:16:14","nodeType":"FunctionDefinition","parameters":{"id":2336,"nodeType":"ParameterList","parameters":[],"src":"1001:2:14"},"returnParameters":{"id":2339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2338,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2340,"src":"1027:12:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2337,"name":"bytes","nodeType":"ElementaryTypeName","src":"1027:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1026:14:14"},"scope":2341,"src":"976:65:14","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2342,"src":"62:981:14","usedErrors":[]}],"src":"0:1044:14"},"id":14},"contracts/interfaces/IMecenateFeedFactory.sol":{"ast":{"absolutePath":"contracts/interfaces/IMecenateFeedFactory.sol","exportedSymbols":{"IMecenateFeedFactory":[2419]},"id":2420,"nodeType":"SourceUnit","nodes":[{"id":2343,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"0:23:15"},{"abstract":false,"baseContracts":[],"canonicalName":"IMecenateFeedFactory","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":2419,"linearizedBaseContracts":[2419],"name":"IMecenateFeedFactory","nameLocation":"35:20:15","nodeType":"ContractDefinition","nodes":[{"functionSelector":"8da5cb5b","id":2348,"implemented":false,"kind":"function","modifiers":[],"name":"owner","nameLocation":"71:5:15","nodeType":"FunctionDefinition","parameters":{"id":2344,"nodeType":"ParameterList","parameters":[],"src":"76:2:15"},"returnParameters":{"id":2347,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2346,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2348,"src":"102:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":2345,"name":"address","nodeType":"ElementaryTypeName","src":"102:15:15","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"101:17:15"},"scope":2419,"src":"62:57:15","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"18da0011","id":2353,"implemented":false,"kind":"function","modifiers":[],"name":"treasuryContract","nameLocation":"134:16:15","nodeType":"FunctionDefinition","parameters":{"id":2349,"nodeType":"ParameterList","parameters":[],"src":"150:2:15"},"returnParameters":{"id":2352,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2351,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2353,"src":"176:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":2350,"name":"address","nodeType":"ElementaryTypeName","src":"176:15:15","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"175:17:15"},"scope":2419,"src":"125:68:15","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"d63605b8","id":2359,"implemented":false,"kind":"function","modifiers":[],"name":"feeds","nameLocation":"208:5:15","nodeType":"FunctionDefinition","parameters":{"id":2354,"nodeType":"ParameterList","parameters":[],"src":"213:2:15"},"returnParameters":{"id":2358,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2357,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2359,"src":"239:16:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2355,"name":"address","nodeType":"ElementaryTypeName","src":"239:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2356,"nodeType":"ArrayTypeName","src":"239:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"238:18:15"},"scope":2419,"src":"199:58:15","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"067bd3b4","id":2364,"implemented":false,"kind":"function","modifiers":[],"name":"contractCounter","nameLocation":"272:15:15","nodeType":"FunctionDefinition","parameters":{"id":2360,"nodeType":"ParameterList","parameters":[],"src":"287:2:15"},"returnParameters":{"id":2363,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2362,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2364,"src":"313:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2361,"name":"uint256","nodeType":"ElementaryTypeName","src":"313:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"312:9:15"},"scope":2419,"src":"263:59:15","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"e58fdd04","id":2371,"implemented":false,"kind":"function","modifiers":[],"name":"isFeed","nameLocation":"337:6:15","nodeType":"FunctionDefinition","parameters":{"id":2367,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2366,"mutability":"mutable","name":"_feed","nameLocation":"352:5:15","nodeType":"VariableDeclaration","scope":2371,"src":"344:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2365,"name":"address","nodeType":"ElementaryTypeName","src":"344:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"343:15:15"},"returnParameters":{"id":2370,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2369,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2371,"src":"382:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2368,"name":"bool","nodeType":"ElementaryTypeName","src":"382:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"381:6:15"},"scope":2419,"src":"328:60:15","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"f77800e5","id":2376,"implemented":false,"kind":"function","modifiers":[],"name":"museToken","nameLocation":"403:9:15","nodeType":"FunctionDefinition","parameters":{"id":2372,"nodeType":"ParameterList","parameters":[],"src":"412:2:15"},"returnParameters":{"id":2375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2374,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2376,"src":"438:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2373,"name":"address","nodeType":"ElementaryTypeName","src":"438:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"437:9:15"},"scope":2419,"src":"394:53:15","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"4b57b0be","id":2381,"implemented":false,"kind":"function","modifiers":[],"name":"wethToken","nameLocation":"462:9:15","nodeType":"FunctionDefinition","parameters":{"id":2377,"nodeType":"ParameterList","parameters":[],"src":"471:2:15"},"returnParameters":{"id":2380,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2379,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2381,"src":"497:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2378,"name":"address","nodeType":"ElementaryTypeName","src":"497:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"496:9:15"},"scope":2419,"src":"453:53:15","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"be22f546","id":2386,"implemented":false,"kind":"function","modifiers":[],"name":"daiToken","nameLocation":"521:8:15","nodeType":"FunctionDefinition","parameters":{"id":2382,"nodeType":"ParameterList","parameters":[],"src":"529:2:15"},"returnParameters":{"id":2385,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2384,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2386,"src":"555:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2383,"name":"address","nodeType":"ElementaryTypeName","src":"555:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"554:9:15"},"scope":2419,"src":"512:52:15","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"f887ea40","id":2391,"implemented":false,"kind":"function","modifiers":[],"name":"router","nameLocation":"579:6:15","nodeType":"FunctionDefinition","parameters":{"id":2387,"nodeType":"ParameterList","parameters":[],"src":"585:2:15"},"returnParameters":{"id":2390,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2389,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2391,"src":"611:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2388,"name":"address","nodeType":"ElementaryTypeName","src":"611:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"610:9:15"},"scope":2419,"src":"570:50:15","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"d223a564","id":2398,"implemented":false,"kind":"function","modifiers":[],"name":"getRouterFee","nameLocation":"635:12:15","nodeType":"FunctionDefinition","parameters":{"id":2394,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2393,"mutability":"mutable","name":"tokenId","nameLocation":"654:7:15","nodeType":"VariableDeclaration","scope":2398,"src":"648:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2392,"name":"uint8","nodeType":"ElementaryTypeName","src":"648:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"647:15:15"},"returnParameters":{"id":2397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2396,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2398,"src":"686:6:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":2395,"name":"uint24","nodeType":"ElementaryTypeName","src":"686:6:15","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"685:8:15"},"scope":2419,"src":"626:68:15","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"5dc96d16","id":2403,"implemented":false,"kind":"function","modifiers":[],"name":"burnEnabled","nameLocation":"709:11:15","nodeType":"FunctionDefinition","parameters":{"id":2399,"nodeType":"ParameterList","parameters":[],"src":"720:2:15"},"returnParameters":{"id":2402,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2401,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2403,"src":"746:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2400,"name":"bool","nodeType":"ElementaryTypeName","src":"746:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"745:6:15"},"scope":2419,"src":"700:52:15","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"54fd4d50","id":2408,"implemented":false,"kind":"function","modifiers":[],"name":"version","nameLocation":"767:7:15","nodeType":"FunctionDefinition","parameters":{"id":2404,"nodeType":"ParameterList","parameters":[],"src":"774:2:15"},"returnParameters":{"id":2407,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2406,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2408,"src":"800:13:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2405,"name":"string","nodeType":"ElementaryTypeName","src":"800:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"799:15:15"},"scope":2419,"src":"758:57:15","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"3ec4f23d","id":2413,"implemented":false,"kind":"function","modifiers":[],"name":"easSchema","nameLocation":"830:9:15","nodeType":"FunctionDefinition","parameters":{"id":2409,"nodeType":"ParameterList","parameters":[],"src":"839:2:15"},"returnParameters":{"id":2412,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2411,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2413,"src":"865:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2410,"name":"bytes32","nodeType":"ElementaryTypeName","src":"865:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"864:9:15"},"scope":2419,"src":"821:53:15","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"cd77b52c","id":2418,"implemented":false,"kind":"function","modifiers":[],"name":"easContract","nameLocation":"889:11:15","nodeType":"FunctionDefinition","parameters":{"id":2414,"nodeType":"ParameterList","parameters":[],"src":"900:2:15"},"returnParameters":{"id":2417,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2416,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2418,"src":"926:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2415,"name":"address","nodeType":"ElementaryTypeName","src":"926:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"925:9:15"},"scope":2419,"src":"880:55:15","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2420,"src":"25:912:15","usedErrors":[]}],"src":"0:938:15"},"id":15},"contracts/interfaces/IMecenateTreasury.sol":{"ast":{"absolutePath":"contracts/interfaces/IMecenateTreasury.sol","exportedSymbols":{"IMecenateTreasury":[2432]},"id":2433,"nodeType":"SourceUnit","nodes":[{"id":2421,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"0:23:16"},{"abstract":false,"baseContracts":[],"canonicalName":"IMecenateTreasury","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":2432,"linearizedBaseContracts":[2432],"name":"IMecenateTreasury","nameLocation":"37:17:16","nodeType":"ContractDefinition","nodes":[{"functionSelector":"808fc206","id":2426,"implemented":false,"kind":"function","modifiers":[],"name":"globalFee","nameLocation":"71:9:16","nodeType":"FunctionDefinition","parameters":{"id":2422,"nodeType":"ParameterList","parameters":[],"src":"80:2:16"},"returnParameters":{"id":2425,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2424,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2426,"src":"106:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2423,"name":"uint256","nodeType":"ElementaryTypeName","src":"106:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"105:9:16"},"scope":2432,"src":"62:53:16","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"91792d5b","id":2431,"implemented":false,"kind":"function","modifiers":[],"name":"fixedFee","nameLocation":"132:8:16","nodeType":"FunctionDefinition","parameters":{"id":2427,"nodeType":"ParameterList","parameters":[],"src":"140:2:16"},"returnParameters":{"id":2430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2429,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2431,"src":"166:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2428,"name":"uint256","nodeType":"ElementaryTypeName","src":"166:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"165:9:16"},"scope":2432,"src":"123:52:16","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2433,"src":"27:151:16","usedErrors":[]}],"src":"0:180:16"},"id":16},"contracts/interfaces/IMecenateUsers.sol":{"ast":{"absolutePath":"contracts/interfaces/IMecenateUsers.sol","exportedSymbols":{"IMecenateUsers":[2490],"Structures":[2671]},"id":2491,"license":"MIT","nodeType":"SourceUnit","nodes":[{"absolutePath":"contracts/library/Structures.sol","file":"../library/Structures.sol","id":2434,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2491,"sourceUnit":2672,"src":"33:35:17","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IMecenateUsers","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":2490,"linearizedBaseContracts":[2490],"name":"IMecenateUsers","nameLocation":"80:14:17","nodeType":"ContractDefinition","nodes":[{"functionSelector":"0a38178c","id":2439,"implemented":false,"kind":"function","modifiers":[],"name":"registerUser","nameLocation":"110:12:17","nodeType":"FunctionDefinition","parameters":{"id":2437,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2436,"mutability":"mutable","name":"metadata","nameLocation":"136:8:17","nodeType":"VariableDeclaration","scope":2439,"src":"123:21:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2435,"name":"bytes","nodeType":"ElementaryTypeName","src":"123:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"122:23:17"},"returnParameters":{"id":2438,"nodeType":"ParameterList","parameters":[],"src":"154:0:17"},"scope":2490,"src":"101:54:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"00ce8e3e","id":2445,"implemented":false,"kind":"function","modifiers":[],"name":"getUsers","nameLocation":"170:8:17","nodeType":"FunctionDefinition","parameters":{"id":2440,"nodeType":"ParameterList","parameters":[],"src":"178:2:17"},"returnParameters":{"id":2444,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2443,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2445,"src":"204:16:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2441,"name":"address","nodeType":"ElementaryTypeName","src":"204:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2442,"nodeType":"ArrayTypeName","src":"204:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"203:18:17"},"scope":2490,"src":"161:61:17","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"b5cb15f7","id":2450,"implemented":false,"kind":"function","modifiers":[],"name":"getUserCount","nameLocation":"237:12:17","nodeType":"FunctionDefinition","parameters":{"id":2446,"nodeType":"ParameterList","parameters":[],"src":"249:2:17"},"returnParameters":{"id":2449,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2448,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2450,"src":"275:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2447,"name":"uint256","nodeType":"ElementaryTypeName","src":"275:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"274:9:17"},"scope":2490,"src":"228:56:17","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"c6e064ad","id":2457,"implemented":false,"kind":"function","modifiers":[],"name":"getUserAt","nameLocation":"299:9:17","nodeType":"FunctionDefinition","parameters":{"id":2453,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2452,"mutability":"mutable","name":"index","nameLocation":"317:5:17","nodeType":"VariableDeclaration","scope":2457,"src":"309:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2451,"name":"uint256","nodeType":"ElementaryTypeName","src":"309:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"308:15:17"},"returnParameters":{"id":2456,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2455,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2457,"src":"347:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2454,"name":"address","nodeType":"ElementaryTypeName","src":"347:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"346:9:17"},"scope":2490,"src":"290:66:17","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"48990fcc","id":2464,"implemented":false,"kind":"function","modifiers":[],"name":"checkifUserExist","nameLocation":"371:16:17","nodeType":"FunctionDefinition","parameters":{"id":2460,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2459,"mutability":"mutable","name":"userAddress","nameLocation":"396:11:17","nodeType":"VariableDeclaration","scope":2464,"src":"388:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2458,"name":"address","nodeType":"ElementaryTypeName","src":"388:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"387:21:17"},"returnParameters":{"id":2463,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2462,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2464,"src":"432:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2461,"name":"bool","nodeType":"ElementaryTypeName","src":"432:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"431:6:17"},"scope":2490,"src":"362:76:17","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"cf5caa12","id":2474,"implemented":false,"kind":"function","modifiers":[],"name":"getPaginatedUsers","nameLocation":"453:17:17","nodeType":"FunctionDefinition","parameters":{"id":2469,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2466,"mutability":"mutable","name":"startIndex","nameLocation":"488:10:17","nodeType":"VariableDeclaration","scope":2474,"src":"480:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2465,"name":"uint256","nodeType":"ElementaryTypeName","src":"480:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2468,"mutability":"mutable","name":"endIndex","nameLocation":"516:8:17","nodeType":"VariableDeclaration","scope":2474,"src":"508:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2467,"name":"uint256","nodeType":"ElementaryTypeName","src":"508:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"470:60:17"},"returnParameters":{"id":2473,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2472,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2474,"src":"554:16:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2470,"name":"address","nodeType":"ElementaryTypeName","src":"554:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2471,"nodeType":"ArrayTypeName","src":"554:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"553:18:17"},"scope":2490,"src":"444:128:17","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"ef2a8764","id":2482,"implemented":false,"kind":"function","modifiers":[],"name":"getUserMetadata","nameLocation":"587:15:17","nodeType":"FunctionDefinition","parameters":{"id":2477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2476,"mutability":"mutable","name":"userAddress","nameLocation":"620:11:17","nodeType":"VariableDeclaration","scope":2482,"src":"612:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2475,"name":"address","nodeType":"ElementaryTypeName","src":"612:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"602:35:17"},"returnParameters":{"id":2481,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2480,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2482,"src":"661:22:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_User_$2627_memory_ptr","typeString":"struct Structures.User"},"typeName":{"id":2479,"nodeType":"UserDefinedTypeName","pathNode":{"id":2478,"name":"Structures.User","nameLocations":["661:10:17","672:4:17"],"nodeType":"IdentifierPath","referencedDeclaration":2627,"src":"661:15:17"},"referencedDeclaration":2627,"src":"661:15:17","typeDescriptions":{"typeIdentifier":"t_struct$_User_$2627_storage_ptr","typeString":"struct Structures.User"}},"visibility":"internal"}],"src":"660:24:17"},"scope":2490,"src":"578:107:17","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"11231fe0","id":2489,"implemented":false,"kind":"function","modifiers":[],"name":"getUserPublicKey","nameLocation":"700:16:17","nodeType":"FunctionDefinition","parameters":{"id":2485,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2484,"mutability":"mutable","name":"userAddress","nameLocation":"734:11:17","nodeType":"VariableDeclaration","scope":2489,"src":"726:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2483,"name":"address","nodeType":"ElementaryTypeName","src":"726:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"716:35:17"},"returnParameters":{"id":2488,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2487,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2489,"src":"775:12:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2486,"name":"bytes","nodeType":"ElementaryTypeName","src":"775:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"774:14:17"},"scope":2490,"src":"691:98:17","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2491,"src":"70:721:17","usedErrors":[]}],"src":"33:759:17"},"id":17},"contracts/interfaces/IWETH.sol":{"ast":{"absolutePath":"contracts/interfaces/IWETH.sol","exportedSymbols":{"IWETH":[2510]},"id":2511,"nodeType":"SourceUnit","nodes":[{"id":2492,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"0:23:18"},{"abstract":false,"baseContracts":[],"canonicalName":"IWETH","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":2510,"linearizedBaseContracts":[2510],"name":"IWETH","nameLocation":"37:5:18","nodeType":"ContractDefinition","nodes":[{"functionSelector":"d0e30db0","id":2495,"implemented":false,"kind":"function","modifiers":[],"name":"deposit","nameLocation":"59:7:18","nodeType":"FunctionDefinition","parameters":{"id":2493,"nodeType":"ParameterList","parameters":[],"src":"66:2:18"},"returnParameters":{"id":2494,"nodeType":"ParameterList","parameters":[],"src":"85:0:18"},"scope":2510,"src":"50:36:18","stateMutability":"payable","virtual":false,"visibility":"external"},{"functionSelector":"a9059cbb","id":2504,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"103:8:18","nodeType":"FunctionDefinition","parameters":{"id":2500,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2497,"mutability":"mutable","name":"to","nameLocation":"120:2:18","nodeType":"VariableDeclaration","scope":2504,"src":"112:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2496,"name":"address","nodeType":"ElementaryTypeName","src":"112:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2499,"mutability":"mutable","name":"value","nameLocation":"132:5:18","nodeType":"VariableDeclaration","scope":2504,"src":"124:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2498,"name":"uint256","nodeType":"ElementaryTypeName","src":"124:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"111:27:18"},"returnParameters":{"id":2503,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2502,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2504,"src":"157:4:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2501,"name":"bool","nodeType":"ElementaryTypeName","src":"157:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"156:6:18"},"scope":2510,"src":"94:69:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"2e1a7d4d","id":2509,"implemented":false,"kind":"function","modifiers":[],"name":"withdraw","nameLocation":"180:8:18","nodeType":"FunctionDefinition","parameters":{"id":2507,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2506,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2509,"src":"189:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2505,"name":"uint256","nodeType":"ElementaryTypeName","src":"189:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"188:9:18"},"returnParameters":{"id":2508,"nodeType":"ParameterList","parameters":[],"src":"206:0:18"},"scope":2510,"src":"171:36:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2511,"src":"27:183:18","usedErrors":[]}],"src":"0:212:18"},"id":18},"contracts/library/Structures.sol":{"ast":{"absolutePath":"contracts/library/Structures.sol","exportedSymbols":{"Structures":[2671]},"id":2672,"nodeType":"SourceUnit","nodes":[{"id":2512,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"113:23:19"},{"abstract":false,"baseContracts":[],"canonicalName":"Structures","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":2671,"linearizedBaseContracts":[2671],"name":"Structures","nameLocation":"146:10:19","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Structures.PostStatus","id":2521,"members":[{"id":2513,"name":"Waiting","nameLocation":"189:7:19","nodeType":"EnumValue","src":"189:7:19"},{"id":2514,"name":"Proposed","nameLocation":"206:8:19","nodeType":"EnumValue","src":"206:8:19"},{"id":2515,"name":"Accepted","nameLocation":"224:8:19","nodeType":"EnumValue","src":"224:8:19"},{"id":2516,"name":"Submitted","nameLocation":"242:9:19","nodeType":"EnumValue","src":"242:9:19"},{"id":2517,"name":"Finalized","nameLocation":"261:9:19","nodeType":"EnumValue","src":"261:9:19"},{"id":2518,"name":"Punished","nameLocation":"280:8:19","nodeType":"EnumValue","src":"280:8:19"},{"id":2519,"name":"Revealed","nameLocation":"298:8:19","nodeType":"EnumValue","src":"298:8:19"},{"id":2520,"name":"Renounced","nameLocation":"316:9:19","nodeType":"EnumValue","src":"316:9:19"}],"name":"PostStatus","nameLocation":"168:10:19","nodeType":"EnumDefinition","src":"163:168:19"},{"canonicalName":"Structures.Tokens","id":2525,"members":[{"id":2522,"name":"NaN","nameLocation":"359:3:19","nodeType":"EnumValue","src":"359:3:19"},{"id":2523,"name":"MUSE","nameLocation":"372:4:19","nodeType":"EnumValue","src":"372:4:19"},{"id":2524,"name":"DAI","nameLocation":"386:3:19","nodeType":"EnumValue","src":"386:3:19"}],"name":"Tokens","nameLocation":"342:6:19","nodeType":"EnumDefinition","src":"337:58:19"},{"canonicalName":"Structures.PostType","id":2531,"members":[{"id":2526,"name":"Text","nameLocation":"425:4:19","nodeType":"EnumValue","src":"425:4:19"},{"id":2527,"name":"Image","nameLocation":"439:5:19","nodeType":"EnumValue","src":"439:5:19"},{"id":2528,"name":"Video","nameLocation":"454:5:19","nodeType":"EnumValue","src":"454:5:19"},{"id":2529,"name":"Audio","nameLocation":"469:5:19","nodeType":"EnumValue","src":"469:5:19"},{"id":2530,"name":"File","nameLocation":"484:4:19","nodeType":"EnumValue","src":"484:4:19"}],"name":"PostType","nameLocation":"406:8:19","nodeType":"EnumDefinition","src":"401:93:19"},{"canonicalName":"Structures.PostDuration","id":2537,"members":[{"id":2532,"name":"OneDay","nameLocation":"527:6:19","nodeType":"EnumValue","src":"527:6:19"},{"id":2533,"name":"ThreeDays","nameLocation":"543:9:19","nodeType":"EnumValue","src":"543:9:19"},{"id":2534,"name":"OneWeek","nameLocation":"562:7:19","nodeType":"EnumValue","src":"562:7:19"},{"id":2535,"name":"TwoWeeks","nameLocation":"579:8:19","nodeType":"EnumValue","src":"579:8:19"},{"id":2536,"name":"OneMonth","nameLocation":"597:8:19","nodeType":"EnumValue","src":"597:8:19"}],"name":"PostDuration","nameLocation":"504:12:19","nodeType":"EnumDefinition","src":"499:112:19"},{"canonicalName":"Structures.FeedSettings","id":2550,"members":[{"constant":false,"id":2539,"mutability":"mutable","name":"punishmentRatio","nameLocation":"655:15:19","nodeType":"VariableDeclaration","scope":2550,"src":"647:23:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2538,"name":"uint256","nodeType":"ElementaryTypeName","src":"647:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2541,"mutability":"mutable","name":"postCount","nameLocation":"688:9:19","nodeType":"VariableDeclaration","scope":2550,"src":"680:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2540,"name":"uint256","nodeType":"ElementaryTypeName","src":"680:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2543,"mutability":"mutable","name":"usersModuleContract","nameLocation":"715:19:19","nodeType":"VariableDeclaration","scope":2550,"src":"707:27:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2542,"name":"address","nodeType":"ElementaryTypeName","src":"707:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2545,"mutability":"mutable","name":"factoryContract","nameLocation":"752:15:19","nodeType":"VariableDeclaration","scope":2550,"src":"744:23:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2544,"name":"address","nodeType":"ElementaryTypeName","src":"744:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2547,"mutability":"mutable","name":"router","nameLocation":"785:6:19","nodeType":"VariableDeclaration","scope":2550,"src":"777:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2546,"name":"address","nodeType":"ElementaryTypeName","src":"777:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2549,"mutability":"mutable","name":"version","nameLocation":"808:7:19","nodeType":"VariableDeclaration","scope":2550,"src":"801:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2548,"name":"string","nodeType":"ElementaryTypeName","src":"801:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"FeedSettings","nameLocation":"624:12:19","nodeType":"StructDefinition","scope":2671,"src":"617:205:19","visibility":"public"},{"canonicalName":"Structures.FactorySettings","id":2567,"members":[{"constant":false,"id":2552,"mutability":"mutable","name":"treasuryContract","nameLocation":"869:16:19","nodeType":"VariableDeclaration","scope":2567,"src":"861:24:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2551,"name":"address","nodeType":"ElementaryTypeName","src":"861:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2554,"mutability":"mutable","name":"usersModuleContract","nameLocation":"903:19:19","nodeType":"VariableDeclaration","scope":2567,"src":"895:27:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2553,"name":"address","nodeType":"ElementaryTypeName","src":"895:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2556,"mutability":"mutable","name":"easContract","nameLocation":"940:11:19","nodeType":"VariableDeclaration","scope":2567,"src":"932:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2555,"name":"address","nodeType":"ElementaryTypeName","src":"932:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2558,"mutability":"mutable","name":"easSchema","nameLocation":"969:9:19","nodeType":"VariableDeclaration","scope":2567,"src":"961:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2557,"name":"bytes32","nodeType":"ElementaryTypeName","src":"961:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2560,"mutability":"mutable","name":"museToken","nameLocation":"996:9:19","nodeType":"VariableDeclaration","scope":2567,"src":"988:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2559,"name":"address","nodeType":"ElementaryTypeName","src":"988:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2562,"mutability":"mutable","name":"daiToken","nameLocation":"1023:8:19","nodeType":"VariableDeclaration","scope":2567,"src":"1015:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2561,"name":"address","nodeType":"ElementaryTypeName","src":"1015:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2564,"mutability":"mutable","name":"wethToken","nameLocation":"1049:9:19","nodeType":"VariableDeclaration","scope":2567,"src":"1041:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2563,"name":"address","nodeType":"ElementaryTypeName","src":"1041:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2566,"mutability":"mutable","name":"router","nameLocation":"1076:6:19","nodeType":"VariableDeclaration","scope":2567,"src":"1068:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2565,"name":"address","nodeType":"ElementaryTypeName","src":"1068:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"FactorySettings","nameLocation":"835:15:19","nodeType":"StructDefinition","scope":2671,"src":"828:261:19","visibility":"public"},{"canonicalName":"Structures.Post","id":2574,"members":[{"constant":false,"id":2570,"mutability":"mutable","name":"creator","nameLocation":"1203:7:19","nodeType":"VariableDeclaration","scope":2574,"src":"1198:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_User_$2627_storage_ptr","typeString":"struct Structures.User"},"typeName":{"id":2569,"nodeType":"UserDefinedTypeName","pathNode":{"id":2568,"name":"User","nameLocations":["1198:4:19"],"nodeType":"IdentifierPath","referencedDeclaration":2627,"src":"1198:4:19"},"referencedDeclaration":2627,"src":"1198:4:19","typeDescriptions":{"typeIdentifier":"t_struct$_User_$2627_storage_ptr","typeString":"struct Structures.User"}},"visibility":"internal"},{"constant":false,"id":2573,"mutability":"mutable","name":"postdata","nameLocation":"1229:8:19","nodeType":"VariableDeclaration","scope":2574,"src":"1220:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage_ptr","typeString":"struct Structures.PostData"},"typeName":{"id":2572,"nodeType":"UserDefinedTypeName","pathNode":{"id":2571,"name":"PostData","nameLocations":["1220:8:19"],"nodeType":"IdentifierPath","referencedDeclaration":2584,"src":"1220:8:19"},"referencedDeclaration":2584,"src":"1220:8:19","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage_ptr","typeString":"struct Structures.PostData"}},"visibility":"internal"}],"name":"Post","nameLocation":"1183:4:19","nodeType":"StructDefinition","scope":2671,"src":"1176:68:19","visibility":"public"},{"canonicalName":"Structures.PostData","id":2584,"members":[{"constant":false,"id":2577,"mutability":"mutable","name":"settings","nameLocation":"1382:8:19","nodeType":"VariableDeclaration","scope":2584,"src":"1369:21:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2607_storage_ptr","typeString":"struct Structures.PostSettings"},"typeName":{"id":2576,"nodeType":"UserDefinedTypeName","pathNode":{"id":2575,"name":"PostSettings","nameLocations":["1369:12:19"],"nodeType":"IdentifierPath","referencedDeclaration":2607,"src":"1369:12:19"},"referencedDeclaration":2607,"src":"1369:12:19","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2607_storage_ptr","typeString":"struct Structures.PostSettings"}},"visibility":"internal"},{"constant":false,"id":2580,"mutability":"mutable","name":"escrow","nameLocation":"1411:6:19","nodeType":"VariableDeclaration","scope":2584,"src":"1400:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage_ptr","typeString":"struct Structures.PostEscrow"},"typeName":{"id":2579,"nodeType":"UserDefinedTypeName","pathNode":{"id":2578,"name":"PostEscrow","nameLocations":["1400:10:19"],"nodeType":"IdentifierPath","referencedDeclaration":2620,"src":"1400:10:19"},"referencedDeclaration":2620,"src":"1400:10:19","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage_ptr","typeString":"struct Structures.PostEscrow"}},"visibility":"internal"},{"constant":false,"id":2583,"mutability":"mutable","name":"data","nameLocation":"1445:4:19","nodeType":"VariableDeclaration","scope":2584,"src":"1427:22:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_PostEncryptedData_$2591_storage_ptr","typeString":"struct Structures.PostEncryptedData"},"typeName":{"id":2582,"nodeType":"UserDefinedTypeName","pathNode":{"id":2581,"name":"PostEncryptedData","nameLocations":["1427:17:19"],"nodeType":"IdentifierPath","referencedDeclaration":2591,"src":"1427:17:19"},"referencedDeclaration":2591,"src":"1427:17:19","typeDescriptions":{"typeIdentifier":"t_struct$_PostEncryptedData_$2591_storage_ptr","typeString":"struct Structures.PostEncryptedData"}},"visibility":"internal"}],"name":"PostData","nameLocation":"1350:8:19","nodeType":"StructDefinition","scope":2671,"src":"1343:113:19","visibility":"public"},{"canonicalName":"Structures.PostEncryptedData","id":2591,"members":[{"constant":false,"id":2586,"mutability":"mutable","name":"encryptedData","nameLocation":"1606:13:19","nodeType":"VariableDeclaration","scope":2591,"src":"1600:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2585,"name":"bytes","nodeType":"ElementaryTypeName","src":"1600:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2588,"mutability":"mutable","name":"encryptedKey","nameLocation":"1635:12:19","nodeType":"VariableDeclaration","scope":2591,"src":"1629:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2587,"name":"bytes","nodeType":"ElementaryTypeName","src":"1629:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2590,"mutability":"mutable","name":"decryptedData","nameLocation":"1663:13:19","nodeType":"VariableDeclaration","scope":2591,"src":"1657:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2589,"name":"bytes","nodeType":"ElementaryTypeName","src":"1657:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"PostEncryptedData","nameLocation":"1572:17:19","nodeType":"StructDefinition","scope":2671,"src":"1565:118:19","visibility":"public"},{"canonicalName":"Structures.PostSettings","id":2607,"members":[{"constant":false,"id":2594,"mutability":"mutable","name":"status","nameLocation":"1827:6:19","nodeType":"VariableDeclaration","scope":2607,"src":"1816:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"},"typeName":{"id":2593,"nodeType":"UserDefinedTypeName","pathNode":{"id":2592,"name":"PostStatus","nameLocations":["1816:10:19"],"nodeType":"IdentifierPath","referencedDeclaration":2521,"src":"1816:10:19"},"referencedDeclaration":2521,"src":"1816:10:19","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"visibility":"internal"},{"constant":false,"id":2597,"mutability":"mutable","name":"postType","nameLocation":"1852:8:19","nodeType":"VariableDeclaration","scope":2607,"src":"1843:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PostType_$2531","typeString":"enum Structures.PostType"},"typeName":{"id":2596,"nodeType":"UserDefinedTypeName","pathNode":{"id":2595,"name":"PostType","nameLocations":["1843:8:19"],"nodeType":"IdentifierPath","referencedDeclaration":2531,"src":"1843:8:19"},"referencedDeclaration":2531,"src":"1843:8:19","typeDescriptions":{"typeIdentifier":"t_enum$_PostType_$2531","typeString":"enum Structures.PostType"}},"visibility":"internal"},{"constant":false,"id":2599,"mutability":"mutable","name":"creationTimeStamp","nameLocation":"1878:17:19","nodeType":"VariableDeclaration","scope":2607,"src":"1870:25:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2598,"name":"uint256","nodeType":"ElementaryTypeName","src":"1870:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2601,"mutability":"mutable","name":"endTimeStamp","nameLocation":"1913:12:19","nodeType":"VariableDeclaration","scope":2607,"src":"1905:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2600,"name":"uint256","nodeType":"ElementaryTypeName","src":"1905:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2603,"mutability":"mutable","name":"duration","nameLocation":"1943:8:19","nodeType":"VariableDeclaration","scope":2607,"src":"1935:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2602,"name":"uint256","nodeType":"ElementaryTypeName","src":"1935:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2606,"mutability":"mutable","name":"tokenId","nameLocation":"1968:7:19","nodeType":"VariableDeclaration","scope":2607,"src":"1961:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"typeName":{"id":2605,"nodeType":"UserDefinedTypeName","pathNode":{"id":2604,"name":"Tokens","nameLocations":["1961:6:19"],"nodeType":"IdentifierPath","referencedDeclaration":2525,"src":"1961:6:19"},"referencedDeclaration":2525,"src":"1961:6:19","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"visibility":"internal"}],"name":"PostSettings","nameLocation":"1793:12:19","nodeType":"StructDefinition","scope":2671,"src":"1786:196:19","visibility":"public"},{"canonicalName":"Structures.PostEscrow","id":2620,"members":[{"constant":false,"id":2609,"mutability":"mutable","name":"buyer","nameLocation":"2119:5:19","nodeType":"VariableDeclaration","scope":2620,"src":"2111:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2608,"name":"address","nodeType":"ElementaryTypeName","src":"2111:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2611,"mutability":"mutable","name":"seller","nameLocation":"2142:6:19","nodeType":"VariableDeclaration","scope":2620,"src":"2134:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2610,"name":"address","nodeType":"ElementaryTypeName","src":"2134:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2613,"mutability":"mutable","name":"stake","nameLocation":"2166:5:19","nodeType":"VariableDeclaration","scope":2620,"src":"2158:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2612,"name":"uint256","nodeType":"ElementaryTypeName","src":"2158:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2615,"mutability":"mutable","name":"payment","nameLocation":"2189:7:19","nodeType":"VariableDeclaration","scope":2620,"src":"2181:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2614,"name":"uint256","nodeType":"ElementaryTypeName","src":"2181:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2617,"mutability":"mutable","name":"punishment","nameLocation":"2214:10:19","nodeType":"VariableDeclaration","scope":2620,"src":"2206:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2616,"name":"uint256","nodeType":"ElementaryTypeName","src":"2206:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2619,"mutability":"mutable","name":"penalty","nameLocation":"2242:7:19","nodeType":"VariableDeclaration","scope":2620,"src":"2234:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2618,"name":"uint256","nodeType":"ElementaryTypeName","src":"2234:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"PostEscrow","nameLocation":"2090:10:19","nodeType":"StructDefinition","scope":2671,"src":"2083:173:19","visibility":"public"},{"canonicalName":"Structures.User","id":2627,"members":[{"constant":false,"id":2622,"mutability":"mutable","name":"evmAddress","nameLocation":"2373:10:19","nodeType":"VariableDeclaration","scope":2627,"src":"2365:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2621,"name":"address","nodeType":"ElementaryTypeName","src":"2365:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2624,"mutability":"mutable","name":"sismoVaultId","nameLocation":"2399:12:19","nodeType":"VariableDeclaration","scope":2627,"src":"2393:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2623,"name":"bytes","nodeType":"ElementaryTypeName","src":"2393:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2626,"mutability":"mutable","name":"publicKey","nameLocation":"2427:9:19","nodeType":"VariableDeclaration","scope":2627,"src":"2421:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2625,"name":"bytes","nodeType":"ElementaryTypeName","src":"2421:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"User","nameLocation":"2350:4:19","nodeType":"StructDefinition","scope":2671,"src":"2343:100:19","visibility":"public"},{"canonicalName":"Structures.Feed","id":2652,"members":[{"constant":false,"id":2629,"mutability":"mutable","name":"contractAddress","nameLocation":"2560:15:19","nodeType":"VariableDeclaration","scope":2652,"src":"2552:23:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2628,"name":"address","nodeType":"ElementaryTypeName","src":"2552:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2631,"mutability":"mutable","name":"owner","nameLocation":"2593:5:19","nodeType":"VariableDeclaration","scope":2652,"src":"2585:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2630,"name":"address","nodeType":"ElementaryTypeName","src":"2585:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2633,"mutability":"mutable","name":"sellerStake","nameLocation":"2616:11:19","nodeType":"VariableDeclaration","scope":2652,"src":"2608:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2632,"name":"uint256","nodeType":"ElementaryTypeName","src":"2608:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2635,"mutability":"mutable","name":"buyerStake","nameLocation":"2645:10:19","nodeType":"VariableDeclaration","scope":2652,"src":"2637:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2634,"name":"uint256","nodeType":"ElementaryTypeName","src":"2637:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2637,"mutability":"mutable","name":"totalStake","nameLocation":"2673:10:19","nodeType":"VariableDeclaration","scope":2652,"src":"2665:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2636,"name":"uint256","nodeType":"ElementaryTypeName","src":"2665:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2639,"mutability":"mutable","name":"postCount","nameLocation":"2701:9:19","nodeType":"VariableDeclaration","scope":2652,"src":"2693:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2638,"name":"uint256","nodeType":"ElementaryTypeName","src":"2693:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2641,"mutability":"mutable","name":"paymentRequested","nameLocation":"2728:16:19","nodeType":"VariableDeclaration","scope":2652,"src":"2720:24:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2640,"name":"uint256","nodeType":"ElementaryTypeName","src":"2720:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2643,"mutability":"mutable","name":"stakeRequested","nameLocation":"2762:14:19","nodeType":"VariableDeclaration","scope":2652,"src":"2754:22:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2642,"name":"uint256","nodeType":"ElementaryTypeName","src":"2754:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2646,"mutability":"mutable","name":"status","nameLocation":"2797:6:19","nodeType":"VariableDeclaration","scope":2652,"src":"2786:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"},"typeName":{"id":2645,"nodeType":"UserDefinedTypeName","pathNode":{"id":2644,"name":"PostStatus","nameLocations":["2786:10:19"],"nodeType":"IdentifierPath","referencedDeclaration":2521,"src":"2786:10:19"},"referencedDeclaration":2521,"src":"2786:10:19","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"visibility":"internal"},{"constant":false,"id":2649,"mutability":"mutable","name":"tokenId","nameLocation":"2820:7:19","nodeType":"VariableDeclaration","scope":2652,"src":"2813:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"typeName":{"id":2648,"nodeType":"UserDefinedTypeName","pathNode":{"id":2647,"name":"Tokens","nameLocations":["2813:6:19"],"nodeType":"IdentifierPath","referencedDeclaration":2525,"src":"2813:6:19"},"referencedDeclaration":2525,"src":"2813:6:19","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":2651,"mutability":"mutable","name":"version","nameLocation":"2844:7:19","nodeType":"VariableDeclaration","scope":2652,"src":"2837:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2650,"name":"string","nodeType":"ElementaryTypeName","src":"2837:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"Feed","nameLocation":"2537:4:19","nodeType":"StructDefinition","scope":2671,"src":"2530:328:19","visibility":"public"},{"canonicalName":"Structures.BayRequest","id":2670,"members":[{"constant":false,"id":2654,"mutability":"mutable","name":"request","nameLocation":"2986:7:19","nodeType":"VariableDeclaration","scope":2670,"src":"2980:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2653,"name":"bytes","nodeType":"ElementaryTypeName","src":"2980:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2656,"mutability":"mutable","name":"payment","nameLocation":"3011:7:19","nodeType":"VariableDeclaration","scope":2670,"src":"3003:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2655,"name":"uint256","nodeType":"ElementaryTypeName","src":"3003:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2658,"mutability":"mutable","name":"stake","nameLocation":"3036:5:19","nodeType":"VariableDeclaration","scope":2670,"src":"3028:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2657,"name":"uint256","nodeType":"ElementaryTypeName","src":"3028:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2660,"mutability":"mutable","name":"postAddress","nameLocation":"3059:11:19","nodeType":"VariableDeclaration","scope":2670,"src":"3051:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2659,"name":"address","nodeType":"ElementaryTypeName","src":"3051:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2662,"mutability":"mutable","name":"accepted","nameLocation":"3085:8:19","nodeType":"VariableDeclaration","scope":2670,"src":"3080:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2661,"name":"bool","nodeType":"ElementaryTypeName","src":"3080:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2664,"mutability":"mutable","name":"postCount","nameLocation":"3111:9:19","nodeType":"VariableDeclaration","scope":2670,"src":"3103:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2663,"name":"uint256","nodeType":"ElementaryTypeName","src":"3103:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2667,"mutability":"mutable","name":"tokenId","nameLocation":"3137:7:19","nodeType":"VariableDeclaration","scope":2670,"src":"3130:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"typeName":{"id":2666,"nodeType":"UserDefinedTypeName","pathNode":{"id":2665,"name":"Tokens","nameLocations":["3130:6:19"],"nodeType":"IdentifierPath","referencedDeclaration":2525,"src":"3130:6:19"},"referencedDeclaration":2525,"src":"3130:6:19","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":2669,"mutability":"mutable","name":"buyerAddress","nameLocation":"3162:12:19","nodeType":"VariableDeclaration","scope":2670,"src":"3154:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2668,"name":"address","nodeType":"ElementaryTypeName","src":"3154:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"BayRequest","nameLocation":"2959:10:19","nodeType":"StructDefinition","scope":2671,"src":"2952:229:19","visibility":"public"}],"scope":2672,"src":"138:3045:19","usedErrors":[]}],"src":"113:3071:19"},"id":19},"contracts/modules/Acceptance.sol":{"ast":{"absolutePath":"contracts/modules/Acceptance.sol","exportedSymbols":{"Acceptance":[2856],"Attestation":[1799],"AttestationRequest":[1841],"AttestationRequestData":[1835],"BurnDAI":[3202],"BurnMUSE":[3293],"Data":[3857],"DelegatedAttestationRequest":[1854],"DelegatedRevocationRequest":[1900],"Deposit":[4049],"Events":[4090],"IEAS":[2108],"IERC20":[77],"IMUSE":[2246],"IMecenateFeed":[2341],"IMecenateFeedFactory":[2419],"IMecenateTreasury":[2432],"IMecenateUsers":[2490],"ISchemaRegistry":[2156],"ISwapRouter":[1703],"IUniswapV3SwapCallback":[1603],"IWETH":[2510],"MultiAttestationRequest":[1861],"MultiDelegatedAttestationRequest":[1876],"MultiDelegatedRevocationRequest":[1922],"MultiRevocationRequest":[1907],"RevocationRequest":[1887],"RevocationRequestData":[1881],"SafeMath":[1484],"Signature":[1778],"Staking":[5316],"Strings":[306],"Structures":[2671],"TokenManager":[6040],"Version":[6130]},"id":2857,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2673,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"711:23:20"},{"absolutePath":"contracts/modules/Events.sol","file":"./Events.sol","id":2674,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2857,"sourceUnit":4091,"src":"736:22:20","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/modules/Staking.sol","file":"./Staking.sol","id":2675,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2857,"sourceUnit":5317,"src":"759:23:20","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2676,"name":"Events","nameLocations":["816:6:20"],"nodeType":"IdentifierPath","referencedDeclaration":4090,"src":"816:6:20"},"id":2677,"nodeType":"InheritanceSpecifier","src":"816:6:20"},{"baseName":{"id":2678,"name":"Staking","nameLocations":["824:7:20"],"nodeType":"IdentifierPath","referencedDeclaration":5316,"src":"824:7:20"},"id":2679,"nodeType":"InheritanceSpecifier","src":"824:7:20"}],"canonicalName":"Acceptance","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":2856,"linearizedBaseContracts":[2856,5316,6040,3202,3293,4049,4090,3857,6130],"name":"Acceptance","nameLocation":"802:10:20","nodeType":"ContractDefinition","nodes":[{"body":{"id":2854,"nodeType":"Block","src":"1002:1525:20","statements":[{"expression":{"arguments":[{"baseExpression":{"id":2692,"name":"validStatuses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3537,"src":"1033:13:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_bool_$","typeString":"mapping(uint8 => bool)"}},"id":2699,"indexExpression":{"arguments":[{"expression":{"expression":{"id":2695,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"1053:10:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":2696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1064:10:20","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2521,"src":"1053:21:20","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2521_$","typeString":"type(enum Structures.PostStatus)"}},"id":2697,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1075:8:20","memberName":"Proposed","nodeType":"MemberAccess","referencedDeclaration":2514,"src":"1053:30:20","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}],"id":2694,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1047:5:20","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2693,"name":"uint8","nodeType":"ElementaryTypeName","src":"1047:5:20","typeDescriptions":{}}},"id":2698,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1047:37:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1033:52:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"494e56414c49445f535441545553","id":2700,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1099:16:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_e7ad020d83a3bbd1c079bc4bbb16e4b9f3f2424f3e40f83d8262d5329f30bf33","typeString":"literal_string \"INVALID_STATUS\""},"value":"INVALID_STATUS"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e7ad020d83a3bbd1c079bc4bbb16e4b9f3f2424f3e40f83d8262d5329f30bf33","typeString":"literal_string \"INVALID_STATUS\""}],"id":2691,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1012:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2701,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1012:113:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2702,"nodeType":"ExpressionStatement","src":"1012:113:20"},{"expression":{"arguments":[{"id":2704,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2682,"src":"1148:7:20","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}],"id":2703,"name":"_checkToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3801,"src":"1136:11:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_enum$_Tokens_$2525_$returns$__$","typeString":"function (enum Structures.Tokens) view"}},"id":2705,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1136:20:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2706,"nodeType":"ExpressionStatement","src":"1136:20:20"},{"assignments":[2708],"declarations":[{"constant":false,"id":2708,"mutability":"mutable","name":"amountToAdd","nameLocation":"1175:11:20","nodeType":"VariableDeclaration","scope":2854,"src":"1167:19:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2707,"name":"uint256","nodeType":"ElementaryTypeName","src":"1167:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2718,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"id":2713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2709,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2682,"src":"1189:7:20","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":2710,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"1200:10:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":2711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1211:6:20","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2525,"src":"1200:17:20","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2525_$","typeString":"type(enum Structures.Tokens)"}},"id":2712,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1218:3:20","memberName":"NaN","nodeType":"MemberAccess","referencedDeclaration":2522,"src":"1200:21:20","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"src":"1189:32:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2716,"name":"paymentAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2684,"src":"1260:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1189:84:20","trueExpression":{"expression":{"id":2714,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1236:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1240:5:20","memberName":"value","nodeType":"MemberAccess","src":"1236:9:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1167:106:20"},{"assignments":[2720],"declarations":[{"constant":false,"id":2720,"mutability":"mutable","name":"sellerStake","nameLocation":"1341:11:20","nodeType":"VariableDeclaration","scope":2854,"src":"1333:19:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2719,"name":"uint256","nodeType":"ElementaryTypeName","src":"1333:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2729,"initialValue":{"arguments":[{"id":2723,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2682,"src":"1388:7:20","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},{"expression":{"expression":{"expression":{"id":2724,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"1409:4:20","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":2725,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1414:8:20","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"1409:13:20","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":2726,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1423:6:20","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"1409:20:20","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":2727,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1430:6:20","memberName":"seller","nodeType":"MemberAccess","referencedDeclaration":2611,"src":"1409:27:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2721,"name":"Deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4049,"src":"1355:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Deposit_$4049_$","typeString":"type(contract Deposit)"}},"id":2722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1363:11:20","memberName":"_getDeposit","nodeType":"MemberAccess","referencedDeclaration":4048,"src":"1355:19:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_enum$_Tokens_$2525_$_t_address_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,address) view returns (uint256)"}},"id":2728,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1355:91:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1333:113:20"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2731,"name":"sellerStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2720,"src":"1465:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"expression":{"expression":{"id":2732,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"1480:4:20","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":2733,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1485:8:20","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"1480:13:20","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":2734,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1494:6:20","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"1480:20:20","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":2735,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1501:5:20","memberName":"stake","nodeType":"MemberAccess","referencedDeclaration":2613,"src":"1480:26:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1465:41:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5354414b455f494e434f5252454354","id":2737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1508:17:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_100319a84d0f3890efe46b41e6f5d0707fc1a8c06671421f3a6f1e6b07425e0b","typeString":"literal_string \"STAKE_INCORRECT\""},"value":"STAKE_INCORRECT"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_100319a84d0f3890efe46b41e6f5d0707fc1a8c06671421f3a6f1e6b07425e0b","typeString":"literal_string \"STAKE_INCORRECT\""}],"id":2730,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1457:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2738,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1457:69:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2739,"nodeType":"ExpressionStatement","src":"1457:69:20"},{"expression":{"arguments":[{"arguments":[{"id":2746,"name":"buyer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2688,"src":"1637:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"expression":{"id":2742,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"1573:8:20","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":2743,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1582:19:20","memberName":"usersModuleContract","nodeType":"MemberAccess","referencedDeclaration":2543,"src":"1573:28:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2741,"name":"IMecenateUsers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2490,"src":"1558:14:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateUsers_$2490_$","typeString":"type(contract IMecenateUsers)"}},"id":2744,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1558:44:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateUsers_$2490","typeString":"contract IMecenateUsers"}},"id":2745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1603:16:20","memberName":"checkifUserExist","nodeType":"MemberAccess","referencedDeclaration":2464,"src":"1558:61:20","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view external returns (bool)"}},"id":2747,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1558:98:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"55534552545f4e4f545f4558495354","id":2748,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1670:17:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_9c9ce06a1c77c8a9a7d8b9c6680eadbfd4333137bc18abaed1e07eaf47e66615","typeString":"literal_string \"USERT_NOT_EXIST\""},"value":"USERT_NOT_EXIST"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9c9ce06a1c77c8a9a7d8b9c6680eadbfd4333137bc18abaed1e07eaf47e66615","typeString":"literal_string \"USERT_NOT_EXIST\""}],"id":2740,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1537:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2749,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1537:160:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2750,"nodeType":"ExpressionStatement","src":"1537:160:20"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2752,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1729:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1733:6:20","memberName":"sender","nodeType":"MemberAccess","src":"1729:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"expression":{"id":2754,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"1743:4:20","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":2755,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1748:8:20","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"1743:13:20","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":2756,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1757:6:20","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"1743:20:20","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":2757,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1764:6:20","memberName":"seller","nodeType":"MemberAccess","referencedDeclaration":2611,"src":"1743:27:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1729:41:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2759,"name":"buyer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2688,"src":"1790:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"expression":{"id":2760,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"1799:4:20","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":2761,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1804:8:20","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"1799:13:20","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":2762,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1813:6:20","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"1799:20:20","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":2763,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1820:6:20","memberName":"seller","nodeType":"MemberAccess","referencedDeclaration":2611,"src":"1799:27:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1790:36:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1729:97:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"594f555f4152455f5448455f53454c4c4552","id":2766,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1840:20:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_0e19a2ddbe3b6f40223c614bc1171875af50ecda0601bc6003fdbf6d9a759b6d","typeString":"literal_string \"YOU_ARE_THE_SELLER\""},"value":"YOU_ARE_THE_SELLER"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0e19a2ddbe3b6f40223c614bc1171875af50ecda0601bc6003fdbf6d9a759b6d","typeString":"literal_string \"YOU_ARE_THE_SELLER\""}],"id":2751,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1708:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2767,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1708:162:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2768,"nodeType":"ExpressionStatement","src":"1708:162:20"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"expression":{"id":2769,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"1885:4:20","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":2770,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1890:8:20","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"1885:13:20","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":2771,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1899:6:20","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"1885:20:20","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":2772,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1906:7:20","memberName":"payment","nodeType":"MemberAccess","referencedDeclaration":2615,"src":"1885:28:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2773,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1916:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1885:32:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2801,"nodeType":"Block","src":"2072:121:20","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2787,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2094:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2098:5:20","memberName":"value","nodeType":"MemberAccess","src":"2094:9:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2789,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2106:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2094:13:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5a45524f5f4d534756414c5545","id":2791,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2109:15:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_664e35cd69e9c0fd2c3a2541a0d1babcd863ee7a8f8b62c3489cd2e77100fb4e","typeString":"literal_string \"ZERO_MSGVALUE\""},"value":"ZERO_MSGVALUE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_664e35cd69e9c0fd2c3a2541a0d1babcd863ee7a8f8b62c3489cd2e77100fb4e","typeString":"literal_string \"ZERO_MSGVALUE\""}],"id":2786,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2086:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2792,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2086:39:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2793,"nodeType":"ExpressionStatement","src":"2086:39:20"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2795,"name":"paymentAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2684,"src":"2148:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2796,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2164:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2148:17:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5a45524f5f5041594d454e54","id":2798,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2167:14:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_f56529c301fb3aba700b534fe7aa1bb123b816bddf2e310d805052f5d74b4a13","typeString":"literal_string \"ZERO_PAYMENT\""},"value":"ZERO_PAYMENT"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f56529c301fb3aba700b534fe7aa1bb123b816bddf2e310d805052f5d74b4a13","typeString":"literal_string \"ZERO_PAYMENT\""}],"id":2794,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2140:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2799,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2140:42:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2800,"nodeType":"ExpressionStatement","src":"2140:42:20"}]},"id":2802,"nodeType":"IfStatement","src":"1881:312:20","trueBody":{"id":2785,"nodeType":"Block","src":"1919:147:20","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2781,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2776,"name":"paymentAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2684,"src":"1958:13:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"expression":{"expression":{"id":2777,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"1975:4:20","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":2778,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1980:8:20","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"1975:13:20","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":2779,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1989:6:20","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"1975:20:20","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":2780,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1996:7:20","memberName":"payment","nodeType":"MemberAccess","referencedDeclaration":2615,"src":"1975:28:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1958:45:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e4f545f454e4f5547485f5041594d454e54","id":2782,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2021:20:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_f7127b08ebb47662d7f1314ad8619c85cc122b6410cd6decda53b54bce976896","typeString":"literal_string \"NOT_ENOUGH_PAYMENT\""},"value":"NOT_ENOUGH_PAYMENT"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f7127b08ebb47662d7f1314ad8619c85cc122b6410cd6decda53b54bce976896","typeString":"literal_string \"NOT_ENOUGH_PAYMENT\""}],"id":2775,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1933:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2783,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1933:122:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2784,"nodeType":"ExpressionStatement","src":"1933:122:20"}]}},{"assignments":[2804],"declarations":[{"constant":false,"id":2804,"mutability":"mutable","name":"payment","nameLocation":"2211:7:20","nodeType":"VariableDeclaration","scope":2854,"src":"2203:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2803,"name":"uint256","nodeType":"ElementaryTypeName","src":"2203:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2811,"initialValue":{"arguments":[{"id":2806,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2682,"src":"2231:7:20","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},{"id":2807,"name":"buyer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2688,"src":"2240:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2808,"name":"funder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2686,"src":"2247:6:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2809,"name":"amountToAdd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2708,"src":"2255:11:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2805,"name":"_addStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4706,"src":"2221:9:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Tokens_$2525_$_t_address_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,address,address,uint256) returns (uint256)"}},"id":2810,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2221:46:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2203:64:20"},{"expression":{"id":2820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"expression":{"expression":{"id":2812,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"2278:4:20","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":2816,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2283:8:20","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"2278:13:20","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":2817,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2292:6:20","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"2278:20:20","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":2818,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2299:7:20","memberName":"payment","nodeType":"MemberAccess","referencedDeclaration":2615,"src":"2278:28:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2819,"name":"payment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2804,"src":"2309:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2278:38:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2821,"nodeType":"ExpressionStatement","src":"2278:38:20"},{"expression":{"id":2830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"expression":{"expression":{"id":2822,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"2327:4:20","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":2826,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2332:8:20","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"2327:13:20","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":2827,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2341:6:20","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"2327:20:20","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":2828,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2348:5:20","memberName":"buyer","nodeType":"MemberAccess","referencedDeclaration":2609,"src":"2327:26:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2829,"name":"buyer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2688,"src":"2356:5:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2327:34:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2831,"nodeType":"ExpressionStatement","src":"2327:34:20"},{"expression":{"id":2842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"expression":{"expression":{"id":2832,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"2372:4:20","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":2836,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2377:8:20","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"2372:13:20","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":2837,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2386:8:20","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2577,"src":"2372:22:20","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2607_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":2838,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2395:6:20","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":2594,"src":"2372:29:20","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"expression":{"id":2839,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"2404:10:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":2840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2415:10:20","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2521,"src":"2404:21:20","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2521_$","typeString":"type(enum Structures.PostStatus)"}},"id":2841,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2426:8:20","memberName":"Accepted","nodeType":"MemberAccess","referencedDeclaration":2515,"src":"2404:30:20","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"src":"2372:62:20","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"id":2843,"nodeType":"ExpressionStatement","src":"2372:62:20"},{"expression":{"arguments":[{"expression":{"expression":{"id":2845,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"2459:10:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":2846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2470:10:20","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2521,"src":"2459:21:20","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2521_$","typeString":"type(enum Structures.PostStatus)"}},"id":2847,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2481:8:20","memberName":"Accepted","nodeType":"MemberAccess","referencedDeclaration":2515,"src":"2459:30:20","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}],"id":2844,"name":"_changeStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3714,"src":"2445:13:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_PostStatus_$2521_$returns$__$","typeString":"function (enum Structures.PostStatus)"}},"id":2848,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2445:45:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2849,"nodeType":"ExpressionStatement","src":"2445:45:20"},{"eventCall":{"arguments":[{"id":2851,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"2515:4:20","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}],"id":2850,"name":"Accepted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4064,"src":"2506:8:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_struct$_Post_$2574_memory_ptr_$returns$__$","typeString":"function (struct Structures.Post memory)"}},"id":2852,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2506:14:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2853,"nodeType":"EmitStatement","src":"2501:19:20"}]},"functionSelector":"07388dba","id":2855,"implemented":true,"kind":"function","modifiers":[],"name":"acceptPost","nameLocation":"847:10:20","nodeType":"FunctionDefinition","parameters":{"id":2689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2682,"mutability":"mutable","name":"tokenId","nameLocation":"885:7:20","nodeType":"VariableDeclaration","scope":2855,"src":"867:25:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"typeName":{"id":2681,"nodeType":"UserDefinedTypeName","pathNode":{"id":2680,"name":"Structures.Tokens","nameLocations":["867:10:20","878:6:20"],"nodeType":"IdentifierPath","referencedDeclaration":2525,"src":"867:17:20"},"referencedDeclaration":2525,"src":"867:17:20","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":2684,"mutability":"mutable","name":"paymentAmount","nameLocation":"910:13:20","nodeType":"VariableDeclaration","scope":2855,"src":"902:21:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2683,"name":"uint256","nodeType":"ElementaryTypeName","src":"902:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2686,"mutability":"mutable","name":"funder","nameLocation":"941:6:20","nodeType":"VariableDeclaration","scope":2855,"src":"933:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2685,"name":"address","nodeType":"ElementaryTypeName","src":"933:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2688,"mutability":"mutable","name":"buyer","nameLocation":"965:5:20","nodeType":"VariableDeclaration","scope":2855,"src":"957:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2687,"name":"address","nodeType":"ElementaryTypeName","src":"957:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"857:119:20"},"returnParameters":{"id":2690,"nodeType":"ParameterList","parameters":[],"src":"1002:0:20"},"scope":2856,"src":"838:1689:20","stateMutability":"payable","virtual":true,"visibility":"external"}],"scope":2857,"src":"784:1745:20","usedErrors":[]}],"src":"711:1819:20"},"id":20},"contracts/modules/BurnDAI.sol":{"ast":{"absolutePath":"contracts/modules/BurnDAI.sol","exportedSymbols":{"Attestation":[1799],"AttestationRequest":[1841],"AttestationRequestData":[1835],"BurnDAI":[3202],"BurnMUSE":[3293],"Data":[3857],"DelegatedAttestationRequest":[1854],"DelegatedRevocationRequest":[1900],"Events":[4090],"IEAS":[2108],"IERC20":[77],"IMUSE":[2246],"IMecenateFeed":[2341],"IMecenateFeedFactory":[2419],"IMecenateTreasury":[2432],"IMecenateUsers":[2490],"ISchemaRegistry":[2156],"ISwapRouter":[1703],"IUniswapV3SwapCallback":[1603],"IWETH":[2510],"MultiAttestationRequest":[1861],"MultiDelegatedAttestationRequest":[1876],"MultiDelegatedRevocationRequest":[1922],"MultiRevocationRequest":[1907],"RevocationRequest":[1887],"RevocationRequestData":[1881],"SafeMath":[1484],"Signature":[1778],"Strings":[306],"Structures":[2671],"Version":[6130]},"id":3203,"nodeType":"SourceUnit","nodes":[{"id":2858,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"0:23:21"},{"absolutePath":"contracts/modules/BurnMUSE.sol","file":"./BurnMUSE.sol","id":2859,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3203,"sourceUnit":3294,"src":"25:24:21","symbolAliases":[],"unitAlias":""},{"absolutePath":"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol","file":"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol","id":2860,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3203,"sourceUnit":1704,"src":"50:68:21","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SafeMath.sol","file":"@openzeppelin/contracts/utils/math/SafeMath.sol","id":2861,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3203,"sourceUnit":1485,"src":"119:57:21","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IWETH.sol","file":"../interfaces/IWETH.sol","id":2862,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3203,"sourceUnit":2511,"src":"178:33:21","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2863,"name":"BurnMUSE","nameLocations":["242:8:21"],"nodeType":"IdentifierPath","referencedDeclaration":3293,"src":"242:8:21"},"id":2864,"nodeType":"InheritanceSpecifier","src":"242:8:21"}],"canonicalName":"BurnDAI","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3202,"linearizedBaseContracts":[3202,3293,4090,3857,6130],"name":"BurnDAI","nameLocation":"231:7:21","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2867,"libraryName":{"id":2865,"name":"SafeMath","nameLocations":["263:8:21"],"nodeType":"IdentifierPath","referencedDeclaration":1484,"src":"263:8:21"},"nodeType":"UsingForDirective","src":"257:27:21","typeName":{"id":2866,"name":"uint256","nodeType":"ElementaryTypeName","src":"276:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"baseFunctions":[3264],"body":{"id":2900,"nodeType":"Block","src":"401:181:21","statements":[{"expression":{"arguments":[{"id":2886,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2869,"src":"503:4:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":2889,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"517:4:21","typeDescriptions":{"typeIdentifier":"t_contract$_BurnDAI_$3202","typeString":"contract BurnDAI"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BurnDAI_$3202","typeString":"contract BurnDAI"}],"id":2888,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"509:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2887,"name":"address","nodeType":"ElementaryTypeName","src":"509:7:21","typeDescriptions":{}}},"id":2890,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"509:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2891,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2871,"src":"524:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":2879,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"439:8:21","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":2880,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"448:15:21","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2545,"src":"439:24:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2878,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"418:20:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2419_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":2881,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"418:46:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2419","typeString":"contract IMecenateFeedFactory"}},"id":2882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"465:8:21","memberName":"daiToken","nodeType":"MemberAccess","referencedDeclaration":2386,"src":"418:55:21","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":2883,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"418:57:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2877,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"411:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$77_$","typeString":"type(contract IERC20)"}},"id":2884,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"411:65:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$77","typeString":"contract IERC20"}},"id":2885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"490:12:21","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":76,"src":"411:91:21","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":2892,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"411:119:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2893,"nodeType":"ExpressionStatement","src":"411:119:21"},{"expression":{"arguments":[{"id":2895,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2871,"src":"547:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2894,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3231,"src":"541:5:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) returns (bool)"}},"id":2896,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"541:12:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2897,"nodeType":"ExpressionStatement","src":"541:12:21"},{"expression":{"hexValue":"74727565","id":2898,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"571:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":2876,"id":2899,"nodeType":"Return","src":"564:11:21"}]},"id":2901,"implemented":true,"kind":"function","modifiers":[],"name":"_burnFrom","nameLocation":"299:9:21","nodeType":"FunctionDefinition","overrides":{"id":2873,"nodeType":"OverrideSpecifier","overrides":[],"src":"369:8:21"},"parameters":{"id":2872,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2869,"mutability":"mutable","name":"from","nameLocation":"326:4:21","nodeType":"VariableDeclaration","scope":2901,"src":"318:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2868,"name":"address","nodeType":"ElementaryTypeName","src":"318:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2871,"mutability":"mutable","name":"value","nameLocation":"348:5:21","nodeType":"VariableDeclaration","scope":2901,"src":"340:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2870,"name":"uint256","nodeType":"ElementaryTypeName","src":"340:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"308:51:21"},"returnParameters":{"id":2876,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2875,"mutability":"mutable","name":"success","nameLocation":"392:7:21","nodeType":"VariableDeclaration","scope":2901,"src":"387:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2874,"name":"bool","nodeType":"ElementaryTypeName","src":"387:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"386:14:21"},"scope":3202,"src":"290:292:21","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3002,"nodeType":"Block","src":"653:1233:21","statements":[{"expression":{"arguments":[{"expression":{"id":2917,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"796:8:21","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":2918,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"805:6:21","memberName":"router","nodeType":"MemberAccess","referencedDeclaration":2547,"src":"796:15:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2919,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2903,"src":"813:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":2910,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"737:8:21","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":2911,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"746:15:21","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2545,"src":"737:24:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2909,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"716:20:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2419_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":2912,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"716:46:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2419","typeString":"contract IMecenateFeedFactory"}},"id":2913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"763:8:21","memberName":"daiToken","nodeType":"MemberAccess","referencedDeclaration":2386,"src":"716:55:21","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":2914,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"716:57:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2908,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"709:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$77_$","typeString":"type(contract IERC20)"}},"id":2915,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"709:65:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$77","typeString":"contract IERC20"}},"id":2916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"788:7:21","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":64,"src":"709:86:21","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":2920,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"709:110:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2921,"nodeType":"ExpressionStatement","src":"709:110:21"},{"assignments":[2923],"declarations":[{"constant":false,"id":2923,"mutability":"mutable","name":"tokens_sold","nameLocation":"921:11:21","nodeType":"VariableDeclaration","scope":3002,"src":"913:19:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2922,"name":"uint256","nodeType":"ElementaryTypeName","src":"913:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2925,"initialValue":{"id":2924,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2903,"src":"935:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"913:27:21"},{"assignments":[2927],"declarations":[{"constant":false,"id":2927,"mutability":"mutable","name":"tokens_bought","nameLocation":"959:13:21","nodeType":"VariableDeclaration","scope":3002,"src":"951:21:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2926,"name":"uint256","nodeType":"ElementaryTypeName","src":"951:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2950,"initialValue":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":2930,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"1029:8:21","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":2931,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1038:15:21","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2545,"src":"1029:24:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2929,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"1008:20:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2419_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":2932,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:46:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2419","typeString":"contract IMecenateFeedFactory"}},"id":2933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1055:8:21","memberName":"daiToken","nodeType":"MemberAccess","referencedDeclaration":2386,"src":"1008:55:21","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":2934,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:57:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":2936,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"1100:8:21","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":2937,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1109:15:21","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2545,"src":"1100:24:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2935,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"1079:20:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2419_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":2938,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1079:46:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2419","typeString":"contract IMecenateFeedFactory"}},"id":2939,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1126:9:21","memberName":"wethToken","nodeType":"MemberAccess","referencedDeclaration":2381,"src":"1079:56:21","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":2940,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1079:58:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":2946,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1211:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"arguments":[{"expression":{"id":2942,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"1172:8:21","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":2943,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1181:15:21","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2545,"src":"1172:24:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2941,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"1151:20:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2419_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":2944,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1151:46:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2419","typeString":"contract IMecenateFeedFactory"}},"id":2945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1198:12:21","memberName":"getRouterFee","nodeType":"MemberAccess","referencedDeclaration":2398,"src":"1151:59:21","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint8_$returns$_t_uint24_$","typeString":"function (uint8) view external returns (uint24)"}},"id":2947,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1151:62:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},{"id":2948,"name":"tokens_sold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2923,"src":"1227:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint24","typeString":"uint24"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2928,"name":"_swapTokensForToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3201,"src":"975:19:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint24_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,address,uint24,uint256) returns (uint256)"}},"id":2949,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"975:273:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"951:297:21"},{"assignments":[2952],"declarations":[{"constant":false,"id":2952,"mutability":"mutable","name":"tokens_sold_to_muse","nameLocation":"1267:19:21","nodeType":"VariableDeclaration","scope":3002,"src":"1259:27:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2951,"name":"uint256","nodeType":"ElementaryTypeName","src":"1259:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2975,"initialValue":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":2955,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"1343:8:21","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":2956,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1352:15:21","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2545,"src":"1343:24:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2954,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"1322:20:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2419_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":2957,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1322:46:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2419","typeString":"contract IMecenateFeedFactory"}},"id":2958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1369:9:21","memberName":"wethToken","nodeType":"MemberAccess","referencedDeclaration":2381,"src":"1322:56:21","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":2959,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1322:58:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":2961,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"1415:8:21","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":2962,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1424:15:21","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2545,"src":"1415:24:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2960,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"1394:20:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2419_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":2963,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1394:46:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2419","typeString":"contract IMecenateFeedFactory"}},"id":2964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1441:9:21","memberName":"museToken","nodeType":"MemberAccess","referencedDeclaration":2376,"src":"1394:56:21","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":2965,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1394:58:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"31","id":2971,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1526:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"arguments":[{"expression":{"id":2967,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"1487:8:21","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":2968,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1496:15:21","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2545,"src":"1487:24:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2966,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"1466:20:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2419_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":2969,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1466:46:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2419","typeString":"contract IMecenateFeedFactory"}},"id":2970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1513:12:21","memberName":"getRouterFee","nodeType":"MemberAccess","referencedDeclaration":2398,"src":"1466:59:21","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint8_$returns$_t_uint24_$","typeString":"function (uint8) view external returns (uint24)"}},"id":2972,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1466:62:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},{"id":2973,"name":"tokens_bought","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2927,"src":"1542:13:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint24","typeString":"uint24"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2953,"name":"_swapTokensForToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3201,"src":"1289:19:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint24_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,address,uint24,uint256) returns (uint256)"}},"id":2974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1289:276:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1259:306:21"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":2986,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"1702:8:21","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":2987,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1711:15:21","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2545,"src":"1702:24:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2985,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"1681:20:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2419_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":2988,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1681:46:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2419","typeString":"contract IMecenateFeedFactory"}},"id":2989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1728:9:21","memberName":"museToken","nodeType":"MemberAccess","referencedDeclaration":2376,"src":"1681:56:21","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":2990,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1681:58:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2991,"name":"tokens_sold_to_muse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2952,"src":"1757:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":2978,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"1604:8:21","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":2979,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1613:15:21","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2545,"src":"1604:24:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2977,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"1583:20:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2419_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":2980,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1583:46:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2419","typeString":"contract IMecenateFeedFactory"}},"id":2981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1630:9:21","memberName":"museToken","nodeType":"MemberAccess","referencedDeclaration":2376,"src":"1583:56:21","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":2982,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1583:58:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2976,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"1576:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$77_$","typeString":"type(contract IERC20)"}},"id":2983,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1576:66:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$77","typeString":"contract IERC20"}},"id":2984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1656:7:21","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":64,"src":"1576:87:21","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":2992,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1576:214:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2993,"nodeType":"ExpressionStatement","src":"1576:214:21"},{"expression":{"arguments":[{"id":2997,"name":"tokens_sold_to_muse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2952,"src":"1837:19:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2994,"name":"BurnMUSE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3293,"src":"1822:8:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_BurnMUSE_$3293_$","typeString":"type(contract BurnMUSE)"}},"id":2996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1831:5:21","memberName":"_burn","nodeType":"MemberAccess","referencedDeclaration":3231,"src":"1822:14:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) returns (bool)"}},"id":2998,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1822:35:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2999,"nodeType":"ExpressionStatement","src":"1822:35:21"},{"expression":{"hexValue":"74727565","id":3000,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1875:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":2907,"id":3001,"nodeType":"Return","src":"1868:11:21"}]},"id":3003,"implemented":true,"kind":"function","modifiers":[],"name":"_burnDai","nameLocation":"597:8:21","nodeType":"FunctionDefinition","parameters":{"id":2904,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2903,"mutability":"mutable","name":"value","nameLocation":"614:5:21","nodeType":"VariableDeclaration","scope":3003,"src":"606:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2902,"name":"uint256","nodeType":"ElementaryTypeName","src":"606:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"605:15:21"},"returnParameters":{"id":2907,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2906,"mutability":"mutable","name":"success","nameLocation":"644:7:21","nodeType":"VariableDeclaration","scope":3003,"src":"639:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2905,"name":"bool","nodeType":"ElementaryTypeName","src":"639:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"638:14:21"},"scope":3202,"src":"588:1298:21","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3092,"nodeType":"Block","src":"1958:1098:21","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":3012,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"2073:8:21","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3013,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2082:15:21","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2545,"src":"2073:24:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3011,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"2052:20:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2419_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":3014,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2052:46:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2419","typeString":"contract IMecenateFeedFactory"}},"id":3015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2099:9:21","memberName":"wethToken","nodeType":"MemberAccess","referencedDeclaration":2381,"src":"2052:56:21","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":3016,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2052:58:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3010,"name":"IWETH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2510,"src":"2046:5:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IWETH_$2510_$","typeString":"type(contract IWETH)"}},"id":3017,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2046:65:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IWETH_$2510","typeString":"contract IWETH"}},"id":3018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2125:7:21","memberName":"deposit","nodeType":"MemberAccess","referencedDeclaration":2495,"src":"2046:86:21","typeDescriptions":{"typeIdentifier":"t_function_external_payable$__$returns$__$","typeString":"function () payable external"}},"id":3020,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":3019,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3005,"src":"2140:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2046:100:21","typeDescriptions":{"typeIdentifier":"t_function_external_payable$__$returns$__$value","typeString":"function () payable external"}},"id":3021,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2046:102:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3022,"nodeType":"ExpressionStatement","src":"2046:102:21"},{"expression":{"arguments":[{"expression":{"id":3032,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"2293:8:21","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3033,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2302:6:21","memberName":"router","nodeType":"MemberAccess","referencedDeclaration":2547,"src":"2293:15:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3034,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3005,"src":"2310:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":3025,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"2233:8:21","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3026,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2242:15:21","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2545,"src":"2233:24:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3024,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"2212:20:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2419_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":3027,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2212:46:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2419","typeString":"contract IMecenateFeedFactory"}},"id":3028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2259:9:21","memberName":"wethToken","nodeType":"MemberAccess","referencedDeclaration":2381,"src":"2212:56:21","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":3029,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2212:58:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3023,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"2205:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$77_$","typeString":"type(contract IERC20)"}},"id":3030,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2205:66:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$77","typeString":"contract IERC20"}},"id":3031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2285:7:21","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":64,"src":"2205:87:21","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3035,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2205:111:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3036,"nodeType":"ExpressionStatement","src":"2205:111:21"},{"assignments":[3038],"declarations":[{"constant":false,"id":3038,"mutability":"mutable","name":"tokens_sold","nameLocation":"2419:11:21","nodeType":"VariableDeclaration","scope":3092,"src":"2411:19:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3037,"name":"uint256","nodeType":"ElementaryTypeName","src":"2411:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3040,"initialValue":{"id":3039,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3005,"src":"2433:5:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2411:27:21"},{"assignments":[3042],"declarations":[{"constant":false,"id":3042,"mutability":"mutable","name":"tokens_bought","nameLocation":"2457:13:21","nodeType":"VariableDeclaration","scope":3092,"src":"2449:21:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3041,"name":"uint256","nodeType":"ElementaryTypeName","src":"2449:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3065,"initialValue":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":3045,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"2527:8:21","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3046,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2536:15:21","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2545,"src":"2527:24:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3044,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"2506:20:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2419_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":3047,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2506:46:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2419","typeString":"contract IMecenateFeedFactory"}},"id":3048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2553:9:21","memberName":"wethToken","nodeType":"MemberAccess","referencedDeclaration":2381,"src":"2506:56:21","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":3049,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2506:58:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":3051,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"2599:8:21","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3052,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2608:15:21","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2545,"src":"2599:24:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3050,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"2578:20:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2419_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":3053,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2578:46:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2419","typeString":"contract IMecenateFeedFactory"}},"id":3054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2625:9:21","memberName":"museToken","nodeType":"MemberAccess","referencedDeclaration":2376,"src":"2578:56:21","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":3055,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2578:58:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"31","id":3061,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2710:1:21","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"arguments":[{"expression":{"id":3057,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"2671:8:21","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3058,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2680:15:21","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2545,"src":"2671:24:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3056,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"2650:20:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2419_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":3059,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2650:46:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2419","typeString":"contract IMecenateFeedFactory"}},"id":3060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2697:12:21","memberName":"getRouterFee","nodeType":"MemberAccess","referencedDeclaration":2398,"src":"2650:59:21","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_uint8_$returns$_t_uint24_$","typeString":"function (uint8) view external returns (uint24)"}},"id":3062,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2650:62:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},{"id":3063,"name":"tokens_sold","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3038,"src":"2726:11:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint24","typeString":"uint24"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3043,"name":"_swapTokensForToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3201,"src":"2473:19:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint24_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,address,uint24,uint256) returns (uint256)"}},"id":3064,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2473:274:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2449:298:21"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":3076,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"2884:8:21","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3077,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2893:15:21","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2545,"src":"2884:24:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3075,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"2863:20:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2419_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":3078,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2863:46:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2419","typeString":"contract IMecenateFeedFactory"}},"id":3079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2910:9:21","memberName":"museToken","nodeType":"MemberAccess","referencedDeclaration":2376,"src":"2863:56:21","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":3080,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2863:58:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3081,"name":"tokens_bought","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3042,"src":"2939:13:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":3068,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"2786:8:21","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3069,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2795:15:21","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2545,"src":"2786:24:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3067,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"2765:20:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2419_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":3070,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2765:46:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2419","typeString":"contract IMecenateFeedFactory"}},"id":3071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2812:9:21","memberName":"museToken","nodeType":"MemberAccess","referencedDeclaration":2376,"src":"2765:56:21","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":3072,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2765:58:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3066,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"2758:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$77_$","typeString":"type(contract IERC20)"}},"id":3073,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2758:66:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$77","typeString":"contract IERC20"}},"id":3074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2838:7:21","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":64,"src":"2758:87:21","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3082,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2758:208:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3083,"nodeType":"ExpressionStatement","src":"2758:208:21"},{"expression":{"arguments":[{"id":3087,"name":"tokens_bought","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3042,"src":"3013:13:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3084,"name":"BurnMUSE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3293,"src":"2998:8:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_BurnMUSE_$3293_$","typeString":"type(contract BurnMUSE)"}},"id":3086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3007:5:21","memberName":"_burn","nodeType":"MemberAccess","referencedDeclaration":3231,"src":"2998:14:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) returns (bool)"}},"id":3088,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2998:29:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3089,"nodeType":"ExpressionStatement","src":"2998:29:21"},{"expression":{"hexValue":"74727565","id":3090,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3045:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3009,"id":3091,"nodeType":"Return","src":"3038:11:21"}]},"id":3093,"implemented":true,"kind":"function","modifiers":[],"name":"_burnWeth","nameLocation":"1901:9:21","nodeType":"FunctionDefinition","parameters":{"id":3006,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3005,"mutability":"mutable","name":"value","nameLocation":"1919:5:21","nodeType":"VariableDeclaration","scope":3093,"src":"1911:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3004,"name":"uint256","nodeType":"ElementaryTypeName","src":"1911:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1910:15:21"},"returnParameters":{"id":3009,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3008,"mutability":"mutable","name":"success","nameLocation":"1949:7:21","nodeType":"VariableDeclaration","scope":3093,"src":"1944:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3007,"name":"bool","nodeType":"ElementaryTypeName","src":"1944:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1943:14:21"},"scope":3202,"src":"1892:1164:21","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[3277],"body":{"id":3106,"nodeType":"Block","src":"3188:81:21","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":3100,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"3226:8:21","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3101,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3235:15:21","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2545,"src":"3226:24:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3099,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"3205:20:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2419_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":3102,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3205:46:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2419","typeString":"contract IMecenateFeedFactory"}},"id":3103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3252:8:21","memberName":"daiToken","nodeType":"MemberAccess","referencedDeclaration":2386,"src":"3205:55:21","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":3104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3205:57:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3098,"id":3105,"nodeType":"Return","src":"3198:64:21"}]},"id":3107,"implemented":true,"kind":"function","modifiers":[],"name":"getTokenAddress","nameLocation":"3071:15:21","nodeType":"FunctionDefinition","overrides":{"id":3095,"nodeType":"OverrideSpecifier","overrides":[],"src":"3143:8:21"},"parameters":{"id":3094,"nodeType":"ParameterList","parameters":[],"src":"3086:2:21"},"returnParameters":{"id":3098,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3097,"mutability":"mutable","name":"token","nameLocation":"3177:5:21","nodeType":"VariableDeclaration","scope":3107,"src":"3169:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3096,"name":"address","nodeType":"ElementaryTypeName","src":"3169:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3168:15:21"},"scope":3202,"src":"3062:207:21","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[3292],"body":{"id":3118,"nodeType":"Block","src":"3391:43:21","statements":[{"expression":{"id":3116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3113,"name":"exchange","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3111,"src":"3401:8:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":3114,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"3412:8:21","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3115,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3421:6:21","memberName":"router","nodeType":"MemberAccess","referencedDeclaration":2547,"src":"3412:15:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3401:26:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3117,"nodeType":"ExpressionStatement","src":"3401:26:21"}]},"id":3119,"implemented":true,"kind":"function","modifiers":[],"name":"getExchangeAddress","nameLocation":"3284:18:21","nodeType":"FunctionDefinition","overrides":{"id":3109,"nodeType":"OverrideSpecifier","overrides":[],"src":"3343:8:21"},"parameters":{"id":3108,"nodeType":"ParameterList","parameters":[],"src":"3302:2:21"},"returnParameters":{"id":3112,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3111,"mutability":"mutable","name":"exchange","nameLocation":"3377:8:21","nodeType":"VariableDeclaration","scope":3119,"src":"3369:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3110,"name":"address","nodeType":"ElementaryTypeName","src":"3369:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3368:18:21"},"scope":3202,"src":"3275:159:21","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3200,"nodeType":"Block","src":"3609:1048:21","statements":[{"assignments":[3133],"declarations":[{"constant":false,"id":3133,"mutability":"mutable","name":"allowance","nameLocation":"3666:9:21","nodeType":"VariableDeclaration","scope":3200,"src":"3658:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3132,"name":"uint256","nodeType":"ElementaryTypeName","src":"3658:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3145,"initialValue":{"arguments":[{"arguments":[{"id":3140,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3725:4:21","typeDescriptions":{"typeIdentifier":"t_contract$_BurnDAI_$3202","typeString":"contract BurnDAI"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BurnDAI_$3202","typeString":"contract BurnDAI"}],"id":3139,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3717:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3138,"name":"address","nodeType":"ElementaryTypeName","src":"3717:7:21","typeDescriptions":{}}},"id":3141,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3717:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3142,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"3744:8:21","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3143,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3753:6:21","memberName":"router","nodeType":"MemberAccess","referencedDeclaration":2547,"src":"3744:15:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":3135,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3121,"src":"3685:7:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3134,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"3678:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$77_$","typeString":"type(contract IERC20)"}},"id":3136,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3678:15:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$77","typeString":"contract IERC20"}},"id":3137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3694:9:21","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":54,"src":"3678:25:21","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":3144,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3678:91:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3658:111:21"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3146,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3133,"src":"3783:9:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3147,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3127,"src":"3795:8:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3783:20:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3163,"nodeType":"IfStatement","src":"3779:110:21","trueBody":{"id":3162,"nodeType":"Block","src":"3805:84:21","statements":[{"expression":{"arguments":[{"expression":{"id":3153,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"3843:8:21","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3154,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3852:6:21","memberName":"router","nodeType":"MemberAccess","referencedDeclaration":2547,"src":"3843:15:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"arguments":[{"id":3157,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3865:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3156,"name":"uint256","nodeType":"ElementaryTypeName","src":"3865:7:21","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":3155,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3860:4:21","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3158,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3860:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":3159,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3874:3:21","memberName":"max","nodeType":"MemberAccess","src":"3860:17:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3150,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3121,"src":"3826:7:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3149,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"3819:6:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$77_$","typeString":"type(contract IERC20)"}},"id":3151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3819:15:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$77","typeString":"contract IERC20"}},"id":3152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3835:7:21","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":64,"src":"3819:23:21","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3160,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3819:59:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3161,"nodeType":"ExpressionStatement","src":"3819:59:21"}]}},{"assignments":[3165],"declarations":[{"constant":false,"id":3165,"mutability":"mutable","name":"recipient","nameLocation":"3937:9:21","nodeType":"VariableDeclaration","scope":3200,"src":"3929:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3164,"name":"address","nodeType":"ElementaryTypeName","src":"3929:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3170,"initialValue":{"arguments":[{"id":3168,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3957:4:21","typeDescriptions":{"typeIdentifier":"t_contract$_BurnDAI_$3202","typeString":"contract BurnDAI"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BurnDAI_$3202","typeString":"contract BurnDAI"}],"id":3167,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3949:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3166,"name":"address","nodeType":"ElementaryTypeName","src":"3949:7:21","typeDescriptions":{}}},"id":3169,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3949:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3929:33:21"},{"assignments":[3172],"declarations":[{"constant":false,"id":3172,"mutability":"mutable","name":"deadline","nameLocation":"3980:8:21","nodeType":"VariableDeclaration","scope":3200,"src":"3972:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3171,"name":"uint256","nodeType":"ElementaryTypeName","src":"3972:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3177,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3173,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3991:5:21","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3997:9:21","memberName":"timestamp","nodeType":"MemberAccess","src":"3991:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3630","id":3175,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4009:2:21","typeDescriptions":{"typeIdentifier":"t_rational_60_by_1","typeString":"int_const 60"},"value":"60"},"src":"3991:20:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3972:39:21"},{"expression":{"id":3196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3178,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"4173:9:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":3186,"name":"tokenIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3121,"src":"4306:7:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3187,"name":"tokenOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3123,"src":"4341:8:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3188,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3125,"src":"4372:3:21","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},{"id":3189,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3165,"src":"4404:9:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3190,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3172,"src":"4441:8:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3191,"name":"amountIn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3127,"src":"4477:8:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":3192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4521:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":3193,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4597:1:21","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint24","typeString":"uint24"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":3184,"name":"ISwapRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1703,"src":"4244:11:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ISwapRouter_$1703_$","typeString":"type(contract ISwapRouter)"}},"id":3185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4256:22:21","memberName":"ExactInputSingleParams","nodeType":"MemberAccess","referencedDeclaration":1627,"src":"4244:34:21","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_ExactInputSingleParams_$1627_storage_ptr_$","typeString":"type(struct ISwapRouter.ExactInputSingleParams storage pointer)"}},"id":3194,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["4297:7:21","4331:8:21","4367:3:21","4393:9:21","4431:8:21","4467:8:21","4503:16:21","4578:17:21"],"names":["tokenIn","tokenOut","fee","recipient","deadline","amountIn","amountOutMinimum","sqrtPriceLimitX96"],"nodeType":"FunctionCall","src":"4244:369:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ExactInputSingleParams_$1627_memory_ptr","typeString":"struct ISwapRouter.ExactInputSingleParams memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_ExactInputSingleParams_$1627_memory_ptr","typeString":"struct ISwapRouter.ExactInputSingleParams memory"}],"expression":{"arguments":[{"expression":{"id":3180,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"4197:8:21","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3181,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4206:6:21","memberName":"router","nodeType":"MemberAccess","referencedDeclaration":2547,"src":"4197:15:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3179,"name":"ISwapRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1703,"src":"4185:11:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ISwapRouter_$1703_$","typeString":"type(contract ISwapRouter)"}},"id":3182,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4185:28:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ISwapRouter_$1703","typeString":"contract ISwapRouter"}},"id":3183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4214:16:21","memberName":"exactInputSingle","nodeType":"MemberAccess","referencedDeclaration":1636,"src":"4185:45:21","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_struct$_ExactInputSingleParams_$1627_memory_ptr_$returns$_t_uint256_$","typeString":"function (struct ISwapRouter.ExactInputSingleParams memory) payable external returns (uint256)"}},"id":3195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4185:438:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4173:450:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3197,"nodeType":"ExpressionStatement","src":"4173:450:21"},{"expression":{"id":3198,"name":"amountOut","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"4641:9:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3131,"id":3199,"nodeType":"Return","src":"4634:16:21"}]},"id":3201,"implemented":true,"kind":"function","modifiers":[],"name":"_swapTokensForToken","nameLocation":"3449:19:21","nodeType":"FunctionDefinition","parameters":{"id":3128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3121,"mutability":"mutable","name":"tokenIn","nameLocation":"3486:7:21","nodeType":"VariableDeclaration","scope":3201,"src":"3478:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3120,"name":"address","nodeType":"ElementaryTypeName","src":"3478:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3123,"mutability":"mutable","name":"tokenOut","nameLocation":"3511:8:21","nodeType":"VariableDeclaration","scope":3201,"src":"3503:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3122,"name":"address","nodeType":"ElementaryTypeName","src":"3503:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3125,"mutability":"mutable","name":"fee","nameLocation":"3536:3:21","nodeType":"VariableDeclaration","scope":3201,"src":"3529:10:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":3124,"name":"uint24","nodeType":"ElementaryTypeName","src":"3529:6:21","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"},{"constant":false,"id":3127,"mutability":"mutable","name":"amountIn","nameLocation":"3557:8:21","nodeType":"VariableDeclaration","scope":3201,"src":"3549:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3126,"name":"uint256","nodeType":"ElementaryTypeName","src":"3549:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3468:103:21"},"returnParameters":{"id":3131,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3130,"mutability":"mutable","name":"amountOut","nameLocation":"3598:9:21","nodeType":"VariableDeclaration","scope":3201,"src":"3590:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3129,"name":"uint256","nodeType":"ElementaryTypeName","src":"3590:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3589:19:21"},"scope":3202,"src":"3440:1217:21","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":3203,"src":"213:4446:21","usedErrors":[]}],"src":"0:4660:21"},"id":21},"contracts/modules/BurnMUSE.sol":{"ast":{"absolutePath":"contracts/modules/BurnMUSE.sol","exportedSymbols":{"Attestation":[1799],"AttestationRequest":[1841],"AttestationRequestData":[1835],"BurnMUSE":[3293],"Data":[3857],"DelegatedAttestationRequest":[1854],"DelegatedRevocationRequest":[1900],"Events":[4090],"IEAS":[2108],"IERC20":[77],"IMUSE":[2246],"IMecenateFeed":[2341],"IMecenateFeedFactory":[2419],"IMecenateTreasury":[2432],"IMecenateUsers":[2490],"ISchemaRegistry":[2156],"MultiAttestationRequest":[1861],"MultiDelegatedAttestationRequest":[1876],"MultiDelegatedRevocationRequest":[1922],"MultiRevocationRequest":[1907],"RevocationRequest":[1887],"RevocationRequestData":[1881],"Signature":[1778],"Strings":[306],"Structures":[2671],"Version":[6130]},"id":3294,"nodeType":"SourceUnit","nodes":[{"id":3204,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"0:23:22"},{"absolutePath":"contracts/interfaces/IMUSE.sol","file":"../interfaces/IMUSE.sol","id":3205,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3294,"sourceUnit":2247,"src":"24:33:22","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IMecenateFeedFactory.sol","file":"../interfaces/IMecenateFeedFactory.sol","id":3206,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3294,"sourceUnit":2420,"src":"58:48:22","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/modules/Events.sol","file":"./Events.sol","id":3207,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3294,"sourceUnit":4091,"src":"107:22:22","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":3208,"name":"Events","nameLocations":["161:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":4090,"src":"161:6:22"},"id":3209,"nodeType":"InheritanceSpecifier","src":"161:6:22"}],"canonicalName":"BurnMUSE","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3293,"linearizedBaseContracts":[3293,4090,3857,6130],"name":"BurnMUSE","nameLocation":"149:8:22","nodeType":"ContractDefinition","nodes":[{"body":{"id":3230,"nodeType":"Block","src":"244:137:22","statements":[{"expression":{"arguments":[{"id":3225,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3211,"src":"338:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":3218,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"281:8:22","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3219,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"290:15:22","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2545,"src":"281:24:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3217,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"260:20:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2419_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":3220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"260:46:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2419","typeString":"contract IMecenateFeedFactory"}},"id":3221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"307:9:22","memberName":"museToken","nodeType":"MemberAccess","referencedDeclaration":2376,"src":"260:56:22","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":3222,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"260:58:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3216,"name":"IMUSE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2246,"src":"254:5:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMUSE_$2246_$","typeString":"type(contract IMUSE)"}},"id":3223,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"254:65:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMUSE_$2246","typeString":"contract IMUSE"}},"id":3224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"320:4:22","memberName":"burn","nodeType":"MemberAccess","referencedDeclaration":2245,"src":"254:70:22","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256) external"}},"id":3226,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"254:99:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3227,"nodeType":"ExpressionStatement","src":"254:99:22"},{"expression":{"hexValue":"74727565","id":3228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"370:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3215,"id":3229,"nodeType":"Return","src":"363:11:22"}]},"id":3231,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"183:5:22","nodeType":"FunctionDefinition","parameters":{"id":3212,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3211,"mutability":"mutable","name":"value","nameLocation":"197:5:22","nodeType":"VariableDeclaration","scope":3231,"src":"189:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3210,"name":"uint256","nodeType":"ElementaryTypeName","src":"189:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"188:15:22"},"returnParameters":{"id":3215,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3214,"mutability":"mutable","name":"success","nameLocation":"235:7:22","nodeType":"VariableDeclaration","scope":3231,"src":"230:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3213,"name":"bool","nodeType":"ElementaryTypeName","src":"230:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"229:14:22"},"scope":3293,"src":"174:207:22","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3263,"nodeType":"Block","src":"497:179:22","statements":[{"expression":{"arguments":[{"id":3249,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3233,"src":"599:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":3252,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"613:4:22","typeDescriptions":{"typeIdentifier":"t_contract$_BurnMUSE_$3293","typeString":"contract BurnMUSE"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BurnMUSE_$3293","typeString":"contract BurnMUSE"}],"id":3251,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"605:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3250,"name":"address","nodeType":"ElementaryTypeName","src":"605:7:22","typeDescriptions":{}}},"id":3253,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"605:13:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3254,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3235,"src":"620:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":3242,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"534:8:22","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3243,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"543:15:22","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2545,"src":"534:24:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3241,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"513:20:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2419_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":3244,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"513:46:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2419","typeString":"contract IMecenateFeedFactory"}},"id":3245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"560:9:22","memberName":"museToken","nodeType":"MemberAccess","referencedDeclaration":2376,"src":"513:56:22","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":3246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"513:58:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3240,"name":"IMUSE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2246,"src":"507:5:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMUSE_$2246_$","typeString":"type(contract IMUSE)"}},"id":3247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"507:65:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMUSE_$2246","typeString":"contract IMUSE"}},"id":3248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"586:12:22","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":76,"src":"507:91:22","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":3255,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"507:119:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3256,"nodeType":"ExpressionStatement","src":"507:119:22"},{"expression":{"arguments":[{"id":3258,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3235,"src":"642:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3257,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3231,"src":"636:5:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) returns (bool)"}},"id":3259,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"636:12:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3260,"nodeType":"ExpressionStatement","src":"636:12:22"},{"expression":{"hexValue":"74727565","id":3261,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"665:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3239,"id":3262,"nodeType":"Return","src":"658:11:22"}]},"id":3264,"implemented":true,"kind":"function","modifiers":[],"name":"_burnFrom","nameLocation":"396:9:22","nodeType":"FunctionDefinition","parameters":{"id":3236,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3233,"mutability":"mutable","name":"from","nameLocation":"423:4:22","nodeType":"VariableDeclaration","scope":3264,"src":"415:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3232,"name":"address","nodeType":"ElementaryTypeName","src":"415:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3235,"mutability":"mutable","name":"value","nameLocation":"445:5:22","nodeType":"VariableDeclaration","scope":3264,"src":"437:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3234,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"405:51:22"},"returnParameters":{"id":3239,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3238,"mutability":"mutable","name":"success","nameLocation":"488:7:22","nodeType":"VariableDeclaration","scope":3264,"src":"483:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3237,"name":"bool","nodeType":"ElementaryTypeName","src":"483:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"482:14:22"},"scope":3293,"src":"387:289:22","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3276,"nodeType":"Block","src":"755:82:22","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":3270,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"793:8:22","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3271,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"802:15:22","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2545,"src":"793:24:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3269,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"772:20:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2419_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":3272,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"772:46:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2419","typeString":"contract IMecenateFeedFactory"}},"id":3273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"819:9:22","memberName":"museToken","nodeType":"MemberAccess","referencedDeclaration":2376,"src":"772:56:22","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":3274,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"772:58:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3268,"id":3275,"nodeType":"Return","src":"765:65:22"}]},"id":3277,"implemented":true,"kind":"function","modifiers":[],"name":"getTokenAddress","nameLocation":"691:15:22","nodeType":"FunctionDefinition","parameters":{"id":3265,"nodeType":"ParameterList","parameters":[],"src":"706:2:22"},"returnParameters":{"id":3268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3267,"mutability":"mutable","name":"token","nameLocation":"748:5:22","nodeType":"VariableDeclaration","scope":3277,"src":"740:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3266,"name":"address","nodeType":"ElementaryTypeName","src":"740:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"739:15:22"},"scope":3293,"src":"682:155:22","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3291,"nodeType":"Block","src":"958:83:22","statements":[{"expression":{"id":3289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3282,"name":"exchange","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"968:8:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":3284,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"1000:8:22","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3285,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1009:15:22","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2545,"src":"1000:24:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3283,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"979:20:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2419_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":3286,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"979:46:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2419","typeString":"contract IMecenateFeedFactory"}},"id":3287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1026:6:22","memberName":"router","nodeType":"MemberAccess","referencedDeclaration":2391,"src":"979:53:22","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":3288,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"979:55:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"968:66:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3290,"nodeType":"ExpressionStatement","src":"968:66:22"}]},"id":3292,"implemented":true,"kind":"function","modifiers":[],"name":"getExchangeAddress","nameLocation":"852:18:22","nodeType":"FunctionDefinition","parameters":{"id":3278,"nodeType":"ParameterList","parameters":[],"src":"870:2:22"},"returnParameters":{"id":3281,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3280,"mutability":"mutable","name":"exchange","nameLocation":"944:8:22","nodeType":"VariableDeclaration","scope":3292,"src":"936:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3279,"name":"address","nodeType":"ElementaryTypeName","src":"936:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"935:18:22"},"scope":3293,"src":"843:198:22","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":3294,"src":"131:912:22","usedErrors":[]}],"src":"0:1044:22"},"id":22},"contracts/modules/Creation.sol":{"ast":{"absolutePath":"contracts/modules/Creation.sol","exportedSymbols":{"Attestation":[1799],"AttestationRequest":[1841],"AttestationRequestData":[1835],"BurnDAI":[3202],"BurnMUSE":[3293],"Creation":[3507],"Data":[3857],"DelegatedAttestationRequest":[1854],"DelegatedRevocationRequest":[1900],"Deposit":[4049],"Events":[4090],"IEAS":[2108],"IERC20":[77],"IMUSE":[2246],"IMecenateFeed":[2341],"IMecenateFeedFactory":[2419],"IMecenateTreasury":[2432],"IMecenateUsers":[2490],"ISchemaRegistry":[2156],"ISwapRouter":[1703],"IUniswapV3SwapCallback":[1603],"IWETH":[2510],"MultiAttestationRequest":[1861],"MultiDelegatedAttestationRequest":[1876],"MultiDelegatedRevocationRequest":[1922],"MultiRevocationRequest":[1907],"RevocationRequest":[1887],"RevocationRequestData":[1881],"SafeMath":[1484],"Signature":[1778],"Staking":[5316],"Strings":[306],"Structures":[2671],"TokenManager":[6040],"Version":[6130]},"id":3508,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3295,"literals":["solidity","^","0.8",".9"],"nodeType":"PragmaDirective","src":"377:23:23"},{"absolutePath":"contracts/modules/Staking.sol","file":"./Staking.sol","id":3296,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3508,"sourceUnit":5317,"src":"402:23:23","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":3297,"name":"Staking","nameLocations":["457:7:23"],"nodeType":"IdentifierPath","referencedDeclaration":5316,"src":"457:7:23"},"id":3298,"nodeType":"InheritanceSpecifier","src":"457:7:23"}],"canonicalName":"Creation","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3507,"linearizedBaseContracts":[3507,5316,6040,3202,3293,4049,4090,3857,6130],"name":"Creation","nameLocation":"445:8:23","nodeType":"ContractDefinition","nodes":[{"body":{"id":3505,"nodeType":"Block","src":"889:2379:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3329,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"907:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"911:6:23","memberName":"sender","nodeType":"MemberAccess","src":"907:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3331,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3523,"src":"921:5:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"907:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":3328,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"899:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":3333,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"899:28:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3334,"nodeType":"ExpressionStatement","src":"899:28:23"},{"expression":{"arguments":[{"arguments":[{"id":3341,"name":"seller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3317,"src":"1038:6:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"expression":{"id":3337,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"974:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3338,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"983:19:23","memberName":"usersModuleContract","nodeType":"MemberAccess","referencedDeclaration":2543,"src":"974:28:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3336,"name":"IMecenateUsers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2490,"src":"959:14:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateUsers_$2490_$","typeString":"type(contract IMecenateUsers)"}},"id":3339,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"959:44:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateUsers_$2490","typeString":"contract IMecenateUsers"}},"id":3340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1004:16:23","memberName":"checkifUserExist","nodeType":"MemberAccess","referencedDeclaration":2464,"src":"959:61:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view external returns (bool)"}},"id":3342,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"959:99:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"555345525f4e4f545f4558495354","id":3343,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1072:16:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_6a30548538b44c7c399c3fe1d567a4d60d62cbbd14ed880bc3963c8108d6cdde","typeString":"literal_string \"USER_NOT_EXIST\""},"value":"USER_NOT_EXIST"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6a30548538b44c7c399c3fe1d567a4d60d62cbbd14ed880bc3963c8108d6cdde","typeString":"literal_string \"USER_NOT_EXIST\""}],"id":3335,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"938:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3344,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"938:160:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3345,"nodeType":"ExpressionStatement","src":"938:160:23"},{"expression":{"arguments":[{"baseExpression":{"id":3347,"name":"validStatuses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3537,"src":"1130:13:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_bool_$","typeString":"mapping(uint8 => bool)"}},"id":3355,"indexExpression":{"arguments":[{"expression":{"expression":{"expression":{"id":3350,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"1150:4:23","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":3351,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1155:8:23","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"1150:13:23","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":3352,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1164:8:23","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2577,"src":"1150:22:23","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2607_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":3353,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1173:6:23","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":2594,"src":"1150:29:23","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}],"id":3349,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1144:5:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3348,"name":"uint8","nodeType":"ElementaryTypeName","src":"1144:5:23","typeDescriptions":{}}},"id":3354,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1144:36:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1130:51:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"494e56414c49445f535441545553","id":3356,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1195:16:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_e7ad020d83a3bbd1c079bc4bbb16e4b9f3f2424f3e40f83d8262d5329f30bf33","typeString":"literal_string \"INVALID_STATUS\""},"value":"INVALID_STATUS"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e7ad020d83a3bbd1c079bc4bbb16e4b9f3f2424f3e40f83d8262d5329f30bf33","typeString":"literal_string \"INVALID_STATUS\""}],"id":3346,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1109:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3357,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1109:112:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3358,"nodeType":"ExpressionStatement","src":"1109:112:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3360,"name":"stakeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3310,"src":"1240:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3361,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1254:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1240:15:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5354414b455f414d4f554e545f5a45524f","id":3363,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1257:19:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_849c3f8b91cf2334f55865bdc5129917e74cccfbc0e15dbd355baf1993e3f730","typeString":"literal_string \"STAKE_AMOUNT_ZERO\""},"value":"STAKE_AMOUNT_ZERO"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_849c3f8b91cf2334f55865bdc5129917e74cccfbc0e15dbd355baf1993e3f730","typeString":"literal_string \"STAKE_AMOUNT_ZERO\""}],"id":3359,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1232:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3364,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1232:45:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3365,"nodeType":"ExpressionStatement","src":"1232:45:23"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3367,"name":"payment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3308,"src":"1296:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3368,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1306:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1296:11:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5041594d454e545f5a45524f","id":3370,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1309:14:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_2ba2ccc5fe7209522ab55efc0f720667cc943bfc95ff8e0092241afcda583d13","typeString":"literal_string \"PAYMENT_ZERO\""},"value":"PAYMENT_ZERO"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2ba2ccc5fe7209522ab55efc0f720667cc943bfc95ff8e0092241afcda583d13","typeString":"literal_string \"PAYMENT_ZERO\""}],"id":3366,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1288:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3371,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1288:36:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3372,"nodeType":"ExpressionStatement","src":"1288:36:23"},{"assignments":[3374],"declarations":[{"constant":false,"id":3374,"mutability":"mutable","name":"stake","nameLocation":"1343:5:23","nodeType":"VariableDeclaration","scope":3505,"src":"1335:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3373,"name":"uint256","nodeType":"ElementaryTypeName","src":"1335:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3375,"nodeType":"VariableDeclarationStatement","src":"1335:13:23"},{"condition":{"id":3376,"name":"useStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3319,"src":"1363:8:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3417,"nodeType":"Block","src":"1563:217:23","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"id":3397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3393,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3313,"src":"1581:7:23","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":3394,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"1592:10:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":3395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1603:6:23","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2525,"src":"1592:17:23","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2525_$","typeString":"type(enum Structures.Tokens)"}},"id":3396,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1610:3:23","memberName":"NaN","nodeType":"MemberAccess","referencedDeclaration":2522,"src":"1592:21:23","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"src":"1581:32:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3407,"nodeType":"IfStatement","src":"1577:123:23","trueBody":{"id":3406,"nodeType":"Block","src":"1615:85:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3399,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1641:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1645:5:23","memberName":"value","nodeType":"MemberAccess","src":"1641:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3401,"name":"stakeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3310,"src":"1654:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1641:24:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"57524f4e475f4d53475f56414c5545","id":3403,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1667:17:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ae07d1b7c3dc106530466b77c73527317615e68f79ba5326b9bcf3c061a87ae","typeString":"literal_string \"WRONG_MSG_VALUE\""},"value":"WRONG_MSG_VALUE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ae07d1b7c3dc106530466b77c73527317615e68f79ba5326b9bcf3c061a87ae","typeString":"literal_string \"WRONG_MSG_VALUE\""}],"id":3398,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1633:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3404,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1633:52:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3405,"nodeType":"ExpressionStatement","src":"1633:52:23"}]}},{"expression":{"id":3415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3408,"name":"stake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3374,"src":"1714:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3410,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3313,"src":"1732:7:23","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},{"id":3411,"name":"seller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3317,"src":"1741:6:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3412,"name":"funder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3315,"src":"1749:6:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3413,"name":"stakeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3310,"src":"1757:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3409,"name":"_addStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4706,"src":"1722:9:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Tokens_$2525_$_t_address_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,address,address,uint256) returns (uint256)"}},"id":3414,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1722:47:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1714:55:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3416,"nodeType":"ExpressionStatement","src":"1714:55:23"}]},"id":3418,"nodeType":"IfStatement","src":"1359:421:23","trueBody":{"id":3392,"nodeType":"Block","src":"1373:184:23","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3380,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3313,"src":"1432:7:23","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},{"id":3381,"name":"seller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3317,"src":"1441:6:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3378,"name":"Deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4049,"src":"1412:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Deposit_$4049_$","typeString":"type(contract Deposit)"}},"id":3379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1420:11:23","memberName":"_getDeposit","nodeType":"MemberAccess","referencedDeclaration":4048,"src":"1412:19:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_enum$_Tokens_$2525_$_t_address_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,address) view returns (uint256)"}},"id":3382,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1412:36:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3383,"name":"stakeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3310,"src":"1452:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1412:51:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5354414b455f494e434f5252454354","id":3385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1481:17:23","typeDescriptions":{"typeIdentifier":"t_stringliteral_100319a84d0f3890efe46b41e6f5d0707fc1a8c06671421f3a6f1e6b07425e0b","typeString":"literal_string \"STAKE_INCORRECT\""},"value":"STAKE_INCORRECT"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_100319a84d0f3890efe46b41e6f5d0707fc1a8c06671421f3a6f1e6b07425e0b","typeString":"literal_string \"STAKE_INCORRECT\""}],"id":3377,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1387:7:23","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3386,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1387:125:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3387,"nodeType":"ExpressionStatement","src":"1387:125:23"},{"expression":{"id":3390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3388,"name":"stake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3374,"src":"1527:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3389,"name":"stakeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3310,"src":"1535:11:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1527:19:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3391,"nodeType":"ExpressionStatement","src":"1527:19:23"}]}},{"assignments":[3420],"declarations":[{"constant":false,"id":3420,"mutability":"mutable","name":"duration","nameLocation":"1798:8:23","nodeType":"VariableDeclaration","scope":3505,"src":"1790:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3419,"name":"uint256","nodeType":"ElementaryTypeName","src":"1790:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3427,"initialValue":{"baseExpression":{"id":3421,"name":"postDurationToDays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3533,"src":"1809:18:23","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_uint256_$","typeString":"mapping(uint8 => uint256)"}},"id":3426,"indexExpression":{"arguments":[{"id":3424,"name":"postDuration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3306,"src":"1834:12:23","typeDescriptions":{"typeIdentifier":"t_enum$_PostDuration_$2537","typeString":"enum Structures.PostDuration"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_PostDuration_$2537","typeString":"enum Structures.PostDuration"}],"id":3423,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1828:5:23","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3422,"name":"uint8","nodeType":"ElementaryTypeName","src":"1828:5:23","typeDescriptions":{}}},"id":3425,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1828:19:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1809:39:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1790:58:23"},{"expression":{"arguments":[{"expression":{"expression":{"id":3429,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"1873:10:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":3430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1884:10:23","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2521,"src":"1873:21:23","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2521_$","typeString":"type(enum Structures.PostStatus)"}},"id":3431,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1895:8:23","memberName":"Proposed","nodeType":"MemberAccess","referencedDeclaration":2514,"src":"1873:30:23","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}],"id":3428,"name":"_changeStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3714,"src":"1859:13:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_PostStatus_$2521_$returns$__$","typeString":"function (enum Structures.PostStatus)"}},"id":3432,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1859:45:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3433,"nodeType":"ExpressionStatement","src":"1859:45:23"},{"assignments":[3438],"declarations":[{"constant":false,"id":3438,"mutability":"mutable","name":"creator","nameLocation":"1938:7:23","nodeType":"VariableDeclaration","scope":3505,"src":"1915:30:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_User_$2627_memory_ptr","typeString":"struct Structures.User"},"typeName":{"id":3437,"nodeType":"UserDefinedTypeName","pathNode":{"id":3436,"name":"Structures.User","nameLocations":["1915:10:23","1926:4:23"],"nodeType":"IdentifierPath","referencedDeclaration":2627,"src":"1915:15:23"},"referencedDeclaration":2627,"src":"1915:15:23","typeDescriptions":{"typeIdentifier":"t_struct$_User_$2627_storage_ptr","typeString":"struct Structures.User"}},"visibility":"internal"}],"id":3446,"initialValue":{"arguments":[{"id":3444,"name":"seller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3317,"src":"2031:6:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"expression":{"id":3440,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"1976:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3441,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1985:19:23","memberName":"usersModuleContract","nodeType":"MemberAccess","referencedDeclaration":2543,"src":"1976:28:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3439,"name":"IMecenateUsers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2490,"src":"1948:14:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateUsers_$2490_$","typeString":"type(contract IMecenateUsers)"}},"id":3442,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1948:66:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateUsers_$2490","typeString":"contract IMecenateUsers"}},"id":3443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2015:15:23","memberName":"getUserMetadata","nodeType":"MemberAccess","referencedDeclaration":2482,"src":"1948:82:23","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_struct$_User_$2627_memory_ptr_$","typeString":"function (address) view external returns (struct Structures.User memory)"}},"id":3445,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1948:90:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_User_$2627_memory_ptr","typeString":"struct Structures.User memory"}},"nodeType":"VariableDeclarationStatement","src":"1915:123:23"},{"assignments":[3451],"declarations":[{"constant":false,"id":3451,"mutability":"mutable","name":"newPost","nameLocation":"2147:7:23","nodeType":"VariableDeclaration","scope":3505,"src":"2124:30:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_memory_ptr","typeString":"struct Structures.Post"},"typeName":{"id":3450,"nodeType":"UserDefinedTypeName","pathNode":{"id":3449,"name":"Structures.Post","nameLocations":["2124:10:23","2135:4:23"],"nodeType":"IdentifierPath","referencedDeclaration":2574,"src":"2124:15:23"},"referencedDeclaration":2574,"src":"2124:15:23","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage_ptr","typeString":"struct Structures.Post"}},"visibility":"internal"}],"id":3489,"initialValue":{"arguments":[{"id":3454,"name":"creator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3438,"src":"2196:7:23","typeDescriptions":{"typeIdentifier":"t_struct$_User_$2627_memory_ptr","typeString":"struct Structures.User memory"}},{"arguments":[{"arguments":[{"id":3459,"name":"postType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3303,"src":"2331:8:23","typeDescriptions":{"typeIdentifier":"t_enum$_PostType_$2531","typeString":"enum Structures.PostType"}},{"expression":{"expression":{"id":3460,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"2369:10:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":3461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2380:10:23","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2521,"src":"2369:21:23","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2521_$","typeString":"type(enum Structures.PostStatus)"}},"id":3462,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2391:8:23","memberName":"Proposed","nodeType":"MemberAccess","referencedDeclaration":2514,"src":"2369:30:23","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},{"expression":{"id":3463,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"2440:5:23","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2446:9:23","memberName":"timestamp","nodeType":"MemberAccess","src":"2440:15:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":3465,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2491:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":3466,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3420,"src":"2524:8:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3467,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3313,"src":"2563:7:23","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_PostType_$2531","typeString":"enum Structures.PostType"},{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}],"expression":{"id":3457,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"2275:10:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":3458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2286:12:23","memberName":"PostSettings","nodeType":"MemberAccess","referencedDeclaration":2607,"src":"2275:23:23","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_PostSettings_$2607_storage_ptr_$","typeString":"type(struct Structures.PostSettings storage pointer)"}},"id":3468,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["2321:8:23","2361:6:23","2421:17:23","2477:12:23","2514:8:23","2554:7:23"],"names":["postType","status","creationTimeStamp","endTimeStamp","duration","tokenId"],"nodeType":"FunctionCall","src":"2275:314:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2607_memory_ptr","typeString":"struct Structures.PostSettings memory"}},{"arguments":[{"arguments":[{"hexValue":"30","id":3473,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2674:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3472,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2666:7:23","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3471,"name":"address","nodeType":"ElementaryTypeName","src":"2666:7:23","typeDescriptions":{}}},"id":3474,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2666:10:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3475,"name":"seller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3317,"src":"2706:6:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3476,"name":"stake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3374,"src":"2741:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3477,"name":"payment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3308,"src":"2777:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":3478,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2818:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":3479,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2850:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":3469,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"2615:10:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":3470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2626:10:23","memberName":"PostEscrow","nodeType":"MemberAccess","referencedDeclaration":2620,"src":"2615:21:23","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_PostEscrow_$2620_storage_ptr_$","typeString":"type(struct Structures.PostEscrow storage pointer)"}},"id":3480,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["2659:5:23","2698:6:23","2734:5:23","2768:7:23","2806:10:23","2841:7:23"],"names":["buyer","seller","stake","payment","punishment","penalty"],"nodeType":"FunctionCall","src":"2615:255:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_memory_ptr","typeString":"struct Structures.PostEscrow memory"}},{"arguments":[{"id":3483,"name":"encryptedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3300,"src":"2960:13:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3484,"name":"ZEROHASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3521,"src":"3009:8:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3485,"name":"ZEROHASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3521,"src":"3054:8:23","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3481,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"2894:10:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":3482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2905:17:23","memberName":"PostEncryptedData","nodeType":"MemberAccess","referencedDeclaration":2591,"src":"2894:28:23","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_PostEncryptedData_$2591_storage_ptr_$","typeString":"type(struct Structures.PostEncryptedData storage pointer)"}},"id":3486,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["2945:13:23","2995:12:23","3039:13:23"],"names":["encryptedData","encryptedKey","decryptedData"],"nodeType":"FunctionCall","src":"2894:187:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_PostEncryptedData_$2591_memory_ptr","typeString":"struct Structures.PostEncryptedData memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_PostSettings_$2607_memory_ptr","typeString":"struct Structures.PostSettings memory"},{"typeIdentifier":"t_struct$_PostEscrow_$2620_memory_ptr","typeString":"struct Structures.PostEscrow memory"},{"typeIdentifier":"t_struct$_PostEncryptedData_$2591_memory_ptr","typeString":"struct Structures.PostEncryptedData memory"}],"expression":{"id":3455,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"2227:10:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":3456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2238:8:23","memberName":"PostData","nodeType":"MemberAccess","referencedDeclaration":2584,"src":"2227:19:23","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_PostData_$2584_storage_ptr_$","typeString":"type(struct Structures.PostData storage pointer)"}},"id":3487,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["2265:8:23","2607:6:23","2888:4:23"],"names":["settings","escrow","data"],"nodeType":"FunctionCall","src":"2227:869:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_memory_ptr","typeString":"struct Structures.PostData memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_User_$2627_memory_ptr","typeString":"struct Structures.User memory"},{"typeIdentifier":"t_struct$_PostData_$2584_memory_ptr","typeString":"struct Structures.PostData memory"}],"expression":{"id":3452,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"2157:10:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":3453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2168:4:23","memberName":"Post","nodeType":"MemberAccess","referencedDeclaration":2574,"src":"2157:15:23","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Post_$2574_storage_ptr_$","typeString":"type(struct Structures.Post storage pointer)"}},"id":3488,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["2187:7:23","2217:8:23"],"names":["creator","postdata"],"nodeType":"FunctionCall","src":"2157:950:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_memory_ptr","typeString":"struct Structures.Post memory"}},"nodeType":"VariableDeclarationStatement","src":"2124:983:23"},{"expression":{"id":3492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3490,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"3159:4:23","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3491,"name":"newPost","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3451,"src":"3166:7:23","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_memory_ptr","typeString":"struct Structures.Post memory"}},"src":"3159:14:23","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":3493,"nodeType":"ExpressionStatement","src":"3159:14:23"},{"expression":{"id":3497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3184:20:23","subExpression":{"expression":{"id":3494,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"3184:8:23","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3496,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3193:9:23","memberName":"postCount","nodeType":"MemberAccess","referencedDeclaration":2541,"src":"3184:18:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3498,"nodeType":"ExpressionStatement","src":"3184:20:23"},{"eventCall":{"arguments":[{"id":3500,"name":"newPost","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3451,"src":"3228:7:23","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_memory_ptr","typeString":"struct Structures.Post memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Post_$2574_memory_ptr","typeString":"struct Structures.Post memory"}],"id":3499,"name":"Created","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4059,"src":"3220:7:23","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_struct$_Post_$2574_memory_ptr_$returns$__$","typeString":"function (struct Structures.Post memory)"}},"id":3501,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3220:16:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3502,"nodeType":"EmitStatement","src":"3215:21:23"},{"expression":{"id":3503,"name":"newPost","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3451,"src":"3254:7:23","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_memory_ptr","typeString":"struct Structures.Post memory"}},"functionReturnParameters":3327,"id":3504,"nodeType":"Return","src":"3247:14:23"}]},"functionSelector":"d2af47ab","id":3506,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":3322,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3313,"src":"835:7:23","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}}],"id":3323,"kind":"modifierInvocation","modifierName":{"id":3321,"name":"onlyValidTokenID","nameLocations":["818:16:23"],"nodeType":"IdentifierPath","referencedDeclaration":5642,"src":"818:16:23"},"nodeType":"ModifierInvocation","src":"818:25:23"}],"name":"createPost","nameLocation":"480:10:23","nodeType":"FunctionDefinition","parameters":{"id":3320,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3300,"mutability":"mutable","name":"encryptedHash","nameLocation":"513:13:23","nodeType":"VariableDeclaration","scope":3506,"src":"500:26:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3299,"name":"bytes","nodeType":"ElementaryTypeName","src":"500:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3303,"mutability":"mutable","name":"postType","nameLocation":"556:8:23","nodeType":"VariableDeclaration","scope":3506,"src":"536:28:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PostType_$2531","typeString":"enum Structures.PostType"},"typeName":{"id":3302,"nodeType":"UserDefinedTypeName","pathNode":{"id":3301,"name":"Structures.PostType","nameLocations":["536:10:23","547:8:23"],"nodeType":"IdentifierPath","referencedDeclaration":2531,"src":"536:19:23"},"referencedDeclaration":2531,"src":"536:19:23","typeDescriptions":{"typeIdentifier":"t_enum$_PostType_$2531","typeString":"enum Structures.PostType"}},"visibility":"internal"},{"constant":false,"id":3306,"mutability":"mutable","name":"postDuration","nameLocation":"598:12:23","nodeType":"VariableDeclaration","scope":3506,"src":"574:36:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PostDuration_$2537","typeString":"enum Structures.PostDuration"},"typeName":{"id":3305,"nodeType":"UserDefinedTypeName","pathNode":{"id":3304,"name":"Structures.PostDuration","nameLocations":["574:10:23","585:12:23"],"nodeType":"IdentifierPath","referencedDeclaration":2537,"src":"574:23:23"},"referencedDeclaration":2537,"src":"574:23:23","typeDescriptions":{"typeIdentifier":"t_enum$_PostDuration_$2537","typeString":"enum Structures.PostDuration"}},"visibility":"internal"},{"constant":false,"id":3308,"mutability":"mutable","name":"payment","nameLocation":"628:7:23","nodeType":"VariableDeclaration","scope":3506,"src":"620:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3307,"name":"uint256","nodeType":"ElementaryTypeName","src":"620:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3310,"mutability":"mutable","name":"stakeAmount","nameLocation":"653:11:23","nodeType":"VariableDeclaration","scope":3506,"src":"645:19:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3309,"name":"uint256","nodeType":"ElementaryTypeName","src":"645:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3313,"mutability":"mutable","name":"tokenId","nameLocation":"692:7:23","nodeType":"VariableDeclaration","scope":3506,"src":"674:25:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"typeName":{"id":3312,"nodeType":"UserDefinedTypeName","pathNode":{"id":3311,"name":"Structures.Tokens","nameLocations":["674:10:23","685:6:23"],"nodeType":"IdentifierPath","referencedDeclaration":2525,"src":"674:17:23"},"referencedDeclaration":2525,"src":"674:17:23","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":3315,"mutability":"mutable","name":"funder","nameLocation":"717:6:23","nodeType":"VariableDeclaration","scope":3506,"src":"709:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3314,"name":"address","nodeType":"ElementaryTypeName","src":"709:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3317,"mutability":"mutable","name":"seller","nameLocation":"741:6:23","nodeType":"VariableDeclaration","scope":3506,"src":"733:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3316,"name":"address","nodeType":"ElementaryTypeName","src":"733:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3319,"mutability":"mutable","name":"useStake","nameLocation":"762:8:23","nodeType":"VariableDeclaration","scope":3506,"src":"757:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3318,"name":"bool","nodeType":"ElementaryTypeName","src":"757:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"490:286:23"},"returnParameters":{"id":3327,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3326,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3506,"src":"861:22:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_memory_ptr","typeString":"struct Structures.Post"},"typeName":{"id":3325,"nodeType":"UserDefinedTypeName","pathNode":{"id":3324,"name":"Structures.Post","nameLocations":["861:10:23","872:4:23"],"nodeType":"IdentifierPath","referencedDeclaration":2574,"src":"861:15:23"},"referencedDeclaration":2574,"src":"861:15:23","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage_ptr","typeString":"struct Structures.Post"}},"visibility":"internal"}],"src":"860:24:23"},"scope":3507,"src":"471:2797:23","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":3508,"src":"427:2843:23","usedErrors":[]}],"src":"377:2894:23"},"id":23},"contracts/modules/Data.sol":{"ast":{"absolutePath":"contracts/modules/Data.sol","exportedSymbols":{"Attestation":[1799],"AttestationRequest":[1841],"AttestationRequestData":[1835],"Data":[3857],"DelegatedAttestationRequest":[1854],"DelegatedRevocationRequest":[1900],"IEAS":[2108],"IMecenateFeed":[2341],"IMecenateFeedFactory":[2419],"IMecenateTreasury":[2432],"IMecenateUsers":[2490],"ISchemaRegistry":[2156],"MultiAttestationRequest":[1861],"MultiDelegatedAttestationRequest":[1876],"MultiDelegatedRevocationRequest":[1922],"MultiRevocationRequest":[1907],"RevocationRequest":[1887],"RevocationRequestData":[1881],"Signature":[1778],"Strings":[306],"Structures":[2671],"Version":[6130]},"id":3858,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3509,"literals":["solidity","^","0.8",".9"],"nodeType":"PragmaDirective","src":"32:23:24"},{"absolutePath":"contracts/interfaces/IMecenateFeed.sol","file":"../interfaces/IMecenateFeed.sol","id":3510,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3858,"sourceUnit":2342,"src":"57:41:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IMecenateUsers.sol","file":"../interfaces/IMecenateUsers.sol","id":3511,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3858,"sourceUnit":2491,"src":"99:42:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IMecenateTreasury.sol","file":"../interfaces/IMecenateTreasury.sol","id":3512,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3858,"sourceUnit":2433,"src":"142:45:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IMecenateFeedFactory.sol","file":"../interfaces/IMecenateFeedFactory.sol","id":3513,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3858,"sourceUnit":2420,"src":"188:48:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/helpers/eas/IEAS.sol","file":"../helpers/eas/IEAS.sol","id":3514,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3858,"sourceUnit":2109,"src":"237:33:24","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/modules/Version.sol","file":"./Version.sol","id":3515,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3858,"sourceUnit":6131,"src":"271:23:24","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3517,"name":"Version","nameLocations":["440:7:24"],"nodeType":"IdentifierPath","referencedDeclaration":6130,"src":"440:7:24"},"id":3518,"nodeType":"InheritanceSpecifier","src":"440:7:24"}],"canonicalName":"Data","contractDependencies":[],"contractKind":"contract","documentation":{"id":3516,"nodeType":"StructuredDocumentation","src":"296:126:24","text":" @title Data\n @dev This contract stores data related to Mecenate posts and provides functions to interact with it."},"fullyImplemented":true,"id":3857,"linearizedBaseContracts":[3857,6130],"name":"Data","nameLocation":"432:4:24","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":3521,"mutability":"constant","name":"ZEROHASH","nameLocation":"478:8:24","nodeType":"VariableDeclaration","scope":3857,"src":"454:41:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3519,"name":"bytes","nodeType":"ElementaryTypeName","src":"454:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"value":{"hexValue":"30783030","id":3520,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"489:6:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_27489e20a0060b723a1748bdff5e44570ee9fae64141728105692eac6031e8a4","typeString":"literal_string \"0x00\""},"value":"0x00"},"visibility":"internal"},{"constant":false,"functionSelector":"8da5cb5b","id":3523,"mutability":"mutable","name":"owner","nameLocation":"517:5:24","nodeType":"VariableDeclaration","scope":3857,"src":"502:20:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3522,"name":"address","nodeType":"ElementaryTypeName","src":"502:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"functionSelector":"05c1f502","id":3526,"mutability":"mutable","name":"post","nameLocation":"552:4:24","nodeType":"VariableDeclaration","scope":3857,"src":"529:27:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post"},"typeName":{"id":3525,"nodeType":"UserDefinedTypeName","pathNode":{"id":3524,"name":"Structures.Post","nameLocations":["529:10:24","540:4:24"],"nodeType":"IdentifierPath","referencedDeclaration":2574,"src":"529:15:24"},"referencedDeclaration":2574,"src":"529:15:24","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage_ptr","typeString":"struct Structures.Post"}},"visibility":"public"},{"constant":false,"id":3529,"mutability":"mutable","name":"settings","nameLocation":"596:8:24","nodeType":"VariableDeclaration","scope":3857,"src":"563:41:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings"},"typeName":{"id":3528,"nodeType":"UserDefinedTypeName","pathNode":{"id":3527,"name":"Structures.FeedSettings","nameLocations":["563:10:24","574:12:24"],"nodeType":"IdentifierPath","referencedDeclaration":2550,"src":"563:23:24"},"referencedDeclaration":2550,"src":"563:23:24","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage_ptr","typeString":"struct Structures.FeedSettings"}},"visibility":"internal"},{"constant":false,"id":3533,"mutability":"mutable","name":"postDurationToDays","nameLocation":"646:18:24","nodeType":"VariableDeclaration","scope":3857,"src":"611:53:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_uint256_$","typeString":"mapping(uint8 => uint256)"},"typeName":{"id":3532,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3530,"name":"uint8","nodeType":"ElementaryTypeName","src":"619:5:24","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Mapping","src":"611:25:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_uint256_$","typeString":"mapping(uint8 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3531,"name":"uint256","nodeType":"ElementaryTypeName","src":"628:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},{"constant":false,"id":3537,"mutability":"mutable","name":"validStatuses","nameLocation":"703:13:24","nodeType":"VariableDeclaration","scope":3857,"src":"671:45:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_bool_$","typeString":"mapping(uint8 => bool)"},"typeName":{"id":3536,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3534,"name":"uint8","nodeType":"ElementaryTypeName","src":"679:5:24","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Mapping","src":"671:22:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_bool_$","typeString":"mapping(uint8 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3535,"name":"bool","nodeType":"ElementaryTypeName","src":"688:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"body":{"id":3675,"nodeType":"Block","src":"915:893:24","statements":[{"expression":{"id":3559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3555,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"925:8:24","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3557,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"934:15:24","memberName":"punishmentRatio","nodeType":"MemberAccess","referencedDeclaration":2539,"src":"925:24:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"313030303030303030303030303030303030","id":3558,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"952:18:24","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000_by_1","typeString":"int_const 100000000000000000"},"value":"100000000000000000"},"src":"925:45:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3560,"nodeType":"ExpressionStatement","src":"925:45:24"},{"expression":{"id":3565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3561,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"998:8:24","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3563,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1007:9:24","memberName":"postCount","nodeType":"MemberAccess","referencedDeclaration":2541,"src":"998:18:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":3564,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1019:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"998:22:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3566,"nodeType":"ExpressionStatement","src":"998:22:24"},{"expression":{"id":3571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3567,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"1059:8:24","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3569,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1068:19:24","memberName":"usersModuleContract","nodeType":"MemberAccess","referencedDeclaration":2543,"src":"1059:28:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3570,"name":"usersModuleContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3539,"src":"1090:19:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1059:50:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3572,"nodeType":"ExpressionStatement","src":"1059:50:24"},{"expression":{"id":3578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3573,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"1119:8:24","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3575,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1128:15:24","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2545,"src":"1119:24:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":3576,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1146:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1150:6:24","memberName":"sender","nodeType":"MemberAccess","src":"1146:10:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1119:37:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3579,"nodeType":"ExpressionStatement","src":"1119:37:24"},{"expression":{"id":3588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3580,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"1166:8:24","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3582,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1175:6:24","memberName":"router","nodeType":"MemberAccess","referencedDeclaration":2547,"src":"1166:15:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":3584,"name":"factoryContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3541,"src":"1205:15:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3583,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"1184:20:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2419_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":3585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1184:37:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2419","typeString":"contract IMecenateFeedFactory"}},"id":3586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1222:6:24","memberName":"router","nodeType":"MemberAccess","referencedDeclaration":2391,"src":"1184:44:24","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":3587,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1184:46:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1166:64:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3589,"nodeType":"ExpressionStatement","src":"1166:64:24"},{"expression":{"id":3595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3590,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"1240:8:24","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3592,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1249:7:24","memberName":"version","nodeType":"MemberAccess","referencedDeclaration":2549,"src":"1240:16:24","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"id":3593,"name":"_version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6129,"src":"1259:8:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":3594,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1259:10:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1240:29:24","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":3596,"nodeType":"ExpressionStatement","src":"1240:29:24"},{"expression":{"id":3607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"expression":{"expression":{"id":3597,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"1280:4:24","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":3601,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1285:8:24","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"1280:13:24","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":3602,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1294:8:24","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2577,"src":"1280:22:24","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2607_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":3603,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1303:6:24","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":2594,"src":"1280:29:24","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"expression":{"id":3604,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"1312:10:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":3605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1323:10:24","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2521,"src":"1312:21:24","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2521_$","typeString":"type(enum Structures.PostStatus)"}},"id":3606,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1334:7:24","memberName":"Waiting","nodeType":"MemberAccess","referencedDeclaration":2513,"src":"1312:29:24","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"src":"1280:61:24","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"id":3608,"nodeType":"ExpressionStatement","src":"1280:61:24"},{"expression":{"id":3618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3609,"name":"postDurationToDays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3533,"src":"1352:18:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_uint256_$","typeString":"mapping(uint8 => uint256)"}},"id":3616,"indexExpression":{"arguments":[{"expression":{"expression":{"id":3612,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"1377:10:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":3613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1388:12:24","memberName":"PostDuration","nodeType":"MemberAccess","referencedDeclaration":2537,"src":"1377:23:24","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostDuration_$2537_$","typeString":"type(enum Structures.PostDuration)"}},"id":3614,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1401:6:24","memberName":"OneDay","nodeType":"MemberAccess","referencedDeclaration":2532,"src":"1377:30:24","typeDescriptions":{"typeIdentifier":"t_enum$_PostDuration_$2537","typeString":"enum Structures.PostDuration"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_PostDuration_$2537","typeString":"enum Structures.PostDuration"}],"id":3611,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1371:5:24","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3610,"name":"uint8","nodeType":"ElementaryTypeName","src":"1371:5:24","typeDescriptions":{}}},"id":3615,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1371:37:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1352:57:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":3617,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1412:6:24","subdenomination":"days","typeDescriptions":{"typeIdentifier":"t_rational_86400_by_1","typeString":"int_const 86400"},"value":"1"},"src":"1352:66:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3619,"nodeType":"ExpressionStatement","src":"1352:66:24"},{"expression":{"id":3629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3620,"name":"postDurationToDays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3533,"src":"1428:18:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_uint256_$","typeString":"mapping(uint8 => uint256)"}},"id":3627,"indexExpression":{"arguments":[{"expression":{"expression":{"id":3623,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"1453:10:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":3624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1464:12:24","memberName":"PostDuration","nodeType":"MemberAccess","referencedDeclaration":2537,"src":"1453:23:24","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostDuration_$2537_$","typeString":"type(enum Structures.PostDuration)"}},"id":3625,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1477:9:24","memberName":"ThreeDays","nodeType":"MemberAccess","referencedDeclaration":2533,"src":"1453:33:24","typeDescriptions":{"typeIdentifier":"t_enum$_PostDuration_$2537","typeString":"enum Structures.PostDuration"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_PostDuration_$2537","typeString":"enum Structures.PostDuration"}],"id":3622,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1447:5:24","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3621,"name":"uint8","nodeType":"ElementaryTypeName","src":"1447:5:24","typeDescriptions":{}}},"id":3626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1447:40:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1428:60:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"33","id":3628,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1491:6:24","subdenomination":"days","typeDescriptions":{"typeIdentifier":"t_rational_259200_by_1","typeString":"int_const 259200"},"value":"3"},"src":"1428:69:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3630,"nodeType":"ExpressionStatement","src":"1428:69:24"},{"expression":{"id":3640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3631,"name":"postDurationToDays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3533,"src":"1507:18:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_uint256_$","typeString":"mapping(uint8 => uint256)"}},"id":3638,"indexExpression":{"arguments":[{"expression":{"expression":{"id":3634,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"1532:10:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":3635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1543:12:24","memberName":"PostDuration","nodeType":"MemberAccess","referencedDeclaration":2537,"src":"1532:23:24","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostDuration_$2537_$","typeString":"type(enum Structures.PostDuration)"}},"id":3636,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1556:7:24","memberName":"OneWeek","nodeType":"MemberAccess","referencedDeclaration":2534,"src":"1532:31:24","typeDescriptions":{"typeIdentifier":"t_enum$_PostDuration_$2537","typeString":"enum Structures.PostDuration"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_PostDuration_$2537","typeString":"enum Structures.PostDuration"}],"id":3633,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1526:5:24","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3632,"name":"uint8","nodeType":"ElementaryTypeName","src":"1526:5:24","typeDescriptions":{}}},"id":3637,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1526:38:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1507:58:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"37","id":3639,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1568:6:24","subdenomination":"days","typeDescriptions":{"typeIdentifier":"t_rational_604800_by_1","typeString":"int_const 604800"},"value":"7"},"src":"1507:67:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3641,"nodeType":"ExpressionStatement","src":"1507:67:24"},{"expression":{"id":3651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3642,"name":"postDurationToDays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3533,"src":"1584:18:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_uint256_$","typeString":"mapping(uint8 => uint256)"}},"id":3649,"indexExpression":{"arguments":[{"expression":{"expression":{"id":3645,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"1609:10:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":3646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1620:12:24","memberName":"PostDuration","nodeType":"MemberAccess","referencedDeclaration":2537,"src":"1609:23:24","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostDuration_$2537_$","typeString":"type(enum Structures.PostDuration)"}},"id":3647,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1633:8:24","memberName":"TwoWeeks","nodeType":"MemberAccess","referencedDeclaration":2535,"src":"1609:32:24","typeDescriptions":{"typeIdentifier":"t_enum$_PostDuration_$2537","typeString":"enum Structures.PostDuration"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_PostDuration_$2537","typeString":"enum Structures.PostDuration"}],"id":3644,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1603:5:24","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3643,"name":"uint8","nodeType":"ElementaryTypeName","src":"1603:5:24","typeDescriptions":{}}},"id":3648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1603:39:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1584:59:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"3134","id":3650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1646:7:24","subdenomination":"days","typeDescriptions":{"typeIdentifier":"t_rational_1209600_by_1","typeString":"int_const 1209600"},"value":"14"},"src":"1584:69:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3652,"nodeType":"ExpressionStatement","src":"1584:69:24"},{"expression":{"id":3662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3653,"name":"postDurationToDays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3533,"src":"1663:18:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_uint256_$","typeString":"mapping(uint8 => uint256)"}},"id":3660,"indexExpression":{"arguments":[{"expression":{"expression":{"id":3656,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"1688:10:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":3657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1699:12:24","memberName":"PostDuration","nodeType":"MemberAccess","referencedDeclaration":2537,"src":"1688:23:24","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostDuration_$2537_$","typeString":"type(enum Structures.PostDuration)"}},"id":3658,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1712:8:24","memberName":"OneMonth","nodeType":"MemberAccess","referencedDeclaration":2536,"src":"1688:32:24","typeDescriptions":{"typeIdentifier":"t_enum$_PostDuration_$2537","typeString":"enum Structures.PostDuration"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_PostDuration_$2537","typeString":"enum Structures.PostDuration"}],"id":3655,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1682:5:24","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3654,"name":"uint8","nodeType":"ElementaryTypeName","src":"1682:5:24","typeDescriptions":{}}},"id":3659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1682:39:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1663:59:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"3330","id":3661,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1725:7:24","subdenomination":"days","typeDescriptions":{"typeIdentifier":"t_rational_2592000_by_1","typeString":"int_const 2592000"},"value":"30"},"src":"1663:69:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3663,"nodeType":"ExpressionStatement","src":"1663:69:24"},{"expression":{"id":3673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3664,"name":"validStatuses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3537,"src":"1743:13:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_bool_$","typeString":"mapping(uint8 => bool)"}},"id":3671,"indexExpression":{"arguments":[{"expression":{"expression":{"id":3667,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"1763:10:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":3668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1774:10:24","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2521,"src":"1763:21:24","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2521_$","typeString":"type(enum Structures.PostStatus)"}},"id":3669,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1785:7:24","memberName":"Waiting","nodeType":"MemberAccess","referencedDeclaration":2513,"src":"1763:29:24","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}],"id":3666,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1757:5:24","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3665,"name":"uint8","nodeType":"ElementaryTypeName","src":"1757:5:24","typeDescriptions":{}}},"id":3670,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1757:36:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1743:51:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3672,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1797:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1743:58:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3674,"nodeType":"ExpressionStatement","src":"1743:58:24"}]},"id":3676,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":3550,"name":"_major","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3543,"src":"891:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3551,"name":"_minor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3545,"src":"899:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3552,"name":"_patch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3547,"src":"907:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3553,"kind":"baseConstructorSpecifier","modifierName":{"id":3549,"name":"Version","nameLocations":["883:7:24"],"nodeType":"IdentifierPath","referencedDeclaration":6130,"src":"883:7:24"},"nodeType":"ModifierInvocation","src":"883:31:24"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3548,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3539,"mutability":"mutable","name":"usersModuleContract","nameLocation":"752:19:24","nodeType":"VariableDeclaration","scope":3676,"src":"744:27:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3538,"name":"address","nodeType":"ElementaryTypeName","src":"744:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3541,"mutability":"mutable","name":"factoryContract","nameLocation":"789:15:24","nodeType":"VariableDeclaration","scope":3676,"src":"781:23:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3540,"name":"address","nodeType":"ElementaryTypeName","src":"781:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3543,"mutability":"mutable","name":"_major","nameLocation":"822:6:24","nodeType":"VariableDeclaration","scope":3676,"src":"814:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3542,"name":"uint256","nodeType":"ElementaryTypeName","src":"814:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3545,"mutability":"mutable","name":"_minor","nameLocation":"846:6:24","nodeType":"VariableDeclaration","scope":3676,"src":"838:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3544,"name":"uint256","nodeType":"ElementaryTypeName","src":"838:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3547,"mutability":"mutable","name":"_patch","nameLocation":"870:6:24","nodeType":"VariableDeclaration","scope":3676,"src":"862:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3546,"name":"uint256","nodeType":"ElementaryTypeName","src":"862:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"734:148:24"},"returnParameters":{"id":3554,"nodeType":"ParameterList","parameters":[],"src":"915:0:24"},"scope":3857,"src":"723:1085:24","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3713,"nodeType":"Block","src":"1879:175:24","statements":[{"expression":{"id":3692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3682,"name":"validStatuses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3537,"src":"1889:13:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_bool_$","typeString":"mapping(uint8 => bool)"}},"id":3690,"indexExpression":{"arguments":[{"expression":{"expression":{"expression":{"id":3685,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"1909:4:24","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":3686,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1914:8:24","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"1909:13:24","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":3687,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1923:8:24","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2577,"src":"1909:22:24","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2607_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":3688,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1932:6:24","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":2594,"src":"1909:29:24","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}],"id":3684,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1903:5:24","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3683,"name":"uint8","nodeType":"ElementaryTypeName","src":"1903:5:24","typeDescriptions":{}}},"id":3689,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1903:36:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1889:51:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":3691,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1943:5:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"1889:59:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3693,"nodeType":"ExpressionStatement","src":"1889:59:24"},{"expression":{"id":3701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3694,"name":"validStatuses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3537,"src":"1958:13:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_bool_$","typeString":"mapping(uint8 => bool)"}},"id":3699,"indexExpression":{"arguments":[{"id":3697,"name":"newStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3679,"src":"1978:9:24","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}],"id":3696,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1972:5:24","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":3695,"name":"uint8","nodeType":"ElementaryTypeName","src":"1972:5:24","typeDescriptions":{}}},"id":3698,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1972:16:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1958:31:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3700,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1992:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1958:38:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3702,"nodeType":"ExpressionStatement","src":"1958:38:24"},{"expression":{"id":3711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"expression":{"expression":{"id":3703,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"2006:4:24","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":3707,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2011:8:24","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"2006:13:24","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":3708,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2020:8:24","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2577,"src":"2006:22:24","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2607_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":3709,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2029:6:24","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":2594,"src":"2006:29:24","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3710,"name":"newStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3679,"src":"2038:9:24","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"src":"2006:41:24","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"id":3712,"nodeType":"ExpressionStatement","src":"2006:41:24"}]},"id":3714,"implemented":true,"kind":"function","modifiers":[],"name":"_changeStatus","nameLocation":"1823:13:24","nodeType":"FunctionDefinition","parameters":{"id":3680,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3679,"mutability":"mutable","name":"newStatus","nameLocation":"1859:9:24","nodeType":"VariableDeclaration","scope":3714,"src":"1837:31:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"},"typeName":{"id":3678,"nodeType":"UserDefinedTypeName","pathNode":{"id":3677,"name":"Structures.PostStatus","nameLocations":["1837:10:24","1848:10:24"],"nodeType":"IdentifierPath","referencedDeclaration":2521,"src":"1837:21:24"},"referencedDeclaration":2521,"src":"1837:21:24","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"visibility":"internal"}],"src":"1836:33:24"},"returnParameters":{"id":3681,"nodeType":"ParameterList","parameters":[],"src":"1879:0:24"},"scope":3857,"src":"1814:240:24","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3725,"nodeType":"Block","src":"2127:53:24","statements":[{"expression":{"expression":{"expression":{"expression":{"id":3720,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"2144:4:24","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":3721,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2149:8:24","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"2144:13:24","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":3722,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2158:8:24","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2577,"src":"2144:22:24","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2607_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":3723,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2167:6:24","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":2594,"src":"2144:29:24","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"functionReturnParameters":3719,"id":3724,"nodeType":"Return","src":"2137:36:24"}]},"functionSelector":"4e69d560","id":3726,"implemented":true,"kind":"function","modifiers":[],"name":"getStatus","nameLocation":"2069:9:24","nodeType":"FunctionDefinition","parameters":{"id":3715,"nodeType":"ParameterList","parameters":[],"src":"2078:2:24"},"returnParameters":{"id":3719,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3718,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3726,"src":"2104:21:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"},"typeName":{"id":3717,"nodeType":"UserDefinedTypeName","pathNode":{"id":3716,"name":"Structures.PostStatus","nameLocations":["2104:10:24","2115:10:24"],"nodeType":"IdentifierPath","referencedDeclaration":2521,"src":"2104:21:24"},"referencedDeclaration":2521,"src":"2104:21:24","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"visibility":"internal"}],"src":"2103:23:24"},"scope":3857,"src":"2060:120:24","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3737,"nodeType":"Block","src":"2250:54:24","statements":[{"expression":{"expression":{"expression":{"expression":{"id":3732,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"2267:4:24","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":3733,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2272:8:24","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"2267:13:24","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":3734,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2281:8:24","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2577,"src":"2267:22:24","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2607_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":3735,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2290:7:24","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":2606,"src":"2267:30:24","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"functionReturnParameters":3731,"id":3736,"nodeType":"Return","src":"2260:37:24"}]},"functionSelector":"010a38f5","id":3738,"implemented":true,"kind":"function","modifiers":[],"name":"getTokenId","nameLocation":"2195:10:24","nodeType":"FunctionDefinition","parameters":{"id":3727,"nodeType":"ParameterList","parameters":[],"src":"2205:2:24"},"returnParameters":{"id":3731,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3730,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3738,"src":"2231:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"typeName":{"id":3729,"nodeType":"UserDefinedTypeName","pathNode":{"id":3728,"name":"Structures.Tokens","nameLocations":["2231:10:24","2242:6:24"],"nodeType":"IdentifierPath","referencedDeclaration":2525,"src":"2231:17:24"},"referencedDeclaration":2525,"src":"2231:17:24","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"visibility":"internal"}],"src":"2230:19:24"},"scope":3857,"src":"2186:118:24","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3783,"nodeType":"Block","src":"2369:372:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"id":3750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"expression":{"id":3743,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"2383:4:24","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":3744,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2388:8:24","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"2383:13:24","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":3745,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2397:8:24","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2577,"src":"2383:22:24","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2607_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":3746,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2406:7:24","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":2606,"src":"2383:30:24","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":3747,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"2417:10:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":3748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2428:6:24","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2525,"src":"2417:17:24","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2525_$","typeString":"type(enum Structures.Tokens)"}},"id":3749,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2435:4:24","memberName":"MUSE","nodeType":"MemberAccess","referencedDeclaration":2523,"src":"2417:22:24","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"src":"2383:56:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"id":3766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"expression":{"id":3759,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"2541:4:24","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":3760,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2546:8:24","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"2541:13:24","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":3761,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2555:8:24","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2577,"src":"2541:22:24","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2607_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":3762,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2564:7:24","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":2606,"src":"2541:30:24","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":3763,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"2575:10:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":3764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2586:6:24","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2525,"src":"2575:17:24","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2525_$","typeString":"type(enum Structures.Tokens)"}},"id":3765,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2593:3:24","memberName":"DAI","nodeType":"MemberAccess","referencedDeclaration":2524,"src":"2575:21:24","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"src":"2541:55:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3780,"nodeType":"Block","src":"2693:42:24","statements":[{"expression":{"arguments":[{"hexValue":"30","id":3777,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2722:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3776,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2714:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3775,"name":"address","nodeType":"ElementaryTypeName","src":"2714:7:24","typeDescriptions":{}}},"id":3778,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2714:10:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3742,"id":3779,"nodeType":"Return","src":"2707:17:24"}]},"id":3781,"nodeType":"IfStatement","src":"2537:198:24","trueBody":{"id":3774,"nodeType":"Block","src":"2598:89:24","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":3768,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"2640:8:24","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3769,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2649:15:24","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2545,"src":"2640:24:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3767,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"2619:20:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2419_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":3770,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2619:46:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2419","typeString":"contract IMecenateFeedFactory"}},"id":3771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2666:8:24","memberName":"daiToken","nodeType":"MemberAccess","referencedDeclaration":2386,"src":"2619:55:24","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":3772,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2619:57:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3742,"id":3773,"nodeType":"Return","src":"2612:64:24"}]}},"id":3782,"nodeType":"IfStatement","src":"2379:356:24","trueBody":{"id":3758,"nodeType":"Block","src":"2441:90:24","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":3752,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"2483:8:24","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3753,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2492:15:24","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2545,"src":"2483:24:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3751,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"2462:20:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2419_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":3754,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2462:46:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2419","typeString":"contract IMecenateFeedFactory"}},"id":3755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2509:9:24","memberName":"museToken","nodeType":"MemberAccess","referencedDeclaration":2376,"src":"2462:56:24","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":3756,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2462:58:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3742,"id":3757,"nodeType":"Return","src":"2455:65:24"}]}}]},"functionSelector":"5ad4e170","id":3784,"implemented":true,"kind":"function","modifiers":[],"name":"getTokenIdAddress","nameLocation":"2319:17:24","nodeType":"FunctionDefinition","parameters":{"id":3739,"nodeType":"ParameterList","parameters":[],"src":"2336:2:24"},"returnParameters":{"id":3742,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3741,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3784,"src":"2360:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3740,"name":"address","nodeType":"ElementaryTypeName","src":"2360:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2359:9:24"},"scope":3857,"src":"2310:431:24","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3800,"nodeType":"Block","src":"2808:81:24","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"id":3796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3791,"name":"_token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3787,"src":"2826:6:24","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"expression":{"id":3792,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"2836:4:24","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":3793,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2841:8:24","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"2836:13:24","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":3794,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2850:8:24","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2577,"src":"2836:22:24","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2607_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":3795,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2859:7:24","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":2606,"src":"2836:30:24","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"src":"2826:40:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"57524f4e475f544f4b454e","id":3797,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2868:13:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_c2a5ce41a94d934cf004fb0c5e3f69254251b50ba813e9f01e80a27cfee744e4","typeString":"literal_string \"WRONG_TOKEN\""},"value":"WRONG_TOKEN"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c2a5ce41a94d934cf004fb0c5e3f69254251b50ba813e9f01e80a27cfee744e4","typeString":"literal_string \"WRONG_TOKEN\""}],"id":3790,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2818:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3798,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2818:64:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3799,"nodeType":"ExpressionStatement","src":"2818:64:24"}]},"id":3801,"implemented":true,"kind":"function","modifiers":[],"name":"_checkToken","nameLocation":"2756:11:24","nodeType":"FunctionDefinition","parameters":{"id":3788,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3787,"mutability":"mutable","name":"_token","nameLocation":"2786:6:24","nodeType":"VariableDeclaration","scope":3801,"src":"2768:24:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"typeName":{"id":3786,"nodeType":"UserDefinedTypeName","pathNode":{"id":3785,"name":"Structures.Tokens","nameLocations":["2768:10:24","2779:6:24"],"nodeType":"IdentifierPath","referencedDeclaration":2525,"src":"2768:17:24"},"referencedDeclaration":2525,"src":"2768:17:24","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"visibility":"internal"}],"src":"2767:26:24"},"returnParameters":{"id":3789,"nodeType":"ParameterList","parameters":[],"src":"2808:0:24"},"scope":3857,"src":"2747:142:24","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3811,"nodeType":"Block","src":"2958:52:24","statements":[{"expression":{"expression":{"expression":{"expression":{"id":3806,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"2975:4:24","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":3807,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2980:8:24","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"2975:13:24","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":3808,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2989:6:24","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"2975:20:24","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":3809,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2996:7:24","memberName":"payment","nodeType":"MemberAccess","referencedDeclaration":2615,"src":"2975:28:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3805,"id":3810,"nodeType":"Return","src":"2968:35:24"}]},"functionSelector":"d24e0c87","id":3812,"implemented":true,"kind":"function","modifiers":[],"name":"getPaymentRequested","nameLocation":"2904:19:24","nodeType":"FunctionDefinition","parameters":{"id":3802,"nodeType":"ParameterList","parameters":[],"src":"2923:2:24"},"returnParameters":{"id":3805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3804,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3812,"src":"2949:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3803,"name":"uint256","nodeType":"ElementaryTypeName","src":"2949:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2948:9:24"},"scope":3857,"src":"2895:115:24","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3822,"nodeType":"Block","src":"3077:50:24","statements":[{"expression":{"expression":{"expression":{"expression":{"id":3817,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"3094:4:24","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":3818,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3099:8:24","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"3094:13:24","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":3819,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3108:6:24","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"3094:20:24","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":3820,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3115:5:24","memberName":"stake","nodeType":"MemberAccess","referencedDeclaration":2613,"src":"3094:26:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3816,"id":3821,"nodeType":"Return","src":"3087:33:24"}]},"functionSelector":"faeb5e17","id":3823,"implemented":true,"kind":"function","modifiers":[],"name":"getStakeRequested","nameLocation":"3025:17:24","nodeType":"FunctionDefinition","parameters":{"id":3813,"nodeType":"ParameterList","parameters":[],"src":"3042:2:24"},"returnParameters":{"id":3816,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3815,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3823,"src":"3068:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3814,"name":"uint256","nodeType":"ElementaryTypeName","src":"3068:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3067:9:24"},"scope":3857,"src":"3016:111:24","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3831,"nodeType":"Block","src":"3186:42:24","statements":[{"expression":{"expression":{"id":3828,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"3203:8:24","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":3829,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3212:9:24","memberName":"postCount","nodeType":"MemberAccess","referencedDeclaration":2541,"src":"3203:18:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3827,"id":3830,"nodeType":"Return","src":"3196:25:24"}]},"functionSelector":"17906c2e","id":3832,"implemented":true,"kind":"function","modifiers":[],"name":"postCount","nameLocation":"3142:9:24","nodeType":"FunctionDefinition","parameters":{"id":3824,"nodeType":"ParameterList","parameters":[],"src":"3151:2:24"},"returnParameters":{"id":3827,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3826,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3832,"src":"3177:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3825,"name":"uint256","nodeType":"ElementaryTypeName","src":"3177:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3176:9:24"},"scope":3857,"src":"3133:95:24","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3842,"nodeType":"Block","src":"3299:56:24","statements":[{"expression":{"expression":{"expression":{"expression":{"id":3837,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"3316:4:24","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":3838,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3321:8:24","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"3316:13:24","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":3839,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3330:4:24","memberName":"data","nodeType":"MemberAccess","referencedDeclaration":2583,"src":"3316:18:24","typeDescriptions":{"typeIdentifier":"t_struct$_PostEncryptedData_$2591_storage","typeString":"struct Structures.PostEncryptedData storage ref"}},"id":3840,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3335:13:24","memberName":"encryptedData","nodeType":"MemberAccess","referencedDeclaration":2586,"src":"3316:32:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"functionReturnParameters":3836,"id":3841,"nodeType":"Return","src":"3309:39:24"}]},"functionSelector":"729e2eb1","id":3843,"implemented":true,"kind":"function","modifiers":[],"name":"getEncryptedPost","nameLocation":"3243:16:24","nodeType":"FunctionDefinition","parameters":{"id":3833,"nodeType":"ParameterList","parameters":[],"src":"3259:2:24"},"returnParameters":{"id":3836,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3835,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3843,"src":"3285:12:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3834,"name":"bytes","nodeType":"ElementaryTypeName","src":"3285:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3284:14:24"},"scope":3857,"src":"3234:121:24","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3851,"nodeType":"Block","src":"3427:28:24","statements":[{"expression":{"id":3849,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"3444:4:24","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"functionReturnParameters":3848,"id":3850,"nodeType":"Return","src":"3437:11:24"}]},"functionSelector":"8c6838ba","id":3852,"implemented":true,"kind":"function","modifiers":[],"name":"getPost","nameLocation":"3370:7:24","nodeType":"FunctionDefinition","parameters":{"id":3844,"nodeType":"ParameterList","parameters":[],"src":"3377:2:24"},"returnParameters":{"id":3848,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3847,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3852,"src":"3403:22:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_memory_ptr","typeString":"struct Structures.Post"},"typeName":{"id":3846,"nodeType":"UserDefinedTypeName","pathNode":{"id":3845,"name":"Structures.Post","nameLocations":["3403:10:24","3414:4:24"],"nodeType":"IdentifierPath","referencedDeclaration":2574,"src":"3403:15:24"},"referencedDeclaration":2574,"src":"3403:15:24","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage_ptr","typeString":"struct Structures.Post"}},"visibility":"internal"}],"src":"3402:24:24"},"scope":3857,"src":"3361:94:24","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3855,"nodeType":"Block","src":"3488:2:24","statements":[]},"id":3856,"implemented":true,"kind":"receive","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3853,"nodeType":"ParameterList","parameters":[],"src":"3468:2:24"},"returnParameters":{"id":3854,"nodeType":"ParameterList","parameters":[],"src":"3488:0:24"},"scope":3857,"src":"3461:29:24","stateMutability":"payable","virtual":false,"visibility":"external"}],"scope":3858,"src":"423:3069:24","usedErrors":[]}],"src":"32:3461:24"},"id":24},"contracts/modules/Deposit.sol":{"ast":{"absolutePath":"contracts/modules/Deposit.sol","exportedSymbols":{"Attestation":[1799],"AttestationRequest":[1841],"AttestationRequestData":[1835],"BurnDAI":[3202],"BurnMUSE":[3293],"Data":[3857],"DelegatedAttestationRequest":[1854],"DelegatedRevocationRequest":[1900],"Deposit":[4049],"Events":[4090],"IEAS":[2108],"IERC20":[77],"IMUSE":[2246],"IMecenateFeed":[2341],"IMecenateFeedFactory":[2419],"IMecenateTreasury":[2432],"IMecenateUsers":[2490],"ISchemaRegistry":[2156],"ISwapRouter":[1703],"IUniswapV3SwapCallback":[1603],"IWETH":[2510],"MultiAttestationRequest":[1861],"MultiDelegatedAttestationRequest":[1876],"MultiDelegatedRevocationRequest":[1922],"MultiRevocationRequest":[1907],"RevocationRequest":[1887],"RevocationRequestData":[1881],"SafeMath":[1484],"Signature":[1778],"Strings":[306],"Structures":[2671],"TokenManager":[6040],"Version":[6130]},"id":4050,"nodeType":"SourceUnit","nodes":[{"id":3859,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"0:23:25"},{"absolutePath":"@openzeppelin/contracts/utils/math/SafeMath.sol","file":"@openzeppelin/contracts/utils/math/SafeMath.sol","id":3860,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4050,"sourceUnit":1485,"src":"24:57:25","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":3861,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4050,"sourceUnit":78,"src":"82:56:25","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/modules/TokenManager.sol","file":"./TokenManager.sol","id":3862,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4050,"sourceUnit":6041,"src":"140:28:25","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Deposit","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4049,"linearizedBaseContracts":[4049],"name":"Deposit","nameLocation":"179:7:25","nodeType":"ContractDefinition","nodes":[{"global":false,"id":3865,"libraryName":{"id":3863,"name":"SafeMath","nameLocations":["199:8:25"],"nodeType":"IdentifierPath","referencedDeclaration":1484,"src":"199:8:25"},"nodeType":"UsingForDirective","src":"193:27:25","typeName":{"id":3864,"name":"uint256","nodeType":"ElementaryTypeName","src":"212:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"id":3871,"mutability":"mutable","name":"_deposit","nameLocation":"282:8:25","nodeType":"VariableDeclaration","scope":4049,"src":"226:64:25","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"},"typeName":{"id":3870,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3866,"name":"uint256","nodeType":"ElementaryTypeName","src":"234:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"226:47:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3869,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3867,"name":"address","nodeType":"ElementaryTypeName","src":"253:7:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"245:27:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3868,"name":"uint256","nodeType":"ElementaryTypeName","src":"264:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"anonymous":false,"eventSelector":"fe2caf3897ec3e02a1d458d232d7c62c17809d25dbfe65864ce842162d6c217c","id":3882,"name":"DepositIncreased","nameLocation":"303:16:25","nodeType":"EventDefinition","parameters":{"id":3881,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3874,"indexed":false,"mutability":"mutable","name":"tokenID","nameLocation":"347:7:25","nodeType":"VariableDeclaration","scope":3882,"src":"329:25:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"typeName":{"id":3873,"nodeType":"UserDefinedTypeName","pathNode":{"id":3872,"name":"Structures.Tokens","nameLocations":["329:10:25","340:6:25"],"nodeType":"IdentifierPath","referencedDeclaration":2525,"src":"329:17:25"},"referencedDeclaration":2525,"src":"329:17:25","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":3876,"indexed":false,"mutability":"mutable","name":"user","nameLocation":"372:4:25","nodeType":"VariableDeclaration","scope":3882,"src":"364:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3875,"name":"address","nodeType":"ElementaryTypeName","src":"364:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3878,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"394:6:25","nodeType":"VariableDeclaration","scope":3882,"src":"386:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3877,"name":"uint256","nodeType":"ElementaryTypeName","src":"386:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3880,"indexed":false,"mutability":"mutable","name":"newDeposit","nameLocation":"418:10:25","nodeType":"VariableDeclaration","scope":3882,"src":"410:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3879,"name":"uint256","nodeType":"ElementaryTypeName","src":"410:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"319:115:25"},"src":"297:138:25"},{"anonymous":false,"eventSelector":"9060f8ffc7acd8270abf2337023e6377669ca44d5b2a23f3513a29380940f357","id":3893,"name":"DepositDecreased","nameLocation":"446:16:25","nodeType":"EventDefinition","parameters":{"id":3892,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3885,"indexed":false,"mutability":"mutable","name":"tokenID","nameLocation":"490:7:25","nodeType":"VariableDeclaration","scope":3893,"src":"472:25:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"typeName":{"id":3884,"nodeType":"UserDefinedTypeName","pathNode":{"id":3883,"name":"Structures.Tokens","nameLocations":["472:10:25","483:6:25"],"nodeType":"IdentifierPath","referencedDeclaration":2525,"src":"472:17:25"},"referencedDeclaration":2525,"src":"472:17:25","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":3887,"indexed":false,"mutability":"mutable","name":"user","nameLocation":"515:4:25","nodeType":"VariableDeclaration","scope":3893,"src":"507:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3886,"name":"address","nodeType":"ElementaryTypeName","src":"507:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3889,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"537:6:25","nodeType":"VariableDeclaration","scope":3893,"src":"529:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3888,"name":"uint256","nodeType":"ElementaryTypeName","src":"529:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3891,"indexed":false,"mutability":"mutable","name":"newDeposit","nameLocation":"561:10:25","nodeType":"VariableDeclaration","scope":3893,"src":"553:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3890,"name":"uint256","nodeType":"ElementaryTypeName","src":"553:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"462:115:25"},"src":"440:138:25"},{"body":{"id":3939,"nodeType":"Block","src":"740:351:25","statements":[{"expression":{"id":3917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3905,"name":"newDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3903,"src":"790:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3915,"name":"amountToAdd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3900,"src":"840:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"baseExpression":{"id":3906,"name":"_deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3871,"src":"803:8:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":3911,"indexExpression":{"arguments":[{"id":3909,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3896,"src":"820:7:25","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}],"id":3908,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"812:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3907,"name":"uint256","nodeType":"ElementaryTypeName","src":"812:7:25","typeDescriptions":{}}},"id":3910,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"812:16:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"803:26:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3913,"indexExpression":{"id":3912,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3898,"src":"830:4:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"803:32:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"836:3:25","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":1348,"src":"803:36:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3916,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"803:49:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"790:62:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3918,"nodeType":"ExpressionStatement","src":"790:62:25"},{"expression":{"id":3928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":3919,"name":"_deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3871,"src":"899:8:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":3925,"indexExpression":{"arguments":[{"id":3922,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3896,"src":"916:7:25","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}],"id":3921,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"908:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3920,"name":"uint256","nodeType":"ElementaryTypeName","src":"908:7:25","typeDescriptions":{}}},"id":3923,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"908:16:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"899:26:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3926,"indexExpression":{"id":3924,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3898,"src":"926:4:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"899:32:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3927,"name":"newDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3903,"src":"934:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"899:45:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3929,"nodeType":"ExpressionStatement","src":"899:45:25"},{"eventCall":{"arguments":[{"id":3931,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3896,"src":"999:7:25","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},{"id":3932,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3898,"src":"1008:4:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3933,"name":"amountToAdd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3900,"src":"1014:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3934,"name":"newDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3903,"src":"1027:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3930,"name":"DepositIncreased","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3882,"src":"982:16:25","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_enum$_Tokens_$2525_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (enum Structures.Tokens,address,uint256,uint256)"}},"id":3935,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"982:56:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3936,"nodeType":"EmitStatement","src":"977:61:25"},{"expression":{"id":3937,"name":"newDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3903,"src":"1074:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3904,"id":3938,"nodeType":"Return","src":"1067:17:25"}]},"id":3940,"implemented":true,"kind":"function","modifiers":[],"name":"_increaseDeposit","nameLocation":"593:16:25","nodeType":"FunctionDefinition","parameters":{"id":3901,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3896,"mutability":"mutable","name":"tokenID","nameLocation":"637:7:25","nodeType":"VariableDeclaration","scope":3940,"src":"619:25:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"typeName":{"id":3895,"nodeType":"UserDefinedTypeName","pathNode":{"id":3894,"name":"Structures.Tokens","nameLocations":["619:10:25","630:6:25"],"nodeType":"IdentifierPath","referencedDeclaration":2525,"src":"619:17:25"},"referencedDeclaration":2525,"src":"619:17:25","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":3898,"mutability":"mutable","name":"user","nameLocation":"662:4:25","nodeType":"VariableDeclaration","scope":3940,"src":"654:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3897,"name":"address","nodeType":"ElementaryTypeName","src":"654:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3900,"mutability":"mutable","name":"amountToAdd","nameLocation":"684:11:25","nodeType":"VariableDeclaration","scope":3940,"src":"676:19:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3899,"name":"uint256","nodeType":"ElementaryTypeName","src":"676:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"609:92:25"},"returnParameters":{"id":3904,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3903,"mutability":"mutable","name":"newDeposit","nameLocation":"728:10:25","nodeType":"VariableDeclaration","scope":3940,"src":"720:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3902,"name":"uint256","nodeType":"ElementaryTypeName","src":"720:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"719:20:25"},"scope":4049,"src":"584:507:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3997,"nodeType":"Block","src":"1256:553:25","statements":[{"assignments":[3953],"declarations":[{"constant":false,"id":3953,"mutability":"mutable","name":"currentDeposit","nameLocation":"1305:14:25","nodeType":"VariableDeclaration","scope":3997,"src":"1297:22:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3952,"name":"uint256","nodeType":"ElementaryTypeName","src":"1297:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3962,"initialValue":{"baseExpression":{"baseExpression":{"id":3954,"name":"_deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3871,"src":"1322:8:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":3959,"indexExpression":{"arguments":[{"id":3957,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3943,"src":"1339:7:25","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}],"id":3956,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1331:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3955,"name":"uint256","nodeType":"ElementaryTypeName","src":"1331:7:25","typeDescriptions":{}}},"id":3958,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1331:16:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1322:26:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3961,"indexExpression":{"id":3960,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3945,"src":"1349:4:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1322:32:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1297:57:25"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3964,"name":"currentDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3953,"src":"1412:14:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3965,"name":"amountToRemove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3947,"src":"1430:14:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1412:32:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"494e53554646494349454e545f4445504f534954","id":3967,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1446:22:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_1bafdd5d54a45209622d7b4fbaa1b4f9a95d4eac24a9200a3c11e152a8c082fa","typeString":"literal_string \"INSUFFICIENT_DEPOSIT\""},"value":"INSUFFICIENT_DEPOSIT"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1bafdd5d54a45209622d7b4fbaa1b4f9a95d4eac24a9200a3c11e152a8c082fa","typeString":"literal_string \"INSUFFICIENT_DEPOSIT\""}],"id":3963,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1404:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3968,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1404:65:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3969,"nodeType":"ExpressionStatement","src":"1404:65:25"},{"expression":{"id":3975,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3970,"name":"newDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3950,"src":"1520:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3973,"name":"amountToRemove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3947,"src":"1552:14:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3971,"name":"currentDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3953,"src":"1533:14:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1548:3:25","memberName":"sub","nodeType":"MemberAccess","referencedDeclaration":1363,"src":"1533:18:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1533:34:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1520:47:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3976,"nodeType":"ExpressionStatement","src":"1520:47:25"},{"expression":{"id":3986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":3977,"name":"_deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3871,"src":"1614:8:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":3983,"indexExpression":{"arguments":[{"id":3980,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3943,"src":"1631:7:25","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}],"id":3979,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1623:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3978,"name":"uint256","nodeType":"ElementaryTypeName","src":"1623:7:25","typeDescriptions":{}}},"id":3981,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1623:16:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1614:26:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3984,"indexExpression":{"id":3982,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3945,"src":"1641:4:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1614:32:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3985,"name":"newDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3950,"src":"1649:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1614:45:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3987,"nodeType":"ExpressionStatement","src":"1614:45:25"},{"eventCall":{"arguments":[{"id":3989,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3943,"src":"1714:7:25","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},{"id":3990,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3945,"src":"1723:4:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3991,"name":"amountToRemove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3947,"src":"1729:14:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3992,"name":"newDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3950,"src":"1745:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3988,"name":"DepositDecreased","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3893,"src":"1697:16:25","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_enum$_Tokens_$2525_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (enum Structures.Tokens,address,uint256,uint256)"}},"id":3993,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1697:59:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3994,"nodeType":"EmitStatement","src":"1692:64:25"},{"expression":{"id":3995,"name":"newDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3950,"src":"1792:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3951,"id":3996,"nodeType":"Return","src":"1785:17:25"}]},"id":3998,"implemented":true,"kind":"function","modifiers":[],"name":"_decreaseDeposit","nameLocation":"1106:16:25","nodeType":"FunctionDefinition","parameters":{"id":3948,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3943,"mutability":"mutable","name":"tokenID","nameLocation":"1150:7:25","nodeType":"VariableDeclaration","scope":3998,"src":"1132:25:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"typeName":{"id":3942,"nodeType":"UserDefinedTypeName","pathNode":{"id":3941,"name":"Structures.Tokens","nameLocations":["1132:10:25","1143:6:25"],"nodeType":"IdentifierPath","referencedDeclaration":2525,"src":"1132:17:25"},"referencedDeclaration":2525,"src":"1132:17:25","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":3945,"mutability":"mutable","name":"user","nameLocation":"1175:4:25","nodeType":"VariableDeclaration","scope":3998,"src":"1167:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3944,"name":"address","nodeType":"ElementaryTypeName","src":"1167:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3947,"mutability":"mutable","name":"amountToRemove","nameLocation":"1197:14:25","nodeType":"VariableDeclaration","scope":3998,"src":"1189:22:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3946,"name":"uint256","nodeType":"ElementaryTypeName","src":"1189:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1122:95:25"},"returnParameters":{"id":3951,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3950,"mutability":"mutable","name":"newDeposit","nameLocation":"1244:10:25","nodeType":"VariableDeclaration","scope":3998,"src":"1236:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3949,"name":"uint256","nodeType":"ElementaryTypeName","src":"1236:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1235:20:25"},"scope":4049,"src":"1097:712:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4027,"nodeType":"Block","src":"1942:239:25","statements":[{"assignments":[4009],"declarations":[{"constant":false,"id":4009,"mutability":"mutable","name":"currentDeposit","nameLocation":"1991:14:25","nodeType":"VariableDeclaration","scope":4027,"src":"1983:22:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4008,"name":"uint256","nodeType":"ElementaryTypeName","src":"1983:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4018,"initialValue":{"baseExpression":{"baseExpression":{"id":4010,"name":"_deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3871,"src":"2008:8:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":4015,"indexExpression":{"arguments":[{"id":4013,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4001,"src":"2025:7:25","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}],"id":4012,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2017:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4011,"name":"uint256","nodeType":"ElementaryTypeName","src":"2017:7:25","typeDescriptions":{}}},"id":4014,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2017:16:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2008:26:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4017,"indexExpression":{"id":4016,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4003,"src":"2035:4:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2008:32:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1983:57:25"},{"expression":{"arguments":[{"id":4020,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4001,"src":"2094:7:25","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},{"id":4021,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4003,"src":"2103:4:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4022,"name":"currentDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4009,"src":"2109:14:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4019,"name":"_decreaseDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3998,"src":"2077:16:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Tokens_$2525_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,address,uint256) returns (uint256)"}},"id":4023,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2077:47:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4024,"nodeType":"ExpressionStatement","src":"2077:47:25"},{"expression":{"id":4025,"name":"currentDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4009,"src":"2160:14:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4007,"id":4026,"nodeType":"Return","src":"2153:21:25"}]},"id":4028,"implemented":true,"kind":"function","modifiers":[],"name":"_clearDeposit","nameLocation":"1824:13:25","nodeType":"FunctionDefinition","parameters":{"id":4004,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4001,"mutability":"mutable","name":"tokenID","nameLocation":"1865:7:25","nodeType":"VariableDeclaration","scope":4028,"src":"1847:25:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"typeName":{"id":4000,"nodeType":"UserDefinedTypeName","pathNode":{"id":3999,"name":"Structures.Tokens","nameLocations":["1847:10:25","1858:6:25"],"nodeType":"IdentifierPath","referencedDeclaration":2525,"src":"1847:17:25"},"referencedDeclaration":2525,"src":"1847:17:25","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":4003,"mutability":"mutable","name":"user","nameLocation":"1890:4:25","nodeType":"VariableDeclaration","scope":4028,"src":"1882:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4002,"name":"address","nodeType":"ElementaryTypeName","src":"1882:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1837:63:25"},"returnParameters":{"id":4007,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4006,"mutability":"mutable","name":"amountRemoved","nameLocation":"1927:13:25","nodeType":"VariableDeclaration","scope":4028,"src":"1919:21:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4005,"name":"uint256","nodeType":"ElementaryTypeName","src":"1919:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1918:23:25"},"scope":4049,"src":"1815:366:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4047,"nodeType":"Block","src":"2311:56:25","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":4038,"name":"_deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3871,"src":"2328:8:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":4043,"indexExpression":{"arguments":[{"id":4041,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4031,"src":"2345:7:25","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}],"id":4040,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2337:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4039,"name":"uint256","nodeType":"ElementaryTypeName","src":"2337:7:25","typeDescriptions":{}}},"id":4042,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2337:16:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2328:26:25","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4045,"indexExpression":{"id":4044,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4033,"src":"2355:4:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2328:32:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4037,"id":4046,"nodeType":"Return","src":"2321:39:25"}]},"id":4048,"implemented":true,"kind":"function","modifiers":[],"name":"_getDeposit","nameLocation":"2196:11:25","nodeType":"FunctionDefinition","parameters":{"id":4034,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4031,"mutability":"mutable","name":"tokenID","nameLocation":"2235:7:25","nodeType":"VariableDeclaration","scope":4048,"src":"2217:25:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"typeName":{"id":4030,"nodeType":"UserDefinedTypeName","pathNode":{"id":4029,"name":"Structures.Tokens","nameLocations":["2217:10:25","2228:6:25"],"nodeType":"IdentifierPath","referencedDeclaration":2525,"src":"2217:17:25"},"referencedDeclaration":2525,"src":"2217:17:25","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":4033,"mutability":"mutable","name":"user","nameLocation":"2260:4:25","nodeType":"VariableDeclaration","scope":4048,"src":"2252:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4032,"name":"address","nodeType":"ElementaryTypeName","src":"2252:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2207:63:25"},"returnParameters":{"id":4037,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4036,"mutability":"mutable","name":"deposit","nameLocation":"2302:7:25","nodeType":"VariableDeclaration","scope":4048,"src":"2294:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4035,"name":"uint256","nodeType":"ElementaryTypeName","src":"2294:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2293:17:25"},"scope":4049,"src":"2187:180:25","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":4050,"src":"170:2199:25","usedErrors":[]}],"src":"0:2370:25"},"id":25},"contracts/modules/Events.sol":{"ast":{"absolutePath":"contracts/modules/Events.sol","exportedSymbols":{"Attestation":[1799],"AttestationRequest":[1841],"AttestationRequestData":[1835],"Data":[3857],"DelegatedAttestationRequest":[1854],"DelegatedRevocationRequest":[1900],"Events":[4090],"IEAS":[2108],"IMecenateFeed":[2341],"IMecenateFeedFactory":[2419],"IMecenateTreasury":[2432],"IMecenateUsers":[2490],"ISchemaRegistry":[2156],"MultiAttestationRequest":[1861],"MultiDelegatedAttestationRequest":[1876],"MultiDelegatedRevocationRequest":[1922],"MultiRevocationRequest":[1907],"RevocationRequest":[1887],"RevocationRequestData":[1881],"Signature":[1778],"Strings":[306],"Structures":[2671],"Version":[6130]},"id":4091,"nodeType":"SourceUnit","nodes":[{"id":4051,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"130:23:26"},{"absolutePath":"contracts/modules/Data.sol","file":"./Data.sol","id":4052,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4091,"sourceUnit":3858,"src":"157:20:26","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":4053,"name":"Data","nameLocations":["209:4:26"],"nodeType":"IdentifierPath","referencedDeclaration":3857,"src":"209:4:26"},"id":4054,"nodeType":"InheritanceSpecifier","src":"209:4:26"}],"canonicalName":"Events","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4090,"linearizedBaseContracts":[4090,3857,6130],"name":"Events","nameLocation":"199:6:26","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"6e8f9f12846cf7ba30acdd742f3eae58c49befeed93f00d60de3bd4f7d09f223","id":4059,"name":"Created","nameLocation":"227:7:26","nodeType":"EventDefinition","parameters":{"id":4058,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4057,"indexed":false,"mutability":"mutable","name":"post","nameLocation":"251:4:26","nodeType":"VariableDeclaration","scope":4059,"src":"235:20:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_memory_ptr","typeString":"struct Structures.Post"},"typeName":{"id":4056,"nodeType":"UserDefinedTypeName","pathNode":{"id":4055,"name":"Structures.Post","nameLocations":["235:10:26","246:4:26"],"nodeType":"IdentifierPath","referencedDeclaration":2574,"src":"235:15:26"},"referencedDeclaration":2574,"src":"235:15:26","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage_ptr","typeString":"struct Structures.Post"}},"visibility":"internal"}],"src":"234:22:26"},"src":"221:36:26"},{"anonymous":false,"eventSelector":"909d9218f6e1f243c7d9044544c7b03e2e7db27d81653992e9018b8b72f4c20d","id":4064,"name":"Accepted","nameLocation":"269:8:26","nodeType":"EventDefinition","parameters":{"id":4063,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4062,"indexed":false,"mutability":"mutable","name":"post","nameLocation":"294:4:26","nodeType":"VariableDeclaration","scope":4064,"src":"278:20:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_memory_ptr","typeString":"struct Structures.Post"},"typeName":{"id":4061,"nodeType":"UserDefinedTypeName","pathNode":{"id":4060,"name":"Structures.Post","nameLocations":["278:10:26","289:4:26"],"nodeType":"IdentifierPath","referencedDeclaration":2574,"src":"278:15:26"},"referencedDeclaration":2574,"src":"278:15:26","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage_ptr","typeString":"struct Structures.Post"}},"visibility":"internal"}],"src":"277:22:26"},"src":"263:37:26"},{"anonymous":false,"eventSelector":"61de5b63673167e253173c50abdc3fd45371dc3205496f46fdb05a9f7927b574","id":4069,"name":"Valid","nameLocation":"312:5:26","nodeType":"EventDefinition","parameters":{"id":4068,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4067,"indexed":false,"mutability":"mutable","name":"post","nameLocation":"334:4:26","nodeType":"VariableDeclaration","scope":4069,"src":"318:20:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_memory_ptr","typeString":"struct Structures.Post"},"typeName":{"id":4066,"nodeType":"UserDefinedTypeName","pathNode":{"id":4065,"name":"Structures.Post","nameLocations":["318:10:26","329:4:26"],"nodeType":"IdentifierPath","referencedDeclaration":2574,"src":"318:15:26"},"referencedDeclaration":2574,"src":"318:15:26","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage_ptr","typeString":"struct Structures.Post"}},"visibility":"internal"}],"src":"317:22:26"},"src":"306:34:26"},{"anonymous":false,"eventSelector":"b0ec4ef3ee1a79effa677af7a82a3a875b4d438307fb7e589a58966e3b913f2f","id":4074,"name":"Invalid","nameLocation":"352:7:26","nodeType":"EventDefinition","parameters":{"id":4073,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4072,"indexed":false,"mutability":"mutable","name":"post","nameLocation":"376:4:26","nodeType":"VariableDeclaration","scope":4074,"src":"360:20:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_memory_ptr","typeString":"struct Structures.Post"},"typeName":{"id":4071,"nodeType":"UserDefinedTypeName","pathNode":{"id":4070,"name":"Structures.Post","nameLocations":["360:10:26","371:4:26"],"nodeType":"IdentifierPath","referencedDeclaration":2574,"src":"360:15:26"},"referencedDeclaration":2574,"src":"360:15:26","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage_ptr","typeString":"struct Structures.Post"}},"visibility":"internal"}],"src":"359:22:26"},"src":"346:36:26"},{"anonymous":false,"eventSelector":"e1e4f505232f636ef105f762488288422aca09c92664516823cf50d134bded5d","id":4079,"name":"Finalized","nameLocation":"394:9:26","nodeType":"EventDefinition","parameters":{"id":4078,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4077,"indexed":false,"mutability":"mutable","name":"post","nameLocation":"420:4:26","nodeType":"VariableDeclaration","scope":4079,"src":"404:20:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_memory_ptr","typeString":"struct Structures.Post"},"typeName":{"id":4076,"nodeType":"UserDefinedTypeName","pathNode":{"id":4075,"name":"Structures.Post","nameLocations":["404:10:26","415:4:26"],"nodeType":"IdentifierPath","referencedDeclaration":2574,"src":"404:15:26"},"referencedDeclaration":2574,"src":"404:15:26","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage_ptr","typeString":"struct Structures.Post"}},"visibility":"internal"}],"src":"403:22:26"},"src":"388:38:26"},{"anonymous":false,"eventSelector":"76c6a8f0836a14a631dc3a45fc0c49d4dd3fc4147167329ba4220ba2664ccaf0","id":4084,"name":"MadePublic","nameLocation":"438:10:26","nodeType":"EventDefinition","parameters":{"id":4083,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4082,"indexed":false,"mutability":"mutable","name":"post","nameLocation":"465:4:26","nodeType":"VariableDeclaration","scope":4084,"src":"449:20:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_memory_ptr","typeString":"struct Structures.Post"},"typeName":{"id":4081,"nodeType":"UserDefinedTypeName","pathNode":{"id":4080,"name":"Structures.Post","nameLocations":["449:10:26","460:4:26"],"nodeType":"IdentifierPath","referencedDeclaration":2574,"src":"449:15:26"},"referencedDeclaration":2574,"src":"449:15:26","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage_ptr","typeString":"struct Structures.Post"}},"visibility":"internal"}],"src":"448:22:26"},"src":"432:39:26"},{"anonymous":false,"eventSelector":"88c430102eab5dbc235ca367ecd5ffa63164bb311015524ecebed009d4d4b5b6","id":4089,"name":"Renounced","nameLocation":"483:9:26","nodeType":"EventDefinition","parameters":{"id":4088,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4087,"indexed":false,"mutability":"mutable","name":"post","nameLocation":"509:4:26","nodeType":"VariableDeclaration","scope":4089,"src":"493:20:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_memory_ptr","typeString":"struct Structures.Post"},"typeName":{"id":4086,"nodeType":"UserDefinedTypeName","pathNode":{"id":4085,"name":"Structures.Post","nameLocations":["493:10:26","504:4:26"],"nodeType":"IdentifierPath","referencedDeclaration":2574,"src":"493:15:26"},"referencedDeclaration":2574,"src":"493:15:26","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage_ptr","typeString":"struct Structures.Post"}},"visibility":"internal"}],"src":"492:22:26"},"src":"477:38:26"}],"scope":4091,"src":"181:337:26","usedErrors":[]}],"src":"130:390:26"},"id":26},"contracts/modules/Finalization.sol":{"ast":{"absolutePath":"contracts/modules/Finalization.sol","exportedSymbols":{"Attestation":[1799],"AttestationRequest":[1841],"AttestationRequestData":[1835],"BurnDAI":[3202],"BurnMUSE":[3293],"Data":[3857],"DelegatedAttestationRequest":[1854],"DelegatedRevocationRequest":[1900],"Deposit":[4049],"Events":[4090],"Finalization":[4489],"IEAS":[2108],"IERC20":[77],"IMUSE":[2246],"IMecenateFeed":[2341],"IMecenateFeedFactory":[2419],"IMecenateTreasury":[2432],"IMecenateUsers":[2490],"ISchemaRegistry":[2156],"ISwapRouter":[1703],"IUniswapV3SwapCallback":[1603],"IWETH":[2510],"MultiAttestationRequest":[1861],"MultiDelegatedAttestationRequest":[1876],"MultiDelegatedRevocationRequest":[1922],"MultiRevocationRequest":[1907],"RevocationRequest":[1887],"RevocationRequestData":[1881],"SafeMath":[1484],"Signature":[1778],"Staking":[5316],"Strings":[306],"Structures":[2671],"TokenManager":[6040],"Version":[6130]},"id":4490,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4092,"literals":["solidity","^","0.8",".9"],"nodeType":"PragmaDirective","src":"32:23:27"},{"absolutePath":"contracts/modules/Staking.sol","file":"./Staking.sol","id":4093,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4490,"sourceUnit":5317,"src":"56:23:27","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":4094,"name":"Staking","nameLocations":["115:7:27"],"nodeType":"IdentifierPath","referencedDeclaration":5316,"src":"115:7:27"},"id":4095,"nodeType":"InheritanceSpecifier","src":"115:7:27"}],"canonicalName":"Finalization","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4489,"linearizedBaseContracts":[4489,5316,6040,3202,3293,4049,4090,3857,6130],"name":"Finalization","nameLocation":"99:12:27","nodeType":"ContractDefinition","nodes":[{"body":{"id":4487,"nodeType":"Block","src":"243:3763:27","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4105,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"261:3:27","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"265:6:27","memberName":"sender","nodeType":"MemberAccess","src":"261:10:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"expression":{"id":4107,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"275:4:27","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":4108,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"280:8:27","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"275:13:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":4109,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"289:6:27","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"275:20:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":4110,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"296:5:27","memberName":"buyer","nodeType":"MemberAccess","referencedDeclaration":2609,"src":"275:26:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"261:40:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e4f545f53454c4c4552","id":4112,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"303:12:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_5da6b782e6837297580639e2387426c4366c23f72270e18b945265d01aac89d7","typeString":"literal_string \"NOT_SELLER\""},"value":"NOT_SELLER"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5da6b782e6837297580639e2387426c4366c23f72270e18b945265d01aac89d7","typeString":"literal_string \"NOT_SELLER\""}],"id":4104,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"253:7:27","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4113,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"253:63:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4114,"nodeType":"ExpressionStatement","src":"253:63:27"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"},"id":4123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"expression":{"id":4116,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"348:4:27","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":4117,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"353:8:27","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"348:13:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":4118,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"362:8:27","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2577,"src":"348:22:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2607_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":4119,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"371:6:27","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":2594,"src":"348:29:27","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":4120,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"381:10:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":4121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"392:10:27","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2521,"src":"381:21:27","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2521_$","typeString":"type(enum Structures.PostStatus)"}},"id":4122,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"403:9:27","memberName":"Submitted","nodeType":"MemberAccess","referencedDeclaration":2516,"src":"381:31:27","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"src":"348:64:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e4f545f5355424d4954544544","id":4124,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"426:15:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_4988573c1cd6284ce3e17f7aa983bed6f3c4568b70b11ebfe4a79252f5a7e8d5","typeString":"literal_string \"NOT_SUBMITTED\""},"value":"NOT_SUBMITTED"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4988573c1cd6284ce3e17f7aa983bed6f3c4568b70b11ebfe4a79252f5a7e8d5","typeString":"literal_string \"NOT_SUBMITTED\""}],"id":4115,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"327:7:27","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4125,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"327:124:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4126,"nodeType":"ExpressionStatement","src":"327:124:27"},{"assignments":[4129],"declarations":[{"constant":false,"id":4129,"mutability":"mutable","name":"eas","nameLocation":"467:3:27","nodeType":"VariableDeclaration","scope":4487,"src":"462:8:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$2108","typeString":"contract IEAS"},"typeName":{"id":4128,"nodeType":"UserDefinedTypeName","pathNode":{"id":4127,"name":"IEAS","nameLocations":["462:4:27"],"nodeType":"IdentifierPath","referencedDeclaration":2108,"src":"462:4:27"},"referencedDeclaration":2108,"src":"462:4:27","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$2108","typeString":"contract IEAS"}},"visibility":"internal"}],"id":4138,"initialValue":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":4132,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"512:8:27","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":4133,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"521:15:27","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2545,"src":"512:24:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4131,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"491:20:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2419_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":4134,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"491:46:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2419","typeString":"contract IMecenateFeedFactory"}},"id":4135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"538:11:27","memberName":"easContract","nodeType":"MemberAccess","referencedDeclaration":2418,"src":"491:58:27","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":4136,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"491:60:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4130,"name":"IEAS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2108,"src":"473:4:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IEAS_$2108_$","typeString":"type(contract IEAS)"}},"id":4137,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"473:88:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$2108","typeString":"contract IEAS"}},"nodeType":"VariableDeclarationStatement","src":"462:99:27"},{"assignments":[4141],"declarations":[{"constant":false,"id":4141,"mutability":"mutable","name":"attestation","nameLocation":"591:11:27","nodeType":"VariableDeclaration","scope":4487,"src":"572:30:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$1799_memory_ptr","typeString":"struct Attestation"},"typeName":{"id":4140,"nodeType":"UserDefinedTypeName","pathNode":{"id":4139,"name":"Attestation","nameLocations":["572:11:27"],"nodeType":"IdentifierPath","referencedDeclaration":1799,"src":"572:11:27"},"referencedDeclaration":1799,"src":"572:11:27","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$1799_storage_ptr","typeString":"struct Attestation"}},"visibility":"internal"}],"id":4146,"initialValue":{"arguments":[{"id":4144,"name":"uid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4101,"src":"624:3:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4142,"name":"eas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4129,"src":"605:3:27","typeDescriptions":{"typeIdentifier":"t_contract$_IEAS_$2108","typeString":"contract IEAS"}},"id":4143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"609:14:27","memberName":"getAttestation","nodeType":"MemberAccess","referencedDeclaration":2081,"src":"605:18:27","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$returns$_t_struct$_Attestation_$1799_memory_ptr_$","typeString":"function (bytes32) view external returns (struct Attestation memory)"}},"id":4145,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"605:23:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$1799_memory_ptr","typeString":"struct Attestation memory"}},"nodeType":"VariableDeclarationStatement","src":"572:56:27"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4148,"name":"attestation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4141,"src":"660:11:27","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$1799_memory_ptr","typeString":"struct Attestation memory"}},"id":4149,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"672:8:27","memberName":"attester","nodeType":"MemberAccess","referencedDeclaration":1794,"src":"660:20:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"expression":{"id":4150,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"684:4:27","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":4151,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"689:8:27","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"684:13:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":4152,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"698:6:27","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"684:20:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":4153,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"705:5:27","memberName":"buyer","nodeType":"MemberAccess","referencedDeclaration":2609,"src":"684:26:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"660:50:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"494e56414c49445f4154544553544154494f4e","id":4155,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"724:21:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_9dea89737c0e920067c479d34e66640782205ab6e30f1b08963bd4c76ed08518","typeString":"literal_string \"INVALID_ATTESTATION\""},"value":"INVALID_ATTESTATION"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9dea89737c0e920067c479d34e66640782205ab6e30f1b08963bd4c76ed08518","typeString":"literal_string \"INVALID_ATTESTATION\""}],"id":4147,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"639:7:27","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4156,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"639:116:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4157,"nodeType":"ExpressionStatement","src":"639:116:27"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4159,"name":"attestation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4141,"src":"787:11:27","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$1799_memory_ptr","typeString":"struct Attestation memory"}},"id":4160,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"799:9:27","memberName":"recipient","nodeType":"MemberAccess","referencedDeclaration":1792,"src":"787:21:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"expression":{"id":4161,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"812:4:27","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":4162,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"817:8:27","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"812:13:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":4163,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"826:6:27","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"812:20:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":4164,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"833:6:27","memberName":"seller","nodeType":"MemberAccess","referencedDeclaration":2611,"src":"812:27:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"787:52:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"494e56414c49445f524543495049454e54","id":4166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"853:19:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_5e7bf34c5f9e77c6f415365fc02ea1195419ccebda18d14265f0c098f3687483","typeString":"literal_string \"INVALID_RECIPIENT\""},"value":"INVALID_RECIPIENT"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5e7bf34c5f9e77c6f415365fc02ea1195419ccebda18d14265f0c098f3687483","typeString":"literal_string \"INVALID_RECIPIENT\""}],"id":4158,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"766:7:27","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"766:116:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4168,"nodeType":"ExpressionStatement","src":"766:116:27"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4170,"name":"attestation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4141,"src":"914:11:27","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$1799_memory_ptr","typeString":"struct Attestation memory"}},"id":4171,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"926:6:27","memberName":"schema","nodeType":"MemberAccess","referencedDeclaration":1782,"src":"914:18:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":4173,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"973:8:27","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":4174,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"982:15:27","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2545,"src":"973:24:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4172,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"952:20:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2419_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":4175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"952:46:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2419","typeString":"contract IMecenateFeedFactory"}},"id":4176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"999:9:27","memberName":"easSchema","nodeType":"MemberAccess","referencedDeclaration":2413,"src":"952:56:27","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_bytes32_$","typeString":"function () view external returns (bytes32)"}},"id":4177,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"952:58:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"914:96:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"494e56414c49445f534348454d41","id":4179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1024:16:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_f41565c58071a14f72a5840be5c32b80d45565cd27fb57bbd84b1bb1724f2224","typeString":"literal_string \"INVALID_SCHEMA\""},"value":"INVALID_SCHEMA"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f41565c58071a14f72a5840be5c32b80d45565cd27fb57bbd84b1bb1724f2224","typeString":"literal_string \"INVALID_SCHEMA\""}],"id":4169,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"893:7:27","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4180,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"893:157:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4181,"nodeType":"ExpressionStatement","src":"893:157:27"},{"assignments":[4183,4185,4187],"declarations":[{"constant":false,"id":4183,"mutability":"mutable","name":"easResult","nameLocation":"1067:9:27","nodeType":"VariableDeclaration","scope":4487,"src":"1062:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4182,"name":"bool","nodeType":"ElementaryTypeName","src":"1062:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4185,"mutability":"mutable","name":"feed","nameLocation":"1086:4:27","nodeType":"VariableDeclaration","scope":4487,"src":"1078:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4184,"name":"address","nodeType":"ElementaryTypeName","src":"1078:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4187,"mutability":"mutable","name":"postBytes","nameLocation":"1105:9:27","nodeType":"VariableDeclaration","scope":4487,"src":"1092:22:27","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4186,"name":"bytes","nodeType":"ElementaryTypeName","src":"1092:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4200,"initialValue":{"arguments":[{"expression":{"id":4190,"name":"attestation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4141,"src":"1142:11:27","typeDescriptions":{"typeIdentifier":"t_struct$_Attestation_$1799_memory_ptr","typeString":"struct Attestation memory"}},"id":4191,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1154:4:27","memberName":"data","nodeType":"MemberAccess","referencedDeclaration":1798,"src":"1142:16:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":4193,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1173:4:27","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":4192,"name":"bool","nodeType":"ElementaryTypeName","src":"1173:4:27","typeDescriptions":{}}},{"id":4195,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1179:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4194,"name":"address","nodeType":"ElementaryTypeName","src":"1179:7:27","typeDescriptions":{}}},{"id":4197,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1188:5:27","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":4196,"name":"bytes","nodeType":"ElementaryTypeName","src":"1188:5:27","typeDescriptions":{}}}],"id":4198,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1172:22:27","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_bool_$_$_t_type$_t_address_$_$_t_type$_t_bytes_storage_ptr_$_$","typeString":"tuple(type(bool),type(address),type(bytes storage pointer))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_tuple$_t_type$_t_bool_$_$_t_type$_t_address_$_$_t_type$_t_bytes_storage_ptr_$_$","typeString":"tuple(type(bool),type(address),type(bytes storage pointer))"}],"expression":{"id":4188,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1118:3:27","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4189,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1122:6:27","memberName":"decode","nodeType":"MemberAccess","src":"1118:10:27","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":4199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1118:86:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_address_payable_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,address payable,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"1061:143:27"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4202,"name":"feed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4185,"src":"1223:4:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":4205,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1239:4:27","typeDescriptions":{"typeIdentifier":"t_contract$_Finalization_$4489","typeString":"contract Finalization"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Finalization_$4489","typeString":"contract Finalization"}],"id":4204,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1231:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4203,"name":"address","nodeType":"ElementaryTypeName","src":"1231:7:27","typeDescriptions":{}}},"id":4206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1231:13:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1223:21:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"494e56414c49445f46454544","id":4208,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1246:14:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_df30001cf5eea99147ecacb007f16f6bf91a00c9510e51e87d91217c5a2ca5df","typeString":"literal_string \"INVALID_FEED\""},"value":"INVALID_FEED"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_df30001cf5eea99147ecacb007f16f6bf91a00c9510e51e87d91217c5a2ca5df","typeString":"literal_string \"INVALID_FEED\""}],"id":4201,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1215:7:27","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4209,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1215:46:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4210,"nodeType":"ExpressionStatement","src":"1215:46:27"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":4227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":4215,"name":"postBytes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4187,"src":"1314:9:27","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":4213,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1303:3:27","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4214,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1307:6:27","memberName":"encode","nodeType":"MemberAccess","src":"1303:10:27","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4216,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1303:21:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4212,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1293:9:27","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4217,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1293:32:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"expression":{"expression":{"expression":{"id":4221,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"1366:4:27","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":4222,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1371:8:27","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"1366:13:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":4223,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1380:4:27","memberName":"data","nodeType":"MemberAccess","referencedDeclaration":2583,"src":"1366:18:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostEncryptedData_$2591_storage","typeString":"struct Structures.PostEncryptedData storage ref"}},"id":4224,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1385:13:27","memberName":"encryptedData","nodeType":"MemberAccess","referencedDeclaration":2586,"src":"1366:32:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}],"expression":{"id":4219,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1355:3:27","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4220,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1359:6:27","memberName":"encode","nodeType":"MemberAccess","src":"1355:10:27","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4225,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1355:44:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4218,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1345:9:27","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4226,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1345:55:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1293:107:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"494e56414c49445f504f5354","id":4228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1414:14:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_386d5dff022022e0f06339fb098b59adc2008250e5279ae040cb2c5a6624244e","typeString":"literal_string \"INVALID_POST\""},"value":"INVALID_POST"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_386d5dff022022e0f06339fb098b59adc2008250e5279ae040cb2c5a6624244e","typeString":"literal_string \"INVALID_POST\""}],"id":4211,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1272:7:27","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4229,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1272:166:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4230,"nodeType":"ExpressionStatement","src":"1272:166:27"},{"assignments":[4232],"declarations":[{"constant":false,"id":4232,"mutability":"mutable","name":"treasuryContract","nameLocation":"1508:16:27","nodeType":"VariableDeclaration","scope":4487,"src":"1500:24:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4231,"name":"address","nodeType":"ElementaryTypeName","src":"1500:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4239,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":4234,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"1561:8:27","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":4235,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1570:15:27","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2545,"src":"1561:24:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4233,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"1527:20:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2419_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":4236,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1527:68:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2419","typeString":"contract IMecenateFeedFactory"}},"id":4237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1596:16:27","memberName":"treasuryContract","nodeType":"MemberAccess","referencedDeclaration":2353,"src":"1527:85:27","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_payable_$","typeString":"function () view external returns (address payable)"}},"id":4238,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1527:87:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"VariableDeclarationStatement","src":"1500:114:27"},{"assignments":[4241],"declarations":[{"constant":false,"id":4241,"mutability":"mutable","name":"buyerFee","nameLocation":"1633:8:27","nodeType":"VariableDeclaration","scope":4487,"src":"1625:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4240,"name":"uint256","nodeType":"ElementaryTypeName","src":"1625:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4255,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"expression":{"id":4242,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"1645:4:27","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":4243,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1650:8:27","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"1645:13:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":4244,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1659:6:27","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"1645:20:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":4245,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1666:7:27","memberName":"payment","nodeType":"MemberAccess","referencedDeclaration":2615,"src":"1645:28:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":4247,"name":"treasuryContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4232,"src":"1706:16:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4246,"name":"IMecenateTreasury","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2432,"src":"1688:17:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateTreasury_$2432_$","typeString":"type(contract IMecenateTreasury)"}},"id":4248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1688:35:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateTreasury_$2432","typeString":"contract IMecenateTreasury"}},"id":4249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1724:9:27","memberName":"globalFee","nodeType":"MemberAccess","referencedDeclaration":2426,"src":"1688:45:27","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":4250,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1688:47:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1645:90:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4252,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1644:92:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"3130303030","id":4253,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1739:5:27","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"value":"10000"},"src":"1644:100:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1625:119:27"},{"assignments":[4257],"declarations":[{"constant":false,"id":4257,"mutability":"mutable","name":"amountToAdd","nameLocation":"1763:11:27","nodeType":"VariableDeclaration","scope":4487,"src":"1755:19:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4256,"name":"uint256","nodeType":"ElementaryTypeName","src":"1755:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4264,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"expression":{"id":4258,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"1777:4:27","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":4259,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1782:8:27","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"1777:13:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":4260,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1791:6:27","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"1777:20:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":4261,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1798:7:27","memberName":"payment","nodeType":"MemberAccess","referencedDeclaration":2615,"src":"1777:28:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":4262,"name":"buyerFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4241,"src":"1808:8:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1777:39:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1755:61:27"},{"assignments":[4266],"declarations":[{"constant":false,"id":4266,"mutability":"mutable","name":"buyerStake","nameLocation":"1874:10:27","nodeType":"VariableDeclaration","scope":4487,"src":"1866:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4265,"name":"uint256","nodeType":"ElementaryTypeName","src":"1866:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4267,"nodeType":"VariableDeclarationStatement","src":"1866:18:27"},{"assignments":[4269],"declarations":[{"constant":false,"id":4269,"mutability":"mutable","name":"sellerStake","nameLocation":"1903:11:27","nodeType":"VariableDeclaration","scope":4487,"src":"1895:19:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4268,"name":"uint256","nodeType":"ElementaryTypeName","src":"1895:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4270,"nodeType":"VariableDeclarationStatement","src":"1895:19:27"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"expression":{"id":4271,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"1929:4:27","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":4272,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1934:8:27","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"1929:13:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":4273,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1943:8:27","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2577,"src":"1929:22:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2607_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":4274,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1952:12:27","memberName":"endTimeStamp","nodeType":"MemberAccess","referencedDeclaration":2601,"src":"1929:35:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":4275,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"1967:5:27","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1973:9:27","memberName":"timestamp","nodeType":"MemberAccess","src":"1967:15:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1929:53:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":4278,"name":"valid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4097,"src":"1986:5:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1929:62:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"id":4366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2925:6:27","subExpression":{"id":4365,"name":"valid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4097,"src":"2926:5:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4485,"nodeType":"IfStatement","src":"2921:1079:27","trueBody":{"id":4484,"nodeType":"Block","src":"2933:1067:27","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4370,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4368,"name":"easResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4183,"src":"2955:9:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4369,"name":"valid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4097,"src":"2968:5:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2955:18:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"494e56414c49445f4154544553544154494f4e","id":4371,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2975:21:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_9dea89737c0e920067c479d34e66640782205ab6e30f1b08963bd4c76ed08518","typeString":"literal_string \"INVALID_ATTESTATION\""},"value":"INVALID_ATTESTATION"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9dea89737c0e920067c479d34e66640782205ab6e30f1b08963bd4c76ed08518","typeString":"literal_string \"INVALID_ATTESTATION\""}],"id":4367,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2947:7:27","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2947:50:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4373,"nodeType":"ExpressionStatement","src":"2947:50:27"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4375,"name":"punishment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4099,"src":"3037:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"expression":{"expression":{"id":4376,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"3051:4:27","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":4377,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3056:8:27","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"3051:13:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":4378,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3065:6:27","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"3051:20:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":4379,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3072:5:27","memberName":"stake","nodeType":"MemberAccess","referencedDeclaration":2613,"src":"3051:26:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3037:40:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"50554e4953484d454e545f544f4f5f48494748","id":4381,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3095:21:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_10e5c35e6dc1acf357c58dd3d0268c4a82a0a96506834ca5807fc59997f685c1","typeString":"literal_string \"PUNISHMENT_TOO_HIGH\""},"value":"PUNISHMENT_TOO_HIGH"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_10e5c35e6dc1acf357c58dd3d0268c4a82a0a96506834ca5807fc59997f685c1","typeString":"literal_string \"PUNISHMENT_TOO_HIGH\""}],"id":4374,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3012:7:27","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4382,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3012:118:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4383,"nodeType":"ExpressionStatement","src":"3012:118:27"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4385,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"3152:8:27","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":4386,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3161:15:27","memberName":"punishmentRatio","nodeType":"MemberAccess","referencedDeclaration":2539,"src":"3152:24:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"31653138","id":4387,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3179:4:27","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1e18"},"src":"3152:31:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"50554e4953484d454e545f524154494f5f48494748","id":4389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3185:23:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_ad1fb82965748d8622a3821eab72a0367e08f340a3cb198305fc7c24daf437ab","typeString":"literal_string \"PUNISHMENT_RATIO_HIGH\""},"value":"PUNISHMENT_RATIO_HIGH"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ad1fb82965748d8622a3821eab72a0367e08f340a3cb198305fc7c24daf437ab","typeString":"literal_string \"PUNISHMENT_RATIO_HIGH\""}],"id":4384,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3144:7:27","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4390,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3144:65:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4391,"nodeType":"ExpressionStatement","src":"3144:65:27"},{"assignments":[4393],"declarations":[{"constant":false,"id":4393,"mutability":"mutable","name":"penalty","nameLocation":"3232:7:27","nodeType":"VariableDeclaration","scope":4484,"src":"3224:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4392,"name":"uint256","nodeType":"ElementaryTypeName","src":"3224:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4401,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4394,"name":"punishment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4099,"src":"3243:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"expression":{"id":4395,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"3256:8:27","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":4396,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3265:15:27","memberName":"punishmentRatio","nodeType":"MemberAccess","referencedDeclaration":2539,"src":"3256:24:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3243:37:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4398,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3242:39:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"31653138","id":4399,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3284:4:27","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1e18"},"src":"3242:46:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3224:64:27"},{"expression":{"id":4420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"expression":{"expression":{"id":4402,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"3303:4:27","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":4406,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3308:8:27","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"3303:13:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":4407,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3317:6:27","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"3303:20:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":4408,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3324:7:27","memberName":"payment","nodeType":"MemberAccess","referencedDeclaration":2615,"src":"3303:28:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"expression":{"expression":{"id":4410,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"3362:4:27","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":4411,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3367:8:27","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"3362:13:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":4412,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3376:8:27","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2577,"src":"3362:22:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2607_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":4413,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3385:7:27","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":2606,"src":"3362:30:27","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},{"expression":{"expression":{"expression":{"id":4414,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"3410:4:27","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":4415,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3415:8:27","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"3410:13:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":4416,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3424:6:27","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"3410:20:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":4417,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3431:5:27","memberName":"buyer","nodeType":"MemberAccess","referencedDeclaration":2609,"src":"3410:26:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4418,"name":"penalty","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4393,"src":"3454:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4409,"name":"_burnStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4934,"src":"3334:10:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Tokens_$2525_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,address,uint256) returns (uint256)"}},"id":4419,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3334:141:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3303:172:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4421,"nodeType":"ExpressionStatement","src":"3303:172:27"},{"expression":{"id":4440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"expression":{"expression":{"id":4422,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"3490:4:27","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":4426,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3495:8:27","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"3490:13:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":4427,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3504:6:27","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"3490:20:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":4428,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3511:5:27","memberName":"stake","nodeType":"MemberAccess","referencedDeclaration":2613,"src":"3490:26:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"expression":{"expression":{"id":4430,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"3547:4:27","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":4431,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3552:8:27","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"3547:13:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":4432,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3561:8:27","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2577,"src":"3547:22:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2607_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":4433,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3570:7:27","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":2606,"src":"3547:30:27","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},{"expression":{"expression":{"expression":{"id":4434,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"3595:4:27","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":4435,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3600:8:27","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"3595:13:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":4436,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3609:6:27","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"3595:20:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":4437,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3616:6:27","memberName":"seller","nodeType":"MemberAccess","referencedDeclaration":2611,"src":"3595:27:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4438,"name":"punishment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4099,"src":"3640:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4429,"name":"_burnStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4934,"src":"3519:10:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Tokens_$2525_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,address,uint256) returns (uint256)"}},"id":4439,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3519:145:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3490:174:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4441,"nodeType":"ExpressionStatement","src":"3490:174:27"},{"expression":{"id":4452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"expression":{"expression":{"id":4442,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"3722:4:27","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":4446,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3727:8:27","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"3722:13:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":4447,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3736:8:27","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2577,"src":"3722:22:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2607_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":4448,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3745:6:27","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":2594,"src":"3722:29:27","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"expression":{"id":4449,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"3754:10:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":4450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3765:10:27","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2521,"src":"3754:21:27","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2521_$","typeString":"type(enum Structures.PostStatus)"}},"id":4451,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3776:8:27","memberName":"Punished","nodeType":"MemberAccess","referencedDeclaration":2518,"src":"3754:30:27","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"src":"3722:62:27","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"id":4453,"nodeType":"ExpressionStatement","src":"3722:62:27"},{"expression":{"id":4462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"expression":{"expression":{"id":4454,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"3799:4:27","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":4458,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3804:8:27","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"3799:13:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":4459,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3813:6:27","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"3799:20:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":4460,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3820:10:27","memberName":"punishment","nodeType":"MemberAccess","referencedDeclaration":2617,"src":"3799:31:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4461,"name":"punishment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4099,"src":"3833:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3799:44:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4463,"nodeType":"ExpressionStatement","src":"3799:44:27"},{"expression":{"id":4472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"expression":{"expression":{"id":4464,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"3858:4:27","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":4468,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3863:8:27","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"3858:13:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":4469,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3872:6:27","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"3858:20:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":4470,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3879:7:27","memberName":"penalty","nodeType":"MemberAccess","referencedDeclaration":2619,"src":"3858:28:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4471,"name":"penalty","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4393,"src":"3889:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3858:38:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4473,"nodeType":"ExpressionStatement","src":"3858:38:27"},{"expression":{"arguments":[{"expression":{"expression":{"id":4475,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"3925:10:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":4476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3936:10:27","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2521,"src":"3925:21:27","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2521_$","typeString":"type(enum Structures.PostStatus)"}},"id":4477,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3947:8:27","memberName":"Punished","nodeType":"MemberAccess","referencedDeclaration":2518,"src":"3925:30:27","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}],"id":4474,"name":"_changeStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3714,"src":"3911:13:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_PostStatus_$2521_$returns$__$","typeString":"function (enum Structures.PostStatus)"}},"id":4478,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3911:45:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4479,"nodeType":"ExpressionStatement","src":"3911:45:27"},{"eventCall":{"arguments":[{"id":4481,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"3984:4:27","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}],"id":4480,"name":"Invalid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4074,"src":"3976:7:27","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_struct$_Post_$2574_memory_ptr_$returns$__$","typeString":"function (struct Structures.Post memory)"}},"id":4482,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3976:13:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4483,"nodeType":"EmitStatement","src":"3971:18:27"}]}},"id":4486,"nodeType":"IfStatement","src":"1925:2075:27","trueBody":{"id":4364,"nodeType":"Block","src":"1993:922:27","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4281,"name":"easResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4183,"src":"2015:9:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4282,"name":"valid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4097,"src":"2028:5:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2015:18:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"494e56414c49445f4154544553544154494f4e","id":4284,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2035:21:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_9dea89737c0e920067c479d34e66640782205ab6e30f1b08963bd4c76ed08518","typeString":"literal_string \"INVALID_ATTESTATION\""},"value":"INVALID_ATTESTATION"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9dea89737c0e920067c479d34e66640782205ab6e30f1b08963bd4c76ed08518","typeString":"literal_string \"INVALID_ATTESTATION\""}],"id":4280,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2007:7:27","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4285,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2007:50:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4286,"nodeType":"ExpressionStatement","src":"2007:50:27"},{"expression":{"id":4303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4287,"name":"buyerStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4266,"src":"2132:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"expression":{"expression":{"id":4290,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"2187:4:27","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":4291,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2192:8:27","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"2187:13:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":4292,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2201:8:27","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2577,"src":"2187:22:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2607_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":4293,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2210:7:27","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":2606,"src":"2187:30:27","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},{"expression":{"expression":{"expression":{"id":4294,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"2235:4:27","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":4295,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2240:8:27","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"2235:13:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":4296,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2249:6:27","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"2235:20:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":4297,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2256:5:27","memberName":"buyer","nodeType":"MemberAccess","referencedDeclaration":2609,"src":"2235:26:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"expression":{"expression":{"id":4298,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"2279:4:27","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":4299,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2284:8:27","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"2279:13:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":4300,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2293:6:27","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"2279:20:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":4301,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2300:7:27","memberName":"payment","nodeType":"MemberAccess","referencedDeclaration":2615,"src":"2279:28:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4288,"name":"Deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4049,"src":"2145:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Deposit_$4049_$","typeString":"type(contract Deposit)"}},"id":4289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2153:16:27","memberName":"_decreaseDeposit","nodeType":"MemberAccess","referencedDeclaration":3998,"src":"2145:24:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Tokens_$2525_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,address,uint256) returns (uint256)"}},"id":4302,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2145:176:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2132:189:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4304,"nodeType":"ExpressionStatement","src":"2132:189:27"},{"expression":{"id":4318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4305,"name":"sellerStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4269,"src":"2336:11:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"expression":{"expression":{"id":4308,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"2392:4:27","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":4309,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2397:8:27","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"2392:13:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":4310,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2406:8:27","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2577,"src":"2392:22:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2607_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":4311,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2415:7:27","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":2606,"src":"2392:30:27","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},{"expression":{"expression":{"expression":{"id":4312,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"2440:4:27","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":4313,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2445:8:27","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"2440:13:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":4314,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2454:6:27","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"2440:20:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":4315,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2461:6:27","memberName":"seller","nodeType":"MemberAccess","referencedDeclaration":2611,"src":"2440:27:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4316,"name":"amountToAdd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4257,"src":"2485:11:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4306,"name":"Deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4049,"src":"2350:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Deposit_$4049_$","typeString":"type(contract Deposit)"}},"id":4307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2358:16:27","memberName":"_increaseDeposit","nodeType":"MemberAccess","referencedDeclaration":3940,"src":"2350:24:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Tokens_$2525_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,address,uint256) returns (uint256)"}},"id":4317,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2350:160:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2336:174:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4319,"nodeType":"ExpressionStatement","src":"2336:174:27"},{"expression":{"arguments":[{"expression":{"expression":{"expression":{"id":4321,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"2531:4:27","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":4322,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2536:8:27","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"2531:13:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":4323,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2545:8:27","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2577,"src":"2531:22:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2607_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":4324,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2554:7:27","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":2606,"src":"2531:30:27","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},{"id":4325,"name":"treasuryContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4232,"src":"2563:16:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4326,"name":"buyerFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4241,"src":"2581:8:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4320,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[5830,3231],"referencedDeclaration":5830,"src":"2525:5:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Tokens_$2525_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (enum Structures.Tokens,address,uint256) returns (bool)"}},"id":4327,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2525:65:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4328,"nodeType":"ExpressionStatement","src":"2525:65:27"},{"expression":{"id":4337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"expression":{"expression":{"id":4329,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"2605:4:27","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":4333,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2610:8:27","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"2605:13:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":4334,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2619:6:27","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"2605:20:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":4335,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2626:5:27","memberName":"stake","nodeType":"MemberAccess","referencedDeclaration":2613,"src":"2605:26:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4336,"name":"sellerStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4269,"src":"2634:11:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2605:40:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4338,"nodeType":"ExpressionStatement","src":"2605:40:27"},{"expression":{"id":4347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"expression":{"expression":{"id":4339,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"2660:4:27","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":4343,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2665:8:27","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"2660:13:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":4344,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2674:6:27","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"2660:20:27","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":4345,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2681:7:27","memberName":"payment","nodeType":"MemberAccess","referencedDeclaration":2615,"src":"2660:28:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4346,"name":"buyerStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4266,"src":"2691:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2660:41:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4348,"nodeType":"ExpressionStatement","src":"2660:41:27"},{"expression":{"arguments":[{"condition":{"id":4350,"name":"valid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4097,"src":"2747:5:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"expression":{"expression":{"id":4354,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"2829:10:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":4355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2840:10:27","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2521,"src":"2829:21:27","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2521_$","typeString":"type(enum Structures.PostStatus)"}},"id":4356,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2851:8:27","memberName":"Punished","nodeType":"MemberAccess","referencedDeclaration":2518,"src":"2829:30:27","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"id":4357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2747:112:27","trueExpression":{"expression":{"expression":{"id":4351,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"2775:10:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":4352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2786:10:27","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2521,"src":"2775:21:27","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2521_$","typeString":"type(enum Structures.PostStatus)"}},"id":4353,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2797:9:27","memberName":"Finalized","nodeType":"MemberAccess","referencedDeclaration":2517,"src":"2775:31:27","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}],"id":4349,"name":"_changeStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3714,"src":"2716:13:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_PostStatus_$2521_$returns$__$","typeString":"function (enum Structures.PostStatus)"}},"id":4358,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2716:157:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4359,"nodeType":"ExpressionStatement","src":"2716:157:27"},{"eventCall":{"arguments":[{"id":4361,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"2899:4:27","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}],"id":4360,"name":"Valid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4069,"src":"2893:5:27","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_struct$_Post_$2574_memory_ptr_$returns$__$","typeString":"function (struct Structures.Post memory)"}},"id":4362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2893:11:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4363,"nodeType":"EmitStatement","src":"2888:16:27"}]}}]},"functionSelector":"8f287dc2","id":4488,"implemented":true,"kind":"function","modifiers":[],"name":"finalizePost","nameLocation":"138:12:27","nodeType":"FunctionDefinition","parameters":{"id":4102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4097,"mutability":"mutable","name":"valid","nameLocation":"165:5:27","nodeType":"VariableDeclaration","scope":4488,"src":"160:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4096,"name":"bool","nodeType":"ElementaryTypeName","src":"160:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4099,"mutability":"mutable","name":"punishment","nameLocation":"188:10:27","nodeType":"VariableDeclaration","scope":4488,"src":"180:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4098,"name":"uint256","nodeType":"ElementaryTypeName","src":"180:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4101,"mutability":"mutable","name":"uid","nameLocation":"216:3:27","nodeType":"VariableDeclaration","scope":4488,"src":"208:11:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4100,"name":"bytes32","nodeType":"ElementaryTypeName","src":"208:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"150:75:27"},"returnParameters":{"id":4103,"nodeType":"ParameterList","parameters":[],"src":"243:0:27"},"scope":4489,"src":"129:3877:27","stateMutability":"nonpayable","virtual":true,"visibility":"external"}],"scope":4490,"src":"81:3927:27","usedErrors":[]}],"src":"32:3977:27"},"id":27},"contracts/modules/Renounce.sol":{"ast":{"absolutePath":"contracts/modules/Renounce.sol","exportedSymbols":{"Attestation":[1799],"AttestationRequest":[1841],"AttestationRequestData":[1835],"BurnDAI":[3202],"BurnMUSE":[3293],"Data":[3857],"DelegatedAttestationRequest":[1854],"DelegatedRevocationRequest":[1900],"Deposit":[4049],"Events":[4090],"IEAS":[2108],"IERC20":[77],"IMUSE":[2246],"IMecenateFeed":[2341],"IMecenateFeedFactory":[2419],"IMecenateTreasury":[2432],"IMecenateUsers":[2490],"ISchemaRegistry":[2156],"ISwapRouter":[1703],"IUniswapV3SwapCallback":[1603],"IWETH":[2510],"MultiAttestationRequest":[1861],"MultiDelegatedAttestationRequest":[1876],"MultiDelegatedRevocationRequest":[1922],"MultiRevocationRequest":[1907],"Renounce":[4588],"RevocationRequest":[1887],"RevocationRequestData":[1881],"SafeMath":[1484],"Signature":[1778],"Staking":[5316],"Strings":[306],"Structures":[2671],"TokenManager":[6040],"Version":[6130]},"id":4589,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4491,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"616:23:28"},{"absolutePath":"contracts/modules/Staking.sol","file":"./Staking.sol","id":4492,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4589,"sourceUnit":5317,"src":"641:23:28","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":4493,"name":"Staking","nameLocations":["696:7:28"],"nodeType":"IdentifierPath","referencedDeclaration":5316,"src":"696:7:28"},"id":4494,"nodeType":"InheritanceSpecifier","src":"696:7:28"}],"canonicalName":"Renounce","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4588,"linearizedBaseContracts":[4588,5316,6040,3202,3293,4049,4090,3857,6130],"name":"Renounce","nameLocation":"684:8:28","nodeType":"ContractDefinition","nodes":[{"body":{"id":4586,"nodeType":"Block","src":"743:1430:28","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4498,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"761:3:28","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"765:6:28","memberName":"sender","nodeType":"MemberAccess","src":"761:10:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"expression":{"id":4500,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"775:4:28","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":4501,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"780:8:28","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"775:13:28","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":4502,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"789:6:28","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"775:20:28","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":4503,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"796:6:28","memberName":"seller","nodeType":"MemberAccess","referencedDeclaration":2611,"src":"775:27:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"761:41:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e4f545f53454c4c4552","id":4505,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"804:12:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_5da6b782e6837297580639e2387426c4366c23f72270e18b945265d01aac89d7","typeString":"literal_string \"NOT_SELLER\""},"value":"NOT_SELLER"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5da6b782e6837297580639e2387426c4366c23f72270e18b945265d01aac89d7","typeString":"literal_string \"NOT_SELLER\""}],"id":4497,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"753:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4506,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"753:64:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4507,"nodeType":"ExpressionStatement","src":"753:64:28"},{"assignments":[4512],"declarations":[{"constant":false,"id":4512,"mutability":"mutable","name":"currentStatus","nameLocation":"886:13:28","nodeType":"VariableDeclaration","scope":4586,"src":"864:35:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"},"typeName":{"id":4511,"nodeType":"UserDefinedTypeName","pathNode":{"id":4510,"name":"Structures.PostStatus","nameLocations":["864:10:28","875:10:28"],"nodeType":"IdentifierPath","referencedDeclaration":2521,"src":"864:21:28"},"referencedDeclaration":2521,"src":"864:21:28","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"visibility":"internal"}],"id":4517,"initialValue":{"expression":{"expression":{"expression":{"id":4513,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"902:4:28","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":4514,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"907:8:28","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"902:13:28","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":4515,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"916:8:28","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2577,"src":"902:22:28","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2607_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":4516,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"925:6:28","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":2594,"src":"902:29:28","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"nodeType":"VariableDeclarationStatement","src":"864:67:28"},{"expression":{"arguments":[{"baseExpression":{"id":4519,"name":"validStatuses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3537,"src":"950:13:28","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_bool_$","typeString":"mapping(uint8 => bool)"}},"id":4524,"indexExpression":{"arguments":[{"id":4522,"name":"currentStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4512,"src":"970:13:28","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}],"id":4521,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"964:5:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":4520,"name":"uint8","nodeType":"ElementaryTypeName","src":"964:5:28","typeDescriptions":{}}},"id":4523,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"964:20:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"950:35:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"494e56414c49445f535441545553","id":4525,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"987:16:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_e7ad020d83a3bbd1c079bc4bbb16e4b9f3f2424f3e40f83d8262d5329f30bf33","typeString":"literal_string \"INVALID_STATUS\""},"value":"INVALID_STATUS"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e7ad020d83a3bbd1c079bc4bbb16e4b9f3f2424f3e40f83d8262d5329f30bf33","typeString":"literal_string \"INVALID_STATUS\""}],"id":4518,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"942:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4526,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"942:62:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4527,"nodeType":"ExpressionStatement","src":"942:62:28"},{"expression":{"id":4580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4528,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"1055:4:28","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"30","id":4535,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1145:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4534,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1137:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4533,"name":"address","nodeType":"ElementaryTypeName","src":"1137:7:28","typeDescriptions":{}}},"id":4536,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1137:10:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4537,"name":"ZEROHASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3521,"src":"1179:8:28","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4538,"name":"ZEROHASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3521,"src":"1216:8:28","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":4531,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"1091:10:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":4532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1102:4:28","memberName":"User","nodeType":"MemberAccess","referencedDeclaration":2627,"src":"1091:15:28","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_User_$2627_storage_ptr_$","typeString":"type(struct Structures.User storage pointer)"}},"id":4539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["1125:10:28","1165:12:28","1205:9:28"],"names":["evmAddress","sismoVaultId","publicKey"],"nodeType":"FunctionCall","src":"1091:148:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_User_$2627_memory_ptr","typeString":"struct Structures.User memory"}},{"arguments":[{"arguments":[{"expression":{"expression":{"id":4544,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"1355:10:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":4545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1366:10:28","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2521,"src":"1355:21:28","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2521_$","typeString":"type(enum Structures.PostStatus)"}},"id":4546,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1377:9:28","memberName":"Renounced","nodeType":"MemberAccess","referencedDeclaration":2520,"src":"1355:31:28","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},{"expression":{"expression":{"id":4547,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"1418:10:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":4548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1429:8:28","memberName":"PostType","nodeType":"MemberAccess","referencedDeclaration":2531,"src":"1418:19:28","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostType_$2531_$","typeString":"type(enum Structures.PostType)"}},"id":4549,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1438:4:28","memberName":"Text","nodeType":"MemberAccess","referencedDeclaration":2526,"src":"1418:24:28","typeDescriptions":{"typeIdentifier":"t_enum$_PostType_$2531","typeString":"enum Structures.PostType"}},{"hexValue":"30","id":4550,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1483:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":4551,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1520:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":4552,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1553:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"expression":{"id":4553,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"1585:10:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":4554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1596:6:28","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2525,"src":"1585:17:28","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2525_$","typeString":"type(enum Structures.Tokens)"}},"id":4555,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1603:3:28","memberName":"NaN","nodeType":"MemberAccess","referencedDeclaration":2522,"src":"1585:21:28","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"},{"typeIdentifier":"t_enum$_PostType_$2531","typeString":"enum Structures.PostType"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}],"expression":{"id":4542,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"1301:10:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":4543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1312:12:28","memberName":"PostSettings","nodeType":"MemberAccess","referencedDeclaration":2607,"src":"1301:23:28","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_PostSettings_$2607_storage_ptr_$","typeString":"type(struct Structures.PostSettings storage pointer)"}},"id":4556,"isConstant":false,"isLValue":false,"isPure":true,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["1347:6:28","1408:8:28","1464:17:28","1506:12:28","1543:8:28","1576:7:28"],"names":["status","postType","creationTimeStamp","endTimeStamp","duration","tokenId"],"nodeType":"FunctionCall","src":"1301:324:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2607_memory_ptr","typeString":"struct Structures.PostSettings memory"}},{"arguments":[{"arguments":[{"hexValue":"30","id":4561,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1710:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4560,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1702:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4559,"name":"address","nodeType":"ElementaryTypeName","src":"1702:7:28","typeDescriptions":{}}},"id":4562,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1702:10:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":4565,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1750:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4564,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1742:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4563,"name":"address","nodeType":"ElementaryTypeName","src":"1742:7:28","typeDescriptions":{}}},"id":4566,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1742:10:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":4567,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1781:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":4568,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1813:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":4569,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1848:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":4570,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1880:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":4557,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"1651:10:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":4558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1662:10:28","memberName":"PostEscrow","nodeType":"MemberAccess","referencedDeclaration":2620,"src":"1651:21:28","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_PostEscrow_$2620_storage_ptr_$","typeString":"type(struct Structures.PostEscrow storage pointer)"}},"id":4571,"isConstant":false,"isLValue":false,"isPure":true,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["1695:5:28","1734:6:28","1774:5:28","1804:7:28","1836:10:28","1871:7:28"],"names":["buyer","seller","stake","payment","punishment","penalty"],"nodeType":"FunctionCall","src":"1651:249:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_memory_ptr","typeString":"struct Structures.PostEscrow memory"}},{"arguments":[{"hexValue":"","id":4574,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1990:2:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},{"hexValue":"","id":4575,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2028:2:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},{"hexValue":"","id":4576,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2067:2:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":4572,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"1924:10:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":4573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1935:17:28","memberName":"PostEncryptedData","nodeType":"MemberAccess","referencedDeclaration":2591,"src":"1924:28:28","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_PostEncryptedData_$2591_storage_ptr_$","typeString":"type(struct Structures.PostEncryptedData storage pointer)"}},"id":4577,"isConstant":false,"isLValue":false,"isPure":true,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["1975:13:28","2014:12:28","2052:13:28"],"names":["encryptedData","encryptedKey","decryptedData"],"nodeType":"FunctionCall","src":"1924:164:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_PostEncryptedData_$2591_memory_ptr","typeString":"struct Structures.PostEncryptedData memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_PostSettings_$2607_memory_ptr","typeString":"struct Structures.PostSettings memory"},{"typeIdentifier":"t_struct$_PostEscrow_$2620_memory_ptr","typeString":"struct Structures.PostEscrow memory"},{"typeIdentifier":"t_struct$_PostEncryptedData_$2591_memory_ptr","typeString":"struct Structures.PostEncryptedData memory"}],"expression":{"id":4540,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"1253:10:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":4541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1264:8:28","memberName":"PostData","nodeType":"MemberAccess","referencedDeclaration":2584,"src":"1253:19:28","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_PostData_$2584_storage_ptr_$","typeString":"type(struct Structures.PostData storage pointer)"}},"id":4578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["1291:8:28","1643:6:28","1918:4:28"],"names":["settings","escrow","data"],"nodeType":"FunctionCall","src":"1253:850:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_memory_ptr","typeString":"struct Structures.PostData memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_User_$2627_memory_ptr","typeString":"struct Structures.User memory"},{"typeIdentifier":"t_struct$_PostData_$2584_memory_ptr","typeString":"struct Structures.PostData memory"}],"expression":{"id":4529,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"1062:10:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":4530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1073:4:28","memberName":"Post","nodeType":"MemberAccess","referencedDeclaration":2574,"src":"1062:15:28","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Post_$2574_storage_ptr_$","typeString":"type(struct Structures.Post storage pointer)"}},"id":4579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1062:1051:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_memory_ptr","typeString":"struct Structures.Post memory"}},"src":"1055:1058:28","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":4581,"nodeType":"ExpressionStatement","src":"1055:1058:28"},{"eventCall":{"arguments":[{"id":4583,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"2161:4:28","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}],"id":4582,"name":"Renounced","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4089,"src":"2151:9:28","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_struct$_Post_$2574_memory_ptr_$returns$__$","typeString":"function (struct Structures.Post memory)"}},"id":4584,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2151:15:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4585,"nodeType":"EmitStatement","src":"2146:20:28"}]},"functionSelector":"3d876d5d","id":4587,"implemented":true,"kind":"function","modifiers":[],"name":"renouncePost","nameLocation":"719:12:28","nodeType":"FunctionDefinition","parameters":{"id":4495,"nodeType":"ParameterList","parameters":[],"src":"731:2:28"},"returnParameters":{"id":4496,"nodeType":"ParameterList","parameters":[],"src":"743:0:28"},"scope":4588,"src":"710:1463:28","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":4589,"src":"666:1509:28","usedErrors":[]}],"src":"616:1560:28"},"id":28},"contracts/modules/Staking.sol":{"ast":{"absolutePath":"contracts/modules/Staking.sol","exportedSymbols":{"Attestation":[1799],"AttestationRequest":[1841],"AttestationRequestData":[1835],"BurnDAI":[3202],"BurnMUSE":[3293],"Data":[3857],"DelegatedAttestationRequest":[1854],"DelegatedRevocationRequest":[1900],"Deposit":[4049],"Events":[4090],"IEAS":[2108],"IERC20":[77],"IMUSE":[2246],"IMecenateFeed":[2341],"IMecenateFeedFactory":[2419],"IMecenateTreasury":[2432],"IMecenateUsers":[2490],"ISchemaRegistry":[2156],"ISwapRouter":[1703],"IUniswapV3SwapCallback":[1603],"IWETH":[2510],"MultiAttestationRequest":[1861],"MultiDelegatedAttestationRequest":[1876],"MultiDelegatedRevocationRequest":[1922],"MultiRevocationRequest":[1907],"RevocationRequest":[1887],"RevocationRequestData":[1881],"SafeMath":[1484],"Signature":[1778],"Staking":[5316],"Strings":[306],"Structures":[2671],"TokenManager":[6040],"Version":[6130]},"id":5317,"nodeType":"SourceUnit","nodes":[{"id":4590,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"344:23:29"},{"absolutePath":"contracts/modules/Deposit.sol","file":"./Deposit.sol","id":4591,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5317,"sourceUnit":4050,"src":"369:23:29","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/modules/Events.sol","file":"./Events.sol","id":4592,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5317,"sourceUnit":4091,"src":"393:22:29","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":4593,"name":"Events","nameLocations":["446:6:29"],"nodeType":"IdentifierPath","referencedDeclaration":4090,"src":"446:6:29"},"id":4594,"nodeType":"InheritanceSpecifier","src":"446:6:29"},{"baseName":{"id":4595,"name":"Deposit","nameLocations":["454:7:29"],"nodeType":"IdentifierPath","referencedDeclaration":4049,"src":"454:7:29"},"id":4596,"nodeType":"InheritanceSpecifier","src":"454:7:29"},{"baseName":{"id":4597,"name":"TokenManager","nameLocations":["463:12:29"],"nodeType":"IdentifierPath","referencedDeclaration":6040,"src":"463:12:29"},"id":4598,"nodeType":"InheritanceSpecifier","src":"463:12:29"}],"canonicalName":"Staking","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5316,"linearizedBaseContracts":[5316,6040,3202,3293,4049,4090,3857,6130],"name":"Staking","nameLocation":"435:7:29","nodeType":"ContractDefinition","nodes":[{"global":false,"id":4601,"libraryName":{"id":4599,"name":"SafeMath","nameLocations":["488:8:29"],"nodeType":"IdentifierPath","referencedDeclaration":1484,"src":"488:8:29"},"nodeType":"UsingForDirective","src":"482:27:29","typeName":{"id":4600,"name":"uint256","nodeType":"ElementaryTypeName","src":"501:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"anonymous":false,"eventSelector":"659f33fc6677bebf3a9bf3101092792e31f35766d0358e54577bdd91a655f6a0","id":4607,"name":"StakeBurned","nameLocation":"521:11:29","nodeType":"EventDefinition","parameters":{"id":4606,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4603,"indexed":false,"mutability":"mutable","name":"staker","nameLocation":"541:6:29","nodeType":"VariableDeclaration","scope":4607,"src":"533:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4602,"name":"address","nodeType":"ElementaryTypeName","src":"533:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4605,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"557:6:29","nodeType":"VariableDeclaration","scope":4607,"src":"549:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4604,"name":"uint256","nodeType":"ElementaryTypeName","src":"549:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"532:32:29"},"src":"515:50:29"},{"anonymous":false,"eventSelector":"4a647b1d902051b0ae802f6050c58456d79d826bdf2bbf37a1bf13be97727b2d","id":4616,"name":"StakeTaken","nameLocation":"577:10:29","nodeType":"EventDefinition","parameters":{"id":4615,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4609,"indexed":false,"mutability":"mutable","name":"staker","nameLocation":"596:6:29","nodeType":"VariableDeclaration","scope":4616,"src":"588:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4608,"name":"address","nodeType":"ElementaryTypeName","src":"588:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4611,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"612:6:29","nodeType":"VariableDeclaration","scope":4616,"src":"604:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4610,"name":"uint256","nodeType":"ElementaryTypeName","src":"604:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4614,"indexed":false,"mutability":"mutable","name":"tokenId","nameLocation":"638:7:29","nodeType":"VariableDeclaration","scope":4616,"src":"620:25:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"typeName":{"id":4613,"nodeType":"UserDefinedTypeName","pathNode":{"id":4612,"name":"Structures.Tokens","nameLocations":["620:10:29","631:6:29"],"nodeType":"IdentifierPath","referencedDeclaration":2525,"src":"620:17:29"},"referencedDeclaration":2525,"src":"620:17:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"visibility":"internal"}],"src":"587:59:29"},"src":"571:76:29"},{"anonymous":false,"eventSelector":"68ffd6ad89c76c56b0b5206ae0c1a14cbffb37023d4e80f635ff7397c56b116b","id":4625,"name":"StakeAdded","nameLocation":"659:10:29","nodeType":"EventDefinition","parameters":{"id":4624,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4618,"indexed":false,"mutability":"mutable","name":"staker","nameLocation":"678:6:29","nodeType":"VariableDeclaration","scope":4625,"src":"670:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4617,"name":"address","nodeType":"ElementaryTypeName","src":"670:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4620,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"694:6:29","nodeType":"VariableDeclaration","scope":4625,"src":"686:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4619,"name":"uint256","nodeType":"ElementaryTypeName","src":"686:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4623,"indexed":false,"mutability":"mutable","name":"tokenId","nameLocation":"720:7:29","nodeType":"VariableDeclaration","scope":4625,"src":"702:25:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"typeName":{"id":4622,"nodeType":"UserDefinedTypeName","pathNode":{"id":4621,"name":"Structures.Tokens","nameLocations":["702:10:29","713:6:29"],"nodeType":"IdentifierPath","referencedDeclaration":2525,"src":"702:17:29"},"referencedDeclaration":2525,"src":"702:17:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"visibility":"internal"}],"src":"669:59:29"},"src":"653:76:29"},{"body":{"id":4705,"nodeType":"Block","src":"908:613:29","statements":[{"assignments":[4643],"declarations":[{"constant":false,"id":4643,"mutability":"mutable","name":"currentStatus","nameLocation":"940:13:29","nodeType":"VariableDeclaration","scope":4705,"src":"918:35:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"},"typeName":{"id":4642,"nodeType":"UserDefinedTypeName","pathNode":{"id":4641,"name":"Structures.PostStatus","nameLocations":["918:10:29","929:10:29"],"nodeType":"IdentifierPath","referencedDeclaration":2521,"src":"918:21:29"},"referencedDeclaration":2521,"src":"918:21:29","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"visibility":"internal"}],"id":4648,"initialValue":{"expression":{"expression":{"expression":{"id":4644,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"956:4:29","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":4645,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"961:8:29","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"956:13:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":4646,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"970:8:29","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2577,"src":"956:22:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2607_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":4647,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"979:6:29","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":2594,"src":"956:29:29","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"nodeType":"VariableDeclarationStatement","src":"918:67:29"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"},"id":4654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4650,"name":"currentStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4643,"src":"1017:13:29","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"id":4651,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"1034:10:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":4652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1045:10:29","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2521,"src":"1034:21:29","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2521_$","typeString":"type(enum Structures.PostStatus)"}},"id":4653,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1056:8:29","memberName":"Accepted","nodeType":"MemberAccess","referencedDeclaration":2515,"src":"1034:30:29","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"src":"1017:47:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"},"id":4659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4655,"name":"currentStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4643,"src":"1084:13:29","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"id":4656,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"1101:10:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":4657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1112:10:29","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2521,"src":"1101:21:29","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2521_$","typeString":"type(enum Structures.PostStatus)"}},"id":4658,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1123:9:29","memberName":"Submitted","nodeType":"MemberAccess","referencedDeclaration":2516,"src":"1101:31:29","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"src":"1084:48:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1017:115:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"494e56414c49445f535441545553","id":4661,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1146:16:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_e7ad020d83a3bbd1c079bc4bbb16e4b9f3f2424f3e40f83d8262d5329f30bf33","typeString":"literal_string \"INVALID_STATUS\""},"value":"INVALID_STATUS"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e7ad020d83a3bbd1c079bc4bbb16e4b9f3f2424f3e40f83d8262d5329f30bf33","typeString":"literal_string \"INVALID_STATUS\""}],"id":4649,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"996:7:29","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4662,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"996:176:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4663,"nodeType":"ExpressionStatement","src":"996:176:29"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4665,"name":"amountToAdd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4634,"src":"1191:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1205:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1191:15:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5354414b455f5245515549524544","id":4668,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1208:16:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_151fb58ee8e22d8ffcf94b96aa9d3ac58713988208feb07c984db8e3a5cdd4c4","typeString":"literal_string \"STAKE_REQUIRED\""},"value":"STAKE_REQUIRED"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_151fb58ee8e22d8ffcf94b96aa9d3ac58713988208feb07c984db8e3a5cdd4c4","typeString":"literal_string \"STAKE_REQUIRED\""}],"id":4664,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1183:7:29","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4669,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1183:42:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4670,"nodeType":"ExpressionStatement","src":"1183:42:29"},{"condition":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"id":4675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4671,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4628,"src":"1240:7:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"id":4672,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"1251:10:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":4673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1262:6:29","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2525,"src":"1251:17:29","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2525_$","typeString":"type(enum Structures.Tokens)"}},"id":4674,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1269:3:29","memberName":"NaN","nodeType":"MemberAccess","referencedDeclaration":2522,"src":"1251:21:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"src":"1240:32:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4687,"nodeType":"IfStatement","src":"1236:121:29","trueBody":{"id":4686,"nodeType":"Block","src":"1274:83:29","statements":[{"expression":{"arguments":[{"id":4677,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4628,"src":"1302:7:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},{"id":4678,"name":"funder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4632,"src":"1311:6:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":4681,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1327:4:29","typeDescriptions":{"typeIdentifier":"t_contract$_Staking_$5316","typeString":"contract Staking"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Staking_$5316","typeString":"contract Staking"}],"id":4680,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1319:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4679,"name":"address","nodeType":"ElementaryTypeName","src":"1319:7:29","typeDescriptions":{}}},"id":4682,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1319:13:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4683,"name":"amountToAdd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4634,"src":"1334:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4676,"name":"_transferFrom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5731,"src":"1288:13:29","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Tokens_$2525_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (enum Structures.Tokens,address,address,uint256)"}},"id":4684,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1288:58:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4685,"nodeType":"ExpressionStatement","src":"1288:58:29"}]}},{"expression":{"id":4695,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4688,"name":"newStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4637,"src":"1367:8:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4691,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4628,"src":"1403:7:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},{"id":4692,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4630,"src":"1412:6:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4693,"name":"amountToAdd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4634,"src":"1420:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4689,"name":"Deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4049,"src":"1378:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Deposit_$4049_$","typeString":"type(contract Deposit)"}},"id":4690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1386:16:29","memberName":"_increaseDeposit","nodeType":"MemberAccess","referencedDeclaration":3940,"src":"1378:24:29","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Tokens_$2525_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,address,uint256) returns (uint256)"}},"id":4694,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1378:54:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1367:65:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4696,"nodeType":"ExpressionStatement","src":"1367:65:29"},{"eventCall":{"arguments":[{"id":4698,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4630,"src":"1459:6:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4699,"name":"amountToAdd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4634,"src":"1467:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4700,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4628,"src":"1480:7:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}],"id":4697,"name":"StakeAdded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4625,"src":"1448:10:29","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_enum$_Tokens_$2525_$returns$__$","typeString":"function (address,uint256,enum Structures.Tokens)"}},"id":4701,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1448:40:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4702,"nodeType":"EmitStatement","src":"1443:45:29"},{"expression":{"id":4703,"name":"newStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4637,"src":"1506:8:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4638,"id":4704,"nodeType":"Return","src":"1499:15:29"}]},"id":4706,"implemented":true,"kind":"function","modifiers":[],"name":"_addStake","nameLocation":"744:9:29","nodeType":"FunctionDefinition","parameters":{"id":4635,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4628,"mutability":"mutable","name":"tokenId","nameLocation":"781:7:29","nodeType":"VariableDeclaration","scope":4706,"src":"763:25:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"typeName":{"id":4627,"nodeType":"UserDefinedTypeName","pathNode":{"id":4626,"name":"Structures.Tokens","nameLocations":["763:10:29","774:6:29"],"nodeType":"IdentifierPath","referencedDeclaration":2525,"src":"763:17:29"},"referencedDeclaration":2525,"src":"763:17:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":4630,"mutability":"mutable","name":"staker","nameLocation":"806:6:29","nodeType":"VariableDeclaration","scope":4706,"src":"798:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4629,"name":"address","nodeType":"ElementaryTypeName","src":"798:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4632,"mutability":"mutable","name":"funder","nameLocation":"830:6:29","nodeType":"VariableDeclaration","scope":4706,"src":"822:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4631,"name":"address","nodeType":"ElementaryTypeName","src":"822:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4634,"mutability":"mutable","name":"amountToAdd","nameLocation":"854:11:29","nodeType":"VariableDeclaration","scope":4706,"src":"846:19:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4633,"name":"uint256","nodeType":"ElementaryTypeName","src":"846:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"753:118:29"},"returnParameters":{"id":4638,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4637,"mutability":"mutable","name":"newStake","nameLocation":"898:8:29","nodeType":"VariableDeclaration","scope":4706,"src":"890:16:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4636,"name":"uint256","nodeType":"ElementaryTypeName","src":"890:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"889:18:29"},"scope":5316,"src":"735:786:29","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4784,"nodeType":"Block","src":"1704:1018:29","statements":[{"assignments":[4724],"declarations":[{"constant":false,"id":4724,"mutability":"mutable","name":"currentStatus","nameLocation":"1837:13:29","nodeType":"VariableDeclaration","scope":4784,"src":"1815:35:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"},"typeName":{"id":4723,"nodeType":"UserDefinedTypeName","pathNode":{"id":4722,"name":"Structures.PostStatus","nameLocations":["1815:10:29","1826:10:29"],"nodeType":"IdentifierPath","referencedDeclaration":2521,"src":"1815:21:29"},"referencedDeclaration":2521,"src":"1815:21:29","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"visibility":"internal"}],"id":4729,"initialValue":{"expression":{"expression":{"expression":{"id":4725,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"1853:4:29","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":4726,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1858:8:29","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"1853:13:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":4727,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1867:8:29","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2577,"src":"1853:22:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2607_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":4728,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1876:6:29","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":2594,"src":"1853:29:29","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"nodeType":"VariableDeclarationStatement","src":"1815:67:29"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"},"id":4735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4731,"name":"currentStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4724,"src":"1982:13:29","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"id":4732,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"1999:10:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":4733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2010:10:29","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2521,"src":"1999:21:29","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2521_$","typeString":"type(enum Structures.PostStatus)"}},"id":4734,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2021:8:29","memberName":"Accepted","nodeType":"MemberAccess","referencedDeclaration":2515,"src":"1999:30:29","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"src":"1982:47:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"},"id":4740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4736,"name":"currentStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4724,"src":"2049:13:29","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"id":4737,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"2066:10:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":4738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2077:10:29","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2521,"src":"2066:21:29","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2521_$","typeString":"type(enum Structures.PostStatus)"}},"id":4739,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2088:9:29","memberName":"Submitted","nodeType":"MemberAccess","referencedDeclaration":2516,"src":"2066:31:29","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"src":"2049:48:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1982:115:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"494e56414c49445f535441545553","id":4742,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2111:16:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_e7ad020d83a3bbd1c079bc4bbb16e4b9f3f2424f3e40f83d8262d5329f30bf33","typeString":"literal_string \"INVALID_STATUS\""},"value":"INVALID_STATUS"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e7ad020d83a3bbd1c079bc4bbb16e4b9f3f2424f3e40f83d8262d5329f30bf33","typeString":"literal_string \"INVALID_STATUS\""}],"id":4730,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1961:7:29","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4743,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1961:176:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4744,"nodeType":"ExpressionStatement","src":"1961:176:29"},{"condition":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"id":4749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4745,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4709,"src":"2212:7:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":4746,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"2223:10:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":4747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2234:6:29","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2525,"src":"2223:17:29","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2525_$","typeString":"type(enum Structures.Tokens)"}},"id":4748,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2241:3:29","memberName":"NaN","nodeType":"MemberAccess","referencedDeclaration":2522,"src":"2223:21:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"src":"2212:32:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4765,"nodeType":"Block","src":"2439:67:29","statements":[{"expression":{"arguments":[{"id":4760,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4709,"src":"2463:7:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},{"id":4761,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4713,"src":"2472:8:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4762,"name":"amountToTake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4715,"src":"2482:12:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4759,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5690,"src":"2453:9:29","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Tokens_$2525_$_t_address_$_t_uint256_$returns$__$","typeString":"function (enum Structures.Tokens,address,uint256)"}},"id":4763,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2453:42:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4764,"nodeType":"ExpressionStatement","src":"2453:42:29"}]},"id":4766,"nodeType":"IfStatement","src":"2208:298:29","trueBody":{"id":4758,"nodeType":"Block","src":"2246:187:29","statements":[{"expression":{"arguments":[{"id":4755,"name":"amountToTake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4715,"src":"2409:12:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":4752,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4713,"src":"2390:8:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4751,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2382:8:29","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":4750,"name":"address","nodeType":"ElementaryTypeName","src":"2382:8:29","stateMutability":"payable","typeDescriptions":{}}},"id":4753,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2382:17:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":4754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2400:8:29","memberName":"transfer","nodeType":"MemberAccess","src":"2382:26:29","typeDescriptions":{"typeIdentifier":"t_function_transfer_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":4756,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2382:40:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4757,"nodeType":"ExpressionStatement","src":"2382:40:29"}]}},{"expression":{"id":4774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4767,"name":"newStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4718,"src":"2567:8:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4770,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4709,"src":"2603:7:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},{"id":4771,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4711,"src":"2612:6:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4772,"name":"amountToTake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4715,"src":"2620:12:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4768,"name":"Deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4049,"src":"2578:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Deposit_$4049_$","typeString":"type(contract Deposit)"}},"id":4769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2586:16:29","memberName":"_decreaseDeposit","nodeType":"MemberAccess","referencedDeclaration":3998,"src":"2578:24:29","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Tokens_$2525_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,address,uint256) returns (uint256)"}},"id":4773,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2578:55:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2567:66:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4775,"nodeType":"ExpressionStatement","src":"2567:66:29"},{"eventCall":{"arguments":[{"id":4777,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4711,"src":"2659:6:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4778,"name":"amountToTake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4715,"src":"2667:12:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4779,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4709,"src":"2681:7:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}],"id":4776,"name":"StakeTaken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4616,"src":"2648:10:29","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_enum$_Tokens_$2525_$returns$__$","typeString":"function (address,uint256,enum Structures.Tokens)"}},"id":4780,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2648:41:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4781,"nodeType":"EmitStatement","src":"2643:46:29"},{"expression":{"id":4782,"name":"newStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4718,"src":"2707:8:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4719,"id":4783,"nodeType":"Return","src":"2700:15:29"}]},"id":4785,"implemented":true,"kind":"function","modifiers":[],"name":"_takeStake","nameLocation":"1536:10:29","nodeType":"FunctionDefinition","parameters":{"id":4716,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4709,"mutability":"mutable","name":"tokenId","nameLocation":"1574:7:29","nodeType":"VariableDeclaration","scope":4785,"src":"1556:25:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"typeName":{"id":4708,"nodeType":"UserDefinedTypeName","pathNode":{"id":4707,"name":"Structures.Tokens","nameLocations":["1556:10:29","1567:6:29"],"nodeType":"IdentifierPath","referencedDeclaration":2525,"src":"1556:17:29"},"referencedDeclaration":2525,"src":"1556:17:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":4711,"mutability":"mutable","name":"staker","nameLocation":"1599:6:29","nodeType":"VariableDeclaration","scope":4785,"src":"1591:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4710,"name":"address","nodeType":"ElementaryTypeName","src":"1591:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4713,"mutability":"mutable","name":"receiver","nameLocation":"1623:8:29","nodeType":"VariableDeclaration","scope":4785,"src":"1615:16:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4712,"name":"address","nodeType":"ElementaryTypeName","src":"1615:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4715,"mutability":"mutable","name":"amountToTake","nameLocation":"1649:12:29","nodeType":"VariableDeclaration","scope":4785,"src":"1641:20:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4714,"name":"uint256","nodeType":"ElementaryTypeName","src":"1641:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1546:121:29"},"returnParameters":{"id":4719,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4718,"mutability":"mutable","name":"newStake","nameLocation":"1694:8:29","nodeType":"VariableDeclaration","scope":4785,"src":"1686:16:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4717,"name":"uint256","nodeType":"ElementaryTypeName","src":"1686:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1685:18:29"},"scope":5316,"src":"1527:1195:29","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4816,"nodeType":"Block","src":"2882:245:29","statements":[{"assignments":[4798],"declarations":[{"constant":false,"id":4798,"mutability":"mutable","name":"currentDeposit","nameLocation":"2900:14:29","nodeType":"VariableDeclaration","scope":4816,"src":"2892:22:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4797,"name":"uint256","nodeType":"ElementaryTypeName","src":"2892:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4804,"initialValue":{"arguments":[{"id":4801,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4788,"src":"2937:7:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},{"id":4802,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4790,"src":"2946:6:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4799,"name":"Deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4049,"src":"2917:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Deposit_$4049_$","typeString":"type(contract Deposit)"}},"id":4800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2925:11:29","memberName":"_getDeposit","nodeType":"MemberAccess","referencedDeclaration":4048,"src":"2917:19:29","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_enum$_Tokens_$2525_$_t_address_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,address) view returns (uint256)"}},"id":4803,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2917:36:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2892:61:29"},{"assignments":[4806],"declarations":[{"constant":false,"id":4806,"mutability":"mutable","name":"newStake","nameLocation":"2972:8:29","nodeType":"VariableDeclaration","scope":4816,"src":"2964:16:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4805,"name":"uint256","nodeType":"ElementaryTypeName","src":"2964:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4813,"initialValue":{"arguments":[{"id":4808,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4788,"src":"3007:7:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},{"id":4809,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4790,"src":"3028:6:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4810,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4792,"src":"3048:8:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4811,"name":"currentDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4798,"src":"3070:14:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4807,"name":"_takeStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"2983:10:29","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Tokens_$2525_$_t_address_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,address,address,uint256) returns (uint256)"}},"id":4812,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2983:111:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2964:130:29"},{"expression":{"id":4814,"name":"newStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4806,"src":"3112:8:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4796,"id":4815,"nodeType":"Return","src":"3105:15:29"}]},"id":4817,"implemented":true,"kind":"function","modifiers":[],"name":"_takeFullStake","nameLocation":"2737:14:29","nodeType":"FunctionDefinition","parameters":{"id":4793,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4788,"mutability":"mutable","name":"tokenId","nameLocation":"2779:7:29","nodeType":"VariableDeclaration","scope":4817,"src":"2761:25:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"typeName":{"id":4787,"nodeType":"UserDefinedTypeName","pathNode":{"id":4786,"name":"Structures.Tokens","nameLocations":["2761:10:29","2772:6:29"],"nodeType":"IdentifierPath","referencedDeclaration":2525,"src":"2761:17:29"},"referencedDeclaration":2525,"src":"2761:17:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":4790,"mutability":"mutable","name":"staker","nameLocation":"2804:6:29","nodeType":"VariableDeclaration","scope":4817,"src":"2796:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4789,"name":"address","nodeType":"ElementaryTypeName","src":"2796:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4792,"mutability":"mutable","name":"receiver","nameLocation":"2828:8:29","nodeType":"VariableDeclaration","scope":4817,"src":"2820:16:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4791,"name":"address","nodeType":"ElementaryTypeName","src":"2820:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2751:91:29"},"returnParameters":{"id":4796,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4795,"mutability":"mutable","name":"amountTaken","nameLocation":"2869:11:29","nodeType":"VariableDeclaration","scope":4817,"src":"2861:19:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4794,"name":"uint256","nodeType":"ElementaryTypeName","src":"2861:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2860:21:29"},"scope":5316,"src":"2728:399:29","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4933,"nodeType":"Block","src":"3284:1143:29","statements":[{"assignments":[4830],"declarations":[{"constant":false,"id":4830,"mutability":"mutable","name":"newDeposit","nameLocation":"3302:10:29","nodeType":"VariableDeclaration","scope":4933,"src":"3294:18:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4829,"name":"uint256","nodeType":"ElementaryTypeName","src":"3294:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4837,"initialValue":{"arguments":[{"id":4833,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4820,"src":"3353:7:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},{"id":4834,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4822,"src":"3374:6:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4835,"name":"amountToBurn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4824,"src":"3394:12:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4831,"name":"Deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4049,"src":"3315:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Deposit_$4049_$","typeString":"type(contract Deposit)"}},"id":4832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3323:16:29","memberName":"_decreaseDeposit","nodeType":"MemberAccess","referencedDeclaration":3998,"src":"3315:24:29","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Tokens_$2525_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,address,uint256) returns (uint256)"}},"id":4836,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3315:101:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3294:122:29"},{"assignments":[4839],"declarations":[{"constant":false,"id":4839,"mutability":"mutable","name":"burnEnabled","nameLocation":"3432:11:29","nodeType":"VariableDeclaration","scope":4933,"src":"3427:16:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4838,"name":"bool","nodeType":"ElementaryTypeName","src":"3427:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":4846,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":4841,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"3467:8:29","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":4842,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3476:15:29","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2545,"src":"3467:24:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4840,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"3446:20:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2419_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":4843,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3446:46:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2419","typeString":"contract IMecenateFeedFactory"}},"id":4844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3506:11:29","memberName":"burnEnabled","nodeType":"MemberAccess","referencedDeclaration":2403,"src":"3446:71:29","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_bool_$","typeString":"function () view external returns (bool)"}},"id":4845,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3446:73:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3427:92:29"},{"assignments":[4848],"declarations":[{"constant":false,"id":4848,"mutability":"mutable","name":"treasuryContract","nameLocation":"3538:16:29","nodeType":"VariableDeclaration","scope":4933,"src":"3530:24:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4847,"name":"address","nodeType":"ElementaryTypeName","src":"3530:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4855,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":4850,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"3591:8:29","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":4851,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3600:15:29","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2545,"src":"3591:24:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4849,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"3557:20:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2419_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":4852,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3557:68:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2419","typeString":"contract IMecenateFeedFactory"}},"id":4853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3626:16:29","memberName":"treasuryContract","nodeType":"MemberAccess","referencedDeclaration":2353,"src":"3557:85:29","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_payable_$","typeString":"function () view external returns (address payable)"}},"id":4854,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3557:87:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"VariableDeclarationStatement","src":"3530:114:29"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4856,"name":"burnEnabled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4839,"src":"3659:11:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"66616c7365","id":4857,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3674:5:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3659:20:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4924,"nodeType":"Block","src":"4030:314:29","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"id":4895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4891,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4820,"src":"4048:7:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":4892,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"4059:10:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":4893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4070:6:29","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2525,"src":"4059:17:29","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2525_$","typeString":"type(enum Structures.Tokens)"}},"id":4894,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4077:3:29","memberName":"DAI","nodeType":"MemberAccess","referencedDeclaration":2524,"src":"4059:21:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"src":"4048:32:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"id":4905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4901,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4820,"src":"4147:7:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":4902,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"4158:10:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":4903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4169:6:29","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2525,"src":"4158:17:29","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2525_$","typeString":"type(enum Structures.Tokens)"}},"id":4904,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4176:4:29","memberName":"MUSE","nodeType":"MemberAccess","referencedDeclaration":2523,"src":"4158:22:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"src":"4147:33:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"id":4915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4911,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4820,"src":"4244:7:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":4912,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"4255:10:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":4913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4266:6:29","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2525,"src":"4255:17:29","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2525_$","typeString":"type(enum Structures.Tokens)"}},"id":4914,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4273:3:29","memberName":"NaN","nodeType":"MemberAccess","referencedDeclaration":2522,"src":"4255:21:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"src":"4244:32:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4921,"nodeType":"IfStatement","src":"4240:94:29","trueBody":{"id":4920,"nodeType":"Block","src":"4278:56:29","statements":[{"expression":{"arguments":[{"id":4917,"name":"amountToBurn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4824,"src":"4306:12:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4916,"name":"_burnWeth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3093,"src":"4296:9:29","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) returns (bool)"}},"id":4918,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4296:23:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4919,"nodeType":"ExpressionStatement","src":"4296:23:29"}]}},"id":4922,"nodeType":"IfStatement","src":"4143:191:29","trueBody":{"id":4910,"nodeType":"Block","src":"4182:52:29","statements":[{"expression":{"arguments":[{"id":4907,"name":"amountToBurn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4824,"src":"4206:12:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4906,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[5830,3231],"referencedDeclaration":3231,"src":"4200:5:29","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) returns (bool)"}},"id":4908,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4200:19:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4909,"nodeType":"ExpressionStatement","src":"4200:19:29"}]}},"id":4923,"nodeType":"IfStatement","src":"4044:290:29","trueBody":{"id":4900,"nodeType":"Block","src":"4082:55:29","statements":[{"expression":{"arguments":[{"id":4897,"name":"amountToBurn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4824,"src":"4109:12:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4896,"name":"_burnDai","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3003,"src":"4100:8:29","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) returns (bool)"}},"id":4898,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4100:22:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4899,"nodeType":"ExpressionStatement","src":"4100:22:29"}]}}]},"id":4925,"nodeType":"IfStatement","src":"3655:689:29","trueBody":{"id":4890,"nodeType":"Block","src":"3681:343:29","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"id":4863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4859,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4820,"src":"3699:7:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":4860,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"3710:10:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":4861,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3721:6:29","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2525,"src":"3710:17:29","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2525_$","typeString":"type(enum Structures.Tokens)"}},"id":4862,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3728:3:29","memberName":"NaN","nodeType":"MemberAccess","referencedDeclaration":2522,"src":"3710:21:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"src":"3699:32:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4888,"nodeType":"Block","src":"3931:83:29","statements":[{"expression":{"arguments":[{"id":4883,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4820,"src":"3959:7:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},{"id":4884,"name":"treasuryContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4848,"src":"3968:16:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4885,"name":"amountToBurn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4824,"src":"3986:12:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4882,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5690,"src":"3949:9:29","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Tokens_$2525_$_t_address_$_t_uint256_$returns$__$","typeString":"function (enum Structures.Tokens,address,uint256)"}},"id":4886,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3949:50:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4887,"nodeType":"ExpressionStatement","src":"3949:50:29"}]},"id":4889,"nodeType":"IfStatement","src":"3695:319:29","trueBody":{"id":4881,"nodeType":"Block","src":"3733:192:29","statements":[{"assignments":[4865,null],"declarations":[{"constant":false,"id":4865,"mutability":"mutable","name":"result","nameLocation":"3757:6:29","nodeType":"VariableDeclaration","scope":4881,"src":"3752:11:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4864,"name":"bool","nodeType":"ElementaryTypeName","src":"3752:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":4875,"initialValue":{"arguments":[{"hexValue":"","id":4873,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3859:2:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"arguments":[{"id":4868,"name":"treasuryContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4848,"src":"3777:16:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4867,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3769:8:29","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":4866,"name":"address","nodeType":"ElementaryTypeName","src":"3769:8:29","stateMutability":"payable","typeDescriptions":{}}},"id":4869,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3769:25:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":4870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3795:4:29","memberName":"call","nodeType":"MemberAccess","src":"3769:30:29","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":4872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":4871,"name":"amountToBurn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4824,"src":"3828:12:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"3769:89:29","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":4874,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3769:93:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"3751:111:29"},{"expression":{"arguments":[{"id":4877,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4865,"src":"3888:6:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"43414c4c5f4641494c4544","id":4878,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3896:13:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_f3432607971be3e819458f2225636489dcaafd232f467570b81899b0f48540f3","typeString":"literal_string \"CALL_FAILED\""},"value":"CALL_FAILED"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f3432607971be3e819458f2225636489dcaafd232f467570b81899b0f48540f3","typeString":"literal_string \"CALL_FAILED\""}],"id":4876,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3880:7:29","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4879,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3880:30:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4880,"nodeType":"ExpressionStatement","src":"3880:30:29"}]}}]}},{"eventCall":{"arguments":[{"id":4927,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4822,"src":"4371:6:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4928,"name":"amountToBurn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4824,"src":"4379:12:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4926,"name":"StakeBurned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4607,"src":"4359:11:29","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":4929,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4359:33:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4930,"nodeType":"EmitStatement","src":"4354:38:29"},{"expression":{"id":4931,"name":"newDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4830,"src":"4410:10:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4828,"id":4932,"nodeType":"Return","src":"4403:17:29"}]},"id":4934,"implemented":true,"kind":"function","modifiers":[],"name":"_burnStake","nameLocation":"3142:10:29","nodeType":"FunctionDefinition","parameters":{"id":4825,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4820,"mutability":"mutable","name":"tokenId","nameLocation":"3180:7:29","nodeType":"VariableDeclaration","scope":4934,"src":"3162:25:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"typeName":{"id":4819,"nodeType":"UserDefinedTypeName","pathNode":{"id":4818,"name":"Structures.Tokens","nameLocations":["3162:10:29","3173:6:29"],"nodeType":"IdentifierPath","referencedDeclaration":2525,"src":"3162:17:29"},"referencedDeclaration":2525,"src":"3162:17:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":4822,"mutability":"mutable","name":"staker","nameLocation":"3205:6:29","nodeType":"VariableDeclaration","scope":4934,"src":"3197:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4821,"name":"address","nodeType":"ElementaryTypeName","src":"3197:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4824,"mutability":"mutable","name":"amountToBurn","nameLocation":"3229:12:29","nodeType":"VariableDeclaration","scope":4934,"src":"3221:20:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4823,"name":"uint256","nodeType":"ElementaryTypeName","src":"3221:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3152:95:29"},"returnParameters":{"id":4828,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4827,"mutability":"mutable","name":"newStake","nameLocation":"3274:8:29","nodeType":"VariableDeclaration","scope":4934,"src":"3266:16:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4826,"name":"uint256","nodeType":"ElementaryTypeName","src":"3266:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3265:18:29"},"scope":5316,"src":"3133:1294:29","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4960,"nodeType":"Block","src":"4562:164:29","statements":[{"assignments":[4945],"declarations":[{"constant":false,"id":4945,"mutability":"mutable","name":"currentDeposit","nameLocation":"4580:14:29","nodeType":"VariableDeclaration","scope":4960,"src":"4572:22:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4944,"name":"uint256","nodeType":"ElementaryTypeName","src":"4572:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4951,"initialValue":{"arguments":[{"id":4948,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4937,"src":"4617:7:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},{"id":4949,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4939,"src":"4626:6:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4946,"name":"Deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4049,"src":"4597:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Deposit_$4049_$","typeString":"type(contract Deposit)"}},"id":4947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4605:11:29","memberName":"_getDeposit","nodeType":"MemberAccess","referencedDeclaration":4048,"src":"4597:19:29","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_enum$_Tokens_$2525_$_t_address_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,address) view returns (uint256)"}},"id":4950,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4597:36:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4572:61:29"},{"expression":{"arguments":[{"id":4953,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4937,"src":"4655:7:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},{"id":4954,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4939,"src":"4664:6:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4955,"name":"currentDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4945,"src":"4672:14:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4952,"name":"_burnStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4934,"src":"4644:10:29","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Tokens_$2525_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,address,uint256) returns (uint256)"}},"id":4956,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4644:43:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4957,"nodeType":"ExpressionStatement","src":"4644:43:29"},{"expression":{"id":4958,"name":"currentDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4945,"src":"4705:14:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4943,"id":4959,"nodeType":"Return","src":"4698:21:29"}]},"id":4961,"implemented":true,"kind":"function","modifiers":[],"name":"_burnFullStake","nameLocation":"4442:14:29","nodeType":"FunctionDefinition","parameters":{"id":4940,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4937,"mutability":"mutable","name":"tokenId","nameLocation":"4484:7:29","nodeType":"VariableDeclaration","scope":4961,"src":"4466:25:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"typeName":{"id":4936,"nodeType":"UserDefinedTypeName","pathNode":{"id":4935,"name":"Structures.Tokens","nameLocations":["4466:10:29","4477:6:29"],"nodeType":"IdentifierPath","referencedDeclaration":2525,"src":"4466:17:29"},"referencedDeclaration":2525,"src":"4466:17:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":4939,"mutability":"mutable","name":"staker","nameLocation":"4509:6:29","nodeType":"VariableDeclaration","scope":4961,"src":"4501:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4938,"name":"address","nodeType":"ElementaryTypeName","src":"4501:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4456:65:29"},"returnParameters":{"id":4943,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4942,"mutability":"mutable","name":"amountBurned","nameLocation":"4548:12:29","nodeType":"VariableDeclaration","scope":4961,"src":"4540:20:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4941,"name":"uint256","nodeType":"ElementaryTypeName","src":"4540:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4539:22:29"},"scope":5316,"src":"4433:293:29","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4981,"nodeType":"Block","src":"4854:135:29","statements":[{"expression":{"id":4977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4971,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4969,"src":"4887:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4974,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4964,"src":"4916:7:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},{"id":4975,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4966,"src":"4925:6:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4972,"name":"Deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4049,"src":"4896:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Deposit_$4049_$","typeString":"type(contract Deposit)"}},"id":4973,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4904:11:29","memberName":"_getDeposit","nodeType":"MemberAccess","referencedDeclaration":4048,"src":"4896:19:29","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_enum$_Tokens_$2525_$_t_address_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,address) view returns (uint256)"}},"id":4976,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4896:36:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4887:45:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4978,"nodeType":"ExpressionStatement","src":"4887:45:29"},{"expression":{"id":4979,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4969,"src":"4976:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4970,"id":4980,"nodeType":"Return","src":"4969:13:29"}]},"functionSelector":"52a6cb4a","id":4982,"implemented":true,"kind":"function","modifiers":[],"name":"getStake","nameLocation":"4741:8:29","nodeType":"FunctionDefinition","parameters":{"id":4967,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4964,"mutability":"mutable","name":"tokenId","nameLocation":"4777:7:29","nodeType":"VariableDeclaration","scope":4982,"src":"4759:25:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"typeName":{"id":4963,"nodeType":"UserDefinedTypeName","pathNode":{"id":4962,"name":"Structures.Tokens","nameLocations":["4759:10:29","4770:6:29"],"nodeType":"IdentifierPath","referencedDeclaration":2525,"src":"4759:17:29"},"referencedDeclaration":2525,"src":"4759:17:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":4966,"mutability":"mutable","name":"staker","nameLocation":"4802:6:29","nodeType":"VariableDeclaration","scope":4982,"src":"4794:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4965,"name":"address","nodeType":"ElementaryTypeName","src":"4794:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4749:65:29"},"returnParameters":{"id":4970,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4969,"mutability":"mutable","name":"amount","nameLocation":"4846:6:29","nodeType":"VariableDeclaration","scope":4982,"src":"4838:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4968,"name":"uint256","nodeType":"ElementaryTypeName","src":"4838:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4837:16:29"},"scope":5316,"src":"4732:257:29","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":5020,"nodeType":"Block","src":"5053:346:29","statements":[{"assignments":[4988],"declarations":[{"constant":false,"id":4988,"mutability":"mutable","name":"amountSeller","nameLocation":"5071:12:29","nodeType":"VariableDeclaration","scope":5020,"src":"5063:20:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4987,"name":"uint256","nodeType":"ElementaryTypeName","src":"5063:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5000,"initialValue":{"arguments":[{"expression":{"expression":{"expression":{"id":4991,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"5119:4:29","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":4992,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5124:8:29","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"5119:13:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":4993,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5133:8:29","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2577,"src":"5119:22:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2607_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":4994,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5142:7:29","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":2606,"src":"5119:30:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},{"expression":{"expression":{"expression":{"id":4995,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"5163:4:29","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":4996,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5168:8:29","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"5163:13:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":4997,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5177:6:29","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"5163:20:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":4998,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5184:6:29","memberName":"seller","nodeType":"MemberAccess","referencedDeclaration":2611,"src":"5163:27:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4989,"name":"Deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4049,"src":"5086:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Deposit_$4049_$","typeString":"type(contract Deposit)"}},"id":4990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5094:11:29","memberName":"_getDeposit","nodeType":"MemberAccess","referencedDeclaration":4048,"src":"5086:19:29","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_enum$_Tokens_$2525_$_t_address_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,address) view returns (uint256)"}},"id":4999,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5086:114:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5063:137:29"},{"assignments":[5002],"declarations":[{"constant":false,"id":5002,"mutability":"mutable","name":"amountBuyer","nameLocation":"5219:11:29","nodeType":"VariableDeclaration","scope":5020,"src":"5211:19:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5001,"name":"uint256","nodeType":"ElementaryTypeName","src":"5211:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5014,"initialValue":{"arguments":[{"expression":{"expression":{"expression":{"id":5005,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"5266:4:29","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":5006,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5271:8:29","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"5266:13:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":5007,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5280:8:29","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2577,"src":"5266:22:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2607_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":5008,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5289:7:29","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":2606,"src":"5266:30:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},{"expression":{"expression":{"expression":{"id":5009,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"5310:4:29","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":5010,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5315:8:29","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"5310:13:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":5011,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5324:6:29","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"5310:20:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":5012,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5331:5:29","memberName":"buyer","nodeType":"MemberAccess","referencedDeclaration":2609,"src":"5310:26:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5003,"name":"Deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4049,"src":"5233:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Deposit_$4049_$","typeString":"type(contract Deposit)"}},"id":5004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5241:11:29","memberName":"_getDeposit","nodeType":"MemberAccess","referencedDeclaration":4048,"src":"5233:19:29","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_enum$_Tokens_$2525_$_t_address_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,address) view returns (uint256)"}},"id":5013,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5233:113:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5211:135:29"},{"expression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5015,"name":"amountSeller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4988,"src":"5365:12:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":5016,"name":"amountBuyer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5002,"src":"5380:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5365:26:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5018,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5364:28:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4986,"id":5019,"nodeType":"Return","src":"5357:35:29"}]},"functionSelector":"0917e776","id":5021,"implemented":true,"kind":"function","modifiers":[],"name":"getTotalStaked","nameLocation":"5004:14:29","nodeType":"FunctionDefinition","parameters":{"id":4983,"nodeType":"ParameterList","parameters":[],"src":"5018:2:29"},"returnParameters":{"id":4986,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4985,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5021,"src":"5044:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4984,"name":"uint256","nodeType":"ElementaryTypeName","src":"5044:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5043:9:29"},"scope":5316,"src":"4995:404:29","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":5119,"nodeType":"Block","src":"5553:1003:29","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"id":5039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5034,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5024,"src":"5571:7:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"expression":{"id":5035,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"5582:4:29","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":5036,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5587:8:29","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"5582:13:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":5037,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5596:8:29","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2577,"src":"5582:22:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2607_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":5038,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5605:7:29","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":2606,"src":"5582:30:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"src":"5571:41:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"57524f4e475f544f4b454e","id":5040,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5614:13:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_c2a5ce41a94d934cf004fb0c5e3f69254251b50ba813e9f01e80a27cfee744e4","typeString":"literal_string \"WRONG_TOKEN\""},"value":"WRONG_TOKEN"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c2a5ce41a94d934cf004fb0c5e3f69254251b50ba813e9f01e80a27cfee744e4","typeString":"literal_string \"WRONG_TOKEN\""}],"id":5033,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5563:7:29","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5041,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5563:65:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5042,"nodeType":"ExpressionStatement","src":"5563:65:29"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5044,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5745:3:29","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5749:6:29","memberName":"sender","nodeType":"MemberAccess","src":"5745:10:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"expression":{"id":5046,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"5759:4:29","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":5047,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5764:8:29","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"5759:13:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":5048,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5773:6:29","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"5759:20:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":5049,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5780:5:29","memberName":"buyer","nodeType":"MemberAccess","referencedDeclaration":2609,"src":"5759:26:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5745:40:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5051,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5805:3:29","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5809:6:29","memberName":"sender","nodeType":"MemberAccess","src":"5805:10:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"expression":{"id":5053,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"5819:4:29","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":5054,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5824:8:29","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"5819:13:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":5055,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5833:6:29","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"5819:20:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":5056,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5840:6:29","memberName":"seller","nodeType":"MemberAccess","referencedDeclaration":2611,"src":"5819:27:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5805:41:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5745:101:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"57524f4e475f4d534753454e444552","id":5059,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5860:17:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_b9e2f679ddf473f1657bae009ec1854e399b1938d4b4fea96e7eb855e014657f","typeString":"literal_string \"WRONG_MSGSENDER\""},"value":"WRONG_MSGSENDER"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b9e2f679ddf473f1657bae009ec1854e399b1938d4b4fea96e7eb855e014657f","typeString":"literal_string \"WRONG_MSGSENDER\""}],"id":5043,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5724:7:29","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5060,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5724:163:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5061,"nodeType":"ExpressionStatement","src":"5724:163:29"},{"assignments":[5063],"declarations":[{"constant":false,"id":5063,"mutability":"mutable","name":"actualAmountToAdd","nameLocation":"5981:17:29","nodeType":"VariableDeclaration","scope":5119,"src":"5973:25:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5062,"name":"uint256","nodeType":"ElementaryTypeName","src":"5973:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5076,"initialValue":{"condition":{"components":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5070,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5064,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6002:3:29","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6006:6:29","memberName":"sender","nodeType":"MemberAccess","src":"6002:10:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"expression":{"id":5066,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"6016:4:29","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":5067,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6021:8:29","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"6016:13:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":5068,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6030:6:29","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"6016:20:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":5069,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6037:6:29","memberName":"seller","nodeType":"MemberAccess","referencedDeclaration":2611,"src":"6016:27:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6002:41:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":5071,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6001:43:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":5074,"name":"amountToAdd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5028,"src":"6083:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6001:93:29","trueExpression":{"expression":{"id":5072,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6059:3:29","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6063:5:29","memberName":"value","nodeType":"MemberAccess","src":"6059:9:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5973:121:29"},{"assignments":[5078],"declarations":[{"constant":false,"id":5078,"mutability":"mutable","name":"newStake","nameLocation":"6141:8:29","nodeType":"VariableDeclaration","scope":5119,"src":"6133:16:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5077,"name":"uint256","nodeType":"ElementaryTypeName","src":"6133:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5086,"initialValue":{"arguments":[{"id":5080,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5024,"src":"6175:7:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},{"expression":{"id":5081,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6196:3:29","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5082,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6200:6:29","memberName":"sender","nodeType":"MemberAccess","src":"6196:10:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5083,"name":"_funder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5026,"src":"6220:7:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5084,"name":"actualAmountToAdd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5063,"src":"6241:17:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5079,"name":"_addStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4706,"src":"6152:9:29","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Tokens_$2525_$_t_address_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,address,address,uint256) returns (uint256)"}},"id":5085,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6152:116:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6133:135:29"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5093,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5087,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6350:3:29","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6354:6:29","memberName":"sender","nodeType":"MemberAccess","src":"6350:10:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"expression":{"id":5089,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"6364:4:29","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":5090,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6369:8:29","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"6364:13:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":5091,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6378:6:29","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"6364:20:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":5092,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6385:5:29","memberName":"buyer","nodeType":"MemberAccess","referencedDeclaration":2609,"src":"6364:26:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6350:40:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5115,"nodeType":"Block","src":"6462:62:29","statements":[{"expression":{"id":5113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"expression":{"expression":{"id":5105,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"6476:4:29","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":5109,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6481:8:29","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"6476:13:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":5110,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6490:6:29","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"6476:20:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":5111,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6497:5:29","memberName":"stake","nodeType":"MemberAccess","referencedDeclaration":2613,"src":"6476:26:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5112,"name":"newStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5078,"src":"6505:8:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6476:37:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5114,"nodeType":"ExpressionStatement","src":"6476:37:29"}]},"id":5116,"nodeType":"IfStatement","src":"6346:178:29","trueBody":{"id":5104,"nodeType":"Block","src":"6392:64:29","statements":[{"expression":{"id":5102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"expression":{"expression":{"id":5094,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"6406:4:29","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":5098,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6411:8:29","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"6406:13:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":5099,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6420:6:29","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"6406:20:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":5100,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"6427:7:29","memberName":"payment","nodeType":"MemberAccess","referencedDeclaration":2615,"src":"6406:28:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5101,"name":"newStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5078,"src":"6437:8:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6406:39:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5103,"nodeType":"ExpressionStatement","src":"6406:39:29"}]}},{"expression":{"id":5117,"name":"newStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5078,"src":"6541:8:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5032,"id":5118,"nodeType":"Return","src":"6534:15:29"}]},"functionSelector":"1d0b4af5","id":5120,"implemented":true,"kind":"function","modifiers":[],"name":"addStake","nameLocation":"5414:8:29","nodeType":"FunctionDefinition","parameters":{"id":5029,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5024,"mutability":"mutable","name":"tokenId","nameLocation":"5450:7:29","nodeType":"VariableDeclaration","scope":5120,"src":"5432:25:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"typeName":{"id":5023,"nodeType":"UserDefinedTypeName","pathNode":{"id":5022,"name":"Structures.Tokens","nameLocations":["5432:10:29","5443:6:29"],"nodeType":"IdentifierPath","referencedDeclaration":2525,"src":"5432:17:29"},"referencedDeclaration":2525,"src":"5432:17:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":5026,"mutability":"mutable","name":"_funder","nameLocation":"5475:7:29","nodeType":"VariableDeclaration","scope":5120,"src":"5467:15:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5025,"name":"address","nodeType":"ElementaryTypeName","src":"5467:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5028,"mutability":"mutable","name":"amountToAdd","nameLocation":"5500:11:29","nodeType":"VariableDeclaration","scope":5120,"src":"5492:19:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5027,"name":"uint256","nodeType":"ElementaryTypeName","src":"5492:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5422:95:29"},"returnParameters":{"id":5032,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5031,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5120,"src":"5544:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5030,"name":"uint256","nodeType":"ElementaryTypeName","src":"5544:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5543:9:29"},"scope":5316,"src":"5405:1151:29","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":5200,"nodeType":"Block","src":"6705:593:29","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"id":5138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5133,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5123,"src":"6723:7:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"expression":{"id":5134,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"6734:4:29","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":5135,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6739:8:29","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"6734:13:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":5136,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6748:8:29","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2577,"src":"6734:22:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2607_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":5137,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6757:7:29","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":2606,"src":"6734:30:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"src":"6723:41:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"57524f4e475f544f4b454e","id":5139,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6766:13:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_c2a5ce41a94d934cf004fb0c5e3f69254251b50ba813e9f01e80a27cfee744e4","typeString":"literal_string \"WRONG_TOKEN\""},"value":"WRONG_TOKEN"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c2a5ce41a94d934cf004fb0c5e3f69254251b50ba813e9f01e80a27cfee744e4","typeString":"literal_string \"WRONG_TOKEN\""}],"id":5132,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6715:7:29","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5140,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6715:65:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5141,"nodeType":"ExpressionStatement","src":"6715:65:29"},{"assignments":[5143],"declarations":[{"constant":false,"id":5143,"mutability":"mutable","name":"currentDeposit","nameLocation":"6799:14:29","nodeType":"VariableDeclaration","scope":5200,"src":"6791:22:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5142,"name":"uint256","nodeType":"ElementaryTypeName","src":"6791:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5150,"initialValue":{"arguments":[{"id":5146,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5123,"src":"6836:7:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},{"expression":{"id":5147,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6845:3:29","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6849:6:29","memberName":"sender","nodeType":"MemberAccess","src":"6845:10:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5144,"name":"Deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4049,"src":"6816:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Deposit_$4049_$","typeString":"type(contract Deposit)"}},"id":5145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6824:11:29","memberName":"_getDeposit","nodeType":"MemberAccess","referencedDeclaration":4048,"src":"6816:19:29","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_enum$_Tokens_$2525_$_t_address_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,address) view returns (uint256)"}},"id":5149,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6816:40:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6791:65:29"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5152,"name":"currentDeposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5143,"src":"6875:14:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":5153,"name":"amountToTake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5127,"src":"6893:12:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6875:30:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e4f545f454e4f5547485f5354414b45","id":5155,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6907:18:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_bce5c93b86a1c82e4c912864a93b831fa0d1cfe45a72342dea960488c01af669","typeString":"literal_string \"NOT_ENOUGH_STAKE\""},"value":"NOT_ENOUGH_STAKE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_bce5c93b86a1c82e4c912864a93b831fa0d1cfe45a72342dea960488c01af669","typeString":"literal_string \"NOT_ENOUGH_STAKE\""}],"id":5151,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6867:7:29","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5156,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6867:59:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5157,"nodeType":"ExpressionStatement","src":"6867:59:29"},{"assignments":[5159],"declarations":[{"constant":false,"id":5159,"mutability":"mutable","name":"newBalance","nameLocation":"6945:10:29","nodeType":"VariableDeclaration","scope":5200,"src":"6937:18:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5158,"name":"uint256","nodeType":"ElementaryTypeName","src":"6937:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5167,"initialValue":{"arguments":[{"id":5161,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5123,"src":"6982:7:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},{"expression":{"id":5162,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7003:3:29","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7007:6:29","memberName":"sender","nodeType":"MemberAccess","src":"7003:10:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5164,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5125,"src":"7027:8:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5165,"name":"amountToTake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5127,"src":"7049:12:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5160,"name":"_takeStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4785,"src":"6958:10:29","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Tokens_$2525_$_t_address_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,address,address,uint256) returns (uint256)"}},"id":5166,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6958:113:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6937:134:29"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5168,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7086:3:29","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7090:6:29","memberName":"sender","nodeType":"MemberAccess","src":"7086:10:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"expression":{"id":5170,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"7100:4:29","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":5171,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7105:8:29","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"7100:13:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":5172,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7114:6:29","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"7100:20:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":5173,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7121:5:29","memberName":"buyer","nodeType":"MemberAccess","referencedDeclaration":2609,"src":"7100:26:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7086:40:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5196,"nodeType":"Block","src":"7200:64:29","statements":[{"expression":{"id":5194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"expression":{"expression":{"id":5186,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"7214:4:29","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":5190,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7219:8:29","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"7214:13:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":5191,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7228:6:29","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"7214:20:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":5192,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7235:5:29","memberName":"stake","nodeType":"MemberAccess","referencedDeclaration":2613,"src":"7214:26:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5193,"name":"newBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5159,"src":"7243:10:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7214:39:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5195,"nodeType":"ExpressionStatement","src":"7214:39:29"}]},"id":5197,"nodeType":"IfStatement","src":"7082:182:29","trueBody":{"id":5185,"nodeType":"Block","src":"7128:66:29","statements":[{"expression":{"id":5183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"expression":{"expression":{"id":5175,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"7142:4:29","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":5179,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7147:8:29","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"7142:13:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":5180,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7156:6:29","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"7142:20:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":5181,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7163:7:29","memberName":"payment","nodeType":"MemberAccess","referencedDeclaration":2615,"src":"7142:28:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5182,"name":"newBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5159,"src":"7173:10:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7142:41:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5184,"nodeType":"ExpressionStatement","src":"7142:41:29"}]}},{"expression":{"id":5198,"name":"newBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5159,"src":"7281:10:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5131,"id":5199,"nodeType":"Return","src":"7274:17:29"}]},"functionSelector":"ed70d5d5","id":5201,"implemented":true,"kind":"function","modifiers":[],"name":"takeStake","nameLocation":"6571:9:29","nodeType":"FunctionDefinition","parameters":{"id":5128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5123,"mutability":"mutable","name":"tokenId","nameLocation":"6608:7:29","nodeType":"VariableDeclaration","scope":5201,"src":"6590:25:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"typeName":{"id":5122,"nodeType":"UserDefinedTypeName","pathNode":{"id":5121,"name":"Structures.Tokens","nameLocations":["6590:10:29","6601:6:29"],"nodeType":"IdentifierPath","referencedDeclaration":2525,"src":"6590:17:29"},"referencedDeclaration":2525,"src":"6590:17:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":5125,"mutability":"mutable","name":"receiver","nameLocation":"6633:8:29","nodeType":"VariableDeclaration","scope":5201,"src":"6625:16:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5124,"name":"address","nodeType":"ElementaryTypeName","src":"6625:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5127,"mutability":"mutable","name":"amountToTake","nameLocation":"6659:12:29","nodeType":"VariableDeclaration","scope":5201,"src":"6651:20:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5126,"name":"uint256","nodeType":"ElementaryTypeName","src":"6651:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6580:97:29"},"returnParameters":{"id":5131,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5130,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5201,"src":"6696:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5129,"name":"uint256","nodeType":"ElementaryTypeName","src":"6696:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6695:9:29"},"scope":5316,"src":"6562:736:29","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5270,"nodeType":"Block","src":"7421:426:29","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"id":5217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5212,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5204,"src":"7439:7:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"expression":{"id":5213,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"7450:4:29","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":5214,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7455:8:29","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"7450:13:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":5215,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7464:8:29","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2577,"src":"7450:22:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2607_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":5216,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7473:7:29","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":2606,"src":"7450:30:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"src":"7439:41:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"57524f4e475f544f4b454e","id":5218,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7482:13:29","typeDescriptions":{"typeIdentifier":"t_stringliteral_c2a5ce41a94d934cf004fb0c5e3f69254251b50ba813e9f01e80a27cfee744e4","typeString":"literal_string \"WRONG_TOKEN\""},"value":"WRONG_TOKEN"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c2a5ce41a94d934cf004fb0c5e3f69254251b50ba813e9f01e80a27cfee744e4","typeString":"literal_string \"WRONG_TOKEN\""}],"id":5211,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7431:7:29","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5219,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7431:65:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5220,"nodeType":"ExpressionStatement","src":"7431:65:29"},{"assignments":[5222],"declarations":[{"constant":false,"id":5222,"mutability":"mutable","name":"newBalance","nameLocation":"7515:10:29","nodeType":"VariableDeclaration","scope":5270,"src":"7507:18:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5221,"name":"uint256","nodeType":"ElementaryTypeName","src":"7507:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5229,"initialValue":{"arguments":[{"id":5224,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5204,"src":"7543:7:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},{"expression":{"id":5225,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7552:3:29","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7556:6:29","memberName":"sender","nodeType":"MemberAccess","src":"7552:10:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5227,"name":"receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5206,"src":"7564:8:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5223,"name":"_takeFullStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4817,"src":"7528:14:29","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Tokens_$2525_$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,address,address) returns (uint256)"}},"id":5228,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7528:45:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7507:66:29"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5230,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7588:3:29","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7592:6:29","memberName":"sender","nodeType":"MemberAccess","src":"7588:10:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"expression":{"id":5232,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"7602:4:29","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":5233,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7607:8:29","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"7602:13:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":5234,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7616:6:29","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"7602:20:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":5235,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7623:5:29","memberName":"buyer","nodeType":"MemberAccess","referencedDeclaration":2609,"src":"7602:26:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7588:40:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5248,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7706:3:29","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7710:6:29","memberName":"sender","nodeType":"MemberAccess","src":"7706:10:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"expression":{"id":5250,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"7720:4:29","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":5251,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7725:8:29","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"7720:13:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":5252,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7734:6:29","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"7720:20:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":5253,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7741:6:29","memberName":"seller","nodeType":"MemberAccess","referencedDeclaration":2611,"src":"7720:27:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7706:41:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5266,"nodeType":"IfStatement","src":"7702:111:29","trueBody":{"id":5265,"nodeType":"Block","src":"7749:64:29","statements":[{"expression":{"id":5263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"expression":{"expression":{"id":5255,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"7763:4:29","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":5259,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7768:8:29","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"7763:13:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":5260,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7777:6:29","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"7763:20:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":5261,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7784:5:29","memberName":"stake","nodeType":"MemberAccess","referencedDeclaration":2613,"src":"7763:26:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5262,"name":"newBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5222,"src":"7792:10:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7763:39:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5264,"nodeType":"ExpressionStatement","src":"7763:39:29"}]}},"id":5267,"nodeType":"IfStatement","src":"7584:229:29","trueBody":{"id":5247,"nodeType":"Block","src":"7630:66:29","statements":[{"expression":{"id":5245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"expression":{"expression":{"id":5237,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"7644:4:29","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":5241,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7649:8:29","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"7644:13:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":5242,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7658:6:29","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"7644:20:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":5243,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7665:7:29","memberName":"payment","nodeType":"MemberAccess","referencedDeclaration":2615,"src":"7644:28:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5244,"name":"newBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5222,"src":"7675:10:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7644:41:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5246,"nodeType":"ExpressionStatement","src":"7644:41:29"}]}},{"expression":{"id":5268,"name":"newBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5222,"src":"7830:10:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5210,"id":5269,"nodeType":"Return","src":"7823:17:29"}]},"functionSelector":"f2d7dbb6","id":5271,"implemented":true,"kind":"function","modifiers":[],"name":"takeFullStake","nameLocation":"7313:13:29","nodeType":"FunctionDefinition","parameters":{"id":5207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5204,"mutability":"mutable","name":"tokenId","nameLocation":"7354:7:29","nodeType":"VariableDeclaration","scope":5271,"src":"7336:25:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"typeName":{"id":5203,"nodeType":"UserDefinedTypeName","pathNode":{"id":5202,"name":"Structures.Tokens","nameLocations":["7336:10:29","7347:6:29"],"nodeType":"IdentifierPath","referencedDeclaration":2525,"src":"7336:17:29"},"referencedDeclaration":2525,"src":"7336:17:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":5206,"mutability":"mutable","name":"receiver","nameLocation":"7379:8:29","nodeType":"VariableDeclaration","scope":5271,"src":"7371:16:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5205,"name":"address","nodeType":"ElementaryTypeName","src":"7371:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7326:67:29"},"returnParameters":{"id":5210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5209,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5271,"src":"7412:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5208,"name":"uint256","nodeType":"ElementaryTypeName","src":"7412:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7411:9:29"},"scope":5316,"src":"7304:543:29","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5292,"nodeType":"Block","src":"7918:213:29","statements":[{"expression":{"id":5288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5276,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5274,"src":"7951:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"expression":{"expression":{"id":5279,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"7993:4:29","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":5280,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7998:8:29","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"7993:13:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":5281,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8007:8:29","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2577,"src":"7993:22:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2607_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":5282,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8016:7:29","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":2606,"src":"7993:30:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},{"expression":{"expression":{"expression":{"id":5283,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"8037:4:29","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":5284,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8042:8:29","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"8037:13:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":5285,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8051:6:29","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"8037:20:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":5286,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8058:6:29","memberName":"seller","nodeType":"MemberAccess","referencedDeclaration":2611,"src":"8037:27:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5277,"name":"Deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4049,"src":"7960:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Deposit_$4049_$","typeString":"type(contract Deposit)"}},"id":5278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7968:11:29","memberName":"_getDeposit","nodeType":"MemberAccess","referencedDeclaration":4048,"src":"7960:19:29","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_enum$_Tokens_$2525_$_t_address_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,address) view returns (uint256)"}},"id":5287,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7960:114:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7951:123:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5289,"nodeType":"ExpressionStatement","src":"7951:123:29"},{"expression":{"id":5290,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5274,"src":"8118:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5275,"id":5291,"nodeType":"Return","src":"8111:13:29"}]},"functionSelector":"5c63ed69","id":5293,"implemented":true,"kind":"function","modifiers":[],"name":"getSellerStake","nameLocation":"7862:14:29","nodeType":"FunctionDefinition","parameters":{"id":5272,"nodeType":"ParameterList","parameters":[],"src":"7876:2:29"},"returnParameters":{"id":5275,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5274,"mutability":"mutable","name":"amount","nameLocation":"7910:6:29","nodeType":"VariableDeclaration","scope":5293,"src":"7902:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5273,"name":"uint256","nodeType":"ElementaryTypeName","src":"7902:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7901:16:29"},"scope":5316,"src":"7853:278:29","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":5314,"nodeType":"Block","src":"8201:212:29","statements":[{"expression":{"id":5310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5298,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5296,"src":"8234:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"expression":{"expression":{"id":5301,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"8276:4:29","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":5302,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8281:8:29","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"8276:13:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":5303,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8290:8:29","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2577,"src":"8276:22:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2607_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":5304,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8299:7:29","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":2606,"src":"8276:30:29","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},{"expression":{"expression":{"expression":{"id":5305,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"8320:4:29","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":5306,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8325:8:29","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"8320:13:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":5307,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8334:6:29","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"8320:20:29","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":5308,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8341:5:29","memberName":"buyer","nodeType":"MemberAccess","referencedDeclaration":2609,"src":"8320:26:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5299,"name":"Deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4049,"src":"8243:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Deposit_$4049_$","typeString":"type(contract Deposit)"}},"id":5300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8251:11:29","memberName":"_getDeposit","nodeType":"MemberAccess","referencedDeclaration":4048,"src":"8243:19:29","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_enum$_Tokens_$2525_$_t_address_$returns$_t_uint256_$","typeString":"function (enum Structures.Tokens,address) view returns (uint256)"}},"id":5309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8243:113:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8234:122:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5311,"nodeType":"ExpressionStatement","src":"8234:122:29"},{"expression":{"id":5312,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5296,"src":"8400:6:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5297,"id":5313,"nodeType":"Return","src":"8393:13:29"}]},"functionSelector":"4c38d877","id":5315,"implemented":true,"kind":"function","modifiers":[],"name":"getBuyerStake","nameLocation":"8146:13:29","nodeType":"FunctionDefinition","parameters":{"id":5294,"nodeType":"ParameterList","parameters":[],"src":"8159:2:29"},"returnParameters":{"id":5297,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5296,"mutability":"mutable","name":"amount","nameLocation":"8193:6:29","nodeType":"VariableDeclaration","scope":5315,"src":"8185:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5295,"name":"uint256","nodeType":"ElementaryTypeName","src":"8185:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8184:16:29"},"scope":5316,"src":"8137:276:29","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":5317,"src":"417:7998:29","usedErrors":[]}],"src":"344:8072:29"},"id":29},"contracts/modules/Submission.sol":{"ast":{"absolutePath":"contracts/modules/Submission.sol","exportedSymbols":{"Attestation":[1799],"AttestationRequest":[1841],"AttestationRequestData":[1835],"Data":[3857],"DelegatedAttestationRequest":[1854],"DelegatedRevocationRequest":[1900],"Events":[4090],"IEAS":[2108],"IMecenateFeed":[2341],"IMecenateFeedFactory":[2419],"IMecenateTreasury":[2432],"IMecenateUsers":[2490],"ISchemaRegistry":[2156],"MultiAttestationRequest":[1861],"MultiDelegatedAttestationRequest":[1876],"MultiDelegatedRevocationRequest":[1922],"MultiRevocationRequest":[1907],"RevocationRequest":[1887],"RevocationRequestData":[1881],"Signature":[1778],"Strings":[306],"Structures":[2671],"Submission":[5537],"Version":[6130]},"id":5538,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":5318,"literals":["solidity","^","0.8",".9"],"nodeType":"PragmaDirective","src":"218:23:30"},{"absolutePath":"contracts/modules/Events.sol","file":"./Events.sol","id":5319,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5538,"sourceUnit":4091,"src":"243:22:30","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":5320,"name":"Events","nameLocations":["299:6:30"],"nodeType":"IdentifierPath","referencedDeclaration":4090,"src":"299:6:30"},"id":5321,"nodeType":"InheritanceSpecifier","src":"299:6:30"}],"canonicalName":"Submission","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":5537,"linearizedBaseContracts":[5537,4090,3857,6130],"name":"Submission","nameLocation":"285:10:30","nodeType":"ContractDefinition","nodes":[{"body":{"id":5440,"nodeType":"Block","src":"376:990:30","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5327,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"394:3:30","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"398:6:30","memberName":"sender","nodeType":"MemberAccess","src":"394:10:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"expression":{"id":5329,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"408:4:30","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":5330,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"413:8:30","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"408:13:30","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":5331,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"422:6:30","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"408:20:30","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":5332,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"429:6:30","memberName":"seller","nodeType":"MemberAccess","referencedDeclaration":2611,"src":"408:27:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"394:41:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e4f545f53454c4c4552","id":5334,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"437:12:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_5da6b782e6837297580639e2387426c4366c23f72270e18b945265d01aac89d7","typeString":"literal_string \"NOT_SELLER\""},"value":"NOT_SELLER"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5da6b782e6837297580639e2387426c4366c23f72270e18b945265d01aac89d7","typeString":"literal_string \"NOT_SELLER\""}],"id":5326,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"386:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5335,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"386:64:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5336,"nodeType":"ExpressionStatement","src":"386:64:30"},{"assignments":[5341],"declarations":[{"constant":false,"id":5341,"mutability":"mutable","name":"currentStatus","nameLocation":"483:13:30","nodeType":"VariableDeclaration","scope":5440,"src":"461:35:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"},"typeName":{"id":5340,"nodeType":"UserDefinedTypeName","pathNode":{"id":5339,"name":"Structures.PostStatus","nameLocations":["461:10:30","472:10:30"],"nodeType":"IdentifierPath","referencedDeclaration":2521,"src":"461:21:30"},"referencedDeclaration":2521,"src":"461:21:30","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"visibility":"internal"}],"id":5346,"initialValue":{"expression":{"expression":{"expression":{"id":5342,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"499:4:30","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":5343,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"504:8:30","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"499:13:30","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":5344,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"513:8:30","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2577,"src":"499:22:30","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2607_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":5345,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"522:6:30","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":2594,"src":"499:29:30","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"nodeType":"VariableDeclarationStatement","src":"461:67:30"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":5348,"name":"validStatuses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3537,"src":"559:13:30","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_bool_$","typeString":"mapping(uint8 => bool)"}},"id":5353,"indexExpression":{"arguments":[{"id":5351,"name":"currentStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5341,"src":"579:13:30","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}],"id":5350,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"573:5:30","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":5349,"name":"uint8","nodeType":"ElementaryTypeName","src":"573:5:30","typeDescriptions":{}}},"id":5352,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"573:20:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"559:35:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"},"id":5358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5354,"name":"currentStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5341,"src":"615:13:30","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":5355,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"632:10:30","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":5356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"643:10:30","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2521,"src":"632:21:30","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2521_$","typeString":"type(enum Structures.PostStatus)"}},"id":5357,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"654:8:30","memberName":"Accepted","nodeType":"MemberAccess","referencedDeclaration":2515,"src":"632:30:30","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"src":"615:47:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"},"id":5363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5359,"name":"currentStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5341,"src":"686:13:30","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":5360,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"703:10:30","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":5361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"714:10:30","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2521,"src":"703:21:30","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2521_$","typeString":"type(enum Structures.PostStatus)"}},"id":5362,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"725:9:30","memberName":"Submitted","nodeType":"MemberAccess","referencedDeclaration":2516,"src":"703:31:30","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"src":"686:48:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"615:119:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":5365,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"614:121:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"559:176:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"57524f4e475f535441545553","id":5367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"749:14:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_799044dda81aa11039c3815f0baad81f925e59549ce2d526ba1961342a16a954","typeString":"literal_string \"WRONG_STATUS\""},"value":"WRONG_STATUS"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_799044dda81aa11039c3815f0baad81f925e59549ce2d526ba1961342a16a954","typeString":"literal_string \"WRONG_STATUS\""}],"id":5347,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"538:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5368,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"538:235:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5369,"nodeType":"ExpressionStatement","src":"538:235:30"},{"expression":{"arguments":[{"arguments":[{"expression":{"id":5376,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"884:3:30","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"888:6:30","memberName":"sender","nodeType":"MemberAccess","src":"884:10:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"expression":{"id":5372,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"820:8:30","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":5373,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"829:19:30","memberName":"usersModuleContract","nodeType":"MemberAccess","referencedDeclaration":2543,"src":"820:28:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5371,"name":"IMecenateUsers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2490,"src":"805:14:30","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateUsers_$2490_$","typeString":"type(contract IMecenateUsers)"}},"id":5374,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"805:44:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateUsers_$2490","typeString":"contract IMecenateUsers"}},"id":5375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"850:16:30","memberName":"checkifUserExist","nodeType":"MemberAccess","referencedDeclaration":2464,"src":"805:61:30","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view external returns (bool)"}},"id":5378,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"805:103:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5573657220646f6573206e6f74206578697374","id":5379,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"922:21:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_bde1711cf1e60b048cbfac2eae1e8c9e208b36da2330a29e0e29bfdd8d406ba1","typeString":"literal_string \"User does not exist\""},"value":"User does not exist"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_bde1711cf1e60b048cbfac2eae1e8c9e208b36da2330a29e0e29bfdd8d406ba1","typeString":"literal_string \"User does not exist\""}],"id":5370,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"784:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"784:169:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5381,"nodeType":"ExpressionStatement","src":"784:169:30"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":5383,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"972:4:30","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":5384,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"977:7:30","memberName":"creator","nodeType":"MemberAccess","referencedDeclaration":2570,"src":"972:12:30","typeDescriptions":{"typeIdentifier":"t_struct$_User_$2627_storage","typeString":"struct Structures.User storage ref"}},"id":5385,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"985:10:30","memberName":"evmAddress","nodeType":"MemberAccess","referencedDeclaration":2622,"src":"972:23:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":5386,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"999:3:30","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1003:6:30","memberName":"sender","nodeType":"MemberAccess","src":"999:10:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"972:37:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e4f545f53454c4c4552","id":5389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1011:12:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_5da6b782e6837297580639e2387426c4366c23f72270e18b945265d01aac89d7","typeString":"literal_string \"NOT_SELLER\""},"value":"NOT_SELLER"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5da6b782e6837297580639e2387426c4366c23f72270e18b945265d01aac89d7","typeString":"literal_string \"NOT_SELLER\""}],"id":5382,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"964:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5390,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"964:60:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5391,"nodeType":"ExpressionStatement","src":"964:60:30"},{"expression":{"arguments":[{"expression":{"expression":{"id":5393,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"1049:10:30","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":5394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1060:10:30","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2521,"src":"1049:21:30","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2521_$","typeString":"type(enum Structures.PostStatus)"}},"id":5395,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1071:9:30","memberName":"Submitted","nodeType":"MemberAccess","referencedDeclaration":2516,"src":"1049:31:30","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}],"id":5392,"name":"_changeStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3714,"src":"1035:13:30","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_PostStatus_$2521_$returns$__$","typeString":"function (enum Structures.PostStatus)"}},"id":5396,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1035:46:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5397,"nodeType":"ExpressionStatement","src":"1035:46:30"},{"expression":{"id":5406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"expression":{"expression":{"id":5398,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"1092:4:30","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":5402,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1097:8:30","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"1092:13:30","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":5403,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1106:4:30","memberName":"data","nodeType":"MemberAccess","referencedDeclaration":2583,"src":"1092:18:30","typeDescriptions":{"typeIdentifier":"t_struct$_PostEncryptedData_$2591_storage","typeString":"struct Structures.PostEncryptedData storage ref"}},"id":5404,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1111:12:30","memberName":"encryptedKey","nodeType":"MemberAccess","referencedDeclaration":2588,"src":"1092:31:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5405,"name":"encryptedKey","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5323,"src":"1126:12:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"1092:46:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":5407,"nodeType":"ExpressionStatement","src":"1092:46:30"},{"expression":{"id":5418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"expression":{"expression":{"id":5408,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"1148:4:30","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":5412,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1153:8:30","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"1148:13:30","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":5413,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1162:8:30","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2577,"src":"1148:22:30","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2607_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":5414,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1171:6:30","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":2594,"src":"1148:29:30","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"expression":{"id":5415,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"1180:10:30","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":5416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1191:10:30","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2521,"src":"1180:21:30","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2521_$","typeString":"type(enum Structures.PostStatus)"}},"id":5417,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1202:9:30","memberName":"Submitted","nodeType":"MemberAccess","referencedDeclaration":2516,"src":"1180:31:30","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"src":"1148:63:30","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"id":5419,"nodeType":"ExpressionStatement","src":"1148:63:30"},{"expression":{"id":5434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"expression":{"expression":{"id":5420,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"1221:4:30","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":5424,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1226:8:30","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"1221:13:30","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":5425,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1235:8:30","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2577,"src":"1221:22:30","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2607_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":5426,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1244:12:30","memberName":"endTimeStamp","nodeType":"MemberAccess","referencedDeclaration":2601,"src":"1221:35:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5427,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"1271:5:30","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":5428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1277:9:30","memberName":"timestamp","nodeType":"MemberAccess","src":"1271:15:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"expression":{"expression":{"id":5429,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"1301:4:30","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":5430,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1306:8:30","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"1301:13:30","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":5431,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1315:8:30","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2577,"src":"1301:22:30","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2607_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":5432,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1324:8:30","memberName":"duration","nodeType":"MemberAccess","referencedDeclaration":2603,"src":"1301:31:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1271:61:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1221:111:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5435,"nodeType":"ExpressionStatement","src":"1221:111:30"},{"eventCall":{"arguments":[{"id":5437,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"1354:4:30","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}],"id":5436,"name":"Valid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4069,"src":"1348:5:30","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_struct$_Post_$2574_memory_ptr_$returns$__$","typeString":"function (struct Structures.Post memory)"}},"id":5438,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1348:11:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5439,"nodeType":"EmitStatement","src":"1343:16:30"}]},"functionSelector":"8f903c79","id":5441,"implemented":true,"kind":"function","modifiers":[],"name":"submitHash","nameLocation":"321:10:30","nodeType":"FunctionDefinition","parameters":{"id":5324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5323,"mutability":"mutable","name":"encryptedKey","nameLocation":"345:12:30","nodeType":"VariableDeclaration","scope":5441,"src":"332:25:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5322,"name":"bytes","nodeType":"ElementaryTypeName","src":"332:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"331:27:30"},"returnParameters":{"id":5325,"nodeType":"ParameterList","parameters":[],"src":"376:0:30"},"scope":5537,"src":"312:1054:30","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"body":{"id":5535,"nodeType":"Block","src":"1474:833:30","statements":[{"assignments":[5452],"declarations":[{"constant":false,"id":5452,"mutability":"mutable","name":"currentStatus","nameLocation":"1506:13:30","nodeType":"VariableDeclaration","scope":5535,"src":"1484:35:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"},"typeName":{"id":5451,"nodeType":"UserDefinedTypeName","pathNode":{"id":5450,"name":"Structures.PostStatus","nameLocations":["1484:10:30","1495:10:30"],"nodeType":"IdentifierPath","referencedDeclaration":2521,"src":"1484:21:30"},"referencedDeclaration":2521,"src":"1484:21:30","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"visibility":"internal"}],"id":5457,"initialValue":{"expression":{"expression":{"expression":{"id":5453,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"1522:4:30","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":5454,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1527:8:30","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"1522:13:30","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":5455,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1536:8:30","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2577,"src":"1522:22:30","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2607_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":5456,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1545:6:30","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":2594,"src":"1522:29:30","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"nodeType":"VariableDeclarationStatement","src":"1484:67:30"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":5459,"name":"validStatuses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3537,"src":"1582:13:30","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint8_$_t_bool_$","typeString":"mapping(uint8 => bool)"}},"id":5464,"indexExpression":{"arguments":[{"id":5462,"name":"currentStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5452,"src":"1602:13:30","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}],"id":5461,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1596:5:30","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":5460,"name":"uint8","nodeType":"ElementaryTypeName","src":"1596:5:30","typeDescriptions":{}}},"id":5463,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1596:20:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1582:35:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"},"id":5469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5465,"name":"currentStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5452,"src":"1638:13:30","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":5466,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"1655:10:30","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":5467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1666:10:30","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2521,"src":"1655:21:30","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2521_$","typeString":"type(enum Structures.PostStatus)"}},"id":5468,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1677:9:30","memberName":"Submitted","nodeType":"MemberAccess","referencedDeclaration":2516,"src":"1655:31:30","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"src":"1638:48:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"},"id":5474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5470,"name":"currentStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5452,"src":"1710:13:30","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":5471,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"1727:10:30","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":5472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1738:10:30","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2521,"src":"1727:21:30","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2521_$","typeString":"type(enum Structures.PostStatus)"}},"id":5473,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1749:8:30","memberName":"Revealed","nodeType":"MemberAccess","referencedDeclaration":2519,"src":"1727:30:30","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"src":"1710:47:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1638:119:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"},"id":5480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5476,"name":"currentStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5452,"src":"1781:13:30","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":5477,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"1798:10:30","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":5478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1809:10:30","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2521,"src":"1798:21:30","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2521_$","typeString":"type(enum Structures.PostStatus)"}},"id":5479,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1820:9:30","memberName":"Finalized","nodeType":"MemberAccess","referencedDeclaration":2517,"src":"1798:31:30","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"src":"1781:48:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1638:191:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":5482,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1637:193:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1582:248:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"494e56414c49445f535441545553","id":5484,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1844:16:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_e7ad020d83a3bbd1c079bc4bbb16e4b9f3f2424f3e40f83d8262d5329f30bf33","typeString":"literal_string \"INVALID_STATUS\""},"value":"INVALID_STATUS"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e7ad020d83a3bbd1c079bc4bbb16e4b9f3f2424f3e40f83d8262d5329f30bf33","typeString":"literal_string \"INVALID_STATUS\""}],"id":5458,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1561:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5485,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1561:309:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5486,"nodeType":"ExpressionStatement","src":"1561:309:30"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5488,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1902:3:30","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1906:6:30","memberName":"sender","nodeType":"MemberAccess","src":"1902:10:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"expression":{"expression":{"id":5490,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"1916:4:30","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":5491,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1921:8:30","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"1916:13:30","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":5492,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1930:6:30","memberName":"escrow","nodeType":"MemberAccess","referencedDeclaration":2580,"src":"1916:20:30","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$2620_storage","typeString":"struct Structures.PostEscrow storage ref"}},"id":5493,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1937:6:30","memberName":"seller","nodeType":"MemberAccess","referencedDeclaration":2611,"src":"1916:27:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1902:41:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"594f555f4152455f5448455f53454c4c4552","id":5495,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1957:20:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_0e19a2ddbe3b6f40223c614bc1171875af50ecda0601bc6003fdbf6d9a759b6d","typeString":"literal_string \"YOU_ARE_THE_SELLER\""},"value":"YOU_ARE_THE_SELLER"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0e19a2ddbe3b6f40223c614bc1171875af50ecda0601bc6003fdbf6d9a759b6d","typeString":"literal_string \"YOU_ARE_THE_SELLER\""}],"id":5487,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1881:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5496,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1881:106:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5497,"nodeType":"ExpressionStatement","src":"1881:106:30"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"},"id":5503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5499,"name":"currentStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5452,"src":"2019:13:30","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":5500,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"2036:10:30","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":5501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2047:10:30","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2521,"src":"2036:21:30","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2521_$","typeString":"type(enum Structures.PostStatus)"}},"id":5502,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2058:9:30","memberName":"Finalized","nodeType":"MemberAccess","referencedDeclaration":2517,"src":"2036:31:30","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"src":"2019:48:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e4f545f46494e414c495a4544","id":5504,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2081:15:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_c52b4ebd065593469a3c7d1425274a5bc8f1f01ff55e53236e5ea4b4745c5e01","typeString":"literal_string \"NOT_FINALIZED\""},"value":"NOT_FINALIZED"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c52b4ebd065593469a3c7d1425274a5bc8f1f01ff55e53236e5ea4b4745c5e01","typeString":"literal_string \"NOT_FINALIZED\""}],"id":5498,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1998:7:30","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5505,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1998:108:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5506,"nodeType":"ExpressionStatement","src":"1998:108:30"},{"expression":{"id":5515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"expression":{"expression":{"id":5507,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"2117:4:30","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":5511,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2122:8:30","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"2117:13:30","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":5512,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2131:4:30","memberName":"data","nodeType":"MemberAccess","referencedDeclaration":2583,"src":"2117:18:30","typeDescriptions":{"typeIdentifier":"t_struct$_PostEncryptedData_$2591_storage","typeString":"struct Structures.PostEncryptedData storage ref"}},"id":5513,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2136:13:30","memberName":"decryptedData","nodeType":"MemberAccess","referencedDeclaration":2590,"src":"2117:32:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5514,"name":"decryptedData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5443,"src":"2152:13:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"2117:48:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes storage ref"}},"id":5516,"nodeType":"ExpressionStatement","src":"2117:48:30"},{"expression":{"id":5527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"expression":{"expression":{"id":5517,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"2175:4:30","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}},"id":5521,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2180:8:30","memberName":"postdata","nodeType":"MemberAccess","referencedDeclaration":2573,"src":"2175:13:30","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$2584_storage","typeString":"struct Structures.PostData storage ref"}},"id":5522,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2189:8:30","memberName":"settings","nodeType":"MemberAccess","referencedDeclaration":2577,"src":"2175:22:30","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$2607_storage","typeString":"struct Structures.PostSettings storage ref"}},"id":5523,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2198:6:30","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":2594,"src":"2175:29:30","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"expression":{"id":5524,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"2207:10:30","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":5525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2218:10:30","memberName":"PostStatus","nodeType":"MemberAccess","referencedDeclaration":2521,"src":"2207:21:30","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostStatus_$2521_$","typeString":"type(enum Structures.PostStatus)"}},"id":5526,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2229:8:30","memberName":"Revealed","nodeType":"MemberAccess","referencedDeclaration":2519,"src":"2207:30:30","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"src":"2175:62:30","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$2521","typeString":"enum Structures.PostStatus"}},"id":5528,"nodeType":"ExpressionStatement","src":"2175:62:30"},{"eventCall":{"arguments":[{"id":5530,"name":"post","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"2264:4:30","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Post_$2574_storage","typeString":"struct Structures.Post storage ref"}],"id":5529,"name":"MadePublic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4084,"src":"2253:10:30","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_struct$_Post_$2574_memory_ptr_$returns$__$","typeString":"function (struct Structures.Post memory)"}},"id":5531,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2253:16:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5532,"nodeType":"EmitStatement","src":"2248:21:30"},{"expression":{"id":5533,"name":"decryptedData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5443,"src":"2287:13:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":5447,"id":5534,"nodeType":"Return","src":"2280:20:30"}]},"functionSelector":"7abe914d","id":5536,"implemented":true,"kind":"function","modifiers":[],"name":"revealData","nameLocation":"1381:10:30","nodeType":"FunctionDefinition","parameters":{"id":5444,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5443,"mutability":"mutable","name":"decryptedData","nameLocation":"1414:13:30","nodeType":"VariableDeclaration","scope":5536,"src":"1401:26:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5442,"name":"bytes","nodeType":"ElementaryTypeName","src":"1401:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1391:42:30"},"returnParameters":{"id":5447,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5446,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5536,"src":"1460:12:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":5445,"name":"bytes","nodeType":"ElementaryTypeName","src":"1460:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1459:14:30"},"scope":5537,"src":"1372:935:30","stateMutability":"nonpayable","virtual":true,"visibility":"external"}],"scope":5538,"src":"267:2042:30","usedErrors":[]}],"src":"218:2092:30"},"id":30},"contracts/modules/TokenManager.sol":{"ast":{"absolutePath":"contracts/modules/TokenManager.sol","exportedSymbols":{"Attestation":[1799],"AttestationRequest":[1841],"AttestationRequestData":[1835],"BurnDAI":[3202],"BurnMUSE":[3293],"Data":[3857],"DelegatedAttestationRequest":[1854],"DelegatedRevocationRequest":[1900],"Events":[4090],"IEAS":[2108],"IERC20":[77],"IMUSE":[2246],"IMecenateFeed":[2341],"IMecenateFeedFactory":[2419],"IMecenateTreasury":[2432],"IMecenateUsers":[2490],"ISchemaRegistry":[2156],"ISwapRouter":[1703],"IUniswapV3SwapCallback":[1603],"IWETH":[2510],"MultiAttestationRequest":[1861],"MultiDelegatedAttestationRequest":[1876],"MultiDelegatedRevocationRequest":[1922],"MultiRevocationRequest":[1907],"RevocationRequest":[1887],"RevocationRequestData":[1881],"SafeMath":[1484],"Signature":[1778],"Strings":[306],"Structures":[2671],"TokenManager":[6040],"Version":[6130]},"id":6041,"nodeType":"SourceUnit","nodes":[{"id":5539,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"0:23:31"},{"absolutePath":"contracts/modules/BurnDAI.sol","file":"./BurnDAI.sol","id":5540,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6041,"sourceUnit":3203,"src":"25:23:31","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":5541,"name":"BurnDAI","nameLocations":["84:7:31"],"nodeType":"IdentifierPath","referencedDeclaration":3202,"src":"84:7:31"},"id":5542,"nodeType":"InheritanceSpecifier","src":"84:7:31"}],"canonicalName":"TokenManager","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":6040,"linearizedBaseContracts":[6040,3202,3293,4090,3857,6130],"name":"TokenManager","nameLocation":"68:12:31","nodeType":"ContractDefinition","nodes":[{"body":{"id":5581,"nodeType":"Block","src":"197:284:31","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"id":5554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5550,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5545,"src":"211:7:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":5551,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"222:10:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":5552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"233:6:31","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2525,"src":"222:17:31","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2525_$","typeString":"type(enum Structures.Tokens)"}},"id":5553,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"240:3:31","memberName":"DAI","nodeType":"MemberAccess","referencedDeclaration":2524,"src":"222:21:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"src":"211:32:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5562,"nodeType":"IfStatement","src":"207:114:31","trueBody":{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":5556,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"285:8:31","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":5557,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"294:15:31","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2545,"src":"285:24:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5555,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"264:20:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2419_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":5558,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"264:46:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2419","typeString":"contract IMecenateFeedFactory"}},"id":5559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"311:8:31","memberName":"daiToken","nodeType":"MemberAccess","referencedDeclaration":2386,"src":"264:55:31","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":5560,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"264:57:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":5549,"id":5561,"nodeType":"Return","src":"257:64:31"}},{"condition":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"id":5567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5563,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5545,"src":"335:7:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":5564,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"346:10:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":5565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"357:6:31","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2525,"src":"346:17:31","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2525_$","typeString":"type(enum Structures.Tokens)"}},"id":5566,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"364:4:31","memberName":"MUSE","nodeType":"MemberAccess","referencedDeclaration":2523,"src":"346:22:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"src":"335:33:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5575,"nodeType":"IfStatement","src":"331:116:31","trueBody":{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":5569,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"410:8:31","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":5570,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"419:15:31","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2545,"src":"410:24:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5568,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"389:20:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2419_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":5571,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"389:46:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2419","typeString":"contract IMecenateFeedFactory"}},"id":5572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"436:9:31","memberName":"museToken","nodeType":"MemberAccess","referencedDeclaration":2376,"src":"389:56:31","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":5573,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"389:58:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":5549,"id":5574,"nodeType":"Return","src":"382:65:31"}},{"expression":{"arguments":[{"hexValue":"30","id":5578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"472:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5577,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"464:7:31","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5576,"name":"address","nodeType":"ElementaryTypeName","src":"464:7:31","typeDescriptions":{}}},"id":5579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"464:10:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":5549,"id":5580,"nodeType":"Return","src":"457:17:31"}]},"id":5582,"implemented":true,"kind":"function","modifiers":[],"name":"_getTokenAddress","nameLocation":"107:16:31","nodeType":"FunctionDefinition","parameters":{"id":5546,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5545,"mutability":"mutable","name":"tokenID","nameLocation":"151:7:31","nodeType":"VariableDeclaration","scope":5582,"src":"133:25:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"typeName":{"id":5544,"nodeType":"UserDefinedTypeName","pathNode":{"id":5543,"name":"Structures.Tokens","nameLocations":["133:10:31","144:6:31"],"nodeType":"IdentifierPath","referencedDeclaration":2525,"src":"133:17:31"},"referencedDeclaration":2525,"src":"133:17:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"visibility":"internal"}],"src":"123:41:31"},"returnParameters":{"id":5549,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5548,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5582,"src":"188:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5547,"name":"address","nodeType":"ElementaryTypeName","src":"188:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"187:9:31"},"scope":6040,"src":"98:383:31","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5613,"nodeType":"Block","src":"632:193:31","statements":[{"assignments":[5595],"declarations":[{"constant":false,"id":5595,"mutability":"mutable","name":"tokenAddress","nameLocation":"650:12:31","nodeType":"VariableDeclaration","scope":5613,"src":"642:20:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5594,"name":"address","nodeType":"ElementaryTypeName","src":"642:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":5599,"initialValue":{"arguments":[{"id":5597,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5585,"src":"682:7:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}],"id":5596,"name":"_getTokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5582,"src":"665:16:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_enum$_Tokens_$2525_$returns$_t_address_$","typeString":"function (enum Structures.Tokens) view returns (address)"}},"id":5598,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"665:25:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"642:48:31"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":5605,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5587,"src":"752:4:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5606,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5589,"src":"758:2:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":5602,"name":"tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5595,"src":"728:12:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5601,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"721:6:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$77_$","typeString":"type(contract IERC20)"}},"id":5603,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"721:20:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$77","typeString":"contract IERC20"}},"id":5604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"742:9:31","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":54,"src":"721:30:31","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":5607,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"721:40:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":5608,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5591,"src":"765:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"721:49:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"494e53554646494349454e545f414c4c4f57414e4345","id":5610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"784:24:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_766e240ea71a1fa1f50bcdafcabfc952771c7bce143ed2fb6cc99408373684b8","typeString":"literal_string \"INSUFFICIENT_ALLOWANCE\""},"value":"INSUFFICIENT_ALLOWANCE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_766e240ea71a1fa1f50bcdafcabfc952771c7bce143ed2fb6cc99408373684b8","typeString":"literal_string \"INSUFFICIENT_ALLOWANCE\""}],"id":5600,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"700:7:31","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5611,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"700:118:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5612,"nodeType":"ExpressionStatement","src":"700:118:31"}]},"id":5614,"implemented":true,"kind":"function","modifiers":[],"name":"_checkAllowance","nameLocation":"496:15:31","nodeType":"FunctionDefinition","parameters":{"id":5592,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5585,"mutability":"mutable","name":"tokenID","nameLocation":"539:7:31","nodeType":"VariableDeclaration","scope":5614,"src":"521:25:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"typeName":{"id":5584,"nodeType":"UserDefinedTypeName","pathNode":{"id":5583,"name":"Structures.Tokens","nameLocations":["521:10:31","532:6:31"],"nodeType":"IdentifierPath","referencedDeclaration":2525,"src":"521:17:31"},"referencedDeclaration":2525,"src":"521:17:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":5587,"mutability":"mutable","name":"from","nameLocation":"564:4:31","nodeType":"VariableDeclaration","scope":5614,"src":"556:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5586,"name":"address","nodeType":"ElementaryTypeName","src":"556:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5589,"mutability":"mutable","name":"to","nameLocation":"586:2:31","nodeType":"VariableDeclaration","scope":5614,"src":"578:10:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5588,"name":"address","nodeType":"ElementaryTypeName","src":"578:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5591,"mutability":"mutable","name":"value","nameLocation":"606:5:31","nodeType":"VariableDeclaration","scope":5614,"src":"598:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5590,"name":"uint256","nodeType":"ElementaryTypeName","src":"598:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"511:106:31"},"returnParameters":{"id":5593,"nodeType":"ParameterList","parameters":[],"src":"632:0:31"},"scope":6040,"src":"487:338:31","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5641,"nodeType":"Block","src":"884:223:31","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"id":5624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5620,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5617,"src":"915:7:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":5621,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"926:10:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":5622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"937:6:31","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2525,"src":"926:17:31","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2525_$","typeString":"type(enum Structures.Tokens)"}},"id":5623,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"944:4:31","memberName":"MUSE","nodeType":"MemberAccess","referencedDeclaration":2523,"src":"926:22:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"src":"915:33:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"id":5629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5625,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5617,"src":"968:7:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":5626,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"979:10:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":5627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"990:6:31","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2525,"src":"979:17:31","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2525_$","typeString":"type(enum Structures.Tokens)"}},"id":5628,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"997:3:31","memberName":"DAI","nodeType":"MemberAccess","referencedDeclaration":2524,"src":"979:21:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"src":"968:32:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"915:85:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"id":5635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5631,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5617,"src":"1020:7:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":5632,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"1031:10:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":5633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1042:6:31","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2525,"src":"1031:17:31","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2525_$","typeString":"type(enum Structures.Tokens)"}},"id":5634,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1049:3:31","memberName":"NaN","nodeType":"MemberAccess","referencedDeclaration":2522,"src":"1031:21:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"src":"1020:32:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"915:137:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"57524f4e475f544f4b454e","id":5637,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1066:13:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_c2a5ce41a94d934cf004fb0c5e3f69254251b50ba813e9f01e80a27cfee744e4","typeString":"literal_string \"WRONG_TOKEN\""},"value":"WRONG_TOKEN"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c2a5ce41a94d934cf004fb0c5e3f69254251b50ba813e9f01e80a27cfee744e4","typeString":"literal_string \"WRONG_TOKEN\""}],"id":5619,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"894:7:31","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5638,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"894:195:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5639,"nodeType":"ExpressionStatement","src":"894:195:31"},{"id":5640,"nodeType":"PlaceholderStatement","src":"1099:1:31"}]},"id":5642,"name":"onlyValidTokenID","nameLocation":"840:16:31","nodeType":"ModifierDefinition","parameters":{"id":5618,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5617,"mutability":"mutable","name":"tokenID","nameLocation":"875:7:31","nodeType":"VariableDeclaration","scope":5642,"src":"857:25:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"typeName":{"id":5616,"nodeType":"UserDefinedTypeName","pathNode":{"id":5615,"name":"Structures.Tokens","nameLocations":["857:10:31","868:6:31"],"nodeType":"IdentifierPath","referencedDeclaration":2525,"src":"857:17:31"},"referencedDeclaration":2525,"src":"857:17:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"visibility":"internal"}],"src":"856:27:31"},"src":"831:276:31","virtual":false,"visibility":"internal"},{"body":{"id":5662,"nodeType":"Block","src":"1216:117:31","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"id":5654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5650,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5645,"src":"1245:7:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":5651,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"1256:10:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":5652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1267:6:31","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2525,"src":"1256:17:31","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2525_$","typeString":"type(enum Structures.Tokens)"}},"id":5653,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1274:4:31","memberName":"MUSE","nodeType":"MemberAccess","referencedDeclaration":2523,"src":"1256:22:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"src":"1245:33:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"id":5659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5655,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5645,"src":"1294:7:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":5656,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"1305:10:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":5657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1316:6:31","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2525,"src":"1305:17:31","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2525_$","typeString":"type(enum Structures.Tokens)"}},"id":5658,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1323:3:31","memberName":"DAI","nodeType":"MemberAccess","referencedDeclaration":2524,"src":"1305:21:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"src":"1294:32:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1245:81:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5649,"id":5661,"nodeType":"Return","src":"1226:100:31"}]},"id":5663,"implemented":true,"kind":"function","modifiers":[],"name":"isValidTokenID","nameLocation":"1122:14:31","nodeType":"FunctionDefinition","parameters":{"id":5646,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5645,"mutability":"mutable","name":"tokenID","nameLocation":"1164:7:31","nodeType":"VariableDeclaration","scope":5663,"src":"1146:25:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"typeName":{"id":5644,"nodeType":"UserDefinedTypeName","pathNode":{"id":5643,"name":"Structures.Tokens","nameLocations":["1146:10:31","1157:6:31"],"nodeType":"IdentifierPath","referencedDeclaration":2525,"src":"1146:17:31"},"referencedDeclaration":2525,"src":"1146:17:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"visibility":"internal"}],"src":"1136:41:31"},"returnParameters":{"id":5649,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5648,"mutability":"mutable","name":"validity","nameLocation":"1206:8:31","nodeType":"VariableDeclaration","scope":5663,"src":"1201:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5647,"name":"bool","nodeType":"ElementaryTypeName","src":"1201:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1200:15:31"},"scope":6040,"src":"1113:220:31","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":5689,"nodeType":"Block","src":"1477:132:31","statements":[{"expression":{"arguments":[{"arguments":[{"id":5683,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5668,"src":"1551:2:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5684,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5670,"src":"1555:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"arguments":[{"id":5679,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5666,"src":"1532:7:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}],"id":5678,"name":"_getTokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5582,"src":"1515:16:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_enum$_Tokens_$2525_$returns$_t_address_$","typeString":"function (enum Structures.Tokens) view returns (address)"}},"id":5680,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1515:25:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5677,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"1508:6:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$77_$","typeString":"type(contract IERC20)"}},"id":5681,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1508:33:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$77","typeString":"contract IERC20"}},"id":5682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1542:8:31","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":44,"src":"1508:42:31","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":5685,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1508:53:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5452414e534645525f4641494c4544","id":5686,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1575:17:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_8bf8f0d780f13740660fe63233b17f96cb1813889e7dce4121e55b817b367b72","typeString":"literal_string \"TRANSFER_FAILED\""},"value":"TRANSFER_FAILED"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8bf8f0d780f13740660fe63233b17f96cb1813889e7dce4121e55b817b367b72","typeString":"literal_string \"TRANSFER_FAILED\""}],"id":5676,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1487:7:31","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5687,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1487:115:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5688,"nodeType":"ExpressionStatement","src":"1487:115:31"}]},"id":5690,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":5673,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5666,"src":"1468:7:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}}],"id":5674,"kind":"modifierInvocation","modifierName":{"id":5672,"name":"onlyValidTokenID","nameLocations":["1451:16:31"],"nodeType":"IdentifierPath","referencedDeclaration":5642,"src":"1451:16:31"},"nodeType":"ModifierInvocation","src":"1451:25:31"}],"name":"_transfer","nameLocation":"1348:9:31","nodeType":"FunctionDefinition","parameters":{"id":5671,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5666,"mutability":"mutable","name":"tokenID","nameLocation":"1385:7:31","nodeType":"VariableDeclaration","scope":5690,"src":"1367:25:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"typeName":{"id":5665,"nodeType":"UserDefinedTypeName","pathNode":{"id":5664,"name":"Structures.Tokens","nameLocations":["1367:10:31","1378:6:31"],"nodeType":"IdentifierPath","referencedDeclaration":2525,"src":"1367:17:31"},"referencedDeclaration":2525,"src":"1367:17:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":5668,"mutability":"mutable","name":"to","nameLocation":"1410:2:31","nodeType":"VariableDeclaration","scope":5690,"src":"1402:10:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5667,"name":"address","nodeType":"ElementaryTypeName","src":"1402:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5670,"mutability":"mutable","name":"value","nameLocation":"1430:5:31","nodeType":"VariableDeclaration","scope":5690,"src":"1422:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5669,"name":"uint256","nodeType":"ElementaryTypeName","src":"1422:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1357:84:31"},"returnParameters":{"id":5675,"nodeType":"ParameterList","parameters":[],"src":"1477:0:31"},"scope":6040,"src":"1339:270:31","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5730,"nodeType":"Block","src":"1779:238:31","statements":[{"assignments":[5706],"declarations":[{"constant":false,"id":5706,"mutability":"mutable","name":"tokenAddress","nameLocation":"1797:12:31","nodeType":"VariableDeclaration","scope":5730,"src":"1789:20:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5705,"name":"address","nodeType":"ElementaryTypeName","src":"1789:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":5710,"initialValue":{"arguments":[{"id":5708,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5693,"src":"1829:7:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}],"id":5707,"name":"_getTokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5582,"src":"1812:16:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_enum$_Tokens_$2525_$returns$_t_address_$","typeString":"function (enum Structures.Tokens) view returns (address)"}},"id":5709,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1812:25:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1789:48:31"},{"expression":{"arguments":[{"id":5712,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5693,"src":"1863:7:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},{"id":5713,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5695,"src":"1872:4:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5714,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5697,"src":"1878:2:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5715,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5699,"src":"1882:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5711,"name":"_checkAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5614,"src":"1847:15:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_enum$_Tokens_$2525_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (enum Structures.Tokens,address,address,uint256) view"}},"id":5716,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1847:41:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5717,"nodeType":"ExpressionStatement","src":"1847:41:31"},{"expression":{"arguments":[{"arguments":[{"id":5723,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5695,"src":"1953:4:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5724,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5697,"src":"1959:2:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5725,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5699,"src":"1963:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5720,"name":"tokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5706,"src":"1926:12:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5719,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"1919:6:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$77_$","typeString":"type(contract IERC20)"}},"id":5721,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1919:20:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$77","typeString":"contract IERC20"}},"id":5722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1940:12:31","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":76,"src":"1919:33:31","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":5726,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1919:50:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5452414e534645525f4641494c4544","id":5727,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1983:17:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_8bf8f0d780f13740660fe63233b17f96cb1813889e7dce4121e55b817b367b72","typeString":"literal_string \"TRANSFER_FAILED\""},"value":"TRANSFER_FAILED"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8bf8f0d780f13740660fe63233b17f96cb1813889e7dce4121e55b817b367b72","typeString":"literal_string \"TRANSFER_FAILED\""}],"id":5718,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1898:7:31","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5728,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1898:112:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5729,"nodeType":"ExpressionStatement","src":"1898:112:31"}]},"id":5731,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":5702,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5693,"src":"1770:7:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}}],"id":5703,"kind":"modifierInvocation","modifierName":{"id":5701,"name":"onlyValidTokenID","nameLocations":["1753:16:31"],"nodeType":"IdentifierPath","referencedDeclaration":5642,"src":"1753:16:31"},"nodeType":"ModifierInvocation","src":"1753:25:31"}],"name":"_transferFrom","nameLocation":"1624:13:31","nodeType":"FunctionDefinition","parameters":{"id":5700,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5693,"mutability":"mutable","name":"tokenID","nameLocation":"1665:7:31","nodeType":"VariableDeclaration","scope":5731,"src":"1647:25:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"typeName":{"id":5692,"nodeType":"UserDefinedTypeName","pathNode":{"id":5691,"name":"Structures.Tokens","nameLocations":["1647:10:31","1658:6:31"],"nodeType":"IdentifierPath","referencedDeclaration":2525,"src":"1647:17:31"},"referencedDeclaration":2525,"src":"1647:17:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":5695,"mutability":"mutable","name":"from","nameLocation":"1690:4:31","nodeType":"VariableDeclaration","scope":5731,"src":"1682:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5694,"name":"address","nodeType":"ElementaryTypeName","src":"1682:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5697,"mutability":"mutable","name":"to","nameLocation":"1712:2:31","nodeType":"VariableDeclaration","scope":5731,"src":"1704:10:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5696,"name":"address","nodeType":"ElementaryTypeName","src":"1704:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5699,"mutability":"mutable","name":"value","nameLocation":"1732:5:31","nodeType":"VariableDeclaration","scope":5731,"src":"1724:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5698,"name":"uint256","nodeType":"ElementaryTypeName","src":"1724:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1637:106:31"},"returnParameters":{"id":5704,"nodeType":"ParameterList","parameters":[],"src":"1779:0:31"},"scope":6040,"src":"1615:402:31","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5829,"nodeType":"Block","src":"2187:756:31","statements":[{"assignments":[5747],"declarations":[{"constant":false,"id":5747,"mutability":"mutable","name":"burnEnabled","nameLocation":"2202:11:31","nodeType":"VariableDeclaration","scope":5829,"src":"2197:16:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5746,"name":"bool","nodeType":"ElementaryTypeName","src":"2197:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":5754,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":5749,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"2237:8:31","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":5750,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2246:15:31","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2545,"src":"2237:24:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5748,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"2216:20:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2419_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":5751,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2216:46:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2419","typeString":"contract IMecenateFeedFactory"}},"id":5752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2276:11:31","memberName":"burnEnabled","nodeType":"MemberAccess","referencedDeclaration":2403,"src":"2216:71:31","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_bool_$","typeString":"function () view external returns (bool)"}},"id":5753,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2216:73:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"2197:92:31"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5755,"name":"burnEnabled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5747,"src":"2304:11:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"66616c7365","id":5756,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2319:5:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2304:20:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5825,"nodeType":"Block","src":"2622:293:31","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"id":5796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5792,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5734,"src":"2640:7:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":5793,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"2651:10:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":5794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2662:6:31","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2525,"src":"2651:17:31","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2525_$","typeString":"type(enum Structures.Tokens)"}},"id":5795,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2669:3:31","memberName":"DAI","nodeType":"MemberAccess","referencedDeclaration":2524,"src":"2651:21:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"src":"2640:32:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"id":5806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5802,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5734,"src":"2732:7:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":5803,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"2743:10:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":5804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2754:6:31","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2525,"src":"2743:17:31","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2525_$","typeString":"type(enum Structures.Tokens)"}},"id":5805,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2761:4:31","memberName":"MUSE","nodeType":"MemberAccess","referencedDeclaration":2523,"src":"2743:22:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"src":"2732:33:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"id":5816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5812,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5734,"src":"2822:7:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":5813,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"2833:10:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":5814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2844:6:31","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2525,"src":"2833:17:31","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2525_$","typeString":"type(enum Structures.Tokens)"}},"id":5815,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2851:3:31","memberName":"NaN","nodeType":"MemberAccess","referencedDeclaration":2522,"src":"2833:21:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"src":"2822:32:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5822,"nodeType":"IfStatement","src":"2818:87:31","trueBody":{"id":5821,"nodeType":"Block","src":"2856:49:31","statements":[{"expression":{"arguments":[{"id":5818,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5738,"src":"2884:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5817,"name":"_burnWeth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3093,"src":"2874:9:31","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) returns (bool)"}},"id":5819,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2874:16:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5820,"nodeType":"ExpressionStatement","src":"2874:16:31"}]}},"id":5823,"nodeType":"IfStatement","src":"2728:177:31","trueBody":{"id":5811,"nodeType":"Block","src":"2767:45:31","statements":[{"expression":{"arguments":[{"id":5808,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5738,"src":"2791:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5807,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[5830,3231],"referencedDeclaration":3231,"src":"2785:5:31","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) returns (bool)"}},"id":5809,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2785:12:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5810,"nodeType":"ExpressionStatement","src":"2785:12:31"}]}},"id":5824,"nodeType":"IfStatement","src":"2636:269:31","trueBody":{"id":5801,"nodeType":"Block","src":"2674:48:31","statements":[{"expression":{"arguments":[{"id":5798,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5738,"src":"2701:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5797,"name":"_burnDai","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3003,"src":"2692:8:31","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) returns (bool)"}},"id":5799,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2692:15:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5800,"nodeType":"ExpressionStatement","src":"2692:15:31"}]}}]},"id":5826,"nodeType":"IfStatement","src":"2300:615:31","trueBody":{"id":5791,"nodeType":"Block","src":"2326:290:31","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"id":5762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5758,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5734,"src":"2344:7:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":5759,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"2355:10:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":5760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2366:6:31","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2525,"src":"2355:17:31","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2525_$","typeString":"type(enum Structures.Tokens)"}},"id":5761,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2373:3:31","memberName":"NaN","nodeType":"MemberAccess","referencedDeclaration":2522,"src":"2355:21:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"src":"2344:32:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5789,"nodeType":"Block","src":"2524:82:31","statements":[{"expression":{"arguments":[{"id":5784,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5734,"src":"2565:7:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},{"id":5785,"name":"_receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5736,"src":"2574:9:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5786,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5738,"src":"2585:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5781,"name":"TokenManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6040,"src":"2542:12:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TokenManager_$6040_$","typeString":"type(contract TokenManager)"}},"id":5783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2555:9:31","memberName":"_transfer","nodeType":"MemberAccess","referencedDeclaration":5690,"src":"2542:22:31","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_Tokens_$2525_$_t_address_$_t_uint256_$returns$__$","typeString":"function (enum Structures.Tokens,address,uint256)"}},"id":5787,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2542:49:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5788,"nodeType":"ExpressionStatement","src":"2542:49:31"}]},"id":5790,"nodeType":"IfStatement","src":"2340:266:31","trueBody":{"id":5780,"nodeType":"Block","src":"2378:140:31","statements":[{"assignments":[5764,null],"declarations":[{"constant":false,"id":5764,"mutability":"mutable","name":"result","nameLocation":"2402:6:31","nodeType":"VariableDeclaration","scope":5780,"src":"2397:11:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5763,"name":"bool","nodeType":"ElementaryTypeName","src":"2397:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":5774,"initialValue":{"arguments":[{"hexValue":"","id":5772,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2452:2:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"arguments":[{"id":5767,"name":"_receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5736,"src":"2422:9:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5766,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2414:8:31","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":5765,"name":"address","nodeType":"ElementaryTypeName","src":"2414:8:31","stateMutability":"payable","typeDescriptions":{}}},"id":5768,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2414:18:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":5769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2433:4:31","memberName":"call","nodeType":"MemberAccess","src":"2414:23:31","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":5771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":5770,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5738,"src":"2445:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2414:37:31","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":5773,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2414:41:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2396:59:31"},{"expression":{"arguments":[{"id":5776,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5764,"src":"2481:6:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"43414c4c5f4641494c4544","id":5777,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2489:13:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_f3432607971be3e819458f2225636489dcaafd232f467570b81899b0f48540f3","typeString":"literal_string \"CALL_FAILED\""},"value":"CALL_FAILED"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f3432607971be3e819458f2225636489dcaafd232f467570b81899b0f48540f3","typeString":"literal_string \"CALL_FAILED\""}],"id":5775,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2473:7:31","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5778,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2473:30:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5779,"nodeType":"ExpressionStatement","src":"2473:30:31"}]}}]}},{"expression":{"hexValue":"74727565","id":5827,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2932:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":5745,"id":5828,"nodeType":"Return","src":"2925:11:31"}]},"id":5830,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":5741,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5734,"src":"2155:7:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}}],"id":5742,"kind":"modifierInvocation","modifierName":{"id":5740,"name":"onlyValidTokenID","nameLocations":["2138:16:31"],"nodeType":"IdentifierPath","referencedDeclaration":5642,"src":"2138:16:31"},"nodeType":"ModifierInvocation","src":"2138:25:31"}],"name":"_burn","nameLocation":"2032:5:31","nodeType":"FunctionDefinition","parameters":{"id":5739,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5734,"mutability":"mutable","name":"tokenID","nameLocation":"2065:7:31","nodeType":"VariableDeclaration","scope":5830,"src":"2047:25:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"typeName":{"id":5733,"nodeType":"UserDefinedTypeName","pathNode":{"id":5732,"name":"Structures.Tokens","nameLocations":["2047:10:31","2058:6:31"],"nodeType":"IdentifierPath","referencedDeclaration":2525,"src":"2047:17:31"},"referencedDeclaration":2525,"src":"2047:17:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":5736,"mutability":"mutable","name":"_receiver","nameLocation":"2090:9:31","nodeType":"VariableDeclaration","scope":5830,"src":"2082:17:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5735,"name":"address","nodeType":"ElementaryTypeName","src":"2082:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5738,"mutability":"mutable","name":"value","nameLocation":"2117:5:31","nodeType":"VariableDeclaration","scope":5830,"src":"2109:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5737,"name":"uint256","nodeType":"ElementaryTypeName","src":"2109:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2037:91:31"},"returnParameters":{"id":5745,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5744,"mutability":"mutable","name":"success","nameLocation":"2178:7:31","nodeType":"VariableDeclaration","scope":5830,"src":"2173:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5743,"name":"bool","nodeType":"ElementaryTypeName","src":"2173:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2172:14:31"},"scope":6040,"src":"2023:920:31","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5887,"nodeType":"Block","src":"3089:406:31","statements":[{"assignments":[5844],"declarations":[{"constant":false,"id":5844,"mutability":"mutable","name":"treasury","nameLocation":"3107:8:31","nodeType":"VariableDeclaration","scope":5887,"src":"3099:16:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5843,"name":"address","nodeType":"ElementaryTypeName","src":"3099:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":5851,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":5846,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"3139:8:31","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":5847,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3148:15:31","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2545,"src":"3139:24:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5845,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"3118:20:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2419_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":5848,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3118:46:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2419","typeString":"contract IMecenateFeedFactory"}},"id":5849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3178:16:31","memberName":"treasuryContract","nodeType":"MemberAccess","referencedDeclaration":2353,"src":"3118:76:31","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_payable_$","typeString":"function () view external returns (address payable)"}},"id":5850,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3118:78:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"VariableDeclarationStatement","src":"3099:97:31"},{"condition":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"id":5856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5852,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5833,"src":"3211:7:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":5853,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"3222:10:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":5854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3233:6:31","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2525,"src":"3222:17:31","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2525_$","typeString":"type(enum Structures.Tokens)"}},"id":5855,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3240:3:31","memberName":"DAI","nodeType":"MemberAccess","referencedDeclaration":2524,"src":"3222:21:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"src":"3211:32:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"id":5876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5872,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5833,"src":"3398:7:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":5873,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"3409:10:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":5874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3420:6:31","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2525,"src":"3409:17:31","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2525_$","typeString":"type(enum Structures.Tokens)"}},"id":5875,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3427:4:31","memberName":"MUSE","nodeType":"MemberAccess","referencedDeclaration":2523,"src":"3409:22:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"src":"3398:33:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5885,"nodeType":"IfStatement","src":"3394:95:31","trueBody":{"id":5884,"nodeType":"Block","src":"3433:56:31","statements":[{"expression":{"arguments":[{"id":5880,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5835,"src":"3466:4:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5881,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5837,"src":"3472:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5877,"name":"BurnMUSE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3293,"src":"3447:8:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_BurnMUSE_$3293_$","typeString":"type(contract BurnMUSE)"}},"id":5879,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3456:9:31","memberName":"_burnFrom","nodeType":"MemberAccess","referencedDeclaration":3264,"src":"3447:18:31","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) returns (bool)"}},"id":5882,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3447:31:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5883,"nodeType":"ExpressionStatement","src":"3447:31:31"}]}},"id":5886,"nodeType":"IfStatement","src":"3207:282:31","trueBody":{"id":5871,"nodeType":"Block","src":"3245:143:31","statements":[{"expression":{"arguments":[{"id":5866,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5835,"src":"3355:4:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5867,"name":"treasury","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5844,"src":"3361:8:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5868,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5837,"src":"3371:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":5859,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"3287:8:31","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":5860,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3296:15:31","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2545,"src":"3287:24:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5858,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"3266:20:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2419_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":5861,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3266:46:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2419","typeString":"contract IMecenateFeedFactory"}},"id":5862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3313:8:31","memberName":"daiToken","nodeType":"MemberAccess","referencedDeclaration":2386,"src":"3266:55:31","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":5863,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3266:57:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5857,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"3259:6:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$77_$","typeString":"type(contract IERC20)"}},"id":5864,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3259:65:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$77","typeString":"contract IERC20"}},"id":5865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3342:12:31","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":76,"src":"3259:95:31","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":5869,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3259:118:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5870,"nodeType":"ExpressionStatement","src":"3259:118:31"}]}}]},"id":5888,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":5840,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5833,"src":"3080:7:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}}],"id":5841,"kind":"modifierInvocation","modifierName":{"id":5839,"name":"onlyValidTokenID","nameLocations":["3063:16:31"],"nodeType":"IdentifierPath","referencedDeclaration":5642,"src":"3063:16:31"},"nodeType":"ModifierInvocation","src":"3063:25:31"}],"name":"_burnFrom","nameLocation":"2958:9:31","nodeType":"FunctionDefinition","parameters":{"id":5838,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5833,"mutability":"mutable","name":"tokenID","nameLocation":"2995:7:31","nodeType":"VariableDeclaration","scope":5888,"src":"2977:25:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"typeName":{"id":5832,"nodeType":"UserDefinedTypeName","pathNode":{"id":5831,"name":"Structures.Tokens","nameLocations":["2977:10:31","2988:6:31"],"nodeType":"IdentifierPath","referencedDeclaration":2525,"src":"2977:17:31"},"referencedDeclaration":2525,"src":"2977:17:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":5835,"mutability":"mutable","name":"from","nameLocation":"3020:4:31","nodeType":"VariableDeclaration","scope":5888,"src":"3012:12:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5834,"name":"address","nodeType":"ElementaryTypeName","src":"3012:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5837,"mutability":"mutable","name":"value","nameLocation":"3042:5:31","nodeType":"VariableDeclaration","scope":5888,"src":"3034:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5836,"name":"uint256","nodeType":"ElementaryTypeName","src":"3034:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2967:86:31"},"returnParameters":{"id":5842,"nodeType":"ParameterList","parameters":[],"src":"3089:0:31"},"scope":6040,"src":"2949:546:31","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5969,"nodeType":"Block","src":"3643:777:31","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"id":5905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5901,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5891,"src":"3657:7:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":5902,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"3668:10:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":5903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3679:6:31","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2525,"src":"3668:17:31","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2525_$","typeString":"type(enum Structures.Tokens)"}},"id":5904,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3686:3:31","memberName":"DAI","nodeType":"MemberAccess","referencedDeclaration":2524,"src":"3668:21:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"src":"3657:32:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"id":5927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5923,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5891,"src":"3926:7:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":5924,"name":"Structures","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2671,"src":"3937:10:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Structures_$2671_$","typeString":"type(library Structures)"}},"id":5925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3948:6:31","memberName":"Tokens","nodeType":"MemberAccess","referencedDeclaration":2525,"src":"3937:17:31","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Tokens_$2525_$","typeString":"type(enum Structures.Tokens)"}},"id":5926,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3955:4:31","memberName":"MUSE","nodeType":"MemberAccess","referencedDeclaration":2523,"src":"3937:22:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"src":"3926:33:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5967,"nodeType":"IfStatement","src":"3922:492:31","trueBody":{"id":5966,"nodeType":"Block","src":"3961:453:31","statements":[{"assignments":[5929],"declarations":[{"constant":false,"id":5929,"mutability":"mutable","name":"currentAllowance","nameLocation":"3983:16:31","nodeType":"VariableDeclaration","scope":5966,"src":"3975:24:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5928,"name":"uint256","nodeType":"ElementaryTypeName","src":"3975:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5943,"initialValue":{"arguments":[{"expression":{"id":5939,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4108:3:31","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4112:6:31","memberName":"sender","nodeType":"MemberAccess","src":"4108:10:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5941,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5893,"src":"4120:7:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":5932,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"4046:8:31","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":5933,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4055:15:31","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2545,"src":"4046:24:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5931,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"4025:20:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2419_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":5934,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4025:46:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2419","typeString":"contract IMecenateFeedFactory"}},"id":5935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4072:9:31","memberName":"museToken","nodeType":"MemberAccess","referencedDeclaration":2376,"src":"4025:56:31","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":5936,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4025:58:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5930,"name":"IMUSE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2246,"src":"4002:5:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMUSE_$2246_$","typeString":"type(contract IMUSE)"}},"id":5937,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4002:95:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMUSE_$2246","typeString":"contract IMUSE"}},"id":5938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4098:9:31","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":54,"src":"4002:105:31","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":5942,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4002:126:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3975:153:31"},{"assignments":[5945],"declarations":[{"constant":false,"id":5945,"mutability":"mutable","name":"newAllowance","nameLocation":"4151:12:31","nodeType":"VariableDeclaration","scope":5966,"src":"4143:20:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5944,"name":"uint256","nodeType":"ElementaryTypeName","src":"4143:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5949,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5946,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5929,"src":"4166:16:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":5947,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5895,"src":"4185:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4166:24:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4143:47:31"},{"expression":{"arguments":[{"arguments":[{"id":5960,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5893,"src":"4333:7:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5961,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5945,"src":"4342:12:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":5953,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"4256:8:31","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":5954,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4265:15:31","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2545,"src":"4256:24:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5952,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"4235:20:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2419_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":5955,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4235:46:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2419","typeString":"contract IMecenateFeedFactory"}},"id":5956,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4282:8:31","memberName":"daiToken","nodeType":"MemberAccess","referencedDeclaration":2386,"src":"4235:55:31","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":5957,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4235:57:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5951,"name":"IMUSE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2246,"src":"4229:5:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMUSE_$2246_$","typeString":"type(contract IMUSE)"}},"id":5958,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4229:64:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMUSE_$2246","typeString":"contract IMUSE"}},"id":5959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4315:17:31","memberName":"increaseAllowance","nodeType":"MemberAccess","referencedDeclaration":2226,"src":"4229:103:31","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":5962,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4229:126:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"415050524f56455f4641494c4544","id":5963,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4373:16:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_cd400c5237ae346977ee020ef8d0d26a880c07edf7eba69a8848f0d31e9a88f2","typeString":"literal_string \"APPROVE_FAILED\""},"value":"APPROVE_FAILED"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cd400c5237ae346977ee020ef8d0d26a880c07edf7eba69a8848f0d31e9a88f2","typeString":"literal_string \"APPROVE_FAILED\""}],"id":5950,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4204:7:31","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5964,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4204:199:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5965,"nodeType":"ExpressionStatement","src":"4204:199:31"}]}},"id":5968,"nodeType":"IfStatement","src":"3653:761:31","trueBody":{"id":5922,"nodeType":"Block","src":"3691:225:31","statements":[{"expression":{"arguments":[{"arguments":[{"id":5916,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5893,"src":"3842:7:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5917,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5895,"src":"3851:5:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":5909,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3529,"src":"3779:8:31","typeDescriptions":{"typeIdentifier":"t_struct$_FeedSettings_$2550_storage","typeString":"struct Structures.FeedSettings storage ref"}},"id":5910,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3788:15:31","memberName":"factoryContract","nodeType":"MemberAccess","referencedDeclaration":2545,"src":"3779:24:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5908,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"3758:20:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2419_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":5911,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3758:46:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2419","typeString":"contract IMecenateFeedFactory"}},"id":5912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3805:8:31","memberName":"daiToken","nodeType":"MemberAccess","referencedDeclaration":2386,"src":"3758:55:31","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":5913,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3758:57:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5907,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"3730:6:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$77_$","typeString":"type(contract IERC20)"}},"id":5914,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3730:103:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$77","typeString":"contract IERC20"}},"id":5915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3834:7:31","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":64,"src":"3730:111:31","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":5918,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3730:127:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"415050524f56455f4641494c4544","id":5919,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3875:16:31","typeDescriptions":{"typeIdentifier":"t_stringliteral_cd400c5237ae346977ee020ef8d0d26a880c07edf7eba69a8848f0d31e9a88f2","typeString":"literal_string \"APPROVE_FAILED\""},"value":"APPROVE_FAILED"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cd400c5237ae346977ee020ef8d0d26a880c07edf7eba69a8848f0d31e9a88f2","typeString":"literal_string \"APPROVE_FAILED\""}],"id":5906,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3705:7:31","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":5920,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3705:200:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5921,"nodeType":"ExpressionStatement","src":"3705:200:31"}]}}]},"id":5970,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":5898,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5891,"src":"3634:7:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}}],"id":5899,"kind":"modifierInvocation","modifierName":{"id":5897,"name":"onlyValidTokenID","nameLocations":["3617:16:31"],"nodeType":"IdentifierPath","referencedDeclaration":5642,"src":"3617:16:31"},"nodeType":"ModifierInvocation","src":"3617:25:31"}],"name":"_approve","nameLocation":"3510:8:31","nodeType":"FunctionDefinition","parameters":{"id":5896,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5891,"mutability":"mutable","name":"tokenID","nameLocation":"3546:7:31","nodeType":"VariableDeclaration","scope":5970,"src":"3528:25:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"typeName":{"id":5890,"nodeType":"UserDefinedTypeName","pathNode":{"id":5889,"name":"Structures.Tokens","nameLocations":["3528:10:31","3539:6:31"],"nodeType":"IdentifierPath","referencedDeclaration":2525,"src":"3528:17:31"},"referencedDeclaration":2525,"src":"3528:17:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":5893,"mutability":"mutable","name":"spender","nameLocation":"3571:7:31","nodeType":"VariableDeclaration","scope":5970,"src":"3563:15:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5892,"name":"address","nodeType":"ElementaryTypeName","src":"3563:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5895,"mutability":"mutable","name":"value","nameLocation":"3596:5:31","nodeType":"VariableDeclaration","scope":5970,"src":"3588:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5894,"name":"uint256","nodeType":"ElementaryTypeName","src":"3588:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3518:89:31"},"returnParameters":{"id":5900,"nodeType":"ParameterList","parameters":[],"src":"3643:0:31"},"scope":6040,"src":"3501:919:31","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5989,"nodeType":"Block","src":"4552:71:31","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"arguments":[{"id":5983,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5973,"src":"4593:7:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}],"id":5982,"name":"_getTokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5582,"src":"4576:16:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_enum$_Tokens_$2525_$returns$_t_address_$","typeString":"function (enum Structures.Tokens) view returns (address)"}},"id":5984,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4576:25:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5981,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"4569:6:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$77_$","typeString":"type(contract IERC20)"}},"id":5985,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4569:33:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$77","typeString":"contract IERC20"}},"id":5986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4603:11:31","memberName":"totalSupply","nodeType":"MemberAccess","referencedDeclaration":26,"src":"4569:45:31","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":5987,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4569:47:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5980,"id":5988,"nodeType":"Return","src":"4562:54:31"}]},"id":5990,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":5976,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5973,"src":"4519:7:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}}],"id":5977,"kind":"modifierInvocation","modifierName":{"id":5975,"name":"onlyValidTokenID","nameLocations":["4502:16:31"],"nodeType":"IdentifierPath","referencedDeclaration":5642,"src":"4502:16:31"},"nodeType":"ModifierInvocation","src":"4502:25:31"}],"name":"totalSupply","nameLocation":"4435:11:31","nodeType":"FunctionDefinition","parameters":{"id":5974,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5973,"mutability":"mutable","name":"tokenID","nameLocation":"4474:7:31","nodeType":"VariableDeclaration","scope":5990,"src":"4456:25:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"typeName":{"id":5972,"nodeType":"UserDefinedTypeName","pathNode":{"id":5971,"name":"Structures.Tokens","nameLocations":["4456:10:31","4467:6:31"],"nodeType":"IdentifierPath","referencedDeclaration":2525,"src":"4456:17:31"},"referencedDeclaration":2525,"src":"4456:17:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"visibility":"internal"}],"src":"4446:41:31"},"returnParameters":{"id":5980,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5979,"mutability":"mutable","name":"value","nameLocation":"4545:5:31","nodeType":"VariableDeclaration","scope":5990,"src":"4537:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5978,"name":"uint256","nodeType":"ElementaryTypeName","src":"4537:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4536:15:31"},"scope":6040,"src":"4426:197:31","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":6012,"nodeType":"Block","src":"4774:72:31","statements":[{"expression":{"arguments":[{"id":6009,"name":"who","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5995,"src":"4835:3:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"arguments":[{"id":6005,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5993,"src":"4815:7:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}],"id":6004,"name":"_getTokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5582,"src":"4798:16:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_enum$_Tokens_$2525_$returns$_t_address_$","typeString":"function (enum Structures.Tokens) view returns (address)"}},"id":6006,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4798:25:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6003,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"4791:6:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$77_$","typeString":"type(contract IERC20)"}},"id":6007,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4791:33:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$77","typeString":"contract IERC20"}},"id":6008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4825:9:31","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":34,"src":"4791:43:31","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":6010,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4791:48:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6002,"id":6011,"nodeType":"Return","src":"4784:55:31"}]},"id":6013,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":5998,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5993,"src":"4741:7:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}}],"id":5999,"kind":"modifierInvocation","modifierName":{"id":5997,"name":"onlyValidTokenID","nameLocations":["4724:16:31"],"nodeType":"IdentifierPath","referencedDeclaration":5642,"src":"4724:16:31"},"nodeType":"ModifierInvocation","src":"4724:25:31"}],"name":"balanceOf","nameLocation":"4638:9:31","nodeType":"FunctionDefinition","parameters":{"id":5996,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5993,"mutability":"mutable","name":"tokenID","nameLocation":"4675:7:31","nodeType":"VariableDeclaration","scope":6013,"src":"4657:25:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"typeName":{"id":5992,"nodeType":"UserDefinedTypeName","pathNode":{"id":5991,"name":"Structures.Tokens","nameLocations":["4657:10:31","4668:6:31"],"nodeType":"IdentifierPath","referencedDeclaration":2525,"src":"4657:17:31"},"referencedDeclaration":2525,"src":"4657:17:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":5995,"mutability":"mutable","name":"who","nameLocation":"4700:3:31","nodeType":"VariableDeclaration","scope":6013,"src":"4692:11:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5994,"name":"address","nodeType":"ElementaryTypeName","src":"4692:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4647:62:31"},"returnParameters":{"id":6002,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6001,"mutability":"mutable","name":"value","nameLocation":"4767:5:31","nodeType":"VariableDeclaration","scope":6013,"src":"4759:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6000,"name":"uint256","nodeType":"ElementaryTypeName","src":"4759:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4758:15:31"},"scope":6040,"src":"4629:217:31","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":6038,"nodeType":"Block","src":"5024:83:31","statements":[{"expression":{"arguments":[{"id":6034,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6018,"src":"5085:5:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6035,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6020,"src":"5092:7:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"arguments":[{"id":6030,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6016,"src":"5065:7:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}],"id":6029,"name":"_getTokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5582,"src":"5048:16:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_enum$_Tokens_$2525_$returns$_t_address_$","typeString":"function (enum Structures.Tokens) view returns (address)"}},"id":6031,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5048:25:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6028,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"5041:6:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$77_$","typeString":"type(contract IERC20)"}},"id":6032,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5041:33:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$77","typeString":"contract IERC20"}},"id":6033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5075:9:31","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":54,"src":"5041:43:31","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":6036,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5041:59:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":6027,"id":6037,"nodeType":"Return","src":"5034:66:31"}]},"id":6039,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":6023,"name":"tokenID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6016,"src":"4991:7:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}}],"id":6024,"kind":"modifierInvocation","modifierName":{"id":6022,"name":"onlyValidTokenID","nameLocations":["4974:16:31"],"nodeType":"IdentifierPath","referencedDeclaration":5642,"src":"4974:16:31"},"nodeType":"ModifierInvocation","src":"4974:25:31"}],"name":"allowance","nameLocation":"4861:9:31","nodeType":"FunctionDefinition","parameters":{"id":6021,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6016,"mutability":"mutable","name":"tokenID","nameLocation":"4898:7:31","nodeType":"VariableDeclaration","scope":6039,"src":"4880:25:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"},"typeName":{"id":6015,"nodeType":"UserDefinedTypeName","pathNode":{"id":6014,"name":"Structures.Tokens","nameLocations":["4880:10:31","4891:6:31"],"nodeType":"IdentifierPath","referencedDeclaration":2525,"src":"4880:17:31"},"referencedDeclaration":2525,"src":"4880:17:31","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$2525","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":6018,"mutability":"mutable","name":"owner","nameLocation":"4923:5:31","nodeType":"VariableDeclaration","scope":6039,"src":"4915:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6017,"name":"address","nodeType":"ElementaryTypeName","src":"4915:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6020,"mutability":"mutable","name":"spender","nameLocation":"4946:7:31","nodeType":"VariableDeclaration","scope":6039,"src":"4938:15:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6019,"name":"address","nodeType":"ElementaryTypeName","src":"4938:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4870:89:31"},"returnParameters":{"id":6027,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6026,"mutability":"mutable","name":"value","nameLocation":"5017:5:31","nodeType":"VariableDeclaration","scope":6039,"src":"5009:13:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6025,"name":"uint256","nodeType":"ElementaryTypeName","src":"5009:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5008:15:31"},"scope":6040,"src":"4852:255:31","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":6041,"src":"50:5059:31","usedErrors":[]}],"src":"0:5110:31"},"id":31},"contracts/modules/Version.sol":{"ast":{"absolutePath":"contracts/modules/Version.sol","exportedSymbols":{"Strings":[306],"Version":[6130]},"id":6131,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":6042,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"33:23:32"},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"@openzeppelin/contracts/utils/Strings.sol","id":6044,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6131,"sourceUnit":307,"src":"58:66:32","symbolAliases":[{"foreign":{"id":6043,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":306,"src":"66:7:32","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"Version","contractDependencies":[],"contractKind":"contract","documentation":{"id":6045,"nodeType":"StructuredDocumentation","src":"126:80:32","text":"@title Semver\n @notice A simple contract for managing contract versions."},"fullyImplemented":true,"id":6130,"linearizedBaseContracts":[6130],"name":"Version","nameLocation":"224:7:32","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":6047,"mutability":"immutable","name":"_major","nameLocation":"304:6:32","nodeType":"VariableDeclaration","scope":6130,"src":"278:32:32","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6046,"name":"uint256","nodeType":"ElementaryTypeName","src":"278:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":6049,"mutability":"immutable","name":"_minor","nameLocation":"383:6:32","nodeType":"VariableDeclaration","scope":6130,"src":"357:32:32","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6048,"name":"uint256","nodeType":"ElementaryTypeName","src":"357:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":6051,"mutability":"immutable","name":"_path","nameLocation":"462:5:32","nodeType":"VariableDeclaration","scope":6130,"src":"436:31:32","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6050,"name":"uint256","nodeType":"ElementaryTypeName","src":"436:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"body":{"id":6073,"nodeType":"Block","src":"703:78:32","statements":[{"expression":{"id":6063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6061,"name":"_major","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6047,"src":"713:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6062,"name":"major","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6054,"src":"722:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"713:14:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6064,"nodeType":"ExpressionStatement","src":"713:14:32"},{"expression":{"id":6067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6065,"name":"_minor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6049,"src":"737:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6066,"name":"minor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6056,"src":"746:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"737:14:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6068,"nodeType":"ExpressionStatement","src":"737:14:32"},{"expression":{"id":6071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6069,"name":"_path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6051,"src":"761:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6070,"name":"patch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6058,"src":"769:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"761:13:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6072,"nodeType":"ExpressionStatement","src":"761:13:32"}]},"documentation":{"id":6052,"nodeType":"StructuredDocumentation","src":"474:167:32","text":"@dev Create a new Semver instance.\n @param major Major version number.\n @param minor Minor version number.\n @param patch Patch version number."},"id":6074,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":6059,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6054,"mutability":"mutable","name":"major","nameLocation":"666:5:32","nodeType":"VariableDeclaration","scope":6074,"src":"658:13:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6053,"name":"uint256","nodeType":"ElementaryTypeName","src":"658:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6056,"mutability":"mutable","name":"minor","nameLocation":"681:5:32","nodeType":"VariableDeclaration","scope":6074,"src":"673:13:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6055,"name":"uint256","nodeType":"ElementaryTypeName","src":"673:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6058,"mutability":"mutable","name":"patch","nameLocation":"696:5:32","nodeType":"VariableDeclaration","scope":6074,"src":"688:13:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6057,"name":"uint256","nodeType":"ElementaryTypeName","src":"688:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"657:45:32"},"returnParameters":{"id":6060,"nodeType":"ParameterList","parameters":[],"src":"703:0:32"},"scope":6130,"src":"646:135:32","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6101,"nodeType":"Block","src":"955:295:32","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":6086,"name":"_major","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6047,"src":"1063:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6084,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":306,"src":"1046:7:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$306_$","typeString":"type(library Strings)"}},"id":6085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1054:8:32","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":136,"src":"1046:16:32","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":6087,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1046:24:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"2e","id":6088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1092:3:32","typeDescriptions":{"typeIdentifier":"t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf","typeString":"literal_string \".\""},"value":"."},{"arguments":[{"id":6091,"name":"_minor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6049,"src":"1134:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6089,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":306,"src":"1117:7:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$306_$","typeString":"type(library Strings)"}},"id":6090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1125:8:32","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":136,"src":"1117:16:32","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":6092,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1117:24:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"2e","id":6093,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1163:3:32","typeDescriptions":{"typeIdentifier":"t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf","typeString":"literal_string \".\""},"value":"."},{"arguments":[{"id":6096,"name":"_path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6051,"src":"1205:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6094,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":306,"src":"1188:7:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$306_$","typeString":"type(library Strings)"}},"id":6095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1196:8:32","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":136,"src":"1188:16:32","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":6097,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1188:23:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf","typeString":"literal_string \".\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf","typeString":"literal_string \".\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":6082,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1008:3:32","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":6083,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1012:12:32","memberName":"encodePacked","nodeType":"MemberAccess","src":"1008:16:32","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":6098,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:221:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":6081,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"984:6:32","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":6080,"name":"string","nodeType":"ElementaryTypeName","src":"984:6:32","typeDescriptions":{}}},"id":6099,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"984:259:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":6079,"id":6100,"nodeType":"Return","src":"965:278:32"}]},"documentation":{"id":6075,"nodeType":"StructuredDocumentation","src":"787:106:32","text":"@notice Returns the full semver contract version.\n @return Semver contract version as a string."},"functionSelector":"54fd4d50","id":6102,"implemented":true,"kind":"function","modifiers":[],"name":"version","nameLocation":"907:7:32","nodeType":"FunctionDefinition","parameters":{"id":6076,"nodeType":"ParameterList","parameters":[],"src":"914:2:32"},"returnParameters":{"id":6079,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6078,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6102,"src":"940:13:32","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":6077,"name":"string","nodeType":"ElementaryTypeName","src":"940:6:32","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"939:15:32"},"scope":6130,"src":"898:352:32","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":6128,"nodeType":"Block","src":"1314:295:32","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":6113,"name":"_major","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6047,"src":"1422:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6111,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":306,"src":"1405:7:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$306_$","typeString":"type(library Strings)"}},"id":6112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1413:8:32","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":136,"src":"1405:16:32","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":6114,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1405:24:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"2e","id":6115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1451:3:32","typeDescriptions":{"typeIdentifier":"t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf","typeString":"literal_string \".\""},"value":"."},{"arguments":[{"id":6118,"name":"_minor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6049,"src":"1493:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6116,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":306,"src":"1476:7:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$306_$","typeString":"type(library Strings)"}},"id":6117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1484:8:32","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":136,"src":"1476:16:32","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":6119,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1476:24:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"2e","id":6120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1522:3:32","typeDescriptions":{"typeIdentifier":"t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf","typeString":"literal_string \".\""},"value":"."},{"arguments":[{"id":6123,"name":"_path","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6051,"src":"1564:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6121,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":306,"src":"1547:7:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$306_$","typeString":"type(library Strings)"}},"id":6122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1555:8:32","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":136,"src":"1547:16:32","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":6124,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1547:23:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf","typeString":"literal_string \".\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf","typeString":"literal_string \".\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":6109,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1367:3:32","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":6110,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1371:12:32","memberName":"encodePacked","nodeType":"MemberAccess","src":"1367:16:32","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":6125,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1367:221:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":6108,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1343:6:32","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":6107,"name":"string","nodeType":"ElementaryTypeName","src":"1343:6:32","typeDescriptions":{}}},"id":6126,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1343:259:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":6106,"id":6127,"nodeType":"Return","src":"1324:278:32"}]},"id":6129,"implemented":true,"kind":"function","modifiers":[],"name":"_version","nameLocation":"1265:8:32","nodeType":"FunctionDefinition","parameters":{"id":6103,"nodeType":"ParameterList","parameters":[],"src":"1273:2:32"},"returnParameters":{"id":6106,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6105,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6129,"src":"1299:13:32","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":6104,"name":"string","nodeType":"ElementaryTypeName","src":"1299:6:32","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1298:15:32"},"scope":6130,"src":"1256:353:32","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":6131,"src":"206:1405:32","usedErrors":[]}],"src":"33:1579:32"},"id":32},"contracts/stats/MecenateStats.sol":{"ast":{"absolutePath":"contracts/stats/MecenateStats.sol","exportedSymbols":{"IMecenateBay":[2262],"IMecenateFeedFactory":[2419],"IMecenateTreasury":[2432],"IMecenateUsers":[2490],"MecenateStats":[6236],"Structures":[2671]},"id":6237,"nodeType":"SourceUnit","nodes":[{"id":6132,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"206:23:33"},{"absolutePath":"contracts/interfaces/IMecenateUsers.sol","file":"../interfaces/IMecenateUsers.sol","id":6133,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6237,"sourceUnit":2491,"src":"231:42:33","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IMecenateFeedFactory.sol","file":"../interfaces/IMecenateFeedFactory.sol","id":6134,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6237,"sourceUnit":2420,"src":"274:48:33","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IMecenateBay.sol","file":"../interfaces/IMecenateBay.sol","id":6135,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6237,"sourceUnit":2263,"src":"323:40:33","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IMecenateTreasury.sol","file":"../interfaces/IMecenateTreasury.sol","id":6136,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6237,"sourceUnit":2433,"src":"364:45:33","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"MecenateStats","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":6236,"linearizedBaseContracts":[6236],"name":"MecenateStats","nameLocation":"420:13:33","nodeType":"ContractDefinition","nodes":[{"canonicalName":"MecenateStats.Stats","id":6149,"members":[{"constant":false,"id":6138,"mutability":"mutable","name":"totalUsers","nameLocation":"471:10:33","nodeType":"VariableDeclaration","scope":6149,"src":"463:18:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6137,"name":"uint256","nodeType":"ElementaryTypeName","src":"463:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6140,"mutability":"mutable","name":"totalBayRequests","nameLocation":"499:16:33","nodeType":"VariableDeclaration","scope":6149,"src":"491:24:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6139,"name":"uint256","nodeType":"ElementaryTypeName","src":"491:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6142,"mutability":"mutable","name":"totalFeeds","nameLocation":"533:10:33","nodeType":"VariableDeclaration","scope":6149,"src":"525:18:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6141,"name":"uint256","nodeType":"ElementaryTypeName","src":"525:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6144,"mutability":"mutable","name":"globalFee","nameLocation":"561:9:33","nodeType":"VariableDeclaration","scope":6149,"src":"553:17:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6143,"name":"uint256","nodeType":"ElementaryTypeName","src":"553:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6146,"mutability":"mutable","name":"fixedFee","nameLocation":"588:8:33","nodeType":"VariableDeclaration","scope":6149,"src":"580:16:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6145,"name":"uint256","nodeType":"ElementaryTypeName","src":"580:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6148,"mutability":"mutable","name":"treasuryBalance","nameLocation":"614:15:33","nodeType":"VariableDeclaration","scope":6149,"src":"606:23:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6147,"name":"uint256","nodeType":"ElementaryTypeName","src":"606:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Stats","nameLocation":"447:5:33","nodeType":"StructDefinition","scope":6236,"src":"440:196:33","visibility":"public"},{"constant":false,"functionSelector":"139e3c54","id":6152,"mutability":"mutable","name":"mecenateUsers","nameLocation":"664:13:33","nodeType":"VariableDeclaration","scope":6236,"src":"642:35:33","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateUsers_$2490","typeString":"contract IMecenateUsers"},"typeName":{"id":6151,"nodeType":"UserDefinedTypeName","pathNode":{"id":6150,"name":"IMecenateUsers","nameLocations":["642:14:33"],"nodeType":"IdentifierPath","referencedDeclaration":2490,"src":"642:14:33"},"referencedDeclaration":2490,"src":"642:14:33","typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateUsers_$2490","typeString":"contract IMecenateUsers"}},"visibility":"public"},{"constant":false,"functionSelector":"77260151","id":6155,"mutability":"mutable","name":"mecenateFeedFactory","nameLocation":"711:19:33","nodeType":"VariableDeclaration","scope":6236,"src":"683:47:33","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2419","typeString":"contract IMecenateFeedFactory"},"typeName":{"id":6154,"nodeType":"UserDefinedTypeName","pathNode":{"id":6153,"name":"IMecenateFeedFactory","nameLocations":["683:20:33"],"nodeType":"IdentifierPath","referencedDeclaration":2419,"src":"683:20:33"},"referencedDeclaration":2419,"src":"683:20:33","typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2419","typeString":"contract IMecenateFeedFactory"}},"visibility":"public"},{"constant":false,"functionSelector":"3f16a3bb","id":6158,"mutability":"mutable","name":"mecenateBay","nameLocation":"756:11:33","nodeType":"VariableDeclaration","scope":6236,"src":"736:31:33","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateBay_$2262","typeString":"contract IMecenateBay"},"typeName":{"id":6157,"nodeType":"UserDefinedTypeName","pathNode":{"id":6156,"name":"IMecenateBay","nameLocations":["736:12:33"],"nodeType":"IdentifierPath","referencedDeclaration":2262,"src":"736:12:33"},"referencedDeclaration":2262,"src":"736:12:33","typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateBay_$2262","typeString":"contract IMecenateBay"}},"visibility":"public"},{"constant":false,"functionSelector":"295b7b9a","id":6161,"mutability":"mutable","name":"mecenateTreasury","nameLocation":"798:16:33","nodeType":"VariableDeclaration","scope":6236,"src":"773:41:33","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateTreasury_$2432","typeString":"contract IMecenateTreasury"},"typeName":{"id":6160,"nodeType":"UserDefinedTypeName","pathNode":{"id":6159,"name":"IMecenateTreasury","nameLocations":["773:17:33"],"nodeType":"IdentifierPath","referencedDeclaration":2432,"src":"773:17:33"},"referencedDeclaration":2432,"src":"773:17:33","typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateTreasury_$2432","typeString":"contract IMecenateTreasury"}},"visibility":"public"},{"body":{"id":6196,"nodeType":"Block","src":"998:276:33","statements":[{"expression":{"id":6176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6172,"name":"mecenateUsers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6152,"src":"1008:13:33","typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateUsers_$2490","typeString":"contract IMecenateUsers"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6174,"name":"mecenateUsersAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6163,"src":"1039:20:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6173,"name":"IMecenateUsers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2490,"src":"1024:14:33","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateUsers_$2490_$","typeString":"type(contract IMecenateUsers)"}},"id":6175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1024:36:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateUsers_$2490","typeString":"contract IMecenateUsers"}},"src":"1008:52:33","typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateUsers_$2490","typeString":"contract IMecenateUsers"}},"id":6177,"nodeType":"ExpressionStatement","src":"1008:52:33"},{"expression":{"id":6182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6178,"name":"mecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6155,"src":"1070:19:33","typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2419","typeString":"contract IMecenateFeedFactory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6180,"name":"mecenateFeedFactoryAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6165,"src":"1113:26:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6179,"name":"IMecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2419,"src":"1092:20:33","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeedFactory_$2419_$","typeString":"type(contract IMecenateFeedFactory)"}},"id":6181,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1092:48:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2419","typeString":"contract IMecenateFeedFactory"}},"src":"1070:70:33","typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2419","typeString":"contract IMecenateFeedFactory"}},"id":6183,"nodeType":"ExpressionStatement","src":"1070:70:33"},{"expression":{"id":6188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6184,"name":"mecenateBay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6158,"src":"1150:11:33","typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateBay_$2262","typeString":"contract IMecenateBay"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6186,"name":"mecenateBayAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6167,"src":"1177:18:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6185,"name":"IMecenateBay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2262,"src":"1164:12:33","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateBay_$2262_$","typeString":"type(contract IMecenateBay)"}},"id":6187,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1164:32:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateBay_$2262","typeString":"contract IMecenateBay"}},"src":"1150:46:33","typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateBay_$2262","typeString":"contract IMecenateBay"}},"id":6189,"nodeType":"ExpressionStatement","src":"1150:46:33"},{"expression":{"id":6194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6190,"name":"mecenateTreasury","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6161,"src":"1206:16:33","typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateTreasury_$2432","typeString":"contract IMecenateTreasury"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6192,"name":"mecenateTreasuryAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6169,"src":"1243:23:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6191,"name":"IMecenateTreasury","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2432,"src":"1225:17:33","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateTreasury_$2432_$","typeString":"type(contract IMecenateTreasury)"}},"id":6193,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1225:42:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateTreasury_$2432","typeString":"contract IMecenateTreasury"}},"src":"1206:61:33","typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateTreasury_$2432","typeString":"contract IMecenateTreasury"}},"id":6195,"nodeType":"ExpressionStatement","src":"1206:61:33"}]},"id":6197,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":6170,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6163,"mutability":"mutable","name":"mecenateUsersAddress","nameLocation":"850:20:33","nodeType":"VariableDeclaration","scope":6197,"src":"842:28:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6162,"name":"address","nodeType":"ElementaryTypeName","src":"842:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6165,"mutability":"mutable","name":"mecenateFeedFactoryAddress","nameLocation":"888:26:33","nodeType":"VariableDeclaration","scope":6197,"src":"880:34:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6164,"name":"address","nodeType":"ElementaryTypeName","src":"880:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6167,"mutability":"mutable","name":"mecenateBayAddress","nameLocation":"932:18:33","nodeType":"VariableDeclaration","scope":6197,"src":"924:26:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6166,"name":"address","nodeType":"ElementaryTypeName","src":"924:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6169,"mutability":"mutable","name":"mecenateTreasuryAddress","nameLocation":"968:23:33","nodeType":"VariableDeclaration","scope":6197,"src":"960:31:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6168,"name":"address","nodeType":"ElementaryTypeName","src":"960:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"832:165:33"},"returnParameters":{"id":6171,"nodeType":"ParameterList","parameters":[],"src":"998:0:33"},"scope":6236,"src":"821:453:33","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":6234,"nodeType":"Block","src":"1335:440:33","statements":[{"assignments":[6204],"declarations":[{"constant":false,"id":6204,"mutability":"mutable","name":"totalBayRequests","nameLocation":"1353:16:33","nodeType":"VariableDeclaration","scope":6234,"src":"1345:24:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6203,"name":"uint256","nodeType":"ElementaryTypeName","src":"1345:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6208,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":6205,"name":"mecenateBay","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6158,"src":"1372:11:33","typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateBay_$2262","typeString":"contract IMecenateBay"}},"id":6206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1384:15:33","memberName":"contractCounter","nodeType":"MemberAccess","referencedDeclaration":2261,"src":"1372:27:33","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":6207,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1372:29:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1345:56:33"},{"assignments":[6210],"declarations":[{"constant":false,"id":6210,"mutability":"mutable","name":"totalFeeds","nameLocation":"1419:10:33","nodeType":"VariableDeclaration","scope":6234,"src":"1411:18:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6209,"name":"uint256","nodeType":"ElementaryTypeName","src":"1411:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6214,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":6211,"name":"mecenateFeedFactory","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6155,"src":"1432:19:33","typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeedFactory_$2419","typeString":"contract IMecenateFeedFactory"}},"id":6212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1452:15:33","memberName":"contractCounter","nodeType":"MemberAccess","referencedDeclaration":2364,"src":"1432:35:33","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":6213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1432:37:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1411:58:33"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":6216,"name":"mecenateUsers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6152,"src":"1522:13:33","typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateUsers_$2490","typeString":"contract IMecenateUsers"}},"id":6217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1536:12:33","memberName":"getUserCount","nodeType":"MemberAccess","referencedDeclaration":2450,"src":"1522:26:33","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":6218,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1522:28:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6219,"name":"totalBayRequests","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6204,"src":"1568:16:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6220,"name":"totalFeeds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6210,"src":"1602:10:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":6221,"name":"mecenateTreasury","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6161,"src":"1630:16:33","typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateTreasury_$2432","typeString":"contract IMecenateTreasury"}},"id":6222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1647:9:33","memberName":"globalFee","nodeType":"MemberAccess","referencedDeclaration":2426,"src":"1630:26:33","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":6223,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1630:28:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":6224,"name":"mecenateTreasury","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6161,"src":"1676:16:33","typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateTreasury_$2432","typeString":"contract IMecenateTreasury"}},"id":6225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1693:8:33","memberName":"fixedFee","nodeType":"MemberAccess","referencedDeclaration":2431,"src":"1676:25:33","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":6226,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1676:27:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"arguments":[{"id":6229,"name":"mecenateTreasury","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6161,"src":"1729:16:33","typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateTreasury_$2432","typeString":"contract IMecenateTreasury"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IMecenateTreasury_$2432","typeString":"contract IMecenateTreasury"}],"id":6228,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1721:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6227,"name":"address","nodeType":"ElementaryTypeName","src":"1721:7:33","typeDescriptions":{}}},"id":6230,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1721:25:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1747:7:33","memberName":"balance","nodeType":"MemberAccess","src":"1721:33:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6215,"name":"Stats","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6149,"src":"1499:5:33","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Stats_$6149_storage_ptr_$","typeString":"type(struct MecenateStats.Stats storage pointer)"}},"id":6232,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1499:269:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Stats_$6149_memory_ptr","typeString":"struct MecenateStats.Stats memory"}},"functionReturnParameters":6202,"id":6233,"nodeType":"Return","src":"1480:288:33"}]},"functionSelector":"c59d4847","id":6235,"implemented":true,"kind":"function","modifiers":[],"name":"getStats","nameLocation":"1289:8:33","nodeType":"FunctionDefinition","parameters":{"id":6198,"nodeType":"ParameterList","parameters":[],"src":"1297:2:33"},"returnParameters":{"id":6202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6201,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":6235,"src":"1321:12:33","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Stats_$6149_memory_ptr","typeString":"struct MecenateStats.Stats"},"typeName":{"id":6200,"nodeType":"UserDefinedTypeName","pathNode":{"id":6199,"name":"Stats","nameLocations":["1321:5:33"],"nodeType":"IdentifierPath","referencedDeclaration":6149,"src":"1321:5:33"},"referencedDeclaration":6149,"src":"1321:5:33","typeDescriptions":{"typeIdentifier":"t_struct$_Stats_$6149_storage_ptr","typeString":"struct MecenateStats.Stats"}},"visibility":"internal"}],"src":"1320:14:33"},"scope":6236,"src":"1280:495:33","stateMutability":"view","virtual":false,"visibility":"public"}],"scope":6237,"src":"411:1366:33","usedErrors":[]}],"src":"206:1572:33"},"id":33}},"contracts":{"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220fb3c0abb370de0e6ac736dc185047e25d2e817941432c4619ed7224cccf4e9c364736f6c63430008130033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFB EXTCODECOPY EXP 0xBB CALLDATACOPY 0xD 0xE0 0xE6 0xAC PUSH20 0x6DC185047E25D2E817941432C4619ED7224CCCF4 0xE9 0xC3 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"220:2559:1:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea2646970667358221220fb3c0abb370de0e6ac736dc185047e25d2e817941432c4619ed7224cccf4e9c364736f6c63430008130033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFB EXTCODECOPY EXP 0xBB CALLDATACOPY 0xD 0xE0 0xE6 0xAC PUSH20 0x6DC185047E25D2E817941432C4619ED7224CCCF4 0xE9 0xC3 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"220:2559:1:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(int256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220f730ec07bbfacaf28ddd79e7da4265e4ece1b157a046b028ccf9af36fb90059f64736f6c63430008130033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF7 ADDRESS 0xEC SMOD 0xBB STATICCALL 0xCA CALLCODE DUP14 0xDD PUSH26 0xE7DA4265E4ECE1B157A046B028CCF9AF36FB90059F64736F6C63 NUMBER STOP ADDMOD SGT STOP CALLER ","sourceMap":"202:12582:2:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea2646970667358221220f730ec07bbfacaf28ddd79e7da4265e4ece1b157a046b028ccf9af36fb90059f64736f6c63430008130033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF7 ADDRESS 0xEC SMOD 0xBB STATICCALL 0xCA CALLCODE DUP14 0xDD PUSH26 0xE7DA4265E4ECE1B157A046B028CCF9AF36FB90059F64736F6C63 NUMBER STOP ADDMOD SGT STOP CALLER ","sourceMap":"202:12582:2:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SafeMath.sol":{"SafeMath":{"abi":[],"devdoc":{"details":"Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212207c9127b963d6d61ada906c2c2f8fd50d08df161a4cb3e7cfc6abb1c9f3a2264264736f6c63430008130033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH29 0x9127B963D6D61ADA906C2C2F8FD50D08DF161A4CB3E7CFC6ABB1C9F3A2 0x26 TIMESTAMP PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"482:6210:3:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea26469706673582212207c9127b963d6d61ada906c2c2f8fd50d08df161a4cb3e7cfc6abb1c9f3a2264264736f6c63430008130033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH29 0x9127B963D6D61ADA906C2C2F8FD50D08DF161A4CB3E7CFC6ABB1C9F3A2 0x26 TIMESTAMP PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"482:6210:3:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"add(uint256,uint256)":"infinite","div(uint256,uint256)":"infinite","div(uint256,uint256,string memory)":"infinite","mod(uint256,uint256)":"infinite","mod(uint256,uint256,string memory)":"infinite","mul(uint256,uint256)":"infinite","sub(uint256,uint256)":"infinite","sub(uint256,uint256,string memory)":"infinite","tryAdd(uint256,uint256)":"infinite","tryDiv(uint256,uint256)":"infinite","tryMod(uint256,uint256)":"infinite","tryMul(uint256,uint256)":"infinite","trySub(uint256,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"SignedMath":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220b74d92d560d6e51ccbed5e924cbb0a071495af255be56464811cda15a27c394c64736f6c63430008130033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB7 0x4D SWAP3 0xD5 PUSH1 0xD6 0xE5 SHR 0xCB 0xED 0x5E SWAP3 0x4C 0xBB EXP SMOD EQ SWAP6 0xAF 0x25 JUMPDEST 0xE5 PUSH5 0x64811CDA15 LOG2 PUSH29 0x394C64736F6C6343000813003300000000000000000000000000000000 ","sourceMap":"215:1047:4:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea2646970667358221220b74d92d560d6e51ccbed5e924cbb0a071495af255be56464811cda15a27c394c64736f6c63430008130033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB7 0x4D SWAP3 0xD5 PUSH1 0xD6 0xE5 SHR 0xCB 0xED 0x5E SWAP3 0x4C 0xBB EXP SMOD EQ SWAP6 0xAF 0x25 JUMPDEST 0xE5 PUSH5 0x64811CDA15 LOG2 PUSH29 0x394C64736F6C6343000813003300000000000000000000000000000000 ","sourceMap":"215:1047:4:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol":{"IUniswapV3SwapCallback":{"abi":[{"inputs":[{"internalType":"int256","name":"amount0Delta","type":"int256"},{"internalType":"int256","name":"amount1Delta","type":"int256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"uniswapV3SwapCallback","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"uniswapV3SwapCallback(int256,int256,bytes)":{"details":"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.","params":{"amount0Delta":"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.","amount1Delta":"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.","data":"Any data passed through by the caller via the IUniswapV3PoolActions#swap call"}}},"title":"Callback for IUniswapV3PoolActions#swap","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"uniswapV3SwapCallback(int256,int256,bytes)":"fa461e33"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\",\"params\":{\"amount0Delta\":\"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.\",\"amount1Delta\":\"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.\",\"data\":\"Any data passed through by the caller via the IUniswapV3PoolActions#swap call\"}}},\"title\":\"Callback for IUniswapV3PoolActions#swap\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"notice\":\"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\"}},\"notice\":\"Any contract that calls IUniswapV3PoolActions#swap must implement this interface\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":\"IUniswapV3SwapCallback\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"uniswapV3SwapCallback(int256,int256,bytes)":{"notice":"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap."}},"notice":"Any contract that calls IUniswapV3PoolActions#swap must implement this interface","version":1}}},"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol":{"ISwapRouter":{"abi":[{"inputs":[{"components":[{"internalType":"bytes","name":"path","type":"bytes"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMinimum","type":"uint256"}],"internalType":"struct ISwapRouter.ExactInputParams","name":"params","type":"tuple"}],"name":"exactInput","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"uint24","name":"fee","type":"uint24"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMinimum","type":"uint256"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"}],"internalType":"struct ISwapRouter.ExactInputSingleParams","name":"params","type":"tuple"}],"name":"exactInputSingle","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes","name":"path","type":"bytes"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"amountInMaximum","type":"uint256"}],"internalType":"struct ISwapRouter.ExactOutputParams","name":"params","type":"tuple"}],"name":"exactOutput","outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"tokenIn","type":"address"},{"internalType":"address","name":"tokenOut","type":"address"},{"internalType":"uint24","name":"fee","type":"uint24"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint256","name":"amountOut","type":"uint256"},{"internalType":"uint256","name":"amountInMaximum","type":"uint256"},{"internalType":"uint160","name":"sqrtPriceLimitX96","type":"uint160"}],"internalType":"struct ISwapRouter.ExactOutputSingleParams","name":"params","type":"tuple"}],"name":"exactOutputSingle","outputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"int256","name":"amount0Delta","type":"int256"},{"internalType":"int256","name":"amount1Delta","type":"int256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"uniswapV3SwapCallback","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"exactInput((bytes,address,uint256,uint256,uint256))":{"params":{"params":"The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata"},"returns":{"amountOut":"The amount of the received token"}},"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))":{"params":{"params":"The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata"},"returns":{"amountOut":"The amount of the received token"}},"exactOutput((bytes,address,uint256,uint256,uint256))":{"params":{"params":"The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata"},"returns":{"amountIn":"The amount of the input token"}},"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))":{"params":{"params":"The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata"},"returns":{"amountIn":"The amount of the input token"}},"uniswapV3SwapCallback(int256,int256,bytes)":{"details":"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.","params":{"amount0Delta":"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.","amount1Delta":"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.","data":"Any data passed through by the caller via the IUniswapV3PoolActions#swap call"}}},"title":"Router token swapping functionality","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"exactInput((bytes,address,uint256,uint256,uint256))":"c04b8d59","exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))":"414bf389","exactOutput((bytes,address,uint256,uint256,uint256))":"f28c0498","exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))":"db3e2198","uniswapV3SwapCallback(int256,int256,bytes)":"fa461e33"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"}],\"internalType\":\"struct ISwapRouter.ExactInputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct ISwapRouter.ExactInputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"}],\"internalType\":\"struct ISwapRouter.ExactOutputParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"struct ISwapRouter.ExactOutputSingleParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"exactOutputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"exactInput((bytes,address,uint256,uint256,uint256))\":{\"params\":{\"params\":\"The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\"},\"returns\":{\"amountOut\":\"The amount of the received token\"}},\"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"params\":{\"params\":\"The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\"},\"returns\":{\"amountOut\":\"The amount of the received token\"}},\"exactOutput((bytes,address,uint256,uint256,uint256))\":{\"params\":{\"params\":\"The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\"},\"returns\":{\"amountIn\":\"The amount of the input token\"}},\"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"params\":{\"params\":\"The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\"},\"returns\":{\"amountIn\":\"The amount of the input token\"}},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"details\":\"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\",\"params\":{\"amount0Delta\":\"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.\",\"amount1Delta\":\"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.\",\"data\":\"Any data passed through by the caller via the IUniswapV3PoolActions#swap call\"}}},\"title\":\"Router token swapping functionality\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"exactInput((bytes,address,uint256,uint256,uint256))\":{\"notice\":\"Swaps `amountIn` of one token for as much as possible of another along the specified path\"},\"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"notice\":\"Swaps `amountIn` of one token for as much as possible of another token\"},\"exactOutput((bytes,address,uint256,uint256,uint256))\":{\"notice\":\"Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\"},\"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))\":{\"notice\":\"Swaps as little as possible of one token for `amountOut` of another token\"},\"uniswapV3SwapCallback(int256,int256,bytes)\":{\"notice\":\"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\"}},\"notice\":\"Functions for swapping tokens via Uniswap V3\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":\"ISwapRouter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"exactInput((bytes,address,uint256,uint256,uint256))":{"notice":"Swaps `amountIn` of one token for as much as possible of another along the specified path"},"exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))":{"notice":"Swaps `amountIn` of one token for as much as possible of another token"},"exactOutput((bytes,address,uint256,uint256,uint256))":{"notice":"Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)"},"exactOutputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160))":{"notice":"Swaps as little as possible of one token for `amountOut` of another token"},"uniswapV3SwapCallback(int256,int256,bytes)":{"notice":"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap."}},"notice":"Functions for swapping tokens via Uniswap V3","version":1}}},"contracts/features/MecenateFeed.sol":{"MecenateFeed":{"abi":[{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_usersModuleContract","type":"address"},{"internalType":"address","name":"_factoryContract","type":"address"},{"internalType":"uint256","name":"_major","type":"uint256"},{"internalType":"uint256","name":"_minor","type":"uint256"},{"internalType":"uint256","name":"_patch","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Accepted","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Created","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenID","type":"uint8"},{"indexed":false,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newDeposit","type":"uint256"}],"name":"DepositDecreased","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenID","type":"uint8"},{"indexed":false,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newDeposit","type":"uint256"}],"name":"DepositIncreased","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Finalized","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Invalid","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"MadePublic","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Renounced","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"staker","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"name":"StakeAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"staker","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"StakeBurned","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"staker","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"name":"StakeTaken","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Valid","type":"event"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"uint256","name":"paymentAmount","type":"uint256"},{"internalType":"address","name":"funder","type":"address"},{"internalType":"address","name":"buyer","type":"address"}],"name":"acceptPost","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"address","name":"_funder","type":"address"},{"internalType":"uint256","name":"amountToAdd","type":"uint256"}],"name":"addStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"encryptedHash","type":"bytes"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"enum Structures.PostDuration","name":"postDuration","type":"uint8"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"stakeAmount","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"address","name":"funder","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"bool","name":"useStake","type":"bool"}],"name":"createPost","outputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"internalType":"struct Structures.Post","name":"","type":"tuple"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bool","name":"valid","type":"bool"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"finalizePost","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getBuyerStake","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getEncryptedPost","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPaymentRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPost","outputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"internalType":"struct Structures.Post","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSellerStake","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"address","name":"staker","type":"address"}],"name":"getStake","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStakeRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStatus","outputs":[{"internalType":"enum Structures.PostStatus","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenId","outputs":[{"internalType":"enum Structures.Tokens","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenIdAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTotalStaked","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"post","outputs":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"postCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renouncePost","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"name":"revealData","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"encryptedKey","type":"bytes"}],"name":"submitHash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"address","name":"receiver","type":"address"}],"name":"takeFullStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint256","name":"amountToTake","type":"uint256"}],"name":"takeStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"version()":{"returns":{"_0":"Semver contract version as a string."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"abi_decode_address_fromMemory":{"entryPoint":967,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_string":{"entryPoint":988,"id":null,"parameterSlots":2,"returnSlots":1},"array_allocation_size_string":{"entryPoint":1033,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":909,"id":null,"parameterSlots":2,"returnSlots":0},"fun_toString":{"entryPoint":1061,"id":136,"parameterSlots":1,"returnSlots":1}},"generatedSources":[],"linkReferences":{},"object":"60e060409080825234620003885760c081620059b580380380916200002582856200038d565b83398101031262000388576200003b81620003c7565b60206200004a818401620003c7565b9162000058858501620003c7565b9360608101519060a060808201519101519160805260a05260c05267016345785d8a00006012556000938460135560018060a01b039283918260018060a01b031996168660145416176014553386601554161760155581885180926303e21fa960e61b8252816004968792165afa9081156200037e5790859188916200033a575b501685601654161760165562000124620000f560805162000425565b916200010360a05162000425565b92620001496200011560c05162000425565b8b5194859385850190620003dc565b601760f91b8082526200013e6001988980940190620003dc565b9081520190620003dc565b036200015e601f19918281018552846200038d565b8251906001600160401b03821162000327576017548581811c911680156200031c575b848210146200030957601f8111620002bd575b508290601f831160011462000257575081906019948b926200024b575b5050600019600383901b1c191690841b176017555b60ff199384815416815588805260188252620151808a8a20558389526203f4808a8a20556002895262093a808a8a205560038952621275008a8a2055885262278d0089892055878052528686209182541617905516908254161790555161540f9081620005a682396080518161216c015260a05181612195015260c051816121c40152f35b015190503880620001b1565b60178b52838b2090831694869392908c5b878110620002a5575083601997106200028b575b505050811b01601755620001c6565b015160001960f88460031b161c191690553880806200027c565b82820151845588959093019291860191860162000268565b60178b52838b20601f840160051c810191858510620002fe575b601f0160051c019086905b828110620002f257505062000194565b8c8155018690620002e2565b9091508190620002d7565b634e487b7160e01b8b526022875260248bfd5b90607f169062000181565b634e487b7160e01b8a526041865260248afd5b809250838092503d831162000376575b6200035681836200038d565b8101031262000372576200036b8591620003c7565b38620000d9565b8680fd5b503d6200034a565b88513d89823e3d90fd5b600080fd5b601f909101601f19168101906001600160401b03821190821017620003b157604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036200038857565b9081519160005b838110620003f5575050016000815290565b8060208092840101518185015201620003e3565b6001600160401b038111620003b157601f01601f191660200190565b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008082101562000596575b506d04ee2d6d415b85acef81000000008083101562000586575b50662386f26fc100008083101562000576575b506305f5e1008083101562000566575b506127108083101562000556575b50606482101562000545575b600a809210156200053a575b60019081602181860195620004c78762000409565b96620004d760405198896200038d565b808852620004e8601f199162000409565b01366020890137860101905b62000501575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a8353049182156200053457919082620004f4565b620004fa565b9160010191620004b2565b9190606460029104910191620004a6565b600491939204910191386200049a565b600891939204910191386200048c565b601091939204910191386200047c565b6020919392049101913862000469565b6040935081049150386200044f56fe608080604052600436101561001d575b50361561001b57600080fd5b005b60003560e01c908163010a38f514612f645750806305c1f50214612f1b57806307388dba14612c435780630917e77614612bfd57806317906c2e14612bdf5780631d0b4af514612b0f5780633d876d5d146122d15780634c38d877146122a15780634e69d5601461227957806352a6cb4a1461226057806354fd4d50146121565780635ad4e170146121295780635c63ed69146120f9578063729e2eb1146120295780637abe914d14611dca5780638c6838ba14611d7e5780638da5cb5b14611d555780638f287dc2146112d05780638f903c7914610fbc578063d24e0c8714610f9e578063d2af47ab146102a8578063ed70d5d5146101ed578063f2d7dbb6146101555763faeb5e1714610132573861000f565b34610150576000366003190112610150576020600b54604051908152f35b600080fd5b3461015057610163366135f3565b9060ff600854169060038210156101d75760038110156101d75760209261018e6101a093831461395f565b6101983383613ad9565b913390614f22565b6009546001600160a01b039033908216036101c3575080600c555b604051908152f35b600a541633036101bb575b80600b556101bb565b634e487b7160e01b600052602160045260246000fd5b34610150576101fb366135c0565b60ff6008939293541660038110156101d75760038310156101d75761022190831461395f565b81600052601a602052604060002033600052602052806040600020541061027057602092610250923390614f22565b600954336001600160a01b03909116036101ce5780600c55604051908152f35b60405162461bcd60e51b815260206004820152601060248201526f4e4f545f454e4f5547485f5354414b4560801b6044820152606490fd5b610120366003190112610150576004356001600160401b038111610150576102d490369060040161363d565b60056024351015610150576005604435101561015057600360a43510156101505760c4356001600160a01b03811690036101505760e4356001600160a01b0381169003610150576101043515156101043503610150576103326138eb565b506000600160a435148015610f8e575b81908015610f7f575b610355915061395f565b6000546001600160a01b031633036101505760145460405163122643f360e21b81526001600160a01b0360e43581166004830152909160209183916024918391165afa908115610e3057600091610f45575b5015610f0f5760ff6004541660088110156101d75760005260196020526103d560ff604060002054166136b9565b60843515610ed65760643515610ea2576101043515610e3c576101d75760a435600052601a602052604060002060018060a01b0360e4351660005260205261042660843560406000205410156136f6565b6084355b610435604435613326565b60ff6044351660005260186020526040600020549160ff600454169160088310156101d757600092835260196020526040808420805460ff1990811690915560018086527ffc941c3961fb6541da34150022cddf959da0fb2353866a6bfbd249c2da0929148054831682179055600480549092161781556014549151633bcaa1d960e21b81526001600160a01b0360e435811692820192909252949185916024918391165afa928315610e3057600093610d7d575b50604051936104f88561324b565b60018552610507602435613326565b602435602086015242604086015260006060860152608085015261053060a43560a08601613330565b6040519061053d8261324b565b6000825260018060a01b0360e4351660208301526040820152606435606082015260006080820152600060a08201526105746139ef565b61057c6139ef565b906040519361058a85613230565b845260208401526040830152604051936105a385613230565b845260208401526040830152604051916105bc83613266565b81835260208301528051600180546001600160a01b0319166001600160a01b039290921691909117905560208101518051906001600160401b0382116109db57610607600254612f90565b601f8111610d14575b50602090601f8311600114610c9b57604093929160009183610c90575b50508160011b916000199060031b1c1916176002555b01518051906001600160401b0382116109db578190610663600354612f90565b601f8111610c19575b50602090601f8311600114610ba157600092610b96575b50508160011b916000199060031b1c1916176003555b6020810151805180519060088210156101d7576106b760a092613782565b60208101516106c581613326565b6106ce81613326565b61ff006004549160081b169061ff0019161760045560408101516005556060810151600655608081015160075501519060038210156101d75760409160ff80196008541691161760085560a06020820151610748600180841b0382511660018060a01b03166001600160601b0360a01b6009541617600955565b610774600180841b0360208301511660018060a01b03166001600160601b0360a01b600a541617600a55565b83810151600b556060810151600c556080810151600d550151600e5501519081519182516001600160401b0381116109db576107b1600f54612f90565b601f8111610b43575b506020601f8211600114610ad15781929394600092610ac6575b50508160011b916000199060031b1c191617600f555b60208101518051906001600160401b0382116109db5761080b601054612f90565b601f8111610a73575b50602090601f83116001146109fc576040939291600091836109f1575b50508160011b916000199060031b1c1916176010555b0151908151906001600160401b0382116109db576011916108688354612f90565b601f8111610989575b506020601f8211600114610919578192939460009261090e575b50508160011b916000199060031b1c19161782555b6013549160001983146108fa575060016108f692016013557f6e8f9f12846cf7ba30acdd742f3eae58c49befeed93f00d60de3bd4f7d09f223604051806108e78482613684565b0390a160405191829182613684565b0390f35b634e487b7160e01b60005260045260246000fd5b01519050848061088b565b601f198216908460005260008051602061537a8339815191529160005b81811061097157509583600195969710610958575b505050811b0182556108a0565b015160001960f88460031b161c1916905584808061094b565b9192602060018192868b015181550194019201610936565b8360005260008051602061537a833981519152601f830160051c810191602084106109d1575b601f0160051c01905b8181106109c55750610871565b600081556001016109b8565b90915081906109af565b634e487b7160e01b600052604160045260246000fd5b015190508580610831565b90601f19831691601060005260008051602061539a8339815191529260005b818110610a5b5750916001939185604097969410610a42575b505050811b01601055610847565b015160001960f88460031b161c19169055858080610a34565b92936020600181928786015181550195019301610a1b565b601060005260008051602061539a833981519152601f840160051c81019160208510610abc575b601f0160051c01905b818110610ab05750610814565b60008155600101610aa3565b9091508190610a9a565b0151905084806107d4565b601f19821690600f6000526000805160206153ba8339815191529160005b818110610b2b57509583600195969710610b12575b505050811b01600f556107ea565b015160001960f88460031b161c19169055848080610b04565b9192602060018192868b015181550194019201610aef565b600f6000526000805160206153ba833981519152601f830160051c81019160208410610b8c575b601f0160051c01905b818110610b8057506107ba565b60008155600101610b73565b9091508190610b6a565b015190508380610683565b9250600360005260008051602061535a833981519152906000935b601f1984168510610bfe576001945083601f19811610610be5575b505050811b01600355610699565b015160001960f88460031b161c19169055838080610bd7565b81810151835560209485019460019093019290910190610bbc565b9091506003600052601f830160051c60008051602061535a833981519152019060208410610c7a575b90601f8493920160051c60008051602061535a83398151915201905b818110610c6b575061066c565b60008155849350600101610c5e565b60008051602061535a8339815191529150610c42565b01519050858061062d565b90600260005260008051602061533a8339815191529160005b601f1985168110610cfc575091839160019360409695601f19811610610ce3575b505050811b01600255610643565b015160001960f88460031b161c19169055858080610cd5565b91926020600181928685015181550194019201610cb4565b6002600052601f830160051c60008051602061533a8339815191520160208410610d68575b601f820160051c60008051602061533a833981519152018110610d5c5750610610565b60008155600101610d39565b5060008051602061533a833981519152610d39565b9092503d806000833e610d9081836132af565b6020828281010312610150578151916001600160401b03831161015057606083820183830103126101505760405192610dc884613230565b610dd3818301613999565b8452602081830101516001600160401b03811161015057610dfb9084840190838501016139ad565b602085015260408183010151906001600160401b03821161015057610e249383019201016139ad565b604082015291846104ea565b6040513d6000823e3d90fd5b6101d75760a43515610e62575b610e5d60843560c43560e43560a435613d7e565b61042a565b3460843514610e495760405162461bcd60e51b815260206004820152600f60248201526e57524f4e475f4d53475f56414c554560881b6044820152606490fd5b60405162461bcd60e51b815260206004820152600c60248201526b5041594d454e545f5a45524f60a01b6044820152606490fd5b60405162461bcd60e51b81526020600482015260116024820152705354414b455f414d4f554e545f5a45524f60781b6044820152606490fd5b60405162461bcd60e51b815260206004820152600e60248201526d1554d15497d393d517d1561254d560921b6044820152606490fd5b90506020813d602011610f77575b81610f60602093836132af565b8101031261015057610f7190613734565b836103a7565b3d9150610f53565b506101d7578060a4351561034b565b506000905060a435600214610342565b34610150576000366003190112610150576020600c54604051908152f35b3461015057602080600319360112610150576001600160401b039060043582811161015057610fef90369060040161363d565b600a5490916001600160a01b039161100a9083163314613b07565b60ff6004541660088110156101d757806000526019825260ff60406000205416806112bc575b156112885760248284601454166040519283809263122643f360e21b82523360048301525afa908115610e3057600091611253575b50156112185761107c600193339085541614613b07565b6000526019815260406000209260ff1993848154169055600360005260406000208385825416179055600384600454161760045580519485116109db576110c4601054612f90565b601f81116111c3575b5081601f8611600114611151575060039492600092849283611146575b50501b9160001990851b1c1916176010555b600454161760045561111060075442613c81565b6006557f61de5b63673167e253173c50abdc3fd45371dc3205496f46fdb05a9f7927b574604051806111418161379b565b0390a1005b0151925086806110ea565b909491601f19831695601060005260008051602061539a833981519152926000905b8882106111ac5750508360039710611194575b505050811b016010556110fc565b015160001983871b60f8161c19169055848080611186565b808785968294968601518155019501930190611173565b601060005260008051602061539a833981519152601f870160051c81019184881061120e575b601f0160051c019084905b8281106112025750506110cd565b600081550184906111f4565b90915081906111e9565b60405162461bcd60e51b8152600481018390526013602482015272155cd95c88191bd95cc81b9bdd08195e1a5cdd606a1b6044820152606490fd5b90508281813d8311611281575b61126a81836132af565b810103126101505761127b90613734565b86611065565b503d611260565b60405162461bcd60e51b815260048101839052600c60248201526b57524f4e475f53544154555360a01b6044820152606490fd5b506002811480611030575060038114611030565b3461015057606036600319011261015057600435151560043503610150576009546001600160a01b0316611305338214613b07565b60ff6004541660088110156101d757600303611d205760155460405163335ded4b60e21b81526001600160a01b0390911690602081600481855afa908115610e3057600091611ce1575b506040516328c44a9960e21b8152604435600482015290600090829060249082906001600160a01b03165afa908115610e3057600091611bbe575b5060e08101516113a4906001600160a01b03168414613b54565b60c0810151600a546001600160a01b03918216911603611b8557602081810151604051633ec4f23d60e01b81529182600481875afa918215610e3057600092611b51575b5003611b1b5761012001519081518201916060818403126101505761140f60208201613734565b9261141c60408301613999565b916060810151916001600160401b038311610150576114429260208092019201016139ad565b90306001600160a01b0390911603611ae75760405161147f81611471602082019460208652604083019061345b565b03601f1981018352826132af565b519020604051602080820152600f5481600061149a83612f90565b92836040840152600181169081600014611ac85750600114611a7b575b6114ca925003601f1981018352826132af565b6020815191012003611a47576020600491604051928380926318da001160e01b82525afa908115610e3057600091611a0d575b50600c54604051634047e10360e11b81529092906020816004816001600160a01b0387165afa908115610e30576000916119d9575b5061271061154361154b9286613b96565b048094613bbf565b93600654421180156119d0575b15611872575061156f901515600435151514613b54565b600854600954600c546115ad92611592926001600160a01b03169060ff16613c8e565b600854600a549195916001600160a01b03169060ff16613bf8565b9160ff600854166003811015806101d757600182148015918183611864575b81908015611857575b6115df915061395f565b601554604051632ee4b68b60e11b815290602090829060049082906001600160a01b03165afa908115610e305760009161181d575b506117d0576101d757826116e4575061164b9360009384935083925082916001600160a01b03165af161164561404c565b5061407c565b600b55600c55600435156116dd5760045b60ff6004541660088110156101d757600052601960205260406000209060ff199182815416905560088110156101d7576116af9160ff821660005260196020526001604060002091825416179055613782565b7f61de5b63673167e253173c50abdc3fd45371dc3205496f46fdb05a9f7927b574604051806111418161379b565b600561165c565b600090916117c3575b81156117b0575b5092602092916117066117549561395f565b6001600160a01b039061171890615123565b60405163a9059cbb60e01b81526001600160a01b0390931660048401526024830193909352909384929190911690829060009082906044820190565b03925af18015610e3057600090611775575b61177091506150e5565b61164b565b506020813d6020116117a8575b8161178f602093836132af565b81010312610150576117a361177091613734565b611766565b3d9150611782565b90509190916101d75790600060206116f4565b50506002811460006116ed565b9150919293506101d757600282036117f35750506117ed906143b8565b5061164b565b1561180257506117ed90614e6a565b1561180d575061164b565b6118169061484f565b50826117ed565b90506020813d60201161184f575b81611838602093836132af565b810103126101505761184990613734565b89611614565b3d915061182b565b506101d7578084156115d5565b5060009050600284146115cc565b93509150506004351561188157005b611892901515600435151514613b54565b600b546024359081116119955760125491670de0b6b3a76400009283811015611958576005936118c56118d39285613b96565b04809260ff600854166140b6565b600c55600854600a546118f49184916001600160a01b03169060ff166140b6565b600b5560ff199183836004541617600455600d55600e55816000526019602052604060002060018282541617905560045416176004557fb0ec4ef3ee1a79effa677af7a82a3a875b4d438307fb7e589a58966e3b913f2f604051806111418161379b565b60405162461bcd60e51b81526020600482015260156024820152740a0aa9c92a6909a8a9ca8bea482a8929ebe90928e9605b1b6044820152606490fd5b60405162461bcd60e51b81526020600482015260136024820152720a0aa9c92a6909a8a9ca8bea89e9ebe90928e9606b1b6044820152606490fd5b50600435611558565b90506020813d602011611a05575b816119f4602093836132af565b810103126101505751612710611532565b3d91506119e7565b90506020813d602011611a3f575b81611a28602093836132af565b8101031261015057611a3990613999565b836114fd565b3d9150611a1b565b60405162461bcd60e51b815260206004820152600c60248201526b1253959053125117d413d4d560a21b6044820152606490fd5b5090600f6000526000805160206153ba833981519152906000915b818310611aae5750509060606114ca928201016114b7565b805460608487010152849350602090920191600101611a96565b606092506114ca94915060ff191682840152151560051b8201016114b7565b60405162461bcd60e51b815260206004820152600c60248201526b1253959053125117d191515160a21b6044820152606490fd5b60405162461bcd60e51b815260206004820152600e60248201526d494e56414c49445f534348454d4160901b6044820152606490fd5b9091506020813d602011611b7d575b81611b6d602093836132af565b81010312610150575190856113e8565b3d9150611b60565b60405162461bcd60e51b81526020600482015260116024820152701253959053125117d49150d25412515395607a1b6044820152606490fd5b90503d806000833e611bd081836132af565b6020828281010312610150578151906001600160401b0382116101505761014082840182850103126101505760405192836101408101106001600160401b03610140860111176109db57610140840160409081528184018051865260208082015190870152611c3f9101613b40565b6040850152611c52606084830101613b40565b6060850152611c65608084830101613b40565b608085015260a0838201015160a0850152611c8460c084830101613999565b60c0850152611c9760e084830101613999565b60e0850152610100611cac8185840101613734565b9085015261012092838183010151906001600160401b03821161015057611cd79383019201016139ad565b908201528361138a565b90506020813d602011611d18575b81611cfc602093836132af565b81010312610150576000611d11602492613999565b915061134f565b3d9150611cef565b60405162461bcd60e51b815260206004820152600d60248201526c1393d517d4d550935255151151609a1b6044820152606490fd5b34610150576000366003190112610150576000546040516001600160a01b039091168152602090f35b3461015057600036600319011261015057611d976138eb565b506108f6604051611da781613266565b611daf6132d0565b8152611db961333c565b602082015260405191829182613684565b3461015057602080600319360112610150576001600160401b039060043582811161015057611dfd90369060040161363d565b9060ff600454166008811015806101d757816000526019835260ff6040600020541680611fed575b611e2e906136b9565b611e4460018060a01b03600a5416331415613741565b6101d757600403611fb95781519283116109db57611e63601154612f90565b601f8111611f67575b508092601f8111600114611ef85780919293600091611eed575b508160011b916000199060031b1c1916176011555b600660ff1960045416176004557f76c6a8f0836a14a631dc3a45fc0c49d4dd3fc4147167329ba4220ba2664ccaf060405180611ed68161379b565b0390a16108f660405192828493845283019061345b565b905083015184611e86565b601f19811693601160005260008051602061537a8339815191529060005b868110611f50575082600194959610611f37575b5050811b01601155611e9b565b85015160001960f88460031b161c191690558480611f2a565b909184600181928589015181550193019101611f16565b601160005260008051602061537a833981519152601f850160051c810191838610611faf575b601f0160051c01905b818110611fa35750611e6c565b60008155600101611f96565b9091508190611f8d565b6064906040519062461bcd60e51b82526004820152600d60248201526c1393d517d19253905312569151609a1b6044820152fd5b5050600060038214801561201b575b8190801561200c575b9050611e25565b506101d7578060048314612005565b506000905060068214611ffc565b34610150576000366003190112610150576040516000600f5461204b81612f90565b808452906001908181169081156120d25750600114612089575b6108f684612075818603826132af565b60405191829160208352602083019061345b565b600f600090815292506000805160206153ba8339815191525b8284106120ba57505050810160200161207582612065565b805460208587018101919091529093019281016120a2565b60ff191660208087019190915292151560051b850190920192506120759150839050612065565b3461015057600036600319011261015057600854600a546020916101bb916001600160a01b03169060ff16613ad9565b34610150576000366003190112610150576020612144613a0f565b6040516001600160a01b039091168152f35b34610150576000366003190112610150576121907f00000000000000000000000000000000000000000000000000000000000000006151b1565b6121b97f00000000000000000000000000000000000000000000000000000000000000006151b1565b9061224c60226121e87f00000000000000000000000000000000000000000000000000000000000000006151b1565b93604051948591855161220381602098898088019101613438565b830190601760f91b918288820152612224825180938a602185019101613438565b0190602182015261223d82518093888785019101613438565b010360028101855201836132af565b6108f660405192828493845283019061345b565b346101505760206101bb612273366135f3565b90613ad9565b3461015057600036600319011261015057602060ff6004541661229f60405180926134bf565bf35b34610150576000366003190112610150576008546009546020916101bb916001600160a01b03169060ff16613ad9565b3461015057600036600319011261015057600a546001600160a01b03906122fb9082163314613b07565b60ff6004541660088110156101d75760005260206019815261232460ff604060002054166136b9565b61232c6139ef565b6123346139ef565b916040519161234283613230565b600083528183019081526040830193845261244f85604051946123648661324b565b60078652600085870152600060408701526000606087015260006080870152600060a08701526040516123968161324b565b60008152600086820152600060408201526000606082015260006080820152600060a0820152604051906123c982613230565b6040516123d581613294565b6000815282526040516123e781613294565b60008152878301526040516123fb81613294565b6000815260408301526040519761241189613230565b88528688015260408701528460405161242981613266565b82815201958652511660018060a01b03166001600160601b0360a01b6001541617600155565b51908151936001600160401b03948581116109db5780612470600254612f90565b94601f95868111612ab4575b508490868311600114612a4057600092612a35575b50508160011b916000199060031b1c1916176002555b519283518581116109db57806003956124c08754612f90565b8681116129db575b50849086831160011461296b57600092612960575b50508160011b9160001990871b1c19161784555b5194855195865160088110156101d75761250a90613782565b8287015161251781613326565b61252081613326565b61ff006004549160081b169061ff0019161760045560a06040880151976005988955606081015160065560808101516007550151858110156101d75760409260a09160ff8019600854169116176008556125be858401519161259c8184511660018060a01b03166001600160601b0360a01b6009541617600955565b868301511660018060a01b03166001600160601b0360a01b600a541617600a55565b83810151600b556060810151600c556080810151600d550151600e55015180518051908682116109db5781906125f5600f54612f90565b868111612907575b50849086831160011461289457600092612889575b50508160011b9160001990871b1c191617600f555b818101518051908682116109db57612640601054612f90565b85811161283c575b5083908583116001146127c6576040939291600091836127bb575b50508160011b9160001990881b1c1916176010555b01519485519485116109db5761268f601154612f90565b90838211612772575b5050809184116001146126fd575082936000936126f2575b50508260011b92600019911b1c1916176011555b7f88c430102eab5dbc235ca367ecd5ffa63164bb311015524ecebed009d4d4b5b6604051806111418161379b565b0151915083806126b0565b9190601f19841694601160005260008051602061537a833981519152936000905b87821061275a5750508460019610612740575b50505050811b016011556126c4565b01519060f884600019921b161c1916905582808080612731565b8060018597829496860151815501960193019061271e565b601160005260008051602061537a8339815191529084808801821c8301938589106127b2575b01901c01905b81811015612698576000815560010161279e565b93508293612798565b015190508980612663565b90601f19831691601060005260008051602061539a8339815191529260005b8782821061282657505091600193918560409796941061280e575b505050811b01601055612678565b0151600019838a1b60f8161c19169055898080612800565b60018596829396860151815501950193016127e5565b601060005260008051602061539a833981519152868085018b1c820192878610612880575b018a1c01905b8181106128745750612648565b60008155600101612867565b92508192612861565b015190508880612612565b600f60009081526000805160206153ba8339815191529350601f198516905b878282106128f15750509084600195949392106128d9575b505050811b01600f55612627565b015160001983891b60f8161c191690558880806128cb565b60018596829396860151815501950193016128b3565b909150600f6000526000805160206153ba833981519152868085018b1c820192878610612957575b908594939291018b1c01905b81811061294857506125fd565b6000815584935060010161293b565b9250819261292f565b0151905088806124dd565b600088815260008051602061535a8339815191529350601f198516905b878282106129c55750509084600195949392106129ad575b505050811b0184556124f1565b015160001983891b60f8161c191690558880806129a0565b6001859682939686015181550195019301612988565b9091508660005260008051602061535a8339815191528680850160051c820192878610612a2c575b9085949392910160051c01905b818110612a1d57506124c8565b60008155849350600101612a10565b92508192612a03565b015190508880612491565b6002600090815260008051602061533a8339815191529350601f198516905b87828210612a9e575050908460019594939210612a85575b505050811b016002556124a7565b015160001960f88460031b161c19169055888080612a77565b6001859682939686015181550195019301612a5f565b909150600260005260008051602061533a8339815191528680850160051c820192878610612b06575b9085949392910160051c01905b818110612af7575061247c565b60008155849350600101612aea565b92508192612add565b612b18366135c0565b60ff6008939293541660038110156101d75760038310156101d757612b3e90831461395f565b6009546001600160a01b039290831633148015612bd2575b15612b9b57602093612b7b9284600a54163314600014612b95575034915b3390613d7e565b906009541633146000146101ce5780600c55604051908152f35b91612b74565b60405162461bcd60e51b815260206004820152600f60248201526e2ba927a723afa6a9a3a9a2a72222a960891b6044820152606490fd5b5082600a54163314612b56565b34610150576000366003190112610150576020601354604051908152f35b346101505760003660031901126101505760206101bb60ff60085416612c3d60018060a01b0391612c3283600a541682613ad9565b926009541690613ad9565b90613c81565b6080366003190112610150576004356003811015610150576024908135906001600160a01b03604435818116810361015057606435928284169485850361015057600160005260209560198752612ca160ff604060002054166136b9565b60ff600854166003811015612f0657612cbb90841461395f565b82612eff5734945b888882600a541692612ce2612cd88589613ad9565b600b5411156136f6565b601454166040519283809263122643f360e21b82528760048301525afa908115610e3057600091612eca575b5015612e94579081612d2c92331491821592612e89575b5050613741565b600c54908115612e015710612dc8576002955091612d4f9184612d6f9594613d7e565b600c5560018060a01b03166001600160601b0360a01b6009541617600955565b601960ff1991838360045416176004558360005252604060002060018282541617905560045416176004557f909d9218f6e1f243c7d9044544c7b03e2e7db27d81653992e9018b8b72f4c20d604051806111418161379b565b60405162461bcd60e51b815260048101869052601281880152711393d517d15393d551d217d410565351539560721b6044820152606490fd5b90503415612e555715612e22576002955091612d4f9184612d6f9594613d7e565b60405162461bcd60e51b815260048101869052600c818801526b16915493d7d410565351539560a21b6044820152606490fd5b60405162461bcd60e51b815260048101879052600d818901526c5a45524f5f4d534756414c554560981b6044820152606490fd5b141590508980612d25565b60405162461bcd60e51b815260048101899052600f818b01526e1554d1549517d393d517d1561254d5608a1b6044820152606490fd5b90508881813d8311612ef8575b612ee181836132af565b8101031261015057612ef290613734565b8a612d0e565b503d612ed7565b8194612cc3565b88634e487b7160e01b60005260216004526000fd5b3461015057600036600319011261015057612f56612f376132d0565b6108f6612f4261333c565b604051938493604085526040850190613480565b9083820360208501526134cc565b34610150576000366003190112610150578061229f60209260ff600854165b9060038210156101d75752565b90600182811c92168015612fc0575b6020831014612faa57565b634e487b7160e01b600052602260045260246000fd5b91607f1691612f9f565b60025460009291612fda82612f90565b8082529160019081811690811561303f5750600114612ff857505050565b91929350600260005260008051602061533a833981519152916000925b84841061302757505060209250010190565b80546020858501810191909152909301928101613015565b915050602093945060ff929192191683830152151560051b010190565b6003546000929161306c82612f90565b8082529160019081811690811561303f575060011461308a57505050565b91929350600360005260008051602061535a833981519152916000925b8484106130b957505060209250010190565b805460208585018101919091529093019281016130a7565b600f54600092916130e182612f90565b8082529160019081811690811561303f57506001146130ff57505050565b91929350600f6000526000805160206153ba833981519152916000925b84841061312e57505060209250010190565b8054602085850181019190915290930192810161311c565b6010546000929161315682612f90565b8082529160019081811690811561303f575060011461317457505050565b91929350601060005260008051602061539a833981519152916000925b8484106131a357505060209250010190565b80546020858501810191909152909301928101613191565b601154600092916131cb82612f90565b8082529160019081811690811561303f57506001146131e957505050565b91929350601160005260008051602061537a833981519152916000925b84841061321857505060209250010190565b80546020858501810191909152909301928101613206565b606081019081106001600160401b038211176109db57604052565b60c081019081106001600160401b038211176109db57604052565b604081019081106001600160401b038211176109db57604052565b6001600160401b0381116109db57604052565b602081019081106001600160401b038211176109db57604052565b90601f801991011681019081106001600160401b038211176109db57604052565b604051906132dd82613230565b6001546001600160a01b031682526040518290613304816132fd81612fca565b03826132af565b602082015260408051916133228361331b8161305c565b03846132af565b0152565b600511156101d757565b60038210156101d75752565b604090815161334a81613230565b809280516133578161324b565b60045460ff81169060088210156101d75760ff91835260081c1661337a81613326565b602082015260055482820152600654606082015260075460808201526133a860ff6008541660a08301613330565b825280516133b58161324b565b60018060a01b0380600954168252600a54166020820152600b5482820152600c546060820152600d546080820152600e5460a082015260208301528051916133fc83613230565b815161340b816132fd816130d1565b8352815161341c816132fd81613146565b60208401528151613430816132fd816131bb565b828401520152565b60005b83811061344b5750506000910152565b818101518382015260200161343b565b9060209161347481518092818552858086019101613438565b601f01601f1916010190565b6134bc9160018060a01b03825116815260406134ab602084015160606020850152606084019061345b565b92015190604081840391015261345b565b90565b9060088210156101d75752565b9060406134bc9261352060a082516134e58682516134bf565b60208101516134f381613326565b602087015284810151858701526060810151606087015260808101516080870152015160a0850190612f83565b60a06020820151600180831b038082511660c087015260208201511660e08601528381015161010086015260608101516101208601526080810151610140860152015161016084015201519061358c6101a080610180840152606084519184015261020083019061345b565b906101e060406135b060208601519461019f199586868303016101c087015261345b565b940151928285030191015261345b565b606090600319011261015057600435600381101561015057906024356001600160a01b0381168103610150579060443590565b604090600319011261015057600435600381101561015057906024356001600160a01b03811681036101505790565b6001600160401b0381116109db57601f01601f191660200190565b81601f820112156101505780359061365482613622565b9261366260405194856132af565b8284526020838301011161015057816000926020809301838601378301015290565b906134bc916020815260206136a483516040838501526060840190613480565b920151906040601f19828503019101526134cc565b156136c057565b60405162461bcd60e51b815260206004820152600e60248201526d494e56414c49445f53544154555360901b6044820152606490fd5b156136fd57565b60405162461bcd60e51b815260206004820152600f60248201526e14d51052d157d25390d3d4949150d5608a1b6044820152606490fd5b5190811515820361015057565b1561374857565b60405162461bcd60e51b81526020600482015260126024820152712ca7aaafa0a922afaa2422afa9a2a62622a960711b6044820152606490fd5b60088110156101d75760ff801960045416911617600455565b6134bc90602081526040602082015260018060a01b0380600154166060830152606060808301526137e26137d160c08401612fca565b838103605f190160a085015261305c565b916040601f198285030191015260ff600454613800848383166134bf565b60081c1661380d81613326565b602083015260055460408301526006546060830152600754608083015261383d60ff6008541660a0840190612f83565b806009541660c0830152600a541660e0820152600b54610100820152600c54610120820152600d54610140820152600e5461016082015260606101a08061018084015282015261389061020082016130d1565b906101e06138ac61019f199384848203016101c0850152613146565b92828403019101526131bb565b604051906138c68261324b565b8160a06000918281528260208201528260408201528260608201528260808201520152565b6040908151916138fa83613266565b602083825161390881613230565b60008152606083820152606084820152815282519261392684613230565b61392e6138b9565b84526139386138b9565b8385015280519061394882613230565b606082526060848301526060818301528401520152565b1561396657565b60405162461bcd60e51b815260206004820152600b60248201526a2ba927a723afaa27a5a2a760a91b6044820152606490fd5b51906001600160a01b038216820361015057565b81601f820112156101505780516139c381613622565b926139d160405194856132af565b81845260208284010111610150576134bc9160208085019101613438565b604051906139fc82613266565b60048252630307830360e41b6020830152565b60ff6008541660038110156101d75760018103613a95575060155460405163f77800e560e01b815290602090829060049082906001600160a01b03165afa908115610e3057600091613a5f575090565b906020823d8211613a8d575b81613a78602093836132af565b81010312613a8a57506134bc90613999565b80fd5b3d9150613a6b565b600203613ad457601554604051635f117aa360e11b815290602090829060049082906001600160a01b03165afa908115610e3057600091613a5f575090565b600090565b60038110156101d757600052601a60205260406000209060018060a01b031660005260205260406000205490565b15613b0e57565b60405162461bcd60e51b815260206004820152600a6024820152692727aa2fa9a2a62622a960b11b6044820152606490fd5b51906001600160401b038216820361015057565b15613b5b57565b60405162461bcd60e51b815260206004820152601360248201527224a72b20a624a22fa0aa2a22a9aa20aa24a7a760691b6044820152606490fd5b81810292918115918404141715613ba957565b634e487b7160e01b600052601160045260246000fd5b91908203918211613ba957565b90949392606092613be1836080810198612f83565b6001600160a01b0316602083015260408201520152565b919060038310156101d757604092613c7b7ffe2caf3897ec3e02a1d458d232d7c62c17809d25dbfe65864ce842162d6c217c93600090838252601a60205286822060018060a01b03861690818452602052613c568289852054613c81565b978389949287869452601a602052828220908252602052205560405194859485613bcc565b0390a190565b91908201809211613ba957565b60038110156101d7576000818152601a60205260409384822060018060a01b0385169081845260205285832054828110613d195791867f9060f8ffc7acd8270abf2337023e6377669ca44d5b2a23f3513a29380940f35796959492613cf683613c7b96613bbf565b98848a959288879452601a60205282822090825260205220555194859485613bcc565b865162461bcd60e51b8152602060048201526014602482015273125394d551919250d251539517d1115413d4d25560621b6044820152606490fd5b6001600160a01b0390911681526020810191909152606081019291613d7c9160400190612f83565b565b9290600460ff8154166008811015613fd657806002613da69214159081614040575b506136b9565b821561400b576003851015613ff65784158015613dfe575b50507f68ffd6ad89c76c56b0b5206ae0c1a14cbffb37023d4e80f635ff7397c56b116b9250613c7b613df1838387613bf8565b9460405193849384613d54565b6001861460008115613feb575b8115613fc6575b50613e1d915061395f565b613e2685615123565b936001600160a01b039081613e3a88615123565b60408051636eb1769f60e11b81526001600160a01b038516878201908152306020808301919091529a9491938b9385939284900301918391165afa8015610e30578791600091613f96575b5010613f595782916000889460649360405197889687956323b872dd60e01b87521690850152306024850152896044850152165af1908115610e3057600091613efd575b507f68ffd6ad89c76c56b0b5206ae0c1a14cbffb37023d4e80f635ff7397c56b116b9350613ef6906150e5565b3880613dbe565b91929382813d8311613f52575b613f1481836132af565b81010312613a8a575090613ef6613f4c7f68ffd6ad89c76c56b0b5206ae0c1a14cbffb37023d4e80f635ff7397c56b116b9493613734565b90613ec9565b503d613f0a565b60405162461bcd60e51b81528085018890526016602482015275494e53554646494349454e545f414c4c4f57414e434560501b6044820152606490fd5b91508882813d8311613fbf575b613fad81836132af565b81010312613a8a575086905138613e85565b503d613fa3565b9050613fd657613e1d9038613e12565b602182634e487b7160e01b6000525260246000fd5b600288149150613e0b565b602190634e487b7160e01b6000525260246000fd5b60649060206040519162461bcd60e51b8352820152600e60248201526d14d51052d157d49154555254915160921b6044820152fd5b60039150141538613da0565b3d15614077573d9061405d82613622565b9161406b60405193846132af565b82523d6000602084013e565b606090565b1561408357565b60405162461bcd60e51b815260206004820152600b60248201526a10d0531317d1905253115160aa1b6044820152606490fd5b91906140c3828285613c8e565b60155460408051632ee4b68b60e11b815292959092916020916001600160a01b039160049190831684868481845afa95861561435857600096614363575b508483918851928380926318da001160e01b82525afa90811561435857908491600091614321575b5016946142c5576003811015613fd6578061418b575050505083929161416b600080808060008051602061531a83398151915299613c7b975af161164561404c565b516001600160a01b03909216825260208201929092529081906040820190565b90839488926000959495600182149081156142ba575b8115614289575b50956141c16000926141bc6141f29961395f565b615123565b169288519687958694859363a9059cbb60e01b8552840160209093929193604081019460018060a01b031681520152565b03925af191821561427e5760009261422a575b505060008051602061531a833981519152939291614225613c7b926150e5565b61416b565b81819392933d8311614277575b61424181836132af565b81010312613a8a575060008051602061531a83398151915293929161422561426b613c7b93613734565b92508193949550614205565b503d614237565b83513d6000823e3d90fd5b92955050919492506142a55790928492889260006141c16141a8565b602184634e487b7160e01b6000525260246000fd5b6002831491506141a1565b93509150506003821015613ff6575060008051602061531a833981519152939291613c7b916002810361430257506142fc846143b8565b5061416b565b6001810361431457506142fc84614e6a565b614225576142fc8461484f565b91508582813d8311614351575b61433881836132af565b81010312613a8a575061434b8491613999565b38614129565b503d61432e565b87513d6000823e3d90fd5b90958582813d8311614396575b61437a81836132af565b81010312613a8a57508461438e8492613734565b969150614101565b503d614370565b90816020910312610150575162ffffff811681036101505790565b60155460408051635f117aa360e11b8082529094936001600160a01b03936020939260049185908990849082908a165afa9788156148445760009861480d575b50601654845163095ea7b360e01b8082529188166001600160a01b031684820190815260208101869052919990918791839182908b9082906040010392165a90600091f1801561465e576147d9575b50856015541692845191825285828481875afa91821561465e576000926147a2575b5084516325abd85f60e11b808252929087818681895afa9081156143585760009161476d575b508651918883602481633488e95960e21b9a8b825260008b8301525afa92831561471557906144c994939291600093614755575b50614c59565b90866015541690855190815286818581855afa9081156146a257600091614720575b5085519063f77800e560e01b9586835288838781875afa928315614715579089916000946146dc575b506024895180968193825260018a8301525afa9283156143585790614543949392916000936146ad5750614c59565b94806015541697845193808552868585818d5afa9485156146a257908791600096614669575b50848751809c819382525afa98891561465e57600099614617575b5084519081526001600160a01b03989098169188019182526020820186905295969584928792839003604001918391600091165af190811561460d57506145d7575b506145d19150614e6a565b50600190565b82813d8311614606575b6145eb81836132af565b81010312610150576145ff6145d192613734565b50386145c6565b503d6145e1565b513d6000823e3d90fd5b90988682813d8311614657575b61462e81836132af565b81010312613a8a5750916000869492614649899a9b95613999565b9a9950929450929092614584565b503d614624565b85513d6000823e3d90fd5b9182819792973d831161469b575b61468181836132af565b81010312613a8a57506146948791613999565b9438614569565b503d614677565b86513d6000823e3d90fd5b6146ce919350893d8b116146d5575b6146c681836132af565b81019061439d565b91386144c3565b503d6146bc565b9182819592953d831161470e575b6146f481836132af565b81010312613a8a57506147078991613999565b9238614514565b503d6146ea565b88513d6000823e3d90fd5b908782813d831161474e575b61473681836132af565b81010312613a8a575061474890613999565b386144eb565b503d61472c565b6146ce9193508a3d8c116146d5576146c681836132af565b908882813d831161479b575b61478381836132af565b81010312613a8a575061479590613999565b3861448f565b503d614779565b90918682813d83116147d2575b6147b981836132af565b81010312613a8a57506147cb90613999565b9038614469565b503d6147af565b8581813d8311614806575b6147ee81836132af565b81010312610150576147ff90613734565b5038614447565b503d6147e4565b90978582813d831161483d575b61482481836132af565b81010312613a8a575061483690613999565b96386143f8565b503d61481a565b84513d6000823e3d90fd5b906015549160006040918251926325abd85f60e11b958685526020926004958481888160018060a01b038097165afa908115614c04579083918791614c21575b5016803b15614bf95785829188865180948193630d0e30db60e41b83525af18015614c04579087939291614c0e575b508482601554168551988980928d82525afa968715614c04578697614bc9575b50601654845163095ea7b360e01b8082529184166001600160a01b031685820190815260208101849052919890918791839182908b90889083906040010393165af18015614ac557614b95575b5081601554168451998a52858a8581845afa998a15614ac557879a614b5e575b50845163f77800e560e01b8082529a87828781865afa918215614b155788908a93614b1f575b508751633488e95960e21b815260018882015293849060249082905afa928315614b1557916149ab9391879695938b936147555750614c59565b96816015541699868b8751968780928582525afa948515614b0b579087918996614acf575b50848751809d819382525afa998a15614ac557879a614a7b575b5084519081526001600160a01b03999099169189019182526020820187905296979596849287928390036040019183918891165af1908115614a725750614a38575b5050506145d190614e6a565b82813d8311614a6b575b614a4c81836132af565b81010312613a8a575090614a626145d192613734565b50903880614a2c565b503d614a42565b513d84823e3d90fd5b9099508581813d8311614abe575b614a9381836132af565b81010312614aba579186869492614aac8a9b9c95613999565b9b9a509294509290926149ea565b8680fd5b503d614a89565b85513d89823e3d90fd5b8281939297503d8311614b04575b614ae781836132af565b81010312614b0057614af98791613999565b94386149d0565b8780fd5b503d614add565b86513d8a823e3d90fd5b87513d8b823e3d90fd5b80929350813d8311614b57575b614b3681836132af565b81010312614b53579087614b4c60249493613999565b9293614971565b8880fd5b503d614b2c565b9099508581813d8311614b8e575b614b7681836132af565b81010312614aba57614b8790613999565b983861494b565b503d614b6c565b8581813d8311614bc2575b614baa81836132af565b81010312614aba57614bbb90613734565b503861492b565b503d614ba0565b9096508481813d8311614bfd575b614be181836132af565b81010312614bf957614bf290613999565b95386148de565b8580fd5b503d614bd7565b84513d88823e3d90fd5b614c1a90969196613281565b94386148be565b809250868092503d8311614c52575b614c3a81836132af565b81010312614bf957614c4c8391613999565b3861488f565b503d614c30565b601654604051636eb1769f60e11b81523060048201526001600160a01b039182166024820181905293959493929091169190602081604481865afa8015610e30578591600091614e35575b5010614dc9575b50603c420193844211613ba9576016546040516101008101916001600160a01b0316906001600160401b038311818410176109db5760409283529384526001600160a01b03928316602085810191825262ffffff9687168685019081523060608801908152608088019a8b5260a08801998a52600060c0890181815260e08a01828152975163414bf38960e01b81529951891660048b01529451881660248a01529151909816604488015296518516606487015297516084860152955160a4850152945160c4840152511660e482015292918391610104918391905af1908115610e3057600091614d9a575090565b906020823d602011614dc1575b81614db4602093836132af565b81010312613a8a57505190565b3d9150614da7565b60405163095ea7b360e01b8152600481019190915260001960248201526020816044816000865af18015610e305715614cab576020813d602011614e2d575b81614e15602093836132af565b8101031261015057614e2690613734565b5038614cab565b3d9150614e08565b91506020823d602011614e62575b81614e50602093836132af565b81010312613a8a575084905138614ca4565b3d9150614e43565b60155460405163f77800e560e01b81526001600160a01b03916020908290600490829086165afa908115610e3057600091614ee9575b501690813b1561015057600091602483926040519485938492630852cd8d60e31b845260048401525af18015610e3057614eda5750600190565b614ee390613281565b386145d1565b906020823d8211614f1a575b81614f02602093836132af565b81010312613a8a5750614f1490613999565b38614ea0565b3d9150614ef5565b92909160ff6004541660088110156101d757806002614f49921415908161404057506136b9565b60038410156101d75783614fb2576000808084819482908215614fa8575b6001600160a01b031690f115610e30577f4a647b1d902051b0ae802f6050c58456d79d826bdf2bbf37a1bf13be97727b2d915b613c7b613df1838387613c8e565b6108fc9150614f67565b9091908260018514600081156150da575b81156150c8575b509061502192614fdb60209361395f565b6001600160a01b03614fec88615123565b1690600060405180968195829463a9059cbb60e01b84526004840160209093929193604081019460018060a01b031681520152565b03925af1908115610e3057600091615066575b50906150617f4a647b1d902051b0ae802f6050c58456d79d826bdf2bbf37a1bf13be97727b2d93926150e5565b614f9a565b906020823d82116150c0575b8161507f602093836132af565b81010312613a8a5750906150616150b77f4a647b1d902051b0ae802f6050c58456d79d826bdf2bbf37a1bf13be97727b2d9493613734565b91929350615034565b3d9150615072565b9150506101d757826000615021614fca565b600287149150614fc3565b156150ec57565b60405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b6044820152606490fd5b60038110156101d757600281146151785760011461514057600090565b60155460405163f77800e560e01b815290602090829060049082906001600160a01b03165afa908115610e3057600091613a5f575090565b50601554604051635f117aa360e11b815290602090829060049082906001600160a01b03165afa908115610e3057600091613a5f575090565b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008082101561530b575b506d04ee2d6d415b85acef8100000000808310156152fc575b50662386f26fc10000808310156152ed575b506305f5e100808310156152de575b50612710808310156152cf575b5060648210156152bf575b600a809210156152b5575b6001908160218186019561524a87613622565b9661525860405198896132af565b808852615267601f1991613622565b01366020890137860101905b61527f575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a8353049182156152b057919082615273565b615278565b9160010191615237565b919060646002910491019161522c565b60049193920491019138615221565b60089193920491019138615214565b60109193920491019138615205565b602091939204910191386151f3565b6040935081049150386151da56fe659f33fc6677bebf3a9bf3101092792e31f35766d0358e54577bdd91a655f6a0405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acec2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c681b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6728d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802a2646970667358221220e4729c8350ed9965e7cfef223f52992187adb08588ff8b889d947c6a8027a67a64736f6c63430008130033","opcodes":"PUSH1 0xE0 PUSH1 0x40 SWAP1 DUP1 DUP3 MSTORE CALLVALUE PUSH3 0x388 JUMPI PUSH1 0xC0 DUP2 PUSH3 0x59B5 DUP1 CODESIZE SUB DUP1 SWAP2 PUSH3 0x25 DUP3 DUP6 PUSH3 0x38D JUMP JUMPDEST DUP4 CODECOPY DUP2 ADD SUB SLT PUSH3 0x388 JUMPI PUSH3 0x3B DUP2 PUSH3 0x3C7 JUMP JUMPDEST PUSH1 0x20 PUSH3 0x4A DUP2 DUP5 ADD PUSH3 0x3C7 JUMP JUMPDEST SWAP2 PUSH3 0x58 DUP6 DUP6 ADD PUSH3 0x3C7 JUMP JUMPDEST SWAP4 PUSH1 0x60 DUP2 ADD MLOAD SWAP1 PUSH1 0xA0 PUSH1 0x80 DUP3 ADD MLOAD SWAP2 ADD MLOAD SWAP2 PUSH1 0x80 MSTORE PUSH1 0xA0 MSTORE PUSH1 0xC0 MSTORE PUSH8 0x16345785D8A0000 PUSH1 0x12 SSTORE PUSH1 0x0 SWAP4 DUP5 PUSH1 0x13 SSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 SWAP2 DUP3 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB NOT SWAP7 AND DUP7 PUSH1 0x14 SLOAD AND OR PUSH1 0x14 SSTORE CALLER DUP7 PUSH1 0x15 SLOAD AND OR PUSH1 0x15 SSTORE DUP2 DUP9 MLOAD DUP1 SWAP3 PUSH4 0x3E21FA9 PUSH1 0xE6 SHL DUP3 MSTORE DUP2 PUSH1 0x4 SWAP7 DUP8 SWAP3 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH3 0x37E JUMPI SWAP1 DUP6 SWAP2 DUP9 SWAP2 PUSH3 0x33A JUMPI JUMPDEST POP AND DUP6 PUSH1 0x16 SLOAD AND OR PUSH1 0x16 SSTORE PUSH3 0x124 PUSH3 0xF5 PUSH1 0x80 MLOAD PUSH3 0x425 JUMP JUMPDEST SWAP2 PUSH3 0x103 PUSH1 0xA0 MLOAD PUSH3 0x425 JUMP JUMPDEST SWAP3 PUSH3 0x149 PUSH3 0x115 PUSH1 0xC0 MLOAD PUSH3 0x425 JUMP JUMPDEST DUP12 MLOAD SWAP5 DUP6 SWAP4 DUP6 DUP6 ADD SWAP1 PUSH3 0x3DC JUMP JUMPDEST PUSH1 0x17 PUSH1 0xF9 SHL DUP1 DUP3 MSTORE PUSH3 0x13E PUSH1 0x1 SWAP9 DUP10 DUP1 SWAP5 ADD SWAP1 PUSH3 0x3DC JUMP JUMPDEST SWAP1 DUP2 MSTORE ADD SWAP1 PUSH3 0x3DC JUMP JUMPDEST SUB PUSH3 0x15E PUSH1 0x1F NOT SWAP2 DUP3 DUP2 ADD DUP6 MSTORE DUP5 PUSH3 0x38D JUMP JUMPDEST DUP3 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH3 0x327 JUMPI PUSH1 0x17 SLOAD DUP6 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH3 0x31C JUMPI JUMPDEST DUP5 DUP3 LT EQ PUSH3 0x309 JUMPI PUSH1 0x1F DUP2 GT PUSH3 0x2BD JUMPI JUMPDEST POP DUP3 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH3 0x257 JUMPI POP DUP2 SWAP1 PUSH1 0x19 SWAP5 DUP12 SWAP3 PUSH3 0x24B JUMPI JUMPDEST POP POP PUSH1 0x0 NOT PUSH1 0x3 DUP4 SWAP1 SHL SHR NOT AND SWAP1 DUP5 SHL OR PUSH1 0x17 SSTORE JUMPDEST PUSH1 0xFF NOT SWAP4 DUP5 DUP2 SLOAD AND DUP2 SSTORE DUP9 DUP1 MSTORE PUSH1 0x18 DUP3 MSTORE PUSH3 0x15180 DUP11 DUP11 KECCAK256 SSTORE DUP4 DUP10 MSTORE PUSH3 0x3F480 DUP11 DUP11 KECCAK256 SSTORE PUSH1 0x2 DUP10 MSTORE PUSH3 0x93A80 DUP11 DUP11 KECCAK256 SSTORE PUSH1 0x3 DUP10 MSTORE PUSH3 0x127500 DUP11 DUP11 KECCAK256 SSTORE DUP9 MSTORE PUSH3 0x278D00 DUP10 DUP10 KECCAK256 SSTORE DUP8 DUP1 MSTORE MSTORE DUP7 DUP7 KECCAK256 SWAP2 DUP3 SLOAD AND OR SWAP1 SSTORE AND SWAP1 DUP3 SLOAD AND OR SWAP1 SSTORE MLOAD PUSH2 0x540F SWAP1 DUP2 PUSH3 0x5A6 DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 PUSH2 0x216C ADD MSTORE PUSH1 0xA0 MLOAD DUP2 PUSH2 0x2195 ADD MSTORE PUSH1 0xC0 MLOAD DUP2 PUSH2 0x21C4 ADD MSTORE RETURN JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH3 0x1B1 JUMP JUMPDEST PUSH1 0x17 DUP12 MSTORE DUP4 DUP12 KECCAK256 SWAP1 DUP4 AND SWAP5 DUP7 SWAP4 SWAP3 SWAP1 DUP13 JUMPDEST DUP8 DUP2 LT PUSH3 0x2A5 JUMPI POP DUP4 PUSH1 0x19 SWAP8 LT PUSH3 0x28B JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x17 SSTORE PUSH3 0x1C6 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH3 0x27C JUMP JUMPDEST DUP3 DUP3 ADD MLOAD DUP5 SSTORE DUP9 SWAP6 SWAP1 SWAP4 ADD SWAP3 SWAP2 DUP7 ADD SWAP2 DUP7 ADD PUSH3 0x268 JUMP JUMPDEST PUSH1 0x17 DUP12 MSTORE DUP4 DUP12 KECCAK256 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 DUP6 DUP6 LT PUSH3 0x2FE JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 DUP7 SWAP1 JUMPDEST DUP3 DUP2 LT PUSH3 0x2F2 JUMPI POP POP PUSH3 0x194 JUMP JUMPDEST DUP13 DUP2 SSTORE ADD DUP7 SWAP1 PUSH3 0x2E2 JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH3 0x2D7 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP12 MSTORE PUSH1 0x22 DUP8 MSTORE PUSH1 0x24 DUP12 REVERT JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH3 0x181 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP11 MSTORE PUSH1 0x41 DUP7 MSTORE PUSH1 0x24 DUP11 REVERT JUMPDEST DUP1 SWAP3 POP DUP4 DUP1 SWAP3 POP RETURNDATASIZE DUP4 GT PUSH3 0x376 JUMPI JUMPDEST PUSH3 0x356 DUP2 DUP4 PUSH3 0x38D JUMP JUMPDEST DUP2 ADD SUB SLT PUSH3 0x372 JUMPI PUSH3 0x36B DUP6 SWAP2 PUSH3 0x3C7 JUMP JUMPDEST CODESIZE PUSH3 0xD9 JUMP JUMPDEST DUP7 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH3 0x34A JUMP JUMPDEST DUP9 MLOAD RETURNDATASIZE DUP10 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND DUP2 ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT SWAP1 DUP3 LT OR PUSH3 0x3B1 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH3 0x388 JUMPI JUMP JUMPDEST SWAP1 DUP2 MLOAD SWAP2 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH3 0x3F5 JUMPI POP POP ADD PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST DUP1 PUSH1 0x20 DUP1 SWAP3 DUP5 ADD ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH3 0x3E3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH3 0x3B1 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP1 PUSH1 0x0 SWAP2 PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP1 DUP3 LT ISZERO PUSH3 0x596 JUMPI JUMPDEST POP PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP1 DUP4 LT ISZERO PUSH3 0x586 JUMPI JUMPDEST POP PUSH7 0x2386F26FC10000 DUP1 DUP4 LT ISZERO PUSH3 0x576 JUMPI JUMPDEST POP PUSH4 0x5F5E100 DUP1 DUP4 LT ISZERO PUSH3 0x566 JUMPI JUMPDEST POP PUSH2 0x2710 DUP1 DUP4 LT ISZERO PUSH3 0x556 JUMPI JUMPDEST POP PUSH1 0x64 DUP3 LT ISZERO PUSH3 0x545 JUMPI JUMPDEST PUSH1 0xA DUP1 SWAP3 LT ISZERO PUSH3 0x53A JUMPI JUMPDEST PUSH1 0x1 SWAP1 DUP2 PUSH1 0x21 DUP2 DUP7 ADD SWAP6 PUSH3 0x4C7 DUP8 PUSH3 0x409 JUMP JUMPDEST SWAP7 PUSH3 0x4D7 PUSH1 0x40 MLOAD SWAP9 DUP10 PUSH3 0x38D JUMP JUMPDEST DUP1 DUP9 MSTORE PUSH3 0x4E8 PUSH1 0x1F NOT SWAP2 PUSH3 0x409 JUMP JUMPDEST ADD CALLDATASIZE PUSH1 0x20 DUP10 ADD CALLDATACOPY DUP7 ADD ADD SWAP1 JUMPDEST PUSH3 0x501 JUMPI JUMPDEST POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 NOT ADD SWAP1 DUP4 SWAP1 PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP3 DUP3 MOD BYTE DUP4 MSTORE8 DIV SWAP2 DUP3 ISZERO PUSH3 0x534 JUMPI SWAP2 SWAP1 DUP3 PUSH3 0x4F4 JUMP JUMPDEST PUSH3 0x4FA JUMP JUMPDEST SWAP2 PUSH1 0x1 ADD SWAP2 PUSH3 0x4B2 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x64 PUSH1 0x2 SWAP2 DIV SWAP2 ADD SWAP2 PUSH3 0x4A6 JUMP JUMPDEST PUSH1 0x4 SWAP2 SWAP4 SWAP3 DIV SWAP2 ADD SWAP2 CODESIZE PUSH3 0x49A JUMP JUMPDEST PUSH1 0x8 SWAP2 SWAP4 SWAP3 DIV SWAP2 ADD SWAP2 CODESIZE PUSH3 0x48C JUMP JUMPDEST PUSH1 0x10 SWAP2 SWAP4 SWAP3 DIV SWAP2 ADD SWAP2 CODESIZE PUSH3 0x47C JUMP JUMPDEST PUSH1 0x20 SWAP2 SWAP4 SWAP3 DIV SWAP2 ADD SWAP2 CODESIZE PUSH3 0x469 JUMP JUMPDEST PUSH1 0x40 SWAP4 POP DUP2 DIV SWAP2 POP CODESIZE PUSH3 0x44F JUMP INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x1D JUMPI JUMPDEST POP CALLDATASIZE ISZERO PUSH2 0x1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x10A38F5 EQ PUSH2 0x2F64 JUMPI POP DUP1 PUSH4 0x5C1F502 EQ PUSH2 0x2F1B JUMPI DUP1 PUSH4 0x7388DBA EQ PUSH2 0x2C43 JUMPI DUP1 PUSH4 0x917E776 EQ PUSH2 0x2BFD JUMPI DUP1 PUSH4 0x17906C2E EQ PUSH2 0x2BDF JUMPI DUP1 PUSH4 0x1D0B4AF5 EQ PUSH2 0x2B0F JUMPI DUP1 PUSH4 0x3D876D5D EQ PUSH2 0x22D1 JUMPI DUP1 PUSH4 0x4C38D877 EQ PUSH2 0x22A1 JUMPI DUP1 PUSH4 0x4E69D560 EQ PUSH2 0x2279 JUMPI DUP1 PUSH4 0x52A6CB4A EQ PUSH2 0x2260 JUMPI DUP1 PUSH4 0x54FD4D50 EQ PUSH2 0x2156 JUMPI DUP1 PUSH4 0x5AD4E170 EQ PUSH2 0x2129 JUMPI DUP1 PUSH4 0x5C63ED69 EQ PUSH2 0x20F9 JUMPI DUP1 PUSH4 0x729E2EB1 EQ PUSH2 0x2029 JUMPI DUP1 PUSH4 0x7ABE914D EQ PUSH2 0x1DCA JUMPI DUP1 PUSH4 0x8C6838BA EQ PUSH2 0x1D7E JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1D55 JUMPI DUP1 PUSH4 0x8F287DC2 EQ PUSH2 0x12D0 JUMPI DUP1 PUSH4 0x8F903C79 EQ PUSH2 0xFBC JUMPI DUP1 PUSH4 0xD24E0C87 EQ PUSH2 0xF9E JUMPI DUP1 PUSH4 0xD2AF47AB EQ PUSH2 0x2A8 JUMPI DUP1 PUSH4 0xED70D5D5 EQ PUSH2 0x1ED JUMPI DUP1 PUSH4 0xF2D7DBB6 EQ PUSH2 0x155 JUMPI PUSH4 0xFAEB5E17 EQ PUSH2 0x132 JUMPI CODESIZE PUSH2 0xF JUMP JUMPDEST CALLVALUE PUSH2 0x150 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x150 JUMPI PUSH1 0x20 PUSH1 0xB SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x150 JUMPI PUSH2 0x163 CALLDATASIZE PUSH2 0x35F3 JUMP JUMPDEST SWAP1 PUSH1 0xFF PUSH1 0x8 SLOAD AND SWAP1 PUSH1 0x3 DUP3 LT ISZERO PUSH2 0x1D7 JUMPI PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x1D7 JUMPI PUSH1 0x20 SWAP3 PUSH2 0x18E PUSH2 0x1A0 SWAP4 DUP4 EQ PUSH2 0x395F JUMP JUMPDEST PUSH2 0x198 CALLER DUP4 PUSH2 0x3AD9 JUMP JUMPDEST SWAP2 CALLER SWAP1 PUSH2 0x4F22 JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 CALLER SWAP1 DUP3 AND SUB PUSH2 0x1C3 JUMPI POP DUP1 PUSH1 0xC SSTORE JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0xA SLOAD AND CALLER SUB PUSH2 0x1BB JUMPI JUMPDEST DUP1 PUSH1 0xB SSTORE PUSH2 0x1BB JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0x150 JUMPI PUSH2 0x1FB CALLDATASIZE PUSH2 0x35C0 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x8 SWAP4 SWAP3 SWAP4 SLOAD AND PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x1D7 JUMPI PUSH1 0x3 DUP4 LT ISZERO PUSH2 0x1D7 JUMPI PUSH2 0x221 SWAP1 DUP4 EQ PUSH2 0x395F JUMP JUMPDEST DUP2 PUSH1 0x0 MSTORE PUSH1 0x1A PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 CALLER PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE DUP1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD LT PUSH2 0x270 JUMPI PUSH1 0x20 SWAP3 PUSH2 0x250 SWAP3 CALLER SWAP1 PUSH2 0x4F22 JUMP JUMPDEST PUSH1 0x9 SLOAD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SUB PUSH2 0x1CE JUMPI DUP1 PUSH1 0xC SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x4E4F545F454E4F5547485F5354414B45 PUSH1 0x80 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH2 0x120 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x150 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x150 JUMPI PUSH2 0x2D4 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x363D JUMP JUMPDEST PUSH1 0x5 PUSH1 0x24 CALLDATALOAD LT ISZERO PUSH2 0x150 JUMPI PUSH1 0x5 PUSH1 0x44 CALLDATALOAD LT ISZERO PUSH2 0x150 JUMPI PUSH1 0x3 PUSH1 0xA4 CALLDATALOAD LT ISZERO PUSH2 0x150 JUMPI PUSH1 0xC4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 SUB PUSH2 0x150 JUMPI PUSH1 0xE4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 SUB PUSH2 0x150 JUMPI PUSH2 0x104 CALLDATALOAD ISZERO ISZERO PUSH2 0x104 CALLDATALOAD SUB PUSH2 0x150 JUMPI PUSH2 0x332 PUSH2 0x38EB JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x1 PUSH1 0xA4 CALLDATALOAD EQ DUP1 ISZERO PUSH2 0xF8E JUMPI JUMPDEST DUP2 SWAP1 DUP1 ISZERO PUSH2 0xF7F JUMPI JUMPDEST PUSH2 0x355 SWAP2 POP PUSH2 0x395F JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x150 JUMPI PUSH1 0x14 SLOAD PUSH1 0x40 MLOAD PUSH4 0x122643F3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0xE4 CALLDATALOAD DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP1 SWAP2 PUSH1 0x20 SWAP2 DUP4 SWAP2 PUSH1 0x24 SWAP2 DUP4 SWAP2 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xE30 JUMPI PUSH1 0x0 SWAP2 PUSH2 0xF45 JUMPI JUMPDEST POP ISZERO PUSH2 0xF0F JUMPI PUSH1 0xFF PUSH1 0x4 SLOAD AND PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x1D7 JUMPI PUSH1 0x0 MSTORE PUSH1 0x19 PUSH1 0x20 MSTORE PUSH2 0x3D5 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x36B9 JUMP JUMPDEST PUSH1 0x84 CALLDATALOAD ISZERO PUSH2 0xED6 JUMPI PUSH1 0x64 CALLDATALOAD ISZERO PUSH2 0xEA2 JUMPI PUSH2 0x104 CALLDATALOAD ISZERO PUSH2 0xE3C JUMPI PUSH2 0x1D7 JUMPI PUSH1 0xA4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x1A PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0xE4 CALLDATALOAD AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH2 0x426 PUSH1 0x84 CALLDATALOAD PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD LT ISZERO PUSH2 0x36F6 JUMP JUMPDEST PUSH1 0x84 CALLDATALOAD JUMPDEST PUSH2 0x435 PUSH1 0x44 CALLDATALOAD PUSH2 0x3326 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x44 CALLDATALOAD AND PUSH1 0x0 MSTORE PUSH1 0x18 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD SWAP2 PUSH1 0xFF PUSH1 0x4 SLOAD AND SWAP2 PUSH1 0x8 DUP4 LT ISZERO PUSH2 0x1D7 JUMPI PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x19 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x1 DUP1 DUP7 MSTORE PUSH32 0xFC941C3961FB6541DA34150022CDDF959DA0FB2353866A6BFBD249C2DA092914 DUP1 SLOAD DUP4 AND DUP3 OR SWAP1 SSTORE PUSH1 0x4 DUP1 SLOAD SWAP1 SWAP3 AND OR DUP2 SSTORE PUSH1 0x14 SLOAD SWAP2 MLOAD PUSH4 0x3BCAA1D9 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0xE4 CALLDATALOAD DUP2 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP5 SWAP2 DUP6 SWAP2 PUSH1 0x24 SWAP2 DUP4 SWAP2 AND GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0xE30 JUMPI PUSH1 0x0 SWAP4 PUSH2 0xD7D JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP4 PUSH2 0x4F8 DUP6 PUSH2 0x324B JUMP JUMPDEST PUSH1 0x1 DUP6 MSTORE PUSH2 0x507 PUSH1 0x24 CALLDATALOAD PUSH2 0x3326 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH1 0x20 DUP7 ADD MSTORE TIMESTAMP PUSH1 0x40 DUP7 ADD MSTORE PUSH1 0x0 PUSH1 0x60 DUP7 ADD MSTORE PUSH1 0x80 DUP6 ADD MSTORE PUSH2 0x530 PUSH1 0xA4 CALLDATALOAD PUSH1 0xA0 DUP7 ADD PUSH2 0x3330 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x53D DUP3 PUSH2 0x324B JUMP JUMPDEST PUSH1 0x0 DUP3 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0xE4 CALLDATALOAD AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x574 PUSH2 0x39EF JUMP JUMPDEST PUSH2 0x57C PUSH2 0x39EF JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP4 PUSH2 0x58A DUP6 PUSH2 0x3230 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x40 MLOAD SWAP4 PUSH2 0x5A3 DUP6 PUSH2 0x3230 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x40 MLOAD SWAP2 PUSH2 0x5BC DUP4 PUSH2 0x3266 JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x20 DUP4 ADD MSTORE DUP1 MLOAD PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x20 DUP2 ADD MLOAD DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x9DB JUMPI PUSH2 0x607 PUSH1 0x2 SLOAD PUSH2 0x2F90 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0xD14 JUMPI JUMPDEST POP PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0xC9B JUMPI PUSH1 0x40 SWAP4 SWAP3 SWAP2 PUSH1 0x0 SWAP2 DUP4 PUSH2 0xC90 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x2 SSTORE JUMPDEST ADD MLOAD DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x9DB JUMPI DUP2 SWAP1 PUSH2 0x663 PUSH1 0x3 SLOAD PUSH2 0x2F90 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0xC19 JUMPI JUMPDEST POP PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0xBA1 JUMPI PUSH1 0x0 SWAP3 PUSH2 0xB96 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x3 SSTORE JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD DUP1 MLOAD DUP1 MLOAD SWAP1 PUSH1 0x8 DUP3 LT ISZERO PUSH2 0x1D7 JUMPI PUSH2 0x6B7 PUSH1 0xA0 SWAP3 PUSH2 0x3782 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH2 0x6C5 DUP2 PUSH2 0x3326 JUMP JUMPDEST PUSH2 0x6CE DUP2 PUSH2 0x3326 JUMP JUMPDEST PUSH2 0xFF00 PUSH1 0x4 SLOAD SWAP2 PUSH1 0x8 SHL AND SWAP1 PUSH2 0xFF00 NOT AND OR PUSH1 0x4 SSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x5 SSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x6 SSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x7 SSTORE ADD MLOAD SWAP1 PUSH1 0x3 DUP3 LT ISZERO PUSH2 0x1D7 JUMPI PUSH1 0x40 SWAP2 PUSH1 0xFF DUP1 NOT PUSH1 0x8 SLOAD AND SWAP2 AND OR PUSH1 0x8 SSTORE PUSH1 0xA0 PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x748 PUSH1 0x1 DUP1 DUP5 SHL SUB DUP3 MLOAD AND PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0x9 SLOAD AND OR PUSH1 0x9 SSTORE JUMP JUMPDEST PUSH2 0x774 PUSH1 0x1 DUP1 DUP5 SHL SUB PUSH1 0x20 DUP4 ADD MLOAD AND PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0xA SLOAD AND OR PUSH1 0xA SSTORE JUMP JUMPDEST DUP4 DUP2 ADD MLOAD PUSH1 0xB SSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0xC SSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0xD SSTORE ADD MLOAD PUSH1 0xE SSTORE ADD MLOAD SWAP1 DUP2 MLOAD SWAP2 DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x9DB JUMPI PUSH2 0x7B1 PUSH1 0xF SLOAD PUSH2 0x2F90 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0xB43 JUMPI JUMPDEST POP PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 EQ PUSH2 0xAD1 JUMPI DUP2 SWAP3 SWAP4 SWAP5 PUSH1 0x0 SWAP3 PUSH2 0xAC6 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0xF SSTORE JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x9DB JUMPI PUSH2 0x80B PUSH1 0x10 SLOAD PUSH2 0x2F90 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0xA73 JUMPI JUMPDEST POP PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x9FC JUMPI PUSH1 0x40 SWAP4 SWAP3 SWAP2 PUSH1 0x0 SWAP2 DUP4 PUSH2 0x9F1 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x10 SSTORE JUMPDEST ADD MLOAD SWAP1 DUP2 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x9DB JUMPI PUSH1 0x11 SWAP2 PUSH2 0x868 DUP4 SLOAD PUSH2 0x2F90 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x989 JUMPI JUMPDEST POP PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 EQ PUSH2 0x919 JUMPI DUP2 SWAP3 SWAP4 SWAP5 PUSH1 0x0 SWAP3 PUSH2 0x90E JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR DUP3 SSTORE JUMPDEST PUSH1 0x13 SLOAD SWAP2 PUSH1 0x0 NOT DUP4 EQ PUSH2 0x8FA JUMPI POP PUSH1 0x1 PUSH2 0x8F6 SWAP3 ADD PUSH1 0x13 SSTORE PUSH32 0x6E8F9F12846CF7BA30ACDD742F3EAE58C49BEFEED93F00D60DE3BD4F7D09F223 PUSH1 0x40 MLOAD DUP1 PUSH2 0x8E7 DUP5 DUP3 PUSH2 0x3684 JUMP JUMPDEST SUB SWAP1 LOG1 PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x3684 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADD MLOAD SWAP1 POP DUP5 DUP1 PUSH2 0x88B JUMP JUMPDEST PUSH1 0x1F NOT DUP3 AND SWAP1 DUP5 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x537A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x971 JUMPI POP SWAP6 DUP4 PUSH1 0x1 SWAP6 SWAP7 SWAP8 LT PUSH2 0x958 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD DUP3 SSTORE PUSH2 0x8A0 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP5 DUP1 DUP1 PUSH2 0x94B JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP7 DUP12 ADD MLOAD DUP2 SSTORE ADD SWAP5 ADD SWAP3 ADD PUSH2 0x936 JUMP JUMPDEST DUP4 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x537A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 PUSH1 0x20 DUP5 LT PUSH2 0x9D1 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x9C5 JUMPI POP PUSH2 0x871 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x9B8 JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x9AF JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADD MLOAD SWAP1 POP DUP6 DUP1 PUSH2 0x831 JUMP JUMPDEST SWAP1 PUSH1 0x1F NOT DUP4 AND SWAP2 PUSH1 0x10 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x539A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0xA5B JUMPI POP SWAP2 PUSH1 0x1 SWAP4 SWAP2 DUP6 PUSH1 0x40 SWAP8 SWAP7 SWAP5 LT PUSH2 0xA42 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x10 SSTORE PUSH2 0x847 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP6 DUP1 DUP1 PUSH2 0xA34 JUMP JUMPDEST SWAP3 SWAP4 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP8 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD PUSH2 0xA1B JUMP JUMPDEST PUSH1 0x10 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x539A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 PUSH1 0x20 DUP6 LT PUSH2 0xABC JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0xAB0 JUMPI POP PUSH2 0x814 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xAA3 JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0xA9A JUMP JUMPDEST ADD MLOAD SWAP1 POP DUP5 DUP1 PUSH2 0x7D4 JUMP JUMPDEST PUSH1 0x1F NOT DUP3 AND SWAP1 PUSH1 0xF PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x53BA DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0xB2B JUMPI POP SWAP6 DUP4 PUSH1 0x1 SWAP6 SWAP7 SWAP8 LT PUSH2 0xB12 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0xF SSTORE PUSH2 0x7EA JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP5 DUP1 DUP1 PUSH2 0xB04 JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP7 DUP12 ADD MLOAD DUP2 SSTORE ADD SWAP5 ADD SWAP3 ADD PUSH2 0xAEF JUMP JUMPDEST PUSH1 0xF PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x53BA DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 PUSH1 0x20 DUP5 LT PUSH2 0xB8C JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0xB80 JUMPI POP PUSH2 0x7BA JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xB73 JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0xB6A JUMP JUMPDEST ADD MLOAD SWAP1 POP DUP4 DUP1 PUSH2 0x683 JUMP JUMPDEST SWAP3 POP PUSH1 0x3 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x535A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP4 JUMPDEST PUSH1 0x1F NOT DUP5 AND DUP6 LT PUSH2 0xBFE JUMPI PUSH1 0x1 SWAP5 POP DUP4 PUSH1 0x1F NOT DUP2 AND LT PUSH2 0xBE5 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x3 SSTORE PUSH2 0x699 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP4 DUP1 DUP1 PUSH2 0xBD7 JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH2 0xBBC JUMP JUMPDEST SWAP1 SWAP2 POP PUSH1 0x3 PUSH1 0x0 MSTORE PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x535A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE ADD SWAP1 PUSH1 0x20 DUP5 LT PUSH2 0xC7A JUMPI JUMPDEST SWAP1 PUSH1 0x1F DUP5 SWAP4 SWAP3 ADD PUSH1 0x5 SHR PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x535A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0xC6B JUMPI POP PUSH2 0x66C JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE DUP5 SWAP4 POP PUSH1 0x1 ADD PUSH2 0xC5E JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x535A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 POP PUSH2 0xC42 JUMP JUMPDEST ADD MLOAD SWAP1 POP DUP6 DUP1 PUSH2 0x62D JUMP JUMPDEST SWAP1 PUSH1 0x2 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x533A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 PUSH1 0x0 JUMPDEST PUSH1 0x1F NOT DUP6 AND DUP2 LT PUSH2 0xCFC JUMPI POP SWAP2 DUP4 SWAP2 PUSH1 0x1 SWAP4 PUSH1 0x40 SWAP7 SWAP6 PUSH1 0x1F NOT DUP2 AND LT PUSH2 0xCE3 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x2 SSTORE PUSH2 0x643 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP6 DUP1 DUP1 PUSH2 0xCD5 JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP7 DUP6 ADD MLOAD DUP2 SSTORE ADD SWAP5 ADD SWAP3 ADD PUSH2 0xCB4 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 MSTORE PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x533A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE ADD PUSH1 0x20 DUP5 LT PUSH2 0xD68 JUMPI JUMPDEST PUSH1 0x1F DUP3 ADD PUSH1 0x5 SHR PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x533A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE ADD DUP2 LT PUSH2 0xD5C JUMPI POP PUSH2 0x610 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xD39 JUMP JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x533A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xD39 JUMP JUMPDEST SWAP1 SWAP3 POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP4 RETURNDATACOPY PUSH2 0xD90 DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST PUSH1 0x20 DUP3 DUP3 DUP2 ADD SUB SLT PUSH2 0x150 JUMPI DUP2 MLOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT PUSH2 0x150 JUMPI PUSH1 0x60 DUP4 DUP3 ADD DUP4 DUP4 ADD SUB SLT PUSH2 0x150 JUMPI PUSH1 0x40 MLOAD SWAP3 PUSH2 0xDC8 DUP5 PUSH2 0x3230 JUMP JUMPDEST PUSH2 0xDD3 DUP2 DUP4 ADD PUSH2 0x3999 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP2 DUP4 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x150 JUMPI PUSH2 0xDFB SWAP1 DUP5 DUP5 ADD SWAP1 DUP4 DUP6 ADD ADD PUSH2 0x39AD JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP2 DUP4 ADD ADD MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x150 JUMPI PUSH2 0xE24 SWAP4 DUP4 ADD SWAP3 ADD ADD PUSH2 0x39AD JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP2 DUP5 PUSH2 0x4EA JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x1D7 JUMPI PUSH1 0xA4 CALLDATALOAD ISZERO PUSH2 0xE62 JUMPI JUMPDEST PUSH2 0xE5D PUSH1 0x84 CALLDATALOAD PUSH1 0xC4 CALLDATALOAD PUSH1 0xE4 CALLDATALOAD PUSH1 0xA4 CALLDATALOAD PUSH2 0x3D7E JUMP JUMPDEST PUSH2 0x42A JUMP JUMPDEST CALLVALUE PUSH1 0x84 CALLDATALOAD EQ PUSH2 0xE49 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x57524F4E475F4D53475F56414C5545 PUSH1 0x88 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x5041594D454E545F5A45524F PUSH1 0xA0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x5354414B455F414D4F554E545F5A45524F PUSH1 0x78 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x1554D15497D393D517D1561254D5 PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0xF77 JUMPI JUMPDEST DUP2 PUSH2 0xF60 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x150 JUMPI PUSH2 0xF71 SWAP1 PUSH2 0x3734 JUMP JUMPDEST DUP4 PUSH2 0x3A7 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0xF53 JUMP JUMPDEST POP PUSH2 0x1D7 JUMPI DUP1 PUSH1 0xA4 CALLDATALOAD ISZERO PUSH2 0x34B JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP PUSH1 0xA4 CALLDATALOAD PUSH1 0x2 EQ PUSH2 0x342 JUMP JUMPDEST CALLVALUE PUSH2 0x150 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x150 JUMPI PUSH1 0x20 PUSH1 0xC SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x150 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x150 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 PUSH1 0x4 CALLDATALOAD DUP3 DUP2 GT PUSH2 0x150 JUMPI PUSH2 0xFEF SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x363D JUMP JUMPDEST PUSH1 0xA SLOAD SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x100A SWAP1 DUP4 AND CALLER EQ PUSH2 0x3B07 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x4 SLOAD AND PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x1D7 JUMPI DUP1 PUSH1 0x0 MSTORE PUSH1 0x19 DUP3 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND DUP1 PUSH2 0x12BC JUMPI JUMPDEST ISZERO PUSH2 0x1288 JUMPI PUSH1 0x24 DUP3 DUP5 PUSH1 0x14 SLOAD AND PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH4 0x122643F3 PUSH1 0xE2 SHL DUP3 MSTORE CALLER PUSH1 0x4 DUP4 ADD MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xE30 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x1253 JUMPI JUMPDEST POP ISZERO PUSH2 0x1218 JUMPI PUSH2 0x107C PUSH1 0x1 SWAP4 CALLER SWAP1 DUP6 SLOAD AND EQ PUSH2 0x3B07 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x19 DUP2 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP3 PUSH1 0xFF NOT SWAP4 DUP5 DUP2 SLOAD AND SWAP1 SSTORE PUSH1 0x3 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP4 DUP6 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x3 DUP5 PUSH1 0x4 SLOAD AND OR PUSH1 0x4 SSTORE DUP1 MLOAD SWAP5 DUP6 GT PUSH2 0x9DB JUMPI PUSH2 0x10C4 PUSH1 0x10 SLOAD PUSH2 0x2F90 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x11C3 JUMPI JUMPDEST POP DUP2 PUSH1 0x1F DUP7 GT PUSH1 0x1 EQ PUSH2 0x1151 JUMPI POP PUSH1 0x3 SWAP5 SWAP3 PUSH1 0x0 SWAP3 DUP5 SWAP3 DUP4 PUSH2 0x1146 JUMPI JUMPDEST POP POP SHL SWAP2 PUSH1 0x0 NOT SWAP1 DUP6 SHL SHR NOT AND OR PUSH1 0x10 SSTORE JUMPDEST PUSH1 0x4 SLOAD AND OR PUSH1 0x4 SSTORE PUSH2 0x1110 PUSH1 0x7 SLOAD TIMESTAMP PUSH2 0x3C81 JUMP JUMPDEST PUSH1 0x6 SSTORE PUSH32 0x61DE5B63673167E253173C50ABDC3FD45371DC3205496F46FDB05A9F7927B574 PUSH1 0x40 MLOAD DUP1 PUSH2 0x1141 DUP2 PUSH2 0x379B JUMP JUMPDEST SUB SWAP1 LOG1 STOP JUMPDEST ADD MLOAD SWAP3 POP DUP7 DUP1 PUSH2 0x10EA JUMP JUMPDEST SWAP1 SWAP5 SWAP2 PUSH1 0x1F NOT DUP4 AND SWAP6 PUSH1 0x10 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x539A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 PUSH1 0x0 SWAP1 JUMPDEST DUP9 DUP3 LT PUSH2 0x11AC JUMPI POP POP DUP4 PUSH1 0x3 SWAP8 LT PUSH2 0x1194 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x10 SSTORE PUSH2 0x10FC JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT DUP4 DUP8 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE DUP5 DUP1 DUP1 PUSH2 0x1186 JUMP JUMPDEST DUP1 DUP8 DUP6 SWAP7 DUP3 SWAP5 SWAP7 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD SWAP1 PUSH2 0x1173 JUMP JUMPDEST PUSH1 0x10 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x539A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x1F DUP8 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 DUP5 DUP9 LT PUSH2 0x120E JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 DUP5 SWAP1 JUMPDEST DUP3 DUP2 LT PUSH2 0x1202 JUMPI POP POP PUSH2 0x10CD JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE ADD DUP5 SWAP1 PUSH2 0x11F4 JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x11E9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x155CD95C88191BD95CC81B9BDD08195E1A5CDD PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 POP DUP3 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x1281 JUMPI JUMPDEST PUSH2 0x126A DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x150 JUMPI PUSH2 0x127B SWAP1 PUSH2 0x3734 JUMP JUMPDEST DUP7 PUSH2 0x1065 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1260 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x57524F4E475F535441545553 PUSH1 0xA0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH1 0x2 DUP2 EQ DUP1 PUSH2 0x1030 JUMPI POP PUSH1 0x3 DUP2 EQ PUSH2 0x1030 JUMP JUMPDEST CALLVALUE PUSH2 0x150 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x150 JUMPI PUSH1 0x4 CALLDATALOAD ISZERO ISZERO PUSH1 0x4 CALLDATALOAD SUB PUSH2 0x150 JUMPI PUSH1 0x9 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1305 CALLER DUP3 EQ PUSH2 0x3B07 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x4 SLOAD AND PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x1D7 JUMPI PUSH1 0x3 SUB PUSH2 0x1D20 JUMPI PUSH1 0x15 SLOAD PUSH1 0x40 MLOAD PUSH4 0x335DED4B PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH1 0x20 DUP2 PUSH1 0x4 DUP2 DUP6 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xE30 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x1CE1 JUMPI JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x28C44A99 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x44 CALLDATALOAD PUSH1 0x4 DUP3 ADD MSTORE SWAP1 PUSH1 0x0 SWAP1 DUP3 SWAP1 PUSH1 0x24 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xE30 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x1BBE JUMPI JUMPDEST POP PUSH1 0xE0 DUP2 ADD MLOAD PUSH2 0x13A4 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 EQ PUSH2 0x3B54 JUMP JUMPDEST PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP2 AND SUB PUSH2 0x1B85 JUMPI PUSH1 0x20 DUP2 DUP2 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0x3EC4F23D PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 DUP3 PUSH1 0x4 DUP2 DUP8 GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0xE30 JUMPI PUSH1 0x0 SWAP3 PUSH2 0x1B51 JUMPI JUMPDEST POP SUB PUSH2 0x1B1B JUMPI PUSH2 0x120 ADD MLOAD SWAP1 DUP2 MLOAD DUP3 ADD SWAP2 PUSH1 0x60 DUP2 DUP5 SUB SLT PUSH2 0x150 JUMPI PUSH2 0x140F PUSH1 0x20 DUP3 ADD PUSH2 0x3734 JUMP JUMPDEST SWAP3 PUSH2 0x141C PUSH1 0x40 DUP4 ADD PUSH2 0x3999 JUMP JUMPDEST SWAP2 PUSH1 0x60 DUP2 ADD MLOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT PUSH2 0x150 JUMPI PUSH2 0x1442 SWAP3 PUSH1 0x20 DUP1 SWAP3 ADD SWAP3 ADD ADD PUSH2 0x39AD JUMP JUMPDEST SWAP1 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SUB PUSH2 0x1AE7 JUMPI PUSH1 0x40 MLOAD PUSH2 0x147F DUP2 PUSH2 0x1471 PUSH1 0x20 DUP3 ADD SWAP5 PUSH1 0x20 DUP7 MSTORE PUSH1 0x40 DUP4 ADD SWAP1 PUSH2 0x345B JUMP JUMPDEST SUB PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x32AF JUMP JUMPDEST MLOAD SWAP1 KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 DUP1 DUP3 ADD MSTORE PUSH1 0xF SLOAD DUP2 PUSH1 0x0 PUSH2 0x149A DUP4 PUSH2 0x2F90 JUMP JUMPDEST SWAP3 DUP4 PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x1 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0x1AC8 JUMPI POP PUSH1 0x1 EQ PUSH2 0x1A7B JUMPI JUMPDEST PUSH2 0x14CA SWAP3 POP SUB PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x32AF JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD KECCAK256 SUB PUSH2 0x1A47 JUMPI PUSH1 0x20 PUSH1 0x4 SWAP2 PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH4 0x18DA0011 PUSH1 0xE0 SHL DUP3 MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xE30 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x1A0D JUMPI JUMPDEST POP PUSH1 0xC SLOAD PUSH1 0x40 MLOAD PUSH4 0x4047E103 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 SWAP3 SWAP1 PUSH1 0x20 DUP2 PUSH1 0x4 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xE30 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x19D9 JUMPI JUMPDEST POP PUSH2 0x2710 PUSH2 0x1543 PUSH2 0x154B SWAP3 DUP7 PUSH2 0x3B96 JUMP JUMPDEST DIV DUP1 SWAP5 PUSH2 0x3BBF JUMP JUMPDEST SWAP4 PUSH1 0x6 SLOAD TIMESTAMP GT DUP1 ISZERO PUSH2 0x19D0 JUMPI JUMPDEST ISZERO PUSH2 0x1872 JUMPI POP PUSH2 0x156F SWAP1 ISZERO ISZERO PUSH1 0x4 CALLDATALOAD ISZERO ISZERO EQ PUSH2 0x3B54 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x9 SLOAD PUSH1 0xC SLOAD PUSH2 0x15AD SWAP3 PUSH2 0x1592 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0xFF AND PUSH2 0x3C8E JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0xA SLOAD SWAP2 SWAP6 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0xFF AND PUSH2 0x3BF8 JUMP JUMPDEST SWAP2 PUSH1 0xFF PUSH1 0x8 SLOAD AND PUSH1 0x3 DUP2 LT ISZERO DUP1 PUSH2 0x1D7 JUMPI PUSH1 0x1 DUP3 EQ DUP1 ISZERO SWAP2 DUP2 DUP4 PUSH2 0x1864 JUMPI JUMPDEST DUP2 SWAP1 DUP1 ISZERO PUSH2 0x1857 JUMPI JUMPDEST PUSH2 0x15DF SWAP2 POP PUSH2 0x395F JUMP JUMPDEST PUSH1 0x15 SLOAD PUSH1 0x40 MLOAD PUSH4 0x2EE4B68B PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x4 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xE30 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x181D JUMPI JUMPDEST POP PUSH2 0x17D0 JUMPI PUSH2 0x1D7 JUMPI DUP3 PUSH2 0x16E4 JUMPI POP PUSH2 0x164B SWAP4 PUSH1 0x0 SWAP4 DUP5 SWAP4 POP DUP4 SWAP3 POP DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS CALL PUSH2 0x1645 PUSH2 0x404C JUMP JUMPDEST POP PUSH2 0x407C JUMP JUMPDEST PUSH1 0xB SSTORE PUSH1 0xC SSTORE PUSH1 0x4 CALLDATALOAD ISZERO PUSH2 0x16DD JUMPI PUSH1 0x4 JUMPDEST PUSH1 0xFF PUSH1 0x4 SLOAD AND PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x1D7 JUMPI PUSH1 0x0 MSTORE PUSH1 0x19 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0xFF NOT SWAP2 DUP3 DUP2 SLOAD AND SWAP1 SSTORE PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x1D7 JUMPI PUSH2 0x16AF SWAP2 PUSH1 0xFF DUP3 AND PUSH1 0x0 MSTORE PUSH1 0x19 PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP2 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0x3782 JUMP JUMPDEST PUSH32 0x61DE5B63673167E253173C50ABDC3FD45371DC3205496F46FDB05A9F7927B574 PUSH1 0x40 MLOAD DUP1 PUSH2 0x1141 DUP2 PUSH2 0x379B JUMP JUMPDEST PUSH1 0x5 PUSH2 0x165C JUMP JUMPDEST PUSH1 0x0 SWAP1 SWAP2 PUSH2 0x17C3 JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x17B0 JUMPI JUMPDEST POP SWAP3 PUSH1 0x20 SWAP3 SWAP2 PUSH2 0x1706 PUSH2 0x1754 SWAP6 PUSH2 0x395F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH2 0x1718 SWAP1 PUSH2 0x5123 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP1 SWAP4 DUP5 SWAP3 SWAP2 SWAP1 SWAP2 AND SWAP1 DUP3 SWAP1 PUSH1 0x0 SWAP1 DUP3 SWAP1 PUSH1 0x44 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0xE30 JUMPI PUSH1 0x0 SWAP1 PUSH2 0x1775 JUMPI JUMPDEST PUSH2 0x1770 SWAP2 POP PUSH2 0x50E5 JUMP JUMPDEST PUSH2 0x164B JUMP JUMPDEST POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x17A8 JUMPI JUMPDEST DUP2 PUSH2 0x178F PUSH1 0x20 SWAP4 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x150 JUMPI PUSH2 0x17A3 PUSH2 0x1770 SWAP2 PUSH2 0x3734 JUMP JUMPDEST PUSH2 0x1766 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x1782 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 SWAP2 PUSH2 0x1D7 JUMPI SWAP1 PUSH1 0x0 PUSH1 0x20 PUSH2 0x16F4 JUMP JUMPDEST POP POP PUSH1 0x2 DUP2 EQ PUSH1 0x0 PUSH2 0x16ED JUMP JUMPDEST SWAP2 POP SWAP2 SWAP3 SWAP4 POP PUSH2 0x1D7 JUMPI PUSH1 0x2 DUP3 SUB PUSH2 0x17F3 JUMPI POP POP PUSH2 0x17ED SWAP1 PUSH2 0x43B8 JUMP JUMPDEST POP PUSH2 0x164B JUMP JUMPDEST ISZERO PUSH2 0x1802 JUMPI POP PUSH2 0x17ED SWAP1 PUSH2 0x4E6A JUMP JUMPDEST ISZERO PUSH2 0x180D JUMPI POP PUSH2 0x164B JUMP JUMPDEST PUSH2 0x1816 SWAP1 PUSH2 0x484F JUMP JUMPDEST POP DUP3 PUSH2 0x17ED JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x184F JUMPI JUMPDEST DUP2 PUSH2 0x1838 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x150 JUMPI PUSH2 0x1849 SWAP1 PUSH2 0x3734 JUMP JUMPDEST DUP10 PUSH2 0x1614 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x182B JUMP JUMPDEST POP PUSH2 0x1D7 JUMPI DUP1 DUP5 ISZERO PUSH2 0x15D5 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP PUSH1 0x2 DUP5 EQ PUSH2 0x15CC JUMP JUMPDEST SWAP4 POP SWAP2 POP POP PUSH1 0x4 CALLDATALOAD ISZERO PUSH2 0x1881 JUMPI STOP JUMPDEST PUSH2 0x1892 SWAP1 ISZERO ISZERO PUSH1 0x4 CALLDATALOAD ISZERO ISZERO EQ PUSH2 0x3B54 JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x1995 JUMPI PUSH1 0x12 SLOAD SWAP2 PUSH8 0xDE0B6B3A7640000 SWAP3 DUP4 DUP2 LT ISZERO PUSH2 0x1958 JUMPI PUSH1 0x5 SWAP4 PUSH2 0x18C5 PUSH2 0x18D3 SWAP3 DUP6 PUSH2 0x3B96 JUMP JUMPDEST DIV DUP1 SWAP3 PUSH1 0xFF PUSH1 0x8 SLOAD AND PUSH2 0x40B6 JUMP JUMPDEST PUSH1 0xC SSTORE PUSH1 0x8 SLOAD PUSH1 0xA SLOAD PUSH2 0x18F4 SWAP2 DUP5 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0xFF AND PUSH2 0x40B6 JUMP JUMPDEST PUSH1 0xB SSTORE PUSH1 0xFF NOT SWAP2 DUP4 DUP4 PUSH1 0x4 SLOAD AND OR PUSH1 0x4 SSTORE PUSH1 0xD SSTORE PUSH1 0xE SSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x19 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 DUP3 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x4 SLOAD AND OR PUSH1 0x4 SSTORE PUSH32 0xB0EC4EF3EE1A79EFFA677AF7A82A3A875B4D438307FB7E589A58966E3B913F2F PUSH1 0x40 MLOAD DUP1 PUSH2 0x1141 DUP2 PUSH2 0x379B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0xA0AA9C92A6909A8A9CA8BEA482A8929EBE90928E9 PUSH1 0x5B SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0xA0AA9C92A6909A8A9CA8BEA89E9EBE90928E9 PUSH1 0x6B SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATALOAD PUSH2 0x1558 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x1A05 JUMPI JUMPDEST DUP2 PUSH2 0x19F4 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x150 JUMPI MLOAD PUSH2 0x2710 PUSH2 0x1532 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x19E7 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x1A3F JUMPI JUMPDEST DUP2 PUSH2 0x1A28 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x150 JUMPI PUSH2 0x1A39 SWAP1 PUSH2 0x3999 JUMP JUMPDEST DUP4 PUSH2 0x14FD JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x1A1B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x1253959053125117D413D4D5 PUSH1 0xA2 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP SWAP1 PUSH1 0xF PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x53BA DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x1AAE JUMPI POP POP SWAP1 PUSH1 0x60 PUSH2 0x14CA SWAP3 DUP3 ADD ADD PUSH2 0x14B7 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x60 DUP5 DUP8 ADD ADD MSTORE DUP5 SWAP4 POP PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x1A96 JUMP JUMPDEST PUSH1 0x60 SWAP3 POP PUSH2 0x14CA SWAP5 SWAP2 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD PUSH2 0x14B7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x1253959053125117D1915151 PUSH1 0xA2 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x494E56414C49445F534348454D41 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 SWAP2 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x1B7D JUMPI JUMPDEST DUP2 PUSH2 0x1B6D PUSH1 0x20 SWAP4 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x150 JUMPI MLOAD SWAP1 DUP6 PUSH2 0x13E8 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x1B60 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x1253959053125117D49150D25412515395 PUSH1 0x7A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP4 RETURNDATACOPY PUSH2 0x1BD0 DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST PUSH1 0x20 DUP3 DUP3 DUP2 ADD SUB SLT PUSH2 0x150 JUMPI DUP2 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x150 JUMPI PUSH2 0x140 DUP3 DUP5 ADD DUP3 DUP6 ADD SUB SLT PUSH2 0x150 JUMPI PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0x140 DUP2 ADD LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH2 0x140 DUP7 ADD GT OR PUSH2 0x9DB JUMPI PUSH2 0x140 DUP5 ADD PUSH1 0x40 SWAP1 DUP2 MSTORE DUP2 DUP5 ADD DUP1 MLOAD DUP7 MSTORE PUSH1 0x20 DUP1 DUP3 ADD MLOAD SWAP1 DUP8 ADD MSTORE PUSH2 0x1C3F SWAP2 ADD PUSH2 0x3B40 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x1C52 PUSH1 0x60 DUP5 DUP4 ADD ADD PUSH2 0x3B40 JUMP JUMPDEST PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x1C65 PUSH1 0x80 DUP5 DUP4 ADD ADD PUSH2 0x3B40 JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP4 DUP3 ADD ADD MLOAD PUSH1 0xA0 DUP6 ADD MSTORE PUSH2 0x1C84 PUSH1 0xC0 DUP5 DUP4 ADD ADD PUSH2 0x3999 JUMP JUMPDEST PUSH1 0xC0 DUP6 ADD MSTORE PUSH2 0x1C97 PUSH1 0xE0 DUP5 DUP4 ADD ADD PUSH2 0x3999 JUMP JUMPDEST PUSH1 0xE0 DUP6 ADD MSTORE PUSH2 0x100 PUSH2 0x1CAC DUP2 DUP6 DUP5 ADD ADD PUSH2 0x3734 JUMP JUMPDEST SWAP1 DUP6 ADD MSTORE PUSH2 0x120 SWAP3 DUP4 DUP2 DUP4 ADD ADD MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x150 JUMPI PUSH2 0x1CD7 SWAP4 DUP4 ADD SWAP3 ADD ADD PUSH2 0x39AD JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE DUP4 PUSH2 0x138A JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x1D18 JUMPI JUMPDEST DUP2 PUSH2 0x1CFC PUSH1 0x20 SWAP4 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x150 JUMPI PUSH1 0x0 PUSH2 0x1D11 PUSH1 0x24 SWAP3 PUSH2 0x3999 JUMP JUMPDEST SWAP2 POP PUSH2 0x134F JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x1CEF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x1393D517D4D550935255151151 PUSH1 0x9A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x150 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x150 JUMPI PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x150 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x150 JUMPI PUSH2 0x1D97 PUSH2 0x38EB JUMP JUMPDEST POP PUSH2 0x8F6 PUSH1 0x40 MLOAD PUSH2 0x1DA7 DUP2 PUSH2 0x3266 JUMP JUMPDEST PUSH2 0x1DAF PUSH2 0x32D0 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x1DB9 PUSH2 0x333C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x3684 JUMP JUMPDEST CALLVALUE PUSH2 0x150 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x150 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 PUSH1 0x4 CALLDATALOAD DUP3 DUP2 GT PUSH2 0x150 JUMPI PUSH2 0x1DFD SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x363D JUMP JUMPDEST SWAP1 PUSH1 0xFF PUSH1 0x4 SLOAD AND PUSH1 0x8 DUP2 LT ISZERO DUP1 PUSH2 0x1D7 JUMPI DUP2 PUSH1 0x0 MSTORE PUSH1 0x19 DUP4 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND DUP1 PUSH2 0x1FED JUMPI JUMPDEST PUSH2 0x1E2E SWAP1 PUSH2 0x36B9 JUMP JUMPDEST PUSH2 0x1E44 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0xA SLOAD AND CALLER EQ ISZERO PUSH2 0x3741 JUMP JUMPDEST PUSH2 0x1D7 JUMPI PUSH1 0x4 SUB PUSH2 0x1FB9 JUMPI DUP2 MLOAD SWAP3 DUP4 GT PUSH2 0x9DB JUMPI PUSH2 0x1E63 PUSH1 0x11 SLOAD PUSH2 0x2F90 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x1F67 JUMPI JUMPDEST POP DUP1 SWAP3 PUSH1 0x1F DUP2 GT PUSH1 0x1 EQ PUSH2 0x1EF8 JUMPI DUP1 SWAP2 SWAP3 SWAP4 PUSH1 0x0 SWAP2 PUSH2 0x1EED JUMPI JUMPDEST POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x11 SSTORE JUMPDEST PUSH1 0x6 PUSH1 0xFF NOT PUSH1 0x4 SLOAD AND OR PUSH1 0x4 SSTORE PUSH32 0x76C6A8F0836A14A631DC3A45FC0C49D4DD3FC4147167329BA4220BA2664CCAF0 PUSH1 0x40 MLOAD DUP1 PUSH2 0x1ED6 DUP2 PUSH2 0x379B JUMP JUMPDEST SUB SWAP1 LOG1 PUSH2 0x8F6 PUSH1 0x40 MLOAD SWAP3 DUP3 DUP5 SWAP4 DUP5 MSTORE DUP4 ADD SWAP1 PUSH2 0x345B JUMP JUMPDEST SWAP1 POP DUP4 ADD MLOAD DUP5 PUSH2 0x1E86 JUMP JUMPDEST PUSH1 0x1F NOT DUP2 AND SWAP4 PUSH1 0x11 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x537A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 JUMPDEST DUP7 DUP2 LT PUSH2 0x1F50 JUMPI POP DUP3 PUSH1 0x1 SWAP5 SWAP6 SWAP7 LT PUSH2 0x1F37 JUMPI JUMPDEST POP POP DUP2 SHL ADD PUSH1 0x11 SSTORE PUSH2 0x1E9B JUMP JUMPDEST DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP5 DUP1 PUSH2 0x1F2A JUMP JUMPDEST SWAP1 SWAP2 DUP5 PUSH1 0x1 DUP2 SWAP3 DUP6 DUP10 ADD MLOAD DUP2 SSTORE ADD SWAP4 ADD SWAP2 ADD PUSH2 0x1F16 JUMP JUMPDEST PUSH1 0x11 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x537A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 DUP4 DUP7 LT PUSH2 0x1FAF JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x1FA3 JUMPI POP PUSH2 0x1E6C JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1F96 JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x1F8D JUMP JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x1393D517D19253905312569151 PUSH1 0x9A SHL PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP POP PUSH1 0x0 PUSH1 0x3 DUP3 EQ DUP1 ISZERO PUSH2 0x201B JUMPI JUMPDEST DUP2 SWAP1 DUP1 ISZERO PUSH2 0x200C JUMPI JUMPDEST SWAP1 POP PUSH2 0x1E25 JUMP JUMPDEST POP PUSH2 0x1D7 JUMPI DUP1 PUSH1 0x4 DUP4 EQ PUSH2 0x2005 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP PUSH1 0x6 DUP3 EQ PUSH2 0x1FFC JUMP JUMPDEST CALLVALUE PUSH2 0x150 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x150 JUMPI PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0xF SLOAD PUSH2 0x204B DUP2 PUSH2 0x2F90 JUMP JUMPDEST DUP1 DUP5 MSTORE SWAP1 PUSH1 0x1 SWAP1 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x20D2 JUMPI POP PUSH1 0x1 EQ PUSH2 0x2089 JUMPI JUMPDEST PUSH2 0x8F6 DUP5 PUSH2 0x2075 DUP2 DUP7 SUB DUP3 PUSH2 0x32AF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x345B JUMP JUMPDEST PUSH1 0xF PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP3 POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x53BA DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE JUMPDEST DUP3 DUP5 LT PUSH2 0x20BA JUMPI POP POP POP DUP2 ADD PUSH1 0x20 ADD PUSH2 0x2075 DUP3 PUSH2 0x2065 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x20 DUP6 DUP8 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP4 ADD SWAP3 DUP2 ADD PUSH2 0x20A2 JUMP JUMPDEST PUSH1 0xFF NOT AND PUSH1 0x20 DUP1 DUP8 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 ISZERO ISZERO PUSH1 0x5 SHL DUP6 ADD SWAP1 SWAP3 ADD SWAP3 POP PUSH2 0x2075 SWAP2 POP DUP4 SWAP1 POP PUSH2 0x2065 JUMP JUMPDEST CALLVALUE PUSH2 0x150 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x150 JUMPI PUSH1 0x8 SLOAD PUSH1 0xA SLOAD PUSH1 0x20 SWAP2 PUSH2 0x1BB SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0xFF AND PUSH2 0x3AD9 JUMP JUMPDEST CALLVALUE PUSH2 0x150 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x150 JUMPI PUSH1 0x20 PUSH2 0x2144 PUSH2 0x3A0F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x150 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x150 JUMPI PUSH2 0x2190 PUSH32 0x0 PUSH2 0x51B1 JUMP JUMPDEST PUSH2 0x21B9 PUSH32 0x0 PUSH2 0x51B1 JUMP JUMPDEST SWAP1 PUSH2 0x224C PUSH1 0x22 PUSH2 0x21E8 PUSH32 0x0 PUSH2 0x51B1 JUMP JUMPDEST SWAP4 PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP2 DUP6 MLOAD PUSH2 0x2203 DUP2 PUSH1 0x20 SWAP9 DUP10 DUP1 DUP9 ADD SWAP2 ADD PUSH2 0x3438 JUMP JUMPDEST DUP4 ADD SWAP1 PUSH1 0x17 PUSH1 0xF9 SHL SWAP2 DUP3 DUP9 DUP3 ADD MSTORE PUSH2 0x2224 DUP3 MLOAD DUP1 SWAP4 DUP11 PUSH1 0x21 DUP6 ADD SWAP2 ADD PUSH2 0x3438 JUMP JUMPDEST ADD SWAP1 PUSH1 0x21 DUP3 ADD MSTORE PUSH2 0x223D DUP3 MLOAD DUP1 SWAP4 DUP9 DUP8 DUP6 ADD SWAP2 ADD PUSH2 0x3438 JUMP JUMPDEST ADD SUB PUSH1 0x2 DUP2 ADD DUP6 MSTORE ADD DUP4 PUSH2 0x32AF JUMP JUMPDEST PUSH2 0x8F6 PUSH1 0x40 MLOAD SWAP3 DUP3 DUP5 SWAP4 DUP5 MSTORE DUP4 ADD SWAP1 PUSH2 0x345B JUMP JUMPDEST CALLVALUE PUSH2 0x150 JUMPI PUSH1 0x20 PUSH2 0x1BB PUSH2 0x2273 CALLDATASIZE PUSH2 0x35F3 JUMP JUMPDEST SWAP1 PUSH2 0x3AD9 JUMP JUMPDEST CALLVALUE PUSH2 0x150 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x150 JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0x4 SLOAD AND PUSH2 0x229F PUSH1 0x40 MLOAD DUP1 SWAP3 PUSH2 0x34BF JUMP JUMPDEST RETURN JUMPDEST CALLVALUE PUSH2 0x150 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x150 JUMPI PUSH1 0x8 SLOAD PUSH1 0x9 SLOAD PUSH1 0x20 SWAP2 PUSH2 0x1BB SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0xFF AND PUSH2 0x3AD9 JUMP JUMPDEST CALLVALUE PUSH2 0x150 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x150 JUMPI PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH2 0x22FB SWAP1 DUP3 AND CALLER EQ PUSH2 0x3B07 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x4 SLOAD AND PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x1D7 JUMPI PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x19 DUP2 MSTORE PUSH2 0x2324 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x36B9 JUMP JUMPDEST PUSH2 0x232C PUSH2 0x39EF JUMP JUMPDEST PUSH2 0x2334 PUSH2 0x39EF JUMP JUMPDEST SWAP2 PUSH1 0x40 MLOAD SWAP2 PUSH2 0x2342 DUP4 PUSH2 0x3230 JUMP JUMPDEST PUSH1 0x0 DUP4 MSTORE DUP2 DUP4 ADD SWAP1 DUP2 MSTORE PUSH1 0x40 DUP4 ADD SWAP4 DUP5 MSTORE PUSH2 0x244F DUP6 PUSH1 0x40 MLOAD SWAP5 PUSH2 0x2364 DUP7 PUSH2 0x324B JUMP JUMPDEST PUSH1 0x7 DUP7 MSTORE PUSH1 0x0 DUP6 DUP8 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP8 ADD MSTORE PUSH1 0x0 PUSH1 0x60 DUP8 ADD MSTORE PUSH1 0x0 PUSH1 0x80 DUP8 ADD MSTORE PUSH1 0x0 PUSH1 0xA0 DUP8 ADD MSTORE PUSH1 0x40 MLOAD PUSH2 0x2396 DUP2 PUSH2 0x324B JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE PUSH1 0x0 DUP7 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x40 MLOAD SWAP1 PUSH2 0x23C9 DUP3 PUSH2 0x3230 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23D5 DUP2 PUSH2 0x3294 JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE DUP3 MSTORE PUSH1 0x40 MLOAD PUSH2 0x23E7 DUP2 PUSH2 0x3294 JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE DUP8 DUP4 ADD MSTORE PUSH1 0x40 MLOAD PUSH2 0x23FB DUP2 PUSH2 0x3294 JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x40 MLOAD SWAP8 PUSH2 0x2411 DUP10 PUSH2 0x3230 JUMP JUMPDEST DUP9 MSTORE DUP7 DUP9 ADD MSTORE PUSH1 0x40 DUP8 ADD MSTORE DUP5 PUSH1 0x40 MLOAD PUSH2 0x2429 DUP2 PUSH2 0x3266 JUMP JUMPDEST DUP3 DUP2 MSTORE ADD SWAP6 DUP7 MSTORE MLOAD AND PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0x1 SLOAD AND OR PUSH1 0x1 SSTORE JUMP JUMPDEST MLOAD SWAP1 DUP2 MLOAD SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP5 DUP6 DUP2 GT PUSH2 0x9DB JUMPI DUP1 PUSH2 0x2470 PUSH1 0x2 SLOAD PUSH2 0x2F90 JUMP JUMPDEST SWAP5 PUSH1 0x1F SWAP6 DUP7 DUP2 GT PUSH2 0x2AB4 JUMPI JUMPDEST POP DUP5 SWAP1 DUP7 DUP4 GT PUSH1 0x1 EQ PUSH2 0x2A40 JUMPI PUSH1 0x0 SWAP3 PUSH2 0x2A35 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x2 SSTORE JUMPDEST MLOAD SWAP3 DUP4 MLOAD DUP6 DUP2 GT PUSH2 0x9DB JUMPI DUP1 PUSH1 0x3 SWAP6 PUSH2 0x24C0 DUP8 SLOAD PUSH2 0x2F90 JUMP JUMPDEST DUP7 DUP2 GT PUSH2 0x29DB JUMPI JUMPDEST POP DUP5 SWAP1 DUP7 DUP4 GT PUSH1 0x1 EQ PUSH2 0x296B JUMPI PUSH1 0x0 SWAP3 PUSH2 0x2960 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 DUP8 SHL SHR NOT AND OR DUP5 SSTORE JUMPDEST MLOAD SWAP5 DUP6 MLOAD SWAP6 DUP7 MLOAD PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x1D7 JUMPI PUSH2 0x250A SWAP1 PUSH2 0x3782 JUMP JUMPDEST DUP3 DUP8 ADD MLOAD PUSH2 0x2517 DUP2 PUSH2 0x3326 JUMP JUMPDEST PUSH2 0x2520 DUP2 PUSH2 0x3326 JUMP JUMPDEST PUSH2 0xFF00 PUSH1 0x4 SLOAD SWAP2 PUSH1 0x8 SHL AND SWAP1 PUSH2 0xFF00 NOT AND OR PUSH1 0x4 SSTORE PUSH1 0xA0 PUSH1 0x40 DUP9 ADD MLOAD SWAP8 PUSH1 0x5 SWAP9 DUP10 SSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x6 SSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x7 SSTORE ADD MLOAD DUP6 DUP2 LT ISZERO PUSH2 0x1D7 JUMPI PUSH1 0x40 SWAP3 PUSH1 0xA0 SWAP2 PUSH1 0xFF DUP1 NOT PUSH1 0x8 SLOAD AND SWAP2 AND OR PUSH1 0x8 SSTORE PUSH2 0x25BE DUP6 DUP5 ADD MLOAD SWAP2 PUSH2 0x259C DUP2 DUP5 MLOAD AND PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0x9 SLOAD AND OR PUSH1 0x9 SSTORE JUMP JUMPDEST DUP7 DUP4 ADD MLOAD AND PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0xA SLOAD AND OR PUSH1 0xA SSTORE JUMP JUMPDEST DUP4 DUP2 ADD MLOAD PUSH1 0xB SSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0xC SSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0xD SSTORE ADD MLOAD PUSH1 0xE SSTORE ADD MLOAD DUP1 MLOAD DUP1 MLOAD SWAP1 DUP7 DUP3 GT PUSH2 0x9DB JUMPI DUP2 SWAP1 PUSH2 0x25F5 PUSH1 0xF SLOAD PUSH2 0x2F90 JUMP JUMPDEST DUP7 DUP2 GT PUSH2 0x2907 JUMPI JUMPDEST POP DUP5 SWAP1 DUP7 DUP4 GT PUSH1 0x1 EQ PUSH2 0x2894 JUMPI PUSH1 0x0 SWAP3 PUSH2 0x2889 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 DUP8 SHL SHR NOT AND OR PUSH1 0xF SSTORE JUMPDEST DUP2 DUP2 ADD MLOAD DUP1 MLOAD SWAP1 DUP7 DUP3 GT PUSH2 0x9DB JUMPI PUSH2 0x2640 PUSH1 0x10 SLOAD PUSH2 0x2F90 JUMP JUMPDEST DUP6 DUP2 GT PUSH2 0x283C JUMPI JUMPDEST POP DUP4 SWAP1 DUP6 DUP4 GT PUSH1 0x1 EQ PUSH2 0x27C6 JUMPI PUSH1 0x40 SWAP4 SWAP3 SWAP2 PUSH1 0x0 SWAP2 DUP4 PUSH2 0x27BB JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 DUP9 SHL SHR NOT AND OR PUSH1 0x10 SSTORE JUMPDEST ADD MLOAD SWAP5 DUP6 MLOAD SWAP5 DUP6 GT PUSH2 0x9DB JUMPI PUSH2 0x268F PUSH1 0x11 SLOAD PUSH2 0x2F90 JUMP JUMPDEST SWAP1 DUP4 DUP3 GT PUSH2 0x2772 JUMPI JUMPDEST POP POP DUP1 SWAP2 DUP5 GT PUSH1 0x1 EQ PUSH2 0x26FD JUMPI POP DUP3 SWAP4 PUSH1 0x0 SWAP4 PUSH2 0x26F2 JUMPI JUMPDEST POP POP DUP3 PUSH1 0x1 SHL SWAP3 PUSH1 0x0 NOT SWAP2 SHL SHR NOT AND OR PUSH1 0x11 SSTORE JUMPDEST PUSH32 0x88C430102EAB5DBC235CA367ECD5FFA63164BB311015524ECEBED009D4D4B5B6 PUSH1 0x40 MLOAD DUP1 PUSH2 0x1141 DUP2 PUSH2 0x379B JUMP JUMPDEST ADD MLOAD SWAP2 POP DUP4 DUP1 PUSH2 0x26B0 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x1F NOT DUP5 AND SWAP5 PUSH1 0x11 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x537A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP4 PUSH1 0x0 SWAP1 JUMPDEST DUP8 DUP3 LT PUSH2 0x275A JUMPI POP POP DUP5 PUSH1 0x1 SWAP7 LT PUSH2 0x2740 JUMPI JUMPDEST POP POP POP POP DUP2 SHL ADD PUSH1 0x11 SSTORE PUSH2 0x26C4 JUMP JUMPDEST ADD MLOAD SWAP1 PUSH1 0xF8 DUP5 PUSH1 0x0 NOT SWAP3 SHL AND SHR NOT AND SWAP1 SSTORE DUP3 DUP1 DUP1 DUP1 PUSH2 0x2731 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP6 SWAP8 DUP3 SWAP5 SWAP7 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP7 ADD SWAP4 ADD SWAP1 PUSH2 0x271E JUMP JUMPDEST PUSH1 0x11 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x537A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP5 DUP1 DUP9 ADD DUP3 SHR DUP4 ADD SWAP4 DUP6 DUP10 LT PUSH2 0x27B2 JUMPI JUMPDEST ADD SWAP1 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2698 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x279E JUMP JUMPDEST SWAP4 POP DUP3 SWAP4 PUSH2 0x2798 JUMP JUMPDEST ADD MLOAD SWAP1 POP DUP10 DUP1 PUSH2 0x2663 JUMP JUMPDEST SWAP1 PUSH1 0x1F NOT DUP4 AND SWAP2 PUSH1 0x10 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x539A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 PUSH1 0x0 JUMPDEST DUP8 DUP3 DUP3 LT PUSH2 0x2826 JUMPI POP POP SWAP2 PUSH1 0x1 SWAP4 SWAP2 DUP6 PUSH1 0x40 SWAP8 SWAP7 SWAP5 LT PUSH2 0x280E JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x10 SSTORE PUSH2 0x2678 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT DUP4 DUP11 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE DUP10 DUP1 DUP1 PUSH2 0x2800 JUMP JUMPDEST PUSH1 0x1 DUP6 SWAP7 DUP3 SWAP4 SWAP7 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD PUSH2 0x27E5 JUMP JUMPDEST PUSH1 0x10 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x539A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP7 DUP1 DUP6 ADD DUP12 SHR DUP3 ADD SWAP3 DUP8 DUP7 LT PUSH2 0x2880 JUMPI JUMPDEST ADD DUP11 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x2874 JUMPI POP PUSH2 0x2648 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2867 JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH2 0x2861 JUMP JUMPDEST ADD MLOAD SWAP1 POP DUP9 DUP1 PUSH2 0x2612 JUMP JUMPDEST PUSH1 0xF PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x53BA DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP4 POP PUSH1 0x1F NOT DUP6 AND SWAP1 JUMPDEST DUP8 DUP3 DUP3 LT PUSH2 0x28F1 JUMPI POP POP SWAP1 DUP5 PUSH1 0x1 SWAP6 SWAP5 SWAP4 SWAP3 LT PUSH2 0x28D9 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0xF SSTORE PUSH2 0x2627 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT DUP4 DUP10 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE DUP9 DUP1 DUP1 PUSH2 0x28CB JUMP JUMPDEST PUSH1 0x1 DUP6 SWAP7 DUP3 SWAP4 SWAP7 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD PUSH2 0x28B3 JUMP JUMPDEST SWAP1 SWAP2 POP PUSH1 0xF PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x53BA DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP7 DUP1 DUP6 ADD DUP12 SHR DUP3 ADD SWAP3 DUP8 DUP7 LT PUSH2 0x2957 JUMPI JUMPDEST SWAP1 DUP6 SWAP5 SWAP4 SWAP3 SWAP2 ADD DUP12 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x2948 JUMPI POP PUSH2 0x25FD JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE DUP5 SWAP4 POP PUSH1 0x1 ADD PUSH2 0x293B JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH2 0x292F JUMP JUMPDEST ADD MLOAD SWAP1 POP DUP9 DUP1 PUSH2 0x24DD JUMP JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x535A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP4 POP PUSH1 0x1F NOT DUP6 AND SWAP1 JUMPDEST DUP8 DUP3 DUP3 LT PUSH2 0x29C5 JUMPI POP POP SWAP1 DUP5 PUSH1 0x1 SWAP6 SWAP5 SWAP4 SWAP3 LT PUSH2 0x29AD JUMPI JUMPDEST POP POP POP DUP2 SHL ADD DUP5 SSTORE PUSH2 0x24F1 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT DUP4 DUP10 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE DUP9 DUP1 DUP1 PUSH2 0x29A0 JUMP JUMPDEST PUSH1 0x1 DUP6 SWAP7 DUP3 SWAP4 SWAP7 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD PUSH2 0x2988 JUMP JUMPDEST SWAP1 SWAP2 POP DUP7 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x535A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP7 DUP1 DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP8 DUP7 LT PUSH2 0x2A2C JUMPI JUMPDEST SWAP1 DUP6 SWAP5 SWAP4 SWAP3 SWAP2 ADD PUSH1 0x5 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x2A1D JUMPI POP PUSH2 0x24C8 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE DUP5 SWAP4 POP PUSH1 0x1 ADD PUSH2 0x2A10 JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH2 0x2A03 JUMP JUMPDEST ADD MLOAD SWAP1 POP DUP9 DUP1 PUSH2 0x2491 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x533A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP4 POP PUSH1 0x1F NOT DUP6 AND SWAP1 JUMPDEST DUP8 DUP3 DUP3 LT PUSH2 0x2A9E JUMPI POP POP SWAP1 DUP5 PUSH1 0x1 SWAP6 SWAP5 SWAP4 SWAP3 LT PUSH2 0x2A85 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x2 SSTORE PUSH2 0x24A7 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP9 DUP1 DUP1 PUSH2 0x2A77 JUMP JUMPDEST PUSH1 0x1 DUP6 SWAP7 DUP3 SWAP4 SWAP7 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD PUSH2 0x2A5F JUMP JUMPDEST SWAP1 SWAP2 POP PUSH1 0x2 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x533A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP7 DUP1 DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP8 DUP7 LT PUSH2 0x2B06 JUMPI JUMPDEST SWAP1 DUP6 SWAP5 SWAP4 SWAP3 SWAP2 ADD PUSH1 0x5 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x2AF7 JUMPI POP PUSH2 0x247C JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE DUP5 SWAP4 POP PUSH1 0x1 ADD PUSH2 0x2AEA JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH2 0x2ADD JUMP JUMPDEST PUSH2 0x2B18 CALLDATASIZE PUSH2 0x35C0 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x8 SWAP4 SWAP3 SWAP4 SLOAD AND PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x1D7 JUMPI PUSH1 0x3 DUP4 LT ISZERO PUSH2 0x1D7 JUMPI PUSH2 0x2B3E SWAP1 DUP4 EQ PUSH2 0x395F JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 DUP4 AND CALLER EQ DUP1 ISZERO PUSH2 0x2BD2 JUMPI JUMPDEST ISZERO PUSH2 0x2B9B JUMPI PUSH1 0x20 SWAP4 PUSH2 0x2B7B SWAP3 DUP5 PUSH1 0xA SLOAD AND CALLER EQ PUSH1 0x0 EQ PUSH2 0x2B95 JUMPI POP CALLVALUE SWAP2 JUMPDEST CALLER SWAP1 PUSH2 0x3D7E JUMP JUMPDEST SWAP1 PUSH1 0x9 SLOAD AND CALLER EQ PUSH1 0x0 EQ PUSH2 0x1CE JUMPI DUP1 PUSH1 0xC SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST SWAP2 PUSH2 0x2B74 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x2BA927A723AFA6A9A3A9A2A72222A9 PUSH1 0x89 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP DUP3 PUSH1 0xA SLOAD AND CALLER EQ PUSH2 0x2B56 JUMP JUMPDEST CALLVALUE PUSH2 0x150 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x150 JUMPI PUSH1 0x20 PUSH1 0x13 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x150 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x150 JUMPI PUSH1 0x20 PUSH2 0x1BB PUSH1 0xFF PUSH1 0x8 SLOAD AND PUSH2 0x2C3D PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x2C32 DUP4 PUSH1 0xA SLOAD AND DUP3 PUSH2 0x3AD9 JUMP JUMPDEST SWAP3 PUSH1 0x9 SLOAD AND SWAP1 PUSH2 0x3AD9 JUMP JUMPDEST SWAP1 PUSH2 0x3C81 JUMP JUMPDEST PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x150 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x150 JUMPI PUSH1 0x24 SWAP1 DUP2 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x44 CALLDATALOAD DUP2 DUP2 AND DUP2 SUB PUSH2 0x150 JUMPI PUSH1 0x64 CALLDATALOAD SWAP3 DUP3 DUP5 AND SWAP5 DUP6 DUP6 SUB PUSH2 0x150 JUMPI PUSH1 0x1 PUSH1 0x0 MSTORE PUSH1 0x20 SWAP6 PUSH1 0x19 DUP8 MSTORE PUSH2 0x2CA1 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x36B9 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x8 SLOAD AND PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x2F06 JUMPI PUSH2 0x2CBB SWAP1 DUP5 EQ PUSH2 0x395F JUMP JUMPDEST DUP3 PUSH2 0x2EFF JUMPI CALLVALUE SWAP5 JUMPDEST DUP9 DUP9 DUP3 PUSH1 0xA SLOAD AND SWAP3 PUSH2 0x2CE2 PUSH2 0x2CD8 DUP6 DUP10 PUSH2 0x3AD9 JUMP JUMPDEST PUSH1 0xB SLOAD GT ISZERO PUSH2 0x36F6 JUMP JUMPDEST PUSH1 0x14 SLOAD AND PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH4 0x122643F3 PUSH1 0xE2 SHL DUP3 MSTORE DUP8 PUSH1 0x4 DUP4 ADD MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xE30 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x2ECA JUMPI JUMPDEST POP ISZERO PUSH2 0x2E94 JUMPI SWAP1 DUP2 PUSH2 0x2D2C SWAP3 CALLER EQ SWAP2 DUP3 ISZERO SWAP3 PUSH2 0x2E89 JUMPI JUMPDEST POP POP PUSH2 0x3741 JUMP JUMPDEST PUSH1 0xC SLOAD SWAP1 DUP2 ISZERO PUSH2 0x2E01 JUMPI LT PUSH2 0x2DC8 JUMPI PUSH1 0x2 SWAP6 POP SWAP2 PUSH2 0x2D4F SWAP2 DUP5 PUSH2 0x2D6F SWAP6 SWAP5 PUSH2 0x3D7E JUMP JUMPDEST PUSH1 0xC SSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0x9 SLOAD AND OR PUSH1 0x9 SSTORE JUMP JUMPDEST PUSH1 0x19 PUSH1 0xFF NOT SWAP2 DUP4 DUP4 PUSH1 0x4 SLOAD AND OR PUSH1 0x4 SSTORE DUP4 PUSH1 0x0 MSTORE MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 DUP3 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x4 SLOAD AND OR PUSH1 0x4 SSTORE PUSH32 0x909D9218F6E1F243C7D9044544C7B03E2E7DB27D81653992E9018B8B72F4C20D PUSH1 0x40 MLOAD DUP1 PUSH2 0x1141 DUP2 PUSH2 0x379B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x12 DUP2 DUP9 ADD MSTORE PUSH18 0x1393D517D15393D551D217D4105653515395 PUSH1 0x72 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 POP CALLVALUE ISZERO PUSH2 0x2E55 JUMPI ISZERO PUSH2 0x2E22 JUMPI PUSH1 0x2 SWAP6 POP SWAP2 PUSH2 0x2D4F SWAP2 DUP5 PUSH2 0x2D6F SWAP6 SWAP5 PUSH2 0x3D7E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xC DUP2 DUP9 ADD MSTORE PUSH12 0x16915493D7D4105653515395 PUSH1 0xA2 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0xD DUP2 DUP10 ADD MSTORE PUSH13 0x5A45524F5F4D534756414C5545 PUSH1 0x98 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST EQ ISZERO SWAP1 POP DUP10 DUP1 PUSH2 0x2D25 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0xF DUP2 DUP12 ADD MSTORE PUSH15 0x1554D1549517D393D517D1561254D5 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 POP DUP9 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x2EF8 JUMPI JUMPDEST PUSH2 0x2EE1 DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x150 JUMPI PUSH2 0x2EF2 SWAP1 PUSH2 0x3734 JUMP JUMPDEST DUP11 PUSH2 0x2D0E JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x2ED7 JUMP JUMPDEST DUP2 SWAP5 PUSH2 0x2CC3 JUMP JUMPDEST DUP9 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0x150 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x150 JUMPI PUSH2 0x2F56 PUSH2 0x2F37 PUSH2 0x32D0 JUMP JUMPDEST PUSH2 0x8F6 PUSH2 0x2F42 PUSH2 0x333C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP4 PUSH1 0x40 DUP6 MSTORE PUSH1 0x40 DUP6 ADD SWAP1 PUSH2 0x3480 JUMP JUMPDEST SWAP1 DUP4 DUP3 SUB PUSH1 0x20 DUP6 ADD MSTORE PUSH2 0x34CC JUMP JUMPDEST CALLVALUE PUSH2 0x150 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x150 JUMPI DUP1 PUSH2 0x229F PUSH1 0x20 SWAP3 PUSH1 0xFF PUSH1 0x8 SLOAD AND JUMPDEST SWAP1 PUSH1 0x3 DUP3 LT ISZERO PUSH2 0x1D7 JUMPI MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x2FC0 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x2FAA JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x2F9F JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x0 SWAP3 SWAP2 PUSH2 0x2FDA DUP3 PUSH2 0x2F90 JUMP JUMPDEST DUP1 DUP3 MSTORE SWAP2 PUSH1 0x1 SWAP1 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x303F JUMPI POP PUSH1 0x1 EQ PUSH2 0x2FF8 JUMPI POP POP POP JUMP JUMPDEST SWAP2 SWAP3 SWAP4 POP PUSH1 0x2 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x533A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 PUSH1 0x0 SWAP3 JUMPDEST DUP5 DUP5 LT PUSH2 0x3027 JUMPI POP POP PUSH1 0x20 SWAP3 POP ADD ADD SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x20 DUP6 DUP6 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP4 ADD SWAP3 DUP2 ADD PUSH2 0x3015 JUMP JUMPDEST SWAP2 POP POP PUSH1 0x20 SWAP4 SWAP5 POP PUSH1 0xFF SWAP3 SWAP2 SWAP3 NOT AND DUP4 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x0 SWAP3 SWAP2 PUSH2 0x306C DUP3 PUSH2 0x2F90 JUMP JUMPDEST DUP1 DUP3 MSTORE SWAP2 PUSH1 0x1 SWAP1 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x303F JUMPI POP PUSH1 0x1 EQ PUSH2 0x308A JUMPI POP POP POP JUMP JUMPDEST SWAP2 SWAP3 SWAP4 POP PUSH1 0x3 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x535A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 PUSH1 0x0 SWAP3 JUMPDEST DUP5 DUP5 LT PUSH2 0x30B9 JUMPI POP POP PUSH1 0x20 SWAP3 POP ADD ADD SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x20 DUP6 DUP6 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP4 ADD SWAP3 DUP2 ADD PUSH2 0x30A7 JUMP JUMPDEST PUSH1 0xF SLOAD PUSH1 0x0 SWAP3 SWAP2 PUSH2 0x30E1 DUP3 PUSH2 0x2F90 JUMP JUMPDEST DUP1 DUP3 MSTORE SWAP2 PUSH1 0x1 SWAP1 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x303F JUMPI POP PUSH1 0x1 EQ PUSH2 0x30FF JUMPI POP POP POP JUMP JUMPDEST SWAP2 SWAP3 SWAP4 POP PUSH1 0xF PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x53BA DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 PUSH1 0x0 SWAP3 JUMPDEST DUP5 DUP5 LT PUSH2 0x312E JUMPI POP POP PUSH1 0x20 SWAP3 POP ADD ADD SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x20 DUP6 DUP6 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP4 ADD SWAP3 DUP2 ADD PUSH2 0x311C JUMP JUMPDEST PUSH1 0x10 SLOAD PUSH1 0x0 SWAP3 SWAP2 PUSH2 0x3156 DUP3 PUSH2 0x2F90 JUMP JUMPDEST DUP1 DUP3 MSTORE SWAP2 PUSH1 0x1 SWAP1 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x303F JUMPI POP PUSH1 0x1 EQ PUSH2 0x3174 JUMPI POP POP POP JUMP JUMPDEST SWAP2 SWAP3 SWAP4 POP PUSH1 0x10 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x539A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 PUSH1 0x0 SWAP3 JUMPDEST DUP5 DUP5 LT PUSH2 0x31A3 JUMPI POP POP PUSH1 0x20 SWAP3 POP ADD ADD SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x20 DUP6 DUP6 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP4 ADD SWAP3 DUP2 ADD PUSH2 0x3191 JUMP JUMPDEST PUSH1 0x11 SLOAD PUSH1 0x0 SWAP3 SWAP2 PUSH2 0x31CB DUP3 PUSH2 0x2F90 JUMP JUMPDEST DUP1 DUP3 MSTORE SWAP2 PUSH1 0x1 SWAP1 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x303F JUMPI POP PUSH1 0x1 EQ PUSH2 0x31E9 JUMPI POP POP POP JUMP JUMPDEST SWAP2 SWAP3 SWAP4 POP PUSH1 0x11 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x537A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 PUSH1 0x0 SWAP3 JUMPDEST DUP5 DUP5 LT PUSH2 0x3218 JUMPI POP POP PUSH1 0x20 SWAP3 POP ADD ADD SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x20 DUP6 DUP6 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP4 ADD SWAP3 DUP2 ADD PUSH2 0x3206 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x9DB JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0xC0 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x9DB JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x9DB JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x9DB JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x9DB JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x9DB JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x32DD DUP3 PUSH2 0x3230 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x40 MLOAD DUP3 SWAP1 PUSH2 0x3304 DUP2 PUSH2 0x32FD DUP2 PUSH2 0x2FCA JUMP JUMPDEST SUB DUP3 PUSH2 0x32AF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP1 MLOAD SWAP2 PUSH2 0x3322 DUP4 PUSH2 0x331B DUP2 PUSH2 0x305C JUMP JUMPDEST SUB DUP5 PUSH2 0x32AF JUMP JUMPDEST ADD MSTORE JUMP JUMPDEST PUSH1 0x5 GT ISZERO PUSH2 0x1D7 JUMPI JUMP JUMPDEST PUSH1 0x3 DUP3 LT ISZERO PUSH2 0x1D7 JUMPI MSTORE JUMP JUMPDEST PUSH1 0x40 SWAP1 DUP2 MLOAD PUSH2 0x334A DUP2 PUSH2 0x3230 JUMP JUMPDEST DUP1 SWAP3 DUP1 MLOAD PUSH2 0x3357 DUP2 PUSH2 0x324B JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0xFF DUP2 AND SWAP1 PUSH1 0x8 DUP3 LT ISZERO PUSH2 0x1D7 JUMPI PUSH1 0xFF SWAP2 DUP4 MSTORE PUSH1 0x8 SHR AND PUSH2 0x337A DUP2 PUSH2 0x3326 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x5 SLOAD DUP3 DUP3 ADD MSTORE PUSH1 0x6 SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x7 SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x33A8 PUSH1 0xFF PUSH1 0x8 SLOAD AND PUSH1 0xA0 DUP4 ADD PUSH2 0x3330 JUMP JUMPDEST DUP3 MSTORE DUP1 MLOAD PUSH2 0x33B5 DUP2 PUSH2 0x324B JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 PUSH1 0x9 SLOAD AND DUP3 MSTORE PUSH1 0xA SLOAD AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xB SLOAD DUP3 DUP3 ADD MSTORE PUSH1 0xC SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0xD SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xE SLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x20 DUP4 ADD MSTORE DUP1 MLOAD SWAP2 PUSH2 0x33FC DUP4 PUSH2 0x3230 JUMP JUMPDEST DUP2 MLOAD PUSH2 0x340B DUP2 PUSH2 0x32FD DUP2 PUSH2 0x30D1 JUMP JUMPDEST DUP4 MSTORE DUP2 MLOAD PUSH2 0x341C DUP2 PUSH2 0x32FD DUP2 PUSH2 0x3146 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MSTORE DUP2 MLOAD PUSH2 0x3430 DUP2 PUSH2 0x32FD DUP2 PUSH2 0x31BB JUMP JUMPDEST DUP3 DUP5 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x344B JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x343B JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP2 PUSH2 0x3474 DUP2 MLOAD DUP1 SWAP3 DUP2 DUP6 MSTORE DUP6 DUP1 DUP7 ADD SWAP2 ADD PUSH2 0x3438 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0x34BC SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP3 MLOAD AND DUP2 MSTORE PUSH1 0x40 PUSH2 0x34AB PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x60 PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x60 DUP5 ADD SWAP1 PUSH2 0x345B JUMP JUMPDEST SWAP3 ADD MLOAD SWAP1 PUSH1 0x40 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x345B JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x8 DUP3 LT ISZERO PUSH2 0x1D7 JUMPI MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x40 PUSH2 0x34BC SWAP3 PUSH2 0x3520 PUSH1 0xA0 DUP3 MLOAD PUSH2 0x34E5 DUP7 DUP3 MLOAD PUSH2 0x34BF JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH2 0x34F3 DUP2 PUSH2 0x3326 JUMP JUMPDEST PUSH1 0x20 DUP8 ADD MSTORE DUP5 DUP2 ADD MLOAD DUP6 DUP8 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x60 DUP8 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x80 DUP8 ADD MSTORE ADD MLOAD PUSH1 0xA0 DUP6 ADD SWAP1 PUSH2 0x2F83 JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 DUP1 DUP4 SHL SUB DUP1 DUP3 MLOAD AND PUSH1 0xC0 DUP8 ADD MSTORE PUSH1 0x20 DUP3 ADD MLOAD AND PUSH1 0xE0 DUP7 ADD MSTORE DUP4 DUP2 ADD MLOAD PUSH2 0x100 DUP7 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH2 0x120 DUP7 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH2 0x140 DUP7 ADD MSTORE ADD MLOAD PUSH2 0x160 DUP5 ADD MSTORE ADD MLOAD SWAP1 PUSH2 0x358C PUSH2 0x1A0 DUP1 PUSH2 0x180 DUP5 ADD MSTORE PUSH1 0x60 DUP5 MLOAD SWAP2 DUP5 ADD MSTORE PUSH2 0x200 DUP4 ADD SWAP1 PUSH2 0x345B JUMP JUMPDEST SWAP1 PUSH2 0x1E0 PUSH1 0x40 PUSH2 0x35B0 PUSH1 0x20 DUP7 ADD MLOAD SWAP5 PUSH2 0x19F NOT SWAP6 DUP7 DUP7 DUP4 SUB ADD PUSH2 0x1C0 DUP8 ADD MSTORE PUSH2 0x345B JUMP JUMPDEST SWAP5 ADD MLOAD SWAP3 DUP3 DUP6 SUB ADD SWAP2 ADD MSTORE PUSH2 0x345B JUMP JUMPDEST PUSH1 0x60 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0x150 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x150 JUMPI SWAP1 PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x150 JUMPI SWAP1 PUSH1 0x44 CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0x150 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x150 JUMPI SWAP1 PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x150 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x9DB JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x150 JUMPI DUP1 CALLDATALOAD SWAP1 PUSH2 0x3654 DUP3 PUSH2 0x3622 JUMP JUMPDEST SWAP3 PUSH2 0x3662 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x32AF JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 DUP4 DUP4 ADD ADD GT PUSH2 0x150 JUMPI DUP2 PUSH1 0x0 SWAP3 PUSH1 0x20 DUP1 SWAP4 ADD DUP4 DUP7 ADD CALLDATACOPY DUP4 ADD ADD MSTORE SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x34BC SWAP2 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 PUSH2 0x36A4 DUP4 MLOAD PUSH1 0x40 DUP4 DUP6 ADD MSTORE PUSH1 0x60 DUP5 ADD SWAP1 PUSH2 0x3480 JUMP JUMPDEST SWAP3 ADD MLOAD SWAP1 PUSH1 0x40 PUSH1 0x1F NOT DUP3 DUP6 SUB ADD SWAP2 ADD MSTORE PUSH2 0x34CC JUMP JUMPDEST ISZERO PUSH2 0x36C0 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x494E56414C49445F535441545553 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x36FD JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x14D51052D157D25390D3D4949150D5 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST MLOAD SWAP1 DUP2 ISZERO ISZERO DUP3 SUB PUSH2 0x150 JUMPI JUMP JUMPDEST ISZERO PUSH2 0x3748 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x2CA7AAAFA0A922AFAA2422AFA9A2A62622A9 PUSH1 0x71 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x1D7 JUMPI PUSH1 0xFF DUP1 NOT PUSH1 0x4 SLOAD AND SWAP2 AND OR PUSH1 0x4 SSTORE JUMP JUMPDEST PUSH2 0x34BC SWAP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 PUSH1 0x1 SLOAD AND PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x60 PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x37E2 PUSH2 0x37D1 PUSH1 0xC0 DUP5 ADD PUSH2 0x2FCA JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x5F NOT ADD PUSH1 0xA0 DUP6 ADD MSTORE PUSH2 0x305C JUMP JUMPDEST SWAP2 PUSH1 0x40 PUSH1 0x1F NOT DUP3 DUP6 SUB ADD SWAP2 ADD MSTORE PUSH1 0xFF PUSH1 0x4 SLOAD PUSH2 0x3800 DUP5 DUP4 DUP4 AND PUSH2 0x34BF JUMP JUMPDEST PUSH1 0x8 SHR AND PUSH2 0x380D DUP2 PUSH2 0x3326 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x5 SLOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x6 SLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x7 SLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x383D PUSH1 0xFF PUSH1 0x8 SLOAD AND PUSH1 0xA0 DUP5 ADD SWAP1 PUSH2 0x2F83 JUMP JUMPDEST DUP1 PUSH1 0x9 SLOAD AND PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xA SLOAD AND PUSH1 0xE0 DUP3 ADD MSTORE PUSH1 0xB SLOAD PUSH2 0x100 DUP3 ADD MSTORE PUSH1 0xC SLOAD PUSH2 0x120 DUP3 ADD MSTORE PUSH1 0xD SLOAD PUSH2 0x140 DUP3 ADD MSTORE PUSH1 0xE SLOAD PUSH2 0x160 DUP3 ADD MSTORE PUSH1 0x60 PUSH2 0x1A0 DUP1 PUSH2 0x180 DUP5 ADD MSTORE DUP3 ADD MSTORE PUSH2 0x3890 PUSH2 0x200 DUP3 ADD PUSH2 0x30D1 JUMP JUMPDEST SWAP1 PUSH2 0x1E0 PUSH2 0x38AC PUSH2 0x19F NOT SWAP4 DUP5 DUP5 DUP3 SUB ADD PUSH2 0x1C0 DUP6 ADD MSTORE PUSH2 0x3146 JUMP JUMPDEST SWAP3 DUP3 DUP5 SUB ADD SWAP2 ADD MSTORE PUSH2 0x31BB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x38C6 DUP3 PUSH2 0x324B JUMP JUMPDEST DUP2 PUSH1 0xA0 PUSH1 0x0 SWAP2 DUP3 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE DUP3 PUSH1 0x80 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH1 0x40 SWAP1 DUP2 MLOAD SWAP2 PUSH2 0x38FA DUP4 PUSH2 0x3266 JUMP JUMPDEST PUSH1 0x20 DUP4 DUP3 MLOAD PUSH2 0x3908 DUP2 PUSH2 0x3230 JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE PUSH1 0x60 DUP4 DUP3 ADD MSTORE PUSH1 0x60 DUP5 DUP3 ADD MSTORE DUP2 MSTORE DUP3 MLOAD SWAP3 PUSH2 0x3926 DUP5 PUSH2 0x3230 JUMP JUMPDEST PUSH2 0x392E PUSH2 0x38B9 JUMP JUMPDEST DUP5 MSTORE PUSH2 0x3938 PUSH2 0x38B9 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE DUP1 MLOAD SWAP1 PUSH2 0x3948 DUP3 PUSH2 0x3230 JUMP JUMPDEST PUSH1 0x60 DUP3 MSTORE PUSH1 0x60 DUP5 DUP4 ADD MSTORE PUSH1 0x60 DUP2 DUP4 ADD MSTORE DUP5 ADD MSTORE ADD MSTORE JUMP JUMPDEST ISZERO PUSH2 0x3966 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x2BA927A723AFAA27A5A2A7 PUSH1 0xA9 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x150 JUMPI JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x150 JUMPI DUP1 MLOAD PUSH2 0x39C3 DUP2 PUSH2 0x3622 JUMP JUMPDEST SWAP3 PUSH2 0x39D1 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x32AF JUMP JUMPDEST DUP2 DUP5 MSTORE PUSH1 0x20 DUP3 DUP5 ADD ADD GT PUSH2 0x150 JUMPI PUSH2 0x34BC SWAP2 PUSH1 0x20 DUP1 DUP6 ADD SWAP2 ADD PUSH2 0x3438 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x39FC DUP3 PUSH2 0x3266 JUMP JUMPDEST PUSH1 0x4 DUP3 MSTORE PUSH4 0x3078303 PUSH1 0xE4 SHL PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST PUSH1 0xFF PUSH1 0x8 SLOAD AND PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x1D7 JUMPI PUSH1 0x1 DUP2 SUB PUSH2 0x3A95 JUMPI POP PUSH1 0x15 SLOAD PUSH1 0x40 MLOAD PUSH4 0xF77800E5 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x4 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xE30 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x3A5F JUMPI POP SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 RETURNDATASIZE DUP3 GT PUSH2 0x3A8D JUMPI JUMPDEST DUP2 PUSH2 0x3A78 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3A8A JUMPI POP PUSH2 0x34BC SWAP1 PUSH2 0x3999 JUMP JUMPDEST DUP1 REVERT JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x3A6B JUMP JUMPDEST PUSH1 0x2 SUB PUSH2 0x3AD4 JUMPI PUSH1 0x15 SLOAD PUSH1 0x40 MLOAD PUSH4 0x5F117AA3 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x4 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xE30 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x3A5F JUMPI POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x1D7 JUMPI PUSH1 0x0 MSTORE PUSH1 0x1A PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x3B0E JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH10 0x2727AA2FA9A2A62622A9 PUSH1 0xB1 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x150 JUMPI JUMP JUMPDEST ISZERO PUSH2 0x3B5B JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x24A72B20A624A22FA0AA2A22A9AA20AA24A7A7 PUSH1 0x69 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0x3BA9 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x3BA9 JUMPI JUMP JUMPDEST SWAP1 SWAP5 SWAP4 SWAP3 PUSH1 0x60 SWAP3 PUSH2 0x3BE1 DUP4 PUSH1 0x80 DUP2 ADD SWAP9 PUSH2 0x2F83 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x3 DUP4 LT ISZERO PUSH2 0x1D7 JUMPI PUSH1 0x40 SWAP3 PUSH2 0x3C7B PUSH32 0xFE2CAF3897EC3E02A1D458D232D7C62C17809D25DBFE65864CE842162D6C217C SWAP4 PUSH1 0x0 SWAP1 DUP4 DUP3 MSTORE PUSH1 0x1A PUSH1 0x20 MSTORE DUP7 DUP3 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 DUP2 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH2 0x3C56 DUP3 DUP10 DUP6 KECCAK256 SLOAD PUSH2 0x3C81 JUMP JUMPDEST SWAP8 DUP4 DUP10 SWAP5 SWAP3 DUP8 DUP7 SWAP5 MSTORE PUSH1 0x1A PUSH1 0x20 MSTORE DUP3 DUP3 KECCAK256 SWAP1 DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SSTORE PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP5 DUP6 PUSH2 0x3BCC JUMP JUMPDEST SUB SWAP1 LOG1 SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x3BA9 JUMPI JUMP JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x1D7 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP4 DUP5 DUP3 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 DUP2 DUP5 MSTORE PUSH1 0x20 MSTORE DUP6 DUP4 KECCAK256 SLOAD DUP3 DUP2 LT PUSH2 0x3D19 JUMPI SWAP2 DUP7 PUSH32 0x9060F8FFC7ACD8270ABF2337023E6377669CA44D5B2A23F3513A29380940F357 SWAP7 SWAP6 SWAP5 SWAP3 PUSH2 0x3CF6 DUP4 PUSH2 0x3C7B SWAP7 PUSH2 0x3BBF JUMP JUMPDEST SWAP9 DUP5 DUP11 SWAP6 SWAP3 DUP9 DUP8 SWAP5 MSTORE PUSH1 0x1A PUSH1 0x20 MSTORE DUP3 DUP3 KECCAK256 SWAP1 DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SSTORE MLOAD SWAP5 DUP6 SWAP5 DUP6 PUSH2 0x3BCC JUMP JUMPDEST DUP7 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x125394D551919250D251539517D1115413D4D255 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 ADD SWAP3 SWAP2 PUSH2 0x3D7C SWAP2 PUSH1 0x40 ADD SWAP1 PUSH2 0x2F83 JUMP JUMPDEST JUMP JUMPDEST SWAP3 SWAP1 PUSH1 0x4 PUSH1 0xFF DUP2 SLOAD AND PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x3FD6 JUMPI DUP1 PUSH1 0x2 PUSH2 0x3DA6 SWAP3 EQ ISZERO SWAP1 DUP2 PUSH2 0x4040 JUMPI JUMPDEST POP PUSH2 0x36B9 JUMP JUMPDEST DUP3 ISZERO PUSH2 0x400B JUMPI PUSH1 0x3 DUP6 LT ISZERO PUSH2 0x3FF6 JUMPI DUP5 ISZERO DUP1 ISZERO PUSH2 0x3DFE JUMPI JUMPDEST POP POP PUSH32 0x68FFD6AD89C76C56B0B5206AE0C1A14CBFFB37023D4E80F635FF7397C56B116B SWAP3 POP PUSH2 0x3C7B PUSH2 0x3DF1 DUP4 DUP4 DUP8 PUSH2 0x3BF8 JUMP JUMPDEST SWAP5 PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP4 DUP5 PUSH2 0x3D54 JUMP JUMPDEST PUSH1 0x1 DUP7 EQ PUSH1 0x0 DUP2 ISZERO PUSH2 0x3FEB JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x3FC6 JUMPI JUMPDEST POP PUSH2 0x3E1D SWAP2 POP PUSH2 0x395F JUMP JUMPDEST PUSH2 0x3E26 DUP6 PUSH2 0x5123 JUMP JUMPDEST SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 PUSH2 0x3E3A DUP9 PUSH2 0x5123 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP8 DUP3 ADD SWAP1 DUP2 MSTORE ADDRESS PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP11 SWAP5 SWAP2 SWAP4 DUP12 SWAP4 DUP6 SWAP4 SWAP3 DUP5 SWAP1 SUB ADD SWAP2 DUP4 SWAP2 AND GAS STATICCALL DUP1 ISZERO PUSH2 0xE30 JUMPI DUP8 SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x3F96 JUMPI JUMPDEST POP LT PUSH2 0x3F59 JUMPI DUP3 SWAP2 PUSH1 0x0 DUP9 SWAP5 PUSH1 0x64 SWAP4 PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP7 DUP8 SWAP6 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP8 MSTORE AND SWAP1 DUP6 ADD MSTORE ADDRESS PUSH1 0x24 DUP6 ADD MSTORE DUP10 PUSH1 0x44 DUP6 ADD MSTORE AND GAS CALL SWAP1 DUP2 ISZERO PUSH2 0xE30 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x3EFD JUMPI JUMPDEST POP PUSH32 0x68FFD6AD89C76C56B0B5206AE0C1A14CBFFB37023D4E80F635FF7397C56B116B SWAP4 POP PUSH2 0x3EF6 SWAP1 PUSH2 0x50E5 JUMP JUMPDEST CODESIZE DUP1 PUSH2 0x3DBE JUMP JUMPDEST SWAP2 SWAP3 SWAP4 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x3F52 JUMPI JUMPDEST PUSH2 0x3F14 DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3A8A JUMPI POP SWAP1 PUSH2 0x3EF6 PUSH2 0x3F4C PUSH32 0x68FFD6AD89C76C56B0B5206AE0C1A14CBFFB37023D4E80F635FF7397C56B116B SWAP5 SWAP4 PUSH2 0x3734 JUMP JUMPDEST SWAP1 PUSH2 0x3EC9 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x3F0A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 DUP6 ADD DUP9 SWAP1 MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x494E53554646494349454E545F414C4C4F57414E4345 PUSH1 0x50 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP2 POP DUP9 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x3FBF JUMPI JUMPDEST PUSH2 0x3FAD DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3A8A JUMPI POP DUP7 SWAP1 MLOAD CODESIZE PUSH2 0x3E85 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x3FA3 JUMP JUMPDEST SWAP1 POP PUSH2 0x3FD6 JUMPI PUSH2 0x3E1D SWAP1 CODESIZE PUSH2 0x3E12 JUMP JUMPDEST PUSH1 0x21 DUP3 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x2 DUP9 EQ SWAP2 POP PUSH2 0x3E0B JUMP JUMPDEST PUSH1 0x21 SWAP1 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x20 PUSH1 0x40 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x14D51052D157D491545552549151 PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x3 SWAP2 POP EQ ISZERO CODESIZE PUSH2 0x3DA0 JUMP JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x4077 JUMPI RETURNDATASIZE SWAP1 PUSH2 0x405D DUP3 PUSH2 0x3622 JUMP JUMPDEST SWAP2 PUSH2 0x406B PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x32AF JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x4083 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x10D0531317D19052531151 PUSH1 0xAA SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP2 SWAP1 PUSH2 0x40C3 DUP3 DUP3 DUP6 PUSH2 0x3C8E JUMP JUMPDEST PUSH1 0x15 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x2EE4B68B PUSH1 0xE1 SHL DUP2 MSTORE SWAP3 SWAP6 SWAP1 SWAP3 SWAP2 PUSH1 0x20 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 PUSH1 0x4 SWAP2 SWAP1 DUP4 AND DUP5 DUP7 DUP5 DUP2 DUP5 GAS STATICCALL SWAP6 DUP7 ISZERO PUSH2 0x4358 JUMPI PUSH1 0x0 SWAP7 PUSH2 0x4363 JUMPI JUMPDEST POP DUP5 DUP4 SWAP2 DUP9 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH4 0x18DA0011 PUSH1 0xE0 SHL DUP3 MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x4358 JUMPI SWAP1 DUP5 SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x4321 JUMPI JUMPDEST POP AND SWAP5 PUSH2 0x42C5 JUMPI PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x3FD6 JUMPI DUP1 PUSH2 0x418B JUMPI POP POP POP POP DUP4 SWAP3 SWAP2 PUSH2 0x416B PUSH1 0x0 DUP1 DUP1 DUP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x531A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP10 PUSH2 0x3C7B SWAP8 GAS CALL PUSH2 0x1645 PUSH2 0x404C JUMP JUMPDEST MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x40 DUP3 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP4 SWAP5 DUP9 SWAP3 PUSH1 0x0 SWAP6 SWAP5 SWAP6 PUSH1 0x1 DUP3 EQ SWAP1 DUP2 ISZERO PUSH2 0x42BA JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x4289 JUMPI JUMPDEST POP SWAP6 PUSH2 0x41C1 PUSH1 0x0 SWAP3 PUSH2 0x41BC PUSH2 0x41F2 SWAP10 PUSH2 0x395F JUMP JUMPDEST PUSH2 0x5123 JUMP JUMPDEST AND SWAP3 DUP9 MLOAD SWAP7 DUP8 SWAP6 DUP7 SWAP5 DUP6 SWAP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP6 MSTORE DUP5 ADD PUSH1 0x20 SWAP1 SWAP4 SWAP3 SWAP2 SWAP4 PUSH1 0x40 DUP2 ADD SWAP5 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE ADD MSTORE JUMP JUMPDEST SUB SWAP3 GAS CALL SWAP2 DUP3 ISZERO PUSH2 0x427E JUMPI PUSH1 0x0 SWAP3 PUSH2 0x422A JUMPI JUMPDEST POP POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x531A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP4 SWAP3 SWAP2 PUSH2 0x4225 PUSH2 0x3C7B SWAP3 PUSH2 0x50E5 JUMP JUMPDEST PUSH2 0x416B JUMP JUMPDEST DUP2 DUP2 SWAP4 SWAP3 SWAP4 RETURNDATASIZE DUP4 GT PUSH2 0x4277 JUMPI JUMPDEST PUSH2 0x4241 DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3A8A JUMPI POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x531A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP4 SWAP3 SWAP2 PUSH2 0x4225 PUSH2 0x426B PUSH2 0x3C7B SWAP4 PUSH2 0x3734 JUMP JUMPDEST SWAP3 POP DUP2 SWAP4 SWAP5 SWAP6 POP PUSH2 0x4205 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x4237 JUMP JUMPDEST DUP4 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP3 SWAP6 POP POP SWAP2 SWAP5 SWAP3 POP PUSH2 0x42A5 JUMPI SWAP1 SWAP3 DUP5 SWAP3 DUP9 SWAP3 PUSH1 0x0 PUSH2 0x41C1 PUSH2 0x41A8 JUMP JUMPDEST PUSH1 0x21 DUP5 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x2 DUP4 EQ SWAP2 POP PUSH2 0x41A1 JUMP JUMPDEST SWAP4 POP SWAP2 POP POP PUSH1 0x3 DUP3 LT ISZERO PUSH2 0x3FF6 JUMPI POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x531A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP4 SWAP3 SWAP2 PUSH2 0x3C7B SWAP2 PUSH1 0x2 DUP2 SUB PUSH2 0x4302 JUMPI POP PUSH2 0x42FC DUP5 PUSH2 0x43B8 JUMP JUMPDEST POP PUSH2 0x416B JUMP JUMPDEST PUSH1 0x1 DUP2 SUB PUSH2 0x4314 JUMPI POP PUSH2 0x42FC DUP5 PUSH2 0x4E6A JUMP JUMPDEST PUSH2 0x4225 JUMPI PUSH2 0x42FC DUP5 PUSH2 0x484F JUMP JUMPDEST SWAP2 POP DUP6 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x4351 JUMPI JUMPDEST PUSH2 0x4338 DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3A8A JUMPI POP PUSH2 0x434B DUP5 SWAP2 PUSH2 0x3999 JUMP JUMPDEST CODESIZE PUSH2 0x4129 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x432E JUMP JUMPDEST DUP8 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 SWAP6 DUP6 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x4396 JUMPI JUMPDEST PUSH2 0x437A DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3A8A JUMPI POP DUP5 PUSH2 0x438E DUP5 SWAP3 PUSH2 0x3734 JUMP JUMPDEST SWAP7 SWAP2 POP PUSH2 0x4101 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x4370 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x150 JUMPI MLOAD PUSH3 0xFFFFFF DUP2 AND DUP2 SUB PUSH2 0x150 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x15 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x5F117AA3 PUSH1 0xE1 SHL DUP1 DUP3 MSTORE SWAP1 SWAP5 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 PUSH1 0x20 SWAP4 SWAP3 PUSH1 0x4 SWAP2 DUP6 SWAP1 DUP10 SWAP1 DUP5 SWAP1 DUP3 SWAP1 DUP11 AND GAS STATICCALL SWAP8 DUP9 ISZERO PUSH2 0x4844 JUMPI PUSH1 0x0 SWAP9 PUSH2 0x480D JUMPI JUMPDEST POP PUSH1 0x16 SLOAD DUP5 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP1 DUP3 MSTORE SWAP2 DUP9 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP7 SWAP1 MSTORE SWAP2 SWAP10 SWAP1 SWAP2 DUP8 SWAP2 DUP4 SWAP2 DUP3 SWAP1 DUP12 SWAP1 DUP3 SWAP1 PUSH1 0x40 ADD SUB SWAP3 AND GAS SWAP1 PUSH1 0x0 SWAP2 CALL DUP1 ISZERO PUSH2 0x465E JUMPI PUSH2 0x47D9 JUMPI JUMPDEST POP DUP6 PUSH1 0x15 SLOAD AND SWAP3 DUP5 MLOAD SWAP2 DUP3 MSTORE DUP6 DUP3 DUP5 DUP2 DUP8 GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x465E JUMPI PUSH1 0x0 SWAP3 PUSH2 0x47A2 JUMPI JUMPDEST POP DUP5 MLOAD PUSH4 0x25ABD85F PUSH1 0xE1 SHL DUP1 DUP3 MSTORE SWAP3 SWAP1 DUP8 DUP2 DUP7 DUP2 DUP10 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x4358 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x476D JUMPI JUMPDEST POP DUP7 MLOAD SWAP2 DUP9 DUP4 PUSH1 0x24 DUP2 PUSH4 0x3488E959 PUSH1 0xE2 SHL SWAP11 DUP12 DUP3 MSTORE PUSH1 0x0 DUP12 DUP4 ADD MSTORE GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x4715 JUMPI SWAP1 PUSH2 0x44C9 SWAP5 SWAP4 SWAP3 SWAP2 PUSH1 0x0 SWAP4 PUSH2 0x4755 JUMPI JUMPDEST POP PUSH2 0x4C59 JUMP JUMPDEST SWAP1 DUP7 PUSH1 0x15 SLOAD AND SWAP1 DUP6 MLOAD SWAP1 DUP2 MSTORE DUP7 DUP2 DUP6 DUP2 DUP6 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x46A2 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x4720 JUMPI JUMPDEST POP DUP6 MLOAD SWAP1 PUSH4 0xF77800E5 PUSH1 0xE0 SHL SWAP6 DUP7 DUP4 MSTORE DUP9 DUP4 DUP8 DUP2 DUP8 GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x4715 JUMPI SWAP1 DUP10 SWAP2 PUSH1 0x0 SWAP5 PUSH2 0x46DC JUMPI JUMPDEST POP PUSH1 0x24 DUP10 MLOAD DUP1 SWAP7 DUP2 SWAP4 DUP3 MSTORE PUSH1 0x1 DUP11 DUP4 ADD MSTORE GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x4358 JUMPI SWAP1 PUSH2 0x4543 SWAP5 SWAP4 SWAP3 SWAP2 PUSH1 0x0 SWAP4 PUSH2 0x46AD JUMPI POP PUSH2 0x4C59 JUMP JUMPDEST SWAP5 DUP1 PUSH1 0x15 SLOAD AND SWAP8 DUP5 MLOAD SWAP4 DUP1 DUP6 MSTORE DUP7 DUP6 DUP6 DUP2 DUP14 GAS STATICCALL SWAP5 DUP6 ISZERO PUSH2 0x46A2 JUMPI SWAP1 DUP8 SWAP2 PUSH1 0x0 SWAP7 PUSH2 0x4669 JUMPI JUMPDEST POP DUP5 DUP8 MLOAD DUP1 SWAP13 DUP2 SWAP4 DUP3 MSTORE GAS STATICCALL SWAP9 DUP10 ISZERO PUSH2 0x465E JUMPI PUSH1 0x0 SWAP10 PUSH2 0x4617 JUMPI JUMPDEST POP DUP5 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP9 SWAP1 SWAP9 AND SWAP2 DUP9 ADD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP7 SWAP1 MSTORE SWAP6 SWAP7 SWAP6 DUP5 SWAP3 DUP8 SWAP3 DUP4 SWAP1 SUB PUSH1 0x40 ADD SWAP2 DUP4 SWAP2 PUSH1 0x0 SWAP2 AND GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x460D JUMPI POP PUSH2 0x45D7 JUMPI JUMPDEST POP PUSH2 0x45D1 SWAP2 POP PUSH2 0x4E6A JUMP JUMPDEST POP PUSH1 0x1 SWAP1 JUMP JUMPDEST DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x4606 JUMPI JUMPDEST PUSH2 0x45EB DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x150 JUMPI PUSH2 0x45FF PUSH2 0x45D1 SWAP3 PUSH2 0x3734 JUMP JUMPDEST POP CODESIZE PUSH2 0x45C6 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x45E1 JUMP JUMPDEST MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 SWAP9 DUP7 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x4657 JUMPI JUMPDEST PUSH2 0x462E DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3A8A JUMPI POP SWAP2 PUSH1 0x0 DUP7 SWAP5 SWAP3 PUSH2 0x4649 DUP10 SWAP11 SWAP12 SWAP6 PUSH2 0x3999 JUMP JUMPDEST SWAP11 SWAP10 POP SWAP3 SWAP5 POP SWAP3 SWAP1 SWAP3 PUSH2 0x4584 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x4624 JUMP JUMPDEST DUP6 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP2 DUP3 DUP2 SWAP8 SWAP3 SWAP8 RETURNDATASIZE DUP4 GT PUSH2 0x469B JUMPI JUMPDEST PUSH2 0x4681 DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3A8A JUMPI POP PUSH2 0x4694 DUP8 SWAP2 PUSH2 0x3999 JUMP JUMPDEST SWAP5 CODESIZE PUSH2 0x4569 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x4677 JUMP JUMPDEST DUP7 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x46CE SWAP2 SWAP4 POP DUP10 RETURNDATASIZE DUP12 GT PUSH2 0x46D5 JUMPI JUMPDEST PUSH2 0x46C6 DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x439D JUMP JUMPDEST SWAP2 CODESIZE PUSH2 0x44C3 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x46BC JUMP JUMPDEST SWAP2 DUP3 DUP2 SWAP6 SWAP3 SWAP6 RETURNDATASIZE DUP4 GT PUSH2 0x470E JUMPI JUMPDEST PUSH2 0x46F4 DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3A8A JUMPI POP PUSH2 0x4707 DUP10 SWAP2 PUSH2 0x3999 JUMP JUMPDEST SWAP3 CODESIZE PUSH2 0x4514 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x46EA JUMP JUMPDEST DUP9 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 DUP8 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x474E JUMPI JUMPDEST PUSH2 0x4736 DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3A8A JUMPI POP PUSH2 0x4748 SWAP1 PUSH2 0x3999 JUMP JUMPDEST CODESIZE PUSH2 0x44EB JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x472C JUMP JUMPDEST PUSH2 0x46CE SWAP2 SWAP4 POP DUP11 RETURNDATASIZE DUP13 GT PUSH2 0x46D5 JUMPI PUSH2 0x46C6 DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST SWAP1 DUP9 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x479B JUMPI JUMPDEST PUSH2 0x4783 DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3A8A JUMPI POP PUSH2 0x4795 SWAP1 PUSH2 0x3999 JUMP JUMPDEST CODESIZE PUSH2 0x448F JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x4779 JUMP JUMPDEST SWAP1 SWAP2 DUP7 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x47D2 JUMPI JUMPDEST PUSH2 0x47B9 DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3A8A JUMPI POP PUSH2 0x47CB SWAP1 PUSH2 0x3999 JUMP JUMPDEST SWAP1 CODESIZE PUSH2 0x4469 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x47AF JUMP JUMPDEST DUP6 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x4806 JUMPI JUMPDEST PUSH2 0x47EE DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x150 JUMPI PUSH2 0x47FF SWAP1 PUSH2 0x3734 JUMP JUMPDEST POP CODESIZE PUSH2 0x4447 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x47E4 JUMP JUMPDEST SWAP1 SWAP8 DUP6 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x483D JUMPI JUMPDEST PUSH2 0x4824 DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3A8A JUMPI POP PUSH2 0x4836 SWAP1 PUSH2 0x3999 JUMP JUMPDEST SWAP7 CODESIZE PUSH2 0x43F8 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x481A JUMP JUMPDEST DUP5 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 PUSH1 0x15 SLOAD SWAP2 PUSH1 0x0 PUSH1 0x40 SWAP2 DUP3 MLOAD SWAP3 PUSH4 0x25ABD85F PUSH1 0xE1 SHL SWAP6 DUP7 DUP6 MSTORE PUSH1 0x20 SWAP3 PUSH1 0x4 SWAP6 DUP5 DUP2 DUP9 DUP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP8 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x4C04 JUMPI SWAP1 DUP4 SWAP2 DUP8 SWAP2 PUSH2 0x4C21 JUMPI JUMPDEST POP AND DUP1 EXTCODESIZE ISZERO PUSH2 0x4BF9 JUMPI DUP6 DUP3 SWAP2 DUP9 DUP7 MLOAD DUP1 SWAP5 DUP2 SWAP4 PUSH4 0xD0E30DB PUSH1 0xE4 SHL DUP4 MSTORE GAS CALL DUP1 ISZERO PUSH2 0x4C04 JUMPI SWAP1 DUP8 SWAP4 SWAP3 SWAP2 PUSH2 0x4C0E JUMPI JUMPDEST POP DUP5 DUP3 PUSH1 0x15 SLOAD AND DUP6 MLOAD SWAP9 DUP10 DUP1 SWAP3 DUP14 DUP3 MSTORE GAS STATICCALL SWAP7 DUP8 ISZERO PUSH2 0x4C04 JUMPI DUP7 SWAP8 PUSH2 0x4BC9 JUMPI JUMPDEST POP PUSH1 0x16 SLOAD DUP5 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP1 DUP3 MSTORE SWAP2 DUP5 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE SWAP2 SWAP9 SWAP1 SWAP2 DUP8 SWAP2 DUP4 SWAP2 DUP3 SWAP1 DUP12 SWAP1 DUP9 SWAP1 DUP4 SWAP1 PUSH1 0x40 ADD SUB SWAP4 AND GAS CALL DUP1 ISZERO PUSH2 0x4AC5 JUMPI PUSH2 0x4B95 JUMPI JUMPDEST POP DUP2 PUSH1 0x15 SLOAD AND DUP5 MLOAD SWAP10 DUP11 MSTORE DUP6 DUP11 DUP6 DUP2 DUP5 GAS STATICCALL SWAP10 DUP11 ISZERO PUSH2 0x4AC5 JUMPI DUP8 SWAP11 PUSH2 0x4B5E JUMPI JUMPDEST POP DUP5 MLOAD PUSH4 0xF77800E5 PUSH1 0xE0 SHL DUP1 DUP3 MSTORE SWAP11 DUP8 DUP3 DUP8 DUP2 DUP7 GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x4B15 JUMPI DUP9 SWAP1 DUP11 SWAP4 PUSH2 0x4B1F JUMPI JUMPDEST POP DUP8 MLOAD PUSH4 0x3488E959 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 DUP9 DUP3 ADD MSTORE SWAP4 DUP5 SWAP1 PUSH1 0x24 SWAP1 DUP3 SWAP1 GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x4B15 JUMPI SWAP2 PUSH2 0x49AB SWAP4 SWAP2 DUP8 SWAP7 SWAP6 SWAP4 DUP12 SWAP4 PUSH2 0x4755 JUMPI POP PUSH2 0x4C59 JUMP JUMPDEST SWAP7 DUP2 PUSH1 0x15 SLOAD AND SWAP10 DUP7 DUP12 DUP8 MLOAD SWAP7 DUP8 DUP1 SWAP3 DUP6 DUP3 MSTORE GAS STATICCALL SWAP5 DUP6 ISZERO PUSH2 0x4B0B JUMPI SWAP1 DUP8 SWAP2 DUP10 SWAP7 PUSH2 0x4ACF JUMPI JUMPDEST POP DUP5 DUP8 MLOAD DUP1 SWAP14 DUP2 SWAP4 DUP3 MSTORE GAS STATICCALL SWAP10 DUP11 ISZERO PUSH2 0x4AC5 JUMPI DUP8 SWAP11 PUSH2 0x4A7B JUMPI JUMPDEST POP DUP5 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP10 SWAP1 SWAP10 AND SWAP2 DUP10 ADD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP8 SWAP1 MSTORE SWAP7 SWAP8 SWAP6 SWAP7 DUP5 SWAP3 DUP8 SWAP3 DUP4 SWAP1 SUB PUSH1 0x40 ADD SWAP2 DUP4 SWAP2 DUP9 SWAP2 AND GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x4A72 JUMPI POP PUSH2 0x4A38 JUMPI JUMPDEST POP POP POP PUSH2 0x45D1 SWAP1 PUSH2 0x4E6A JUMP JUMPDEST DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x4A6B JUMPI JUMPDEST PUSH2 0x4A4C DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3A8A JUMPI POP SWAP1 PUSH2 0x4A62 PUSH2 0x45D1 SWAP3 PUSH2 0x3734 JUMP JUMPDEST POP SWAP1 CODESIZE DUP1 PUSH2 0x4A2C JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x4A42 JUMP JUMPDEST MLOAD RETURNDATASIZE DUP5 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 SWAP10 POP DUP6 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x4ABE JUMPI JUMPDEST PUSH2 0x4A93 DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x4ABA JUMPI SWAP2 DUP7 DUP7 SWAP5 SWAP3 PUSH2 0x4AAC DUP11 SWAP12 SWAP13 SWAP6 PUSH2 0x3999 JUMP JUMPDEST SWAP12 SWAP11 POP SWAP3 SWAP5 POP SWAP3 SWAP1 SWAP3 PUSH2 0x49EA JUMP JUMPDEST DUP7 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x4A89 JUMP JUMPDEST DUP6 MLOAD RETURNDATASIZE DUP10 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP3 DUP2 SWAP4 SWAP3 SWAP8 POP RETURNDATASIZE DUP4 GT PUSH2 0x4B04 JUMPI JUMPDEST PUSH2 0x4AE7 DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x4B00 JUMPI PUSH2 0x4AF9 DUP8 SWAP2 PUSH2 0x3999 JUMP JUMPDEST SWAP5 CODESIZE PUSH2 0x49D0 JUMP JUMPDEST DUP8 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x4ADD JUMP JUMPDEST DUP7 MLOAD RETURNDATASIZE DUP11 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP8 MLOAD RETURNDATASIZE DUP12 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP1 SWAP3 SWAP4 POP DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x4B57 JUMPI JUMPDEST PUSH2 0x4B36 DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x4B53 JUMPI SWAP1 DUP8 PUSH2 0x4B4C PUSH1 0x24 SWAP5 SWAP4 PUSH2 0x3999 JUMP JUMPDEST SWAP3 SWAP4 PUSH2 0x4971 JUMP JUMPDEST DUP9 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x4B2C JUMP JUMPDEST SWAP1 SWAP10 POP DUP6 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x4B8E JUMPI JUMPDEST PUSH2 0x4B76 DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x4ABA JUMPI PUSH2 0x4B87 SWAP1 PUSH2 0x3999 JUMP JUMPDEST SWAP9 CODESIZE PUSH2 0x494B JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x4B6C JUMP JUMPDEST DUP6 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x4BC2 JUMPI JUMPDEST PUSH2 0x4BAA DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x4ABA JUMPI PUSH2 0x4BBB SWAP1 PUSH2 0x3734 JUMP JUMPDEST POP CODESIZE PUSH2 0x492B JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x4BA0 JUMP JUMPDEST SWAP1 SWAP7 POP DUP5 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x4BFD JUMPI JUMPDEST PUSH2 0x4BE1 DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x4BF9 JUMPI PUSH2 0x4BF2 SWAP1 PUSH2 0x3999 JUMP JUMPDEST SWAP6 CODESIZE PUSH2 0x48DE JUMP JUMPDEST DUP6 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x4BD7 JUMP JUMPDEST DUP5 MLOAD RETURNDATASIZE DUP9 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x4C1A SWAP1 SWAP7 SWAP2 SWAP7 PUSH2 0x3281 JUMP JUMPDEST SWAP5 CODESIZE PUSH2 0x48BE JUMP JUMPDEST DUP1 SWAP3 POP DUP7 DUP1 SWAP3 POP RETURNDATASIZE DUP4 GT PUSH2 0x4C52 JUMPI JUMPDEST PUSH2 0x4C3A DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x4BF9 JUMPI PUSH2 0x4C4C DUP4 SWAP2 PUSH2 0x3999 JUMP JUMPDEST CODESIZE PUSH2 0x488F JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x4C30 JUMP JUMPDEST PUSH1 0x16 SLOAD PUSH1 0x40 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x24 DUP3 ADD DUP2 SWAP1 MSTORE SWAP4 SWAP6 SWAP5 SWAP4 SWAP3 SWAP1 SWAP2 AND SWAP2 SWAP1 PUSH1 0x20 DUP2 PUSH1 0x44 DUP2 DUP7 GAS STATICCALL DUP1 ISZERO PUSH2 0xE30 JUMPI DUP6 SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x4E35 JUMPI JUMPDEST POP LT PUSH2 0x4DC9 JUMPI JUMPDEST POP PUSH1 0x3C TIMESTAMP ADD SWAP4 DUP5 TIMESTAMP GT PUSH2 0x3BA9 JUMPI PUSH1 0x16 SLOAD PUSH1 0x40 MLOAD PUSH2 0x100 DUP2 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT DUP2 DUP5 LT OR PUSH2 0x9DB JUMPI PUSH1 0x40 SWAP3 DUP4 MSTORE SWAP4 DUP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x20 DUP6 DUP2 ADD SWAP2 DUP3 MSTORE PUSH3 0xFFFFFF SWAP7 DUP8 AND DUP7 DUP6 ADD SWAP1 DUP2 MSTORE ADDRESS PUSH1 0x60 DUP9 ADD SWAP1 DUP2 MSTORE PUSH1 0x80 DUP9 ADD SWAP11 DUP12 MSTORE PUSH1 0xA0 DUP9 ADD SWAP10 DUP11 MSTORE PUSH1 0x0 PUSH1 0xC0 DUP10 ADD DUP2 DUP2 MSTORE PUSH1 0xE0 DUP11 ADD DUP3 DUP2 MSTORE SWAP8 MLOAD PUSH4 0x414BF389 PUSH1 0xE0 SHL DUP2 MSTORE SWAP10 MLOAD DUP10 AND PUSH1 0x4 DUP12 ADD MSTORE SWAP5 MLOAD DUP9 AND PUSH1 0x24 DUP11 ADD MSTORE SWAP2 MLOAD SWAP1 SWAP9 AND PUSH1 0x44 DUP9 ADD MSTORE SWAP7 MLOAD DUP6 AND PUSH1 0x64 DUP8 ADD MSTORE SWAP8 MLOAD PUSH1 0x84 DUP7 ADD MSTORE SWAP6 MLOAD PUSH1 0xA4 DUP6 ADD MSTORE SWAP5 MLOAD PUSH1 0xC4 DUP5 ADD MSTORE MLOAD AND PUSH1 0xE4 DUP3 ADD MSTORE SWAP3 SWAP2 DUP4 SWAP2 PUSH2 0x104 SWAP2 DUP4 SWAP2 SWAP1 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0xE30 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x4D9A JUMPI POP SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x4DC1 JUMPI JUMPDEST DUP2 PUSH2 0x4DB4 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3A8A JUMPI POP MLOAD SWAP1 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x4DA7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x0 NOT PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0x44 DUP2 PUSH1 0x0 DUP7 GAS CALL DUP1 ISZERO PUSH2 0xE30 JUMPI ISZERO PUSH2 0x4CAB JUMPI PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x4E2D JUMPI JUMPDEST DUP2 PUSH2 0x4E15 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x150 JUMPI PUSH2 0x4E26 SWAP1 PUSH2 0x3734 JUMP JUMPDEST POP CODESIZE PUSH2 0x4CAB JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x4E08 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP3 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x4E62 JUMPI JUMPDEST DUP2 PUSH2 0x4E50 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3A8A JUMPI POP DUP5 SWAP1 MLOAD CODESIZE PUSH2 0x4CA4 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x4E43 JUMP JUMPDEST PUSH1 0x15 SLOAD PUSH1 0x40 MLOAD PUSH4 0xF77800E5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x4 SWAP1 DUP3 SWAP1 DUP7 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xE30 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x4EE9 JUMPI JUMPDEST POP AND SWAP1 DUP2 EXTCODESIZE ISZERO PUSH2 0x150 JUMPI PUSH1 0x0 SWAP2 PUSH1 0x24 DUP4 SWAP3 PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP4 DUP5 SWAP3 PUSH4 0x852CD8D PUSH1 0xE3 SHL DUP5 MSTORE PUSH1 0x4 DUP5 ADD MSTORE GAS CALL DUP1 ISZERO PUSH2 0xE30 JUMPI PUSH2 0x4EDA JUMPI POP PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH2 0x4EE3 SWAP1 PUSH2 0x3281 JUMP JUMPDEST CODESIZE PUSH2 0x45D1 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 RETURNDATASIZE DUP3 GT PUSH2 0x4F1A JUMPI JUMPDEST DUP2 PUSH2 0x4F02 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3A8A JUMPI POP PUSH2 0x4F14 SWAP1 PUSH2 0x3999 JUMP JUMPDEST CODESIZE PUSH2 0x4EA0 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x4EF5 JUMP JUMPDEST SWAP3 SWAP1 SWAP2 PUSH1 0xFF PUSH1 0x4 SLOAD AND PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x1D7 JUMPI DUP1 PUSH1 0x2 PUSH2 0x4F49 SWAP3 EQ ISZERO SWAP1 DUP2 PUSH2 0x4040 JUMPI POP PUSH2 0x36B9 JUMP JUMPDEST PUSH1 0x3 DUP5 LT ISZERO PUSH2 0x1D7 JUMPI DUP4 PUSH2 0x4FB2 JUMPI PUSH1 0x0 DUP1 DUP1 DUP5 DUP2 SWAP5 DUP3 SWAP1 DUP3 ISZERO PUSH2 0x4FA8 JUMPI JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 CALL ISZERO PUSH2 0xE30 JUMPI PUSH32 0x4A647B1D902051B0AE802F6050C58456D79D826BDF2BBF37A1BF13BE97727B2D SWAP2 JUMPDEST PUSH2 0x3C7B PUSH2 0x3DF1 DUP4 DUP4 DUP8 PUSH2 0x3C8E JUMP JUMPDEST PUSH2 0x8FC SWAP2 POP PUSH2 0x4F67 JUMP JUMPDEST SWAP1 SWAP2 SWAP1 DUP3 PUSH1 0x1 DUP6 EQ PUSH1 0x0 DUP2 ISZERO PUSH2 0x50DA JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x50C8 JUMPI JUMPDEST POP SWAP1 PUSH2 0x5021 SWAP3 PUSH2 0x4FDB PUSH1 0x20 SWAP4 PUSH2 0x395F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x4FEC DUP9 PUSH2 0x5123 JUMP JUMPDEST AND SWAP1 PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 SWAP7 DUP2 SWAP6 DUP3 SWAP5 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x4 DUP5 ADD PUSH1 0x20 SWAP1 SWAP4 SWAP3 SWAP2 SWAP4 PUSH1 0x40 DUP2 ADD SWAP5 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE ADD MSTORE JUMP JUMPDEST SUB SWAP3 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0xE30 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x5066 JUMPI JUMPDEST POP SWAP1 PUSH2 0x5061 PUSH32 0x4A647B1D902051B0AE802F6050C58456D79D826BDF2BBF37A1BF13BE97727B2D SWAP4 SWAP3 PUSH2 0x50E5 JUMP JUMPDEST PUSH2 0x4F9A JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 RETURNDATASIZE DUP3 GT PUSH2 0x50C0 JUMPI JUMPDEST DUP2 PUSH2 0x507F PUSH1 0x20 SWAP4 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3A8A JUMPI POP SWAP1 PUSH2 0x5061 PUSH2 0x50B7 PUSH32 0x4A647B1D902051B0AE802F6050C58456D79D826BDF2BBF37A1BF13BE97727B2D SWAP5 SWAP4 PUSH2 0x3734 JUMP JUMPDEST SWAP2 SWAP3 SWAP4 POP PUSH2 0x5034 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x5072 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1D7 JUMPI DUP3 PUSH1 0x0 PUSH2 0x5021 PUSH2 0x4FCA JUMP JUMPDEST PUSH1 0x2 DUP8 EQ SWAP2 POP PUSH2 0x4FC3 JUMP JUMPDEST ISZERO PUSH2 0x50EC JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x1514905394D1915497D19052531151 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x1D7 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x5178 JUMPI PUSH1 0x1 EQ PUSH2 0x5140 JUMPI PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x15 SLOAD PUSH1 0x40 MLOAD PUSH4 0xF77800E5 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x4 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xE30 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x3A5F JUMPI POP SWAP1 JUMP JUMPDEST POP PUSH1 0x15 SLOAD PUSH1 0x40 MLOAD PUSH4 0x5F117AA3 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x4 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xE30 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x3A5F JUMPI POP SWAP1 JUMP JUMPDEST DUP1 PUSH1 0x0 SWAP2 PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP1 DUP3 LT ISZERO PUSH2 0x530B JUMPI JUMPDEST POP PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP1 DUP4 LT ISZERO PUSH2 0x52FC JUMPI JUMPDEST POP PUSH7 0x2386F26FC10000 DUP1 DUP4 LT ISZERO PUSH2 0x52ED JUMPI JUMPDEST POP PUSH4 0x5F5E100 DUP1 DUP4 LT ISZERO PUSH2 0x52DE JUMPI JUMPDEST POP PUSH2 0x2710 DUP1 DUP4 LT ISZERO PUSH2 0x52CF JUMPI JUMPDEST POP PUSH1 0x64 DUP3 LT ISZERO PUSH2 0x52BF JUMPI JUMPDEST PUSH1 0xA DUP1 SWAP3 LT ISZERO PUSH2 0x52B5 JUMPI JUMPDEST PUSH1 0x1 SWAP1 DUP2 PUSH1 0x21 DUP2 DUP7 ADD SWAP6 PUSH2 0x524A DUP8 PUSH2 0x3622 JUMP JUMPDEST SWAP7 PUSH2 0x5258 PUSH1 0x40 MLOAD SWAP9 DUP10 PUSH2 0x32AF JUMP JUMPDEST DUP1 DUP9 MSTORE PUSH2 0x5267 PUSH1 0x1F NOT SWAP2 PUSH2 0x3622 JUMP JUMPDEST ADD CALLDATASIZE PUSH1 0x20 DUP10 ADD CALLDATACOPY DUP7 ADD ADD SWAP1 JUMPDEST PUSH2 0x527F JUMPI JUMPDEST POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 NOT ADD SWAP1 DUP4 SWAP1 PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP3 DUP3 MOD BYTE DUP4 MSTORE8 DIV SWAP2 DUP3 ISZERO PUSH2 0x52B0 JUMPI SWAP2 SWAP1 DUP3 PUSH2 0x5273 JUMP JUMPDEST PUSH2 0x5278 JUMP JUMPDEST SWAP2 PUSH1 0x1 ADD SWAP2 PUSH2 0x5237 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x64 PUSH1 0x2 SWAP2 DIV SWAP2 ADD SWAP2 PUSH2 0x522C JUMP JUMPDEST PUSH1 0x4 SWAP2 SWAP4 SWAP3 DIV SWAP2 ADD SWAP2 CODESIZE PUSH2 0x5221 JUMP JUMPDEST PUSH1 0x8 SWAP2 SWAP4 SWAP3 DIV SWAP2 ADD SWAP2 CODESIZE PUSH2 0x5214 JUMP JUMPDEST PUSH1 0x10 SWAP2 SWAP4 SWAP3 DIV SWAP2 ADD SWAP2 CODESIZE PUSH2 0x5205 JUMP JUMPDEST PUSH1 0x20 SWAP2 SWAP4 SWAP3 DIV SWAP2 ADD SWAP2 CODESIZE PUSH2 0x51F3 JUMP JUMPDEST PUSH1 0x40 SWAP4 POP DUP2 DIV SWAP2 POP CODESIZE PUSH2 0x51DA JUMP INVALID PUSH6 0x9F33FC6677BE 0xBF GASPRICE SWAP12 RETURN LT LT SWAP3 PUSH26 0x2E31F35766D0358E54577BDD91A655F6A0405787FA12A823E0F2 0xB7 PUSH4 0x1CC41B3B 0xA8 DUP3 DUP12 CALLER 0x21 0xCA DUP2 GT GT STATICCALL PUSH22 0xCD3AA3BB5ACEC2575A0E9E593C00F959F8C92F12DB28 PUSH10 0xC3395A3B0502D05E2516 PREVRANDAO PUSH16 0x71F85B31ECC21A745E3968A04E9570E4 TIMESTAMP JUMPDEST 0xC1 DUP16 0xA8 ADD SWAP13 PUSH9 0x28196B546D1669C20 0xC PUSH9 0x1B6847DC741A1B0CD0 DUP14 0x27 DUP9 GASLIMIT 0xF9 0xD8 NOT 0xD8 PUSH28 0x734759AFB55FE2DE5CB82A9AE6728D1108E10BCB7C27DDDFC02ED9D6 SWAP4 LOG0 PUSH21 0x39D026CF4EA4240B40F7D581AC802A26469706673 PC 0x22 SLT KECCAK256 0xE4 PUSH19 0x9C8350ED9965E7CFEF223F52992187ADB08588 SELFDESTRUCT DUP12 DUP9 SWAP14 SWAP5 PUSH29 0x6A8027A67A64736F6C6343000813003300000000000000000000000000 ","sourceMap":"778:408:7:-:0;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;713:14:32;778:408:7;713:14:32;778:408:7;737:14:32;778:408:7;761:13:32;952:18:24;925:8;778:408:7;-1:-1:-1;778:408:7;;998:18:24;778:408:7;;;;;;;;;;;;;;;;;;;1059:28:24;778:408:7;;;1059:28:24;778:408:7;1146:10:24;778:408:7;1119:24:24;778:408:7;;;1119:24:24;778:408:7;;;;;;;;;1184:46:24;;;;778:408:7;;;;1184:46:24;;;;;;;;;;;;;;-1:-1:-1;778:408:7;;;1166:15:24;778:408:7;;;1166:15:24;778:408:7;;1405:24:32;778:408:7;;1405:24:32;:::i;:::-;778:408:7;1476:24:32;778:408:7;;1476:24:32;:::i;:::-;778:408:7;;1547:23:32;778:408:7;;1547:23:32;:::i;:::-;778:408:7;;1367:221:32;;;;;;778:408:7;;:::i;:::-;-1:-1:-1;;;778:408:7;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;1367:221:32;;;;;;;;;;;;:::i;:::-;778:408:7;;;-1:-1:-1;;;;;778:408:7;;;;1240:16:24;778:408:7;;;;;;;;;;;-1:-1:-1;778:408:7;;;;;;1367:221:32;778:408:7;;;;-1:-1:-1;778:408:7;;;1367:221:32;778:408:7;;;;;;;;;1743:13:24;778:408:7;;;;;;-1:-1:-1;;;;778:408:7;;;;;;;;;;;1240:16:24;778:408:7;;;;;;;;;;;;;;1352:18:24;778:408:7;;1412:6:24;778:408:7;;;;;;;1491:6:24;778:408:7;;;;1059:28:24;778:408:7;;1568:6:24;778:408:7;;;;1119:24:24;778:408:7;;1646:7:24;778:408:7;;;;;;1725:7:24;778:408:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;778:408:7;;;;;1240:16:24;778:408:7;;;;;;;;;;;;;;;;;;;;;;1743:13:24;778:408:7;;;;;;;;;;;1240:16:24;778:408:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1240:16:24;778:408:7;;;;;1367:221:32;778:408:7;;;;;;;;;;;;;1367:221:32;778:408:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;778:408:7;;;;;-1:-1:-1;;;778:408:7;;;;;;;;;;;;;;;;-1:-1:-1;;;778:408:7;;;;;;;;1184:46:24;;;;;;;;;;;;;;;;;;:::i;:::-;;;778:408:7;;;;;;;;:::i;:::-;1184:46:24;;;778:408:7;;;;1184:46:24;;;;;;778:408:7;;;;;;;;;;-1:-1:-1;778:408:7;;;1367:221:32;778:408:7;;;-1:-1:-1;;778:408:7;;;;-1:-1:-1;;;;;778:408:7;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;-1:-1:-1;;;;;778:408:7;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;778:408:7;;;;1367:221:32;778:408:7;-1:-1:-1;;778:408:7;;;;:::o;447:696:1:-;569:17;-1:-1:-1;10276:8:2;;10267:17;;;;10263:103;;447:696:1;10392:8:2;;10383:17;;;;10379:103;;447:696:1;10508:8:2;;10499:17;;;;10495:103;;447:696:1;10624:7:2;;10615:16;;;;10611:100;;447:696:1;10737:7:2;;10728:16;;;;10724:100;;447:696:1;10841:16:2;10850:7;10841:16;;;10837:100;;447:696:1;10963:7:2;10954:16;;;;10950:66;;447:696:1;589:1;778:408:7;;731:76:1;778:408:7;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;1367:221:32;;778:408:7;;:::i;:::-;;;;;;;731:76:1;;;820:280;589:1;;;820:280;1113:13;;;;447:696;:::o;820:280::-;-1:-1:-1;;778:408:7;;;;-1:-1:-1;;;925:93:1;;;;778:408:7;925:93:1;778:408:7;1068:10:1;;;1064:21;;820:280;;;;;1064:21;1080:5;;10950:66:2;778:408:7;11000:1:2;778:408:7;10950:66:2;;;10837:100;778:408:7;;10850:7:2;10921:1;778:408:7;;;;10837:100:2;;;10724;10808:1;778:408:7;;;;;;10724:100:2;;;;10611;10695:1;778:408:7;;;;;;10611:100:2;;;;10495:103;10581:2;778:408:7;;;;;;10495:103:2;;;;10379;10465:2;778:408:7;;;;;;10379:103:2;;;;10263;10349:2;;-1:-1:-1;778:408:7;;;-1:-1:-1;10263:103:2;;"},"deployedBytecode":{"functionDebugData":{"abi_decode_address_fromMemory":{"entryPoint":14745,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_bool_fromMemory":{"entryPoint":14132,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_bytes":{"entryPoint":13885,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_bytes_fromMemory":{"entryPoint":14765,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_enum_Tokenst_address":{"entryPoint":13811,"id":null,"parameterSlots":1,"returnSlots":2},"abi_decode_enum_Tokenst_addresst_uint256":{"entryPoint":13760,"id":null,"parameterSlots":1,"returnSlots":3},"abi_decode_uint24_fromMemory":{"entryPoint":17309,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_uint64_fromMemory":{"entryPoint":15168,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_address_address":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_address_uint256":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_address_uint256_enum_Tokens":{"entryPoint":15700,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_bytes":{"entryPoint":13403,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_bytes_storage":{"entryPoint":12731,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_bytes_storage_83433":{"entryPoint":12234,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_bytes_storage_83434":{"entryPoint":12380,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_bytes_storage_83437":{"entryPoint":12497,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_bytes_storage_83438":{"entryPoint":12614,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_enum_PostStatus":{"entryPoint":13503,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_enum_Tokens":{"entryPoint":12163,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_enum_Tokens_address_uint256_uint256":{"entryPoint":15308,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_struct_Post":{"entryPoint":13956,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_struct_PostData":{"entryPoint":13516,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_struct_Post_storage":{"entryPoint":14235,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_struct_User":{"entryPoint":13440,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_and_zero_memory_struct_struct_Post":{"entryPoint":14571,"id":null,"parameterSlots":0,"returnSlots":1},"allocate_and_zero_memory_struct_struct_PostSettings":{"entryPoint":14521,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_bytes":{"entryPoint":13858,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_uint256":{"entryPoint":15489,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_uint256":{"entryPoint":15254,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_uint256":{"entryPoint":15295,"id":null,"parameterSlots":2,"returnSlots":1},"copy_literal_to_memory_27489e20a0060b723a1748bdff5e44570ee9fae64141728105692eac6031e8a4":{"entryPoint":14831,"id":null,"parameterSlots":0,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":13368,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":12176,"id":null,"parameterSlots":1,"returnSlots":1},"extract_returndata":{"entryPoint":16460,"id":null,"parameterSlots":0,"returnSlots":1},"finalize_allocation":{"entryPoint":12975,"id":null,"parameterSlots":2,"returnSlots":0},"finalize_allocation_57837":{"entryPoint":12848,"id":null,"parameterSlots":1,"returnSlots":0},"finalize_allocation_57838":{"entryPoint":12875,"id":null,"parameterSlots":1,"returnSlots":0},"finalize_allocation_57846":{"entryPoint":12902,"id":null,"parameterSlots":1,"returnSlots":0},"finalize_allocation_58016":{"entryPoint":12929,"id":null,"parameterSlots":1,"returnSlots":0},"finalize_allocation_83427":{"entryPoint":12948,"id":null,"parameterSlots":1,"returnSlots":0},"fun_addStake":{"entryPoint":15742,"id":4706,"parameterSlots":4,"returnSlots":1},"fun_burn":{"entryPoint":20074,"id":3231,"parameterSlots":1,"returnSlots":1},"fun_burnDai":{"entryPoint":17336,"id":3003,"parameterSlots":1,"returnSlots":1},"fun_burnStake":{"entryPoint":16566,"id":4934,"parameterSlots":3,"returnSlots":1},"fun_burnWeth":{"entryPoint":18511,"id":3093,"parameterSlots":1,"returnSlots":1},"fun_decreaseDeposit":{"entryPoint":15502,"id":3998,"parameterSlots":3,"returnSlots":1},"fun_getDeposit":{"entryPoint":15065,"id":4048,"parameterSlots":2,"returnSlots":1},"fun_getTokenAddress":{"entryPoint":20771,"id":5582,"parameterSlots":1,"returnSlots":1},"fun_getTokenIdAddress":{"entryPoint":14863,"id":3784,"parameterSlots":0,"returnSlots":1},"fun_increaseDeposit":{"entryPoint":15352,"id":3940,"parameterSlots":3,"returnSlots":1},"fun_swapTokensForToken":{"entryPoint":19545,"id":3201,"parameterSlots":4,"returnSlots":1},"fun_takeStake":{"entryPoint":20258,"id":4785,"parameterSlots":4,"returnSlots":1},"fun_toString":{"entryPoint":20913,"id":136,"parameterSlots":1,"returnSlots":1},"read_from_storage_reference_type_struct_PostData":{"entryPoint":13116,"id":null,"parameterSlots":0,"returnSlots":1},"read_from_storage_reference_type_struct_User":{"entryPoint":13008,"id":null,"parameterSlots":0,"returnSlots":1},"require_helper_stringliteral":{"entryPoint":14070,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_0e19":{"entryPoint":14145,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_5da6":{"entryPoint":15111,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_8bf8":{"entryPoint":20709,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_9dea":{"entryPoint":15188,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_c2a5":{"entryPoint":14687,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_e7ad":{"entryPoint":14009,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_f343":{"entryPoint":16508,"id":null,"parameterSlots":1,"returnSlots":0},"update_storage_value_offsett_address_to_address":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":0},"update_storage_value_offsett_address_to_address_57832":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":0},"update_storage_value_offsett_address_to_address_57847":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":0},"update_storage_value_offsett_enum_PostStatus_to_enum_PostStatus":{"entryPoint":14210,"id":null,"parameterSlots":1,"returnSlots":0},"validator_assert_enum_PostType":{"entryPoint":13094,"id":null,"parameterSlots":1,"returnSlots":0},"write_to_memory_enum_Tokens":{"entryPoint":13104,"id":null,"parameterSlots":2,"returnSlots":0}},"generatedSources":[],"immutableReferences":{"6047":[{"length":32,"start":8556}],"6049":[{"length":32,"start":8597}],"6051":[{"length":32,"start":8644}]},"linkReferences":{},"object":"608080604052600436101561001d575b50361561001b57600080fd5b005b60003560e01c908163010a38f514612f645750806305c1f50214612f1b57806307388dba14612c435780630917e77614612bfd57806317906c2e14612bdf5780631d0b4af514612b0f5780633d876d5d146122d15780634c38d877146122a15780634e69d5601461227957806352a6cb4a1461226057806354fd4d50146121565780635ad4e170146121295780635c63ed69146120f9578063729e2eb1146120295780637abe914d14611dca5780638c6838ba14611d7e5780638da5cb5b14611d555780638f287dc2146112d05780638f903c7914610fbc578063d24e0c8714610f9e578063d2af47ab146102a8578063ed70d5d5146101ed578063f2d7dbb6146101555763faeb5e1714610132573861000f565b34610150576000366003190112610150576020600b54604051908152f35b600080fd5b3461015057610163366135f3565b9060ff600854169060038210156101d75760038110156101d75760209261018e6101a093831461395f565b6101983383613ad9565b913390614f22565b6009546001600160a01b039033908216036101c3575080600c555b604051908152f35b600a541633036101bb575b80600b556101bb565b634e487b7160e01b600052602160045260246000fd5b34610150576101fb366135c0565b60ff6008939293541660038110156101d75760038310156101d75761022190831461395f565b81600052601a602052604060002033600052602052806040600020541061027057602092610250923390614f22565b600954336001600160a01b03909116036101ce5780600c55604051908152f35b60405162461bcd60e51b815260206004820152601060248201526f4e4f545f454e4f5547485f5354414b4560801b6044820152606490fd5b610120366003190112610150576004356001600160401b038111610150576102d490369060040161363d565b60056024351015610150576005604435101561015057600360a43510156101505760c4356001600160a01b03811690036101505760e4356001600160a01b0381169003610150576101043515156101043503610150576103326138eb565b506000600160a435148015610f8e575b81908015610f7f575b610355915061395f565b6000546001600160a01b031633036101505760145460405163122643f360e21b81526001600160a01b0360e43581166004830152909160209183916024918391165afa908115610e3057600091610f45575b5015610f0f5760ff6004541660088110156101d75760005260196020526103d560ff604060002054166136b9565b60843515610ed65760643515610ea2576101043515610e3c576101d75760a435600052601a602052604060002060018060a01b0360e4351660005260205261042660843560406000205410156136f6565b6084355b610435604435613326565b60ff6044351660005260186020526040600020549160ff600454169160088310156101d757600092835260196020526040808420805460ff1990811690915560018086527ffc941c3961fb6541da34150022cddf959da0fb2353866a6bfbd249c2da0929148054831682179055600480549092161781556014549151633bcaa1d960e21b81526001600160a01b0360e435811692820192909252949185916024918391165afa928315610e3057600093610d7d575b50604051936104f88561324b565b60018552610507602435613326565b602435602086015242604086015260006060860152608085015261053060a43560a08601613330565b6040519061053d8261324b565b6000825260018060a01b0360e4351660208301526040820152606435606082015260006080820152600060a08201526105746139ef565b61057c6139ef565b906040519361058a85613230565b845260208401526040830152604051936105a385613230565b845260208401526040830152604051916105bc83613266565b81835260208301528051600180546001600160a01b0319166001600160a01b039290921691909117905560208101518051906001600160401b0382116109db57610607600254612f90565b601f8111610d14575b50602090601f8311600114610c9b57604093929160009183610c90575b50508160011b916000199060031b1c1916176002555b01518051906001600160401b0382116109db578190610663600354612f90565b601f8111610c19575b50602090601f8311600114610ba157600092610b96575b50508160011b916000199060031b1c1916176003555b6020810151805180519060088210156101d7576106b760a092613782565b60208101516106c581613326565b6106ce81613326565b61ff006004549160081b169061ff0019161760045560408101516005556060810151600655608081015160075501519060038210156101d75760409160ff80196008541691161760085560a06020820151610748600180841b0382511660018060a01b03166001600160601b0360a01b6009541617600955565b610774600180841b0360208301511660018060a01b03166001600160601b0360a01b600a541617600a55565b83810151600b556060810151600c556080810151600d550151600e5501519081519182516001600160401b0381116109db576107b1600f54612f90565b601f8111610b43575b506020601f8211600114610ad15781929394600092610ac6575b50508160011b916000199060031b1c191617600f555b60208101518051906001600160401b0382116109db5761080b601054612f90565b601f8111610a73575b50602090601f83116001146109fc576040939291600091836109f1575b50508160011b916000199060031b1c1916176010555b0151908151906001600160401b0382116109db576011916108688354612f90565b601f8111610989575b506020601f8211600114610919578192939460009261090e575b50508160011b916000199060031b1c19161782555b6013549160001983146108fa575060016108f692016013557f6e8f9f12846cf7ba30acdd742f3eae58c49befeed93f00d60de3bd4f7d09f223604051806108e78482613684565b0390a160405191829182613684565b0390f35b634e487b7160e01b60005260045260246000fd5b01519050848061088b565b601f198216908460005260008051602061537a8339815191529160005b81811061097157509583600195969710610958575b505050811b0182556108a0565b015160001960f88460031b161c1916905584808061094b565b9192602060018192868b015181550194019201610936565b8360005260008051602061537a833981519152601f830160051c810191602084106109d1575b601f0160051c01905b8181106109c55750610871565b600081556001016109b8565b90915081906109af565b634e487b7160e01b600052604160045260246000fd5b015190508580610831565b90601f19831691601060005260008051602061539a8339815191529260005b818110610a5b5750916001939185604097969410610a42575b505050811b01601055610847565b015160001960f88460031b161c19169055858080610a34565b92936020600181928786015181550195019301610a1b565b601060005260008051602061539a833981519152601f840160051c81019160208510610abc575b601f0160051c01905b818110610ab05750610814565b60008155600101610aa3565b9091508190610a9a565b0151905084806107d4565b601f19821690600f6000526000805160206153ba8339815191529160005b818110610b2b57509583600195969710610b12575b505050811b01600f556107ea565b015160001960f88460031b161c19169055848080610b04565b9192602060018192868b015181550194019201610aef565b600f6000526000805160206153ba833981519152601f830160051c81019160208410610b8c575b601f0160051c01905b818110610b8057506107ba565b60008155600101610b73565b9091508190610b6a565b015190508380610683565b9250600360005260008051602061535a833981519152906000935b601f1984168510610bfe576001945083601f19811610610be5575b505050811b01600355610699565b015160001960f88460031b161c19169055838080610bd7565b81810151835560209485019460019093019290910190610bbc565b9091506003600052601f830160051c60008051602061535a833981519152019060208410610c7a575b90601f8493920160051c60008051602061535a83398151915201905b818110610c6b575061066c565b60008155849350600101610c5e565b60008051602061535a8339815191529150610c42565b01519050858061062d565b90600260005260008051602061533a8339815191529160005b601f1985168110610cfc575091839160019360409695601f19811610610ce3575b505050811b01600255610643565b015160001960f88460031b161c19169055858080610cd5565b91926020600181928685015181550194019201610cb4565b6002600052601f830160051c60008051602061533a8339815191520160208410610d68575b601f820160051c60008051602061533a833981519152018110610d5c5750610610565b60008155600101610d39565b5060008051602061533a833981519152610d39565b9092503d806000833e610d9081836132af565b6020828281010312610150578151916001600160401b03831161015057606083820183830103126101505760405192610dc884613230565b610dd3818301613999565b8452602081830101516001600160401b03811161015057610dfb9084840190838501016139ad565b602085015260408183010151906001600160401b03821161015057610e249383019201016139ad565b604082015291846104ea565b6040513d6000823e3d90fd5b6101d75760a43515610e62575b610e5d60843560c43560e43560a435613d7e565b61042a565b3460843514610e495760405162461bcd60e51b815260206004820152600f60248201526e57524f4e475f4d53475f56414c554560881b6044820152606490fd5b60405162461bcd60e51b815260206004820152600c60248201526b5041594d454e545f5a45524f60a01b6044820152606490fd5b60405162461bcd60e51b81526020600482015260116024820152705354414b455f414d4f554e545f5a45524f60781b6044820152606490fd5b60405162461bcd60e51b815260206004820152600e60248201526d1554d15497d393d517d1561254d560921b6044820152606490fd5b90506020813d602011610f77575b81610f60602093836132af565b8101031261015057610f7190613734565b836103a7565b3d9150610f53565b506101d7578060a4351561034b565b506000905060a435600214610342565b34610150576000366003190112610150576020600c54604051908152f35b3461015057602080600319360112610150576001600160401b039060043582811161015057610fef90369060040161363d565b600a5490916001600160a01b039161100a9083163314613b07565b60ff6004541660088110156101d757806000526019825260ff60406000205416806112bc575b156112885760248284601454166040519283809263122643f360e21b82523360048301525afa908115610e3057600091611253575b50156112185761107c600193339085541614613b07565b6000526019815260406000209260ff1993848154169055600360005260406000208385825416179055600384600454161760045580519485116109db576110c4601054612f90565b601f81116111c3575b5081601f8611600114611151575060039492600092849283611146575b50501b9160001990851b1c1916176010555b600454161760045561111060075442613c81565b6006557f61de5b63673167e253173c50abdc3fd45371dc3205496f46fdb05a9f7927b574604051806111418161379b565b0390a1005b0151925086806110ea565b909491601f19831695601060005260008051602061539a833981519152926000905b8882106111ac5750508360039710611194575b505050811b016010556110fc565b015160001983871b60f8161c19169055848080611186565b808785968294968601518155019501930190611173565b601060005260008051602061539a833981519152601f870160051c81019184881061120e575b601f0160051c019084905b8281106112025750506110cd565b600081550184906111f4565b90915081906111e9565b60405162461bcd60e51b8152600481018390526013602482015272155cd95c88191bd95cc81b9bdd08195e1a5cdd606a1b6044820152606490fd5b90508281813d8311611281575b61126a81836132af565b810103126101505761127b90613734565b86611065565b503d611260565b60405162461bcd60e51b815260048101839052600c60248201526b57524f4e475f53544154555360a01b6044820152606490fd5b506002811480611030575060038114611030565b3461015057606036600319011261015057600435151560043503610150576009546001600160a01b0316611305338214613b07565b60ff6004541660088110156101d757600303611d205760155460405163335ded4b60e21b81526001600160a01b0390911690602081600481855afa908115610e3057600091611ce1575b506040516328c44a9960e21b8152604435600482015290600090829060249082906001600160a01b03165afa908115610e3057600091611bbe575b5060e08101516113a4906001600160a01b03168414613b54565b60c0810151600a546001600160a01b03918216911603611b8557602081810151604051633ec4f23d60e01b81529182600481875afa918215610e3057600092611b51575b5003611b1b5761012001519081518201916060818403126101505761140f60208201613734565b9261141c60408301613999565b916060810151916001600160401b038311610150576114429260208092019201016139ad565b90306001600160a01b0390911603611ae75760405161147f81611471602082019460208652604083019061345b565b03601f1981018352826132af565b519020604051602080820152600f5481600061149a83612f90565b92836040840152600181169081600014611ac85750600114611a7b575b6114ca925003601f1981018352826132af565b6020815191012003611a47576020600491604051928380926318da001160e01b82525afa908115610e3057600091611a0d575b50600c54604051634047e10360e11b81529092906020816004816001600160a01b0387165afa908115610e30576000916119d9575b5061271061154361154b9286613b96565b048094613bbf565b93600654421180156119d0575b15611872575061156f901515600435151514613b54565b600854600954600c546115ad92611592926001600160a01b03169060ff16613c8e565b600854600a549195916001600160a01b03169060ff16613bf8565b9160ff600854166003811015806101d757600182148015918183611864575b81908015611857575b6115df915061395f565b601554604051632ee4b68b60e11b815290602090829060049082906001600160a01b03165afa908115610e305760009161181d575b506117d0576101d757826116e4575061164b9360009384935083925082916001600160a01b03165af161164561404c565b5061407c565b600b55600c55600435156116dd5760045b60ff6004541660088110156101d757600052601960205260406000209060ff199182815416905560088110156101d7576116af9160ff821660005260196020526001604060002091825416179055613782565b7f61de5b63673167e253173c50abdc3fd45371dc3205496f46fdb05a9f7927b574604051806111418161379b565b600561165c565b600090916117c3575b81156117b0575b5092602092916117066117549561395f565b6001600160a01b039061171890615123565b60405163a9059cbb60e01b81526001600160a01b0390931660048401526024830193909352909384929190911690829060009082906044820190565b03925af18015610e3057600090611775575b61177091506150e5565b61164b565b506020813d6020116117a8575b8161178f602093836132af565b81010312610150576117a361177091613734565b611766565b3d9150611782565b90509190916101d75790600060206116f4565b50506002811460006116ed565b9150919293506101d757600282036117f35750506117ed906143b8565b5061164b565b1561180257506117ed90614e6a565b1561180d575061164b565b6118169061484f565b50826117ed565b90506020813d60201161184f575b81611838602093836132af565b810103126101505761184990613734565b89611614565b3d915061182b565b506101d7578084156115d5565b5060009050600284146115cc565b93509150506004351561188157005b611892901515600435151514613b54565b600b546024359081116119955760125491670de0b6b3a76400009283811015611958576005936118c56118d39285613b96565b04809260ff600854166140b6565b600c55600854600a546118f49184916001600160a01b03169060ff166140b6565b600b5560ff199183836004541617600455600d55600e55816000526019602052604060002060018282541617905560045416176004557fb0ec4ef3ee1a79effa677af7a82a3a875b4d438307fb7e589a58966e3b913f2f604051806111418161379b565b60405162461bcd60e51b81526020600482015260156024820152740a0aa9c92a6909a8a9ca8bea482a8929ebe90928e9605b1b6044820152606490fd5b60405162461bcd60e51b81526020600482015260136024820152720a0aa9c92a6909a8a9ca8bea89e9ebe90928e9606b1b6044820152606490fd5b50600435611558565b90506020813d602011611a05575b816119f4602093836132af565b810103126101505751612710611532565b3d91506119e7565b90506020813d602011611a3f575b81611a28602093836132af565b8101031261015057611a3990613999565b836114fd565b3d9150611a1b565b60405162461bcd60e51b815260206004820152600c60248201526b1253959053125117d413d4d560a21b6044820152606490fd5b5090600f6000526000805160206153ba833981519152906000915b818310611aae5750509060606114ca928201016114b7565b805460608487010152849350602090920191600101611a96565b606092506114ca94915060ff191682840152151560051b8201016114b7565b60405162461bcd60e51b815260206004820152600c60248201526b1253959053125117d191515160a21b6044820152606490fd5b60405162461bcd60e51b815260206004820152600e60248201526d494e56414c49445f534348454d4160901b6044820152606490fd5b9091506020813d602011611b7d575b81611b6d602093836132af565b81010312610150575190856113e8565b3d9150611b60565b60405162461bcd60e51b81526020600482015260116024820152701253959053125117d49150d25412515395607a1b6044820152606490fd5b90503d806000833e611bd081836132af565b6020828281010312610150578151906001600160401b0382116101505761014082840182850103126101505760405192836101408101106001600160401b03610140860111176109db57610140840160409081528184018051865260208082015190870152611c3f9101613b40565b6040850152611c52606084830101613b40565b6060850152611c65608084830101613b40565b608085015260a0838201015160a0850152611c8460c084830101613999565b60c0850152611c9760e084830101613999565b60e0850152610100611cac8185840101613734565b9085015261012092838183010151906001600160401b03821161015057611cd79383019201016139ad565b908201528361138a565b90506020813d602011611d18575b81611cfc602093836132af565b81010312610150576000611d11602492613999565b915061134f565b3d9150611cef565b60405162461bcd60e51b815260206004820152600d60248201526c1393d517d4d550935255151151609a1b6044820152606490fd5b34610150576000366003190112610150576000546040516001600160a01b039091168152602090f35b3461015057600036600319011261015057611d976138eb565b506108f6604051611da781613266565b611daf6132d0565b8152611db961333c565b602082015260405191829182613684565b3461015057602080600319360112610150576001600160401b039060043582811161015057611dfd90369060040161363d565b9060ff600454166008811015806101d757816000526019835260ff6040600020541680611fed575b611e2e906136b9565b611e4460018060a01b03600a5416331415613741565b6101d757600403611fb95781519283116109db57611e63601154612f90565b601f8111611f67575b508092601f8111600114611ef85780919293600091611eed575b508160011b916000199060031b1c1916176011555b600660ff1960045416176004557f76c6a8f0836a14a631dc3a45fc0c49d4dd3fc4147167329ba4220ba2664ccaf060405180611ed68161379b565b0390a16108f660405192828493845283019061345b565b905083015184611e86565b601f19811693601160005260008051602061537a8339815191529060005b868110611f50575082600194959610611f37575b5050811b01601155611e9b565b85015160001960f88460031b161c191690558480611f2a565b909184600181928589015181550193019101611f16565b601160005260008051602061537a833981519152601f850160051c810191838610611faf575b601f0160051c01905b818110611fa35750611e6c565b60008155600101611f96565b9091508190611f8d565b6064906040519062461bcd60e51b82526004820152600d60248201526c1393d517d19253905312569151609a1b6044820152fd5b5050600060038214801561201b575b8190801561200c575b9050611e25565b506101d7578060048314612005565b506000905060068214611ffc565b34610150576000366003190112610150576040516000600f5461204b81612f90565b808452906001908181169081156120d25750600114612089575b6108f684612075818603826132af565b60405191829160208352602083019061345b565b600f600090815292506000805160206153ba8339815191525b8284106120ba57505050810160200161207582612065565b805460208587018101919091529093019281016120a2565b60ff191660208087019190915292151560051b850190920192506120759150839050612065565b3461015057600036600319011261015057600854600a546020916101bb916001600160a01b03169060ff16613ad9565b34610150576000366003190112610150576020612144613a0f565b6040516001600160a01b039091168152f35b34610150576000366003190112610150576121907f00000000000000000000000000000000000000000000000000000000000000006151b1565b6121b97f00000000000000000000000000000000000000000000000000000000000000006151b1565b9061224c60226121e87f00000000000000000000000000000000000000000000000000000000000000006151b1565b93604051948591855161220381602098898088019101613438565b830190601760f91b918288820152612224825180938a602185019101613438565b0190602182015261223d82518093888785019101613438565b010360028101855201836132af565b6108f660405192828493845283019061345b565b346101505760206101bb612273366135f3565b90613ad9565b3461015057600036600319011261015057602060ff6004541661229f60405180926134bf565bf35b34610150576000366003190112610150576008546009546020916101bb916001600160a01b03169060ff16613ad9565b3461015057600036600319011261015057600a546001600160a01b03906122fb9082163314613b07565b60ff6004541660088110156101d75760005260206019815261232460ff604060002054166136b9565b61232c6139ef565b6123346139ef565b916040519161234283613230565b600083528183019081526040830193845261244f85604051946123648661324b565b60078652600085870152600060408701526000606087015260006080870152600060a08701526040516123968161324b565b60008152600086820152600060408201526000606082015260006080820152600060a0820152604051906123c982613230565b6040516123d581613294565b6000815282526040516123e781613294565b60008152878301526040516123fb81613294565b6000815260408301526040519761241189613230565b88528688015260408701528460405161242981613266565b82815201958652511660018060a01b03166001600160601b0360a01b6001541617600155565b51908151936001600160401b03948581116109db5780612470600254612f90565b94601f95868111612ab4575b508490868311600114612a4057600092612a35575b50508160011b916000199060031b1c1916176002555b519283518581116109db57806003956124c08754612f90565b8681116129db575b50849086831160011461296b57600092612960575b50508160011b9160001990871b1c19161784555b5194855195865160088110156101d75761250a90613782565b8287015161251781613326565b61252081613326565b61ff006004549160081b169061ff0019161760045560a06040880151976005988955606081015160065560808101516007550151858110156101d75760409260a09160ff8019600854169116176008556125be858401519161259c8184511660018060a01b03166001600160601b0360a01b6009541617600955565b868301511660018060a01b03166001600160601b0360a01b600a541617600a55565b83810151600b556060810151600c556080810151600d550151600e55015180518051908682116109db5781906125f5600f54612f90565b868111612907575b50849086831160011461289457600092612889575b50508160011b9160001990871b1c191617600f555b818101518051908682116109db57612640601054612f90565b85811161283c575b5083908583116001146127c6576040939291600091836127bb575b50508160011b9160001990881b1c1916176010555b01519485519485116109db5761268f601154612f90565b90838211612772575b5050809184116001146126fd575082936000936126f2575b50508260011b92600019911b1c1916176011555b7f88c430102eab5dbc235ca367ecd5ffa63164bb311015524ecebed009d4d4b5b6604051806111418161379b565b0151915083806126b0565b9190601f19841694601160005260008051602061537a833981519152936000905b87821061275a5750508460019610612740575b50505050811b016011556126c4565b01519060f884600019921b161c1916905582808080612731565b8060018597829496860151815501960193019061271e565b601160005260008051602061537a8339815191529084808801821c8301938589106127b2575b01901c01905b81811015612698576000815560010161279e565b93508293612798565b015190508980612663565b90601f19831691601060005260008051602061539a8339815191529260005b8782821061282657505091600193918560409796941061280e575b505050811b01601055612678565b0151600019838a1b60f8161c19169055898080612800565b60018596829396860151815501950193016127e5565b601060005260008051602061539a833981519152868085018b1c820192878610612880575b018a1c01905b8181106128745750612648565b60008155600101612867565b92508192612861565b015190508880612612565b600f60009081526000805160206153ba8339815191529350601f198516905b878282106128f15750509084600195949392106128d9575b505050811b01600f55612627565b015160001983891b60f8161c191690558880806128cb565b60018596829396860151815501950193016128b3565b909150600f6000526000805160206153ba833981519152868085018b1c820192878610612957575b908594939291018b1c01905b81811061294857506125fd565b6000815584935060010161293b565b9250819261292f565b0151905088806124dd565b600088815260008051602061535a8339815191529350601f198516905b878282106129c55750509084600195949392106129ad575b505050811b0184556124f1565b015160001983891b60f8161c191690558880806129a0565b6001859682939686015181550195019301612988565b9091508660005260008051602061535a8339815191528680850160051c820192878610612a2c575b9085949392910160051c01905b818110612a1d57506124c8565b60008155849350600101612a10565b92508192612a03565b015190508880612491565b6002600090815260008051602061533a8339815191529350601f198516905b87828210612a9e575050908460019594939210612a85575b505050811b016002556124a7565b015160001960f88460031b161c19169055888080612a77565b6001859682939686015181550195019301612a5f565b909150600260005260008051602061533a8339815191528680850160051c820192878610612b06575b9085949392910160051c01905b818110612af7575061247c565b60008155849350600101612aea565b92508192612add565b612b18366135c0565b60ff6008939293541660038110156101d75760038310156101d757612b3e90831461395f565b6009546001600160a01b039290831633148015612bd2575b15612b9b57602093612b7b9284600a54163314600014612b95575034915b3390613d7e565b906009541633146000146101ce5780600c55604051908152f35b91612b74565b60405162461bcd60e51b815260206004820152600f60248201526e2ba927a723afa6a9a3a9a2a72222a960891b6044820152606490fd5b5082600a54163314612b56565b34610150576000366003190112610150576020601354604051908152f35b346101505760003660031901126101505760206101bb60ff60085416612c3d60018060a01b0391612c3283600a541682613ad9565b926009541690613ad9565b90613c81565b6080366003190112610150576004356003811015610150576024908135906001600160a01b03604435818116810361015057606435928284169485850361015057600160005260209560198752612ca160ff604060002054166136b9565b60ff600854166003811015612f0657612cbb90841461395f565b82612eff5734945b888882600a541692612ce2612cd88589613ad9565b600b5411156136f6565b601454166040519283809263122643f360e21b82528760048301525afa908115610e3057600091612eca575b5015612e94579081612d2c92331491821592612e89575b5050613741565b600c54908115612e015710612dc8576002955091612d4f9184612d6f9594613d7e565b600c5560018060a01b03166001600160601b0360a01b6009541617600955565b601960ff1991838360045416176004558360005252604060002060018282541617905560045416176004557f909d9218f6e1f243c7d9044544c7b03e2e7db27d81653992e9018b8b72f4c20d604051806111418161379b565b60405162461bcd60e51b815260048101869052601281880152711393d517d15393d551d217d410565351539560721b6044820152606490fd5b90503415612e555715612e22576002955091612d4f9184612d6f9594613d7e565b60405162461bcd60e51b815260048101869052600c818801526b16915493d7d410565351539560a21b6044820152606490fd5b60405162461bcd60e51b815260048101879052600d818901526c5a45524f5f4d534756414c554560981b6044820152606490fd5b141590508980612d25565b60405162461bcd60e51b815260048101899052600f818b01526e1554d1549517d393d517d1561254d5608a1b6044820152606490fd5b90508881813d8311612ef8575b612ee181836132af565b8101031261015057612ef290613734565b8a612d0e565b503d612ed7565b8194612cc3565b88634e487b7160e01b60005260216004526000fd5b3461015057600036600319011261015057612f56612f376132d0565b6108f6612f4261333c565b604051938493604085526040850190613480565b9083820360208501526134cc565b34610150576000366003190112610150578061229f60209260ff600854165b9060038210156101d75752565b90600182811c92168015612fc0575b6020831014612faa57565b634e487b7160e01b600052602260045260246000fd5b91607f1691612f9f565b60025460009291612fda82612f90565b8082529160019081811690811561303f5750600114612ff857505050565b91929350600260005260008051602061533a833981519152916000925b84841061302757505060209250010190565b80546020858501810191909152909301928101613015565b915050602093945060ff929192191683830152151560051b010190565b6003546000929161306c82612f90565b8082529160019081811690811561303f575060011461308a57505050565b91929350600360005260008051602061535a833981519152916000925b8484106130b957505060209250010190565b805460208585018101919091529093019281016130a7565b600f54600092916130e182612f90565b8082529160019081811690811561303f57506001146130ff57505050565b91929350600f6000526000805160206153ba833981519152916000925b84841061312e57505060209250010190565b8054602085850181019190915290930192810161311c565b6010546000929161315682612f90565b8082529160019081811690811561303f575060011461317457505050565b91929350601060005260008051602061539a833981519152916000925b8484106131a357505060209250010190565b80546020858501810191909152909301928101613191565b601154600092916131cb82612f90565b8082529160019081811690811561303f57506001146131e957505050565b91929350601160005260008051602061537a833981519152916000925b84841061321857505060209250010190565b80546020858501810191909152909301928101613206565b606081019081106001600160401b038211176109db57604052565b60c081019081106001600160401b038211176109db57604052565b604081019081106001600160401b038211176109db57604052565b6001600160401b0381116109db57604052565b602081019081106001600160401b038211176109db57604052565b90601f801991011681019081106001600160401b038211176109db57604052565b604051906132dd82613230565b6001546001600160a01b031682526040518290613304816132fd81612fca565b03826132af565b602082015260408051916133228361331b8161305c565b03846132af565b0152565b600511156101d757565b60038210156101d75752565b604090815161334a81613230565b809280516133578161324b565b60045460ff81169060088210156101d75760ff91835260081c1661337a81613326565b602082015260055482820152600654606082015260075460808201526133a860ff6008541660a08301613330565b825280516133b58161324b565b60018060a01b0380600954168252600a54166020820152600b5482820152600c546060820152600d546080820152600e5460a082015260208301528051916133fc83613230565b815161340b816132fd816130d1565b8352815161341c816132fd81613146565b60208401528151613430816132fd816131bb565b828401520152565b60005b83811061344b5750506000910152565b818101518382015260200161343b565b9060209161347481518092818552858086019101613438565b601f01601f1916010190565b6134bc9160018060a01b03825116815260406134ab602084015160606020850152606084019061345b565b92015190604081840391015261345b565b90565b9060088210156101d75752565b9060406134bc9261352060a082516134e58682516134bf565b60208101516134f381613326565b602087015284810151858701526060810151606087015260808101516080870152015160a0850190612f83565b60a06020820151600180831b038082511660c087015260208201511660e08601528381015161010086015260608101516101208601526080810151610140860152015161016084015201519061358c6101a080610180840152606084519184015261020083019061345b565b906101e060406135b060208601519461019f199586868303016101c087015261345b565b940151928285030191015261345b565b606090600319011261015057600435600381101561015057906024356001600160a01b0381168103610150579060443590565b604090600319011261015057600435600381101561015057906024356001600160a01b03811681036101505790565b6001600160401b0381116109db57601f01601f191660200190565b81601f820112156101505780359061365482613622565b9261366260405194856132af565b8284526020838301011161015057816000926020809301838601378301015290565b906134bc916020815260206136a483516040838501526060840190613480565b920151906040601f19828503019101526134cc565b156136c057565b60405162461bcd60e51b815260206004820152600e60248201526d494e56414c49445f53544154555360901b6044820152606490fd5b156136fd57565b60405162461bcd60e51b815260206004820152600f60248201526e14d51052d157d25390d3d4949150d5608a1b6044820152606490fd5b5190811515820361015057565b1561374857565b60405162461bcd60e51b81526020600482015260126024820152712ca7aaafa0a922afaa2422afa9a2a62622a960711b6044820152606490fd5b60088110156101d75760ff801960045416911617600455565b6134bc90602081526040602082015260018060a01b0380600154166060830152606060808301526137e26137d160c08401612fca565b838103605f190160a085015261305c565b916040601f198285030191015260ff600454613800848383166134bf565b60081c1661380d81613326565b602083015260055460408301526006546060830152600754608083015261383d60ff6008541660a0840190612f83565b806009541660c0830152600a541660e0820152600b54610100820152600c54610120820152600d54610140820152600e5461016082015260606101a08061018084015282015261389061020082016130d1565b906101e06138ac61019f199384848203016101c0850152613146565b92828403019101526131bb565b604051906138c68261324b565b8160a06000918281528260208201528260408201528260608201528260808201520152565b6040908151916138fa83613266565b602083825161390881613230565b60008152606083820152606084820152815282519261392684613230565b61392e6138b9565b84526139386138b9565b8385015280519061394882613230565b606082526060848301526060818301528401520152565b1561396657565b60405162461bcd60e51b815260206004820152600b60248201526a2ba927a723afaa27a5a2a760a91b6044820152606490fd5b51906001600160a01b038216820361015057565b81601f820112156101505780516139c381613622565b926139d160405194856132af565b81845260208284010111610150576134bc9160208085019101613438565b604051906139fc82613266565b60048252630307830360e41b6020830152565b60ff6008541660038110156101d75760018103613a95575060155460405163f77800e560e01b815290602090829060049082906001600160a01b03165afa908115610e3057600091613a5f575090565b906020823d8211613a8d575b81613a78602093836132af565b81010312613a8a57506134bc90613999565b80fd5b3d9150613a6b565b600203613ad457601554604051635f117aa360e11b815290602090829060049082906001600160a01b03165afa908115610e3057600091613a5f575090565b600090565b60038110156101d757600052601a60205260406000209060018060a01b031660005260205260406000205490565b15613b0e57565b60405162461bcd60e51b815260206004820152600a6024820152692727aa2fa9a2a62622a960b11b6044820152606490fd5b51906001600160401b038216820361015057565b15613b5b57565b60405162461bcd60e51b815260206004820152601360248201527224a72b20a624a22fa0aa2a22a9aa20aa24a7a760691b6044820152606490fd5b81810292918115918404141715613ba957565b634e487b7160e01b600052601160045260246000fd5b91908203918211613ba957565b90949392606092613be1836080810198612f83565b6001600160a01b0316602083015260408201520152565b919060038310156101d757604092613c7b7ffe2caf3897ec3e02a1d458d232d7c62c17809d25dbfe65864ce842162d6c217c93600090838252601a60205286822060018060a01b03861690818452602052613c568289852054613c81565b978389949287869452601a602052828220908252602052205560405194859485613bcc565b0390a190565b91908201809211613ba957565b60038110156101d7576000818152601a60205260409384822060018060a01b0385169081845260205285832054828110613d195791867f9060f8ffc7acd8270abf2337023e6377669ca44d5b2a23f3513a29380940f35796959492613cf683613c7b96613bbf565b98848a959288879452601a60205282822090825260205220555194859485613bcc565b865162461bcd60e51b8152602060048201526014602482015273125394d551919250d251539517d1115413d4d25560621b6044820152606490fd5b6001600160a01b0390911681526020810191909152606081019291613d7c9160400190612f83565b565b9290600460ff8154166008811015613fd657806002613da69214159081614040575b506136b9565b821561400b576003851015613ff65784158015613dfe575b50507f68ffd6ad89c76c56b0b5206ae0c1a14cbffb37023d4e80f635ff7397c56b116b9250613c7b613df1838387613bf8565b9460405193849384613d54565b6001861460008115613feb575b8115613fc6575b50613e1d915061395f565b613e2685615123565b936001600160a01b039081613e3a88615123565b60408051636eb1769f60e11b81526001600160a01b038516878201908152306020808301919091529a9491938b9385939284900301918391165afa8015610e30578791600091613f96575b5010613f595782916000889460649360405197889687956323b872dd60e01b87521690850152306024850152896044850152165af1908115610e3057600091613efd575b507f68ffd6ad89c76c56b0b5206ae0c1a14cbffb37023d4e80f635ff7397c56b116b9350613ef6906150e5565b3880613dbe565b91929382813d8311613f52575b613f1481836132af565b81010312613a8a575090613ef6613f4c7f68ffd6ad89c76c56b0b5206ae0c1a14cbffb37023d4e80f635ff7397c56b116b9493613734565b90613ec9565b503d613f0a565b60405162461bcd60e51b81528085018890526016602482015275494e53554646494349454e545f414c4c4f57414e434560501b6044820152606490fd5b91508882813d8311613fbf575b613fad81836132af565b81010312613a8a575086905138613e85565b503d613fa3565b9050613fd657613e1d9038613e12565b602182634e487b7160e01b6000525260246000fd5b600288149150613e0b565b602190634e487b7160e01b6000525260246000fd5b60649060206040519162461bcd60e51b8352820152600e60248201526d14d51052d157d49154555254915160921b6044820152fd5b60039150141538613da0565b3d15614077573d9061405d82613622565b9161406b60405193846132af565b82523d6000602084013e565b606090565b1561408357565b60405162461bcd60e51b815260206004820152600b60248201526a10d0531317d1905253115160aa1b6044820152606490fd5b91906140c3828285613c8e565b60155460408051632ee4b68b60e11b815292959092916020916001600160a01b039160049190831684868481845afa95861561435857600096614363575b508483918851928380926318da001160e01b82525afa90811561435857908491600091614321575b5016946142c5576003811015613fd6578061418b575050505083929161416b600080808060008051602061531a83398151915299613c7b975af161164561404c565b516001600160a01b03909216825260208201929092529081906040820190565b90839488926000959495600182149081156142ba575b8115614289575b50956141c16000926141bc6141f29961395f565b615123565b169288519687958694859363a9059cbb60e01b8552840160209093929193604081019460018060a01b031681520152565b03925af191821561427e5760009261422a575b505060008051602061531a833981519152939291614225613c7b926150e5565b61416b565b81819392933d8311614277575b61424181836132af565b81010312613a8a575060008051602061531a83398151915293929161422561426b613c7b93613734565b92508193949550614205565b503d614237565b83513d6000823e3d90fd5b92955050919492506142a55790928492889260006141c16141a8565b602184634e487b7160e01b6000525260246000fd5b6002831491506141a1565b93509150506003821015613ff6575060008051602061531a833981519152939291613c7b916002810361430257506142fc846143b8565b5061416b565b6001810361431457506142fc84614e6a565b614225576142fc8461484f565b91508582813d8311614351575b61433881836132af565b81010312613a8a575061434b8491613999565b38614129565b503d61432e565b87513d6000823e3d90fd5b90958582813d8311614396575b61437a81836132af565b81010312613a8a57508461438e8492613734565b969150614101565b503d614370565b90816020910312610150575162ffffff811681036101505790565b60155460408051635f117aa360e11b8082529094936001600160a01b03936020939260049185908990849082908a165afa9788156148445760009861480d575b50601654845163095ea7b360e01b8082529188166001600160a01b031684820190815260208101869052919990918791839182908b9082906040010392165a90600091f1801561465e576147d9575b50856015541692845191825285828481875afa91821561465e576000926147a2575b5084516325abd85f60e11b808252929087818681895afa9081156143585760009161476d575b508651918883602481633488e95960e21b9a8b825260008b8301525afa92831561471557906144c994939291600093614755575b50614c59565b90866015541690855190815286818581855afa9081156146a257600091614720575b5085519063f77800e560e01b9586835288838781875afa928315614715579089916000946146dc575b506024895180968193825260018a8301525afa9283156143585790614543949392916000936146ad5750614c59565b94806015541697845193808552868585818d5afa9485156146a257908791600096614669575b50848751809c819382525afa98891561465e57600099614617575b5084519081526001600160a01b03989098169188019182526020820186905295969584928792839003604001918391600091165af190811561460d57506145d7575b506145d19150614e6a565b50600190565b82813d8311614606575b6145eb81836132af565b81010312610150576145ff6145d192613734565b50386145c6565b503d6145e1565b513d6000823e3d90fd5b90988682813d8311614657575b61462e81836132af565b81010312613a8a5750916000869492614649899a9b95613999565b9a9950929450929092614584565b503d614624565b85513d6000823e3d90fd5b9182819792973d831161469b575b61468181836132af565b81010312613a8a57506146948791613999565b9438614569565b503d614677565b86513d6000823e3d90fd5b6146ce919350893d8b116146d5575b6146c681836132af565b81019061439d565b91386144c3565b503d6146bc565b9182819592953d831161470e575b6146f481836132af565b81010312613a8a57506147078991613999565b9238614514565b503d6146ea565b88513d6000823e3d90fd5b908782813d831161474e575b61473681836132af565b81010312613a8a575061474890613999565b386144eb565b503d61472c565b6146ce9193508a3d8c116146d5576146c681836132af565b908882813d831161479b575b61478381836132af565b81010312613a8a575061479590613999565b3861448f565b503d614779565b90918682813d83116147d2575b6147b981836132af565b81010312613a8a57506147cb90613999565b9038614469565b503d6147af565b8581813d8311614806575b6147ee81836132af565b81010312610150576147ff90613734565b5038614447565b503d6147e4565b90978582813d831161483d575b61482481836132af565b81010312613a8a575061483690613999565b96386143f8565b503d61481a565b84513d6000823e3d90fd5b906015549160006040918251926325abd85f60e11b958685526020926004958481888160018060a01b038097165afa908115614c04579083918791614c21575b5016803b15614bf95785829188865180948193630d0e30db60e41b83525af18015614c04579087939291614c0e575b508482601554168551988980928d82525afa968715614c04578697614bc9575b50601654845163095ea7b360e01b8082529184166001600160a01b031685820190815260208101849052919890918791839182908b90889083906040010393165af18015614ac557614b95575b5081601554168451998a52858a8581845afa998a15614ac557879a614b5e575b50845163f77800e560e01b8082529a87828781865afa918215614b155788908a93614b1f575b508751633488e95960e21b815260018882015293849060249082905afa928315614b1557916149ab9391879695938b936147555750614c59565b96816015541699868b8751968780928582525afa948515614b0b579087918996614acf575b50848751809d819382525afa998a15614ac557879a614a7b575b5084519081526001600160a01b03999099169189019182526020820187905296979596849287928390036040019183918891165af1908115614a725750614a38575b5050506145d190614e6a565b82813d8311614a6b575b614a4c81836132af565b81010312613a8a575090614a626145d192613734565b50903880614a2c565b503d614a42565b513d84823e3d90fd5b9099508581813d8311614abe575b614a9381836132af565b81010312614aba579186869492614aac8a9b9c95613999565b9b9a509294509290926149ea565b8680fd5b503d614a89565b85513d89823e3d90fd5b8281939297503d8311614b04575b614ae781836132af565b81010312614b0057614af98791613999565b94386149d0565b8780fd5b503d614add565b86513d8a823e3d90fd5b87513d8b823e3d90fd5b80929350813d8311614b57575b614b3681836132af565b81010312614b53579087614b4c60249493613999565b9293614971565b8880fd5b503d614b2c565b9099508581813d8311614b8e575b614b7681836132af565b81010312614aba57614b8790613999565b983861494b565b503d614b6c565b8581813d8311614bc2575b614baa81836132af565b81010312614aba57614bbb90613734565b503861492b565b503d614ba0565b9096508481813d8311614bfd575b614be181836132af565b81010312614bf957614bf290613999565b95386148de565b8580fd5b503d614bd7565b84513d88823e3d90fd5b614c1a90969196613281565b94386148be565b809250868092503d8311614c52575b614c3a81836132af565b81010312614bf957614c4c8391613999565b3861488f565b503d614c30565b601654604051636eb1769f60e11b81523060048201526001600160a01b039182166024820181905293959493929091169190602081604481865afa8015610e30578591600091614e35575b5010614dc9575b50603c420193844211613ba9576016546040516101008101916001600160a01b0316906001600160401b038311818410176109db5760409283529384526001600160a01b03928316602085810191825262ffffff9687168685019081523060608801908152608088019a8b5260a08801998a52600060c0890181815260e08a01828152975163414bf38960e01b81529951891660048b01529451881660248a01529151909816604488015296518516606487015297516084860152955160a4850152945160c4840152511660e482015292918391610104918391905af1908115610e3057600091614d9a575090565b906020823d602011614dc1575b81614db4602093836132af565b81010312613a8a57505190565b3d9150614da7565b60405163095ea7b360e01b8152600481019190915260001960248201526020816044816000865af18015610e305715614cab576020813d602011614e2d575b81614e15602093836132af565b8101031261015057614e2690613734565b5038614cab565b3d9150614e08565b91506020823d602011614e62575b81614e50602093836132af565b81010312613a8a575084905138614ca4565b3d9150614e43565b60155460405163f77800e560e01b81526001600160a01b03916020908290600490829086165afa908115610e3057600091614ee9575b501690813b1561015057600091602483926040519485938492630852cd8d60e31b845260048401525af18015610e3057614eda5750600190565b614ee390613281565b386145d1565b906020823d8211614f1a575b81614f02602093836132af565b81010312613a8a5750614f1490613999565b38614ea0565b3d9150614ef5565b92909160ff6004541660088110156101d757806002614f49921415908161404057506136b9565b60038410156101d75783614fb2576000808084819482908215614fa8575b6001600160a01b031690f115610e30577f4a647b1d902051b0ae802f6050c58456d79d826bdf2bbf37a1bf13be97727b2d915b613c7b613df1838387613c8e565b6108fc9150614f67565b9091908260018514600081156150da575b81156150c8575b509061502192614fdb60209361395f565b6001600160a01b03614fec88615123565b1690600060405180968195829463a9059cbb60e01b84526004840160209093929193604081019460018060a01b031681520152565b03925af1908115610e3057600091615066575b50906150617f4a647b1d902051b0ae802f6050c58456d79d826bdf2bbf37a1bf13be97727b2d93926150e5565b614f9a565b906020823d82116150c0575b8161507f602093836132af565b81010312613a8a5750906150616150b77f4a647b1d902051b0ae802f6050c58456d79d826bdf2bbf37a1bf13be97727b2d9493613734565b91929350615034565b3d9150615072565b9150506101d757826000615021614fca565b600287149150614fc3565b156150ec57565b60405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b6044820152606490fd5b60038110156101d757600281146151785760011461514057600090565b60155460405163f77800e560e01b815290602090829060049082906001600160a01b03165afa908115610e3057600091613a5f575090565b50601554604051635f117aa360e11b815290602090829060049082906001600160a01b03165afa908115610e3057600091613a5f575090565b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008082101561530b575b506d04ee2d6d415b85acef8100000000808310156152fc575b50662386f26fc10000808310156152ed575b506305f5e100808310156152de575b50612710808310156152cf575b5060648210156152bf575b600a809210156152b5575b6001908160218186019561524a87613622565b9661525860405198896132af565b808852615267601f1991613622565b01366020890137860101905b61527f575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a8353049182156152b057919082615273565b615278565b9160010191615237565b919060646002910491019161522c565b60049193920491019138615221565b60089193920491019138615214565b60109193920491019138615205565b602091939204910191386151f3565b6040935081049150386151da56fe659f33fc6677bebf3a9bf3101092792e31f35766d0358e54577bdd91a655f6a0405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acec2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c681b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6728d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802a2646970667358221220e4729c8350ed9965e7cfef223f52992187adb08588ff8b889d947c6a8027a67a64736f6c63430008130033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x1D JUMPI JUMPDEST POP CALLDATASIZE ISZERO PUSH2 0x1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x10A38F5 EQ PUSH2 0x2F64 JUMPI POP DUP1 PUSH4 0x5C1F502 EQ PUSH2 0x2F1B JUMPI DUP1 PUSH4 0x7388DBA EQ PUSH2 0x2C43 JUMPI DUP1 PUSH4 0x917E776 EQ PUSH2 0x2BFD JUMPI DUP1 PUSH4 0x17906C2E EQ PUSH2 0x2BDF JUMPI DUP1 PUSH4 0x1D0B4AF5 EQ PUSH2 0x2B0F JUMPI DUP1 PUSH4 0x3D876D5D EQ PUSH2 0x22D1 JUMPI DUP1 PUSH4 0x4C38D877 EQ PUSH2 0x22A1 JUMPI DUP1 PUSH4 0x4E69D560 EQ PUSH2 0x2279 JUMPI DUP1 PUSH4 0x52A6CB4A EQ PUSH2 0x2260 JUMPI DUP1 PUSH4 0x54FD4D50 EQ PUSH2 0x2156 JUMPI DUP1 PUSH4 0x5AD4E170 EQ PUSH2 0x2129 JUMPI DUP1 PUSH4 0x5C63ED69 EQ PUSH2 0x20F9 JUMPI DUP1 PUSH4 0x729E2EB1 EQ PUSH2 0x2029 JUMPI DUP1 PUSH4 0x7ABE914D EQ PUSH2 0x1DCA JUMPI DUP1 PUSH4 0x8C6838BA EQ PUSH2 0x1D7E JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1D55 JUMPI DUP1 PUSH4 0x8F287DC2 EQ PUSH2 0x12D0 JUMPI DUP1 PUSH4 0x8F903C79 EQ PUSH2 0xFBC JUMPI DUP1 PUSH4 0xD24E0C87 EQ PUSH2 0xF9E JUMPI DUP1 PUSH4 0xD2AF47AB EQ PUSH2 0x2A8 JUMPI DUP1 PUSH4 0xED70D5D5 EQ PUSH2 0x1ED JUMPI DUP1 PUSH4 0xF2D7DBB6 EQ PUSH2 0x155 JUMPI PUSH4 0xFAEB5E17 EQ PUSH2 0x132 JUMPI CODESIZE PUSH2 0xF JUMP JUMPDEST CALLVALUE PUSH2 0x150 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x150 JUMPI PUSH1 0x20 PUSH1 0xB SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x150 JUMPI PUSH2 0x163 CALLDATASIZE PUSH2 0x35F3 JUMP JUMPDEST SWAP1 PUSH1 0xFF PUSH1 0x8 SLOAD AND SWAP1 PUSH1 0x3 DUP3 LT ISZERO PUSH2 0x1D7 JUMPI PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x1D7 JUMPI PUSH1 0x20 SWAP3 PUSH2 0x18E PUSH2 0x1A0 SWAP4 DUP4 EQ PUSH2 0x395F JUMP JUMPDEST PUSH2 0x198 CALLER DUP4 PUSH2 0x3AD9 JUMP JUMPDEST SWAP2 CALLER SWAP1 PUSH2 0x4F22 JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 CALLER SWAP1 DUP3 AND SUB PUSH2 0x1C3 JUMPI POP DUP1 PUSH1 0xC SSTORE JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0xA SLOAD AND CALLER SUB PUSH2 0x1BB JUMPI JUMPDEST DUP1 PUSH1 0xB SSTORE PUSH2 0x1BB JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0x150 JUMPI PUSH2 0x1FB CALLDATASIZE PUSH2 0x35C0 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x8 SWAP4 SWAP3 SWAP4 SLOAD AND PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x1D7 JUMPI PUSH1 0x3 DUP4 LT ISZERO PUSH2 0x1D7 JUMPI PUSH2 0x221 SWAP1 DUP4 EQ PUSH2 0x395F JUMP JUMPDEST DUP2 PUSH1 0x0 MSTORE PUSH1 0x1A PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 CALLER PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE DUP1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD LT PUSH2 0x270 JUMPI PUSH1 0x20 SWAP3 PUSH2 0x250 SWAP3 CALLER SWAP1 PUSH2 0x4F22 JUMP JUMPDEST PUSH1 0x9 SLOAD CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SUB PUSH2 0x1CE JUMPI DUP1 PUSH1 0xC SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x4E4F545F454E4F5547485F5354414B45 PUSH1 0x80 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH2 0x120 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x150 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x150 JUMPI PUSH2 0x2D4 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x363D JUMP JUMPDEST PUSH1 0x5 PUSH1 0x24 CALLDATALOAD LT ISZERO PUSH2 0x150 JUMPI PUSH1 0x5 PUSH1 0x44 CALLDATALOAD LT ISZERO PUSH2 0x150 JUMPI PUSH1 0x3 PUSH1 0xA4 CALLDATALOAD LT ISZERO PUSH2 0x150 JUMPI PUSH1 0xC4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 SUB PUSH2 0x150 JUMPI PUSH1 0xE4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 SUB PUSH2 0x150 JUMPI PUSH2 0x104 CALLDATALOAD ISZERO ISZERO PUSH2 0x104 CALLDATALOAD SUB PUSH2 0x150 JUMPI PUSH2 0x332 PUSH2 0x38EB JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x1 PUSH1 0xA4 CALLDATALOAD EQ DUP1 ISZERO PUSH2 0xF8E JUMPI JUMPDEST DUP2 SWAP1 DUP1 ISZERO PUSH2 0xF7F JUMPI JUMPDEST PUSH2 0x355 SWAP2 POP PUSH2 0x395F JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x150 JUMPI PUSH1 0x14 SLOAD PUSH1 0x40 MLOAD PUSH4 0x122643F3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0xE4 CALLDATALOAD DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP1 SWAP2 PUSH1 0x20 SWAP2 DUP4 SWAP2 PUSH1 0x24 SWAP2 DUP4 SWAP2 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xE30 JUMPI PUSH1 0x0 SWAP2 PUSH2 0xF45 JUMPI JUMPDEST POP ISZERO PUSH2 0xF0F JUMPI PUSH1 0xFF PUSH1 0x4 SLOAD AND PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x1D7 JUMPI PUSH1 0x0 MSTORE PUSH1 0x19 PUSH1 0x20 MSTORE PUSH2 0x3D5 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x36B9 JUMP JUMPDEST PUSH1 0x84 CALLDATALOAD ISZERO PUSH2 0xED6 JUMPI PUSH1 0x64 CALLDATALOAD ISZERO PUSH2 0xEA2 JUMPI PUSH2 0x104 CALLDATALOAD ISZERO PUSH2 0xE3C JUMPI PUSH2 0x1D7 JUMPI PUSH1 0xA4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x1A PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0xE4 CALLDATALOAD AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH2 0x426 PUSH1 0x84 CALLDATALOAD PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD LT ISZERO PUSH2 0x36F6 JUMP JUMPDEST PUSH1 0x84 CALLDATALOAD JUMPDEST PUSH2 0x435 PUSH1 0x44 CALLDATALOAD PUSH2 0x3326 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x44 CALLDATALOAD AND PUSH1 0x0 MSTORE PUSH1 0x18 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD SWAP2 PUSH1 0xFF PUSH1 0x4 SLOAD AND SWAP2 PUSH1 0x8 DUP4 LT ISZERO PUSH2 0x1D7 JUMPI PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x19 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x1 DUP1 DUP7 MSTORE PUSH32 0xFC941C3961FB6541DA34150022CDDF959DA0FB2353866A6BFBD249C2DA092914 DUP1 SLOAD DUP4 AND DUP3 OR SWAP1 SSTORE PUSH1 0x4 DUP1 SLOAD SWAP1 SWAP3 AND OR DUP2 SSTORE PUSH1 0x14 SLOAD SWAP2 MLOAD PUSH4 0x3BCAA1D9 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0xE4 CALLDATALOAD DUP2 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP5 SWAP2 DUP6 SWAP2 PUSH1 0x24 SWAP2 DUP4 SWAP2 AND GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0xE30 JUMPI PUSH1 0x0 SWAP4 PUSH2 0xD7D JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP4 PUSH2 0x4F8 DUP6 PUSH2 0x324B JUMP JUMPDEST PUSH1 0x1 DUP6 MSTORE PUSH2 0x507 PUSH1 0x24 CALLDATALOAD PUSH2 0x3326 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH1 0x20 DUP7 ADD MSTORE TIMESTAMP PUSH1 0x40 DUP7 ADD MSTORE PUSH1 0x0 PUSH1 0x60 DUP7 ADD MSTORE PUSH1 0x80 DUP6 ADD MSTORE PUSH2 0x530 PUSH1 0xA4 CALLDATALOAD PUSH1 0xA0 DUP7 ADD PUSH2 0x3330 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x53D DUP3 PUSH2 0x324B JUMP JUMPDEST PUSH1 0x0 DUP3 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0xE4 CALLDATALOAD AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x574 PUSH2 0x39EF JUMP JUMPDEST PUSH2 0x57C PUSH2 0x39EF JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP4 PUSH2 0x58A DUP6 PUSH2 0x3230 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x40 MLOAD SWAP4 PUSH2 0x5A3 DUP6 PUSH2 0x3230 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x40 MLOAD SWAP2 PUSH2 0x5BC DUP4 PUSH2 0x3266 JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x20 DUP4 ADD MSTORE DUP1 MLOAD PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x20 DUP2 ADD MLOAD DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x9DB JUMPI PUSH2 0x607 PUSH1 0x2 SLOAD PUSH2 0x2F90 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0xD14 JUMPI JUMPDEST POP PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0xC9B JUMPI PUSH1 0x40 SWAP4 SWAP3 SWAP2 PUSH1 0x0 SWAP2 DUP4 PUSH2 0xC90 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x2 SSTORE JUMPDEST ADD MLOAD DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x9DB JUMPI DUP2 SWAP1 PUSH2 0x663 PUSH1 0x3 SLOAD PUSH2 0x2F90 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0xC19 JUMPI JUMPDEST POP PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0xBA1 JUMPI PUSH1 0x0 SWAP3 PUSH2 0xB96 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x3 SSTORE JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD DUP1 MLOAD DUP1 MLOAD SWAP1 PUSH1 0x8 DUP3 LT ISZERO PUSH2 0x1D7 JUMPI PUSH2 0x6B7 PUSH1 0xA0 SWAP3 PUSH2 0x3782 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH2 0x6C5 DUP2 PUSH2 0x3326 JUMP JUMPDEST PUSH2 0x6CE DUP2 PUSH2 0x3326 JUMP JUMPDEST PUSH2 0xFF00 PUSH1 0x4 SLOAD SWAP2 PUSH1 0x8 SHL AND SWAP1 PUSH2 0xFF00 NOT AND OR PUSH1 0x4 SSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x5 SSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x6 SSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x7 SSTORE ADD MLOAD SWAP1 PUSH1 0x3 DUP3 LT ISZERO PUSH2 0x1D7 JUMPI PUSH1 0x40 SWAP2 PUSH1 0xFF DUP1 NOT PUSH1 0x8 SLOAD AND SWAP2 AND OR PUSH1 0x8 SSTORE PUSH1 0xA0 PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x748 PUSH1 0x1 DUP1 DUP5 SHL SUB DUP3 MLOAD AND PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0x9 SLOAD AND OR PUSH1 0x9 SSTORE JUMP JUMPDEST PUSH2 0x774 PUSH1 0x1 DUP1 DUP5 SHL SUB PUSH1 0x20 DUP4 ADD MLOAD AND PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0xA SLOAD AND OR PUSH1 0xA SSTORE JUMP JUMPDEST DUP4 DUP2 ADD MLOAD PUSH1 0xB SSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0xC SSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0xD SSTORE ADD MLOAD PUSH1 0xE SSTORE ADD MLOAD SWAP1 DUP2 MLOAD SWAP2 DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x9DB JUMPI PUSH2 0x7B1 PUSH1 0xF SLOAD PUSH2 0x2F90 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0xB43 JUMPI JUMPDEST POP PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 EQ PUSH2 0xAD1 JUMPI DUP2 SWAP3 SWAP4 SWAP5 PUSH1 0x0 SWAP3 PUSH2 0xAC6 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0xF SSTORE JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x9DB JUMPI PUSH2 0x80B PUSH1 0x10 SLOAD PUSH2 0x2F90 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0xA73 JUMPI JUMPDEST POP PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x9FC JUMPI PUSH1 0x40 SWAP4 SWAP3 SWAP2 PUSH1 0x0 SWAP2 DUP4 PUSH2 0x9F1 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x10 SSTORE JUMPDEST ADD MLOAD SWAP1 DUP2 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x9DB JUMPI PUSH1 0x11 SWAP2 PUSH2 0x868 DUP4 SLOAD PUSH2 0x2F90 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x989 JUMPI JUMPDEST POP PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 EQ PUSH2 0x919 JUMPI DUP2 SWAP3 SWAP4 SWAP5 PUSH1 0x0 SWAP3 PUSH2 0x90E JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR DUP3 SSTORE JUMPDEST PUSH1 0x13 SLOAD SWAP2 PUSH1 0x0 NOT DUP4 EQ PUSH2 0x8FA JUMPI POP PUSH1 0x1 PUSH2 0x8F6 SWAP3 ADD PUSH1 0x13 SSTORE PUSH32 0x6E8F9F12846CF7BA30ACDD742F3EAE58C49BEFEED93F00D60DE3BD4F7D09F223 PUSH1 0x40 MLOAD DUP1 PUSH2 0x8E7 DUP5 DUP3 PUSH2 0x3684 JUMP JUMPDEST SUB SWAP1 LOG1 PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x3684 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADD MLOAD SWAP1 POP DUP5 DUP1 PUSH2 0x88B JUMP JUMPDEST PUSH1 0x1F NOT DUP3 AND SWAP1 DUP5 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x537A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x971 JUMPI POP SWAP6 DUP4 PUSH1 0x1 SWAP6 SWAP7 SWAP8 LT PUSH2 0x958 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD DUP3 SSTORE PUSH2 0x8A0 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP5 DUP1 DUP1 PUSH2 0x94B JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP7 DUP12 ADD MLOAD DUP2 SSTORE ADD SWAP5 ADD SWAP3 ADD PUSH2 0x936 JUMP JUMPDEST DUP4 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x537A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 PUSH1 0x20 DUP5 LT PUSH2 0x9D1 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x9C5 JUMPI POP PUSH2 0x871 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x9B8 JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x9AF JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADD MLOAD SWAP1 POP DUP6 DUP1 PUSH2 0x831 JUMP JUMPDEST SWAP1 PUSH1 0x1F NOT DUP4 AND SWAP2 PUSH1 0x10 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x539A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0xA5B JUMPI POP SWAP2 PUSH1 0x1 SWAP4 SWAP2 DUP6 PUSH1 0x40 SWAP8 SWAP7 SWAP5 LT PUSH2 0xA42 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x10 SSTORE PUSH2 0x847 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP6 DUP1 DUP1 PUSH2 0xA34 JUMP JUMPDEST SWAP3 SWAP4 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP8 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD PUSH2 0xA1B JUMP JUMPDEST PUSH1 0x10 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x539A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 PUSH1 0x20 DUP6 LT PUSH2 0xABC JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0xAB0 JUMPI POP PUSH2 0x814 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xAA3 JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0xA9A JUMP JUMPDEST ADD MLOAD SWAP1 POP DUP5 DUP1 PUSH2 0x7D4 JUMP JUMPDEST PUSH1 0x1F NOT DUP3 AND SWAP1 PUSH1 0xF PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x53BA DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0xB2B JUMPI POP SWAP6 DUP4 PUSH1 0x1 SWAP6 SWAP7 SWAP8 LT PUSH2 0xB12 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0xF SSTORE PUSH2 0x7EA JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP5 DUP1 DUP1 PUSH2 0xB04 JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP7 DUP12 ADD MLOAD DUP2 SSTORE ADD SWAP5 ADD SWAP3 ADD PUSH2 0xAEF JUMP JUMPDEST PUSH1 0xF PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x53BA DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 PUSH1 0x20 DUP5 LT PUSH2 0xB8C JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0xB80 JUMPI POP PUSH2 0x7BA JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xB73 JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0xB6A JUMP JUMPDEST ADD MLOAD SWAP1 POP DUP4 DUP1 PUSH2 0x683 JUMP JUMPDEST SWAP3 POP PUSH1 0x3 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x535A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP4 JUMPDEST PUSH1 0x1F NOT DUP5 AND DUP6 LT PUSH2 0xBFE JUMPI PUSH1 0x1 SWAP5 POP DUP4 PUSH1 0x1F NOT DUP2 AND LT PUSH2 0xBE5 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x3 SSTORE PUSH2 0x699 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP4 DUP1 DUP1 PUSH2 0xBD7 JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH2 0xBBC JUMP JUMPDEST SWAP1 SWAP2 POP PUSH1 0x3 PUSH1 0x0 MSTORE PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x535A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE ADD SWAP1 PUSH1 0x20 DUP5 LT PUSH2 0xC7A JUMPI JUMPDEST SWAP1 PUSH1 0x1F DUP5 SWAP4 SWAP3 ADD PUSH1 0x5 SHR PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x535A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0xC6B JUMPI POP PUSH2 0x66C JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE DUP5 SWAP4 POP PUSH1 0x1 ADD PUSH2 0xC5E JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x535A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 POP PUSH2 0xC42 JUMP JUMPDEST ADD MLOAD SWAP1 POP DUP6 DUP1 PUSH2 0x62D JUMP JUMPDEST SWAP1 PUSH1 0x2 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x533A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 PUSH1 0x0 JUMPDEST PUSH1 0x1F NOT DUP6 AND DUP2 LT PUSH2 0xCFC JUMPI POP SWAP2 DUP4 SWAP2 PUSH1 0x1 SWAP4 PUSH1 0x40 SWAP7 SWAP6 PUSH1 0x1F NOT DUP2 AND LT PUSH2 0xCE3 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x2 SSTORE PUSH2 0x643 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP6 DUP1 DUP1 PUSH2 0xCD5 JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP7 DUP6 ADD MLOAD DUP2 SSTORE ADD SWAP5 ADD SWAP3 ADD PUSH2 0xCB4 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 MSTORE PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x533A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE ADD PUSH1 0x20 DUP5 LT PUSH2 0xD68 JUMPI JUMPDEST PUSH1 0x1F DUP3 ADD PUSH1 0x5 SHR PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x533A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE ADD DUP2 LT PUSH2 0xD5C JUMPI POP PUSH2 0x610 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xD39 JUMP JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x533A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xD39 JUMP JUMPDEST SWAP1 SWAP3 POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP4 RETURNDATACOPY PUSH2 0xD90 DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST PUSH1 0x20 DUP3 DUP3 DUP2 ADD SUB SLT PUSH2 0x150 JUMPI DUP2 MLOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT PUSH2 0x150 JUMPI PUSH1 0x60 DUP4 DUP3 ADD DUP4 DUP4 ADD SUB SLT PUSH2 0x150 JUMPI PUSH1 0x40 MLOAD SWAP3 PUSH2 0xDC8 DUP5 PUSH2 0x3230 JUMP JUMPDEST PUSH2 0xDD3 DUP2 DUP4 ADD PUSH2 0x3999 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP2 DUP4 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x150 JUMPI PUSH2 0xDFB SWAP1 DUP5 DUP5 ADD SWAP1 DUP4 DUP6 ADD ADD PUSH2 0x39AD JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP2 DUP4 ADD ADD MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x150 JUMPI PUSH2 0xE24 SWAP4 DUP4 ADD SWAP3 ADD ADD PUSH2 0x39AD JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP2 DUP5 PUSH2 0x4EA JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x1D7 JUMPI PUSH1 0xA4 CALLDATALOAD ISZERO PUSH2 0xE62 JUMPI JUMPDEST PUSH2 0xE5D PUSH1 0x84 CALLDATALOAD PUSH1 0xC4 CALLDATALOAD PUSH1 0xE4 CALLDATALOAD PUSH1 0xA4 CALLDATALOAD PUSH2 0x3D7E JUMP JUMPDEST PUSH2 0x42A JUMP JUMPDEST CALLVALUE PUSH1 0x84 CALLDATALOAD EQ PUSH2 0xE49 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x57524F4E475F4D53475F56414C5545 PUSH1 0x88 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x5041594D454E545F5A45524F PUSH1 0xA0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x5354414B455F414D4F554E545F5A45524F PUSH1 0x78 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x1554D15497D393D517D1561254D5 PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0xF77 JUMPI JUMPDEST DUP2 PUSH2 0xF60 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x150 JUMPI PUSH2 0xF71 SWAP1 PUSH2 0x3734 JUMP JUMPDEST DUP4 PUSH2 0x3A7 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0xF53 JUMP JUMPDEST POP PUSH2 0x1D7 JUMPI DUP1 PUSH1 0xA4 CALLDATALOAD ISZERO PUSH2 0x34B JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP PUSH1 0xA4 CALLDATALOAD PUSH1 0x2 EQ PUSH2 0x342 JUMP JUMPDEST CALLVALUE PUSH2 0x150 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x150 JUMPI PUSH1 0x20 PUSH1 0xC SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x150 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x150 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 PUSH1 0x4 CALLDATALOAD DUP3 DUP2 GT PUSH2 0x150 JUMPI PUSH2 0xFEF SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x363D JUMP JUMPDEST PUSH1 0xA SLOAD SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x100A SWAP1 DUP4 AND CALLER EQ PUSH2 0x3B07 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x4 SLOAD AND PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x1D7 JUMPI DUP1 PUSH1 0x0 MSTORE PUSH1 0x19 DUP3 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND DUP1 PUSH2 0x12BC JUMPI JUMPDEST ISZERO PUSH2 0x1288 JUMPI PUSH1 0x24 DUP3 DUP5 PUSH1 0x14 SLOAD AND PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH4 0x122643F3 PUSH1 0xE2 SHL DUP3 MSTORE CALLER PUSH1 0x4 DUP4 ADD MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xE30 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x1253 JUMPI JUMPDEST POP ISZERO PUSH2 0x1218 JUMPI PUSH2 0x107C PUSH1 0x1 SWAP4 CALLER SWAP1 DUP6 SLOAD AND EQ PUSH2 0x3B07 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x19 DUP2 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP3 PUSH1 0xFF NOT SWAP4 DUP5 DUP2 SLOAD AND SWAP1 SSTORE PUSH1 0x3 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP4 DUP6 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x3 DUP5 PUSH1 0x4 SLOAD AND OR PUSH1 0x4 SSTORE DUP1 MLOAD SWAP5 DUP6 GT PUSH2 0x9DB JUMPI PUSH2 0x10C4 PUSH1 0x10 SLOAD PUSH2 0x2F90 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x11C3 JUMPI JUMPDEST POP DUP2 PUSH1 0x1F DUP7 GT PUSH1 0x1 EQ PUSH2 0x1151 JUMPI POP PUSH1 0x3 SWAP5 SWAP3 PUSH1 0x0 SWAP3 DUP5 SWAP3 DUP4 PUSH2 0x1146 JUMPI JUMPDEST POP POP SHL SWAP2 PUSH1 0x0 NOT SWAP1 DUP6 SHL SHR NOT AND OR PUSH1 0x10 SSTORE JUMPDEST PUSH1 0x4 SLOAD AND OR PUSH1 0x4 SSTORE PUSH2 0x1110 PUSH1 0x7 SLOAD TIMESTAMP PUSH2 0x3C81 JUMP JUMPDEST PUSH1 0x6 SSTORE PUSH32 0x61DE5B63673167E253173C50ABDC3FD45371DC3205496F46FDB05A9F7927B574 PUSH1 0x40 MLOAD DUP1 PUSH2 0x1141 DUP2 PUSH2 0x379B JUMP JUMPDEST SUB SWAP1 LOG1 STOP JUMPDEST ADD MLOAD SWAP3 POP DUP7 DUP1 PUSH2 0x10EA JUMP JUMPDEST SWAP1 SWAP5 SWAP2 PUSH1 0x1F NOT DUP4 AND SWAP6 PUSH1 0x10 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x539A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 PUSH1 0x0 SWAP1 JUMPDEST DUP9 DUP3 LT PUSH2 0x11AC JUMPI POP POP DUP4 PUSH1 0x3 SWAP8 LT PUSH2 0x1194 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x10 SSTORE PUSH2 0x10FC JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT DUP4 DUP8 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE DUP5 DUP1 DUP1 PUSH2 0x1186 JUMP JUMPDEST DUP1 DUP8 DUP6 SWAP7 DUP3 SWAP5 SWAP7 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD SWAP1 PUSH2 0x1173 JUMP JUMPDEST PUSH1 0x10 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x539A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x1F DUP8 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 DUP5 DUP9 LT PUSH2 0x120E JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 DUP5 SWAP1 JUMPDEST DUP3 DUP2 LT PUSH2 0x1202 JUMPI POP POP PUSH2 0x10CD JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE ADD DUP5 SWAP1 PUSH2 0x11F4 JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x11E9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x155CD95C88191BD95CC81B9BDD08195E1A5CDD PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 POP DUP3 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x1281 JUMPI JUMPDEST PUSH2 0x126A DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x150 JUMPI PUSH2 0x127B SWAP1 PUSH2 0x3734 JUMP JUMPDEST DUP7 PUSH2 0x1065 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1260 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x57524F4E475F535441545553 PUSH1 0xA0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH1 0x2 DUP2 EQ DUP1 PUSH2 0x1030 JUMPI POP PUSH1 0x3 DUP2 EQ PUSH2 0x1030 JUMP JUMPDEST CALLVALUE PUSH2 0x150 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x150 JUMPI PUSH1 0x4 CALLDATALOAD ISZERO ISZERO PUSH1 0x4 CALLDATALOAD SUB PUSH2 0x150 JUMPI PUSH1 0x9 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1305 CALLER DUP3 EQ PUSH2 0x3B07 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x4 SLOAD AND PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x1D7 JUMPI PUSH1 0x3 SUB PUSH2 0x1D20 JUMPI PUSH1 0x15 SLOAD PUSH1 0x40 MLOAD PUSH4 0x335DED4B PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH1 0x20 DUP2 PUSH1 0x4 DUP2 DUP6 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xE30 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x1CE1 JUMPI JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x28C44A99 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x44 CALLDATALOAD PUSH1 0x4 DUP3 ADD MSTORE SWAP1 PUSH1 0x0 SWAP1 DUP3 SWAP1 PUSH1 0x24 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xE30 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x1BBE JUMPI JUMPDEST POP PUSH1 0xE0 DUP2 ADD MLOAD PUSH2 0x13A4 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 EQ PUSH2 0x3B54 JUMP JUMPDEST PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP2 AND SUB PUSH2 0x1B85 JUMPI PUSH1 0x20 DUP2 DUP2 ADD MLOAD PUSH1 0x40 MLOAD PUSH4 0x3EC4F23D PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 DUP3 PUSH1 0x4 DUP2 DUP8 GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0xE30 JUMPI PUSH1 0x0 SWAP3 PUSH2 0x1B51 JUMPI JUMPDEST POP SUB PUSH2 0x1B1B JUMPI PUSH2 0x120 ADD MLOAD SWAP1 DUP2 MLOAD DUP3 ADD SWAP2 PUSH1 0x60 DUP2 DUP5 SUB SLT PUSH2 0x150 JUMPI PUSH2 0x140F PUSH1 0x20 DUP3 ADD PUSH2 0x3734 JUMP JUMPDEST SWAP3 PUSH2 0x141C PUSH1 0x40 DUP4 ADD PUSH2 0x3999 JUMP JUMPDEST SWAP2 PUSH1 0x60 DUP2 ADD MLOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT PUSH2 0x150 JUMPI PUSH2 0x1442 SWAP3 PUSH1 0x20 DUP1 SWAP3 ADD SWAP3 ADD ADD PUSH2 0x39AD JUMP JUMPDEST SWAP1 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SUB PUSH2 0x1AE7 JUMPI PUSH1 0x40 MLOAD PUSH2 0x147F DUP2 PUSH2 0x1471 PUSH1 0x20 DUP3 ADD SWAP5 PUSH1 0x20 DUP7 MSTORE PUSH1 0x40 DUP4 ADD SWAP1 PUSH2 0x345B JUMP JUMPDEST SUB PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x32AF JUMP JUMPDEST MLOAD SWAP1 KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 DUP1 DUP3 ADD MSTORE PUSH1 0xF SLOAD DUP2 PUSH1 0x0 PUSH2 0x149A DUP4 PUSH2 0x2F90 JUMP JUMPDEST SWAP3 DUP4 PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x1 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0x1AC8 JUMPI POP PUSH1 0x1 EQ PUSH2 0x1A7B JUMPI JUMPDEST PUSH2 0x14CA SWAP3 POP SUB PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x32AF JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD KECCAK256 SUB PUSH2 0x1A47 JUMPI PUSH1 0x20 PUSH1 0x4 SWAP2 PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH4 0x18DA0011 PUSH1 0xE0 SHL DUP3 MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xE30 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x1A0D JUMPI JUMPDEST POP PUSH1 0xC SLOAD PUSH1 0x40 MLOAD PUSH4 0x4047E103 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 SWAP3 SWAP1 PUSH1 0x20 DUP2 PUSH1 0x4 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xE30 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x19D9 JUMPI JUMPDEST POP PUSH2 0x2710 PUSH2 0x1543 PUSH2 0x154B SWAP3 DUP7 PUSH2 0x3B96 JUMP JUMPDEST DIV DUP1 SWAP5 PUSH2 0x3BBF JUMP JUMPDEST SWAP4 PUSH1 0x6 SLOAD TIMESTAMP GT DUP1 ISZERO PUSH2 0x19D0 JUMPI JUMPDEST ISZERO PUSH2 0x1872 JUMPI POP PUSH2 0x156F SWAP1 ISZERO ISZERO PUSH1 0x4 CALLDATALOAD ISZERO ISZERO EQ PUSH2 0x3B54 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x9 SLOAD PUSH1 0xC SLOAD PUSH2 0x15AD SWAP3 PUSH2 0x1592 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0xFF AND PUSH2 0x3C8E JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0xA SLOAD SWAP2 SWAP6 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0xFF AND PUSH2 0x3BF8 JUMP JUMPDEST SWAP2 PUSH1 0xFF PUSH1 0x8 SLOAD AND PUSH1 0x3 DUP2 LT ISZERO DUP1 PUSH2 0x1D7 JUMPI PUSH1 0x1 DUP3 EQ DUP1 ISZERO SWAP2 DUP2 DUP4 PUSH2 0x1864 JUMPI JUMPDEST DUP2 SWAP1 DUP1 ISZERO PUSH2 0x1857 JUMPI JUMPDEST PUSH2 0x15DF SWAP2 POP PUSH2 0x395F JUMP JUMPDEST PUSH1 0x15 SLOAD PUSH1 0x40 MLOAD PUSH4 0x2EE4B68B PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x4 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xE30 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x181D JUMPI JUMPDEST POP PUSH2 0x17D0 JUMPI PUSH2 0x1D7 JUMPI DUP3 PUSH2 0x16E4 JUMPI POP PUSH2 0x164B SWAP4 PUSH1 0x0 SWAP4 DUP5 SWAP4 POP DUP4 SWAP3 POP DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS CALL PUSH2 0x1645 PUSH2 0x404C JUMP JUMPDEST POP PUSH2 0x407C JUMP JUMPDEST PUSH1 0xB SSTORE PUSH1 0xC SSTORE PUSH1 0x4 CALLDATALOAD ISZERO PUSH2 0x16DD JUMPI PUSH1 0x4 JUMPDEST PUSH1 0xFF PUSH1 0x4 SLOAD AND PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x1D7 JUMPI PUSH1 0x0 MSTORE PUSH1 0x19 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0xFF NOT SWAP2 DUP3 DUP2 SLOAD AND SWAP1 SSTORE PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x1D7 JUMPI PUSH2 0x16AF SWAP2 PUSH1 0xFF DUP3 AND PUSH1 0x0 MSTORE PUSH1 0x19 PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP2 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0x3782 JUMP JUMPDEST PUSH32 0x61DE5B63673167E253173C50ABDC3FD45371DC3205496F46FDB05A9F7927B574 PUSH1 0x40 MLOAD DUP1 PUSH2 0x1141 DUP2 PUSH2 0x379B JUMP JUMPDEST PUSH1 0x5 PUSH2 0x165C JUMP JUMPDEST PUSH1 0x0 SWAP1 SWAP2 PUSH2 0x17C3 JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x17B0 JUMPI JUMPDEST POP SWAP3 PUSH1 0x20 SWAP3 SWAP2 PUSH2 0x1706 PUSH2 0x1754 SWAP6 PUSH2 0x395F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH2 0x1718 SWAP1 PUSH2 0x5123 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP1 SWAP4 DUP5 SWAP3 SWAP2 SWAP1 SWAP2 AND SWAP1 DUP3 SWAP1 PUSH1 0x0 SWAP1 DUP3 SWAP1 PUSH1 0x44 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP3 GAS CALL DUP1 ISZERO PUSH2 0xE30 JUMPI PUSH1 0x0 SWAP1 PUSH2 0x1775 JUMPI JUMPDEST PUSH2 0x1770 SWAP2 POP PUSH2 0x50E5 JUMP JUMPDEST PUSH2 0x164B JUMP JUMPDEST POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x17A8 JUMPI JUMPDEST DUP2 PUSH2 0x178F PUSH1 0x20 SWAP4 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x150 JUMPI PUSH2 0x17A3 PUSH2 0x1770 SWAP2 PUSH2 0x3734 JUMP JUMPDEST PUSH2 0x1766 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x1782 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 SWAP2 PUSH2 0x1D7 JUMPI SWAP1 PUSH1 0x0 PUSH1 0x20 PUSH2 0x16F4 JUMP JUMPDEST POP POP PUSH1 0x2 DUP2 EQ PUSH1 0x0 PUSH2 0x16ED JUMP JUMPDEST SWAP2 POP SWAP2 SWAP3 SWAP4 POP PUSH2 0x1D7 JUMPI PUSH1 0x2 DUP3 SUB PUSH2 0x17F3 JUMPI POP POP PUSH2 0x17ED SWAP1 PUSH2 0x43B8 JUMP JUMPDEST POP PUSH2 0x164B JUMP JUMPDEST ISZERO PUSH2 0x1802 JUMPI POP PUSH2 0x17ED SWAP1 PUSH2 0x4E6A JUMP JUMPDEST ISZERO PUSH2 0x180D JUMPI POP PUSH2 0x164B JUMP JUMPDEST PUSH2 0x1816 SWAP1 PUSH2 0x484F JUMP JUMPDEST POP DUP3 PUSH2 0x17ED JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x184F JUMPI JUMPDEST DUP2 PUSH2 0x1838 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x150 JUMPI PUSH2 0x1849 SWAP1 PUSH2 0x3734 JUMP JUMPDEST DUP10 PUSH2 0x1614 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x182B JUMP JUMPDEST POP PUSH2 0x1D7 JUMPI DUP1 DUP5 ISZERO PUSH2 0x15D5 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP PUSH1 0x2 DUP5 EQ PUSH2 0x15CC JUMP JUMPDEST SWAP4 POP SWAP2 POP POP PUSH1 0x4 CALLDATALOAD ISZERO PUSH2 0x1881 JUMPI STOP JUMPDEST PUSH2 0x1892 SWAP1 ISZERO ISZERO PUSH1 0x4 CALLDATALOAD ISZERO ISZERO EQ PUSH2 0x3B54 JUMP JUMPDEST PUSH1 0xB SLOAD PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x1995 JUMPI PUSH1 0x12 SLOAD SWAP2 PUSH8 0xDE0B6B3A7640000 SWAP3 DUP4 DUP2 LT ISZERO PUSH2 0x1958 JUMPI PUSH1 0x5 SWAP4 PUSH2 0x18C5 PUSH2 0x18D3 SWAP3 DUP6 PUSH2 0x3B96 JUMP JUMPDEST DIV DUP1 SWAP3 PUSH1 0xFF PUSH1 0x8 SLOAD AND PUSH2 0x40B6 JUMP JUMPDEST PUSH1 0xC SSTORE PUSH1 0x8 SLOAD PUSH1 0xA SLOAD PUSH2 0x18F4 SWAP2 DUP5 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0xFF AND PUSH2 0x40B6 JUMP JUMPDEST PUSH1 0xB SSTORE PUSH1 0xFF NOT SWAP2 DUP4 DUP4 PUSH1 0x4 SLOAD AND OR PUSH1 0x4 SSTORE PUSH1 0xD SSTORE PUSH1 0xE SSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x19 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 DUP3 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x4 SLOAD AND OR PUSH1 0x4 SSTORE PUSH32 0xB0EC4EF3EE1A79EFFA677AF7A82A3A875B4D438307FB7E589A58966E3B913F2F PUSH1 0x40 MLOAD DUP1 PUSH2 0x1141 DUP2 PUSH2 0x379B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0xA0AA9C92A6909A8A9CA8BEA482A8929EBE90928E9 PUSH1 0x5B SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0xA0AA9C92A6909A8A9CA8BEA89E9EBE90928E9 PUSH1 0x6B SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATALOAD PUSH2 0x1558 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x1A05 JUMPI JUMPDEST DUP2 PUSH2 0x19F4 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x150 JUMPI MLOAD PUSH2 0x2710 PUSH2 0x1532 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x19E7 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x1A3F JUMPI JUMPDEST DUP2 PUSH2 0x1A28 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x150 JUMPI PUSH2 0x1A39 SWAP1 PUSH2 0x3999 JUMP JUMPDEST DUP4 PUSH2 0x14FD JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x1A1B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x1253959053125117D413D4D5 PUSH1 0xA2 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP SWAP1 PUSH1 0xF PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x53BA DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x1AAE JUMPI POP POP SWAP1 PUSH1 0x60 PUSH2 0x14CA SWAP3 DUP3 ADD ADD PUSH2 0x14B7 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x60 DUP5 DUP8 ADD ADD MSTORE DUP5 SWAP4 POP PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x1A96 JUMP JUMPDEST PUSH1 0x60 SWAP3 POP PUSH2 0x14CA SWAP5 SWAP2 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD PUSH2 0x14B7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x1253959053125117D1915151 PUSH1 0xA2 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x494E56414C49445F534348454D41 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 SWAP2 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x1B7D JUMPI JUMPDEST DUP2 PUSH2 0x1B6D PUSH1 0x20 SWAP4 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x150 JUMPI MLOAD SWAP1 DUP6 PUSH2 0x13E8 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x1B60 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x1253959053125117D49150D25412515395 PUSH1 0x7A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP4 RETURNDATACOPY PUSH2 0x1BD0 DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST PUSH1 0x20 DUP3 DUP3 DUP2 ADD SUB SLT PUSH2 0x150 JUMPI DUP2 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x150 JUMPI PUSH2 0x140 DUP3 DUP5 ADD DUP3 DUP6 ADD SUB SLT PUSH2 0x150 JUMPI PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0x140 DUP2 ADD LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH2 0x140 DUP7 ADD GT OR PUSH2 0x9DB JUMPI PUSH2 0x140 DUP5 ADD PUSH1 0x40 SWAP1 DUP2 MSTORE DUP2 DUP5 ADD DUP1 MLOAD DUP7 MSTORE PUSH1 0x20 DUP1 DUP3 ADD MLOAD SWAP1 DUP8 ADD MSTORE PUSH2 0x1C3F SWAP2 ADD PUSH2 0x3B40 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x1C52 PUSH1 0x60 DUP5 DUP4 ADD ADD PUSH2 0x3B40 JUMP JUMPDEST PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x1C65 PUSH1 0x80 DUP5 DUP4 ADD ADD PUSH2 0x3B40 JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP4 DUP3 ADD ADD MLOAD PUSH1 0xA0 DUP6 ADD MSTORE PUSH2 0x1C84 PUSH1 0xC0 DUP5 DUP4 ADD ADD PUSH2 0x3999 JUMP JUMPDEST PUSH1 0xC0 DUP6 ADD MSTORE PUSH2 0x1C97 PUSH1 0xE0 DUP5 DUP4 ADD ADD PUSH2 0x3999 JUMP JUMPDEST PUSH1 0xE0 DUP6 ADD MSTORE PUSH2 0x100 PUSH2 0x1CAC DUP2 DUP6 DUP5 ADD ADD PUSH2 0x3734 JUMP JUMPDEST SWAP1 DUP6 ADD MSTORE PUSH2 0x120 SWAP3 DUP4 DUP2 DUP4 ADD ADD MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x150 JUMPI PUSH2 0x1CD7 SWAP4 DUP4 ADD SWAP3 ADD ADD PUSH2 0x39AD JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE DUP4 PUSH2 0x138A JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x1D18 JUMPI JUMPDEST DUP2 PUSH2 0x1CFC PUSH1 0x20 SWAP4 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x150 JUMPI PUSH1 0x0 PUSH2 0x1D11 PUSH1 0x24 SWAP3 PUSH2 0x3999 JUMP JUMPDEST SWAP2 POP PUSH2 0x134F JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x1CEF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x1393D517D4D550935255151151 PUSH1 0x9A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x150 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x150 JUMPI PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x150 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x150 JUMPI PUSH2 0x1D97 PUSH2 0x38EB JUMP JUMPDEST POP PUSH2 0x8F6 PUSH1 0x40 MLOAD PUSH2 0x1DA7 DUP2 PUSH2 0x3266 JUMP JUMPDEST PUSH2 0x1DAF PUSH2 0x32D0 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x1DB9 PUSH2 0x333C JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x3684 JUMP JUMPDEST CALLVALUE PUSH2 0x150 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x150 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 PUSH1 0x4 CALLDATALOAD DUP3 DUP2 GT PUSH2 0x150 JUMPI PUSH2 0x1DFD SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x363D JUMP JUMPDEST SWAP1 PUSH1 0xFF PUSH1 0x4 SLOAD AND PUSH1 0x8 DUP2 LT ISZERO DUP1 PUSH2 0x1D7 JUMPI DUP2 PUSH1 0x0 MSTORE PUSH1 0x19 DUP4 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND DUP1 PUSH2 0x1FED JUMPI JUMPDEST PUSH2 0x1E2E SWAP1 PUSH2 0x36B9 JUMP JUMPDEST PUSH2 0x1E44 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0xA SLOAD AND CALLER EQ ISZERO PUSH2 0x3741 JUMP JUMPDEST PUSH2 0x1D7 JUMPI PUSH1 0x4 SUB PUSH2 0x1FB9 JUMPI DUP2 MLOAD SWAP3 DUP4 GT PUSH2 0x9DB JUMPI PUSH2 0x1E63 PUSH1 0x11 SLOAD PUSH2 0x2F90 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x1F67 JUMPI JUMPDEST POP DUP1 SWAP3 PUSH1 0x1F DUP2 GT PUSH1 0x1 EQ PUSH2 0x1EF8 JUMPI DUP1 SWAP2 SWAP3 SWAP4 PUSH1 0x0 SWAP2 PUSH2 0x1EED JUMPI JUMPDEST POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x11 SSTORE JUMPDEST PUSH1 0x6 PUSH1 0xFF NOT PUSH1 0x4 SLOAD AND OR PUSH1 0x4 SSTORE PUSH32 0x76C6A8F0836A14A631DC3A45FC0C49D4DD3FC4147167329BA4220BA2664CCAF0 PUSH1 0x40 MLOAD DUP1 PUSH2 0x1ED6 DUP2 PUSH2 0x379B JUMP JUMPDEST SUB SWAP1 LOG1 PUSH2 0x8F6 PUSH1 0x40 MLOAD SWAP3 DUP3 DUP5 SWAP4 DUP5 MSTORE DUP4 ADD SWAP1 PUSH2 0x345B JUMP JUMPDEST SWAP1 POP DUP4 ADD MLOAD DUP5 PUSH2 0x1E86 JUMP JUMPDEST PUSH1 0x1F NOT DUP2 AND SWAP4 PUSH1 0x11 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x537A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0x0 JUMPDEST DUP7 DUP2 LT PUSH2 0x1F50 JUMPI POP DUP3 PUSH1 0x1 SWAP5 SWAP6 SWAP7 LT PUSH2 0x1F37 JUMPI JUMPDEST POP POP DUP2 SHL ADD PUSH1 0x11 SSTORE PUSH2 0x1E9B JUMP JUMPDEST DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP5 DUP1 PUSH2 0x1F2A JUMP JUMPDEST SWAP1 SWAP2 DUP5 PUSH1 0x1 DUP2 SWAP3 DUP6 DUP10 ADD MLOAD DUP2 SSTORE ADD SWAP4 ADD SWAP2 ADD PUSH2 0x1F16 JUMP JUMPDEST PUSH1 0x11 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x537A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 DUP4 DUP7 LT PUSH2 0x1FAF JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x1FA3 JUMPI POP PUSH2 0x1E6C JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1F96 JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x1F8D JUMP JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x1393D517D19253905312569151 PUSH1 0x9A SHL PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP POP PUSH1 0x0 PUSH1 0x3 DUP3 EQ DUP1 ISZERO PUSH2 0x201B JUMPI JUMPDEST DUP2 SWAP1 DUP1 ISZERO PUSH2 0x200C JUMPI JUMPDEST SWAP1 POP PUSH2 0x1E25 JUMP JUMPDEST POP PUSH2 0x1D7 JUMPI DUP1 PUSH1 0x4 DUP4 EQ PUSH2 0x2005 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP PUSH1 0x6 DUP3 EQ PUSH2 0x1FFC JUMP JUMPDEST CALLVALUE PUSH2 0x150 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x150 JUMPI PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0xF SLOAD PUSH2 0x204B DUP2 PUSH2 0x2F90 JUMP JUMPDEST DUP1 DUP5 MSTORE SWAP1 PUSH1 0x1 SWAP1 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x20D2 JUMPI POP PUSH1 0x1 EQ PUSH2 0x2089 JUMPI JUMPDEST PUSH2 0x8F6 DUP5 PUSH2 0x2075 DUP2 DUP7 SUB DUP3 PUSH2 0x32AF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x345B JUMP JUMPDEST PUSH1 0xF PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP3 POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x53BA DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE JUMPDEST DUP3 DUP5 LT PUSH2 0x20BA JUMPI POP POP POP DUP2 ADD PUSH1 0x20 ADD PUSH2 0x2075 DUP3 PUSH2 0x2065 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x20 DUP6 DUP8 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP4 ADD SWAP3 DUP2 ADD PUSH2 0x20A2 JUMP JUMPDEST PUSH1 0xFF NOT AND PUSH1 0x20 DUP1 DUP8 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP3 ISZERO ISZERO PUSH1 0x5 SHL DUP6 ADD SWAP1 SWAP3 ADD SWAP3 POP PUSH2 0x2075 SWAP2 POP DUP4 SWAP1 POP PUSH2 0x2065 JUMP JUMPDEST CALLVALUE PUSH2 0x150 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x150 JUMPI PUSH1 0x8 SLOAD PUSH1 0xA SLOAD PUSH1 0x20 SWAP2 PUSH2 0x1BB SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0xFF AND PUSH2 0x3AD9 JUMP JUMPDEST CALLVALUE PUSH2 0x150 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x150 JUMPI PUSH1 0x20 PUSH2 0x2144 PUSH2 0x3A0F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x150 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x150 JUMPI PUSH2 0x2190 PUSH32 0x0 PUSH2 0x51B1 JUMP JUMPDEST PUSH2 0x21B9 PUSH32 0x0 PUSH2 0x51B1 JUMP JUMPDEST SWAP1 PUSH2 0x224C PUSH1 0x22 PUSH2 0x21E8 PUSH32 0x0 PUSH2 0x51B1 JUMP JUMPDEST SWAP4 PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP2 DUP6 MLOAD PUSH2 0x2203 DUP2 PUSH1 0x20 SWAP9 DUP10 DUP1 DUP9 ADD SWAP2 ADD PUSH2 0x3438 JUMP JUMPDEST DUP4 ADD SWAP1 PUSH1 0x17 PUSH1 0xF9 SHL SWAP2 DUP3 DUP9 DUP3 ADD MSTORE PUSH2 0x2224 DUP3 MLOAD DUP1 SWAP4 DUP11 PUSH1 0x21 DUP6 ADD SWAP2 ADD PUSH2 0x3438 JUMP JUMPDEST ADD SWAP1 PUSH1 0x21 DUP3 ADD MSTORE PUSH2 0x223D DUP3 MLOAD DUP1 SWAP4 DUP9 DUP8 DUP6 ADD SWAP2 ADD PUSH2 0x3438 JUMP JUMPDEST ADD SUB PUSH1 0x2 DUP2 ADD DUP6 MSTORE ADD DUP4 PUSH2 0x32AF JUMP JUMPDEST PUSH2 0x8F6 PUSH1 0x40 MLOAD SWAP3 DUP3 DUP5 SWAP4 DUP5 MSTORE DUP4 ADD SWAP1 PUSH2 0x345B JUMP JUMPDEST CALLVALUE PUSH2 0x150 JUMPI PUSH1 0x20 PUSH2 0x1BB PUSH2 0x2273 CALLDATASIZE PUSH2 0x35F3 JUMP JUMPDEST SWAP1 PUSH2 0x3AD9 JUMP JUMPDEST CALLVALUE PUSH2 0x150 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x150 JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0x4 SLOAD AND PUSH2 0x229F PUSH1 0x40 MLOAD DUP1 SWAP3 PUSH2 0x34BF JUMP JUMPDEST RETURN JUMPDEST CALLVALUE PUSH2 0x150 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x150 JUMPI PUSH1 0x8 SLOAD PUSH1 0x9 SLOAD PUSH1 0x20 SWAP2 PUSH2 0x1BB SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0xFF AND PUSH2 0x3AD9 JUMP JUMPDEST CALLVALUE PUSH2 0x150 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x150 JUMPI PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH2 0x22FB SWAP1 DUP3 AND CALLER EQ PUSH2 0x3B07 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x4 SLOAD AND PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x1D7 JUMPI PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x19 DUP2 MSTORE PUSH2 0x2324 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x36B9 JUMP JUMPDEST PUSH2 0x232C PUSH2 0x39EF JUMP JUMPDEST PUSH2 0x2334 PUSH2 0x39EF JUMP JUMPDEST SWAP2 PUSH1 0x40 MLOAD SWAP2 PUSH2 0x2342 DUP4 PUSH2 0x3230 JUMP JUMPDEST PUSH1 0x0 DUP4 MSTORE DUP2 DUP4 ADD SWAP1 DUP2 MSTORE PUSH1 0x40 DUP4 ADD SWAP4 DUP5 MSTORE PUSH2 0x244F DUP6 PUSH1 0x40 MLOAD SWAP5 PUSH2 0x2364 DUP7 PUSH2 0x324B JUMP JUMPDEST PUSH1 0x7 DUP7 MSTORE PUSH1 0x0 DUP6 DUP8 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP8 ADD MSTORE PUSH1 0x0 PUSH1 0x60 DUP8 ADD MSTORE PUSH1 0x0 PUSH1 0x80 DUP8 ADD MSTORE PUSH1 0x0 PUSH1 0xA0 DUP8 ADD MSTORE PUSH1 0x40 MLOAD PUSH2 0x2396 DUP2 PUSH2 0x324B JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE PUSH1 0x0 DUP7 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x40 MLOAD SWAP1 PUSH2 0x23C9 DUP3 PUSH2 0x3230 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23D5 DUP2 PUSH2 0x3294 JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE DUP3 MSTORE PUSH1 0x40 MLOAD PUSH2 0x23E7 DUP2 PUSH2 0x3294 JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE DUP8 DUP4 ADD MSTORE PUSH1 0x40 MLOAD PUSH2 0x23FB DUP2 PUSH2 0x3294 JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x40 MLOAD SWAP8 PUSH2 0x2411 DUP10 PUSH2 0x3230 JUMP JUMPDEST DUP9 MSTORE DUP7 DUP9 ADD MSTORE PUSH1 0x40 DUP8 ADD MSTORE DUP5 PUSH1 0x40 MLOAD PUSH2 0x2429 DUP2 PUSH2 0x3266 JUMP JUMPDEST DUP3 DUP2 MSTORE ADD SWAP6 DUP7 MSTORE MLOAD AND PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0x1 SLOAD AND OR PUSH1 0x1 SSTORE JUMP JUMPDEST MLOAD SWAP1 DUP2 MLOAD SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP5 DUP6 DUP2 GT PUSH2 0x9DB JUMPI DUP1 PUSH2 0x2470 PUSH1 0x2 SLOAD PUSH2 0x2F90 JUMP JUMPDEST SWAP5 PUSH1 0x1F SWAP6 DUP7 DUP2 GT PUSH2 0x2AB4 JUMPI JUMPDEST POP DUP5 SWAP1 DUP7 DUP4 GT PUSH1 0x1 EQ PUSH2 0x2A40 JUMPI PUSH1 0x0 SWAP3 PUSH2 0x2A35 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x2 SSTORE JUMPDEST MLOAD SWAP3 DUP4 MLOAD DUP6 DUP2 GT PUSH2 0x9DB JUMPI DUP1 PUSH1 0x3 SWAP6 PUSH2 0x24C0 DUP8 SLOAD PUSH2 0x2F90 JUMP JUMPDEST DUP7 DUP2 GT PUSH2 0x29DB JUMPI JUMPDEST POP DUP5 SWAP1 DUP7 DUP4 GT PUSH1 0x1 EQ PUSH2 0x296B JUMPI PUSH1 0x0 SWAP3 PUSH2 0x2960 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 DUP8 SHL SHR NOT AND OR DUP5 SSTORE JUMPDEST MLOAD SWAP5 DUP6 MLOAD SWAP6 DUP7 MLOAD PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x1D7 JUMPI PUSH2 0x250A SWAP1 PUSH2 0x3782 JUMP JUMPDEST DUP3 DUP8 ADD MLOAD PUSH2 0x2517 DUP2 PUSH2 0x3326 JUMP JUMPDEST PUSH2 0x2520 DUP2 PUSH2 0x3326 JUMP JUMPDEST PUSH2 0xFF00 PUSH1 0x4 SLOAD SWAP2 PUSH1 0x8 SHL AND SWAP1 PUSH2 0xFF00 NOT AND OR PUSH1 0x4 SSTORE PUSH1 0xA0 PUSH1 0x40 DUP9 ADD MLOAD SWAP8 PUSH1 0x5 SWAP9 DUP10 SSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x6 SSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x7 SSTORE ADD MLOAD DUP6 DUP2 LT ISZERO PUSH2 0x1D7 JUMPI PUSH1 0x40 SWAP3 PUSH1 0xA0 SWAP2 PUSH1 0xFF DUP1 NOT PUSH1 0x8 SLOAD AND SWAP2 AND OR PUSH1 0x8 SSTORE PUSH2 0x25BE DUP6 DUP5 ADD MLOAD SWAP2 PUSH2 0x259C DUP2 DUP5 MLOAD AND PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0x9 SLOAD AND OR PUSH1 0x9 SSTORE JUMP JUMPDEST DUP7 DUP4 ADD MLOAD AND PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0xA SLOAD AND OR PUSH1 0xA SSTORE JUMP JUMPDEST DUP4 DUP2 ADD MLOAD PUSH1 0xB SSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0xC SSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0xD SSTORE ADD MLOAD PUSH1 0xE SSTORE ADD MLOAD DUP1 MLOAD DUP1 MLOAD SWAP1 DUP7 DUP3 GT PUSH2 0x9DB JUMPI DUP2 SWAP1 PUSH2 0x25F5 PUSH1 0xF SLOAD PUSH2 0x2F90 JUMP JUMPDEST DUP7 DUP2 GT PUSH2 0x2907 JUMPI JUMPDEST POP DUP5 SWAP1 DUP7 DUP4 GT PUSH1 0x1 EQ PUSH2 0x2894 JUMPI PUSH1 0x0 SWAP3 PUSH2 0x2889 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 DUP8 SHL SHR NOT AND OR PUSH1 0xF SSTORE JUMPDEST DUP2 DUP2 ADD MLOAD DUP1 MLOAD SWAP1 DUP7 DUP3 GT PUSH2 0x9DB JUMPI PUSH2 0x2640 PUSH1 0x10 SLOAD PUSH2 0x2F90 JUMP JUMPDEST DUP6 DUP2 GT PUSH2 0x283C JUMPI JUMPDEST POP DUP4 SWAP1 DUP6 DUP4 GT PUSH1 0x1 EQ PUSH2 0x27C6 JUMPI PUSH1 0x40 SWAP4 SWAP3 SWAP2 PUSH1 0x0 SWAP2 DUP4 PUSH2 0x27BB JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 DUP9 SHL SHR NOT AND OR PUSH1 0x10 SSTORE JUMPDEST ADD MLOAD SWAP5 DUP6 MLOAD SWAP5 DUP6 GT PUSH2 0x9DB JUMPI PUSH2 0x268F PUSH1 0x11 SLOAD PUSH2 0x2F90 JUMP JUMPDEST SWAP1 DUP4 DUP3 GT PUSH2 0x2772 JUMPI JUMPDEST POP POP DUP1 SWAP2 DUP5 GT PUSH1 0x1 EQ PUSH2 0x26FD JUMPI POP DUP3 SWAP4 PUSH1 0x0 SWAP4 PUSH2 0x26F2 JUMPI JUMPDEST POP POP DUP3 PUSH1 0x1 SHL SWAP3 PUSH1 0x0 NOT SWAP2 SHL SHR NOT AND OR PUSH1 0x11 SSTORE JUMPDEST PUSH32 0x88C430102EAB5DBC235CA367ECD5FFA63164BB311015524ECEBED009D4D4B5B6 PUSH1 0x40 MLOAD DUP1 PUSH2 0x1141 DUP2 PUSH2 0x379B JUMP JUMPDEST ADD MLOAD SWAP2 POP DUP4 DUP1 PUSH2 0x26B0 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x1F NOT DUP5 AND SWAP5 PUSH1 0x11 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x537A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP4 PUSH1 0x0 SWAP1 JUMPDEST DUP8 DUP3 LT PUSH2 0x275A JUMPI POP POP DUP5 PUSH1 0x1 SWAP7 LT PUSH2 0x2740 JUMPI JUMPDEST POP POP POP POP DUP2 SHL ADD PUSH1 0x11 SSTORE PUSH2 0x26C4 JUMP JUMPDEST ADD MLOAD SWAP1 PUSH1 0xF8 DUP5 PUSH1 0x0 NOT SWAP3 SHL AND SHR NOT AND SWAP1 SSTORE DUP3 DUP1 DUP1 DUP1 PUSH2 0x2731 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP6 SWAP8 DUP3 SWAP5 SWAP7 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP7 ADD SWAP4 ADD SWAP1 PUSH2 0x271E JUMP JUMPDEST PUSH1 0x11 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x537A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP5 DUP1 DUP9 ADD DUP3 SHR DUP4 ADD SWAP4 DUP6 DUP10 LT PUSH2 0x27B2 JUMPI JUMPDEST ADD SWAP1 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2698 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x279E JUMP JUMPDEST SWAP4 POP DUP3 SWAP4 PUSH2 0x2798 JUMP JUMPDEST ADD MLOAD SWAP1 POP DUP10 DUP1 PUSH2 0x2663 JUMP JUMPDEST SWAP1 PUSH1 0x1F NOT DUP4 AND SWAP2 PUSH1 0x10 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x539A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 PUSH1 0x0 JUMPDEST DUP8 DUP3 DUP3 LT PUSH2 0x2826 JUMPI POP POP SWAP2 PUSH1 0x1 SWAP4 SWAP2 DUP6 PUSH1 0x40 SWAP8 SWAP7 SWAP5 LT PUSH2 0x280E JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x10 SSTORE PUSH2 0x2678 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT DUP4 DUP11 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE DUP10 DUP1 DUP1 PUSH2 0x2800 JUMP JUMPDEST PUSH1 0x1 DUP6 SWAP7 DUP3 SWAP4 SWAP7 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD PUSH2 0x27E5 JUMP JUMPDEST PUSH1 0x10 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x539A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP7 DUP1 DUP6 ADD DUP12 SHR DUP3 ADD SWAP3 DUP8 DUP7 LT PUSH2 0x2880 JUMPI JUMPDEST ADD DUP11 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x2874 JUMPI POP PUSH2 0x2648 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2867 JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH2 0x2861 JUMP JUMPDEST ADD MLOAD SWAP1 POP DUP9 DUP1 PUSH2 0x2612 JUMP JUMPDEST PUSH1 0xF PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x53BA DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP4 POP PUSH1 0x1F NOT DUP6 AND SWAP1 JUMPDEST DUP8 DUP3 DUP3 LT PUSH2 0x28F1 JUMPI POP POP SWAP1 DUP5 PUSH1 0x1 SWAP6 SWAP5 SWAP4 SWAP3 LT PUSH2 0x28D9 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0xF SSTORE PUSH2 0x2627 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT DUP4 DUP10 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE DUP9 DUP1 DUP1 PUSH2 0x28CB JUMP JUMPDEST PUSH1 0x1 DUP6 SWAP7 DUP3 SWAP4 SWAP7 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD PUSH2 0x28B3 JUMP JUMPDEST SWAP1 SWAP2 POP PUSH1 0xF PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x53BA DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP7 DUP1 DUP6 ADD DUP12 SHR DUP3 ADD SWAP3 DUP8 DUP7 LT PUSH2 0x2957 JUMPI JUMPDEST SWAP1 DUP6 SWAP5 SWAP4 SWAP3 SWAP2 ADD DUP12 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x2948 JUMPI POP PUSH2 0x25FD JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE DUP5 SWAP4 POP PUSH1 0x1 ADD PUSH2 0x293B JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH2 0x292F JUMP JUMPDEST ADD MLOAD SWAP1 POP DUP9 DUP1 PUSH2 0x24DD JUMP JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x535A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP4 POP PUSH1 0x1F NOT DUP6 AND SWAP1 JUMPDEST DUP8 DUP3 DUP3 LT PUSH2 0x29C5 JUMPI POP POP SWAP1 DUP5 PUSH1 0x1 SWAP6 SWAP5 SWAP4 SWAP3 LT PUSH2 0x29AD JUMPI JUMPDEST POP POP POP DUP2 SHL ADD DUP5 SSTORE PUSH2 0x24F1 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT DUP4 DUP10 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE DUP9 DUP1 DUP1 PUSH2 0x29A0 JUMP JUMPDEST PUSH1 0x1 DUP6 SWAP7 DUP3 SWAP4 SWAP7 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD PUSH2 0x2988 JUMP JUMPDEST SWAP1 SWAP2 POP DUP7 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x535A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP7 DUP1 DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP8 DUP7 LT PUSH2 0x2A2C JUMPI JUMPDEST SWAP1 DUP6 SWAP5 SWAP4 SWAP3 SWAP2 ADD PUSH1 0x5 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x2A1D JUMPI POP PUSH2 0x24C8 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE DUP5 SWAP4 POP PUSH1 0x1 ADD PUSH2 0x2A10 JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH2 0x2A03 JUMP JUMPDEST ADD MLOAD SWAP1 POP DUP9 DUP1 PUSH2 0x2491 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x533A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP4 POP PUSH1 0x1F NOT DUP6 AND SWAP1 JUMPDEST DUP8 DUP3 DUP3 LT PUSH2 0x2A9E JUMPI POP POP SWAP1 DUP5 PUSH1 0x1 SWAP6 SWAP5 SWAP4 SWAP3 LT PUSH2 0x2A85 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x2 SSTORE PUSH2 0x24A7 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP9 DUP1 DUP1 PUSH2 0x2A77 JUMP JUMPDEST PUSH1 0x1 DUP6 SWAP7 DUP3 SWAP4 SWAP7 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD PUSH2 0x2A5F JUMP JUMPDEST SWAP1 SWAP2 POP PUSH1 0x2 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x533A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP7 DUP1 DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP8 DUP7 LT PUSH2 0x2B06 JUMPI JUMPDEST SWAP1 DUP6 SWAP5 SWAP4 SWAP3 SWAP2 ADD PUSH1 0x5 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x2AF7 JUMPI POP PUSH2 0x247C JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE DUP5 SWAP4 POP PUSH1 0x1 ADD PUSH2 0x2AEA JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH2 0x2ADD JUMP JUMPDEST PUSH2 0x2B18 CALLDATASIZE PUSH2 0x35C0 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x8 SWAP4 SWAP3 SWAP4 SLOAD AND PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x1D7 JUMPI PUSH1 0x3 DUP4 LT ISZERO PUSH2 0x1D7 JUMPI PUSH2 0x2B3E SWAP1 DUP4 EQ PUSH2 0x395F JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 DUP4 AND CALLER EQ DUP1 ISZERO PUSH2 0x2BD2 JUMPI JUMPDEST ISZERO PUSH2 0x2B9B JUMPI PUSH1 0x20 SWAP4 PUSH2 0x2B7B SWAP3 DUP5 PUSH1 0xA SLOAD AND CALLER EQ PUSH1 0x0 EQ PUSH2 0x2B95 JUMPI POP CALLVALUE SWAP2 JUMPDEST CALLER SWAP1 PUSH2 0x3D7E JUMP JUMPDEST SWAP1 PUSH1 0x9 SLOAD AND CALLER EQ PUSH1 0x0 EQ PUSH2 0x1CE JUMPI DUP1 PUSH1 0xC SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST SWAP2 PUSH2 0x2B74 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x2BA927A723AFA6A9A3A9A2A72222A9 PUSH1 0x89 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP DUP3 PUSH1 0xA SLOAD AND CALLER EQ PUSH2 0x2B56 JUMP JUMPDEST CALLVALUE PUSH2 0x150 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x150 JUMPI PUSH1 0x20 PUSH1 0x13 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x150 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x150 JUMPI PUSH1 0x20 PUSH2 0x1BB PUSH1 0xFF PUSH1 0x8 SLOAD AND PUSH2 0x2C3D PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x2C32 DUP4 PUSH1 0xA SLOAD AND DUP3 PUSH2 0x3AD9 JUMP JUMPDEST SWAP3 PUSH1 0x9 SLOAD AND SWAP1 PUSH2 0x3AD9 JUMP JUMPDEST SWAP1 PUSH2 0x3C81 JUMP JUMPDEST PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x150 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x150 JUMPI PUSH1 0x24 SWAP1 DUP2 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x44 CALLDATALOAD DUP2 DUP2 AND DUP2 SUB PUSH2 0x150 JUMPI PUSH1 0x64 CALLDATALOAD SWAP3 DUP3 DUP5 AND SWAP5 DUP6 DUP6 SUB PUSH2 0x150 JUMPI PUSH1 0x1 PUSH1 0x0 MSTORE PUSH1 0x20 SWAP6 PUSH1 0x19 DUP8 MSTORE PUSH2 0x2CA1 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x36B9 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x8 SLOAD AND PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x2F06 JUMPI PUSH2 0x2CBB SWAP1 DUP5 EQ PUSH2 0x395F JUMP JUMPDEST DUP3 PUSH2 0x2EFF JUMPI CALLVALUE SWAP5 JUMPDEST DUP9 DUP9 DUP3 PUSH1 0xA SLOAD AND SWAP3 PUSH2 0x2CE2 PUSH2 0x2CD8 DUP6 DUP10 PUSH2 0x3AD9 JUMP JUMPDEST PUSH1 0xB SLOAD GT ISZERO PUSH2 0x36F6 JUMP JUMPDEST PUSH1 0x14 SLOAD AND PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH4 0x122643F3 PUSH1 0xE2 SHL DUP3 MSTORE DUP8 PUSH1 0x4 DUP4 ADD MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xE30 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x2ECA JUMPI JUMPDEST POP ISZERO PUSH2 0x2E94 JUMPI SWAP1 DUP2 PUSH2 0x2D2C SWAP3 CALLER EQ SWAP2 DUP3 ISZERO SWAP3 PUSH2 0x2E89 JUMPI JUMPDEST POP POP PUSH2 0x3741 JUMP JUMPDEST PUSH1 0xC SLOAD SWAP1 DUP2 ISZERO PUSH2 0x2E01 JUMPI LT PUSH2 0x2DC8 JUMPI PUSH1 0x2 SWAP6 POP SWAP2 PUSH2 0x2D4F SWAP2 DUP5 PUSH2 0x2D6F SWAP6 SWAP5 PUSH2 0x3D7E JUMP JUMPDEST PUSH1 0xC SSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0x9 SLOAD AND OR PUSH1 0x9 SSTORE JUMP JUMPDEST PUSH1 0x19 PUSH1 0xFF NOT SWAP2 DUP4 DUP4 PUSH1 0x4 SLOAD AND OR PUSH1 0x4 SSTORE DUP4 PUSH1 0x0 MSTORE MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 DUP3 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x4 SLOAD AND OR PUSH1 0x4 SSTORE PUSH32 0x909D9218F6E1F243C7D9044544C7B03E2E7DB27D81653992E9018B8B72F4C20D PUSH1 0x40 MLOAD DUP1 PUSH2 0x1141 DUP2 PUSH2 0x379B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x12 DUP2 DUP9 ADD MSTORE PUSH18 0x1393D517D15393D551D217D4105653515395 PUSH1 0x72 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 POP CALLVALUE ISZERO PUSH2 0x2E55 JUMPI ISZERO PUSH2 0x2E22 JUMPI PUSH1 0x2 SWAP6 POP SWAP2 PUSH2 0x2D4F SWAP2 DUP5 PUSH2 0x2D6F SWAP6 SWAP5 PUSH2 0x3D7E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xC DUP2 DUP9 ADD MSTORE PUSH12 0x16915493D7D4105653515395 PUSH1 0xA2 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0xD DUP2 DUP10 ADD MSTORE PUSH13 0x5A45524F5F4D534756414C5545 PUSH1 0x98 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST EQ ISZERO SWAP1 POP DUP10 DUP1 PUSH2 0x2D25 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0xF DUP2 DUP12 ADD MSTORE PUSH15 0x1554D1549517D393D517D1561254D5 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 POP DUP9 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x2EF8 JUMPI JUMPDEST PUSH2 0x2EE1 DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x150 JUMPI PUSH2 0x2EF2 SWAP1 PUSH2 0x3734 JUMP JUMPDEST DUP11 PUSH2 0x2D0E JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x2ED7 JUMP JUMPDEST DUP2 SWAP5 PUSH2 0x2CC3 JUMP JUMPDEST DUP9 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0x150 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x150 JUMPI PUSH2 0x2F56 PUSH2 0x2F37 PUSH2 0x32D0 JUMP JUMPDEST PUSH2 0x8F6 PUSH2 0x2F42 PUSH2 0x333C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP4 PUSH1 0x40 DUP6 MSTORE PUSH1 0x40 DUP6 ADD SWAP1 PUSH2 0x3480 JUMP JUMPDEST SWAP1 DUP4 DUP3 SUB PUSH1 0x20 DUP6 ADD MSTORE PUSH2 0x34CC JUMP JUMPDEST CALLVALUE PUSH2 0x150 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x150 JUMPI DUP1 PUSH2 0x229F PUSH1 0x20 SWAP3 PUSH1 0xFF PUSH1 0x8 SLOAD AND JUMPDEST SWAP1 PUSH1 0x3 DUP3 LT ISZERO PUSH2 0x1D7 JUMPI MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x2FC0 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x2FAA JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x2F9F JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x0 SWAP3 SWAP2 PUSH2 0x2FDA DUP3 PUSH2 0x2F90 JUMP JUMPDEST DUP1 DUP3 MSTORE SWAP2 PUSH1 0x1 SWAP1 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x303F JUMPI POP PUSH1 0x1 EQ PUSH2 0x2FF8 JUMPI POP POP POP JUMP JUMPDEST SWAP2 SWAP3 SWAP4 POP PUSH1 0x2 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x533A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 PUSH1 0x0 SWAP3 JUMPDEST DUP5 DUP5 LT PUSH2 0x3027 JUMPI POP POP PUSH1 0x20 SWAP3 POP ADD ADD SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x20 DUP6 DUP6 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP4 ADD SWAP3 DUP2 ADD PUSH2 0x3015 JUMP JUMPDEST SWAP2 POP POP PUSH1 0x20 SWAP4 SWAP5 POP PUSH1 0xFF SWAP3 SWAP2 SWAP3 NOT AND DUP4 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x0 SWAP3 SWAP2 PUSH2 0x306C DUP3 PUSH2 0x2F90 JUMP JUMPDEST DUP1 DUP3 MSTORE SWAP2 PUSH1 0x1 SWAP1 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x303F JUMPI POP PUSH1 0x1 EQ PUSH2 0x308A JUMPI POP POP POP JUMP JUMPDEST SWAP2 SWAP3 SWAP4 POP PUSH1 0x3 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x535A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 PUSH1 0x0 SWAP3 JUMPDEST DUP5 DUP5 LT PUSH2 0x30B9 JUMPI POP POP PUSH1 0x20 SWAP3 POP ADD ADD SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x20 DUP6 DUP6 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP4 ADD SWAP3 DUP2 ADD PUSH2 0x30A7 JUMP JUMPDEST PUSH1 0xF SLOAD PUSH1 0x0 SWAP3 SWAP2 PUSH2 0x30E1 DUP3 PUSH2 0x2F90 JUMP JUMPDEST DUP1 DUP3 MSTORE SWAP2 PUSH1 0x1 SWAP1 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x303F JUMPI POP PUSH1 0x1 EQ PUSH2 0x30FF JUMPI POP POP POP JUMP JUMPDEST SWAP2 SWAP3 SWAP4 POP PUSH1 0xF PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x53BA DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 PUSH1 0x0 SWAP3 JUMPDEST DUP5 DUP5 LT PUSH2 0x312E JUMPI POP POP PUSH1 0x20 SWAP3 POP ADD ADD SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x20 DUP6 DUP6 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP4 ADD SWAP3 DUP2 ADD PUSH2 0x311C JUMP JUMPDEST PUSH1 0x10 SLOAD PUSH1 0x0 SWAP3 SWAP2 PUSH2 0x3156 DUP3 PUSH2 0x2F90 JUMP JUMPDEST DUP1 DUP3 MSTORE SWAP2 PUSH1 0x1 SWAP1 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x303F JUMPI POP PUSH1 0x1 EQ PUSH2 0x3174 JUMPI POP POP POP JUMP JUMPDEST SWAP2 SWAP3 SWAP4 POP PUSH1 0x10 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x539A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 PUSH1 0x0 SWAP3 JUMPDEST DUP5 DUP5 LT PUSH2 0x31A3 JUMPI POP POP PUSH1 0x20 SWAP3 POP ADD ADD SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x20 DUP6 DUP6 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP4 ADD SWAP3 DUP2 ADD PUSH2 0x3191 JUMP JUMPDEST PUSH1 0x11 SLOAD PUSH1 0x0 SWAP3 SWAP2 PUSH2 0x31CB DUP3 PUSH2 0x2F90 JUMP JUMPDEST DUP1 DUP3 MSTORE SWAP2 PUSH1 0x1 SWAP1 DUP2 DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x303F JUMPI POP PUSH1 0x1 EQ PUSH2 0x31E9 JUMPI POP POP POP JUMP JUMPDEST SWAP2 SWAP3 SWAP4 POP PUSH1 0x11 PUSH1 0x0 MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x537A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 PUSH1 0x0 SWAP3 JUMPDEST DUP5 DUP5 LT PUSH2 0x3218 JUMPI POP POP PUSH1 0x20 SWAP3 POP ADD ADD SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x20 DUP6 DUP6 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP4 ADD SWAP3 DUP2 ADD PUSH2 0x3206 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x9DB JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0xC0 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x9DB JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x9DB JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x9DB JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x9DB JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x9DB JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x32DD DUP3 PUSH2 0x3230 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x40 MLOAD DUP3 SWAP1 PUSH2 0x3304 DUP2 PUSH2 0x32FD DUP2 PUSH2 0x2FCA JUMP JUMPDEST SUB DUP3 PUSH2 0x32AF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP1 MLOAD SWAP2 PUSH2 0x3322 DUP4 PUSH2 0x331B DUP2 PUSH2 0x305C JUMP JUMPDEST SUB DUP5 PUSH2 0x32AF JUMP JUMPDEST ADD MSTORE JUMP JUMPDEST PUSH1 0x5 GT ISZERO PUSH2 0x1D7 JUMPI JUMP JUMPDEST PUSH1 0x3 DUP3 LT ISZERO PUSH2 0x1D7 JUMPI MSTORE JUMP JUMPDEST PUSH1 0x40 SWAP1 DUP2 MLOAD PUSH2 0x334A DUP2 PUSH2 0x3230 JUMP JUMPDEST DUP1 SWAP3 DUP1 MLOAD PUSH2 0x3357 DUP2 PUSH2 0x324B JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0xFF DUP2 AND SWAP1 PUSH1 0x8 DUP3 LT ISZERO PUSH2 0x1D7 JUMPI PUSH1 0xFF SWAP2 DUP4 MSTORE PUSH1 0x8 SHR AND PUSH2 0x337A DUP2 PUSH2 0x3326 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x5 SLOAD DUP3 DUP3 ADD MSTORE PUSH1 0x6 SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x7 SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x33A8 PUSH1 0xFF PUSH1 0x8 SLOAD AND PUSH1 0xA0 DUP4 ADD PUSH2 0x3330 JUMP JUMPDEST DUP3 MSTORE DUP1 MLOAD PUSH2 0x33B5 DUP2 PUSH2 0x324B JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 PUSH1 0x9 SLOAD AND DUP3 MSTORE PUSH1 0xA SLOAD AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xB SLOAD DUP3 DUP3 ADD MSTORE PUSH1 0xC SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0xD SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xE SLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x20 DUP4 ADD MSTORE DUP1 MLOAD SWAP2 PUSH2 0x33FC DUP4 PUSH2 0x3230 JUMP JUMPDEST DUP2 MLOAD PUSH2 0x340B DUP2 PUSH2 0x32FD DUP2 PUSH2 0x30D1 JUMP JUMPDEST DUP4 MSTORE DUP2 MLOAD PUSH2 0x341C DUP2 PUSH2 0x32FD DUP2 PUSH2 0x3146 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MSTORE DUP2 MLOAD PUSH2 0x3430 DUP2 PUSH2 0x32FD DUP2 PUSH2 0x31BB JUMP JUMPDEST DUP3 DUP5 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x344B JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x343B JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP2 PUSH2 0x3474 DUP2 MLOAD DUP1 SWAP3 DUP2 DUP6 MSTORE DUP6 DUP1 DUP7 ADD SWAP2 ADD PUSH2 0x3438 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0x34BC SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP3 MLOAD AND DUP2 MSTORE PUSH1 0x40 PUSH2 0x34AB PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x60 PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x60 DUP5 ADD SWAP1 PUSH2 0x345B JUMP JUMPDEST SWAP3 ADD MLOAD SWAP1 PUSH1 0x40 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x345B JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x8 DUP3 LT ISZERO PUSH2 0x1D7 JUMPI MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x40 PUSH2 0x34BC SWAP3 PUSH2 0x3520 PUSH1 0xA0 DUP3 MLOAD PUSH2 0x34E5 DUP7 DUP3 MLOAD PUSH2 0x34BF JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH2 0x34F3 DUP2 PUSH2 0x3326 JUMP JUMPDEST PUSH1 0x20 DUP8 ADD MSTORE DUP5 DUP2 ADD MLOAD DUP6 DUP8 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x60 DUP8 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x80 DUP8 ADD MSTORE ADD MLOAD PUSH1 0xA0 DUP6 ADD SWAP1 PUSH2 0x2F83 JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 DUP1 DUP4 SHL SUB DUP1 DUP3 MLOAD AND PUSH1 0xC0 DUP8 ADD MSTORE PUSH1 0x20 DUP3 ADD MLOAD AND PUSH1 0xE0 DUP7 ADD MSTORE DUP4 DUP2 ADD MLOAD PUSH2 0x100 DUP7 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH2 0x120 DUP7 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH2 0x140 DUP7 ADD MSTORE ADD MLOAD PUSH2 0x160 DUP5 ADD MSTORE ADD MLOAD SWAP1 PUSH2 0x358C PUSH2 0x1A0 DUP1 PUSH2 0x180 DUP5 ADD MSTORE PUSH1 0x60 DUP5 MLOAD SWAP2 DUP5 ADD MSTORE PUSH2 0x200 DUP4 ADD SWAP1 PUSH2 0x345B JUMP JUMPDEST SWAP1 PUSH2 0x1E0 PUSH1 0x40 PUSH2 0x35B0 PUSH1 0x20 DUP7 ADD MLOAD SWAP5 PUSH2 0x19F NOT SWAP6 DUP7 DUP7 DUP4 SUB ADD PUSH2 0x1C0 DUP8 ADD MSTORE PUSH2 0x345B JUMP JUMPDEST SWAP5 ADD MLOAD SWAP3 DUP3 DUP6 SUB ADD SWAP2 ADD MSTORE PUSH2 0x345B JUMP JUMPDEST PUSH1 0x60 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0x150 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x150 JUMPI SWAP1 PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x150 JUMPI SWAP1 PUSH1 0x44 CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0x150 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x150 JUMPI SWAP1 PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x150 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x9DB JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x150 JUMPI DUP1 CALLDATALOAD SWAP1 PUSH2 0x3654 DUP3 PUSH2 0x3622 JUMP JUMPDEST SWAP3 PUSH2 0x3662 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x32AF JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 DUP4 DUP4 ADD ADD GT PUSH2 0x150 JUMPI DUP2 PUSH1 0x0 SWAP3 PUSH1 0x20 DUP1 SWAP4 ADD DUP4 DUP7 ADD CALLDATACOPY DUP4 ADD ADD MSTORE SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x34BC SWAP2 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 PUSH2 0x36A4 DUP4 MLOAD PUSH1 0x40 DUP4 DUP6 ADD MSTORE PUSH1 0x60 DUP5 ADD SWAP1 PUSH2 0x3480 JUMP JUMPDEST SWAP3 ADD MLOAD SWAP1 PUSH1 0x40 PUSH1 0x1F NOT DUP3 DUP6 SUB ADD SWAP2 ADD MSTORE PUSH2 0x34CC JUMP JUMPDEST ISZERO PUSH2 0x36C0 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x494E56414C49445F535441545553 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x36FD JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x14D51052D157D25390D3D4949150D5 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST MLOAD SWAP1 DUP2 ISZERO ISZERO DUP3 SUB PUSH2 0x150 JUMPI JUMP JUMPDEST ISZERO PUSH2 0x3748 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x2CA7AAAFA0A922AFAA2422AFA9A2A62622A9 PUSH1 0x71 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x1D7 JUMPI PUSH1 0xFF DUP1 NOT PUSH1 0x4 SLOAD AND SWAP2 AND OR PUSH1 0x4 SSTORE JUMP JUMPDEST PUSH2 0x34BC SWAP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 PUSH1 0x1 SLOAD AND PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x60 PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x37E2 PUSH2 0x37D1 PUSH1 0xC0 DUP5 ADD PUSH2 0x2FCA JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x5F NOT ADD PUSH1 0xA0 DUP6 ADD MSTORE PUSH2 0x305C JUMP JUMPDEST SWAP2 PUSH1 0x40 PUSH1 0x1F NOT DUP3 DUP6 SUB ADD SWAP2 ADD MSTORE PUSH1 0xFF PUSH1 0x4 SLOAD PUSH2 0x3800 DUP5 DUP4 DUP4 AND PUSH2 0x34BF JUMP JUMPDEST PUSH1 0x8 SHR AND PUSH2 0x380D DUP2 PUSH2 0x3326 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x5 SLOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x6 SLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x7 SLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x383D PUSH1 0xFF PUSH1 0x8 SLOAD AND PUSH1 0xA0 DUP5 ADD SWAP1 PUSH2 0x2F83 JUMP JUMPDEST DUP1 PUSH1 0x9 SLOAD AND PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xA SLOAD AND PUSH1 0xE0 DUP3 ADD MSTORE PUSH1 0xB SLOAD PUSH2 0x100 DUP3 ADD MSTORE PUSH1 0xC SLOAD PUSH2 0x120 DUP3 ADD MSTORE PUSH1 0xD SLOAD PUSH2 0x140 DUP3 ADD MSTORE PUSH1 0xE SLOAD PUSH2 0x160 DUP3 ADD MSTORE PUSH1 0x60 PUSH2 0x1A0 DUP1 PUSH2 0x180 DUP5 ADD MSTORE DUP3 ADD MSTORE PUSH2 0x3890 PUSH2 0x200 DUP3 ADD PUSH2 0x30D1 JUMP JUMPDEST SWAP1 PUSH2 0x1E0 PUSH2 0x38AC PUSH2 0x19F NOT SWAP4 DUP5 DUP5 DUP3 SUB ADD PUSH2 0x1C0 DUP6 ADD MSTORE PUSH2 0x3146 JUMP JUMPDEST SWAP3 DUP3 DUP5 SUB ADD SWAP2 ADD MSTORE PUSH2 0x31BB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x38C6 DUP3 PUSH2 0x324B JUMP JUMPDEST DUP2 PUSH1 0xA0 PUSH1 0x0 SWAP2 DUP3 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE DUP3 PUSH1 0x80 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH1 0x40 SWAP1 DUP2 MLOAD SWAP2 PUSH2 0x38FA DUP4 PUSH2 0x3266 JUMP JUMPDEST PUSH1 0x20 DUP4 DUP3 MLOAD PUSH2 0x3908 DUP2 PUSH2 0x3230 JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE PUSH1 0x60 DUP4 DUP3 ADD MSTORE PUSH1 0x60 DUP5 DUP3 ADD MSTORE DUP2 MSTORE DUP3 MLOAD SWAP3 PUSH2 0x3926 DUP5 PUSH2 0x3230 JUMP JUMPDEST PUSH2 0x392E PUSH2 0x38B9 JUMP JUMPDEST DUP5 MSTORE PUSH2 0x3938 PUSH2 0x38B9 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE DUP1 MLOAD SWAP1 PUSH2 0x3948 DUP3 PUSH2 0x3230 JUMP JUMPDEST PUSH1 0x60 DUP3 MSTORE PUSH1 0x60 DUP5 DUP4 ADD MSTORE PUSH1 0x60 DUP2 DUP4 ADD MSTORE DUP5 ADD MSTORE ADD MSTORE JUMP JUMPDEST ISZERO PUSH2 0x3966 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x2BA927A723AFAA27A5A2A7 PUSH1 0xA9 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x150 JUMPI JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x150 JUMPI DUP1 MLOAD PUSH2 0x39C3 DUP2 PUSH2 0x3622 JUMP JUMPDEST SWAP3 PUSH2 0x39D1 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x32AF JUMP JUMPDEST DUP2 DUP5 MSTORE PUSH1 0x20 DUP3 DUP5 ADD ADD GT PUSH2 0x150 JUMPI PUSH2 0x34BC SWAP2 PUSH1 0x20 DUP1 DUP6 ADD SWAP2 ADD PUSH2 0x3438 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x39FC DUP3 PUSH2 0x3266 JUMP JUMPDEST PUSH1 0x4 DUP3 MSTORE PUSH4 0x3078303 PUSH1 0xE4 SHL PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST PUSH1 0xFF PUSH1 0x8 SLOAD AND PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x1D7 JUMPI PUSH1 0x1 DUP2 SUB PUSH2 0x3A95 JUMPI POP PUSH1 0x15 SLOAD PUSH1 0x40 MLOAD PUSH4 0xF77800E5 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x4 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xE30 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x3A5F JUMPI POP SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 RETURNDATASIZE DUP3 GT PUSH2 0x3A8D JUMPI JUMPDEST DUP2 PUSH2 0x3A78 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3A8A JUMPI POP PUSH2 0x34BC SWAP1 PUSH2 0x3999 JUMP JUMPDEST DUP1 REVERT JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x3A6B JUMP JUMPDEST PUSH1 0x2 SUB PUSH2 0x3AD4 JUMPI PUSH1 0x15 SLOAD PUSH1 0x40 MLOAD PUSH4 0x5F117AA3 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x4 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xE30 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x3A5F JUMPI POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x1D7 JUMPI PUSH1 0x0 MSTORE PUSH1 0x1A PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x3B0E JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH10 0x2727AA2FA9A2A62622A9 PUSH1 0xB1 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x150 JUMPI JUMP JUMPDEST ISZERO PUSH2 0x3B5B JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x24A72B20A624A22FA0AA2A22A9AA20AA24A7A7 PUSH1 0x69 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0x3BA9 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x3BA9 JUMPI JUMP JUMPDEST SWAP1 SWAP5 SWAP4 SWAP3 PUSH1 0x60 SWAP3 PUSH2 0x3BE1 DUP4 PUSH1 0x80 DUP2 ADD SWAP9 PUSH2 0x2F83 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x3 DUP4 LT ISZERO PUSH2 0x1D7 JUMPI PUSH1 0x40 SWAP3 PUSH2 0x3C7B PUSH32 0xFE2CAF3897EC3E02A1D458D232D7C62C17809D25DBFE65864CE842162D6C217C SWAP4 PUSH1 0x0 SWAP1 DUP4 DUP3 MSTORE PUSH1 0x1A PUSH1 0x20 MSTORE DUP7 DUP3 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 DUP2 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH2 0x3C56 DUP3 DUP10 DUP6 KECCAK256 SLOAD PUSH2 0x3C81 JUMP JUMPDEST SWAP8 DUP4 DUP10 SWAP5 SWAP3 DUP8 DUP7 SWAP5 MSTORE PUSH1 0x1A PUSH1 0x20 MSTORE DUP3 DUP3 KECCAK256 SWAP1 DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SSTORE PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP5 DUP6 PUSH2 0x3BCC JUMP JUMPDEST SUB SWAP1 LOG1 SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x3BA9 JUMPI JUMP JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x1D7 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP4 DUP5 DUP3 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 DUP2 DUP5 MSTORE PUSH1 0x20 MSTORE DUP6 DUP4 KECCAK256 SLOAD DUP3 DUP2 LT PUSH2 0x3D19 JUMPI SWAP2 DUP7 PUSH32 0x9060F8FFC7ACD8270ABF2337023E6377669CA44D5B2A23F3513A29380940F357 SWAP7 SWAP6 SWAP5 SWAP3 PUSH2 0x3CF6 DUP4 PUSH2 0x3C7B SWAP7 PUSH2 0x3BBF JUMP JUMPDEST SWAP9 DUP5 DUP11 SWAP6 SWAP3 DUP9 DUP8 SWAP5 MSTORE PUSH1 0x1A PUSH1 0x20 MSTORE DUP3 DUP3 KECCAK256 SWAP1 DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SSTORE MLOAD SWAP5 DUP6 SWAP5 DUP6 PUSH2 0x3BCC JUMP JUMPDEST DUP7 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x125394D551919250D251539517D1115413D4D255 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 ADD SWAP3 SWAP2 PUSH2 0x3D7C SWAP2 PUSH1 0x40 ADD SWAP1 PUSH2 0x2F83 JUMP JUMPDEST JUMP JUMPDEST SWAP3 SWAP1 PUSH1 0x4 PUSH1 0xFF DUP2 SLOAD AND PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x3FD6 JUMPI DUP1 PUSH1 0x2 PUSH2 0x3DA6 SWAP3 EQ ISZERO SWAP1 DUP2 PUSH2 0x4040 JUMPI JUMPDEST POP PUSH2 0x36B9 JUMP JUMPDEST DUP3 ISZERO PUSH2 0x400B JUMPI PUSH1 0x3 DUP6 LT ISZERO PUSH2 0x3FF6 JUMPI DUP5 ISZERO DUP1 ISZERO PUSH2 0x3DFE JUMPI JUMPDEST POP POP PUSH32 0x68FFD6AD89C76C56B0B5206AE0C1A14CBFFB37023D4E80F635FF7397C56B116B SWAP3 POP PUSH2 0x3C7B PUSH2 0x3DF1 DUP4 DUP4 DUP8 PUSH2 0x3BF8 JUMP JUMPDEST SWAP5 PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP4 DUP5 PUSH2 0x3D54 JUMP JUMPDEST PUSH1 0x1 DUP7 EQ PUSH1 0x0 DUP2 ISZERO PUSH2 0x3FEB JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x3FC6 JUMPI JUMPDEST POP PUSH2 0x3E1D SWAP2 POP PUSH2 0x395F JUMP JUMPDEST PUSH2 0x3E26 DUP6 PUSH2 0x5123 JUMP JUMPDEST SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 PUSH2 0x3E3A DUP9 PUSH2 0x5123 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP8 DUP3 ADD SWAP1 DUP2 MSTORE ADDRESS PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP11 SWAP5 SWAP2 SWAP4 DUP12 SWAP4 DUP6 SWAP4 SWAP3 DUP5 SWAP1 SUB ADD SWAP2 DUP4 SWAP2 AND GAS STATICCALL DUP1 ISZERO PUSH2 0xE30 JUMPI DUP8 SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x3F96 JUMPI JUMPDEST POP LT PUSH2 0x3F59 JUMPI DUP3 SWAP2 PUSH1 0x0 DUP9 SWAP5 PUSH1 0x64 SWAP4 PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP7 DUP8 SWAP6 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP8 MSTORE AND SWAP1 DUP6 ADD MSTORE ADDRESS PUSH1 0x24 DUP6 ADD MSTORE DUP10 PUSH1 0x44 DUP6 ADD MSTORE AND GAS CALL SWAP1 DUP2 ISZERO PUSH2 0xE30 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x3EFD JUMPI JUMPDEST POP PUSH32 0x68FFD6AD89C76C56B0B5206AE0C1A14CBFFB37023D4E80F635FF7397C56B116B SWAP4 POP PUSH2 0x3EF6 SWAP1 PUSH2 0x50E5 JUMP JUMPDEST CODESIZE DUP1 PUSH2 0x3DBE JUMP JUMPDEST SWAP2 SWAP3 SWAP4 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x3F52 JUMPI JUMPDEST PUSH2 0x3F14 DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3A8A JUMPI POP SWAP1 PUSH2 0x3EF6 PUSH2 0x3F4C PUSH32 0x68FFD6AD89C76C56B0B5206AE0C1A14CBFFB37023D4E80F635FF7397C56B116B SWAP5 SWAP4 PUSH2 0x3734 JUMP JUMPDEST SWAP1 PUSH2 0x3EC9 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x3F0A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE DUP1 DUP6 ADD DUP9 SWAP1 MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x494E53554646494349454E545F414C4C4F57414E4345 PUSH1 0x50 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP2 POP DUP9 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x3FBF JUMPI JUMPDEST PUSH2 0x3FAD DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3A8A JUMPI POP DUP7 SWAP1 MLOAD CODESIZE PUSH2 0x3E85 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x3FA3 JUMP JUMPDEST SWAP1 POP PUSH2 0x3FD6 JUMPI PUSH2 0x3E1D SWAP1 CODESIZE PUSH2 0x3E12 JUMP JUMPDEST PUSH1 0x21 DUP3 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x2 DUP9 EQ SWAP2 POP PUSH2 0x3E0B JUMP JUMPDEST PUSH1 0x21 SWAP1 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x20 PUSH1 0x40 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x14D51052D157D491545552549151 PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x3 SWAP2 POP EQ ISZERO CODESIZE PUSH2 0x3DA0 JUMP JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x4077 JUMPI RETURNDATASIZE SWAP1 PUSH2 0x405D DUP3 PUSH2 0x3622 JUMP JUMPDEST SWAP2 PUSH2 0x406B PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x32AF JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x4083 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x10D0531317D19052531151 PUSH1 0xAA SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP2 SWAP1 PUSH2 0x40C3 DUP3 DUP3 DUP6 PUSH2 0x3C8E JUMP JUMPDEST PUSH1 0x15 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x2EE4B68B PUSH1 0xE1 SHL DUP2 MSTORE SWAP3 SWAP6 SWAP1 SWAP3 SWAP2 PUSH1 0x20 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 PUSH1 0x4 SWAP2 SWAP1 DUP4 AND DUP5 DUP7 DUP5 DUP2 DUP5 GAS STATICCALL SWAP6 DUP7 ISZERO PUSH2 0x4358 JUMPI PUSH1 0x0 SWAP7 PUSH2 0x4363 JUMPI JUMPDEST POP DUP5 DUP4 SWAP2 DUP9 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH4 0x18DA0011 PUSH1 0xE0 SHL DUP3 MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x4358 JUMPI SWAP1 DUP5 SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x4321 JUMPI JUMPDEST POP AND SWAP5 PUSH2 0x42C5 JUMPI PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x3FD6 JUMPI DUP1 PUSH2 0x418B JUMPI POP POP POP POP DUP4 SWAP3 SWAP2 PUSH2 0x416B PUSH1 0x0 DUP1 DUP1 DUP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x531A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP10 PUSH2 0x3C7B SWAP8 GAS CALL PUSH2 0x1645 PUSH2 0x404C JUMP JUMPDEST MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x40 DUP3 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP4 SWAP5 DUP9 SWAP3 PUSH1 0x0 SWAP6 SWAP5 SWAP6 PUSH1 0x1 DUP3 EQ SWAP1 DUP2 ISZERO PUSH2 0x42BA JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x4289 JUMPI JUMPDEST POP SWAP6 PUSH2 0x41C1 PUSH1 0x0 SWAP3 PUSH2 0x41BC PUSH2 0x41F2 SWAP10 PUSH2 0x395F JUMP JUMPDEST PUSH2 0x5123 JUMP JUMPDEST AND SWAP3 DUP9 MLOAD SWAP7 DUP8 SWAP6 DUP7 SWAP5 DUP6 SWAP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP6 MSTORE DUP5 ADD PUSH1 0x20 SWAP1 SWAP4 SWAP3 SWAP2 SWAP4 PUSH1 0x40 DUP2 ADD SWAP5 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE ADD MSTORE JUMP JUMPDEST SUB SWAP3 GAS CALL SWAP2 DUP3 ISZERO PUSH2 0x427E JUMPI PUSH1 0x0 SWAP3 PUSH2 0x422A JUMPI JUMPDEST POP POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x531A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP4 SWAP3 SWAP2 PUSH2 0x4225 PUSH2 0x3C7B SWAP3 PUSH2 0x50E5 JUMP JUMPDEST PUSH2 0x416B JUMP JUMPDEST DUP2 DUP2 SWAP4 SWAP3 SWAP4 RETURNDATASIZE DUP4 GT PUSH2 0x4277 JUMPI JUMPDEST PUSH2 0x4241 DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3A8A JUMPI POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x531A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP4 SWAP3 SWAP2 PUSH2 0x4225 PUSH2 0x426B PUSH2 0x3C7B SWAP4 PUSH2 0x3734 JUMP JUMPDEST SWAP3 POP DUP2 SWAP4 SWAP5 SWAP6 POP PUSH2 0x4205 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x4237 JUMP JUMPDEST DUP4 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP3 SWAP6 POP POP SWAP2 SWAP5 SWAP3 POP PUSH2 0x42A5 JUMPI SWAP1 SWAP3 DUP5 SWAP3 DUP9 SWAP3 PUSH1 0x0 PUSH2 0x41C1 PUSH2 0x41A8 JUMP JUMPDEST PUSH1 0x21 DUP5 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x2 DUP4 EQ SWAP2 POP PUSH2 0x41A1 JUMP JUMPDEST SWAP4 POP SWAP2 POP POP PUSH1 0x3 DUP3 LT ISZERO PUSH2 0x3FF6 JUMPI POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x531A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP4 SWAP3 SWAP2 PUSH2 0x3C7B SWAP2 PUSH1 0x2 DUP2 SUB PUSH2 0x4302 JUMPI POP PUSH2 0x42FC DUP5 PUSH2 0x43B8 JUMP JUMPDEST POP PUSH2 0x416B JUMP JUMPDEST PUSH1 0x1 DUP2 SUB PUSH2 0x4314 JUMPI POP PUSH2 0x42FC DUP5 PUSH2 0x4E6A JUMP JUMPDEST PUSH2 0x4225 JUMPI PUSH2 0x42FC DUP5 PUSH2 0x484F JUMP JUMPDEST SWAP2 POP DUP6 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x4351 JUMPI JUMPDEST PUSH2 0x4338 DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3A8A JUMPI POP PUSH2 0x434B DUP5 SWAP2 PUSH2 0x3999 JUMP JUMPDEST CODESIZE PUSH2 0x4129 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x432E JUMP JUMPDEST DUP8 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 SWAP6 DUP6 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x4396 JUMPI JUMPDEST PUSH2 0x437A DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3A8A JUMPI POP DUP5 PUSH2 0x438E DUP5 SWAP3 PUSH2 0x3734 JUMP JUMPDEST SWAP7 SWAP2 POP PUSH2 0x4101 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x4370 JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x150 JUMPI MLOAD PUSH3 0xFFFFFF DUP2 AND DUP2 SUB PUSH2 0x150 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x15 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x5F117AA3 PUSH1 0xE1 SHL DUP1 DUP3 MSTORE SWAP1 SWAP5 SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 PUSH1 0x20 SWAP4 SWAP3 PUSH1 0x4 SWAP2 DUP6 SWAP1 DUP10 SWAP1 DUP5 SWAP1 DUP3 SWAP1 DUP11 AND GAS STATICCALL SWAP8 DUP9 ISZERO PUSH2 0x4844 JUMPI PUSH1 0x0 SWAP9 PUSH2 0x480D JUMPI JUMPDEST POP PUSH1 0x16 SLOAD DUP5 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP1 DUP3 MSTORE SWAP2 DUP9 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP7 SWAP1 MSTORE SWAP2 SWAP10 SWAP1 SWAP2 DUP8 SWAP2 DUP4 SWAP2 DUP3 SWAP1 DUP12 SWAP1 DUP3 SWAP1 PUSH1 0x40 ADD SUB SWAP3 AND GAS SWAP1 PUSH1 0x0 SWAP2 CALL DUP1 ISZERO PUSH2 0x465E JUMPI PUSH2 0x47D9 JUMPI JUMPDEST POP DUP6 PUSH1 0x15 SLOAD AND SWAP3 DUP5 MLOAD SWAP2 DUP3 MSTORE DUP6 DUP3 DUP5 DUP2 DUP8 GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x465E JUMPI PUSH1 0x0 SWAP3 PUSH2 0x47A2 JUMPI JUMPDEST POP DUP5 MLOAD PUSH4 0x25ABD85F PUSH1 0xE1 SHL DUP1 DUP3 MSTORE SWAP3 SWAP1 DUP8 DUP2 DUP7 DUP2 DUP10 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x4358 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x476D JUMPI JUMPDEST POP DUP7 MLOAD SWAP2 DUP9 DUP4 PUSH1 0x24 DUP2 PUSH4 0x3488E959 PUSH1 0xE2 SHL SWAP11 DUP12 DUP3 MSTORE PUSH1 0x0 DUP12 DUP4 ADD MSTORE GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x4715 JUMPI SWAP1 PUSH2 0x44C9 SWAP5 SWAP4 SWAP3 SWAP2 PUSH1 0x0 SWAP4 PUSH2 0x4755 JUMPI JUMPDEST POP PUSH2 0x4C59 JUMP JUMPDEST SWAP1 DUP7 PUSH1 0x15 SLOAD AND SWAP1 DUP6 MLOAD SWAP1 DUP2 MSTORE DUP7 DUP2 DUP6 DUP2 DUP6 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x46A2 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x4720 JUMPI JUMPDEST POP DUP6 MLOAD SWAP1 PUSH4 0xF77800E5 PUSH1 0xE0 SHL SWAP6 DUP7 DUP4 MSTORE DUP9 DUP4 DUP8 DUP2 DUP8 GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x4715 JUMPI SWAP1 DUP10 SWAP2 PUSH1 0x0 SWAP5 PUSH2 0x46DC JUMPI JUMPDEST POP PUSH1 0x24 DUP10 MLOAD DUP1 SWAP7 DUP2 SWAP4 DUP3 MSTORE PUSH1 0x1 DUP11 DUP4 ADD MSTORE GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x4358 JUMPI SWAP1 PUSH2 0x4543 SWAP5 SWAP4 SWAP3 SWAP2 PUSH1 0x0 SWAP4 PUSH2 0x46AD JUMPI POP PUSH2 0x4C59 JUMP JUMPDEST SWAP5 DUP1 PUSH1 0x15 SLOAD AND SWAP8 DUP5 MLOAD SWAP4 DUP1 DUP6 MSTORE DUP7 DUP6 DUP6 DUP2 DUP14 GAS STATICCALL SWAP5 DUP6 ISZERO PUSH2 0x46A2 JUMPI SWAP1 DUP8 SWAP2 PUSH1 0x0 SWAP7 PUSH2 0x4669 JUMPI JUMPDEST POP DUP5 DUP8 MLOAD DUP1 SWAP13 DUP2 SWAP4 DUP3 MSTORE GAS STATICCALL SWAP9 DUP10 ISZERO PUSH2 0x465E JUMPI PUSH1 0x0 SWAP10 PUSH2 0x4617 JUMPI JUMPDEST POP DUP5 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP9 SWAP1 SWAP9 AND SWAP2 DUP9 ADD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP7 SWAP1 MSTORE SWAP6 SWAP7 SWAP6 DUP5 SWAP3 DUP8 SWAP3 DUP4 SWAP1 SUB PUSH1 0x40 ADD SWAP2 DUP4 SWAP2 PUSH1 0x0 SWAP2 AND GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x460D JUMPI POP PUSH2 0x45D7 JUMPI JUMPDEST POP PUSH2 0x45D1 SWAP2 POP PUSH2 0x4E6A JUMP JUMPDEST POP PUSH1 0x1 SWAP1 JUMP JUMPDEST DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x4606 JUMPI JUMPDEST PUSH2 0x45EB DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x150 JUMPI PUSH2 0x45FF PUSH2 0x45D1 SWAP3 PUSH2 0x3734 JUMP JUMPDEST POP CODESIZE PUSH2 0x45C6 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x45E1 JUMP JUMPDEST MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 SWAP9 DUP7 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x4657 JUMPI JUMPDEST PUSH2 0x462E DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3A8A JUMPI POP SWAP2 PUSH1 0x0 DUP7 SWAP5 SWAP3 PUSH2 0x4649 DUP10 SWAP11 SWAP12 SWAP6 PUSH2 0x3999 JUMP JUMPDEST SWAP11 SWAP10 POP SWAP3 SWAP5 POP SWAP3 SWAP1 SWAP3 PUSH2 0x4584 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x4624 JUMP JUMPDEST DUP6 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP2 DUP3 DUP2 SWAP8 SWAP3 SWAP8 RETURNDATASIZE DUP4 GT PUSH2 0x469B JUMPI JUMPDEST PUSH2 0x4681 DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3A8A JUMPI POP PUSH2 0x4694 DUP8 SWAP2 PUSH2 0x3999 JUMP JUMPDEST SWAP5 CODESIZE PUSH2 0x4569 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x4677 JUMP JUMPDEST DUP7 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x46CE SWAP2 SWAP4 POP DUP10 RETURNDATASIZE DUP12 GT PUSH2 0x46D5 JUMPI JUMPDEST PUSH2 0x46C6 DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x439D JUMP JUMPDEST SWAP2 CODESIZE PUSH2 0x44C3 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x46BC JUMP JUMPDEST SWAP2 DUP3 DUP2 SWAP6 SWAP3 SWAP6 RETURNDATASIZE DUP4 GT PUSH2 0x470E JUMPI JUMPDEST PUSH2 0x46F4 DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3A8A JUMPI POP PUSH2 0x4707 DUP10 SWAP2 PUSH2 0x3999 JUMP JUMPDEST SWAP3 CODESIZE PUSH2 0x4514 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x46EA JUMP JUMPDEST DUP9 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 DUP8 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x474E JUMPI JUMPDEST PUSH2 0x4736 DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3A8A JUMPI POP PUSH2 0x4748 SWAP1 PUSH2 0x3999 JUMP JUMPDEST CODESIZE PUSH2 0x44EB JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x472C JUMP JUMPDEST PUSH2 0x46CE SWAP2 SWAP4 POP DUP11 RETURNDATASIZE DUP13 GT PUSH2 0x46D5 JUMPI PUSH2 0x46C6 DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST SWAP1 DUP9 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x479B JUMPI JUMPDEST PUSH2 0x4783 DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3A8A JUMPI POP PUSH2 0x4795 SWAP1 PUSH2 0x3999 JUMP JUMPDEST CODESIZE PUSH2 0x448F JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x4779 JUMP JUMPDEST SWAP1 SWAP2 DUP7 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x47D2 JUMPI JUMPDEST PUSH2 0x47B9 DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3A8A JUMPI POP PUSH2 0x47CB SWAP1 PUSH2 0x3999 JUMP JUMPDEST SWAP1 CODESIZE PUSH2 0x4469 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x47AF JUMP JUMPDEST DUP6 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x4806 JUMPI JUMPDEST PUSH2 0x47EE DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x150 JUMPI PUSH2 0x47FF SWAP1 PUSH2 0x3734 JUMP JUMPDEST POP CODESIZE PUSH2 0x4447 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x47E4 JUMP JUMPDEST SWAP1 SWAP8 DUP6 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x483D JUMPI JUMPDEST PUSH2 0x4824 DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3A8A JUMPI POP PUSH2 0x4836 SWAP1 PUSH2 0x3999 JUMP JUMPDEST SWAP7 CODESIZE PUSH2 0x43F8 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x481A JUMP JUMPDEST DUP5 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 PUSH1 0x15 SLOAD SWAP2 PUSH1 0x0 PUSH1 0x40 SWAP2 DUP3 MLOAD SWAP3 PUSH4 0x25ABD85F PUSH1 0xE1 SHL SWAP6 DUP7 DUP6 MSTORE PUSH1 0x20 SWAP3 PUSH1 0x4 SWAP6 DUP5 DUP2 DUP9 DUP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP8 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x4C04 JUMPI SWAP1 DUP4 SWAP2 DUP8 SWAP2 PUSH2 0x4C21 JUMPI JUMPDEST POP AND DUP1 EXTCODESIZE ISZERO PUSH2 0x4BF9 JUMPI DUP6 DUP3 SWAP2 DUP9 DUP7 MLOAD DUP1 SWAP5 DUP2 SWAP4 PUSH4 0xD0E30DB PUSH1 0xE4 SHL DUP4 MSTORE GAS CALL DUP1 ISZERO PUSH2 0x4C04 JUMPI SWAP1 DUP8 SWAP4 SWAP3 SWAP2 PUSH2 0x4C0E JUMPI JUMPDEST POP DUP5 DUP3 PUSH1 0x15 SLOAD AND DUP6 MLOAD SWAP9 DUP10 DUP1 SWAP3 DUP14 DUP3 MSTORE GAS STATICCALL SWAP7 DUP8 ISZERO PUSH2 0x4C04 JUMPI DUP7 SWAP8 PUSH2 0x4BC9 JUMPI JUMPDEST POP PUSH1 0x16 SLOAD DUP5 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP1 DUP3 MSTORE SWAP2 DUP5 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE SWAP2 SWAP9 SWAP1 SWAP2 DUP8 SWAP2 DUP4 SWAP2 DUP3 SWAP1 DUP12 SWAP1 DUP9 SWAP1 DUP4 SWAP1 PUSH1 0x40 ADD SUB SWAP4 AND GAS CALL DUP1 ISZERO PUSH2 0x4AC5 JUMPI PUSH2 0x4B95 JUMPI JUMPDEST POP DUP2 PUSH1 0x15 SLOAD AND DUP5 MLOAD SWAP10 DUP11 MSTORE DUP6 DUP11 DUP6 DUP2 DUP5 GAS STATICCALL SWAP10 DUP11 ISZERO PUSH2 0x4AC5 JUMPI DUP8 SWAP11 PUSH2 0x4B5E JUMPI JUMPDEST POP DUP5 MLOAD PUSH4 0xF77800E5 PUSH1 0xE0 SHL DUP1 DUP3 MSTORE SWAP11 DUP8 DUP3 DUP8 DUP2 DUP7 GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x4B15 JUMPI DUP9 SWAP1 DUP11 SWAP4 PUSH2 0x4B1F JUMPI JUMPDEST POP DUP8 MLOAD PUSH4 0x3488E959 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 DUP9 DUP3 ADD MSTORE SWAP4 DUP5 SWAP1 PUSH1 0x24 SWAP1 DUP3 SWAP1 GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x4B15 JUMPI SWAP2 PUSH2 0x49AB SWAP4 SWAP2 DUP8 SWAP7 SWAP6 SWAP4 DUP12 SWAP4 PUSH2 0x4755 JUMPI POP PUSH2 0x4C59 JUMP JUMPDEST SWAP7 DUP2 PUSH1 0x15 SLOAD AND SWAP10 DUP7 DUP12 DUP8 MLOAD SWAP7 DUP8 DUP1 SWAP3 DUP6 DUP3 MSTORE GAS STATICCALL SWAP5 DUP6 ISZERO PUSH2 0x4B0B JUMPI SWAP1 DUP8 SWAP2 DUP10 SWAP7 PUSH2 0x4ACF JUMPI JUMPDEST POP DUP5 DUP8 MLOAD DUP1 SWAP14 DUP2 SWAP4 DUP3 MSTORE GAS STATICCALL SWAP10 DUP11 ISZERO PUSH2 0x4AC5 JUMPI DUP8 SWAP11 PUSH2 0x4A7B JUMPI JUMPDEST POP DUP5 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP10 SWAP1 SWAP10 AND SWAP2 DUP10 ADD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP8 SWAP1 MSTORE SWAP7 SWAP8 SWAP6 SWAP7 DUP5 SWAP3 DUP8 SWAP3 DUP4 SWAP1 SUB PUSH1 0x40 ADD SWAP2 DUP4 SWAP2 DUP9 SWAP2 AND GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x4A72 JUMPI POP PUSH2 0x4A38 JUMPI JUMPDEST POP POP POP PUSH2 0x45D1 SWAP1 PUSH2 0x4E6A JUMP JUMPDEST DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x4A6B JUMPI JUMPDEST PUSH2 0x4A4C DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3A8A JUMPI POP SWAP1 PUSH2 0x4A62 PUSH2 0x45D1 SWAP3 PUSH2 0x3734 JUMP JUMPDEST POP SWAP1 CODESIZE DUP1 PUSH2 0x4A2C JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x4A42 JUMP JUMPDEST MLOAD RETURNDATASIZE DUP5 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 SWAP10 POP DUP6 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x4ABE JUMPI JUMPDEST PUSH2 0x4A93 DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x4ABA JUMPI SWAP2 DUP7 DUP7 SWAP5 SWAP3 PUSH2 0x4AAC DUP11 SWAP12 SWAP13 SWAP6 PUSH2 0x3999 JUMP JUMPDEST SWAP12 SWAP11 POP SWAP3 SWAP5 POP SWAP3 SWAP1 SWAP3 PUSH2 0x49EA JUMP JUMPDEST DUP7 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x4A89 JUMP JUMPDEST DUP6 MLOAD RETURNDATASIZE DUP10 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP3 DUP2 SWAP4 SWAP3 SWAP8 POP RETURNDATASIZE DUP4 GT PUSH2 0x4B04 JUMPI JUMPDEST PUSH2 0x4AE7 DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x4B00 JUMPI PUSH2 0x4AF9 DUP8 SWAP2 PUSH2 0x3999 JUMP JUMPDEST SWAP5 CODESIZE PUSH2 0x49D0 JUMP JUMPDEST DUP8 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x4ADD JUMP JUMPDEST DUP7 MLOAD RETURNDATASIZE DUP11 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP8 MLOAD RETURNDATASIZE DUP12 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP1 SWAP3 SWAP4 POP DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x4B57 JUMPI JUMPDEST PUSH2 0x4B36 DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x4B53 JUMPI SWAP1 DUP8 PUSH2 0x4B4C PUSH1 0x24 SWAP5 SWAP4 PUSH2 0x3999 JUMP JUMPDEST SWAP3 SWAP4 PUSH2 0x4971 JUMP JUMPDEST DUP9 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x4B2C JUMP JUMPDEST SWAP1 SWAP10 POP DUP6 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x4B8E JUMPI JUMPDEST PUSH2 0x4B76 DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x4ABA JUMPI PUSH2 0x4B87 SWAP1 PUSH2 0x3999 JUMP JUMPDEST SWAP9 CODESIZE PUSH2 0x494B JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x4B6C JUMP JUMPDEST DUP6 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x4BC2 JUMPI JUMPDEST PUSH2 0x4BAA DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x4ABA JUMPI PUSH2 0x4BBB SWAP1 PUSH2 0x3734 JUMP JUMPDEST POP CODESIZE PUSH2 0x492B JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x4BA0 JUMP JUMPDEST SWAP1 SWAP7 POP DUP5 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x4BFD JUMPI JUMPDEST PUSH2 0x4BE1 DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x4BF9 JUMPI PUSH2 0x4BF2 SWAP1 PUSH2 0x3999 JUMP JUMPDEST SWAP6 CODESIZE PUSH2 0x48DE JUMP JUMPDEST DUP6 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x4BD7 JUMP JUMPDEST DUP5 MLOAD RETURNDATASIZE DUP9 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x4C1A SWAP1 SWAP7 SWAP2 SWAP7 PUSH2 0x3281 JUMP JUMPDEST SWAP5 CODESIZE PUSH2 0x48BE JUMP JUMPDEST DUP1 SWAP3 POP DUP7 DUP1 SWAP3 POP RETURNDATASIZE DUP4 GT PUSH2 0x4C52 JUMPI JUMPDEST PUSH2 0x4C3A DUP2 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x4BF9 JUMPI PUSH2 0x4C4C DUP4 SWAP2 PUSH2 0x3999 JUMP JUMPDEST CODESIZE PUSH2 0x488F JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x4C30 JUMP JUMPDEST PUSH1 0x16 SLOAD PUSH1 0x40 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x24 DUP3 ADD DUP2 SWAP1 MSTORE SWAP4 SWAP6 SWAP5 SWAP4 SWAP3 SWAP1 SWAP2 AND SWAP2 SWAP1 PUSH1 0x20 DUP2 PUSH1 0x44 DUP2 DUP7 GAS STATICCALL DUP1 ISZERO PUSH2 0xE30 JUMPI DUP6 SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x4E35 JUMPI JUMPDEST POP LT PUSH2 0x4DC9 JUMPI JUMPDEST POP PUSH1 0x3C TIMESTAMP ADD SWAP4 DUP5 TIMESTAMP GT PUSH2 0x3BA9 JUMPI PUSH1 0x16 SLOAD PUSH1 0x40 MLOAD PUSH2 0x100 DUP2 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT DUP2 DUP5 LT OR PUSH2 0x9DB JUMPI PUSH1 0x40 SWAP3 DUP4 MSTORE SWAP4 DUP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x20 DUP6 DUP2 ADD SWAP2 DUP3 MSTORE PUSH3 0xFFFFFF SWAP7 DUP8 AND DUP7 DUP6 ADD SWAP1 DUP2 MSTORE ADDRESS PUSH1 0x60 DUP9 ADD SWAP1 DUP2 MSTORE PUSH1 0x80 DUP9 ADD SWAP11 DUP12 MSTORE PUSH1 0xA0 DUP9 ADD SWAP10 DUP11 MSTORE PUSH1 0x0 PUSH1 0xC0 DUP10 ADD DUP2 DUP2 MSTORE PUSH1 0xE0 DUP11 ADD DUP3 DUP2 MSTORE SWAP8 MLOAD PUSH4 0x414BF389 PUSH1 0xE0 SHL DUP2 MSTORE SWAP10 MLOAD DUP10 AND PUSH1 0x4 DUP12 ADD MSTORE SWAP5 MLOAD DUP9 AND PUSH1 0x24 DUP11 ADD MSTORE SWAP2 MLOAD SWAP1 SWAP9 AND PUSH1 0x44 DUP9 ADD MSTORE SWAP7 MLOAD DUP6 AND PUSH1 0x64 DUP8 ADD MSTORE SWAP8 MLOAD PUSH1 0x84 DUP7 ADD MSTORE SWAP6 MLOAD PUSH1 0xA4 DUP6 ADD MSTORE SWAP5 MLOAD PUSH1 0xC4 DUP5 ADD MSTORE MLOAD AND PUSH1 0xE4 DUP3 ADD MSTORE SWAP3 SWAP2 DUP4 SWAP2 PUSH2 0x104 SWAP2 DUP4 SWAP2 SWAP1 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0xE30 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x4D9A JUMPI POP SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x4DC1 JUMPI JUMPDEST DUP2 PUSH2 0x4DB4 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3A8A JUMPI POP MLOAD SWAP1 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x4DA7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x0 NOT PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0x44 DUP2 PUSH1 0x0 DUP7 GAS CALL DUP1 ISZERO PUSH2 0xE30 JUMPI ISZERO PUSH2 0x4CAB JUMPI PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x4E2D JUMPI JUMPDEST DUP2 PUSH2 0x4E15 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x150 JUMPI PUSH2 0x4E26 SWAP1 PUSH2 0x3734 JUMP JUMPDEST POP CODESIZE PUSH2 0x4CAB JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x4E08 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP3 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x4E62 JUMPI JUMPDEST DUP2 PUSH2 0x4E50 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3A8A JUMPI POP DUP5 SWAP1 MLOAD CODESIZE PUSH2 0x4CA4 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x4E43 JUMP JUMPDEST PUSH1 0x15 SLOAD PUSH1 0x40 MLOAD PUSH4 0xF77800E5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x4 SWAP1 DUP3 SWAP1 DUP7 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xE30 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x4EE9 JUMPI JUMPDEST POP AND SWAP1 DUP2 EXTCODESIZE ISZERO PUSH2 0x150 JUMPI PUSH1 0x0 SWAP2 PUSH1 0x24 DUP4 SWAP3 PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP4 DUP5 SWAP3 PUSH4 0x852CD8D PUSH1 0xE3 SHL DUP5 MSTORE PUSH1 0x4 DUP5 ADD MSTORE GAS CALL DUP1 ISZERO PUSH2 0xE30 JUMPI PUSH2 0x4EDA JUMPI POP PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH2 0x4EE3 SWAP1 PUSH2 0x3281 JUMP JUMPDEST CODESIZE PUSH2 0x45D1 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 RETURNDATASIZE DUP3 GT PUSH2 0x4F1A JUMPI JUMPDEST DUP2 PUSH2 0x4F02 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3A8A JUMPI POP PUSH2 0x4F14 SWAP1 PUSH2 0x3999 JUMP JUMPDEST CODESIZE PUSH2 0x4EA0 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x4EF5 JUMP JUMPDEST SWAP3 SWAP1 SWAP2 PUSH1 0xFF PUSH1 0x4 SLOAD AND PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x1D7 JUMPI DUP1 PUSH1 0x2 PUSH2 0x4F49 SWAP3 EQ ISZERO SWAP1 DUP2 PUSH2 0x4040 JUMPI POP PUSH2 0x36B9 JUMP JUMPDEST PUSH1 0x3 DUP5 LT ISZERO PUSH2 0x1D7 JUMPI DUP4 PUSH2 0x4FB2 JUMPI PUSH1 0x0 DUP1 DUP1 DUP5 DUP2 SWAP5 DUP3 SWAP1 DUP3 ISZERO PUSH2 0x4FA8 JUMPI JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 CALL ISZERO PUSH2 0xE30 JUMPI PUSH32 0x4A647B1D902051B0AE802F6050C58456D79D826BDF2BBF37A1BF13BE97727B2D SWAP2 JUMPDEST PUSH2 0x3C7B PUSH2 0x3DF1 DUP4 DUP4 DUP8 PUSH2 0x3C8E JUMP JUMPDEST PUSH2 0x8FC SWAP2 POP PUSH2 0x4F67 JUMP JUMPDEST SWAP1 SWAP2 SWAP1 DUP3 PUSH1 0x1 DUP6 EQ PUSH1 0x0 DUP2 ISZERO PUSH2 0x50DA JUMPI JUMPDEST DUP2 ISZERO PUSH2 0x50C8 JUMPI JUMPDEST POP SWAP1 PUSH2 0x5021 SWAP3 PUSH2 0x4FDB PUSH1 0x20 SWAP4 PUSH2 0x395F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x4FEC DUP9 PUSH2 0x5123 JUMP JUMPDEST AND SWAP1 PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 SWAP7 DUP2 SWAP6 DUP3 SWAP5 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x4 DUP5 ADD PUSH1 0x20 SWAP1 SWAP4 SWAP3 SWAP2 SWAP4 PUSH1 0x40 DUP2 ADD SWAP5 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE ADD MSTORE JUMP JUMPDEST SUB SWAP3 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0xE30 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x5066 JUMPI JUMPDEST POP SWAP1 PUSH2 0x5061 PUSH32 0x4A647B1D902051B0AE802F6050C58456D79D826BDF2BBF37A1BF13BE97727B2D SWAP4 SWAP3 PUSH2 0x50E5 JUMP JUMPDEST PUSH2 0x4F9A JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 RETURNDATASIZE DUP3 GT PUSH2 0x50C0 JUMPI JUMPDEST DUP2 PUSH2 0x507F PUSH1 0x20 SWAP4 DUP4 PUSH2 0x32AF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3A8A JUMPI POP SWAP1 PUSH2 0x5061 PUSH2 0x50B7 PUSH32 0x4A647B1D902051B0AE802F6050C58456D79D826BDF2BBF37A1BF13BE97727B2D SWAP5 SWAP4 PUSH2 0x3734 JUMP JUMPDEST SWAP2 SWAP3 SWAP4 POP PUSH2 0x5034 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x5072 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1D7 JUMPI DUP3 PUSH1 0x0 PUSH2 0x5021 PUSH2 0x4FCA JUMP JUMPDEST PUSH1 0x2 DUP8 EQ SWAP2 POP PUSH2 0x4FC3 JUMP JUMPDEST ISZERO PUSH2 0x50EC JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x1514905394D1915497D19052531151 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x1D7 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x5178 JUMPI PUSH1 0x1 EQ PUSH2 0x5140 JUMPI PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x15 SLOAD PUSH1 0x40 MLOAD PUSH4 0xF77800E5 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x4 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xE30 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x3A5F JUMPI POP SWAP1 JUMP JUMPDEST POP PUSH1 0x15 SLOAD PUSH1 0x40 MLOAD PUSH4 0x5F117AA3 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x4 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xE30 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x3A5F JUMPI POP SWAP1 JUMP JUMPDEST DUP1 PUSH1 0x0 SWAP2 PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP1 DUP3 LT ISZERO PUSH2 0x530B JUMPI JUMPDEST POP PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP1 DUP4 LT ISZERO PUSH2 0x52FC JUMPI JUMPDEST POP PUSH7 0x2386F26FC10000 DUP1 DUP4 LT ISZERO PUSH2 0x52ED JUMPI JUMPDEST POP PUSH4 0x5F5E100 DUP1 DUP4 LT ISZERO PUSH2 0x52DE JUMPI JUMPDEST POP PUSH2 0x2710 DUP1 DUP4 LT ISZERO PUSH2 0x52CF JUMPI JUMPDEST POP PUSH1 0x64 DUP3 LT ISZERO PUSH2 0x52BF JUMPI JUMPDEST PUSH1 0xA DUP1 SWAP3 LT ISZERO PUSH2 0x52B5 JUMPI JUMPDEST PUSH1 0x1 SWAP1 DUP2 PUSH1 0x21 DUP2 DUP7 ADD SWAP6 PUSH2 0x524A DUP8 PUSH2 0x3622 JUMP JUMPDEST SWAP7 PUSH2 0x5258 PUSH1 0x40 MLOAD SWAP9 DUP10 PUSH2 0x32AF JUMP JUMPDEST DUP1 DUP9 MSTORE PUSH2 0x5267 PUSH1 0x1F NOT SWAP2 PUSH2 0x3622 JUMP JUMPDEST ADD CALLDATASIZE PUSH1 0x20 DUP10 ADD CALLDATACOPY DUP7 ADD ADD SWAP1 JUMPDEST PUSH2 0x527F JUMPI JUMPDEST POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 NOT ADD SWAP1 DUP4 SWAP1 PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP3 DUP3 MOD BYTE DUP4 MSTORE8 DIV SWAP2 DUP3 ISZERO PUSH2 0x52B0 JUMPI SWAP2 SWAP1 DUP3 PUSH2 0x5273 JUMP JUMPDEST PUSH2 0x5278 JUMP JUMPDEST SWAP2 PUSH1 0x1 ADD SWAP2 PUSH2 0x5237 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x64 PUSH1 0x2 SWAP2 DIV SWAP2 ADD SWAP2 PUSH2 0x522C JUMP JUMPDEST PUSH1 0x4 SWAP2 SWAP4 SWAP3 DIV SWAP2 ADD SWAP2 CODESIZE PUSH2 0x5221 JUMP JUMPDEST PUSH1 0x8 SWAP2 SWAP4 SWAP3 DIV SWAP2 ADD SWAP2 CODESIZE PUSH2 0x5214 JUMP JUMPDEST PUSH1 0x10 SWAP2 SWAP4 SWAP3 DIV SWAP2 ADD SWAP2 CODESIZE PUSH2 0x5205 JUMP JUMPDEST PUSH1 0x20 SWAP2 SWAP4 SWAP3 DIV SWAP2 ADD SWAP2 CODESIZE PUSH2 0x51F3 JUMP JUMPDEST PUSH1 0x40 SWAP4 POP DUP2 DIV SWAP2 POP CODESIZE PUSH2 0x51DA JUMP INVALID PUSH6 0x9F33FC6677BE 0xBF GASPRICE SWAP12 RETURN LT LT SWAP3 PUSH26 0x2E31F35766D0358E54577BDD91A655F6A0405787FA12A823E0F2 0xB7 PUSH4 0x1CC41B3B 0xA8 DUP3 DUP12 CALLER 0x21 0xCA DUP2 GT GT STATICCALL PUSH22 0xCD3AA3BB5ACEC2575A0E9E593C00F959F8C92F12DB28 PUSH10 0xC3395A3B0502D05E2516 PREVRANDAO PUSH16 0x71F85B31ECC21A745E3968A04E9570E4 TIMESTAMP JUMPDEST 0xC1 DUP16 0xA8 ADD SWAP13 PUSH9 0x28196B546D1669C20 0xC PUSH9 0x1B6847DC741A1B0CD0 DUP14 0x27 DUP9 GASLIMIT 0xF9 0xD8 NOT 0xD8 PUSH28 0x734759AFB55FE2DE5CB82A9AE6728D1108E10BCB7C27DDDFC02ED9D6 SWAP4 LOG0 PUSH21 0x39D026CF4EA4240B40F7D581AC802A26469706673 PC 0x22 SLT KECCAK256 0xE4 PUSH19 0x9C8350ED9965E7CFEF223F52992187ADB08588 SELFDESTRUCT DUP12 DUP9 SWAP14 SWAP5 PUSH29 0x6A8027A67A64736F6C6343000813003300000000000000000000000000 ","sourceMap":"778:408:7:-:0;;;;;;;;;;-1:-1:-1;778:408:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;778:408:7;;;;;3094:26:24;778:408:7;;;;;;;;;;;;;;;;;;:::i;:::-;;;7450:30:29;778:408:7;;;;;;;;;;;;;;;;7439:41:29;7431:65;2983:111;7439:41;;;7431:65;:::i;:::-;2917:36;7552:10;2917:36;;:::i;:::-;7552:10;;2983:111;;:::i;:::-;7602:20;778:408:7;-1:-1:-1;;;;;778:408:7;7552:10:29;778:408:7;;;7588:40:29;778:408:7;;;;7644:28:29;778:408:7;7584:229:29;778:408:7;;;;;;7584:229:29;7720:27;778:408:7;;7552:10:29;7706:41;7584:229;7702:111;;778:408:7;7763:26:29;778:408:7;7584:229:29;;778:408:7;;;;;;;;;;;;;;;;;;;:::i;:::-;;6734:30:29;778:408:7;;;;;;;;;;;;;;;;;6715:65:29;6723:41;;;6715:65;:::i;:::-;778:408:7;;;2328:8:25;778:408:7;;;;;6845:10:29;778:408:7;;;;;;;;;6875:30:29;778:408:7;;;6845:10:29;6958:113;6845:10;;6958:113;;:::i;:::-;7100:20;778:408:7;6845:10:29;-1:-1:-1;;;;;778:408:7;;;7086:40:29;778:408:7;;;7142:28:29;778:408:7;;;;;;;;;;-1:-1:-1;;;778:408:7;;;;;;;;;;;;-1:-1:-1;;;778:408:7;;;;;;;;;;-1:-1:-1;;778:408:7;;;;;;-1:-1:-1;;;;;778:408:7;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;778:408:7;;;;;;;;-1:-1:-1;;;;;778:408:7;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;915:33:31;:85;;;;778:408:7;915:137:31;;;;;;778:408:7;894:195:31;;;;:::i;:::-;778:408:7;;-1:-1:-1;;;;;778:408:7;907:10:23;:19;778:408:7;;974:28:23;778:408:7;;;-1:-1:-1;;;959:99:23;;-1:-1:-1;;;;;778:408:7;;;;;959:99:23;;778:408:7;;;;;;;;;;;;959:99:23;;;;;;;778:408:7;959:99:23;;;778:408:7;;;;;;;;;;;;;;;;;1130:13:23;778:408:7;;1109:112:23;778:408:7;;;;;;1109:112:23;:::i;:::-;778:408:7;;1240:15:23;778:408:7;;;;1296:11:23;778:408:7;;;;;;;;;;;;;2328:8:25;778:408:7;;;;;;;;;;;;;;;;;1387:125:23;778:408:7;;;;;;1412:51:23;;1387:125;:::i;:::-;778:408:7;;1359:421:23;778:408:7;;;;:::i;:::-;;;;;;;1809:18:23;778:408:7;;;;;;;;;;;;;;;;;;;;;;1130:13:23;778:408:7;;;;;;;;-1:-1:-1;;778:408:7;;;;;;-1:-1:-1;778:408:7;;;;;;;;;;;;;;;;;;;;;974:28:23;778:408:7;;;-1:-1:-1;;;1948:90:23;;-1:-1:-1;;;;;778:408:7;;;;1948:90:23;;;778:408:7;;;;;;;;;;;;;1948:90:23;;;;;;;778:408:7;1948:90:23;;;1359:421;778:408:7;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;2275:314:23;;778:408:7;2440:15:23;778:408:7;2275:314:23;;778:408:7;;;2275:314:23;;778:408:7;;2275:314:23;;778:408:7;2275:314:23;778:408:7;;;2275:314:23;;;:::i;:::-;778:408:7;;;;;;:::i;:::-;;;;;;;;;;;;;2615:255:23;;778:408:7;;2615:255:23;;778:408:7;;;;2615:255:23;;778:408:7;;;2615:255:23;;778:408:7;;;2615:255:23;;778:408:7;;;:::i;:::-;;;:::i;:::-;;;;;;;;:::i;:::-;;;;2894:187:23;;778:408:7;;2894:187:23;;778:408:7;;;;;;;:::i;:::-;;;;2227:869:23;;778:408:7;;2227:869:23;;778:408:7;;;;;;;:::i;:::-;;;;;2157:950:23;;778:408:7;489:6:24;;778:408:7;;;-1:-1:-1;;;;;;778:408:7;-1:-1:-1;;;;;778:408:7;;;;;;;;;;;489:6:24;;778:408:7;;;489:6:24;-1:-1:-1;;;;;489:6:24;;;;;;;;:::i;:::-;;;;;;1359:421:23;489:6:24;778:408:7;489:6:24;;;;;;;;778:408:7;;489:6:24;;778:408:7;;489:6:24;;;;;;;778:408:7;489:6:24;;;;;778:408:7;489:6:24;778:408:7;489:6:24;;;;;;;778:408:7;;;489:6:24;-1:-1:-1;;;;;489:6:24;;;;;;;778:408:7;489:6:24;;:::i;:::-;;;;;;;;778:408:7;489:6:24;;;;;;;;778:408:7;489:6:24;;;;;;;778:408:7;489:6:24;;;;;778:408:7;489:6:24;778:408:7;489:6:24;;;778:408:7;489:6:24;;778:408:7;2157:950:23;;778:408:7;;;489:6:24;;778:408:7;;;;;;;489:6:24;778:408:7;489:6:24;;:::i;:::-;778:408:7;489:6:24;;;778:408:7;;;:::i;:::-;;;;:::i;:::-;489:6:24;778:408:7;489:6:24;;778:408:7;489:6:24;;;;;;;778:408:7;489:6:24;778:408:7;489:6:24;;;778:408:7;;;489:6:24;;;;778:408:7;;489:6:24;;;;778:408:7;489:6:24;;778:408:7;;;;;;;;;;;;;489:6:24;778:408:7;;;;;489:6:24;778:408:7;;489:6:24;;778:408:7;489:6:24;778:408:7;;;;;489:6:24;;778:408:7;;;;;;;-1:-1:-1;;;;;778:408:7;;1409:20:20;778:408:7;;;1409:20:20;778:408:7;;489:6:24;;778:408:7;;;;;;489:6:24;;;778:408:7;;;;;;;-1:-1:-1;;;;;778:408:7;;489:6:24;778:408:7;;;489:6:24;778:408:7;;489:6:24;;;;;;778:408:7;;489:6:24;;;;778:408:7;;489:6:24;;;;778:408:7;489:6:24;;;778:408:7;489:6:24;778:408:7;;;;;;;-1:-1:-1;;;;;489:6:24;;;;;;;;:::i;:::-;;;;;;;;778:408:7;489:6:24;;;;;;;;;;;778:408:7;489:6:24;;;;;;;778:408:7;489:6:24;;;;;778:408:7;489:6:24;778:408:7;489:6:24;;;;;;778:408:7;489:6:24;;778:408:7;;;489:6:24;-1:-1:-1;;;;;489:6:24;;;;;;;;:::i;:::-;;;;;;;;778:408:7;489:6:24;;;;;;;;778:408:7;;489:6:24;;778:408:7;;489:6:24;;;;;;;778:408:7;489:6:24;;;;;778:408:7;489:6:24;778:408:7;489:6:24;;;;;;;778:408:7;;;;489:6:24;-1:-1:-1;;;;;489:6:24;;;;;;;;;;:::i;:::-;;;;;;;;778:408:7;489:6:24;;;;;;;;;;;778:408:7;489:6:24;;;;;;;778:408:7;489:6:24;;;;;778:408:7;489:6:24;778:408:7;489:6:24;;;;;;3184:18:23;778:408:7;;-1:-1:-1;;489:6:24;;;;;778:408:7;;489:6:24;;3184:18:23;778:408:7;3220:16:23;778:408:7;;3220:16:23;;;;;:::i;:::-;;;;778:408:7;;;;;;;:::i;:::-;;;;489:6:24;778:408:7;;;;489:6:24;778:408:7;489:6:24;778:408:7;;489:6:24;;;;;-1:-1:-1;489:6:24;;;;;;;;;778:408:7;;;;-1:-1:-1;;;;;;;;;;;489:6:24;778:408:7;489:6:24;;;;;;;;;778:408:7;489:6:24;;;;;;;;;;;;;;;;;;;;;;;;778:408:7;489:6:24;;778:408:7;489:6:24;;;;;;;;;;;;778:408:7;;489:6:24;;;;;;;;;;;;;;;;778:408:7;;;-1:-1:-1;;;;;;;;;;;489:6:24;;;778:408:7;489:6:24;;;;778:408:7;489:6:24;;;;;;;778:408:7;489:6:24;;;;;;;;;;;;;778:408:7;489:6:24;;778:408:7;489:6:24;;;;;;-1:-1:-1;489:6:24;;;;;778:408:7;;;;;;;;;;;489:6:24;;;;-1:-1:-1;489:6:24;;;;;;;;;;778:408:7;489:6:24;778:408:7;;-1:-1:-1;;;;;;;;;;;489:6:24;778:408:7;489:6:24;;;;;;;;778:408:7;489:6:24;;;778:408:7;489:6:24;;;;;;;;;;;;;;;;;;;;;;;;778:408:7;489:6:24;;778:408:7;489:6:24;;;;;;;;;;;;778:408:7;;489:6:24;;;;;;;;;;;;;;;;;778:408:7;;-1:-1:-1;;;;;;;;;;;489:6:24;;;778:408:7;489:6:24;;;;778:408:7;489:6:24;;;;;;;778:408:7;489:6:24;;;;;;;;;;;;;778:408:7;489:6:24;;778:408:7;489:6:24;;;;;;-1:-1:-1;489:6:24;;;;;;;;-1:-1:-1;489:6:24;;;;;;;;;778:408:7;489:6:24;778:408:7;;-1:-1:-1;;;;;;;;;;;489:6:24;778:408:7;489:6:24;;;;;;;;;778:408:7;489:6:24;;;;;;;;;;;;;;;;;;;;;;;;778:408:7;489:6:24;;778:408:7;489:6:24;;;;;;;;;;;;778:408:7;;489:6:24;;;;;;;;;;;;;;;;;778:408:7;;-1:-1:-1;;;;;;;;;;;489:6:24;;;778:408:7;489:6:24;;;;778:408:7;489:6:24;;;;;;;778:408:7;489:6:24;;;;;;;;;;;;;778:408:7;489:6:24;;778:408:7;489:6:24;;;;;;-1:-1:-1;489:6:24;;;;;;;;-1:-1:-1;489:6:24;;;;;778:408:7;;;;;-1:-1:-1;;;;;;;;;;;489:6:24;778:408:7;489:6:24;;-1:-1:-1;;489:6:24;;;;;;778:408:7;489:6:24;;;;;;;;;;;;;;;;;778:408:7;489:6:24;;;;;;;;;;778:408:7;489:6:24;;778:408:7;489:6:24;;;;;;;;;;;;;;;;778:408:7;489:6:24;;;;778:408:7;489:6:24;;;;;;;;;;;778:408:7;;;;;;489:6:24;;;778:408:7;489:6:24;-1:-1:-1;;;;;;;;;;;489:6:24;;778:408:7;489:6:24;;;;;;;;;;;778:408:7;489:6:24;-1:-1:-1;;;;;;;;;;;489:6:24;;;;;;;;;;;;778:408:7;489:6:24;;;;-1:-1:-1;778:408:7;489:6:24;;;;-1:-1:-1;;;;;;;;;;;778:408:7;-1:-1:-1;489:6:24;;;;;;-1:-1:-1;489:6:24;;;;;778:408:7;489:6:24;778:408:7;;-1:-1:-1;;;;;;;;;;;489:6:24;778:408:7;489:6:24;-1:-1:-1;;489:6:24;;;;;;;;;;778:408:7;489:6:24;778:408:7;489:6:24;;;;;;;;;;;;;;;;;;;;;;;;;;;778:408:7;489:6:24;;778:408:7;489:6:24;;;;;;;;;;;;778:408:7;;489:6:24;;;;;;;;;;;;;;;;;778:408:7;;489:6:24;;;778:408:7;489:6:24;-1:-1:-1;;;;;;;;;;;489:6:24;778:408:7;489:6:24;;;;;;;;778:408:7;489:6:24;-1:-1:-1;;;;;;;;;;;489:6:24;;;;;;;;;778:408:7;489:6:24;;778:408:7;489:6:24;;;;-1:-1:-1;;;;;;;;;;;;489:6:24;;1948:90:23;;;;;;778:408:7;1948:90:23;;;;;;:::i;:::-;778:408:7;1948:90:23;;;;778:408:7;;;;;;;-1:-1:-1;;;;;778:408:7;;;;;;;;1948:90:23;;;778:408:7;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;778:408:7;;;;;1948:90:23;;;;778:408:7;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;;;;;778:408:7;;;;;1948:90:23;;;778:408:7;;;;:::i;:::-;;;;;1948:90:23;;;;;778:408:7;;;;;;;;;1359:421:23;778:408:7;;;;1581:32:23;1577:123;;1359:421;1722:47;778:408:7;;;;;;;;1722:47:23;:::i;:::-;1359:421;;1577:123;1641:9;778:408:7;;;1577:123:23;778:408:7;;;-1:-1:-1;;;778:408:7;;;;;;;;;;;;-1:-1:-1;;;778:408:7;;;;;;;;;;-1:-1:-1;;;778:408:7;;;;;;;;;;;;-1:-1:-1;;;778:408:7;;;;;;;;;;-1:-1:-1;;;778:408:7;;;;;;;;;;;;-1:-1:-1;;;778:408:7;;;;;;;;;;-1:-1:-1;;;778:408:7;;;;;;;;;;;;-1:-1:-1;;;778:408:7;;;;;;;959:99:23;;;778:408:7;959:99:23;;778:408:7;959:99:23;;;;;;778:408:7;959:99:23;;;:::i;:::-;;;778:408:7;;;;;;;:::i;:::-;959:99:23;;;;;;-1:-1:-1;959:99:23;;915:137:31;778:408:7;;;915:137:31;778:408:7;;1020:32:31;915:137;;:85;-1:-1:-1;778:408:7;;-1:-1:-1;778:408:7;;979:21:31;968:32;915:85;;778:408:7;;;;;;-1:-1:-1;;778:408:7;;;;;2975:28:24;778:408:7;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;778:408:7;;;;;;;;;;;;;;;:::i;:::-;408:27:30;778:408:7;;;-1:-1:-1;;;;;778:408:7;386:64:30;;778:408:7;;394:10:30;:41;386:64;:::i;:::-;778:408:7;;;;;;;;;;;;;559:13:30;778:408:7;;;;;;;;559:176:30;;;778:408:7;;;;;;;820:28:30;778:408:7;;;;;;;;;;;805:103:30;;394:10;778:408:7;805:103:30;;778:408:7;805:103:30;;;;;;;778:408:7;805:103:30;;;778:408:7;;;;;964:60:30;778:408:7;394:10:30;;778:408:7;;;;972:37:30;964:60;:::i;:::-;778:408:7;;559:13:30;778:408:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;489:6:24;;;;;;1092:31:30;489:6:24;;:::i;:::-;;;;;;778:408:7;489:6:24;;;;;;;;;-1:-1:-1;778:408:7;;489:6:24;778:408:7;;489:6:24;;;;;;;;;;;;;;;778:408:7;489:6:24;;;1092:31:30;489:6:24;;778:408:7;;;;;;1271:61:30;1301:31;778:408:7;1271:15:30;:61;:::i;:::-;1221:35;778:408:7;1348:11:30;778:408:7;;1348:11:30;;;;:::i;:::-;;;;778:408:7;489:6:24;;;;-1:-1:-1;489:6:24;;;;;;;;;;;;778:408:7;1092:31:30;778:408:7;;-1:-1:-1;;;;;;;;;;;489:6:24;778:408:7;489:6:24;;;;;;;;;;778:408:7;489:6:24;;;;;;;;;;;1092:31:30;489:6:24;;;;;;-1:-1:-1;;489:6:24;;;;;778:408:7;489:6:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1092:31:30;778:408:7;;-1:-1:-1;;;;;;;;;;;489:6:24;;;408:20:30;489:6:24;;;;;;;;;;;;408:20:30;489:6:24;;;;;;;;;;;;;;;;778:408:7;489:6:24;;;;;;;;;;-1:-1:-1;489:6:24;;;;778:408:7;;;-1:-1:-1;;;778:408:7;;;;;;;;;;;;;-1:-1:-1;;;778:408:7;;;;;;;805:103:30;;;;;;;;;;;;;;;;:::i;:::-;;;778:408:7;;;;;;;:::i;:::-;805:103:30;;;;;;;;778:408:7;;;-1:-1:-1;;;778:408:7;;;;;;;;;;;;;-1:-1:-1;;;778:408:7;;;;;;;559:176:30;615:47;632:30;615:47;;:119;559:176;615:119;686:48;778:408:7;686:48:30;;559:176;;778:408:7;;;;;;-1:-1:-1;;778:408:7;;;;;;;;;;;;;275:20:27;778:408:7;-1:-1:-1;;;;;778:408:7;253:63:27;261:10;:40;;253:63;:::i;:::-;778:408:7;;;;;;;;;;;348:64:27;778:408:7;;512:24:27;778:408:7;;;-1:-1:-1;;;491:60:27;;-1:-1:-1;;;;;778:408:7;;;;;;;;;491:60:27;;;;;;;778:408:7;491:60:27;;;778:408:7;-1:-1:-1;778:408:7;;-1:-1:-1;;;605:23:27;;778:408:7;;;605:23:27;;778:408:7;;;;;;;;;;-1:-1:-1;;;;;778:408:7;605:23:27;;;;;;;778:408:7;605:23:27;;;778:408:7;-1:-1:-1;778:408:7;660:20:27;;489:6:24;639:116:27;;-1:-1:-1;;;;;778:408:7;660:50:27;;639:116;:::i;:::-;787:21;;;489:6:24;812:27:27;778:408:7;-1:-1:-1;;;;;778:408:7;;;;;787:52:27;778:408:7;;;914:18:27;;;778:408:7;;;-1:-1:-1;;;952:58:27;;778:408:7;;;;952:58:27;;;;;;;;778:408:7;952:58:27;;;778:408:7;914:96:27;;778:408:7;;1142:16:27;;;778:408:7;;;1118:86:27;;778:408:7;;;;;;;;;;1118:86:27;;778:408:7;:::i;:::-;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;778:408:7;;;;;1118:86:27;778:408:7;1118:86:27;;;778:408:7;;;;:::i;:::-;1239:4:27;;-1:-1:-1;;;;;778:408:7;;;1223:21:27;778:408:7;;;;1303:21:27;;778:408:7;;1303:21:27;;778:408:7;;;;;;;;;:::i;:::-;1303:21:27;489:6:24;;1303:21:27;;;;;;:::i;:::-;778:408:7;1293:32:27;;778:408:7;;;1355:44:27;;;778:408:7;1366:18:27;778:408:7;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;1355:44:27;;;;489:6:24;;1355:44:27;;;;;;:::i;:::-;778:408:7;;;1355:44:27;;1345:55;1293:107;778:408:7;;;;;;;;;;;;;;1527:87:27;;;;;;;;;778:408:7;1527:87:27;;;778:408:7;-1:-1:-1;1645:28:27;778:408:7;;;-1:-1:-1;;;1688:47:27;;778:408:7;;;;;;;-1:-1:-1;;;;;778:408:7;;1688:47:27;;;;;;;778:408:7;1688:47:27;;;778:408:7;1645:90:27;1739:5;1645:90;1777:39;1645:90;;;:::i;:::-;778:408:7;1777:39:27;;;:::i;:::-;778:408:7;1929:35:27;778:408:7;1967:15:27;-1:-1:-1;1929:62:27;;;;778:408:7;1925:2075:27;;;-1:-1:-1;2007:50:27;;778:408:7;;;;;;2015:18:27;2007:50;:::i;:::-;778:408:7;;275:20:27;778:408:7;1645:28:27;778:408:7;2350:160:27;;2145:176;;-1:-1:-1;;;;;778:408:7;;;;2145:176:27;:::i;:::-;778:408:7;;812:27:27;778:408:7;;;;-1:-1:-1;;;;;778:408:7;;;;2350:160:27;:::i;:::-;778:408:7;;;;;;;;;;;;;915:33:31;;:85;;;:33;:85;;;1925:2075:27;915:137:31;;;;;;1925:2075:27;894:195:31;;;;:::i;:::-;512:24:27;778:408:7;;;-1:-1:-1;;;2216:73:31;;778:408:7;;;;;;;;;-1:-1:-1;;;;;778:408:7;2216:73:31;;;;;;;778:408:7;2216:73:31;;;1925:2075:27;-1:-1:-1;2304:20:31;;778:408:7;;2344:32:31;;;-1:-1:-1;2473:30:31;;778:408:7;;;;-1:-1:-1;778:408:7;;-1:-1:-1;778:408:7;;-1:-1:-1;;;;;778:408:7;2414:41:31;;;;:::i;:::-;;2473:30;:::i;:::-;1366:18:27;778:408:7;1645:28:27;778:408:7;;;;;;;2747:112:27;778:408:7;;;;;;;;;;;;1889:13:24;778:408:7;;;;;;;;;;;;;;;;;;;;;2006:41:24;778:408:7;;;;;;1889:13:24;778:408:7;;;;;;;;;;;;;2006:41:24;:::i;:::-;2893:11:27;778:408:7;;2893:11:27;;;;:::i;2747:112::-;275:20;2747:112;;2340:266:31;778:408:7;915:85:31;;;;2340:266;915:137;;;;2340:266;894:195;;778:408:7;894:195:31;;;1508:53;894:195;;:::i;:::-;-1:-1:-1;;;;;778:408:7;1515:25:31;;;:::i;:::-;778:408:7;;-1:-1:-1;;;1508:53:31;;-1:-1:-1;;;;;778:408:7;;;;1508:53:31;;778:408:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;1508:53:31;;;;;;;;;778:408:7;1508:53:31;;;2340:266;1487:115;;;;:::i;:::-;2340:266;;1508:53;;778:408:7;1508:53:31;;778:408:7;1508:53:31;;;;;;778:408:7;1508:53:31;;;:::i;:::-;;;778:408:7;;;;;1487:115:31;778:408:7;;:::i;:::-;1508:53:31;;;;;-1:-1:-1;1508:53:31;;915:137;778:408:7;;;;;;;915:137:31;778:408:7;;915:137:31;;:85;-1:-1:-1;;1929:35:27;968:32:31;;778:408:7;915:85:31;;2300:615;778:408:7;;;;;;;;1929:35:27;2640:32:31;;1929:35:27;;2692:15:31;;;;;:::i;:::-;;2300:615;;2636:269;2732:33;;;2785:12;;;;:::i;2728:177::-;2822:32;2818:87;;2728:177;2340:266;;2818:87;2874:16;;;:::i;:::-;;2818:87;;;2216:73;;;778:408:7;2216:73:31;;778:408:7;2216:73:31;;;;;;778:408:7;2216:73:31;;;:::i;:::-;;;778:408:7;;;;;;;:::i;:::-;2216:73:31;;;;;;-1:-1:-1;2216:73:31;;915:137;778:408:7;;;915:137:31;1020:32;;915:137;;:85;-1:-1:-1;778:408:7;;-1:-1:-1;1929:35:27;968:32:31;;915:85;;1925:2075:27;778:408:7;;;;;;;;2921:1079:27;;778:408:7;2921:1079:27;2947:50;;778:408:7;;;;;;2955:18:27;2947:50;:::i;:::-;1366:18;778:408:7;;;3037:40:27;;;778:408:7;;512:8:27;778:408:7;3179:4:27;;3152:31;;;;778:408:7;;;275:20:27;3243:37;;3334:141;3243:37;;;:::i;:::-;778:408:7;;;;;;;3334:141:27;:::i;:::-;1645:28;778:408:7;;;812:27:27;778:408:7;3519:145:27;;778:408:7;;-1:-1:-1;;;;;778:408:7;;;;3519:145:27;:::i;:::-;1366:18;778:408:7;;;;;;;;;;;;3799:31:27;778:408:7;3858:28:27;778:408:7;;;;1889:13:24;778:408:7;;;;;;;;;;;;;;;;;;;3976:13:27;778:408:7;;3976:13:27;;;;:::i;778:408:7:-;;;-1:-1:-1;;;778:408:7;;;;;;;512:24:27;778:408:7;;;;-1:-1:-1;;;778:408:7;;;;;;;;;;-1:-1:-1;;;778:408:7;;;;;;;;;;;;-1:-1:-1;;;778:408:7;;;;;;;1929:62:27;778:408:7;;;1929:62:27;;1688:47;;;778:408:7;1688:47:27;;778:408:7;1688:47:27;;;;;;778:408:7;1688:47:27;;;:::i;:::-;;;778:408:7;;;;;1739:5:27;1688:47;;;;;-1:-1:-1;1688:47:27;;1527:87;;;778:408:7;1527:87:27;;778:408:7;1527:87:27;;;;;;778:408:7;1527:87:27;;;:::i;:::-;;;778:408:7;;;;;;;:::i;:::-;1527:87:27;;;;;;-1:-1:-1;1527:87:27;;778:408:7;;;-1:-1:-1;;;778:408:7;;;;;;;;;;;;-1:-1:-1;;;778:408:7;;;;;;;;;;1366:18:27;778:408:7;;-1:-1:-1;;;;;;;;;;;778:408:7;;;;;;;;;;;;;1355:44:27;778:408:7;;;;;;;;;;;;;;;;;-1:-1:-1;778:408:7;;;;;;;;;;;;;1355:44:27;778:408:7;;;;;;;;;;;;275:20:27;778:408:7;;;;;;;;;-1:-1:-1;;;778:408:7;;;;;;;;;;;;-1:-1:-1;;;778:408:7;;;;;;;;;;-1:-1:-1;;;778:408:7;;;;;;;;;;;;-1:-1:-1;;;778:408:7;;;;;;;952:58:27;;;;778:408:7;952:58:27;;778:408:7;952:58:27;;;;;;778:408:7;952:58:27;;;:::i;:::-;;;778:408:7;;;;;952:58:27;;;;;;;-1:-1:-1;952:58:27;;778:408:7;;;-1:-1:-1;;;778:408:7;;;;;;;;;;;;-1:-1:-1;;;778:408:7;;;;;;;605:23:27;;;;;778:408:7;605:23:27;;;;;;:::i;:::-;778:408:7;605:23:27;;;;778:408:7;;;;;;;-1:-1:-1;;;;;778:408:7;;;;;;;;605:23:27;;;778:408:7;;;;;;;;;;;;-1:-1:-1;;;;;778:408:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;-1:-1:-1;;;;;778:408:7;;;;;605:23:27;;;778:408:7;;;;:::i;:::-;;;;;605:23:27;;;491:60;;;778:408:7;491:60:27;;778:408:7;491:60:27;;;;;;778:408:7;491:60:27;;;:::i;:::-;;;778:408:7;;;;;;;;;:::i;:::-;491:60:27;;;;;;;-1:-1:-1;491:60:27;;778:408:7;;;-1:-1:-1;;;778:408:7;;;;;;;;;;;;-1:-1:-1;;;778:408:7;;;;;;;;;;;;;-1:-1:-1;;778:408:7;;;;;;;;-1:-1:-1;;;;;778:408:7;;;;;;;;;;;;;;-1:-1:-1;;778:408:7;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;778:408:7;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;1582:13:30;778:408:7;;;;;;;;1582:248:30;;;778:408:7;1561:309:30;;;:::i;:::-;1881:106;778:408:7;;;;;1916:27:30;778:408:7;;1902:10:30;:41;;1881:106;:::i;:::-;778:408:7;;;2019:48:30;778:408:7;;;;489:6:24;;;;;;2117:32:30;489:6:24;;:::i;:::-;;;;;;778:408:7;489:6:24;;;;;;;;;;;;;;778:408:7;489:6:24;;;;;;778:408:7;489:6:24;;;;;778:408:7;489:6:24;778:408:7;489:6:24;;;2117:32:30;489:6:24;;2207:30:30;778:408:7;;;;;;;;2253:16:30;778:408:7;;2253:16:30;;;;:::i;:::-;;;;778:408:7;;;;;;;;;;;;;:::i;489:6:24:-;;;;;;;;;;;;;;778:408:7;2117:32:30;778:408:7;;-1:-1:-1;;;;;;;;;;;489:6:24;778:408:7;489:6:24;;;;;;;;778:408:7;489:6:24;;;;;;;;;;;;2117:32:30;489:6:24;;;;;;;;;;;778:408:7;489:6:24;;778:408:7;489:6:24;;;;;;;;;;;;778:408:7;489:6:24;;;;;;;;;;;;;;;;2117:32:30;778:408:7;;-1:-1:-1;;;;;;;;;;;489:6:24;;;1916:20:30;489:6:24;;;;;;;;;;;;1916:20:30;489:6:24;;;;;;;;;;;;;778:408:7;489:6:24;;778:408:7;489:6:24;;;;;;-1:-1:-1;489:6:24;;;;778:408:7;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;778:408:7;;;;;1582:248:30;778:408:7;;;;1638:48:30;;:119;;;;1582:248;1638:191;;;;;;1582:248;;-1:-1:-1;1582:248:30;;1638:191;778:408:7;;;1638:191:30;778:408:7;1781:48:30;;1638:191;;:119;-1:-1:-1;778:408:7;;-1:-1:-1;1727:30:30;1710:47;;1638:119;;778:408:7;;;;;;-1:-1:-1;;778:408:7;;;;;;;3316:18:24;778:408:7;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;3316:18:24;778:408:7;;;;;-1:-1:-1;;;;;;;;;;;;778:408:7;;;;;;-1:-1:-1;;;778:408:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;778:408:7;;;;;;;;;;;;;;;;;;;;-1:-1:-1;778:408:7;;-1:-1:-1;778:408:7;;-1:-1:-1;778:408:7;;;;;;;;-1:-1:-1;;778:408:7;;;;7993:30:29;778:408:7;8037:27:29;778:408:7;;;7960:114:29;;-1:-1:-1;;;;;778:408:7;;;;7960:114:29;:::i;778:408:7:-;;;;;;-1:-1:-1;;778:408:7;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;778:408:7;;;;;;;;;;;;-1:-1:-1;;778:408:7;;;;1046:24:32;1063:6;1046:24;:::i;:::-;1117;1134:6;1117:24;:::i;:::-;1205:5;1008:221;778:408:7;1188:23:32;1205:5;1188:23;:::i;:::-;778:408:7;;;;;;;;;1008:221:32;;;;;;;778:408:7;;;:::i;:::-;;;;-1:-1:-1;;;778:408:7;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;:::i;:::-;;1008:221:32;;;;;;;;;:::i;:::-;778:408:7;;;;;;;;;;;;;:::i;:::-;;;;;4896:36:29;778:408:7;;;:::i;:::-;4896:36:29;;:::i;778:408:7:-;;;;;;-1:-1:-1;;778:408:7;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;778:408:7;;;;8276:30:29;778:408:7;8320:20:29;778:408:7;;;8243:113:29;;-1:-1:-1;;;;;778:408:7;;;;8243:113:29;:::i;778:408:7:-;;;;;;-1:-1:-1;;778:408:7;;;;775:27:28;778:408:7;-1:-1:-1;;;;;778:408:7;753:64:28;;778:408:7;;761:10:28;:41;753:64;:::i;:::-;778:408:7;;;;;;;;;;;;;950:13:28;778:408:7;;942:62:28;778:408:7;;;;;;942:62:28;:::i;:::-;778:408:7;;:::i;:::-;;;:::i;:::-;;;;;;;;:::i;:::-;;;;1091:148:28;;;778:408:7;;;;1091:148:28;;778:408:7;;;489:6:24;778:408:7;;;;;;;:::i;:::-;1355:31:28;778:408:7;;;1301:324:28;;;778:408:7;;;1301:324:28;;778:408:7;;;1301:324:28;;778:408:7;;1301:324:28;;;778:408:7;;;1301:324:28;;778:408:7;;;;;;:::i;:::-;;;;;1651:249:28;;;778:408:7;;;1651:249:28;;778:408:7;;;1651:249:28;;778:408:7;;1301:324:28;1651:249;;778:408:7;;;1651:249:28;;778:408:7;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;1924:164:28;;;778:408:7;;;;;;:::i;:::-;;;;;1924:164:28;;778:408:7;;;;;;;:::i;:::-;;;1253:850:28;;;778:408:7;;1253:850:28;;778:408:7;;;;;;;:::i;:::-;;;;1062:1051:28;778:408:7;;;489:6:24;778:408:7;;;;;;;-1:-1:-1;;;;;778:408:7;;;;;;;;;489:6:24;778:408:7;;;;489:6:24;-1:-1:-1;;;;;489:6:24;;;;;;;;;;;:::i;:::-;;;;;;;;;778:408:7;489:6:24;;;;;;;;;;778:408:7;489:6:24;;;;;;;778:408:7;489:6:24;;;;;778:408:7;489:6:24;778:408:7;489:6:24;;;;;;778:408:7;;;;489:6:24;;;;;778:408:7;;489:6:24;;;;;:::i;:::-;;;;;;;;;;;;;;;;;778:408:7;489:6:24;;;;;;;778:408:7;489:6:24;;;;;;;778:408:7;489:6:24;;;;;;778:408:7;;;;489:6:24;;;778:408:7;;;;;;489:6:24;;;:::i;:::-;;;;;778:408:7;;;:::i;:::-;;;;:::i;:::-;489:6:24;778:408:7;489:6:24;;778:408:7;489:6:24;;;;;;;778:408:7;489:6:24;778:408:7;;489:6:24;;;775:20:28;;778:408:7;;;;489:6:24;;;;778:408:7;1301:324:28;489:6:24;;;1355:31:28;778:408:7;489:6:24;;778:408:7;;;;;;;;;;;;;;489:6:24;778:408:7;;;;;489:6:24;;;;;778:408:7;489:6:24;;;;;778:408:7;;;;;;;-1:-1:-1;;;;;778:408:7;;1409:20:20;778:408:7;;;1409:20:20;778:408:7;;489:6:24;;;;;778:408:7;;;;;;;-1:-1:-1;;;;;778:408:7;;489:6:24;778:408:7;;;489:6:24;778:408:7;;489:6:24;;;;;;778:408:7;;489:6:24;;;;778:408:7;1301:324:28;489:6:24;;;;778:408:7;489:6:24;;;778:408:7;489:6:24;778:408:7;;;;;489:6:24;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;778:408:7;489:6:24;;;;;;;778:408:7;489:6:24;;;;;;;778:408:7;489:6:24;;;;;;;;;778:408:7;;;489:6:24;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;778:408:7;;489:6:24;;778:408:7;;489:6:24;;;;;;;778:408:7;489:6:24;;;;;;;778:408:7;489:6:24;;;;;;;778:408:7;;;;489:6:24;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;778:408:7;489:6:24;;;;;;;778:408:7;489:6:24;;;;;;778:408:7;489:6:24;;;;;;2151:15:28;778:408:7;;2151:15:28;;;;:::i;489:6:24:-;;;;-1:-1:-1;489:6:24;;;;;;;;;;;778:408:7;489:6:24;778:408:7;;-1:-1:-1;;;;;;;;;;;489:6:24;778:408:7;489:6:24;;;;;;;;;;778:408:7;489:6:24;;;;;;;;;;;;;;;;;;;;;;;;;;;778:408:7;489:6:24;;;;;;;;;;;;778:408:7;489:6:24;;;;;;;;;;;;;;;;;;;;778:408:7;;-1:-1:-1;;;;;;;;;;;489:6:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;778:408:7;489:6:24;;778:408:7;489:6:24;;;;;;;;;;;;;;-1:-1:-1;489:6:24;;;;;;;;;;778:408:7;489:6:24;778:408:7;;-1:-1:-1;;;;;;;;;;;489:6:24;778:408:7;489:6:24;;;;;;;;;;778:408:7;489:6:24;;;778:408:7;489:6:24;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;489:6:24;;;;;778:408:7;489:6:24;;;;;;;;;;778:408:7;489:6:24;;;;;;;;;;;;;;;;;;;778:408:7;;-1:-1:-1;;;;;;;;;;;489:6:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;778:408:7;489:6:24;;778:408:7;489:6:24;;;;;;;;;;;;;;-1:-1:-1;489:6:24;;;;;;778:408:7;;;;-1:-1:-1;;;;;;;;;;;778:408:7;-1:-1:-1;;;489:6:24;;;;;;;;;;;;;;778:408:7;489:6:24;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;489:6:24;;;;;778:408:7;489:6:24;;;;;;;;;;778:408:7;489:6:24;;;;;;;;;;;;;;;;;;778:408:7;;;489:6:24;778:408:7;;-1:-1:-1;;;;;;;;;;;489:6:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;778:408:7;489:6:24;;;;-1:-1:-1;778:408:7;489:6:24;;;;;;;;;;;;;;-1:-1:-1;489:6:24;;;;;778:408:7;;;;-1:-1:-1;;;;;;;;;;;778:408:7;-1:-1:-1;;;489:6:24;;;;;;;;;;;;;;778:408:7;489:6:24;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;489:6:24;;;;;778:408:7;489:6:24;;;;;;;;;;778:408:7;489:6:24;;;;;;;;;;;;;;;;;;778:408:7;;;;;;-1:-1:-1;;;;;;;;;;;489:6:24;;;;775:20:28;489:6:24;;;;;;;;;;;;;;;;;775:20:28;489:6:24;;;;;;;;;;;;;778:408:7;489:6:24;;;;-1:-1:-1;778:408:7;489:6:24;;;;;;;;;;;;;;-1:-1:-1;489:6:24;;;;;;778:408:7;;;;-1:-1:-1;;;;;;;;;;;778:408:7;-1:-1:-1;;;489:6:24;;;;;;;;;;;;;;778:408:7;489:6:24;;;;;;;;;;;;;;;;;;;;;;;;;778:408:7;489:6:24;;778:408:7;489:6:24;;;;;;;;;;778:408:7;489:6:24;;;;;;;;;;;;;;;;;;778:408:7;;;489:6:24;778:408:7;;-1:-1:-1;;;;;;;;;;;489:6:24;;;;775:20:28;489:6:24;;;;;;;;;;;;;;;;;775:20:28;489:6:24;;;;;;;;;;;;;778:408:7;489:6:24;;;;-1:-1:-1;778:408:7;489:6:24;;;;;;;;;;778:408:7;;;;:::i;:::-;;5582:30:29;778:408:7;;;;;;;;;;;;;;;;;5563:65:29;5571:41;;;5563:65;:::i;:::-;5759:20;778:408:7;-1:-1:-1;;;;;778:408:7;;;;5745:10:29;:40;:101;;;;778:408:7;;;;;;6152:116:29;778:408:7;;6016:27:29;778:408:7;;5745:10:29;6002:41;6001:93;;;;6059:9;;6001:93;;5745:10;6152:116;;:::i;:::-;778:408:7;5759:20:29;778:408:7;;5745:10:29;6350:40;6346:178;778:408:7;;;;6406:28:29;778:408:7;;;;;;;6001:93:29;;;;778:408:7;;;-1:-1:-1;;;778:408:7;;;;;;;;;;;;-1:-1:-1;;;778:408:7;;;;;;;5745:101:29;778:408:7;;5819:27:29;778:408:7;;5745:10:29;5805:41;5745:101;;778:408:7;;;;;;-1:-1:-1;;778:408:7;;;;;3203:18:24;778:408:7;;;;;;;;;;;;;-1:-1:-1;;778:408:7;;;;;5365:26:29;778:408:7;5119:30:29;778:408:7;;5233:113:29;778:408:7;;;;;;5086:114:29;778:408:7;5163:27:29;778:408:7;;5086:114:29;;:::i;:::-;778:408:7;5163:20:29;778:408:7;;5233:113:29;;:::i;:::-;5365:26;;:::i;778:408:7:-;;;-1:-1:-1;;778:408:7;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;778:408:7;;;;;;;;;;;;;;;;;;;;;;;;;;1033:13:20;778:408:7;;1012:113:20;778:408:7;;;;;;1012:113:20;:::i;:::-;778:408:7;;;;;;;;;;2818:64:24;2826:40;;;2818:64;:::i;:::-;1189:32:20;;;1236:9;1189:84;;778:408:7;;;1409:27:20;778:408:7;;1355:91:20;1457:69;1355:91;;;;:::i;:::-;1480:26;778:408:7;-1:-1:-1;1465:41:20;1457:69;:::i;:::-;1573:28;778:408:7;;;;;;;;;;;1558:98:20;;;778:408:7;1558:98:20;;778:408:7;1558:98:20;;;;;;;778:408:7;1558:98:20;;;1189:84;778:408:7;;;;1729:10:20;;1708:162;1729:10;;:41;;;;:97;;;1189:84;1708:162;;;:::i;:::-;1885:28;778:408:7;;1885:32:20;;;;1958:45;778:408:7;;1480:26:20;1881:312;;;2221:46;1881:312;;2327:34;1881:312;;2221:46;:::i;:::-;1885:28;778:408:7;;;;;;;-1:-1:-1;;;;;778:408:7;;1409:20:20;778:408:7;;;1409:20:20;778:408:7;;2327:34:20;1033:13;778:408:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2506:14:20;778:408:7;;2506:14:20;;;;:::i;778:408:7:-;;;-1:-1:-1;;;778:408:7;;;;;;;;;;;;;-1:-1:-1;;;778:408:7;;;;;;;1881:312:20;2094:9;;;:13;778:408:7;;2148:17:20;778:408:7;;1480:26:20;1881:312;;;2221:46;1881:312;;2327:34;1881:312;;2221:46;:::i;778:408:7:-;;;-1:-1:-1;;;778:408:7;;;;;;;;1885:28:20;778:408:7;;;;-1:-1:-1;;;778:408:7;;;;;;;;;;-1:-1:-1;;;778:408:7;;;;;;;;;;;;;-1:-1:-1;;;778:408:7;;;;;;;1729:97:20;1790:36;;;-1:-1:-1;1729:97:20;;;;778:408:7;;;-1:-1:-1;;;778:408:7;;;;;;;;;;;;;-1:-1:-1;;;778:408:7;;;;;;;1558:98:20;;;;;;;;;;;;;;;;:::i;:::-;;;778:408:7;;;;;;;:::i;:::-;1558:98:20;;;;;;;;1189:84;;;;;778:408:7;;;;;;;;;;;;;;;;;;-1:-1:-1;;778:408:7;;;;;529:27:24;;:::i;:::-;778:408:7;529:27:24;;:::i;:::-;778:408:7;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;778:408:7;;;;;;;;;2267:30:24;778:408:7;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;-1:-1:-1;778:408:7;-1:-1:-1;;;;;;;;;;;778:408:7;-1:-1:-1;778:408:7;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;-1:-1:-1;778:408:7;-1:-1:-1;;;;;;;;;;;778:408:7;-1:-1:-1;778:408:7;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;-1:-1:-1;778:408:7;-1:-1:-1;;;;;;;;;;;778:408:7;-1:-1:-1;778:408:7;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;-1:-1:-1;778:408:7;-1:-1:-1;;;;;;;;;;;778:408:7;-1:-1:-1;778:408:7;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;-1:-1:-1;778:408:7;-1:-1:-1;;;;;;;;;;;778:408:7;-1:-1:-1;778:408:7;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;778:408:7;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;778:408:7;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;778:408:7;;;;;;;:::o;:::-;-1:-1:-1;;;;;778:408:7;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;778:408:7;;;;;;;:::o;:::-;;489:6:24;;;778:408:7;;;;;;;;-1:-1:-1;;;;;778:408:7;;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;778:408:7;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;-1:-1:-1;778:408:7;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;:::o;:::-;;;;;;;;-1:-1:-1;;778:408:7;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;489:6:24;778:408:7;-1:-1:-1;;778:408:7;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;778:408:7;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;778:408:7;;;;;;;:::o;:::-;-1:-1:-1;;;;;778:408:7;;;;489:6:24;778:408:7;-1:-1:-1;;778:408:7;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;778:408:7;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;489:6:24;778:408:7;489:6:24;;778:408:7;;;;;;;;:::i;:::-;;;;:::o;:::-;;;-1:-1:-1;;;778:408:7;;;;;;;;;;;;-1:-1:-1;;;778:408:7;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;778:408:7;;;;;;;;;;;;-1:-1:-1;;;778:408:7;;;;;;;;;;;;;;;;;:::o;:::-;;;;:::o;:::-;;;-1:-1:-1;;;778:408:7;;;;;;;;;;;;-1:-1:-1;;;778:408:7;;;;;;;;;;;;;;;;;489:6:24;778:408:7;;;;;489:6:24;778:408:7;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;778:408:7;;;;;;:::i;:::-;489:6:24;778:408:7;489:6:24;;778:408:7;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;-1:-1:-1;778:408:7;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;-1:-1:-1;778:408:7;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;:::o;:::-;;;-1:-1:-1;;;778:408:7;;;;;;;;;;;;-1:-1:-1;;;778:408:7;;;;;;;;;;-1:-1:-1;;;;;778:408:7;;;;;;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;-1:-1:-1;;;778:408:7;;;;:::o;2310:431:24:-;778:408:7;2383:30:24;778:408:7;;;;;;;;2383:4:24;:56;;:4;;-1:-1:-1;2483:24:24;778:408:7;;;-1:-1:-1;;;2462:58:24;;778:408:7;2462:58:24;;778:408:7;;2383:13:24;;778:408:7;;-1:-1:-1;;;;;778:408:7;2462:58:24;;;;;;;-1:-1:-1;2462:58:24;;;2455:65;;:::o;2462:58::-;;;;;;;;;;;;;;;;:::i;:::-;;;778:408:7;;;;;;;;:::i;:::-;;;2462:58:24;;;-1:-1:-1;2462:58:24;;2379:356;2575:21;2541:55;2575:21;;2640:24;778:408:7;;;-1:-1:-1;;;2619:57:24;;778:408:7;2619:57:24;;778:408:7;;2383:13:24;;778:408:7;;-1:-1:-1;;;;;778:408:7;2619:57:24;;;;;;;-1:-1:-1;2619:57:24;;;2612:64;;:::o;2537:198::-;-1:-1:-1;2707:17:24;:::o;2187:180:25:-;778:408:7;;;;;;-1:-1:-1;778:408:7;2328:8:25;778:408:7;;;-1:-1:-1;778:408:7;;;;;;;;-1:-1:-1;778:408:7;;;;-1:-1:-1;778:408:7;;2187:180:25;:::o;778:408:7:-;;;;:::o;:::-;;;-1:-1:-1;;;778:408:7;;;;;;;;;;;;-1:-1:-1;;;778:408:7;;;;;;;;;;-1:-1:-1;;;;;778:408:7;;;;;;:::o;:::-;;;;:::o;:::-;;;-1:-1:-1;;;778:408:7;;;;;;;;;;;;-1:-1:-1;;;778:408:7;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;489:6:24;;;;;;;;778:408:7;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;778:408:7;;;;;;;;;;;:::o;584:507:25:-;;;778:408:7;;;;;;;-1:-1:-1;982:56:25;;-1:-1:-1;;778:408:7;;;;803:8:25;778:408:7;;;;;;;;;;;;;;;;;;2839:5:3;778:408:7;;;;;2839:5:3;:::i;:::-;778:408:7;;;;;;;;;803:8:25;778:408:7;;;;;;;;;;;;;;982:56:25;;;;;:::i;:::-;;;;584:507;:::o;778:408:7:-;;;;;;;;;;:::o;1097:712:25:-;778:408:7;;;;;;-1:-1:-1;778:408:7;;;1322:8:25;778:408:7;;;;;;;;;;;;;;;;;;;;;;;;1412:32:25;;;778:408:7;;3206:5:3;;1697:59:25;3206:5:3;;;;;;1697:59:25;3206:5:3;;:::i;:::-;778:408:7;;;;;;;;;1322:8:25;778:408:7;;;;;;;;;;;;;1697:59:25;;;;;:::i;778:408:7:-;;;-1:-1:-1;;;778:408:7;;;;;;;;;;;;-1:-1:-1;;;778:408:7;;;;;;;;-1:-1:-1;;;;;778:408:7;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:::o;735:786:29:-;;;956:13;778:408:7;;;;;;;;;;1017:47:29;1034:30;996:176;1017:47;;;:115;;;;735:786;996:176;;:::i;:::-;1191:15;;778:408:7;;;;;;;;1240:32:29;;;;1236:121;;735:786;1378:54;;1448:40;1378:54;;1448:40;1378:54;;;;;:::i;:::-;778:408:7;;;1448:40:29;;;;;:::i;1236:121::-;778:408:7;915:33:31;;-1:-1:-1;915:85:31;;;;1236:121:29;915:137:31;;;;1236:121:29;894:195:31;;;;;:::i;:::-;1812:25;;;:::i;:::-;778:408:7;-1:-1:-1;;;;;778:408:7;;665:25:31;;;:::i;:::-;778:408:7;;;-1:-1:-1;;;721:40:31;;-1:-1:-1;;;;;778:408:7;;721:40:31;;;778:408:7;;;1327:4:29;721:40:31;778:408:7;;;;;;;721:40:31;;778:408:7;;721:40:31;;778:408:7;;721:40:31;;;;;;778:408:7;;;721:40:31;;;;;;;;-1:-1:-1;721:40:31;;;1236:121:29;721:49:31;;778:408:7;;;;-1:-1:-1;778:408:7;;;;;;;;;;;;;;1919:50:31;;778:408:7;1919:50:31;;;778:408:7;1327:4:29;778:408:7;;;;;;;;;;1919:50:31;;;;;;;-1:-1:-1;1919:50:31;;;1236:121:29;1898:112:31;1448:40:29;1898:112:31;;;;;:::i;:::-;1236:121:29;;;;1919:50:31;;;;;;;;;;;;;;;;:::i;:::-;;;778:408:7;;;;;;1898:112:31;778:408:7;1448:40:29;778:408:7;;;:::i;:::-;1919:50:31;;;;;;;;778:408:7;;;-1:-1:-1;;;778:408:7;;;;;;;;;;;;;-1:-1:-1;;;778:408:7;;;;;;;721:40:31;;;;;;;;;;;;;;;;:::i;:::-;;;778:408:7;;;;;;;;721:40:31;;;;;;;;915:137;778:408:7;;;;894:195:31;915:137;;;;778:408:7;;;;;;-1:-1:-1;778:408:7;;;-1:-1:-1;778:408:7;915:85:31;1034:30:29;968:32:31;;;-1:-1:-1;915:85:31;;778:408:7;;;;;;-1:-1:-1;778:408:7;;;-1:-1:-1;778:408:7;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;778:408:7;;;;;1017:115:29;956:13;1084:48;;;;1017:115;;;778:408:7;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;-1:-1:-1;778:408:7;;;;:::o;:::-;;;:::o;:::-;;;;:::o;:::-;;;-1:-1:-1;;;778:408:7;;;;;;;;;;;;-1:-1:-1;;;778:408:7;;;;;;;3133:1294:29;;;3315:101;;;;;:::i;:::-;3467:24;778:408:7;;;;-1:-1:-1;;;3446:73:29;;778:408:7;;;;;3446:73:29;;-1:-1:-1;;;;;778:408:7;3446:73:29;;778:408:7;;;3446:73:29;778:408:7;3446:73:29;778:408:7;;3446:73:29;;;;;;;-1:-1:-1;3446:73:29;;;3133:1294;778:408:7;;;;;;;;;;;;;3557:87:29;;;;;;;;;;;;-1:-1:-1;3557:87:29;;;3133:1294;-1:-1:-1;778:408:7;;3659:20:29;;778:408:7;;;;;;3699:32:29;;;3769:93;;;;;;;3880:30;-1:-1:-1;3769:93:29;;;-1:-1:-1;;;;;;;;;;;3769:93:29;4359:33;3769:93;;;;;:::i;3880:30::-;778:408:7;-1:-1:-1;;;;;778:408:7;;;;;;;;;;;;;;;;;;;;3695:319:29;778:408:7;;;;;-1:-1:-1;778:408:7;;;;915:33:31;;:85;;;;;3695:319:29;915:137:31;;;;3695:319:29;894:195:31;;1515:25;-1:-1:-1;894:195:31;;1508:53;894:195;;:::i;:::-;1515:25;:::i;:::-;778:408:7;;;;;;;;;;;;;;1508:53:31;;;;778:408:7;;;;;;;;;;;;;;;;;;;;;1508:53:31;;;;;;;;;;-1:-1:-1;1508:53:31;;;3695:319:29;1487:115:31;;-1:-1:-1;;;;;;;;;;;1487:115:31;;;;4359:33:29;1487:115:31;;:::i;:::-;3695:319:29;;1508:53:31;;;;;;;;;;;;;;;;:::i;:::-;;;778:408:7;;;;;-1:-1:-1;;;;;;;;;;;778:408:7;;;1487:115:31;778:408:7;4359:33:29;778:408:7;;:::i;:::-;1508:53:31;;;;;;;;;;;;;;;778:408:7;;;-1:-1:-1;778:408:7;;;;;915:137:31;778:408:7;;;;;;;;;;915:137:31;;;;;;-1:-1:-1;1515:25:31;915:137;;778:408:7;;;;;;-1:-1:-1;778:408:7;;;-1:-1:-1;778:408:7;915:85:31;979:21;968:32;;;-1:-1:-1;915:85:31;;3655:689:29;778:408:7;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;;4359:33:29;4048:32;;4359:33;;4059:21;4048:32;;4059:21;;4100:22;;;;:::i;:::-;;3655:689;;4044:290;778:408:7;4147:33:29;;778:408:7;;4200:19:29;;;;:::i;4143:191::-;4044:290;4240:94;4296:23;;;:::i;3557:87::-;;;;;;;;;;;;;;;;:::i;:::-;;;778:408:7;;;;;;;;;:::i;:::-;3557:87:29;;;;;;;;;778:408:7;;;-1:-1:-1;778:408:7;;;;;3446:73:29;;;;;;;;;;;;;;;;:::i;:::-;;;778:408:7;;;;;;;;;;:::i;:::-;3446:73:29;;;;;;;;;;778:408:7;;;;;;;;;;;;;;;;;;:::o;588:1298:21:-;737:24;778:408:7;;;;-1:-1:-1;;;716:57:21;;;778:408:7;;588:1298:21;-1:-1:-1;;;;;778:408:7;716:57:21;;778:408:7;716:57:21;;;;778:408:7;;716:57:21;;778:408:7;;;;716:57:21;;;;;;;-1:-1:-1;716:57:21;;;588:1298;-1:-1:-1;796:15:21;778:408:7;;;-1:-1:-1;;;709:110:21;;;778:408:7;;;-1:-1:-1;;;;;778:408:7;709:110:21;;;778:408:7;;;;;;;;;;;;;;;;;;;;;;;;;709:110:21;778:408:7;;709:110:21;;-1:-1:-1;709:110:21;;;;;;;;588:1298;778:408:7;;737:24:21;778:408:7;;;;;1008:57:21;;;;;;;;;;;;;;;-1:-1:-1;1008:57:21;;;588:1298;-1:-1:-1;778:408:7;;-1:-1:-1;;;1079:58:21;;;778:408:7;;1079:58:21;778:408:7;1079:58:21;778:408:7;1079:58:21;;;;;;;;-1:-1:-1;1079:58:21;;;588:1298;778:408:7;;;;;;;;;;;1151:62:21;;;;-1:-1:-1;1151:62:21;;;778:408:7;1151:62:21;;;;;;;;975:273;1151:62;;;;-1:-1:-1;1151:62:21;;;588:1298;975:273;;:::i;:::-;778:408:7;;737:24:21;778:408:7;;;;;1322:58:21;;;;;;;;;;;;;;;-1:-1:-1;1322:58:21;;;588:1298;778:408:7;;;;;;;1394:58:21;;;;;;;;;;;;;;;;;;;-1:-1:-1;1394:58:21;;;588:1298;778:408:7;;;;1466:62:21;;;;;;778:408:7;1466:62:21;;;778:408:7;1466:62:21;;;;;;;;1289:276;1466:62;;;;-1:-1:-1;1466:62:21;;;1289:276;;:::i;:::-;778:408:7;;737:24:21;778:408:7;;;;;1583:58:21;;;;;;;;;;;;;;;;;;;-1:-1:-1;1583:58:21;;;588:1298;778:408:7;;;;1681:58:21;;;;;;;;;;;;;-1:-1:-1;1681:58:21;;;588:1298;-1:-1:-1;778:408:7;;1576:214:21;;;-1:-1:-1;;;;;778:408:7;;;;1576:214:21;;;778:408:7;;;;;;;;;;;;;;;;1576:214:21;;;778:408:7;1576:214:21;;778:408:7;;-1:-1:-1;;778:408:7;1576:214:21;;;;;;;;;;588:1298;1822:35;;;;;:::i;:::-;;778:408:7;588:1298:21;:::o;1576:214::-;;;;;;;;;;;;;:::i;:::-;;;778:408:7;;;;;1822:35:21;778:408:7;;:::i;:::-;;1576:214:21;;;;;;;;;778:408:7;;-1:-1:-1;778:408:7;;;;;1681:58:21;;;;;;;;;;;;;;;;:::i;:::-;;;778:408:7;;;;;;-1:-1:-1;778:408:7;;;;;;;;;:::i;:::-;1681:58:21;;;;;;;;;;;;;;;;;778:408:7;;;-1:-1:-1;778:408:7;;;;;1583:58:21;;;;;;;;;;;;;;;;;:::i;:::-;;;778:408:7;;;;;;;;;:::i;:::-;1583:58:21;;;;;;;;;;778:408:7;;;-1:-1:-1;778:408:7;;;;;1466:62:21;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;1394:58;;;;;;;;;;;;;;;;;:::i;:::-;;;778:408:7;;;;;;;;;:::i;:::-;1394:58:21;;;;;;;;;;778:408:7;;;-1:-1:-1;778:408:7;;;;;1322:58:21;;;;;;;;;;;;;;;:::i;:::-;;;778:408:7;;;;;;;;:::i;:::-;1322:58:21;;;;;;;;1151:62;;;;;;;;;;;;;;;:::i;1079:58::-;;;;;;;;;;;;;;;:::i;:::-;;;778:408:7;;;;;;;;:::i;:::-;1079:58:21;;;;;;;;1008:57;;;;;;;;;;;;;;;;:::i;:::-;;;778:408:7;;;;;;;;:::i;:::-;1008:57:21;;;;;;;;;709:110;;;;;;;;;;;;;;:::i;:::-;;;778:408:7;;;;;;;:::i;:::-;;709:110:21;;;;;;;;716:57;;;;;;;;;;;;;;;;:::i;:::-;;;778:408:7;;;;;;;;:::i;:::-;716:57:21;;;;;;;;;;778:408:7;;;-1:-1:-1;778:408:7;;;;;1892:1164:21;;2073:24;778:408:7;;-1:-1:-1;778:408:7;;;;;;;;2052:58:21;;;;;;;778:408:7;;;;;;;;;;;;;2052:58:21;;;;;;;;;;;;;;1892:1164;778:408:7;;2046:102:21;;;;;778:408:7;;;;;;;;;;;;;2046:102:21;;;;;;;;;;;;;;;1892:1164;778:408:7;;;2073:24:21;778:408:7;;;;2212:58:21;;;;;;;;;;;;;;;;;;1892:1164;-1:-1:-1;2293:15:21;778:408:7;;;-1:-1:-1;;;2205:111:21;;;778:408:7;;;-1:-1:-1;;;;;778:408:7;2205:111:21;;;778:408:7;;;;;;;;;;;;;;;;;;;;;;;;;;;2205:111:21;778:408:7;;2205:111:21;;;;;;;;1892:1164;778:408:7;;2073:24:21;778:408:7;;;;2506:58:21;;;;;;;;;;;;;;;;;;;1892:1164;-1:-1:-1;778:408:7;;-1:-1:-1;;;2578:58:21;;;778:408:7;2578:58:21;778:408:7;2578:58:21;778:408:7;2578:58:21;;;;;;;;;;;;;;1892:1164;-1:-1:-1;778:408:7;;-1:-1:-1;;;2650:62:21;;778:408:7;2650:62:21;;;778:408:7;;;;;;;;2650:62:21;;;;;;;;2473:274;2650:62;;;;;;;;;;2473:274;;:::i;:::-;778:408:7;;2073:24:21;778:408:7;;;;;;;2765:58:21;;;;;;;;;;;;;;;;;;;;;1892:1164;778:408:7;;;;2863:58:21;;;;;;;;;;;;;;;;;1892:1164;-1:-1:-1;778:408:7;;2758:208:21;;;-1:-1:-1;;;;;778:408:7;;;;2758:208:21;;;778:408:7;;;;;;;;;;;;;;;;;2758:208:21;;;778:408:7;2758:208:21;;778:408:7;;;;;2758:208:21;;;;;;;;;;1892:1164;2998:29;;;;;;:::i;2758:208::-;;;;;;;;;;;;;:::i;:::-;;;778:408:7;;;;;;;2998:29:21;778:408:7;;:::i;:::-;;2758:208:21;;;;;;;;;;;778:408:7;;;;;;;;2863:58:21;;;;;;;;;;;;;;;;;:::i;:::-;;;778:408:7;;;;;;;;;;;;;;;:::i;:::-;2863:58:21;;;;;;;;;;;778:408:7;;;;2863:58:21;;;;;;778:408:7;;;;;;;;;2765:58:21;;;;;;;;;;;;;;;;;:::i;:::-;;;778:408:7;;;;;;;;:::i;:::-;2765:58:21;;;;778:408:7;;;;2765:58:21;;;;;;778:408:7;;;;;;;;;2650:62:21;778:408:7;;;;;;;;;2578:58:21;;;;;;;;;;;;;;;;:::i;:::-;;;778:408:7;;;;;;;;;;;:::i;:::-;2578:58:21;;;;778:408:7;;;;2578:58:21;;;;;2506;;;;;;;;;;;;;;;;;:::i;:::-;;;778:408:7;;;;;;;:::i;:::-;2506:58:21;;;;;;;;;2205:111;;;;;;;;;;;;;;:::i;:::-;;;778:408:7;;;;;;;:::i;:::-;;2205:111:21;;;;;;;;2212:58;;;;;;;;;;;;;;;;;:::i;:::-;;;778:408:7;;;;;;;:::i;:::-;2212:58:21;;;;778:408:7;;;;2212:58:21;;;;;;778:408:7;;;;;;;;;2046:102:21;;;;;;;:::i;:::-;;;;;2052:58;;;;;;;;;;;;;;;;;;:::i;:::-;;;778:408:7;;;;;;;;:::i;:::-;2052:58:21;;;;;;;;3440:1217;3744:15;778:408:7;;;-1:-1:-1;;;3678:91:21;;3725:4;3744:15;3678:91;;778:408:7;-1:-1:-1;;;;;778:408:7;;;;;;;;;3440:1217:21;;;;778:408:7;;;;;;3678:91:21;778:408:7;;;;3678:91:21;;;;;;;;-1:-1:-1;3678:91:21;;;3440:1217;3783:20;;3779:110;;3440:1217;3991:15;4009:2;3991:15;778:408:7;3991:15:21;;;778:408:7;;;3744:15:21;778:408:7;;;;;;;-1:-1:-1;;;;;778:408:7;;-1:-1:-1;;;;;778:408:7;;;;;;;;;;;;;;;-1:-1:-1;;;;;778:408:7;;;3678:91:21;4244:369;;;778:408:7;;;;;;;4244:369:21;;;778:408:7;;;3725:4:21;4244:369;;;778:408:7;;;4244:369:21;;;778:408:7;;;;4244:369:21;;778:408:7;;;-1:-1:-1;4244:369:21;;;778:408:7;;;;4244:369:21;;778:408:7;;;;;-1:-1:-1;;;4185:438:21;;778:408:7;;;;3744:15:21;4185:438;;778:408:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3678:91:21;778:408:7;;;;;;-1:-1:-1;4185:438:21;;;;;;;-1:-1:-1;4185:438:21;;;4634:16;3440:1217;:::o;4185:438::-;;3678:91;4185:438;;3678:91;4185:438;;;;;;3678:91;4185:438;;;:::i;:::-;;;778:408:7;;;;;;3440:1217:21;:::o;4185:438::-;;;-1:-1:-1;4185:438:21;;3779:110;778:408:7;;-1:-1:-1;;;3819:59:21;;3744:15;3819:59;;778:408:7;;;;-1:-1:-1;;778:408:7;;;;3678:91:21;778:408:7;;;-1:-1:-1;3819:59:21;;;;;;;;3779:110;3819:59;3678:91;3819:59;;3678:91;3819:59;;;;;;3678:91;3819:59;;;:::i;:::-;;;778:408:7;;;;;;;:::i;:::-;;3819:59:21;3779:110;;3819:59;;;-1:-1:-1;3819:59:21;;3678:91;;;;;;;;;;;;;;;;;:::i;:::-;;;778:408:7;;;;;;;;3678:91:21;;;;;;-1:-1:-1;3678:91:21;;174:207:22;281:24;778:408:7;;;-1:-1:-1;;;260:58:22;;-1:-1:-1;;;;;778:408:7;260:58:22;;778:408:7;;260:58:22;;778:408:7;;;;260:58:22;;;;;;;-1:-1:-1;260:58:22;;;174:207;778:408:7;;254:99:22;;;;;;-1:-1:-1;778:408:7;;;;;;;;;;;;;;254:99:22;;260:58;254:99;;778:408:7;254:99:22;;;;;;;;363:11;778:408:7;174:207:22;:::o;254:99::-;;;;:::i;:::-;;;;260:58;;;;;;;;;;;;;;;;:::i;:::-;;;778:408:7;;;;;;;;:::i;:::-;260:58:22;;;;;;-1:-1:-1;260:58:22;;1527:1195:29;;;;778:408:7;1853:13:29;778:408:7;;;;;;;;1982:47:29;1999:30;1961:176;1982:47;;;:115;;;;1961:176;;:::i;:::-;778:408:7;;;;;;2212:32:29;;;-1:-1:-1;2382:40:29;;;;;;;;;;;2208:298;-1:-1:-1;;;;;778:408:7;;2382:40:29;;;;2648:41;2208:298;;2648:41;2578:55;;;;;:::i;2382:40::-;;;-1:-1:-1;2382:40:29;;2208:298;778:408:7;;;;;915:33:31;;-1:-1:-1;915:85:31;;;;2208:298:29;915:137:31;;;;2208:298:29;894:195:31;;1508:53;894:195;;1508:53;894:195;;:::i;:::-;-1:-1:-1;;;;;1515:25:31;;;:::i;:::-;778:408:7;;-1:-1:-1;778:408:7;;;;;;;;;;;1508:53:31;;1853:13:29;1508:53:31;;778:408:7;;;;;;;;;;;;;;;;;;;;;1508:53:31;;;;;;;;;;-1:-1:-1;1508:53:31;;;2208:298:29;1487:115:31;;;2648:41:29;1487:115:31;;;:::i;:::-;2208:298:29;;1508:53:31;;;;;;;;;;;;;;;;:::i;:::-;;;778:408:7;;;;;;1487:115:31;778:408:7;2648:41:29;778:408:7;;;:::i;:::-;1508:53:31;;;;;;;;;-1:-1:-1;1508:53:31;;915:137;778:408:7;;;;;915:137:31;-1:-1:-1;1508:53:31;915:137;;:85;1999:30:29;968:32:31;;;-1:-1:-1;915:85:31;;778:408:7;;;;:::o;:::-;;;-1:-1:-1;;;778:408:7;;;;;;;;;;;;-1:-1:-1;;;778:408:7;;;;;;;98:383:31;778:408:7;;;;;;222:21:31;211:32;;207:114;;778:408:7;335:33:31;331:116;;-1:-1:-1;98:383:31;:::o;331:116::-;410:24;778:408:7;;;-1:-1:-1;;;389:58:31;;778:408:7;389:58:31;;778:408:7;;389:58:31;;778:408:7;;-1:-1:-1;;;;;778:408:7;389:58:31;;;;;;;-1:-1:-1;389:58:31;;;382:65;;:::o;207:114::-;-1:-1:-1;285:24:31;778:408:7;;;-1:-1:-1;;;264:57:31;;778:408:7;264:57:31;;778:408:7;;264:57:31;;778:408:7;;-1:-1:-1;;;;;778:408:7;264:57:31;;;;;;;-1:-1:-1;264:57:31;;;257:64;;:::o;447:696:1:-;569:17;-1:-1:-1;10276:8:2;;10267:17;;;;10263:103;;447:696:1;10392:8:2;;10383:17;;;;10379:103;;447:696:1;10508:8:2;;10499:17;;;;10495:103;;447:696:1;10624:7:2;;10615:16;;;;10611:100;;447:696:1;10737:7:2;;10728:16;;;;10724:100;;447:696:1;10841:16:2;10850:7;10841:16;;;10837:100;;447:696:1;10963:7:2;10954:16;;;;10950:66;;447:696:1;589:1;778:408:7;;731:76:1;778:408:7;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;489:6:24;;778:408:7;;:::i;:::-;;;;;;;731:76:1;;;820:280;589:1;;;820:280;1113:13;;;;447:696;:::o;820:280::-;-1:-1:-1;;778:408:7;;489:6:24;;-1:-1:-1;;;925:93:1;;;;778:408:7;925:93:1;778:408:7;1035:11:1;;1068:10;1064:21;;820:280;;;;;1064:21;1080:5;;10950:66:2;778:408:7;11000:1:2;778:408:7;10950:66:2;;;10837:100;778:408:7;;10850:7:2;10921:1;778:408:7;;;;10837:100:2;;;10724;10808:1;778:408:7;;;;;;10724:100:2;;;;10611;10695:1;778:408:7;;;;;;10611:100:2;;;;10495:103;10581:2;778:408:7;;;;;;10495:103:2;;;;10379;10465:2;778:408:7;;;;;;10379:103:2;;;;10263;10349:2;;-1:-1:-1;778:408:7;;;-1:-1:-1;10263:103:2;;"},"gasEstimates":{"creation":{"codeDepositCost":"4303800","executionCost":"infinite","totalCost":"infinite"},"external":{"acceptPost(uint8,uint256,address,address)":"infinite","addStake(uint8,address,uint256)":"infinite","createPost(bytes,uint8,uint8,uint256,uint256,uint8,address,address,bool)":"infinite","finalizePost(bool,uint256,bytes32)":"infinite","getBuyerStake()":"6844","getEncryptedPost()":"infinite","getPaymentRequested()":"2676","getPost()":"infinite","getSellerStake()":"6954","getStake(uint8,address)":"2762","getStakeRequested()":"2761","getStatus()":"2505","getTokenId()":"2310","getTokenIdAddress()":"infinite","getTotalStaked()":"infinite","owner()":"2634","post()":"infinite","postCount()":"2346","renouncePost()":"infinite","revealData(bytes)":"infinite","submitHash(bytes)":"infinite","takeFullStake(uint8,address)":"infinite","takeStake(uint8,address,uint256)":"infinite","version()":"infinite"}},"methodIdentifiers":{"acceptPost(uint8,uint256,address,address)":"07388dba","addStake(uint8,address,uint256)":"1d0b4af5","createPost(bytes,uint8,uint8,uint256,uint256,uint8,address,address,bool)":"d2af47ab","finalizePost(bool,uint256,bytes32)":"8f287dc2","getBuyerStake()":"4c38d877","getEncryptedPost()":"729e2eb1","getPaymentRequested()":"d24e0c87","getPost()":"8c6838ba","getSellerStake()":"5c63ed69","getStake(uint8,address)":"52a6cb4a","getStakeRequested()":"faeb5e17","getStatus()":"4e69d560","getTokenId()":"010a38f5","getTokenIdAddress()":"5ad4e170","getTotalStaked()":"0917e776","owner()":"8da5cb5b","post()":"05c1f502","postCount()":"17906c2e","renouncePost()":"3d876d5d","revealData(bytes)":"7abe914d","submitHash(bytes)":"8f903c79","takeFullStake(uint8,address)":"f2d7dbb6","takeStake(uint8,address,uint256)":"ed70d5d5","version()":"54fd4d50"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usersModuleContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factoryContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_major\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_patch\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Accepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDeposit\",\"type\":\"uint256\"}],\"name\":\"DepositDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDeposit\",\"type\":\"uint256\"}],\"name\":\"DepositIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Invalid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"MadePublic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Renounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"name\":\"StakeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"name\":\"StakeTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Valid\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"acceptPost\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_funder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToAdd\",\"type\":\"uint256\"}],\"name\":\"addStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encryptedHash\",\"type\":\"bytes\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostDuration\",\"name\":\"postDuration\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useStake\",\"type\":\"bool\"}],\"name\":\"createPost\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.Post\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"finalizePost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyerStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEncryptedPost\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaymentRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPost\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.Post\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellerStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenIdAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"post\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"name\":\"revealData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"}],\"name\":\"submitHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"takeFullStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToTake\",\"type\":\"uint256\"}],\"name\":\"takeStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"version()\":{\"returns\":{\"_0\":\"Semver contract version as a string.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"version()\":{\"notice\":\"Returns the full semver contract version.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/features/MecenateFeed.sol\":\"MecenateFeed\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/features/MecenateFeed.sol\":{\"content\":\"/**\\n * @title MecenateFeed\\n * @dev This contract implements the MecenateFeed feature, which allows users to create and manage posts for crowdfunding campaigns.\\n * The contract inherits from several modules that provide functionality for post creation, acceptance, submission, finalization, and renouncement.\\n * The contract also provides several view functions to retrieve information about a post's buyer payment, seller deposit, seller stake, buyer stake, payment requested, post status, and post count.\\n */\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../modules/Events.sol\\\";\\nimport \\\"../modules/Creation.sol\\\";\\nimport \\\"../modules/Acceptance.sol\\\";\\nimport \\\"../modules/Submission.sol\\\";\\nimport \\\"../modules/Finalization.sol\\\";\\nimport \\\"../modules/Renounce.sol\\\";\\n\\ncontract MecenateFeed is\\n    Events,\\n    Creation,\\n    Acceptance,\\n    Renounce,\\n    Submission,\\n    Finalization\\n{\\n    constructor(\\n        address _owner,\\n        address _usersModuleContract,\\n        address _factoryContract,\\n        uint256 _major,\\n        uint256 _minor,\\n        uint256 _patch\\n    ) Data(_usersModuleContract, _factoryContract, _major, _minor, _patch) {\\n        owner = _owner;\\n    }\\n}\\n\",\"keccak256\":\"0xc791589db0be08642212bdf0c8bb3935b994b510871cd5645a023f12b877b55c\",\"license\":\"MIT\"},\"contracts/helpers/eas/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror DeadlineExpired();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/// @notice A struct representing ECDSA signature data.\\nstruct Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/// @notice A struct representing a single attestation.\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/// @notice A helper function to work with unchecked iterators in loops.\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685\",\"license\":\"MIT\"},\"contracts/helpers/eas/IEAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ISchemaRegistry} from \\\"./ISchemaRegistry.sol\\\";\\nimport {Attestation, Signature} from \\\"./Common.sol\\\";\\n\\n/// @notice A struct representing the arguments of the attestation request.\\nstruct AttestationRequestData {\\n    address recipient; // The recipient of the attestation.\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes32 refUID; // The UID of the related attestation.\\n    bytes data; // Custom attestation data.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the attestation request.\\nstruct AttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the full delegated attestation request.\\nstruct DelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n    Signature signature; // The ECDSA signature data.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi attestation request.\\nstruct MultiAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi attestation request.\\nstruct MultiDelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the arguments of the revocation request.\\nstruct RevocationRequestData {\\n    bytes32 uid; // The UID of the attestation to revoke.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the revocation request.\\nstruct RevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the arguments of the full delegated revocation request.\\nstruct DelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n    Signature signature; // The ECDSA signature data.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi revocation request.\\nstruct MultiRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi revocation request.\\nstruct MultiDelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @title IEAS\\n/// @notice EAS - Ethereum Attestation Service interface.\\ninterface IEAS {\\n    /// @notice Emitted when an attestation has been made.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param uid The UID the revoked attestation.\\n    /// @param schemaUID The UID of the schema.\\n    event Attested(\\n        address indexed recipient,\\n        address indexed attester,\\n        bytes32 uid,\\n        bytes32 indexed schemaUID\\n    );\\n\\n    /// @notice Emitted when an attestation has been revoked.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param schemaUID The UID of the schema.\\n    /// @param uid The UID the revoked attestation.\\n    event Revoked(\\n        address indexed recipient,\\n        address indexed attester,\\n        bytes32 uid,\\n        bytes32 indexed schemaUID\\n    );\\n\\n    /// @notice Emitted when a data has been timestamped.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event Timestamped(bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /// @notice Emitted when a data has been revoked.\\n    /// @param revoker The address of the revoker.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event RevokedOffchain(\\n        address indexed revoker,\\n        bytes32 indexed data,\\n        uint64 indexed timestamp\\n    );\\n\\n    /// @notice Returns the address of the global schema registry.\\n    /// @return The address of the global schema registry.\\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\\n\\n    /// @notice Attests to a specific schema.\\n    /// @param request The arguments of the attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attest({\\n    ///         schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",\\n    ///         data: {\\n    ///             recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n    ///             data: \\\"0xF00D\\\",\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function attest(\\n        AttestationRequest calldata request\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attestByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function attestByDelegation(\\n        DelegatedAttestationRequest calldata delegatedRequest\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to multiple schemas.\\n    /// @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttest([{\\n    ///         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\\n    ///             data: '0x12345678',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiAttest(\\n        MultiAttestationRequest[] calldata multiRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Attests to multiple schemas using via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\\n    ///     grouped by distinct schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttestByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiAttestByDelegation(\\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Revokes an existing attestation to a specific schema.\\n    /// @param request The arguments of the revocation request.\\n    ///\\n    /// Example:\\n    ///     revoke({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function revoke(RevocationRequest calldata request) external payable;\\n\\n    /// @notice Revokes an existing attestation to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated revocation request.\\n    ///\\n    /// Example:\\n    ///     revokeByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 27,\\n    ///             r: '0xb593...7142',\\n    ///             s: '0x0f5b...2cce'\\n    ///         },\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function revokeByDelegation(\\n        DelegatedRevocationRequest calldata delegatedRequest\\n    ) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas.\\n    /// @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevoke([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiRevoke(\\n        MultiRevocationRequest[] calldata multiRequests\\n    ) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests\\n    ///     should be grouped by distinct schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevokeByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiRevokeByDelegation(\\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\\n    ) external payable;\\n\\n    /// @notice Timestamps the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function timestamp(bytes32 data) external returns (uint64);\\n\\n    /// @notice Timestamps the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\\n\\n    /// @notice Revokes the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function revokeOffchain(bytes32 data) external returns (uint64);\\n\\n    /// @notice Revokes the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function multiRevokeOffchain(\\n        bytes32[] calldata data\\n    ) external returns (uint64);\\n\\n    /// @notice Returns an existing attestation by UID.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return The attestation data members.\\n    function getAttestation(\\n        bytes32 uid\\n    ) external view returns (Attestation memory);\\n\\n    /// @notice Checks whether an attestation exists.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return Whether an attestation exists.\\n    function isAttestationValid(bytes32 uid) external view returns (bool);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getTimestamp(bytes32 data) external view returns (uint64);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getRevokeOffchain(\\n        address revoker,\\n        bytes32 data\\n    ) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xc95cca3d90dbae3a21d0f0e28fdf38cc5a85cbd8c760b7759782b18e8f62acc2\",\"license\":\"MIT\"},\"contracts/helpers/eas/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ISchemaResolver} from \\\"./ISchemaResolver.sol\\\";\\n\\n/// @notice A struct representing a record for a submitted schema.\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\n/// @title ISchemaRegistry\\n/// @notice The interface of global attestation schemas for the Ethereum Attestation Service protocol.\\ninterface ISchemaRegistry {\\n    /// @notice Emitted when a new schema has been registered\\n    /// @param uid The schema UID.\\n    /// @param registerer The address of the account used to register the schema.\\n    /// @param schema The schema data.\\n    event Registered(\\n        bytes32 indexed uid,\\n        address indexed registerer,\\n        SchemaRecord schema\\n    );\\n\\n    /// @notice Submits and reserves a new schema\\n    /// @param schema The schema data schema.\\n    /// @param resolver An optional schema resolver.\\n    /// @param revocable Whether the schema allows revocations explicitly.\\n    /// @return The UID of the new schema.\\n    function register(\\n        string calldata schema,\\n        ISchemaResolver resolver,\\n        bool revocable\\n    ) external returns (bytes32);\\n\\n    /// @notice Returns an existing schema by UID\\n    /// @param uid The UID of the schema to retrieve.\\n    /// @return The schema data members.\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\\n\",\"keccak256\":\"0x743ddc248c97a78d34239035d1d9557a74dcaaa5b59a2aa66cea4eadabb8b2de\",\"license\":\"MIT\"},\"contracts/helpers/eas/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {Attestation} from \\\"./Common.sol\\\";\\n\\n/// @title ISchemaResolver\\n/// @notice The interface of an optional schema resolver.\\ninterface ISchemaResolver {\\n    /// @notice Checks if the resolver can be sent ETH.\\n    /// @return Whether the resolver supports ETH transfers.\\n    function isPayable() external pure returns (bool);\\n\\n    /// @notice Processes an attestation and verifies whether it's valid.\\n    /// @param attestation The new attestation.\\n    /// @return Whether the attestation is valid.\\n    function attest(\\n        Attestation calldata attestation\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes multiple attestations and verifies whether they are valid.\\n    /// @param attestations The new attestations.\\n    /// @param values Explicit ETH amounts which were sent with each attestation.\\n    /// @return Whether all the attestations are valid.\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\\n    /// @param attestation The existing attestation to be revoked.\\n    /// @return Whether the attestation can be revoked.\\n    function revoke(\\n        Attestation calldata attestation\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\\n    /// @param attestations The existing attestations to be revoked.\\n    /// @param values Explicit ETH amounts which were sent with each revocation.\\n    /// @return Whether the attestations can be revoked.\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0x97ec835833519c6c11c0fb097ea5bccd888e65f650590fdb643d937430bb4f03\",\"license\":\"MIT\"},\"contracts/interfaces/IMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n// import IERC20 from openzeppelin\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMUSE is IERC20 {\\n    function increaseAllowance(\\n        address spender,\\n        uint256 addedValue\\n    ) external returns (bool);\\n\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 subtractedValue\\n    ) external returns (bool);\\n\\n    function mint(uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x8b0a4012a1cd0815460bb3d15278671589bb85003ff2c38315701b3f2228c633\"},\"contracts/interfaces/IMecenateFeed.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateFeed {\\n    function getPost() external view returns (Structures.Post memory);\\n\\n    function getTotalStaked() external view returns (uint256);\\n\\n    function postCount() external view returns (uint256);\\n\\n    function acceptPost(\\n        Structures.Tokens,\\n        uint256 _amount,\\n        address _funder,\\n        address _buyer\\n    ) external payable;\\n\\n    function getSellerStake() external view returns (uint256);\\n\\n    function getBuyerStake() external view returns (uint256);\\n\\n    function getPaymentRequested() external view returns (uint256);\\n\\n    function getStakeRequested() external view returns (uint256);\\n\\n    function getStatus() external view returns (Structures.PostStatus status);\\n\\n    function getTokenId() external view returns (Structures.Tokens tokenId);\\n\\n    function owner() external view returns (address);\\n\\n    function version() external view returns (string memory);\\n\\n    function getEncryptedPost() external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xe7a4b838d4f4540e4a8e3911c2afea70ebd9a2e87bd526eef13b203c2643a645\"},\"contracts/interfaces/IMecenateFeedFactory.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\ninterface IMecenateFeedFactory {\\n    function owner() external view returns (address payable);\\n\\n    function treasuryContract() external view returns (address payable);\\n\\n    function feeds() external view returns (address[] memory);\\n\\n    function contractCounter() external view returns (uint256);\\n\\n    function isFeed(address _feed) external view returns (bool);\\n\\n    function museToken() external view returns (address);\\n\\n    function wethToken() external view returns (address);\\n\\n    function daiToken() external view returns (address);\\n\\n    function router() external view returns (address);\\n\\n    function getRouterFee(uint8 tokenId) external view returns (uint24);\\n\\n    function burnEnabled() external view returns (bool);\\n\\n    function version() external view returns (string memory);\\n\\n    function easSchema() external view returns (bytes32);\\n\\n    function easContract() external view returns (address);\\n}\\n\",\"keccak256\":\"0x79da402b87332cbe8176ab1d0abd2c5369a0da30970743b86283e1a774eea776\"},\"contracts/interfaces/IMecenateTreasury.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateTreasury {\\r\\n    function globalFee() external view returns (uint256);\\r\\n\\r\\n    function fixedFee() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf544878bba8e01c837110d06eac56042957d59c593ba9083f686ef02aa9276a1\"},\"contracts/interfaces/IMecenateUsers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateUsers {\\n    function registerUser(bytes memory metadata) external;\\n\\n    function getUsers() external view returns (address[] memory);\\n\\n    function getUserCount() external view returns (uint256);\\n\\n    function getUserAt(uint256 index) external view returns (address);\\n\\n    function checkifUserExist(address userAddress) external view returns (bool);\\n\\n    function getPaginatedUsers(\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) external view returns (address[] memory);\\n\\n    function getUserMetadata(\\n        address userAddress\\n    ) external view returns (Structures.User memory);\\n\\n    function getUserPublicKey(\\n        address userAddress\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xf0ff65dbfea12d90cf106325b9478e31b284045327e5f0974db5374b8789e93c\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function withdraw(uint256) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xeb4bd6c56a346f12ec3d681183d613795c151709e834d69ef58f13fd6d7edf62\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\n * @title Structures\\n * @dev This library defines various data structures used in the Mecenate platform.\\n */\\npragma solidity 0.8.19;\\n\\nlibrary Structures {\\n    enum PostStatus {\\n        Waiting,\\n        Proposed,\\n        Accepted,\\n        Submitted,\\n        Finalized,\\n        Punished,\\n        Revealed,\\n        Renounced\\n    }\\n\\n    enum Tokens {\\n        NaN,\\n        MUSE,\\n        DAI\\n    }\\n\\n    enum PostType {\\n        Text,\\n        Image,\\n        Video,\\n        Audio,\\n        File\\n    }\\n    enum PostDuration {\\n        OneDay,\\n        ThreeDays,\\n        OneWeek,\\n        TwoWeeks,\\n        OneMonth\\n    }\\n\\n    struct FeedSettings {\\n        uint256 punishmentRatio;\\n        uint256 postCount;\\n        address usersModuleContract;\\n        address factoryContract;\\n        address router;\\n        string version;\\n    }\\n\\n    struct FactorySettings {\\n        address treasuryContract;\\n        address usersModuleContract;\\n        address easContract;\\n        bytes32 easSchema;\\n        address museToken;\\n        address daiToken;\\n        address wethToken;\\n        address router;\\n    }\\n\\n    /**\\n     * @dev Struct representing a post on the Mecenate platform.\\n     */\\n    struct Post {\\n        User creator;\\n        PostData postdata;\\n    }\\n\\n    /**\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\n     */\\n    struct PostData {\\n        PostSettings settings;\\n        PostEscrow escrow;\\n        PostEncryptedData data;\\n    }\\n\\n    /**\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\n     */\\n    struct PostEncryptedData {\\n        bytes encryptedData;\\n        bytes encryptedKey;\\n        bytes decryptedData;\\n    }\\n\\n    /**\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettings {\\n        PostStatus status;\\n        PostType postType;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n        uint256 duration;\\n        Tokens tokenId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\n     */\\n    struct PostEscrow {\\n        address buyer;\\n        address seller;\\n        uint256 stake;\\n        uint256 payment;\\n        uint256 punishment;\\n        uint256 penalty;\\n    }\\n\\n    /**\\n     * @dev Struct representing a user on the Mecenate platform.\\n     */\\n    struct User {\\n        address evmAddress;\\n        bytes sismoVaultId;\\n        bytes publicKey;\\n    }\\n\\n    /**\\n     * @dev Struct representing a feed on the Mecenate platform.\\n     */\\n    struct Feed {\\n        address contractAddress;\\n        address owner;\\n        uint256 sellerStake;\\n        uint256 buyerStake;\\n        uint256 totalStake;\\n        uint256 postCount;\\n        uint256 paymentRequested;\\n        uint256 stakeRequested;\\n        PostStatus status;\\n        Tokens tokenId;\\n        string version;\\n    }\\n\\n    /**\\n     * @dev Struct representing a bay request on the Mecenate platform.\\n     */\\n    struct BayRequest {\\n        bytes request;\\n        uint256 payment;\\n        uint256 stake;\\n        address postAddress;\\n        bool accepted;\\n        uint256 postCount;\\n        Tokens tokenId;\\n        address buyerAddress;\\n    }\\n}\\n\",\"keccak256\":\"0xab56ad7506e91048fc9c6db9fd9510c42afa61d6b11a99a273bf975643307d8f\"},\"contracts/modules/Acceptance.sol\":{\"content\":\"/**\\n * @title Acceptance\\n * @dev This contract is an abstract contract that inherits from Events and Staking contracts. It provides a function to accept a post and add stake to the post. The function accepts a Sismo Connect response as a parameter and verifies the user existence. It also checks if the user is not the seller and if the post is in Proposed status. If the post has an escrow payment, it checks if the buyer has paid enough and adds the payment to the post's escrow. If the post does not have an escrow payment, it requires a payment from the buyer and adds it to the post's escrow. Finally, it changes the post status to Accepted and emits an Accepted event.\\n */\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"./Events.sol\\\";\\nimport \\\"./Staking.sol\\\";\\n\\nabstract contract Acceptance is Events, Staking {\\n    function acceptPost(\\n        Structures.Tokens tokenId,\\n        uint256 paymentAmount,\\n        address funder,\\n        address buyer\\n    ) external payable virtual {\\n        require(\\n            validStatuses[uint8(Structures.PostStatus.Proposed)],\\n            \\\"INVALID_STATUS\\\"\\n        );\\n\\n        _checkToken(tokenId);\\n\\n        uint256 amountToAdd = tokenId == Structures.Tokens.NaN\\n            ? msg.value\\n            : paymentAmount;\\n\\n        // Use local variable for repeated calls\\n        uint256 sellerStake = Deposit._getDeposit(\\n            tokenId,\\n            post.postdata.escrow.seller\\n        );\\n\\n        require(sellerStake >= post.postdata.escrow.stake, \\\"STAKE_INCORRECT\\\");\\n\\n        require(\\n            IMecenateUsers(settings.usersModuleContract).checkifUserExist(\\n                buyer\\n            ),\\n            \\\"USERT_NOT_EXIST\\\"\\n        );\\n\\n        require(\\n            msg.sender != post.postdata.escrow.seller ||\\n                buyer != post.postdata.escrow.seller,\\n            \\\"YOU_ARE_THE_SELLER\\\"\\n        );\\n\\n        if (post.postdata.escrow.payment > 0) {\\n            require(\\n                paymentAmount >= post.postdata.escrow.payment,\\n                \\\"NOT_ENOUGH_PAYMENT\\\"\\n            );\\n        } else {\\n            require(msg.value > 0, \\\"ZERO_MSGVALUE\\\");\\n\\n            require(paymentAmount > 0, \\\"ZERO_PAYMENT\\\");\\n        }\\n\\n        uint256 payment = _addStake(tokenId, buyer, funder, amountToAdd);\\n\\n        post.postdata.escrow.payment = payment;\\n\\n        post.postdata.escrow.buyer = buyer;\\n\\n        post.postdata.settings.status = Structures.PostStatus.Accepted;\\n\\n        _changeStatus(Structures.PostStatus.Accepted);\\n\\n        emit Accepted(post);\\n    }\\n}\\n\",\"keccak256\":\"0xeddd71eba83c4bea562a75cd89a509f1a1deefebd73147db962f626f1d6eaacb\",\"license\":\"MIT\"},\"contracts/modules/BurnDAI.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"./BurnMUSE.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"../interfaces/IWETH.sol\\\";\\n\\nabstract contract BurnDAI is BurnMUSE {\\n    using SafeMath for uint256;\\n\\n    function _burnFrom(\\n        address from,\\n        uint256 value\\n    ) internal override returns (bool success) {\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\n            .transferFrom(from, address(this), value);\\n\\n        _burn(value);\\n\\n        return true;\\n    }\\n\\n    function _burnDai(uint256 value) internal returns (bool success) {\\n        // approve uniswap for token transfer\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\n            .approve(settings.router, value);\\n\\n        // swap IMecenateFeedFactory(settings.factoryContract).daiToken() for MUSE\\n        uint256 tokens_sold = value;\\n\\n        uint256 tokens_bought = _swapTokensForToken(\\n            IMecenateFeedFactory(settings.factoryContract).daiToken(),\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\n            IMecenateFeedFactory(settings.factoryContract).getRouterFee(0),\\n            tokens_sold\\n        );\\n\\n        uint256 tokens_sold_to_muse = _swapTokensForToken(\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\n            IMecenateFeedFactory(settings.factoryContract).museToken(),\\n            IMecenateFeedFactory(settings.factoryContract).getRouterFee(1),\\n            tokens_bought\\n        );\\n\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).museToken())\\n            .approve(\\n                IMecenateFeedFactory(settings.factoryContract).museToken(),\\n                tokens_sold_to_muse\\n            );\\n\\n        // burn MUSE\\n        BurnMUSE._burn(tokens_sold_to_muse);\\n\\n        return true;\\n    }\\n\\n    function _burnWeth(uint256 value) internal returns (bool success) {\\n        // deposit IMecenateFeedFactory(settings.factoryContract).wethToken()\\n        IWETH(IMecenateFeedFactory(settings.factoryContract).wethToken())\\n            .deposit{value: value}();\\n\\n        // approve uniswap for token transfer\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).wethToken())\\n            .approve(settings.router, value);\\n\\n        // swap IMecenateFeedFactory(settings.factoryContract).wethToken() for MUSE\\n        uint256 tokens_sold = value;\\n\\n        uint256 tokens_bought = _swapTokensForToken(\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\n            IMecenateFeedFactory(settings.factoryContract).museToken(),\\n            IMecenateFeedFactory(settings.factoryContract).getRouterFee(1),\\n            tokens_sold\\n        );\\n\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).museToken())\\n            .approve(\\n                IMecenateFeedFactory(settings.factoryContract).museToken(),\\n                tokens_bought\\n            );\\n\\n        // burn MUSE\\n        BurnMUSE._burn(tokens_bought);\\n\\n        return true;\\n    }\\n\\n    function getTokenAddress()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address token)\\n    {\\n        return IMecenateFeedFactory(settings.factoryContract).daiToken();\\n    }\\n\\n    function getExchangeAddress()\\n        internal\\n        view\\n        override\\n        returns (address exchange)\\n    {\\n        exchange = settings.router;\\n    }\\n\\n    function _swapTokensForToken(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountIn\\n    ) internal returns (uint256 amountOut) {\\n        // Check and approve allowance\\n        uint256 allowance = IERC20(tokenIn).allowance(\\n            address(this),\\n            settings.router\\n        );\\n        if (allowance < amountIn) {\\n            IERC20(tokenIn).approve(settings.router, type(uint256).max);\\n        }\\n\\n        // Prepare parameters\\n        address recipient = address(this);\\n        uint256 deadline = block.timestamp + 60; // 15 seconds from the current block timestamp\\n\\n        // Perform the swap\\n        // Refer to the Uniswap V3 documentation for details on the params.\\n        amountOut = ISwapRouter(settings.router).exactInputSingle(\\n            ISwapRouter.ExactInputSingleParams({\\n                tokenIn: tokenIn,\\n                tokenOut: tokenOut,\\n                fee: fee,\\n                recipient: recipient,\\n                deadline: deadline,\\n                amountIn: amountIn,\\n                amountOutMinimum: 0, // you may want to set a minimum here\\n                sqrtPriceLimitX96: 0\\n            })\\n        );\\n\\n        return amountOut;\\n    }\\n}\\n\",\"keccak256\":\"0xa69462e962a3be48c3514c746d791c7a870247e8e441a2d7a11b5771ec8e0d23\"},\"contracts/modules/BurnMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\nimport \\\"../interfaces/IMUSE.sol\\\";\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\nimport \\\"./Events.sol\\\";\\n\\nabstract contract BurnMUSE is Events {\\n    function _burn(uint256 value) internal virtual returns (bool success) {\\n        IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken()).burn(\\n            value\\n        );\\n        return true;\\n    }\\n\\n    function _burnFrom(\\n        address from,\\n        uint256 value\\n    ) internal virtual returns (bool success) {\\n        IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken())\\n            .transferFrom(from, address(this), value);\\n        _burn(value);\\n        return true;\\n    }\\n\\n    function getTokenAddress() internal view virtual returns (address token) {\\n        return IMecenateFeedFactory(settings.factoryContract).museToken();\\n    }\\n\\n    function getExchangeAddress()\\n        internal\\n        view\\n        virtual\\n        returns (address exchange)\\n    {\\n        exchange = IMecenateFeedFactory(settings.factoryContract).router();\\n    }\\n}\\n\",\"keccak256\":\"0x052049c27f8e98f27fd3d237157e4700d5f5c313343d1cd734614beefa4ccfc6\"},\"contracts/modules/Creation.sol\":{\"content\":\"/**\\n * @title Creation\\n * @dev This contract is an abstract contract that inherits from Staking contract. It provides a function to create a post with the given parameters. The function requires the user to be the owner of the post and to have a stake. The post can have different durations and types. The function returns the created post.\\n */\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"./Staking.sol\\\";\\n\\nabstract contract Creation is Staking {\\n    function createPost(\\n        bytes memory encryptedHash,\\n        Structures.PostType postType,\\n        Structures.PostDuration postDuration,\\n        uint256 payment,\\n        uint256 stakeAmount,\\n        Structures.Tokens tokenId,\\n        address funder,\\n        address seller,\\n        bool useStake\\n    )\\n        external\\n        payable\\n        onlyValidTokenID(tokenId)\\n        returns (Structures.Post memory)\\n    {\\n        require(msg.sender == owner);\\n\\n        require(\\n            IMecenateUsers(settings.usersModuleContract).checkifUserExist(\\n                seller\\n            ),\\n            \\\"USER_NOT_EXIST\\\"\\n        );\\n\\n        require(\\n            validStatuses[uint8(post.postdata.settings.status)],\\n            \\\"INVALID_STATUS\\\"\\n        );\\n\\n        require(stakeAmount > 0, \\\"STAKE_AMOUNT_ZERO\\\");\\n\\n        require(payment > 0, \\\"PAYMENT_ZERO\\\");\\n\\n        uint256 stake;\\n\\n        if (useStake) {\\n            require(\\n                Deposit._getDeposit(tokenId, seller) >= stakeAmount,\\n                \\\"STAKE_INCORRECT\\\"\\n            );\\n\\n            stake = stakeAmount;\\n        } else {\\n            if (tokenId == Structures.Tokens.NaN) {\\n                require(msg.value == stakeAmount, \\\"WRONG_MSG_VALUE\\\");\\n            }\\n\\n            stake = _addStake(tokenId, seller, funder, stakeAmount);\\n        }\\n\\n        uint256 duration = postDurationToDays[uint8(postDuration)];\\n\\n        _changeStatus(Structures.PostStatus.Proposed);\\n\\n        Structures.User memory creator = IMecenateUsers(\\n            settings.usersModuleContract\\n        ).getUserMetadata(seller);\\n\\n        // Initialize the new Post struct with named arguments for clarity\\n        Structures.Post memory newPost = Structures.Post({\\n            creator: creator,\\n            postdata: Structures.PostData({\\n                settings: Structures.PostSettings({\\n                    postType: postType,\\n                    status: Structures.PostStatus.Proposed,\\n                    creationTimeStamp: block.timestamp,\\n                    endTimeStamp: 0,\\n                    duration: duration,\\n                    tokenId: tokenId\\n                }),\\n                escrow: Structures.PostEscrow({\\n                    buyer: address(0),\\n                    seller: seller,\\n                    stake: stake,\\n                    payment: payment,\\n                    punishment: 0,\\n                    penalty: 0\\n                }),\\n                data: Structures.PostEncryptedData({\\n                    encryptedData: encryptedHash,\\n                    encryptedKey: ZEROHASH,\\n                    decryptedData: ZEROHASH\\n                })\\n            })\\n        });\\n\\n        // Update storage and emit event\\n        post = newPost;\\n\\n        settings.postCount++;\\n\\n        emit Created(newPost);\\n\\n        return newPost;\\n    }\\n}\\n\",\"keccak256\":\"0x318bb81851e5d3d276f4ac7676fda917aeab85e705e7830397641a77d97d2384\",\"license\":\"MIT\"},\"contracts/modules/Data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../interfaces/IMecenateFeed.sol\\\";\\nimport \\\"../interfaces/IMecenateUsers.sol\\\";\\nimport \\\"../interfaces/IMecenateTreasury.sol\\\";\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\nimport \\\"../helpers/eas/IEAS.sol\\\";\\nimport \\\"./Version.sol\\\";\\n\\n/**\\n * @title Data\\n * @dev This contract stores data related to Mecenate posts and provides functions to interact with it.\\n */\\ncontract Data is Version {\\n    bytes internal constant ZEROHASH = \\\"0x00\\\";\\n\\n    address public owner;\\n\\n    Structures.Post public post;\\n\\n    Structures.FeedSettings internal settings;\\n\\n    mapping(uint8 => uint256) internal postDurationToDays;\\n\\n    mapping(uint8 => bool) internal validStatuses;\\n\\n    constructor(\\n        address usersModuleContract,\\n        address factoryContract,\\n        uint256 _major,\\n        uint256 _minor,\\n        uint256 _patch\\n    ) Version(_major, _minor, _patch) {\\n        settings.punishmentRatio = 100000000000000000; // Constant value\\n        settings.postCount = 0; // Initialize postCount to 0\\n        settings.usersModuleContract = usersModuleContract;\\n        settings.factoryContract = msg.sender;\\n        settings.router = IMecenateFeedFactory(factoryContract).router();\\n        settings.version = _version();\\n\\n        post.postdata.settings.status = Structures.PostStatus.Waiting;\\n\\n        postDurationToDays[uint8(Structures.PostDuration.OneDay)] = 1 days;\\n        postDurationToDays[uint8(Structures.PostDuration.ThreeDays)] = 3 days;\\n        postDurationToDays[uint8(Structures.PostDuration.OneWeek)] = 7 days;\\n        postDurationToDays[uint8(Structures.PostDuration.TwoWeeks)] = 14 days;\\n        postDurationToDays[uint8(Structures.PostDuration.OneMonth)] = 30 days;\\n\\n        validStatuses[uint8(Structures.PostStatus.Waiting)] = true;\\n    }\\n\\n    function _changeStatus(Structures.PostStatus newStatus) internal {\\n        validStatuses[uint8(post.postdata.settings.status)] = false;\\n        validStatuses[uint8(newStatus)] = true;\\n        post.postdata.settings.status = newStatus;\\n    }\\n\\n    function getStatus() external view returns (Structures.PostStatus) {\\n        return post.postdata.settings.status;\\n    }\\n\\n    function getTokenId() external view returns (Structures.Tokens) {\\n        return post.postdata.settings.tokenId;\\n    }\\n\\n    function getTokenIdAddress() public view returns (address) {\\n        if (post.postdata.settings.tokenId == Structures.Tokens.MUSE) {\\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\\n        } else if (post.postdata.settings.tokenId == Structures.Tokens.DAI) {\\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    function _checkToken(Structures.Tokens _token) internal view {\\n        require(_token == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n    }\\n\\n    function getPaymentRequested() external view returns (uint256) {\\n        return post.postdata.escrow.payment;\\n    }\\n\\n    function getStakeRequested() external view returns (uint256) {\\n        return post.postdata.escrow.stake;\\n    }\\n\\n    function postCount() external view returns (uint256) {\\n        return settings.postCount;\\n    }\\n\\n    function getEncryptedPost() external view returns (bytes memory) {\\n        return post.postdata.data.encryptedData;\\n    }\\n\\n    function getPost() external view returns (Structures.Post memory) {\\n        return post;\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xb09086cdcab6dc2790f56df6a5808c7a48794c5519ea122f927c0a0684d1f2c6\",\"license\":\"MIT\"},\"contracts/modules/Deposit.sol\":{\"content\":\"pragma solidity 0.8.19;\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./TokenManager.sol\\\";\\n\\ncontract Deposit {\\n    using SafeMath for uint256;\\n\\n    mapping(uint256 => mapping(address => uint256)) private _deposit;\\n\\n    event DepositIncreased(\\n        Structures.Tokens tokenID,\\n        address user,\\n        uint256 amount,\\n        uint256 newDeposit\\n    );\\n    event DepositDecreased(\\n        Structures.Tokens tokenID,\\n        address user,\\n        uint256 amount,\\n        uint256 newDeposit\\n    );\\n\\n    function _increaseDeposit(\\n        Structures.Tokens tokenID,\\n        address user,\\n        uint256 amountToAdd\\n    ) internal returns (uint256 newDeposit) {\\n        // calculate new deposit amount\\n        newDeposit = _deposit[uint256(tokenID)][user].add(amountToAdd);\\n\\n        // set new stake to storage\\n        _deposit[uint256(tokenID)][user] = newDeposit;\\n\\n        // emit event\\n        emit DepositIncreased(tokenID, user, amountToAdd, newDeposit);\\n\\n        // return\\n        return newDeposit;\\n    }\\n\\n    function _decreaseDeposit(\\n        Structures.Tokens tokenID,\\n        address user,\\n        uint256 amountToRemove\\n    ) internal returns (uint256 newDeposit) {\\n        // get current deposit\\n        uint256 currentDeposit = _deposit[uint256(tokenID)][user];\\n\\n        // check if sufficient deposit\\n        require(currentDeposit >= amountToRemove, \\\"INSUFFICIENT_DEPOSIT\\\");\\n\\n        // calculate new deposit amount\\n        newDeposit = currentDeposit.sub(amountToRemove);\\n\\n        // set new stake to storage\\n        _deposit[uint256(tokenID)][user] = newDeposit;\\n\\n        // emit event\\n        emit DepositDecreased(tokenID, user, amountToRemove, newDeposit);\\n\\n        // return\\n        return newDeposit;\\n    }\\n\\n    function _clearDeposit(\\n        Structures.Tokens tokenID,\\n        address user\\n    ) internal returns (uint256 amountRemoved) {\\n        // get current deposit\\n        uint256 currentDeposit = _deposit[uint256(tokenID)][user];\\n\\n        // remove deposit\\n        _decreaseDeposit(tokenID, user, currentDeposit);\\n\\n        // return\\n        return currentDeposit;\\n    }\\n\\n    function _getDeposit(\\n        Structures.Tokens tokenID,\\n        address user\\n    ) internal view returns (uint256 deposit) {\\n        return _deposit[uint256(tokenID)][user];\\n    }\\n}\\n\",\"keccak256\":\"0xbde50573d2e5a22daecdfdb1d457c4f50b7ea16e18a03eac04013ce10f269d36\"},\"contracts/modules/Events.sol\":{\"content\":\"/**\\r\\n * @title Events\\r\\n * @dev This abstract contract defines the events related to the Mecenate platform's post lifecycle.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./Data.sol\\\";\\r\\n\\r\\nabstract contract Events is Data {\\r\\n    event Created(Structures.Post post);\\r\\n    event Accepted(Structures.Post post);\\r\\n    event Valid(Structures.Post post);\\r\\n    event Invalid(Structures.Post post);\\r\\n    event Finalized(Structures.Post post);\\r\\n    event MadePublic(Structures.Post post);\\r\\n    event Renounced(Structures.Post post);\\r\\n}\\r\\n\",\"keccak256\":\"0x3aeaf067b1f9010a2456df46fb54d4727b3a24082b1446ac9266dbcdd8c838f6\"},\"contracts/modules/Finalization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\nimport \\\"./Staking.sol\\\";\\n\\nabstract contract Finalization is Staking {\\n    function finalizePost(\\n        bool valid,\\n        uint256 punishment,\\n        bytes32 uid\\n    ) external virtual {\\n        require(msg.sender == post.postdata.escrow.buyer, \\\"NOT_SELLER\\\");\\n\\n        require(\\n            post.postdata.settings.status == Structures.PostStatus.Submitted,\\n            \\\"NOT_SUBMITTED\\\"\\n        );\\n\\n        IEAS eas = IEAS(\\n            IMecenateFeedFactory(settings.factoryContract).easContract()\\n        );\\n\\n        Attestation memory attestation = eas.getAttestation(uid);\\n\\n        require(\\n            attestation.attester == post.postdata.escrow.buyer,\\n            \\\"INVALID_ATTESTATION\\\"\\n        );\\n\\n        require(\\n            attestation.recipient == post.postdata.escrow.seller,\\n            \\\"INVALID_RECIPIENT\\\"\\n        );\\n\\n        require(\\n            attestation.schema ==\\n                IMecenateFeedFactory(settings.factoryContract).easSchema(),\\n            \\\"INVALID_SCHEMA\\\"\\n        );\\n\\n        (bool easResult, address feed, bytes memory postBytes) = abi.decode(\\n            attestation.data,\\n            (bool, address, bytes)\\n        );\\n\\n        require(feed == address(this), \\\"INVALID_FEED\\\");\\n\\n        require(\\n            keccak256(abi.encode(postBytes)) ==\\n                keccak256(abi.encode(post.postdata.data.encryptedData)),\\n            \\\"INVALID_POST\\\"\\n        );\\n\\n        // Common contract addresses and variables\\n        address treasuryContract = IMecenateFeedFactory(\\n            settings.factoryContract\\n        ).treasuryContract();\\n\\n        uint256 buyerFee = (post.postdata.escrow.payment *\\n            IMecenateTreasury(treasuryContract).globalFee()) / 10000;\\n\\n        uint256 amountToAdd = post.postdata.escrow.payment - buyerFee;\\n\\n        // Variables for stake changes\\n        uint256 buyerStake;\\n\\n        uint256 sellerStake;\\n\\n        if (post.postdata.settings.endTimeStamp < block.timestamp || valid) {\\n            require(easResult == valid, \\\"INVALID_ATTESTATION\\\");\\n\\n            // Code for both the timeout and the valid case\\n            buyerStake = Deposit._decreaseDeposit(\\n                post.postdata.settings.tokenId,\\n                post.postdata.escrow.buyer,\\n                post.postdata.escrow.payment\\n            );\\n\\n            sellerStake = Deposit._increaseDeposit(\\n                post.postdata.settings.tokenId,\\n                post.postdata.escrow.seller,\\n                amountToAdd\\n            );\\n\\n            _burn(post.postdata.settings.tokenId, treasuryContract, buyerFee);\\n\\n            post.postdata.escrow.stake = sellerStake;\\n\\n            post.postdata.escrow.payment = buyerStake;\\n\\n            _changeStatus(\\n                valid\\n                    ? Structures.PostStatus.Finalized\\n                    : Structures.PostStatus.Punished\\n            );\\n\\n            emit Valid(post);\\n        } else if (!valid) {\\n            require(easResult == valid, \\\"INVALID_ATTESTATION\\\");\\n\\n            require(\\n                punishment <= post.postdata.escrow.stake,\\n                \\\"PUNISHMENT_TOO_HIGH\\\"\\n            );\\n            require(settings.punishmentRatio < 1e18, \\\"PUNISHMENT_RATIO_HIGH\\\");\\n\\n            uint256 penalty = (punishment * settings.punishmentRatio) / 1e18;\\n\\n            post.postdata.escrow.payment = _burnStake(\\n                post.postdata.settings.tokenId,\\n                post.postdata.escrow.buyer,\\n                penalty\\n            );\\n\\n            post.postdata.escrow.stake = _burnStake(\\n                post.postdata.settings.tokenId,\\n                post.postdata.escrow.seller,\\n                punishment\\n            );\\n\\n            // Update status and penalties\\n            post.postdata.settings.status = Structures.PostStatus.Punished;\\n\\n            post.postdata.escrow.punishment = punishment;\\n\\n            post.postdata.escrow.penalty = penalty;\\n\\n            _changeStatus(Structures.PostStatus.Punished);\\n\\n            emit Invalid(post);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x48480a5f232b62f022911a4f507fa954ee2e8a414ac885e7178e007ba9fe969f\",\"license\":\"MIT\"},\"contracts/modules/Renounce.sol\":{\"content\":\"/**\\n * @title Renounce\\n * @dev This abstract contract extends the Staking contract and provides functionality for a seller to renounce a post.\\n * The seller can only renounce a post if they are the original creator of the post and the post is in the Accepted or Submitted status.\\n * Renouncing a post refunds the buyer's payment and transfers the seller's stake to the seller's address.\\n * The post struct is reset and the post status is updated to Renounced.\\n * This contract also provides an internal function for refunding a post, which is called by the renouncePost function.\\n */\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"./Staking.sol\\\";\\n\\nabstract contract Renounce is Staking {\\n    function renouncePost() external {\\n        require(msg.sender == post.postdata.escrow.seller, \\\"NOT_SELLER\\\");\\n\\n        // Validate the post status\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\n\\n        require(validStatuses[uint8(currentStatus)], \\\"INVALID_STATUS\\\");\\n\\n        // Reset post and post settings\\n        post = Structures.Post(\\n            Structures.User({\\n                evmAddress: address(0),\\n                sismoVaultId: ZEROHASH,\\n                publicKey: ZEROHASH\\n            }),\\n            Structures.PostData({\\n                settings: Structures.PostSettings({\\n                    status: Structures.PostStatus.Renounced,\\n                    postType: Structures.PostType.Text,\\n                    creationTimeStamp: 0,\\n                    endTimeStamp: 0,\\n                    duration: 0,\\n                    tokenId: Structures.Tokens.NaN\\n                }),\\n                escrow: Structures.PostEscrow({\\n                    buyer: address(0),\\n                    seller: address(0),\\n                    stake: 0,\\n                    payment: 0,\\n                    punishment: 0,\\n                    penalty: 0\\n                }),\\n                data: Structures.PostEncryptedData({\\n                    encryptedData: \\\"\\\",\\n                    encryptedKey: \\\"\\\",\\n                    decryptedData: \\\"\\\"\\n                })\\n            })\\n        );\\n\\n        // Emit event\\n        emit Renounced(post);\\n    }\\n}\\n\",\"keccak256\":\"0x8ae67d46145c6ff5386d4a5c045996c1bf1e32baf27066d803186c90738601c1\",\"license\":\"MIT\"},\"contracts/modules/Staking.sol\":{\"content\":\"/**\\n * @title Staking\\n * @dev This contract handles staking functionality for the Mecenate platform.\\n * It allows users to add, take, and burn stakes, and provides functions to get the total staked amount and individual stake amounts.\\n * It also includes a modifier to check the status of a post before allowing stake-related transactions.\\n */\\npragma solidity 0.8.19;\\n\\nimport \\\"./Deposit.sol\\\";\\nimport \\\"./Events.sol\\\";\\n\\nabstract contract Staking is Events, Deposit, TokenManager {\\n    using SafeMath for uint256;\\n\\n    event StakeBurned(address staker, uint256 amount);\\n\\n    event StakeTaken(address staker, uint256 amount, Structures.Tokens tokenId);\\n\\n    event StakeAdded(address staker, uint256 amount, Structures.Tokens tokenId);\\n\\n    function _addStake(\\n        Structures.Tokens tokenId,\\n        address staker,\\n        address funder,\\n        uint256 amountToAdd\\n    ) internal returns (uint256 newStake) {\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\n\\n        require(\\n            currentStatus != Structures.PostStatus.Accepted &&\\n                currentStatus != Structures.PostStatus.Submitted,\\n            \\\"INVALID_STATUS\\\"\\n        );\\n\\n        require(amountToAdd > 0, \\\"STAKE_REQUIRED\\\");\\n\\n        if (tokenId != Structures.Tokens.NaN) {\\n            _transferFrom(tokenId, funder, address(this), amountToAdd);\\n        }\\n\\n        newStake = Deposit._increaseDeposit(tokenId, staker, amountToAdd);\\n\\n        emit StakeAdded(staker, amountToAdd, tokenId);\\n\\n        return newStake;\\n    }\\n\\n    function _takeStake(\\n        Structures.Tokens tokenId,\\n        address staker,\\n        address receiver,\\n        uint256 amountToTake\\n    ) internal returns (uint256 newStake) {\\n        // Memorizza lo status del post in una variabile per evitare accessi ridondanti allo storage\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\n\\n        // Verifica che lo status del post sia valido per procedere\\n        require(\\n            currentStatus != Structures.PostStatus.Accepted &&\\n                currentStatus != Structures.PostStatus.Submitted,\\n            \\\"INVALID_STATUS\\\"\\n        );\\n\\n        // Effettua il trasferimento del token o dell'Ether\\n        if (tokenId == Structures.Tokens.NaN) {\\n            //(bool result, ) = payable(_to).call{value: amountToTake}(\\\"\\\");\\n            //require(result, \\\"CALL_FAILED\\\");\\n            payable(receiver).transfer(amountToTake);\\n        } else {\\n            _transfer(tokenId, receiver, amountToTake);\\n        }\\n\\n        // Aggiorna il deposito e emette un evento\\n        newStake = Deposit._decreaseDeposit(tokenId, staker, amountToTake);\\n        emit StakeTaken(staker, amountToTake, tokenId);\\n\\n        return newStake;\\n    }\\n\\n    function _takeFullStake(\\n        Structures.Tokens tokenId,\\n        address staker,\\n        address receiver\\n    ) internal returns (uint256 amountTaken) {\\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, staker);\\n\\n        uint256 newStake = _takeStake(\\n            tokenId,\\n            staker,\\n            receiver,\\n            currentDeposit\\n        );\\n\\n        return newStake;\\n    }\\n\\n    function _burnStake(\\n        Structures.Tokens tokenId,\\n        address staker,\\n        uint256 amountToBurn\\n    ) internal returns (uint256 newStake) {\\n        uint256 newDeposit = Deposit._decreaseDeposit(\\n            tokenId,\\n            staker,\\n            amountToBurn\\n        );\\n\\n        bool burnEnabled = IMecenateFeedFactory(settings.factoryContract)\\n            .burnEnabled();\\n\\n        address treasuryContract = IMecenateFeedFactory(\\n            settings.factoryContract\\n        ).treasuryContract();\\n\\n        if (burnEnabled == false) {\\n            if (tokenId == Structures.Tokens.NaN) {\\n                (bool result, ) = payable(treasuryContract).call{\\n                    value: amountToBurn\\n                }(\\\"\\\");\\n                require(result, \\\"CALL_FAILED\\\");\\n            } else {\\n                _transfer(tokenId, treasuryContract, amountToBurn);\\n            }\\n        } else {\\n            if (tokenId == Structures.Tokens.DAI) {\\n                _burnDai(amountToBurn);\\n            } else if (tokenId == Structures.Tokens.MUSE) {\\n                _burn(amountToBurn);\\n            } else if (tokenId == Structures.Tokens.NaN) {\\n                _burnWeth(amountToBurn);\\n            }\\n        }\\n\\n        emit StakeBurned(staker, amountToBurn);\\n\\n        return newDeposit;\\n    }\\n\\n    function _burnFullStake(\\n        Structures.Tokens tokenId,\\n        address staker\\n    ) internal returns (uint256 amountBurned) {\\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, staker);\\n\\n        _burnStake(tokenId, staker, currentDeposit);\\n\\n        return currentDeposit;\\n    }\\n\\n    function getStake(\\n        Structures.Tokens tokenId,\\n        address staker\\n    ) external view returns (uint256 amount) {\\n        // get deposit\\n        amount = Deposit._getDeposit(tokenId, staker);\\n        // explicit return\\n        return amount;\\n    }\\n\\n    function getTotalStaked() external view returns (uint256) {\\n        uint256 amountSeller = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            post.postdata.escrow.seller\\n        );\\n\\n        uint256 amountBuyer = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            post.postdata.escrow.buyer\\n        );\\n\\n        return (amountSeller + amountBuyer);\\n    }\\n\\n    function addStake(\\n        Structures.Tokens tokenId,\\n        address _funder,\\n        uint256 amountToAdd\\n    ) external payable returns (uint256) {\\n        require(tokenId == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n\\n        // Check if the encryptedVaultId matches with either the buyer or the seller\\n        require(\\n            msg.sender == post.postdata.escrow.buyer ||\\n                msg.sender == post.postdata.escrow.seller,\\n            \\\"WRONG_MSGSENDER\\\"\\n        );\\n\\n        // Determine the amount to add based on the role (buyer or seller)\\n        uint256 actualAmountToAdd = (msg.sender == post.postdata.escrow.seller)\\n            ? msg.value\\n            : amountToAdd;\\n\\n        // Update the stake\\n        uint256 newStake = _addStake(\\n            tokenId,\\n            msg.sender,\\n            _funder,\\n            actualAmountToAdd\\n        );\\n\\n        // Update the corresponding escrow value based on the role\\n        if (msg.sender == post.postdata.escrow.buyer) {\\n            post.postdata.escrow.payment = newStake;\\n        } else {\\n            post.postdata.escrow.stake = newStake;\\n        }\\n\\n        return newStake;\\n    }\\n\\n    function takeStake(\\n        Structures.Tokens tokenId,\\n        address receiver,\\n        uint256 amountToTake\\n    ) external returns (uint256) {\\n        require(tokenId == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n\\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, msg.sender);\\n\\n        require(currentDeposit >= amountToTake, \\\"NOT_ENOUGH_STAKE\\\");\\n\\n        uint256 newBalance = _takeStake(\\n            tokenId,\\n            msg.sender,\\n            receiver,\\n            amountToTake\\n        );\\n\\n        if (msg.sender == post.postdata.escrow.buyer) {\\n            post.postdata.escrow.payment = newBalance;\\n        } else {\\n            post.postdata.escrow.stake = newBalance;\\n        }\\n\\n        return newBalance;\\n    }\\n\\n    function takeFullStake(\\n        Structures.Tokens tokenId,\\n        address receiver\\n    ) external returns (uint256) {\\n        require(tokenId == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n\\n        uint256 newBalance = _takeFullStake(tokenId, msg.sender, receiver);\\n\\n        if (msg.sender == post.postdata.escrow.buyer) {\\n            post.postdata.escrow.payment = newBalance;\\n        } else if (msg.sender == post.postdata.escrow.seller) {\\n            post.postdata.escrow.stake = newBalance;\\n        }\\n\\n        return newBalance;\\n    }\\n\\n    function getSellerStake() external view returns (uint256 amount) {\\n        // get deposit\\n        amount = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            post.postdata.escrow.seller\\n        );\\n        // explicit return\\n        return amount;\\n    }\\n\\n    function getBuyerStake() external view returns (uint256 amount) {\\n        // get deposit\\n        amount = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            post.postdata.escrow.buyer\\n        );\\n        // explicit return\\n        return amount;\\n    }\\n}\\n\",\"keccak256\":\"0x94556a37278a2684b61c9734e71d523d215af864486d60b0562f52d5437308dc\"},\"contracts/modules/Submission.sol\":{\"content\":\"/**\\n * @title Submission\\n * @dev This contract is an abstract contract that defines the functions for submitting and revealing data for a post. It inherits from the Events contract.\\n */\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"./Events.sol\\\";\\n\\nabstract contract Submission is Events {\\n    function submitHash(bytes memory encryptedKey) external virtual {\\n        require(msg.sender == post.postdata.escrow.seller, \\\"NOT_SELLER\\\");\\n\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\n        require(\\n            validStatuses[uint8(currentStatus)] &&\\n                (currentStatus == Structures.PostStatus.Accepted ||\\n                    currentStatus == Structures.PostStatus.Submitted),\\n            \\\"WRONG_STATUS\\\"\\n        );\\n\\n        require(\\n            IMecenateUsers(settings.usersModuleContract).checkifUserExist(\\n                msg.sender\\n            ),\\n            \\\"User does not exist\\\"\\n        );\\n\\n        require(post.creator.evmAddress == msg.sender, \\\"NOT_SELLER\\\");\\n\\n        _changeStatus(Structures.PostStatus.Submitted);\\n\\n        post.postdata.data.encryptedKey = encryptedKey;\\n        post.postdata.settings.status = Structures.PostStatus.Submitted;\\n        post.postdata.settings.endTimeStamp =\\n            block.timestamp +\\n            post.postdata.settings.duration;\\n\\n        emit Valid(post);\\n    }\\n\\n    function revealData(\\n        bytes memory decryptedData\\n    ) external virtual returns (bytes memory) {\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\n        require(\\n            validStatuses[uint8(currentStatus)] &&\\n                (currentStatus == Structures.PostStatus.Submitted ||\\n                    currentStatus == Structures.PostStatus.Revealed ||\\n                    currentStatus == Structures.PostStatus.Finalized),\\n            \\\"INVALID_STATUS\\\"\\n        );\\n\\n        require(\\n            msg.sender != post.postdata.escrow.seller,\\n            \\\"YOU_ARE_THE_SELLER\\\"\\n        );\\n\\n        require(\\n            currentStatus == Structures.PostStatus.Finalized,\\n            \\\"NOT_FINALIZED\\\"\\n        );\\n\\n        post.postdata.data.decryptedData = decryptedData;\\n        post.postdata.settings.status = Structures.PostStatus.Revealed;\\n\\n        emit MadePublic(post);\\n\\n        return decryptedData;\\n    }\\n}\\n\",\"keccak256\":\"0x1fb24c1495a7bbf805edc40e95a499b96ab454e9cefff0f4f5bd8d64ec317e03\",\"license\":\"MIT\"},\"contracts/modules/TokenManager.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"./BurnDAI.sol\\\";\\n\\nabstract contract TokenManager is BurnDAI {\\n    function _getTokenAddress(\\n        Structures.Tokens tokenID\\n    ) internal view returns (address) {\\n        if (tokenID == Structures.Tokens.DAI)\\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\\n        if (tokenID == Structures.Tokens.MUSE)\\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\\n        return address(0);\\n    }\\n\\n    function _checkAllowance(\\n        Structures.Tokens tokenID,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal view {\\n        address tokenAddress = _getTokenAddress(tokenID);\\n        require(\\n            IERC20(tokenAddress).allowance(from, to) >= value,\\n            \\\"INSUFFICIENT_ALLOWANCE\\\"\\n        );\\n    }\\n\\n    modifier onlyValidTokenID(Structures.Tokens tokenID) {\\n        require(\\n            tokenID == Structures.Tokens.MUSE ||\\n                tokenID == Structures.Tokens.DAI ||\\n                tokenID == Structures.Tokens.NaN,\\n            \\\"WRONG_TOKEN\\\"\\n        );\\n        _;\\n    }\\n\\n    function isValidTokenID(\\n        Structures.Tokens tokenID\\n    ) internal pure returns (bool validity) {\\n        return\\n            tokenID == Structures.Tokens.MUSE ||\\n            tokenID == Structures.Tokens.DAI;\\n    }\\n\\n    function _transfer(\\n        Structures.Tokens tokenID,\\n        address to,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        require(\\n            IERC20(_getTokenAddress(tokenID)).transfer(to, value),\\n            \\\"TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function _transferFrom(\\n        Structures.Tokens tokenID,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        address tokenAddress = _getTokenAddress(tokenID);\\n        _checkAllowance(tokenID, from, to, value);\\n        require(\\n            IERC20(tokenAddress).transferFrom(from, to, value),\\n            \\\"TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function _burn(\\n        Structures.Tokens tokenID,\\n        address _receiver,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) returns (bool success) {\\n        bool burnEnabled = IMecenateFeedFactory(settings.factoryContract)\\n            .burnEnabled();\\n\\n        if (burnEnabled == false) {\\n            if (tokenID == Structures.Tokens.NaN) {\\n                (bool result, ) = payable(_receiver).call{value: value}(\\\"\\\");\\n                require(result, \\\"CALL_FAILED\\\");\\n            } else {\\n                TokenManager._transfer(tokenID, _receiver, value);\\n            }\\n        } else {\\n            if (tokenID == Structures.Tokens.DAI) {\\n                _burnDai(value);\\n            } else if (tokenID == Structures.Tokens.MUSE) {\\n                _burn(value);\\n            } else if (tokenID == Structures.Tokens.NaN) {\\n                _burnWeth(value);\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    function _burnFrom(\\n        Structures.Tokens tokenID,\\n        address from,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        address treasury = IMecenateFeedFactory(settings.factoryContract)\\n            .treasuryContract();\\n\\n        if (tokenID == Structures.Tokens.DAI) {\\n            IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\n                .transferFrom(from, treasury, value);\\n        } else if (tokenID == Structures.Tokens.MUSE) {\\n            BurnMUSE._burnFrom(from, value);\\n        }\\n    }\\n\\n    function _approve(\\n        Structures.Tokens tokenID,\\n        address spender,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        if (tokenID == Structures.Tokens.DAI) {\\n            require(\\n                IERC20(\\n                    IMecenateFeedFactory(settings.factoryContract).daiToken()\\n                ).approve(spender, value),\\n                \\\"APPROVE_FAILED\\\"\\n            );\\n        } else if (tokenID == Structures.Tokens.MUSE) {\\n            uint256 currentAllowance = IMUSE(\\n                IMecenateFeedFactory(settings.factoryContract).museToken()\\n            ).allowance(msg.sender, spender);\\n\\n            uint256 newAllowance = currentAllowance + value;\\n            require(\\n                IMUSE(IMecenateFeedFactory(settings.factoryContract).daiToken())\\n                    .increaseAllowance(spender, newAllowance),\\n                \\\"APPROVE_FAILED\\\"\\n            );\\n        }\\n    }\\n\\n    function totalSupply(\\n        Structures.Tokens tokenID\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).totalSupply();\\n    }\\n\\n    function balanceOf(\\n        Structures.Tokens tokenID,\\n        address who\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).balanceOf(who);\\n    }\\n\\n    function allowance(\\n        Structures.Tokens tokenID,\\n        address owner,\\n        address spender\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).allowance(owner, spender);\\n    }\\n}\\n\",\"keccak256\":\"0x8eded6283ea4effbe4861c36f73afaace086765ac8d26ef695ac8855ed15e8b1\"},\"contracts/modules/Version.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/// @title Semver\\n/// @notice A simple contract for managing contract versions.\\nabstract contract Version {\\n    // Contract's major version number.\\n    uint256 private immutable _major;\\n\\n    // Contract's minor version number.\\n    uint256 private immutable _minor;\\n\\n    // Contract's patch version number.\\n    uint256 private immutable _path;\\n\\n    /// @dev Create a new Semver instance.\\n    /// @param major Major version number.\\n    /// @param minor Minor version number.\\n    /// @param patch Patch version number.\\n    constructor(uint256 major, uint256 minor, uint256 patch) {\\n        _major = major;\\n        _minor = minor;\\n        _path = patch;\\n    }\\n\\n    /// @notice Returns the full semver contract version.\\n    /// @return Semver contract version as a string.\\n    function version() external view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    Strings.toString(_major),\\n                    \\\".\\\",\\n                    Strings.toString(_minor),\\n                    \\\".\\\",\\n                    Strings.toString(_path)\\n                )\\n            );\\n    }\\n\\n    function _version() internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    Strings.toString(_major),\\n                    \\\".\\\",\\n                    Strings.toString(_minor),\\n                    \\\".\\\",\\n                    Strings.toString(_path)\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xa99614da4eb0014c2756685061352b80325a07e4cb14f7c704ec2a62e182688f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3523,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"owner","offset":0,"slot":"0","type":"t_address"},{"astId":3526,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"post","offset":0,"slot":"1","type":"t_struct(Post)2574_storage"},{"astId":3529,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"settings","offset":0,"slot":"18","type":"t_struct(FeedSettings)2550_storage"},{"astId":3533,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"postDurationToDays","offset":0,"slot":"24","type":"t_mapping(t_uint8,t_uint256)"},{"astId":3537,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"validStatuses","offset":0,"slot":"25","type":"t_mapping(t_uint8,t_bool)"},{"astId":3871,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"_deposit","offset":0,"slot":"26","type":"t_mapping(t_uint256,t_mapping(t_address,t_uint256))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_enum(PostStatus)2521":{"encoding":"inplace","label":"enum Structures.PostStatus","numberOfBytes":"1"},"t_enum(PostType)2531":{"encoding":"inplace","label":"enum Structures.PostType","numberOfBytes":"1"},"t_enum(Tokens)2525":{"encoding":"inplace","label":"enum Structures.Tokens","numberOfBytes":"1"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_uint8,t_bool)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint8,t_uint256)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(FeedSettings)2550_storage":{"encoding":"inplace","label":"struct Structures.FeedSettings","members":[{"astId":2539,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"punishmentRatio","offset":0,"slot":"0","type":"t_uint256"},{"astId":2541,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"postCount","offset":0,"slot":"1","type":"t_uint256"},{"astId":2543,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"usersModuleContract","offset":0,"slot":"2","type":"t_address"},{"astId":2545,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"factoryContract","offset":0,"slot":"3","type":"t_address"},{"astId":2547,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"router","offset":0,"slot":"4","type":"t_address"},{"astId":2549,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"version","offset":0,"slot":"5","type":"t_string_storage"}],"numberOfBytes":"192"},"t_struct(Post)2574_storage":{"encoding":"inplace","label":"struct Structures.Post","members":[{"astId":2570,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"creator","offset":0,"slot":"0","type":"t_struct(User)2627_storage"},{"astId":2573,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"postdata","offset":0,"slot":"3","type":"t_struct(PostData)2584_storage"}],"numberOfBytes":"544"},"t_struct(PostData)2584_storage":{"encoding":"inplace","label":"struct Structures.PostData","members":[{"astId":2577,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"settings","offset":0,"slot":"0","type":"t_struct(PostSettings)2607_storage"},{"astId":2580,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"escrow","offset":0,"slot":"5","type":"t_struct(PostEscrow)2620_storage"},{"astId":2583,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"data","offset":0,"slot":"11","type":"t_struct(PostEncryptedData)2591_storage"}],"numberOfBytes":"448"},"t_struct(PostEncryptedData)2591_storage":{"encoding":"inplace","label":"struct Structures.PostEncryptedData","members":[{"astId":2586,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"encryptedData","offset":0,"slot":"0","type":"t_bytes_storage"},{"astId":2588,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"encryptedKey","offset":0,"slot":"1","type":"t_bytes_storage"},{"astId":2590,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"decryptedData","offset":0,"slot":"2","type":"t_bytes_storage"}],"numberOfBytes":"96"},"t_struct(PostEscrow)2620_storage":{"encoding":"inplace","label":"struct Structures.PostEscrow","members":[{"astId":2609,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"buyer","offset":0,"slot":"0","type":"t_address"},{"astId":2611,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"seller","offset":0,"slot":"1","type":"t_address"},{"astId":2613,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"stake","offset":0,"slot":"2","type":"t_uint256"},{"astId":2615,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"payment","offset":0,"slot":"3","type":"t_uint256"},{"astId":2617,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"punishment","offset":0,"slot":"4","type":"t_uint256"},{"astId":2619,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"penalty","offset":0,"slot":"5","type":"t_uint256"}],"numberOfBytes":"192"},"t_struct(PostSettings)2607_storage":{"encoding":"inplace","label":"struct Structures.PostSettings","members":[{"astId":2594,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"status","offset":0,"slot":"0","type":"t_enum(PostStatus)2521"},{"astId":2597,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"postType","offset":1,"slot":"0","type":"t_enum(PostType)2531"},{"astId":2599,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"creationTimeStamp","offset":0,"slot":"1","type":"t_uint256"},{"astId":2601,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"endTimeStamp","offset":0,"slot":"2","type":"t_uint256"},{"astId":2603,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"duration","offset":0,"slot":"3","type":"t_uint256"},{"astId":2606,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"tokenId","offset":0,"slot":"4","type":"t_enum(Tokens)2525"}],"numberOfBytes":"160"},"t_struct(User)2627_storage":{"encoding":"inplace","label":"struct Structures.User","members":[{"astId":2622,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"evmAddress","offset":0,"slot":"0","type":"t_address"},{"astId":2624,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"sismoVaultId","offset":0,"slot":"1","type":"t_bytes_storage"},{"astId":2626,"contract":"contracts/features/MecenateFeed.sol:MecenateFeed","label":"publicKey","offset":0,"slot":"2","type":"t_bytes_storage"}],"numberOfBytes":"96"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{"version()":{"notice":"Returns the full semver contract version."}},"version":1}}},"contracts/helpers/eas/IEAS.sol":{"IEAS":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":true,"internalType":"address","name":"attester","type":"address"},{"indexed":false,"internalType":"bytes32","name":"uid","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"schemaUID","type":"bytes32"}],"name":"Attested","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":true,"internalType":"address","name":"attester","type":"address"},{"indexed":false,"internalType":"bytes32","name":"uid","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"schemaUID","type":"bytes32"}],"name":"Revoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"revoker","type":"address"},{"indexed":true,"internalType":"bytes32","name":"data","type":"bytes32"},{"indexed":true,"internalType":"uint64","name":"timestamp","type":"uint64"}],"name":"RevokedOffchain","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"data","type":"bytes32"},{"indexed":true,"internalType":"uint64","name":"timestamp","type":"uint64"}],"name":"Timestamped","type":"event"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct AttestationRequestData","name":"data","type":"tuple"}],"internalType":"struct AttestationRequest","name":"request","type":"tuple"}],"name":"attest","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct AttestationRequestData","name":"data","type":"tuple"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"internalType":"struct Signature","name":"signature","type":"tuple"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"uint64","name":"deadline","type":"uint64"}],"internalType":"struct DelegatedAttestationRequest","name":"delegatedRequest","type":"tuple"}],"name":"attestByDelegation","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"getAttestation","outputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"revoker","type":"address"},{"internalType":"bytes32","name":"data","type":"bytes32"}],"name":"getRevokeOffchain","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSchemaRegistry","outputs":[{"internalType":"contract ISchemaRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"data","type":"bytes32"}],"name":"getTimestamp","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"isAttestationValid","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct AttestationRequestData[]","name":"data","type":"tuple[]"}],"internalType":"struct MultiAttestationRequest[]","name":"multiRequests","type":"tuple[]"}],"name":"multiAttest","outputs":[{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct AttestationRequestData[]","name":"data","type":"tuple[]"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"internalType":"struct Signature[]","name":"signatures","type":"tuple[]"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"uint64","name":"deadline","type":"uint64"}],"internalType":"struct MultiDelegatedAttestationRequest[]","name":"multiDelegatedRequests","type":"tuple[]"}],"name":"multiAttestByDelegation","outputs":[{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct RevocationRequestData[]","name":"data","type":"tuple[]"}],"internalType":"struct MultiRevocationRequest[]","name":"multiRequests","type":"tuple[]"}],"name":"multiRevoke","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct RevocationRequestData[]","name":"data","type":"tuple[]"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"internalType":"struct Signature[]","name":"signatures","type":"tuple[]"},{"internalType":"address","name":"revoker","type":"address"},{"internalType":"uint64","name":"deadline","type":"uint64"}],"internalType":"struct MultiDelegatedRevocationRequest[]","name":"multiDelegatedRequests","type":"tuple[]"}],"name":"multiRevokeByDelegation","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"data","type":"bytes32[]"}],"name":"multiRevokeOffchain","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"data","type":"bytes32[]"}],"name":"multiTimestamp","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct RevocationRequestData","name":"data","type":"tuple"}],"internalType":"struct RevocationRequest","name":"request","type":"tuple"}],"name":"revoke","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"schema","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"uint256","name":"value","type":"uint256"}],"internalType":"struct RevocationRequestData","name":"data","type":"tuple"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"internalType":"struct Signature","name":"signature","type":"tuple"},{"internalType":"address","name":"revoker","type":"address"},{"internalType":"uint64","name":"deadline","type":"uint64"}],"internalType":"struct DelegatedRevocationRequest","name":"delegatedRequest","type":"tuple"}],"name":"revokeByDelegation","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"data","type":"bytes32"}],"name":"revokeOffchain","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"data","type":"bytes32"}],"name":"timestamp","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"Attested(address,address,bytes32,bytes32)":{"params":{"attester":"The attesting account.","recipient":"The recipient of the attestation.","schemaUID":"The UID of the schema.","uid":"The UID the revoked attestation."}},"Revoked(address,address,bytes32,bytes32)":{"params":{"attester":"The attesting account.","recipient":"The recipient of the attestation.","schemaUID":"The UID of the schema.","uid":"The UID the revoked attestation."}},"RevokedOffchain(address,bytes32,uint64)":{"params":{"data":"The data.","revoker":"The address of the revoker.","timestamp":"The timestamp."}},"Timestamped(bytes32,uint64)":{"params":{"data":"The data.","timestamp":"The timestamp."}}},"kind":"dev","methods":{"attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))":{"params":{"request":"The arguments of the attestation request."},"returns":{"_0":"The UID of the new attestation. Example:     attest({         schema: \"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\",         data: {             recipient: \"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\",             expirationTime: 0,             revocable: true,             refUID: \"0x0000000000000000000000000000000000000000000000000000000000000000\",             data: \"0xF00D\",             value: 0         }     })"}},"attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address,uint64))":{"params":{"delegatedRequest":"The arguments of the delegated attestation request."},"returns":{"_0":"The UID of the new attestation. Example:     attestByDelegation({         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: {             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',             expirationTime: 1673891048,             revocable: true,             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',             data: '0x1234',             value: 0         },         signature: {             v: 28,             r: '0x148c...b25b',             s: '0x5a72...be22'         },         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',         deadline: 1673891048     })"}},"getAttestation(bytes32)":{"params":{"uid":"The UID of the attestation to retrieve."},"returns":{"_0":"The attestation data members."}},"getRevokeOffchain(address,bytes32)":{"params":{"data":"The data to query."},"returns":{"_0":"The timestamp the data was timestamped with."}},"getSchemaRegistry()":{"returns":{"_0":"The address of the global schema registry."}},"getTimestamp(bytes32)":{"params":{"data":"The data to query."},"returns":{"_0":"The timestamp the data was timestamped with."}},"isAttestationValid(bytes32)":{"params":{"uid":"The UID of the attestation to retrieve."},"returns":{"_0":"Whether an attestation exists."}},"multiAttest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[])[])":{"params":{"multiRequests":"The arguments of the multi attestation requests. The requests should be grouped by distinct     schema ids to benefit from the best batching optimization."},"returns":{"_0":"The UIDs of the new attestations. Example:     multiAttest([{         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',         data: [{             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',             expirationTime: 1673891048,             revocable: true,             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',             data: '0x1234',             value: 1000         },         {             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',             expirationTime: 0,             revocable: false,             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',             data: '0x00',             value: 0         }],     },     {         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',         data: [{             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',             expirationTime: 0,             revocable: true,             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',             data: '0x12345678',             value: 0         },     }])"}},"multiAttestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])":{"params":{"multiDelegatedRequests":"The arguments of the delegated multi attestation requests. The requests should be     grouped by distinct schema ids to benefit from the best batching optimization."},"returns":{"_0":"The UIDs of the new attestations. Example:     multiAttestByDelegation([{         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: [{             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',             expirationTime: 1673891048,             revocable: true,             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',             data: '0x1234',             value: 0         },         {             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',             expirationTime: 0,             revocable: false,             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',             data: '0x00',             value: 0         }],         signatures: [{             v: 28,             r: '0x148c...b25b',             s: '0x5a72...be22'         },         {             v: 28,             r: '0x487s...67bb',             s: '0x12ad...2366'         }],         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',         deadline: 1673891048     }])"}},"multiRevoke((bytes32,(bytes32,uint256)[])[])":{"params":{"multiRequests":"The arguments of the multi revocation requests. The requests should be grouped by distinct     schema ids to benefit from the best batching optimization. Example:     multiRevoke([{         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: [{             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',             value: 1000         },         {             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',             value: 0         }],     },     {         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',         data: [{             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',             value: 0         },     }])"}},"multiRevokeByDelegation((bytes32,(bytes32,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])":{"params":{"multiDelegatedRequests":"The arguments of the delegated multi revocation attestation requests. The requests     should be grouped by distinct schema ids to benefit from the best batching optimization. Example:     multiRevokeByDelegation([{         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: [{             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',             value: 1000         },         {             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',             value: 0         }],         signatures: [{             v: 28,             r: '0x148c...b25b',             s: '0x5a72...be22'         },         {             v: 28,             r: '0x487s...67bb',             s: '0x12ad...2366'         }],         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',         deadline: 1673891048     }])"}},"multiRevokeOffchain(bytes32[])":{"params":{"data":"The data to timestamp."},"returns":{"_0":"The timestamp the data was revoked with."}},"multiTimestamp(bytes32[])":{"params":{"data":"The data to timestamp."},"returns":{"_0":"The timestamp the data was timestamped with."}},"revoke((bytes32,(bytes32,uint256)))":{"params":{"request":"The arguments of the revocation request. Example:     revoke({         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: {             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',             value: 0         }     })"}},"revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address,uint64))":{"params":{"delegatedRequest":"The arguments of the delegated revocation request. Example:     revokeByDelegation({         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: {             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',             value: 0         },         signature: {             v: 27,             r: '0xb593...7142',             s: '0x0f5b...2cce'         },         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',         deadline: 1673891048     })"}},"revokeOffchain(bytes32)":{"params":{"data":"The data to timestamp."},"returns":{"_0":"The timestamp the data was revoked with."}},"timestamp(bytes32)":{"params":{"data":"The data to timestamp."},"returns":{"_0":"The timestamp the data was timestamped with."}}},"title":"IEAS","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))":"f17325e7","attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address,uint64))":"3c042715","getAttestation(bytes32)":"a3112a64","getRevokeOffchain(address,bytes32)":"b469318d","getSchemaRegistry()":"f10b5cc8","getTimestamp(bytes32)":"d45c4435","isAttestationValid(bytes32)":"e30bb563","multiAttest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[])[])":"44adc90e","multiAttestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])":"95411525","multiRevoke((bytes32,(bytes32,uint256)[])[])":"4cb7e9e5","multiRevokeByDelegation((bytes32,(bytes32,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])":"0eabf660","multiRevokeOffchain(bytes32[])":"13893f61","multiTimestamp(bytes32[])":"e71ff365","revoke((bytes32,(bytes32,uint256)))":"46926267","revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address,uint64))":"a6d4dbc7","revokeOffchain(bytes32)":"cf190f34","timestamp(bytes32)":"4d003070"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"schemaUID\",\"type\":\"bytes32\"}],\"name\":\"Attested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"schemaUID\",\"type\":\"bytes32\"}],\"name\":\"Revoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revoker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"RevokedOffchain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"Timestamped\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct AttestationRequestData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct AttestationRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"attest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct AttestationRequestData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Signature\",\"name\":\"signature\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"}],\"internalType\":\"struct DelegatedAttestationRequest\",\"name\":\"delegatedRequest\",\"type\":\"tuple\"}],\"name\":\"attestByDelegation\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"getAttestation\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"revoker\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"getRevokeOffchain\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSchemaRegistry\",\"outputs\":[{\"internalType\":\"contract ISchemaRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"isAttestationValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct AttestationRequestData[]\",\"name\":\"data\",\"type\":\"tuple[]\"}],\"internalType\":\"struct MultiAttestationRequest[]\",\"name\":\"multiRequests\",\"type\":\"tuple[]\"}],\"name\":\"multiAttest\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct AttestationRequestData[]\",\"name\":\"data\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Signature[]\",\"name\":\"signatures\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"}],\"internalType\":\"struct MultiDelegatedAttestationRequest[]\",\"name\":\"multiDelegatedRequests\",\"type\":\"tuple[]\"}],\"name\":\"multiAttestByDelegation\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct RevocationRequestData[]\",\"name\":\"data\",\"type\":\"tuple[]\"}],\"internalType\":\"struct MultiRevocationRequest[]\",\"name\":\"multiRequests\",\"type\":\"tuple[]\"}],\"name\":\"multiRevoke\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct RevocationRequestData[]\",\"name\":\"data\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Signature[]\",\"name\":\"signatures\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"revoker\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"}],\"internalType\":\"struct MultiDelegatedRevocationRequest[]\",\"name\":\"multiDelegatedRequests\",\"type\":\"tuple[]\"}],\"name\":\"multiRevokeByDelegation\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"multiRevokeOffchain\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"multiTimestamp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct RevocationRequestData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct RevocationRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct RevocationRequestData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Signature\",\"name\":\"signature\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"revoker\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"deadline\",\"type\":\"uint64\"}],\"internalType\":\"struct DelegatedRevocationRequest\",\"name\":\"delegatedRequest\",\"type\":\"tuple\"}],\"name\":\"revokeByDelegation\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"revokeOffchain\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"timestamp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Attested(address,address,bytes32,bytes32)\":{\"params\":{\"attester\":\"The attesting account.\",\"recipient\":\"The recipient of the attestation.\",\"schemaUID\":\"The UID of the schema.\",\"uid\":\"The UID the revoked attestation.\"}},\"Revoked(address,address,bytes32,bytes32)\":{\"params\":{\"attester\":\"The attesting account.\",\"recipient\":\"The recipient of the attestation.\",\"schemaUID\":\"The UID of the schema.\",\"uid\":\"The UID the revoked attestation.\"}},\"RevokedOffchain(address,bytes32,uint64)\":{\"params\":{\"data\":\"The data.\",\"revoker\":\"The address of the revoker.\",\"timestamp\":\"The timestamp.\"}},\"Timestamped(bytes32,uint64)\":{\"params\":{\"data\":\"The data.\",\"timestamp\":\"The timestamp.\"}}},\"kind\":\"dev\",\"methods\":{\"attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))\":{\"params\":{\"request\":\"The arguments of the attestation request.\"},\"returns\":{\"_0\":\"The UID of the new attestation. Example:     attest({         schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",         data: {             recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",             expirationTime: 0,             revocable: true,             refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",             data: \\\"0xF00D\\\",             value: 0         }     })\"}},\"attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address,uint64))\":{\"params\":{\"delegatedRequest\":\"The arguments of the delegated attestation request.\"},\"returns\":{\"_0\":\"The UID of the new attestation. Example:     attestByDelegation({         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: {             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',             expirationTime: 1673891048,             revocable: true,             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',             data: '0x1234',             value: 0         },         signature: {             v: 28,             r: '0x148c...b25b',             s: '0x5a72...be22'         },         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',         deadline: 1673891048     })\"}},\"getAttestation(bytes32)\":{\"params\":{\"uid\":\"The UID of the attestation to retrieve.\"},\"returns\":{\"_0\":\"The attestation data members.\"}},\"getRevokeOffchain(address,bytes32)\":{\"params\":{\"data\":\"The data to query.\"},\"returns\":{\"_0\":\"The timestamp the data was timestamped with.\"}},\"getSchemaRegistry()\":{\"returns\":{\"_0\":\"The address of the global schema registry.\"}},\"getTimestamp(bytes32)\":{\"params\":{\"data\":\"The data to query.\"},\"returns\":{\"_0\":\"The timestamp the data was timestamped with.\"}},\"isAttestationValid(bytes32)\":{\"params\":{\"uid\":\"The UID of the attestation to retrieve.\"},\"returns\":{\"_0\":\"Whether an attestation exists.\"}},\"multiAttest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[])[])\":{\"params\":{\"multiRequests\":\"The arguments of the multi attestation requests. The requests should be grouped by distinct     schema ids to benefit from the best batching optimization.\"},\"returns\":{\"_0\":\"The UIDs of the new attestations. Example:     multiAttest([{         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',         data: [{             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',             expirationTime: 1673891048,             revocable: true,             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',             data: '0x1234',             value: 1000         },         {             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',             expirationTime: 0,             revocable: false,             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',             data: '0x00',             value: 0         }],     },     {         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',         data: [{             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',             expirationTime: 0,             revocable: true,             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',             data: '0x12345678',             value: 0         },     }])\"}},\"multiAttestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])\":{\"params\":{\"multiDelegatedRequests\":\"The arguments of the delegated multi attestation requests. The requests should be     grouped by distinct schema ids to benefit from the best batching optimization.\"},\"returns\":{\"_0\":\"The UIDs of the new attestations. Example:     multiAttestByDelegation([{         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: [{             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',             expirationTime: 1673891048,             revocable: true,             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',             data: '0x1234',             value: 0         },         {             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',             expirationTime: 0,             revocable: false,             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',             data: '0x00',             value: 0         }],         signatures: [{             v: 28,             r: '0x148c...b25b',             s: '0x5a72...be22'         },         {             v: 28,             r: '0x487s...67bb',             s: '0x12ad...2366'         }],         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',         deadline: 1673891048     }])\"}},\"multiRevoke((bytes32,(bytes32,uint256)[])[])\":{\"params\":{\"multiRequests\":\"The arguments of the multi revocation requests. The requests should be grouped by distinct     schema ids to benefit from the best batching optimization. Example:     multiRevoke([{         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: [{             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',             value: 1000         },         {             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',             value: 0         }],     },     {         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',         data: [{             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',             value: 0         },     }])\"}},\"multiRevokeByDelegation((bytes32,(bytes32,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])\":{\"params\":{\"multiDelegatedRequests\":\"The arguments of the delegated multi revocation attestation requests. The requests     should be grouped by distinct schema ids to benefit from the best batching optimization. Example:     multiRevokeByDelegation([{         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: [{             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',             value: 1000         },         {             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',             value: 0         }],         signatures: [{             v: 28,             r: '0x148c...b25b',             s: '0x5a72...be22'         },         {             v: 28,             r: '0x487s...67bb',             s: '0x12ad...2366'         }],         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',         deadline: 1673891048     }])\"}},\"multiRevokeOffchain(bytes32[])\":{\"params\":{\"data\":\"The data to timestamp.\"},\"returns\":{\"_0\":\"The timestamp the data was revoked with.\"}},\"multiTimestamp(bytes32[])\":{\"params\":{\"data\":\"The data to timestamp.\"},\"returns\":{\"_0\":\"The timestamp the data was timestamped with.\"}},\"revoke((bytes32,(bytes32,uint256)))\":{\"params\":{\"request\":\"The arguments of the revocation request. Example:     revoke({         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: {             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',             value: 0         }     })\"}},\"revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address,uint64))\":{\"params\":{\"delegatedRequest\":\"The arguments of the delegated revocation request. Example:     revokeByDelegation({         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',         data: {             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',             value: 0         },         signature: {             v: 27,             r: '0xb593...7142',             s: '0x0f5b...2cce'         },         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',         deadline: 1673891048     })\"}},\"revokeOffchain(bytes32)\":{\"params\":{\"data\":\"The data to timestamp.\"},\"returns\":{\"_0\":\"The timestamp the data was revoked with.\"}},\"timestamp(bytes32)\":{\"params\":{\"data\":\"The data to timestamp.\"},\"returns\":{\"_0\":\"The timestamp the data was timestamped with.\"}}},\"title\":\"IEAS\",\"version\":1},\"userdoc\":{\"events\":{\"Attested(address,address,bytes32,bytes32)\":{\"notice\":\"Emitted when an attestation has been made.\"},\"Revoked(address,address,bytes32,bytes32)\":{\"notice\":\"Emitted when an attestation has been revoked.\"},\"RevokedOffchain(address,bytes32,uint64)\":{\"notice\":\"Emitted when a data has been revoked.\"},\"Timestamped(bytes32,uint64)\":{\"notice\":\"Emitted when a data has been timestamped.\"}},\"kind\":\"user\",\"methods\":{\"attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))\":{\"notice\":\"Attests to a specific schema.\"},\"attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address,uint64))\":{\"notice\":\"Attests to a specific schema via the provided ECDSA signature.\"},\"getAttestation(bytes32)\":{\"notice\":\"Returns an existing attestation by UID.\"},\"getRevokeOffchain(address,bytes32)\":{\"notice\":\"Returns the timestamp that the specified data was timestamped with.\"},\"getSchemaRegistry()\":{\"notice\":\"Returns the address of the global schema registry.\"},\"getTimestamp(bytes32)\":{\"notice\":\"Returns the timestamp that the specified data was timestamped with.\"},\"isAttestationValid(bytes32)\":{\"notice\":\"Checks whether an attestation exists.\"},\"multiAttest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[])[])\":{\"notice\":\"Attests to multiple schemas.\"},\"multiAttestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])\":{\"notice\":\"Attests to multiple schemas using via provided ECDSA signatures.\"},\"multiRevoke((bytes32,(bytes32,uint256)[])[])\":{\"notice\":\"Revokes existing attestations to multiple schemas.\"},\"multiRevokeByDelegation((bytes32,(bytes32,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])\":{\"notice\":\"Revokes existing attestations to multiple schemas via provided ECDSA signatures.\"},\"multiRevokeOffchain(bytes32[])\":{\"notice\":\"Revokes the specified multiple bytes32 data.\"},\"multiTimestamp(bytes32[])\":{\"notice\":\"Timestamps the specified multiple bytes32 data.\"},\"revoke((bytes32,(bytes32,uint256)))\":{\"notice\":\"Revokes an existing attestation to a specific schema.\"},\"revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address,uint64))\":{\"notice\":\"Revokes an existing attestation to a specific schema via the provided ECDSA signature.\"},\"revokeOffchain(bytes32)\":{\"notice\":\"Revokes the specified bytes32 data.\"},\"timestamp(bytes32)\":{\"notice\":\"Timestamps the specified bytes32 data.\"}},\"notice\":\"EAS - Ethereum Attestation Service interface.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/helpers/eas/IEAS.sol\":\"IEAS\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/helpers/eas/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror DeadlineExpired();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/// @notice A struct representing ECDSA signature data.\\nstruct Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/// @notice A struct representing a single attestation.\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/// @notice A helper function to work with unchecked iterators in loops.\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685\",\"license\":\"MIT\"},\"contracts/helpers/eas/IEAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ISchemaRegistry} from \\\"./ISchemaRegistry.sol\\\";\\nimport {Attestation, Signature} from \\\"./Common.sol\\\";\\n\\n/// @notice A struct representing the arguments of the attestation request.\\nstruct AttestationRequestData {\\n    address recipient; // The recipient of the attestation.\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes32 refUID; // The UID of the related attestation.\\n    bytes data; // Custom attestation data.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the attestation request.\\nstruct AttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the full delegated attestation request.\\nstruct DelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n    Signature signature; // The ECDSA signature data.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi attestation request.\\nstruct MultiAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi attestation request.\\nstruct MultiDelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the arguments of the revocation request.\\nstruct RevocationRequestData {\\n    bytes32 uid; // The UID of the attestation to revoke.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the revocation request.\\nstruct RevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the arguments of the full delegated revocation request.\\nstruct DelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n    Signature signature; // The ECDSA signature data.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi revocation request.\\nstruct MultiRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi revocation request.\\nstruct MultiDelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @title IEAS\\n/// @notice EAS - Ethereum Attestation Service interface.\\ninterface IEAS {\\n    /// @notice Emitted when an attestation has been made.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param uid The UID the revoked attestation.\\n    /// @param schemaUID The UID of the schema.\\n    event Attested(\\n        address indexed recipient,\\n        address indexed attester,\\n        bytes32 uid,\\n        bytes32 indexed schemaUID\\n    );\\n\\n    /// @notice Emitted when an attestation has been revoked.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param schemaUID The UID of the schema.\\n    /// @param uid The UID the revoked attestation.\\n    event Revoked(\\n        address indexed recipient,\\n        address indexed attester,\\n        bytes32 uid,\\n        bytes32 indexed schemaUID\\n    );\\n\\n    /// @notice Emitted when a data has been timestamped.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event Timestamped(bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /// @notice Emitted when a data has been revoked.\\n    /// @param revoker The address of the revoker.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event RevokedOffchain(\\n        address indexed revoker,\\n        bytes32 indexed data,\\n        uint64 indexed timestamp\\n    );\\n\\n    /// @notice Returns the address of the global schema registry.\\n    /// @return The address of the global schema registry.\\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\\n\\n    /// @notice Attests to a specific schema.\\n    /// @param request The arguments of the attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attest({\\n    ///         schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",\\n    ///         data: {\\n    ///             recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n    ///             data: \\\"0xF00D\\\",\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function attest(\\n        AttestationRequest calldata request\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attestByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function attestByDelegation(\\n        DelegatedAttestationRequest calldata delegatedRequest\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to multiple schemas.\\n    /// @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttest([{\\n    ///         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\\n    ///             data: '0x12345678',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiAttest(\\n        MultiAttestationRequest[] calldata multiRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Attests to multiple schemas using via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\\n    ///     grouped by distinct schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttestByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiAttestByDelegation(\\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Revokes an existing attestation to a specific schema.\\n    /// @param request The arguments of the revocation request.\\n    ///\\n    /// Example:\\n    ///     revoke({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function revoke(RevocationRequest calldata request) external payable;\\n\\n    /// @notice Revokes an existing attestation to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated revocation request.\\n    ///\\n    /// Example:\\n    ///     revokeByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 27,\\n    ///             r: '0xb593...7142',\\n    ///             s: '0x0f5b...2cce'\\n    ///         },\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function revokeByDelegation(\\n        DelegatedRevocationRequest calldata delegatedRequest\\n    ) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas.\\n    /// @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevoke([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiRevoke(\\n        MultiRevocationRequest[] calldata multiRequests\\n    ) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests\\n    ///     should be grouped by distinct schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevokeByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiRevokeByDelegation(\\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\\n    ) external payable;\\n\\n    /// @notice Timestamps the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function timestamp(bytes32 data) external returns (uint64);\\n\\n    /// @notice Timestamps the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\\n\\n    /// @notice Revokes the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function revokeOffchain(bytes32 data) external returns (uint64);\\n\\n    /// @notice Revokes the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function multiRevokeOffchain(\\n        bytes32[] calldata data\\n    ) external returns (uint64);\\n\\n    /// @notice Returns an existing attestation by UID.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return The attestation data members.\\n    function getAttestation(\\n        bytes32 uid\\n    ) external view returns (Attestation memory);\\n\\n    /// @notice Checks whether an attestation exists.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return Whether an attestation exists.\\n    function isAttestationValid(bytes32 uid) external view returns (bool);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getTimestamp(bytes32 data) external view returns (uint64);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getRevokeOffchain(\\n        address revoker,\\n        bytes32 data\\n    ) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xc95cca3d90dbae3a21d0f0e28fdf38cc5a85cbd8c760b7759782b18e8f62acc2\",\"license\":\"MIT\"},\"contracts/helpers/eas/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ISchemaResolver} from \\\"./ISchemaResolver.sol\\\";\\n\\n/// @notice A struct representing a record for a submitted schema.\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\n/// @title ISchemaRegistry\\n/// @notice The interface of global attestation schemas for the Ethereum Attestation Service protocol.\\ninterface ISchemaRegistry {\\n    /// @notice Emitted when a new schema has been registered\\n    /// @param uid The schema UID.\\n    /// @param registerer The address of the account used to register the schema.\\n    /// @param schema The schema data.\\n    event Registered(\\n        bytes32 indexed uid,\\n        address indexed registerer,\\n        SchemaRecord schema\\n    );\\n\\n    /// @notice Submits and reserves a new schema\\n    /// @param schema The schema data schema.\\n    /// @param resolver An optional schema resolver.\\n    /// @param revocable Whether the schema allows revocations explicitly.\\n    /// @return The UID of the new schema.\\n    function register(\\n        string calldata schema,\\n        ISchemaResolver resolver,\\n        bool revocable\\n    ) external returns (bytes32);\\n\\n    /// @notice Returns an existing schema by UID\\n    /// @param uid The UID of the schema to retrieve.\\n    /// @return The schema data members.\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\\n\",\"keccak256\":\"0x743ddc248c97a78d34239035d1d9557a74dcaaa5b59a2aa66cea4eadabb8b2de\",\"license\":\"MIT\"},\"contracts/helpers/eas/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {Attestation} from \\\"./Common.sol\\\";\\n\\n/// @title ISchemaResolver\\n/// @notice The interface of an optional schema resolver.\\ninterface ISchemaResolver {\\n    /// @notice Checks if the resolver can be sent ETH.\\n    /// @return Whether the resolver supports ETH transfers.\\n    function isPayable() external pure returns (bool);\\n\\n    /// @notice Processes an attestation and verifies whether it's valid.\\n    /// @param attestation The new attestation.\\n    /// @return Whether the attestation is valid.\\n    function attest(\\n        Attestation calldata attestation\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes multiple attestations and verifies whether they are valid.\\n    /// @param attestations The new attestations.\\n    /// @param values Explicit ETH amounts which were sent with each attestation.\\n    /// @return Whether all the attestations are valid.\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\\n    /// @param attestation The existing attestation to be revoked.\\n    /// @return Whether the attestation can be revoked.\\n    function revoke(\\n        Attestation calldata attestation\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\\n    /// @param attestations The existing attestations to be revoked.\\n    /// @param values Explicit ETH amounts which were sent with each revocation.\\n    /// @return Whether the attestations can be revoked.\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0x97ec835833519c6c11c0fb097ea5bccd888e65f650590fdb643d937430bb4f03\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"Attested(address,address,bytes32,bytes32)":{"notice":"Emitted when an attestation has been made."},"Revoked(address,address,bytes32,bytes32)":{"notice":"Emitted when an attestation has been revoked."},"RevokedOffchain(address,bytes32,uint64)":{"notice":"Emitted when a data has been revoked."},"Timestamped(bytes32,uint64)":{"notice":"Emitted when a data has been timestamped."}},"kind":"user","methods":{"attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))":{"notice":"Attests to a specific schema."},"attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address,uint64))":{"notice":"Attests to a specific schema via the provided ECDSA signature."},"getAttestation(bytes32)":{"notice":"Returns an existing attestation by UID."},"getRevokeOffchain(address,bytes32)":{"notice":"Returns the timestamp that the specified data was timestamped with."},"getSchemaRegistry()":{"notice":"Returns the address of the global schema registry."},"getTimestamp(bytes32)":{"notice":"Returns the timestamp that the specified data was timestamped with."},"isAttestationValid(bytes32)":{"notice":"Checks whether an attestation exists."},"multiAttest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[])[])":{"notice":"Attests to multiple schemas."},"multiAttestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])":{"notice":"Attests to multiple schemas using via provided ECDSA signatures."},"multiRevoke((bytes32,(bytes32,uint256)[])[])":{"notice":"Revokes existing attestations to multiple schemas."},"multiRevokeByDelegation((bytes32,(bytes32,uint256)[],(uint8,bytes32,bytes32)[],address,uint64)[])":{"notice":"Revokes existing attestations to multiple schemas via provided ECDSA signatures."},"multiRevokeOffchain(bytes32[])":{"notice":"Revokes the specified multiple bytes32 data."},"multiTimestamp(bytes32[])":{"notice":"Timestamps the specified multiple bytes32 data."},"revoke((bytes32,(bytes32,uint256)))":{"notice":"Revokes an existing attestation to a specific schema."},"revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address,uint64))":{"notice":"Revokes an existing attestation to a specific schema via the provided ECDSA signature."},"revokeOffchain(bytes32)":{"notice":"Revokes the specified bytes32 data."},"timestamp(bytes32)":{"notice":"Timestamps the specified bytes32 data."}},"notice":"EAS - Ethereum Attestation Service interface.","version":1}}},"contracts/helpers/eas/ISchemaRegistry.sol":{"ISchemaRegistry":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"uid","type":"bytes32"},{"indexed":true,"internalType":"address","name":"registerer","type":"address"},{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"contract ISchemaResolver","name":"resolver","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"string","name":"schema","type":"string"}],"indexed":false,"internalType":"struct SchemaRecord","name":"schema","type":"tuple"}],"name":"Registered","type":"event"},{"inputs":[{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"getSchema","outputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"contract ISchemaResolver","name":"resolver","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"string","name":"schema","type":"string"}],"internalType":"struct SchemaRecord","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"schema","type":"string"},{"internalType":"contract ISchemaResolver","name":"resolver","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"}],"name":"register","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"Registered(bytes32,address,(bytes32,address,bool,string))":{"params":{"registerer":"The address of the account used to register the schema.","schema":"The schema data.","uid":"The schema UID."}}},"kind":"dev","methods":{"getSchema(bytes32)":{"params":{"uid":"The UID of the schema to retrieve."},"returns":{"_0":"The schema data members."}},"register(string,address,bool)":{"params":{"resolver":"An optional schema resolver.","revocable":"Whether the schema allows revocations explicitly.","schema":"The schema data schema."},"returns":{"_0":"The UID of the new schema."}}},"title":"ISchemaRegistry","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getSchema(bytes32)":"a2ea7c6e","register(string,address,bool)":"60d7a278"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registerer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"contract ISchemaResolver\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"schema\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct SchemaRecord\",\"name\":\"schema\",\"type\":\"tuple\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"getSchema\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"contract ISchemaResolver\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"schema\",\"type\":\"string\"}],\"internalType\":\"struct SchemaRecord\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"schema\",\"type\":\"string\"},{\"internalType\":\"contract ISchemaResolver\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Registered(bytes32,address,(bytes32,address,bool,string))\":{\"params\":{\"registerer\":\"The address of the account used to register the schema.\",\"schema\":\"The schema data.\",\"uid\":\"The schema UID.\"}}},\"kind\":\"dev\",\"methods\":{\"getSchema(bytes32)\":{\"params\":{\"uid\":\"The UID of the schema to retrieve.\"},\"returns\":{\"_0\":\"The schema data members.\"}},\"register(string,address,bool)\":{\"params\":{\"resolver\":\"An optional schema resolver.\",\"revocable\":\"Whether the schema allows revocations explicitly.\",\"schema\":\"The schema data schema.\"},\"returns\":{\"_0\":\"The UID of the new schema.\"}}},\"title\":\"ISchemaRegistry\",\"version\":1},\"userdoc\":{\"events\":{\"Registered(bytes32,address,(bytes32,address,bool,string))\":{\"notice\":\"Emitted when a new schema has been registered\"}},\"kind\":\"user\",\"methods\":{\"getSchema(bytes32)\":{\"notice\":\"Returns an existing schema by UID\"},\"register(string,address,bool)\":{\"notice\":\"Submits and reserves a new schema\"}},\"notice\":\"The interface of global attestation schemas for the Ethereum Attestation Service protocol.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/helpers/eas/ISchemaRegistry.sol\":\"ISchemaRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/helpers/eas/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror DeadlineExpired();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/// @notice A struct representing ECDSA signature data.\\nstruct Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/// @notice A struct representing a single attestation.\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/// @notice A helper function to work with unchecked iterators in loops.\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685\",\"license\":\"MIT\"},\"contracts/helpers/eas/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ISchemaResolver} from \\\"./ISchemaResolver.sol\\\";\\n\\n/// @notice A struct representing a record for a submitted schema.\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\n/// @title ISchemaRegistry\\n/// @notice The interface of global attestation schemas for the Ethereum Attestation Service protocol.\\ninterface ISchemaRegistry {\\n    /// @notice Emitted when a new schema has been registered\\n    /// @param uid The schema UID.\\n    /// @param registerer The address of the account used to register the schema.\\n    /// @param schema The schema data.\\n    event Registered(\\n        bytes32 indexed uid,\\n        address indexed registerer,\\n        SchemaRecord schema\\n    );\\n\\n    /// @notice Submits and reserves a new schema\\n    /// @param schema The schema data schema.\\n    /// @param resolver An optional schema resolver.\\n    /// @param revocable Whether the schema allows revocations explicitly.\\n    /// @return The UID of the new schema.\\n    function register(\\n        string calldata schema,\\n        ISchemaResolver resolver,\\n        bool revocable\\n    ) external returns (bytes32);\\n\\n    /// @notice Returns an existing schema by UID\\n    /// @param uid The UID of the schema to retrieve.\\n    /// @return The schema data members.\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\\n\",\"keccak256\":\"0x743ddc248c97a78d34239035d1d9557a74dcaaa5b59a2aa66cea4eadabb8b2de\",\"license\":\"MIT\"},\"contracts/helpers/eas/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {Attestation} from \\\"./Common.sol\\\";\\n\\n/// @title ISchemaResolver\\n/// @notice The interface of an optional schema resolver.\\ninterface ISchemaResolver {\\n    /// @notice Checks if the resolver can be sent ETH.\\n    /// @return Whether the resolver supports ETH transfers.\\n    function isPayable() external pure returns (bool);\\n\\n    /// @notice Processes an attestation and verifies whether it's valid.\\n    /// @param attestation The new attestation.\\n    /// @return Whether the attestation is valid.\\n    function attest(\\n        Attestation calldata attestation\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes multiple attestations and verifies whether they are valid.\\n    /// @param attestations The new attestations.\\n    /// @param values Explicit ETH amounts which were sent with each attestation.\\n    /// @return Whether all the attestations are valid.\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\\n    /// @param attestation The existing attestation to be revoked.\\n    /// @return Whether the attestation can be revoked.\\n    function revoke(\\n        Attestation calldata attestation\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\\n    /// @param attestations The existing attestations to be revoked.\\n    /// @param values Explicit ETH amounts which were sent with each revocation.\\n    /// @return Whether the attestations can be revoked.\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0x97ec835833519c6c11c0fb097ea5bccd888e65f650590fdb643d937430bb4f03\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"Registered(bytes32,address,(bytes32,address,bool,string))":{"notice":"Emitted when a new schema has been registered"}},"kind":"user","methods":{"getSchema(bytes32)":{"notice":"Returns an existing schema by UID"},"register(string,address,bool)":{"notice":"Submits and reserves a new schema"}},"notice":"The interface of global attestation schemas for the Ethereum Attestation Service protocol.","version":1}}},"contracts/helpers/eas/ISchemaResolver.sol":{"ISchemaResolver":{"abi":[{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"attest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"isPayable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiAttest","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation[]","name":"attestations","type":"tuple[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"multiRevoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"uid","type":"bytes32"},{"internalType":"bytes32","name":"schema","type":"bytes32"},{"internalType":"uint64","name":"time","type":"uint64"},{"internalType":"uint64","name":"expirationTime","type":"uint64"},{"internalType":"uint64","name":"revocationTime","type":"uint64"},{"internalType":"bytes32","name":"refUID","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"address","name":"attester","type":"address"},{"internalType":"bool","name":"revocable","type":"bool"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Attestation","name":"attestation","type":"tuple"}],"name":"revoke","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"payable","type":"function"}],"devdoc":{"kind":"dev","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The new attestation."},"returns":{"_0":"Whether the attestation is valid."}},"isPayable()":{"returns":{"_0":"Whether the resolver supports ETH transfers."}},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The new attestations.","values":"Explicit ETH amounts which were sent with each attestation."},"returns":{"_0":"Whether all the attestations are valid."}},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"params":{"attestations":"The existing attestations to be revoked.","values":"Explicit ETH amounts which were sent with each revocation."},"returns":{"_0":"Whether the attestations can be revoked."}},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"params":{"attestation":"The existing attestation to be revoked."},"returns":{"_0":"Whether the attestation can be revoked."}}},"title":"ISchemaResolver","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":"e60c3505","isPayable()":"ce46e046","multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":"91db0b7e","multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":"88e5b2d9","revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":"e49617e1"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"}],\"name\":\"attest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPayable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation[]\",\"name\":\"attestations\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multiAttest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation[]\",\"name\":\"attestations\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multiRevoke\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"}],\"name\":\"revoke\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))\":{\"params\":{\"attestation\":\"The new attestation.\"},\"returns\":{\"_0\":\"Whether the attestation is valid.\"}},\"isPayable()\":{\"returns\":{\"_0\":\"Whether the resolver supports ETH transfers.\"}},\"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])\":{\"params\":{\"attestations\":\"The new attestations.\",\"values\":\"Explicit ETH amounts which were sent with each attestation.\"},\"returns\":{\"_0\":\"Whether all the attestations are valid.\"}},\"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])\":{\"params\":{\"attestations\":\"The existing attestations to be revoked.\",\"values\":\"Explicit ETH amounts which were sent with each revocation.\"},\"returns\":{\"_0\":\"Whether the attestations can be revoked.\"}},\"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))\":{\"params\":{\"attestation\":\"The existing attestation to be revoked.\"},\"returns\":{\"_0\":\"Whether the attestation can be revoked.\"}}},\"title\":\"ISchemaResolver\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))\":{\"notice\":\"Processes an attestation and verifies whether it's valid.\"},\"isPayable()\":{\"notice\":\"Checks if the resolver can be sent ETH.\"},\"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])\":{\"notice\":\"Processes multiple attestations and verifies whether they are valid.\"},\"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])\":{\"notice\":\"Processes revocation of multiple attestation and verifies they can be revoked.\"},\"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))\":{\"notice\":\"Processes an attestation revocation and verifies if it can be revoked.\"}},\"notice\":\"The interface of an optional schema resolver.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/helpers/eas/ISchemaResolver.sol\":\"ISchemaResolver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/helpers/eas/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror DeadlineExpired();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/// @notice A struct representing ECDSA signature data.\\nstruct Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/// @notice A struct representing a single attestation.\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/// @notice A helper function to work with unchecked iterators in loops.\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685\",\"license\":\"MIT\"},\"contracts/helpers/eas/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {Attestation} from \\\"./Common.sol\\\";\\n\\n/// @title ISchemaResolver\\n/// @notice The interface of an optional schema resolver.\\ninterface ISchemaResolver {\\n    /// @notice Checks if the resolver can be sent ETH.\\n    /// @return Whether the resolver supports ETH transfers.\\n    function isPayable() external pure returns (bool);\\n\\n    /// @notice Processes an attestation and verifies whether it's valid.\\n    /// @param attestation The new attestation.\\n    /// @return Whether the attestation is valid.\\n    function attest(\\n        Attestation calldata attestation\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes multiple attestations and verifies whether they are valid.\\n    /// @param attestations The new attestations.\\n    /// @param values Explicit ETH amounts which were sent with each attestation.\\n    /// @return Whether all the attestations are valid.\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\\n    /// @param attestation The existing attestation to be revoked.\\n    /// @return Whether the attestation can be revoked.\\n    function revoke(\\n        Attestation calldata attestation\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\\n    /// @param attestations The existing attestations to be revoked.\\n    /// @param values Explicit ETH amounts which were sent with each revocation.\\n    /// @return Whether the attestations can be revoked.\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0x97ec835833519c6c11c0fb097ea5bccd888e65f650590fdb643d937430bb4f03\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation and verifies whether it's valid."},"isPayable()":{"notice":"Checks if the resolver can be sent ETH."},"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes multiple attestations and verifies whether they are valid."},"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])":{"notice":"Processes revocation of multiple attestation and verifies they can be revoked."},"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))":{"notice":"Processes an attestation revocation and verifies if it can be revoked."}},"notice":"The interface of an optional schema resolver.","version":1}}},"contracts/interfaces/IMUSE.sol":{"IMUSE":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","burn(uint256)":"42966c68","decreaseAllowance(address,uint256)":"a457c2d7","increaseAllowance(address,uint256)":"39509351","mint(uint256)":"a0712d68","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IMUSE.sol\":\"IMUSE\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/interfaces/IMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n// import IERC20 from openzeppelin\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMUSE is IERC20 {\\n    function increaseAllowance(\\n        address spender,\\n        uint256 addedValue\\n    ) external returns (bool);\\n\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 subtractedValue\\n    ) external returns (bool);\\n\\n    function mint(uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x8b0a4012a1cd0815460bb3d15278671589bb85003ff2c38315701b3f2228c633\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IMecenateBay.sol":{"IMecenateBay":{"abi":[{"inputs":[],"name":"allRequests","outputs":[{"components":[{"internalType":"bytes","name":"request","type":"bytes"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"address","name":"postAddress","type":"address"},{"internalType":"bool","name":"accepted","type":"bool"},{"internalType":"uint256","name":"postCount","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"address","name":"buyerAddress","type":"address"}],"internalType":"struct Structures.BayRequest[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"contractCounter","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allRequests()":"8a4473a9","contractCounter()":"067bd3b4"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"allRequests\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"request\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"postAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"postCount\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"buyerAddress\",\"type\":\"address\"}],\"internalType\":\"struct Structures.BayRequest[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IMecenateBay.sol\":\"IMecenateBay\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/interfaces/IMecenateBay.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\nimport \\\"../library/Structures.sol\\\";\\r\\n\\r\\ninterface IMecenateBay {\\r\\n    function allRequests()\\r\\n        external\\r\\n        view\\r\\n        returns (Structures.BayRequest[] memory);\\r\\n\\r\\n    function contractCounter() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x8964368dca5e796c8c094a3275105747756aa83f66079ef4cce5f7e1c512428d\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\n * @title Structures\\n * @dev This library defines various data structures used in the Mecenate platform.\\n */\\npragma solidity 0.8.19;\\n\\nlibrary Structures {\\n    enum PostStatus {\\n        Waiting,\\n        Proposed,\\n        Accepted,\\n        Submitted,\\n        Finalized,\\n        Punished,\\n        Revealed,\\n        Renounced\\n    }\\n\\n    enum Tokens {\\n        NaN,\\n        MUSE,\\n        DAI\\n    }\\n\\n    enum PostType {\\n        Text,\\n        Image,\\n        Video,\\n        Audio,\\n        File\\n    }\\n    enum PostDuration {\\n        OneDay,\\n        ThreeDays,\\n        OneWeek,\\n        TwoWeeks,\\n        OneMonth\\n    }\\n\\n    struct FeedSettings {\\n        uint256 punishmentRatio;\\n        uint256 postCount;\\n        address usersModuleContract;\\n        address factoryContract;\\n        address router;\\n        string version;\\n    }\\n\\n    struct FactorySettings {\\n        address treasuryContract;\\n        address usersModuleContract;\\n        address easContract;\\n        bytes32 easSchema;\\n        address museToken;\\n        address daiToken;\\n        address wethToken;\\n        address router;\\n    }\\n\\n    /**\\n     * @dev Struct representing a post on the Mecenate platform.\\n     */\\n    struct Post {\\n        User creator;\\n        PostData postdata;\\n    }\\n\\n    /**\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\n     */\\n    struct PostData {\\n        PostSettings settings;\\n        PostEscrow escrow;\\n        PostEncryptedData data;\\n    }\\n\\n    /**\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\n     */\\n    struct PostEncryptedData {\\n        bytes encryptedData;\\n        bytes encryptedKey;\\n        bytes decryptedData;\\n    }\\n\\n    /**\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettings {\\n        PostStatus status;\\n        PostType postType;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n        uint256 duration;\\n        Tokens tokenId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\n     */\\n    struct PostEscrow {\\n        address buyer;\\n        address seller;\\n        uint256 stake;\\n        uint256 payment;\\n        uint256 punishment;\\n        uint256 penalty;\\n    }\\n\\n    /**\\n     * @dev Struct representing a user on the Mecenate platform.\\n     */\\n    struct User {\\n        address evmAddress;\\n        bytes sismoVaultId;\\n        bytes publicKey;\\n    }\\n\\n    /**\\n     * @dev Struct representing a feed on the Mecenate platform.\\n     */\\n    struct Feed {\\n        address contractAddress;\\n        address owner;\\n        uint256 sellerStake;\\n        uint256 buyerStake;\\n        uint256 totalStake;\\n        uint256 postCount;\\n        uint256 paymentRequested;\\n        uint256 stakeRequested;\\n        PostStatus status;\\n        Tokens tokenId;\\n        string version;\\n    }\\n\\n    /**\\n     * @dev Struct representing a bay request on the Mecenate platform.\\n     */\\n    struct BayRequest {\\n        bytes request;\\n        uint256 payment;\\n        uint256 stake;\\n        address postAddress;\\n        bool accepted;\\n        uint256 postCount;\\n        Tokens tokenId;\\n        address buyerAddress;\\n    }\\n}\\n\",\"keccak256\":\"0xab56ad7506e91048fc9c6db9fd9510c42afa61d6b11a99a273bf975643307d8f\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IMecenateFeed.sol":{"IMecenateFeed":{"abi":[{"inputs":[{"internalType":"enum Structures.Tokens","name":"","type":"uint8"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"address","name":"_funder","type":"address"},{"internalType":"address","name":"_buyer","type":"address"}],"name":"acceptPost","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"getBuyerStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getEncryptedPost","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPaymentRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPost","outputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"internalType":"struct Structures.Post","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSellerStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStakeRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStatus","outputs":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenId","outputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTotalStaked","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"postCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"acceptPost(uint8,uint256,address,address)":"07388dba","getBuyerStake()":"4c38d877","getEncryptedPost()":"729e2eb1","getPaymentRequested()":"d24e0c87","getPost()":"8c6838ba","getSellerStake()":"5c63ed69","getStakeRequested()":"faeb5e17","getStatus()":"4e69d560","getTokenId()":"010a38f5","getTotalStaked()":"0917e776","owner()":"8da5cb5b","postCount()":"17906c2e","version()":"54fd4d50"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_funder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"acceptPost\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyerStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEncryptedPost\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaymentRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPost\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.Post\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellerStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IMecenateFeed.sol\":\"IMecenateFeed\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/interfaces/IMecenateFeed.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateFeed {\\n    function getPost() external view returns (Structures.Post memory);\\n\\n    function getTotalStaked() external view returns (uint256);\\n\\n    function postCount() external view returns (uint256);\\n\\n    function acceptPost(\\n        Structures.Tokens,\\n        uint256 _amount,\\n        address _funder,\\n        address _buyer\\n    ) external payable;\\n\\n    function getSellerStake() external view returns (uint256);\\n\\n    function getBuyerStake() external view returns (uint256);\\n\\n    function getPaymentRequested() external view returns (uint256);\\n\\n    function getStakeRequested() external view returns (uint256);\\n\\n    function getStatus() external view returns (Structures.PostStatus status);\\n\\n    function getTokenId() external view returns (Structures.Tokens tokenId);\\n\\n    function owner() external view returns (address);\\n\\n    function version() external view returns (string memory);\\n\\n    function getEncryptedPost() external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xe7a4b838d4f4540e4a8e3911c2afea70ebd9a2e87bd526eef13b203c2643a645\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\n * @title Structures\\n * @dev This library defines various data structures used in the Mecenate platform.\\n */\\npragma solidity 0.8.19;\\n\\nlibrary Structures {\\n    enum PostStatus {\\n        Waiting,\\n        Proposed,\\n        Accepted,\\n        Submitted,\\n        Finalized,\\n        Punished,\\n        Revealed,\\n        Renounced\\n    }\\n\\n    enum Tokens {\\n        NaN,\\n        MUSE,\\n        DAI\\n    }\\n\\n    enum PostType {\\n        Text,\\n        Image,\\n        Video,\\n        Audio,\\n        File\\n    }\\n    enum PostDuration {\\n        OneDay,\\n        ThreeDays,\\n        OneWeek,\\n        TwoWeeks,\\n        OneMonth\\n    }\\n\\n    struct FeedSettings {\\n        uint256 punishmentRatio;\\n        uint256 postCount;\\n        address usersModuleContract;\\n        address factoryContract;\\n        address router;\\n        string version;\\n    }\\n\\n    struct FactorySettings {\\n        address treasuryContract;\\n        address usersModuleContract;\\n        address easContract;\\n        bytes32 easSchema;\\n        address museToken;\\n        address daiToken;\\n        address wethToken;\\n        address router;\\n    }\\n\\n    /**\\n     * @dev Struct representing a post on the Mecenate platform.\\n     */\\n    struct Post {\\n        User creator;\\n        PostData postdata;\\n    }\\n\\n    /**\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\n     */\\n    struct PostData {\\n        PostSettings settings;\\n        PostEscrow escrow;\\n        PostEncryptedData data;\\n    }\\n\\n    /**\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\n     */\\n    struct PostEncryptedData {\\n        bytes encryptedData;\\n        bytes encryptedKey;\\n        bytes decryptedData;\\n    }\\n\\n    /**\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettings {\\n        PostStatus status;\\n        PostType postType;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n        uint256 duration;\\n        Tokens tokenId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\n     */\\n    struct PostEscrow {\\n        address buyer;\\n        address seller;\\n        uint256 stake;\\n        uint256 payment;\\n        uint256 punishment;\\n        uint256 penalty;\\n    }\\n\\n    /**\\n     * @dev Struct representing a user on the Mecenate platform.\\n     */\\n    struct User {\\n        address evmAddress;\\n        bytes sismoVaultId;\\n        bytes publicKey;\\n    }\\n\\n    /**\\n     * @dev Struct representing a feed on the Mecenate platform.\\n     */\\n    struct Feed {\\n        address contractAddress;\\n        address owner;\\n        uint256 sellerStake;\\n        uint256 buyerStake;\\n        uint256 totalStake;\\n        uint256 postCount;\\n        uint256 paymentRequested;\\n        uint256 stakeRequested;\\n        PostStatus status;\\n        Tokens tokenId;\\n        string version;\\n    }\\n\\n    /**\\n     * @dev Struct representing a bay request on the Mecenate platform.\\n     */\\n    struct BayRequest {\\n        bytes request;\\n        uint256 payment;\\n        uint256 stake;\\n        address postAddress;\\n        bool accepted;\\n        uint256 postCount;\\n        Tokens tokenId;\\n        address buyerAddress;\\n    }\\n}\\n\",\"keccak256\":\"0xab56ad7506e91048fc9c6db9fd9510c42afa61d6b11a99a273bf975643307d8f\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IMecenateFeedFactory.sol":{"IMecenateFeedFactory":{"abi":[{"inputs":[],"name":"burnEnabled","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"contractCounter","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"daiToken","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"easContract","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"easSchema","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"feeds","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint8","name":"tokenId","type":"uint8"}],"name":"getRouterFee","outputs":[{"internalType":"uint24","name":"","type":"uint24"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_feed","type":"address"}],"name":"isFeed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"museToken","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address payable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"router","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"treasuryContract","outputs":[{"internalType":"address payable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"wethToken","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"burnEnabled()":"5dc96d16","contractCounter()":"067bd3b4","daiToken()":"be22f546","easContract()":"cd77b52c","easSchema()":"3ec4f23d","feeds()":"d63605b8","getRouterFee(uint8)":"d223a564","isFeed(address)":"e58fdd04","museToken()":"f77800e5","owner()":"8da5cb5b","router()":"f887ea40","treasuryContract()":"18da0011","version()":"54fd4d50","wethToken()":"4b57b0be"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"burnEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"easContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"easSchema\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeds\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"name\":\"getRouterFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feed\",\"type\":\"address\"}],\"name\":\"isFeed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"museToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryContract\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IMecenateFeedFactory.sol\":\"IMecenateFeedFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/interfaces/IMecenateFeedFactory.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\ninterface IMecenateFeedFactory {\\n    function owner() external view returns (address payable);\\n\\n    function treasuryContract() external view returns (address payable);\\n\\n    function feeds() external view returns (address[] memory);\\n\\n    function contractCounter() external view returns (uint256);\\n\\n    function isFeed(address _feed) external view returns (bool);\\n\\n    function museToken() external view returns (address);\\n\\n    function wethToken() external view returns (address);\\n\\n    function daiToken() external view returns (address);\\n\\n    function router() external view returns (address);\\n\\n    function getRouterFee(uint8 tokenId) external view returns (uint24);\\n\\n    function burnEnabled() external view returns (bool);\\n\\n    function version() external view returns (string memory);\\n\\n    function easSchema() external view returns (bytes32);\\n\\n    function easContract() external view returns (address);\\n}\\n\",\"keccak256\":\"0x79da402b87332cbe8176ab1d0abd2c5369a0da30970743b86283e1a774eea776\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IMecenateTreasury.sol":{"IMecenateTreasury":{"abi":[{"inputs":[],"name":"fixedFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"globalFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"fixedFee()":"91792d5b","globalFee()":"808fc206"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"fixedFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IMecenateTreasury.sol\":\"IMecenateTreasury\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/interfaces/IMecenateTreasury.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateTreasury {\\r\\n    function globalFee() external view returns (uint256);\\r\\n\\r\\n    function fixedFee() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf544878bba8e01c837110d06eac56042957d59c593ba9083f686ef02aa9276a1\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IMecenateUsers.sol":{"IMecenateUsers":{"abi":[{"inputs":[{"internalType":"address","name":"userAddress","type":"address"}],"name":"checkifUserExist","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"startIndex","type":"uint256"},{"internalType":"uint256","name":"endIndex","type":"uint256"}],"name":"getPaginatedUsers","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getUserAt","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getUserCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"}],"name":"getUserMetadata","outputs":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"}],"name":"getUserPublicKey","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getUsers","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"metadata","type":"bytes"}],"name":"registerUser","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"checkifUserExist(address)":"48990fcc","getPaginatedUsers(uint256,uint256)":"cf5caa12","getUserAt(uint256)":"c6e064ad","getUserCount()":"b5cb15f7","getUserMetadata(address)":"ef2a8764","getUserPublicKey(address)":"11231fe0","getUsers()":"00ce8e3e","registerUser(bytes)":"0a38178c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"checkifUserExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"getPaginatedUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserPublicKey\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"registerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IMecenateUsers.sol\":\"IMecenateUsers\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/interfaces/IMecenateUsers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateUsers {\\n    function registerUser(bytes memory metadata) external;\\n\\n    function getUsers() external view returns (address[] memory);\\n\\n    function getUserCount() external view returns (uint256);\\n\\n    function getUserAt(uint256 index) external view returns (address);\\n\\n    function checkifUserExist(address userAddress) external view returns (bool);\\n\\n    function getPaginatedUsers(\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) external view returns (address[] memory);\\n\\n    function getUserMetadata(\\n        address userAddress\\n    ) external view returns (Structures.User memory);\\n\\n    function getUserPublicKey(\\n        address userAddress\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xf0ff65dbfea12d90cf106325b9478e31b284045327e5f0974db5374b8789e93c\",\"license\":\"MIT\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\n * @title Structures\\n * @dev This library defines various data structures used in the Mecenate platform.\\n */\\npragma solidity 0.8.19;\\n\\nlibrary Structures {\\n    enum PostStatus {\\n        Waiting,\\n        Proposed,\\n        Accepted,\\n        Submitted,\\n        Finalized,\\n        Punished,\\n        Revealed,\\n        Renounced\\n    }\\n\\n    enum Tokens {\\n        NaN,\\n        MUSE,\\n        DAI\\n    }\\n\\n    enum PostType {\\n        Text,\\n        Image,\\n        Video,\\n        Audio,\\n        File\\n    }\\n    enum PostDuration {\\n        OneDay,\\n        ThreeDays,\\n        OneWeek,\\n        TwoWeeks,\\n        OneMonth\\n    }\\n\\n    struct FeedSettings {\\n        uint256 punishmentRatio;\\n        uint256 postCount;\\n        address usersModuleContract;\\n        address factoryContract;\\n        address router;\\n        string version;\\n    }\\n\\n    struct FactorySettings {\\n        address treasuryContract;\\n        address usersModuleContract;\\n        address easContract;\\n        bytes32 easSchema;\\n        address museToken;\\n        address daiToken;\\n        address wethToken;\\n        address router;\\n    }\\n\\n    /**\\n     * @dev Struct representing a post on the Mecenate platform.\\n     */\\n    struct Post {\\n        User creator;\\n        PostData postdata;\\n    }\\n\\n    /**\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\n     */\\n    struct PostData {\\n        PostSettings settings;\\n        PostEscrow escrow;\\n        PostEncryptedData data;\\n    }\\n\\n    /**\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\n     */\\n    struct PostEncryptedData {\\n        bytes encryptedData;\\n        bytes encryptedKey;\\n        bytes decryptedData;\\n    }\\n\\n    /**\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettings {\\n        PostStatus status;\\n        PostType postType;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n        uint256 duration;\\n        Tokens tokenId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\n     */\\n    struct PostEscrow {\\n        address buyer;\\n        address seller;\\n        uint256 stake;\\n        uint256 payment;\\n        uint256 punishment;\\n        uint256 penalty;\\n    }\\n\\n    /**\\n     * @dev Struct representing a user on the Mecenate platform.\\n     */\\n    struct User {\\n        address evmAddress;\\n        bytes sismoVaultId;\\n        bytes publicKey;\\n    }\\n\\n    /**\\n     * @dev Struct representing a feed on the Mecenate platform.\\n     */\\n    struct Feed {\\n        address contractAddress;\\n        address owner;\\n        uint256 sellerStake;\\n        uint256 buyerStake;\\n        uint256 totalStake;\\n        uint256 postCount;\\n        uint256 paymentRequested;\\n        uint256 stakeRequested;\\n        PostStatus status;\\n        Tokens tokenId;\\n        string version;\\n    }\\n\\n    /**\\n     * @dev Struct representing a bay request on the Mecenate platform.\\n     */\\n    struct BayRequest {\\n        bytes request;\\n        uint256 payment;\\n        uint256 stake;\\n        address postAddress;\\n        bool accepted;\\n        uint256 postCount;\\n        Tokens tokenId;\\n        address buyerAddress;\\n    }\\n}\\n\",\"keccak256\":\"0xab56ad7506e91048fc9c6db9fd9510c42afa61d6b11a99a273bf975643307d8f\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IWETH.sol":{"IWETH":{"abi":[{"inputs":[],"name":"deposit","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"deposit()":"d0e30db0","transfer(address,uint256)":"a9059cbb","withdraw(uint256)":"2e1a7d4d"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IWETH.sol\":\"IWETH\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/interfaces/IWETH.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function withdraw(uint256) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xeb4bd6c56a346f12ec3d681183d613795c151709e834d69ef58f13fd6d7edf62\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/library/Structures.sol":{"Structures":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212203b816b98011001c8d35215f7149cf3bee42e3c8622cd45b55496da96e24c090664736f6c63430008130033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODESIZE DUP2 PUSH12 0x98011001C8D35215F7149CF3 0xBE 0xE4 0x2E EXTCODECOPY DUP7 0x22 0xCD GASLIMIT 0xB5 SLOAD SWAP7 0xDA SWAP7 0xE2 0x4C MULMOD MOD PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"138:3045:19:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea26469706673582212203b816b98011001c8d35215f7149cf3bee42e3c8622cd45b55496da96e24c090664736f6c63430008130033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODESIZE DUP2 PUSH12 0x98011001C8D35215F7149CF3 0xBE 0xE4 0x2E EXTCODECOPY DUP7 0x22 0xCD GASLIMIT 0xB5 SLOAD SWAP7 0xDA SWAP7 0xE2 0x4C MULMOD MOD PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"138:3045:19:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/library/Structures.sol\":\"Structures\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/library/Structures.sol\":{\"content\":\"/**\\n * @title Structures\\n * @dev This library defines various data structures used in the Mecenate platform.\\n */\\npragma solidity 0.8.19;\\n\\nlibrary Structures {\\n    enum PostStatus {\\n        Waiting,\\n        Proposed,\\n        Accepted,\\n        Submitted,\\n        Finalized,\\n        Punished,\\n        Revealed,\\n        Renounced\\n    }\\n\\n    enum Tokens {\\n        NaN,\\n        MUSE,\\n        DAI\\n    }\\n\\n    enum PostType {\\n        Text,\\n        Image,\\n        Video,\\n        Audio,\\n        File\\n    }\\n    enum PostDuration {\\n        OneDay,\\n        ThreeDays,\\n        OneWeek,\\n        TwoWeeks,\\n        OneMonth\\n    }\\n\\n    struct FeedSettings {\\n        uint256 punishmentRatio;\\n        uint256 postCount;\\n        address usersModuleContract;\\n        address factoryContract;\\n        address router;\\n        string version;\\n    }\\n\\n    struct FactorySettings {\\n        address treasuryContract;\\n        address usersModuleContract;\\n        address easContract;\\n        bytes32 easSchema;\\n        address museToken;\\n        address daiToken;\\n        address wethToken;\\n        address router;\\n    }\\n\\n    /**\\n     * @dev Struct representing a post on the Mecenate platform.\\n     */\\n    struct Post {\\n        User creator;\\n        PostData postdata;\\n    }\\n\\n    /**\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\n     */\\n    struct PostData {\\n        PostSettings settings;\\n        PostEscrow escrow;\\n        PostEncryptedData data;\\n    }\\n\\n    /**\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\n     */\\n    struct PostEncryptedData {\\n        bytes encryptedData;\\n        bytes encryptedKey;\\n        bytes decryptedData;\\n    }\\n\\n    /**\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettings {\\n        PostStatus status;\\n        PostType postType;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n        uint256 duration;\\n        Tokens tokenId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\n     */\\n    struct PostEscrow {\\n        address buyer;\\n        address seller;\\n        uint256 stake;\\n        uint256 payment;\\n        uint256 punishment;\\n        uint256 penalty;\\n    }\\n\\n    /**\\n     * @dev Struct representing a user on the Mecenate platform.\\n     */\\n    struct User {\\n        address evmAddress;\\n        bytes sismoVaultId;\\n        bytes publicKey;\\n    }\\n\\n    /**\\n     * @dev Struct representing a feed on the Mecenate platform.\\n     */\\n    struct Feed {\\n        address contractAddress;\\n        address owner;\\n        uint256 sellerStake;\\n        uint256 buyerStake;\\n        uint256 totalStake;\\n        uint256 postCount;\\n        uint256 paymentRequested;\\n        uint256 stakeRequested;\\n        PostStatus status;\\n        Tokens tokenId;\\n        string version;\\n    }\\n\\n    /**\\n     * @dev Struct representing a bay request on the Mecenate platform.\\n     */\\n    struct BayRequest {\\n        bytes request;\\n        uint256 payment;\\n        uint256 stake;\\n        address postAddress;\\n        bool accepted;\\n        uint256 postCount;\\n        Tokens tokenId;\\n        address buyerAddress;\\n    }\\n}\\n\",\"keccak256\":\"0xab56ad7506e91048fc9c6db9fd9510c42afa61d6b11a99a273bf975643307d8f\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/modules/Acceptance.sol":{"Acceptance":{"abi":[{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Accepted","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Created","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenID","type":"uint8"},{"indexed":false,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newDeposit","type":"uint256"}],"name":"DepositDecreased","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenID","type":"uint8"},{"indexed":false,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newDeposit","type":"uint256"}],"name":"DepositIncreased","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Finalized","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Invalid","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"MadePublic","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Renounced","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"staker","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"name":"StakeAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"staker","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"StakeBurned","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"staker","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"name":"StakeTaken","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Valid","type":"event"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"uint256","name":"paymentAmount","type":"uint256"},{"internalType":"address","name":"funder","type":"address"},{"internalType":"address","name":"buyer","type":"address"}],"name":"acceptPost","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"address","name":"_funder","type":"address"},{"internalType":"uint256","name":"amountToAdd","type":"uint256"}],"name":"addStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"getBuyerStake","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getEncryptedPost","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPaymentRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPost","outputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"internalType":"struct Structures.Post","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSellerStake","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"address","name":"staker","type":"address"}],"name":"getStake","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStakeRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStatus","outputs":[{"internalType":"enum Structures.PostStatus","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenId","outputs":[{"internalType":"enum Structures.Tokens","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenIdAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTotalStaked","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"post","outputs":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"postCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"address","name":"receiver","type":"address"}],"name":"takeFullStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint256","name":"amountToTake","type":"uint256"}],"name":"takeStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"version()":{"returns":{"_0":"Semver contract version as a string."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"acceptPost(uint8,uint256,address,address)":"07388dba","addStake(uint8,address,uint256)":"1d0b4af5","getBuyerStake()":"4c38d877","getEncryptedPost()":"729e2eb1","getPaymentRequested()":"d24e0c87","getPost()":"8c6838ba","getSellerStake()":"5c63ed69","getStake(uint8,address)":"52a6cb4a","getStakeRequested()":"faeb5e17","getStatus()":"4e69d560","getTokenId()":"010a38f5","getTokenIdAddress()":"5ad4e170","getTotalStaked()":"0917e776","owner()":"8da5cb5b","post()":"05c1f502","postCount()":"17906c2e","takeFullStake(uint8,address)":"f2d7dbb6","takeStake(uint8,address,uint256)":"ed70d5d5","version()":"54fd4d50"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Accepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDeposit\",\"type\":\"uint256\"}],\"name\":\"DepositDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDeposit\",\"type\":\"uint256\"}],\"name\":\"DepositIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Invalid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"MadePublic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Renounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"name\":\"StakeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"name\":\"StakeTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Valid\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"paymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"acceptPost\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_funder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToAdd\",\"type\":\"uint256\"}],\"name\":\"addStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyerStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEncryptedPost\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaymentRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPost\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.Post\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellerStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenIdAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"post\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"takeFullStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToTake\",\"type\":\"uint256\"}],\"name\":\"takeStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"version()\":{\"returns\":{\"_0\":\"Semver contract version as a string.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"version()\":{\"notice\":\"Returns the full semver contract version.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/Acceptance.sol\":\"Acceptance\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/helpers/eas/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror DeadlineExpired();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/// @notice A struct representing ECDSA signature data.\\nstruct Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/// @notice A struct representing a single attestation.\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/// @notice A helper function to work with unchecked iterators in loops.\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685\",\"license\":\"MIT\"},\"contracts/helpers/eas/IEAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ISchemaRegistry} from \\\"./ISchemaRegistry.sol\\\";\\nimport {Attestation, Signature} from \\\"./Common.sol\\\";\\n\\n/// @notice A struct representing the arguments of the attestation request.\\nstruct AttestationRequestData {\\n    address recipient; // The recipient of the attestation.\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes32 refUID; // The UID of the related attestation.\\n    bytes data; // Custom attestation data.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the attestation request.\\nstruct AttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the full delegated attestation request.\\nstruct DelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n    Signature signature; // The ECDSA signature data.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi attestation request.\\nstruct MultiAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi attestation request.\\nstruct MultiDelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the arguments of the revocation request.\\nstruct RevocationRequestData {\\n    bytes32 uid; // The UID of the attestation to revoke.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the revocation request.\\nstruct RevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the arguments of the full delegated revocation request.\\nstruct DelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n    Signature signature; // The ECDSA signature data.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi revocation request.\\nstruct MultiRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi revocation request.\\nstruct MultiDelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @title IEAS\\n/// @notice EAS - Ethereum Attestation Service interface.\\ninterface IEAS {\\n    /// @notice Emitted when an attestation has been made.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param uid The UID the revoked attestation.\\n    /// @param schemaUID The UID of the schema.\\n    event Attested(\\n        address indexed recipient,\\n        address indexed attester,\\n        bytes32 uid,\\n        bytes32 indexed schemaUID\\n    );\\n\\n    /// @notice Emitted when an attestation has been revoked.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param schemaUID The UID of the schema.\\n    /// @param uid The UID the revoked attestation.\\n    event Revoked(\\n        address indexed recipient,\\n        address indexed attester,\\n        bytes32 uid,\\n        bytes32 indexed schemaUID\\n    );\\n\\n    /// @notice Emitted when a data has been timestamped.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event Timestamped(bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /// @notice Emitted when a data has been revoked.\\n    /// @param revoker The address of the revoker.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event RevokedOffchain(\\n        address indexed revoker,\\n        bytes32 indexed data,\\n        uint64 indexed timestamp\\n    );\\n\\n    /// @notice Returns the address of the global schema registry.\\n    /// @return The address of the global schema registry.\\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\\n\\n    /// @notice Attests to a specific schema.\\n    /// @param request The arguments of the attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attest({\\n    ///         schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",\\n    ///         data: {\\n    ///             recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n    ///             data: \\\"0xF00D\\\",\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function attest(\\n        AttestationRequest calldata request\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attestByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function attestByDelegation(\\n        DelegatedAttestationRequest calldata delegatedRequest\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to multiple schemas.\\n    /// @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttest([{\\n    ///         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\\n    ///             data: '0x12345678',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiAttest(\\n        MultiAttestationRequest[] calldata multiRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Attests to multiple schemas using via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\\n    ///     grouped by distinct schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttestByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiAttestByDelegation(\\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Revokes an existing attestation to a specific schema.\\n    /// @param request The arguments of the revocation request.\\n    ///\\n    /// Example:\\n    ///     revoke({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function revoke(RevocationRequest calldata request) external payable;\\n\\n    /// @notice Revokes an existing attestation to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated revocation request.\\n    ///\\n    /// Example:\\n    ///     revokeByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 27,\\n    ///             r: '0xb593...7142',\\n    ///             s: '0x0f5b...2cce'\\n    ///         },\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function revokeByDelegation(\\n        DelegatedRevocationRequest calldata delegatedRequest\\n    ) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas.\\n    /// @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevoke([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiRevoke(\\n        MultiRevocationRequest[] calldata multiRequests\\n    ) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests\\n    ///     should be grouped by distinct schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevokeByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiRevokeByDelegation(\\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\\n    ) external payable;\\n\\n    /// @notice Timestamps the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function timestamp(bytes32 data) external returns (uint64);\\n\\n    /// @notice Timestamps the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\\n\\n    /// @notice Revokes the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function revokeOffchain(bytes32 data) external returns (uint64);\\n\\n    /// @notice Revokes the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function multiRevokeOffchain(\\n        bytes32[] calldata data\\n    ) external returns (uint64);\\n\\n    /// @notice Returns an existing attestation by UID.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return The attestation data members.\\n    function getAttestation(\\n        bytes32 uid\\n    ) external view returns (Attestation memory);\\n\\n    /// @notice Checks whether an attestation exists.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return Whether an attestation exists.\\n    function isAttestationValid(bytes32 uid) external view returns (bool);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getTimestamp(bytes32 data) external view returns (uint64);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getRevokeOffchain(\\n        address revoker,\\n        bytes32 data\\n    ) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xc95cca3d90dbae3a21d0f0e28fdf38cc5a85cbd8c760b7759782b18e8f62acc2\",\"license\":\"MIT\"},\"contracts/helpers/eas/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ISchemaResolver} from \\\"./ISchemaResolver.sol\\\";\\n\\n/// @notice A struct representing a record for a submitted schema.\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\n/// @title ISchemaRegistry\\n/// @notice The interface of global attestation schemas for the Ethereum Attestation Service protocol.\\ninterface ISchemaRegistry {\\n    /// @notice Emitted when a new schema has been registered\\n    /// @param uid The schema UID.\\n    /// @param registerer The address of the account used to register the schema.\\n    /// @param schema The schema data.\\n    event Registered(\\n        bytes32 indexed uid,\\n        address indexed registerer,\\n        SchemaRecord schema\\n    );\\n\\n    /// @notice Submits and reserves a new schema\\n    /// @param schema The schema data schema.\\n    /// @param resolver An optional schema resolver.\\n    /// @param revocable Whether the schema allows revocations explicitly.\\n    /// @return The UID of the new schema.\\n    function register(\\n        string calldata schema,\\n        ISchemaResolver resolver,\\n        bool revocable\\n    ) external returns (bytes32);\\n\\n    /// @notice Returns an existing schema by UID\\n    /// @param uid The UID of the schema to retrieve.\\n    /// @return The schema data members.\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\\n\",\"keccak256\":\"0x743ddc248c97a78d34239035d1d9557a74dcaaa5b59a2aa66cea4eadabb8b2de\",\"license\":\"MIT\"},\"contracts/helpers/eas/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {Attestation} from \\\"./Common.sol\\\";\\n\\n/// @title ISchemaResolver\\n/// @notice The interface of an optional schema resolver.\\ninterface ISchemaResolver {\\n    /// @notice Checks if the resolver can be sent ETH.\\n    /// @return Whether the resolver supports ETH transfers.\\n    function isPayable() external pure returns (bool);\\n\\n    /// @notice Processes an attestation and verifies whether it's valid.\\n    /// @param attestation The new attestation.\\n    /// @return Whether the attestation is valid.\\n    function attest(\\n        Attestation calldata attestation\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes multiple attestations and verifies whether they are valid.\\n    /// @param attestations The new attestations.\\n    /// @param values Explicit ETH amounts which were sent with each attestation.\\n    /// @return Whether all the attestations are valid.\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\\n    /// @param attestation The existing attestation to be revoked.\\n    /// @return Whether the attestation can be revoked.\\n    function revoke(\\n        Attestation calldata attestation\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\\n    /// @param attestations The existing attestations to be revoked.\\n    /// @param values Explicit ETH amounts which were sent with each revocation.\\n    /// @return Whether the attestations can be revoked.\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0x97ec835833519c6c11c0fb097ea5bccd888e65f650590fdb643d937430bb4f03\",\"license\":\"MIT\"},\"contracts/interfaces/IMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n// import IERC20 from openzeppelin\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMUSE is IERC20 {\\n    function increaseAllowance(\\n        address spender,\\n        uint256 addedValue\\n    ) external returns (bool);\\n\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 subtractedValue\\n    ) external returns (bool);\\n\\n    function mint(uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x8b0a4012a1cd0815460bb3d15278671589bb85003ff2c38315701b3f2228c633\"},\"contracts/interfaces/IMecenateFeed.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateFeed {\\n    function getPost() external view returns (Structures.Post memory);\\n\\n    function getTotalStaked() external view returns (uint256);\\n\\n    function postCount() external view returns (uint256);\\n\\n    function acceptPost(\\n        Structures.Tokens,\\n        uint256 _amount,\\n        address _funder,\\n        address _buyer\\n    ) external payable;\\n\\n    function getSellerStake() external view returns (uint256);\\n\\n    function getBuyerStake() external view returns (uint256);\\n\\n    function getPaymentRequested() external view returns (uint256);\\n\\n    function getStakeRequested() external view returns (uint256);\\n\\n    function getStatus() external view returns (Structures.PostStatus status);\\n\\n    function getTokenId() external view returns (Structures.Tokens tokenId);\\n\\n    function owner() external view returns (address);\\n\\n    function version() external view returns (string memory);\\n\\n    function getEncryptedPost() external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xe7a4b838d4f4540e4a8e3911c2afea70ebd9a2e87bd526eef13b203c2643a645\"},\"contracts/interfaces/IMecenateFeedFactory.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\ninterface IMecenateFeedFactory {\\n    function owner() external view returns (address payable);\\n\\n    function treasuryContract() external view returns (address payable);\\n\\n    function feeds() external view returns (address[] memory);\\n\\n    function contractCounter() external view returns (uint256);\\n\\n    function isFeed(address _feed) external view returns (bool);\\n\\n    function museToken() external view returns (address);\\n\\n    function wethToken() external view returns (address);\\n\\n    function daiToken() external view returns (address);\\n\\n    function router() external view returns (address);\\n\\n    function getRouterFee(uint8 tokenId) external view returns (uint24);\\n\\n    function burnEnabled() external view returns (bool);\\n\\n    function version() external view returns (string memory);\\n\\n    function easSchema() external view returns (bytes32);\\n\\n    function easContract() external view returns (address);\\n}\\n\",\"keccak256\":\"0x79da402b87332cbe8176ab1d0abd2c5369a0da30970743b86283e1a774eea776\"},\"contracts/interfaces/IMecenateTreasury.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateTreasury {\\r\\n    function globalFee() external view returns (uint256);\\r\\n\\r\\n    function fixedFee() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf544878bba8e01c837110d06eac56042957d59c593ba9083f686ef02aa9276a1\"},\"contracts/interfaces/IMecenateUsers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateUsers {\\n    function registerUser(bytes memory metadata) external;\\n\\n    function getUsers() external view returns (address[] memory);\\n\\n    function getUserCount() external view returns (uint256);\\n\\n    function getUserAt(uint256 index) external view returns (address);\\n\\n    function checkifUserExist(address userAddress) external view returns (bool);\\n\\n    function getPaginatedUsers(\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) external view returns (address[] memory);\\n\\n    function getUserMetadata(\\n        address userAddress\\n    ) external view returns (Structures.User memory);\\n\\n    function getUserPublicKey(\\n        address userAddress\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xf0ff65dbfea12d90cf106325b9478e31b284045327e5f0974db5374b8789e93c\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function withdraw(uint256) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xeb4bd6c56a346f12ec3d681183d613795c151709e834d69ef58f13fd6d7edf62\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\n * @title Structures\\n * @dev This library defines various data structures used in the Mecenate platform.\\n */\\npragma solidity 0.8.19;\\n\\nlibrary Structures {\\n    enum PostStatus {\\n        Waiting,\\n        Proposed,\\n        Accepted,\\n        Submitted,\\n        Finalized,\\n        Punished,\\n        Revealed,\\n        Renounced\\n    }\\n\\n    enum Tokens {\\n        NaN,\\n        MUSE,\\n        DAI\\n    }\\n\\n    enum PostType {\\n        Text,\\n        Image,\\n        Video,\\n        Audio,\\n        File\\n    }\\n    enum PostDuration {\\n        OneDay,\\n        ThreeDays,\\n        OneWeek,\\n        TwoWeeks,\\n        OneMonth\\n    }\\n\\n    struct FeedSettings {\\n        uint256 punishmentRatio;\\n        uint256 postCount;\\n        address usersModuleContract;\\n        address factoryContract;\\n        address router;\\n        string version;\\n    }\\n\\n    struct FactorySettings {\\n        address treasuryContract;\\n        address usersModuleContract;\\n        address easContract;\\n        bytes32 easSchema;\\n        address museToken;\\n        address daiToken;\\n        address wethToken;\\n        address router;\\n    }\\n\\n    /**\\n     * @dev Struct representing a post on the Mecenate platform.\\n     */\\n    struct Post {\\n        User creator;\\n        PostData postdata;\\n    }\\n\\n    /**\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\n     */\\n    struct PostData {\\n        PostSettings settings;\\n        PostEscrow escrow;\\n        PostEncryptedData data;\\n    }\\n\\n    /**\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\n     */\\n    struct PostEncryptedData {\\n        bytes encryptedData;\\n        bytes encryptedKey;\\n        bytes decryptedData;\\n    }\\n\\n    /**\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettings {\\n        PostStatus status;\\n        PostType postType;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n        uint256 duration;\\n        Tokens tokenId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\n     */\\n    struct PostEscrow {\\n        address buyer;\\n        address seller;\\n        uint256 stake;\\n        uint256 payment;\\n        uint256 punishment;\\n        uint256 penalty;\\n    }\\n\\n    /**\\n     * @dev Struct representing a user on the Mecenate platform.\\n     */\\n    struct User {\\n        address evmAddress;\\n        bytes sismoVaultId;\\n        bytes publicKey;\\n    }\\n\\n    /**\\n     * @dev Struct representing a feed on the Mecenate platform.\\n     */\\n    struct Feed {\\n        address contractAddress;\\n        address owner;\\n        uint256 sellerStake;\\n        uint256 buyerStake;\\n        uint256 totalStake;\\n        uint256 postCount;\\n        uint256 paymentRequested;\\n        uint256 stakeRequested;\\n        PostStatus status;\\n        Tokens tokenId;\\n        string version;\\n    }\\n\\n    /**\\n     * @dev Struct representing a bay request on the Mecenate platform.\\n     */\\n    struct BayRequest {\\n        bytes request;\\n        uint256 payment;\\n        uint256 stake;\\n        address postAddress;\\n        bool accepted;\\n        uint256 postCount;\\n        Tokens tokenId;\\n        address buyerAddress;\\n    }\\n}\\n\",\"keccak256\":\"0xab56ad7506e91048fc9c6db9fd9510c42afa61d6b11a99a273bf975643307d8f\"},\"contracts/modules/Acceptance.sol\":{\"content\":\"/**\\n * @title Acceptance\\n * @dev This contract is an abstract contract that inherits from Events and Staking contracts. It provides a function to accept a post and add stake to the post. The function accepts a Sismo Connect response as a parameter and verifies the user existence. It also checks if the user is not the seller and if the post is in Proposed status. If the post has an escrow payment, it checks if the buyer has paid enough and adds the payment to the post's escrow. If the post does not have an escrow payment, it requires a payment from the buyer and adds it to the post's escrow. Finally, it changes the post status to Accepted and emits an Accepted event.\\n */\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"./Events.sol\\\";\\nimport \\\"./Staking.sol\\\";\\n\\nabstract contract Acceptance is Events, Staking {\\n    function acceptPost(\\n        Structures.Tokens tokenId,\\n        uint256 paymentAmount,\\n        address funder,\\n        address buyer\\n    ) external payable virtual {\\n        require(\\n            validStatuses[uint8(Structures.PostStatus.Proposed)],\\n            \\\"INVALID_STATUS\\\"\\n        );\\n\\n        _checkToken(tokenId);\\n\\n        uint256 amountToAdd = tokenId == Structures.Tokens.NaN\\n            ? msg.value\\n            : paymentAmount;\\n\\n        // Use local variable for repeated calls\\n        uint256 sellerStake = Deposit._getDeposit(\\n            tokenId,\\n            post.postdata.escrow.seller\\n        );\\n\\n        require(sellerStake >= post.postdata.escrow.stake, \\\"STAKE_INCORRECT\\\");\\n\\n        require(\\n            IMecenateUsers(settings.usersModuleContract).checkifUserExist(\\n                buyer\\n            ),\\n            \\\"USERT_NOT_EXIST\\\"\\n        );\\n\\n        require(\\n            msg.sender != post.postdata.escrow.seller ||\\n                buyer != post.postdata.escrow.seller,\\n            \\\"YOU_ARE_THE_SELLER\\\"\\n        );\\n\\n        if (post.postdata.escrow.payment > 0) {\\n            require(\\n                paymentAmount >= post.postdata.escrow.payment,\\n                \\\"NOT_ENOUGH_PAYMENT\\\"\\n            );\\n        } else {\\n            require(msg.value > 0, \\\"ZERO_MSGVALUE\\\");\\n\\n            require(paymentAmount > 0, \\\"ZERO_PAYMENT\\\");\\n        }\\n\\n        uint256 payment = _addStake(tokenId, buyer, funder, amountToAdd);\\n\\n        post.postdata.escrow.payment = payment;\\n\\n        post.postdata.escrow.buyer = buyer;\\n\\n        post.postdata.settings.status = Structures.PostStatus.Accepted;\\n\\n        _changeStatus(Structures.PostStatus.Accepted);\\n\\n        emit Accepted(post);\\n    }\\n}\\n\",\"keccak256\":\"0xeddd71eba83c4bea562a75cd89a509f1a1deefebd73147db962f626f1d6eaacb\",\"license\":\"MIT\"},\"contracts/modules/BurnDAI.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"./BurnMUSE.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"../interfaces/IWETH.sol\\\";\\n\\nabstract contract BurnDAI is BurnMUSE {\\n    using SafeMath for uint256;\\n\\n    function _burnFrom(\\n        address from,\\n        uint256 value\\n    ) internal override returns (bool success) {\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\n            .transferFrom(from, address(this), value);\\n\\n        _burn(value);\\n\\n        return true;\\n    }\\n\\n    function _burnDai(uint256 value) internal returns (bool success) {\\n        // approve uniswap for token transfer\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\n            .approve(settings.router, value);\\n\\n        // swap IMecenateFeedFactory(settings.factoryContract).daiToken() for MUSE\\n        uint256 tokens_sold = value;\\n\\n        uint256 tokens_bought = _swapTokensForToken(\\n            IMecenateFeedFactory(settings.factoryContract).daiToken(),\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\n            IMecenateFeedFactory(settings.factoryContract).getRouterFee(0),\\n            tokens_sold\\n        );\\n\\n        uint256 tokens_sold_to_muse = _swapTokensForToken(\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\n            IMecenateFeedFactory(settings.factoryContract).museToken(),\\n            IMecenateFeedFactory(settings.factoryContract).getRouterFee(1),\\n            tokens_bought\\n        );\\n\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).museToken())\\n            .approve(\\n                IMecenateFeedFactory(settings.factoryContract).museToken(),\\n                tokens_sold_to_muse\\n            );\\n\\n        // burn MUSE\\n        BurnMUSE._burn(tokens_sold_to_muse);\\n\\n        return true;\\n    }\\n\\n    function _burnWeth(uint256 value) internal returns (bool success) {\\n        // deposit IMecenateFeedFactory(settings.factoryContract).wethToken()\\n        IWETH(IMecenateFeedFactory(settings.factoryContract).wethToken())\\n            .deposit{value: value}();\\n\\n        // approve uniswap for token transfer\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).wethToken())\\n            .approve(settings.router, value);\\n\\n        // swap IMecenateFeedFactory(settings.factoryContract).wethToken() for MUSE\\n        uint256 tokens_sold = value;\\n\\n        uint256 tokens_bought = _swapTokensForToken(\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\n            IMecenateFeedFactory(settings.factoryContract).museToken(),\\n            IMecenateFeedFactory(settings.factoryContract).getRouterFee(1),\\n            tokens_sold\\n        );\\n\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).museToken())\\n            .approve(\\n                IMecenateFeedFactory(settings.factoryContract).museToken(),\\n                tokens_bought\\n            );\\n\\n        // burn MUSE\\n        BurnMUSE._burn(tokens_bought);\\n\\n        return true;\\n    }\\n\\n    function getTokenAddress()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address token)\\n    {\\n        return IMecenateFeedFactory(settings.factoryContract).daiToken();\\n    }\\n\\n    function getExchangeAddress()\\n        internal\\n        view\\n        override\\n        returns (address exchange)\\n    {\\n        exchange = settings.router;\\n    }\\n\\n    function _swapTokensForToken(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountIn\\n    ) internal returns (uint256 amountOut) {\\n        // Check and approve allowance\\n        uint256 allowance = IERC20(tokenIn).allowance(\\n            address(this),\\n            settings.router\\n        );\\n        if (allowance < amountIn) {\\n            IERC20(tokenIn).approve(settings.router, type(uint256).max);\\n        }\\n\\n        // Prepare parameters\\n        address recipient = address(this);\\n        uint256 deadline = block.timestamp + 60; // 15 seconds from the current block timestamp\\n\\n        // Perform the swap\\n        // Refer to the Uniswap V3 documentation for details on the params.\\n        amountOut = ISwapRouter(settings.router).exactInputSingle(\\n            ISwapRouter.ExactInputSingleParams({\\n                tokenIn: tokenIn,\\n                tokenOut: tokenOut,\\n                fee: fee,\\n                recipient: recipient,\\n                deadline: deadline,\\n                amountIn: amountIn,\\n                amountOutMinimum: 0, // you may want to set a minimum here\\n                sqrtPriceLimitX96: 0\\n            })\\n        );\\n\\n        return amountOut;\\n    }\\n}\\n\",\"keccak256\":\"0xa69462e962a3be48c3514c746d791c7a870247e8e441a2d7a11b5771ec8e0d23\"},\"contracts/modules/BurnMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\nimport \\\"../interfaces/IMUSE.sol\\\";\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\nimport \\\"./Events.sol\\\";\\n\\nabstract contract BurnMUSE is Events {\\n    function _burn(uint256 value) internal virtual returns (bool success) {\\n        IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken()).burn(\\n            value\\n        );\\n        return true;\\n    }\\n\\n    function _burnFrom(\\n        address from,\\n        uint256 value\\n    ) internal virtual returns (bool success) {\\n        IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken())\\n            .transferFrom(from, address(this), value);\\n        _burn(value);\\n        return true;\\n    }\\n\\n    function getTokenAddress() internal view virtual returns (address token) {\\n        return IMecenateFeedFactory(settings.factoryContract).museToken();\\n    }\\n\\n    function getExchangeAddress()\\n        internal\\n        view\\n        virtual\\n        returns (address exchange)\\n    {\\n        exchange = IMecenateFeedFactory(settings.factoryContract).router();\\n    }\\n}\\n\",\"keccak256\":\"0x052049c27f8e98f27fd3d237157e4700d5f5c313343d1cd734614beefa4ccfc6\"},\"contracts/modules/Data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../interfaces/IMecenateFeed.sol\\\";\\nimport \\\"../interfaces/IMecenateUsers.sol\\\";\\nimport \\\"../interfaces/IMecenateTreasury.sol\\\";\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\nimport \\\"../helpers/eas/IEAS.sol\\\";\\nimport \\\"./Version.sol\\\";\\n\\n/**\\n * @title Data\\n * @dev This contract stores data related to Mecenate posts and provides functions to interact with it.\\n */\\ncontract Data is Version {\\n    bytes internal constant ZEROHASH = \\\"0x00\\\";\\n\\n    address public owner;\\n\\n    Structures.Post public post;\\n\\n    Structures.FeedSettings internal settings;\\n\\n    mapping(uint8 => uint256) internal postDurationToDays;\\n\\n    mapping(uint8 => bool) internal validStatuses;\\n\\n    constructor(\\n        address usersModuleContract,\\n        address factoryContract,\\n        uint256 _major,\\n        uint256 _minor,\\n        uint256 _patch\\n    ) Version(_major, _minor, _patch) {\\n        settings.punishmentRatio = 100000000000000000; // Constant value\\n        settings.postCount = 0; // Initialize postCount to 0\\n        settings.usersModuleContract = usersModuleContract;\\n        settings.factoryContract = msg.sender;\\n        settings.router = IMecenateFeedFactory(factoryContract).router();\\n        settings.version = _version();\\n\\n        post.postdata.settings.status = Structures.PostStatus.Waiting;\\n\\n        postDurationToDays[uint8(Structures.PostDuration.OneDay)] = 1 days;\\n        postDurationToDays[uint8(Structures.PostDuration.ThreeDays)] = 3 days;\\n        postDurationToDays[uint8(Structures.PostDuration.OneWeek)] = 7 days;\\n        postDurationToDays[uint8(Structures.PostDuration.TwoWeeks)] = 14 days;\\n        postDurationToDays[uint8(Structures.PostDuration.OneMonth)] = 30 days;\\n\\n        validStatuses[uint8(Structures.PostStatus.Waiting)] = true;\\n    }\\n\\n    function _changeStatus(Structures.PostStatus newStatus) internal {\\n        validStatuses[uint8(post.postdata.settings.status)] = false;\\n        validStatuses[uint8(newStatus)] = true;\\n        post.postdata.settings.status = newStatus;\\n    }\\n\\n    function getStatus() external view returns (Structures.PostStatus) {\\n        return post.postdata.settings.status;\\n    }\\n\\n    function getTokenId() external view returns (Structures.Tokens) {\\n        return post.postdata.settings.tokenId;\\n    }\\n\\n    function getTokenIdAddress() public view returns (address) {\\n        if (post.postdata.settings.tokenId == Structures.Tokens.MUSE) {\\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\\n        } else if (post.postdata.settings.tokenId == Structures.Tokens.DAI) {\\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    function _checkToken(Structures.Tokens _token) internal view {\\n        require(_token == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n    }\\n\\n    function getPaymentRequested() external view returns (uint256) {\\n        return post.postdata.escrow.payment;\\n    }\\n\\n    function getStakeRequested() external view returns (uint256) {\\n        return post.postdata.escrow.stake;\\n    }\\n\\n    function postCount() external view returns (uint256) {\\n        return settings.postCount;\\n    }\\n\\n    function getEncryptedPost() external view returns (bytes memory) {\\n        return post.postdata.data.encryptedData;\\n    }\\n\\n    function getPost() external view returns (Structures.Post memory) {\\n        return post;\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xb09086cdcab6dc2790f56df6a5808c7a48794c5519ea122f927c0a0684d1f2c6\",\"license\":\"MIT\"},\"contracts/modules/Deposit.sol\":{\"content\":\"pragma solidity 0.8.19;\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./TokenManager.sol\\\";\\n\\ncontract Deposit {\\n    using SafeMath for uint256;\\n\\n    mapping(uint256 => mapping(address => uint256)) private _deposit;\\n\\n    event DepositIncreased(\\n        Structures.Tokens tokenID,\\n        address user,\\n        uint256 amount,\\n        uint256 newDeposit\\n    );\\n    event DepositDecreased(\\n        Structures.Tokens tokenID,\\n        address user,\\n        uint256 amount,\\n        uint256 newDeposit\\n    );\\n\\n    function _increaseDeposit(\\n        Structures.Tokens tokenID,\\n        address user,\\n        uint256 amountToAdd\\n    ) internal returns (uint256 newDeposit) {\\n        // calculate new deposit amount\\n        newDeposit = _deposit[uint256(tokenID)][user].add(amountToAdd);\\n\\n        // set new stake to storage\\n        _deposit[uint256(tokenID)][user] = newDeposit;\\n\\n        // emit event\\n        emit DepositIncreased(tokenID, user, amountToAdd, newDeposit);\\n\\n        // return\\n        return newDeposit;\\n    }\\n\\n    function _decreaseDeposit(\\n        Structures.Tokens tokenID,\\n        address user,\\n        uint256 amountToRemove\\n    ) internal returns (uint256 newDeposit) {\\n        // get current deposit\\n        uint256 currentDeposit = _deposit[uint256(tokenID)][user];\\n\\n        // check if sufficient deposit\\n        require(currentDeposit >= amountToRemove, \\\"INSUFFICIENT_DEPOSIT\\\");\\n\\n        // calculate new deposit amount\\n        newDeposit = currentDeposit.sub(amountToRemove);\\n\\n        // set new stake to storage\\n        _deposit[uint256(tokenID)][user] = newDeposit;\\n\\n        // emit event\\n        emit DepositDecreased(tokenID, user, amountToRemove, newDeposit);\\n\\n        // return\\n        return newDeposit;\\n    }\\n\\n    function _clearDeposit(\\n        Structures.Tokens tokenID,\\n        address user\\n    ) internal returns (uint256 amountRemoved) {\\n        // get current deposit\\n        uint256 currentDeposit = _deposit[uint256(tokenID)][user];\\n\\n        // remove deposit\\n        _decreaseDeposit(tokenID, user, currentDeposit);\\n\\n        // return\\n        return currentDeposit;\\n    }\\n\\n    function _getDeposit(\\n        Structures.Tokens tokenID,\\n        address user\\n    ) internal view returns (uint256 deposit) {\\n        return _deposit[uint256(tokenID)][user];\\n    }\\n}\\n\",\"keccak256\":\"0xbde50573d2e5a22daecdfdb1d457c4f50b7ea16e18a03eac04013ce10f269d36\"},\"contracts/modules/Events.sol\":{\"content\":\"/**\\r\\n * @title Events\\r\\n * @dev This abstract contract defines the events related to the Mecenate platform's post lifecycle.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./Data.sol\\\";\\r\\n\\r\\nabstract contract Events is Data {\\r\\n    event Created(Structures.Post post);\\r\\n    event Accepted(Structures.Post post);\\r\\n    event Valid(Structures.Post post);\\r\\n    event Invalid(Structures.Post post);\\r\\n    event Finalized(Structures.Post post);\\r\\n    event MadePublic(Structures.Post post);\\r\\n    event Renounced(Structures.Post post);\\r\\n}\\r\\n\",\"keccak256\":\"0x3aeaf067b1f9010a2456df46fb54d4727b3a24082b1446ac9266dbcdd8c838f6\"},\"contracts/modules/Staking.sol\":{\"content\":\"/**\\n * @title Staking\\n * @dev This contract handles staking functionality for the Mecenate platform.\\n * It allows users to add, take, and burn stakes, and provides functions to get the total staked amount and individual stake amounts.\\n * It also includes a modifier to check the status of a post before allowing stake-related transactions.\\n */\\npragma solidity 0.8.19;\\n\\nimport \\\"./Deposit.sol\\\";\\nimport \\\"./Events.sol\\\";\\n\\nabstract contract Staking is Events, Deposit, TokenManager {\\n    using SafeMath for uint256;\\n\\n    event StakeBurned(address staker, uint256 amount);\\n\\n    event StakeTaken(address staker, uint256 amount, Structures.Tokens tokenId);\\n\\n    event StakeAdded(address staker, uint256 amount, Structures.Tokens tokenId);\\n\\n    function _addStake(\\n        Structures.Tokens tokenId,\\n        address staker,\\n        address funder,\\n        uint256 amountToAdd\\n    ) internal returns (uint256 newStake) {\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\n\\n        require(\\n            currentStatus != Structures.PostStatus.Accepted &&\\n                currentStatus != Structures.PostStatus.Submitted,\\n            \\\"INVALID_STATUS\\\"\\n        );\\n\\n        require(amountToAdd > 0, \\\"STAKE_REQUIRED\\\");\\n\\n        if (tokenId != Structures.Tokens.NaN) {\\n            _transferFrom(tokenId, funder, address(this), amountToAdd);\\n        }\\n\\n        newStake = Deposit._increaseDeposit(tokenId, staker, amountToAdd);\\n\\n        emit StakeAdded(staker, amountToAdd, tokenId);\\n\\n        return newStake;\\n    }\\n\\n    function _takeStake(\\n        Structures.Tokens tokenId,\\n        address staker,\\n        address receiver,\\n        uint256 amountToTake\\n    ) internal returns (uint256 newStake) {\\n        // Memorizza lo status del post in una variabile per evitare accessi ridondanti allo storage\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\n\\n        // Verifica che lo status del post sia valido per procedere\\n        require(\\n            currentStatus != Structures.PostStatus.Accepted &&\\n                currentStatus != Structures.PostStatus.Submitted,\\n            \\\"INVALID_STATUS\\\"\\n        );\\n\\n        // Effettua il trasferimento del token o dell'Ether\\n        if (tokenId == Structures.Tokens.NaN) {\\n            //(bool result, ) = payable(_to).call{value: amountToTake}(\\\"\\\");\\n            //require(result, \\\"CALL_FAILED\\\");\\n            payable(receiver).transfer(amountToTake);\\n        } else {\\n            _transfer(tokenId, receiver, amountToTake);\\n        }\\n\\n        // Aggiorna il deposito e emette un evento\\n        newStake = Deposit._decreaseDeposit(tokenId, staker, amountToTake);\\n        emit StakeTaken(staker, amountToTake, tokenId);\\n\\n        return newStake;\\n    }\\n\\n    function _takeFullStake(\\n        Structures.Tokens tokenId,\\n        address staker,\\n        address receiver\\n    ) internal returns (uint256 amountTaken) {\\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, staker);\\n\\n        uint256 newStake = _takeStake(\\n            tokenId,\\n            staker,\\n            receiver,\\n            currentDeposit\\n        );\\n\\n        return newStake;\\n    }\\n\\n    function _burnStake(\\n        Structures.Tokens tokenId,\\n        address staker,\\n        uint256 amountToBurn\\n    ) internal returns (uint256 newStake) {\\n        uint256 newDeposit = Deposit._decreaseDeposit(\\n            tokenId,\\n            staker,\\n            amountToBurn\\n        );\\n\\n        bool burnEnabled = IMecenateFeedFactory(settings.factoryContract)\\n            .burnEnabled();\\n\\n        address treasuryContract = IMecenateFeedFactory(\\n            settings.factoryContract\\n        ).treasuryContract();\\n\\n        if (burnEnabled == false) {\\n            if (tokenId == Structures.Tokens.NaN) {\\n                (bool result, ) = payable(treasuryContract).call{\\n                    value: amountToBurn\\n                }(\\\"\\\");\\n                require(result, \\\"CALL_FAILED\\\");\\n            } else {\\n                _transfer(tokenId, treasuryContract, amountToBurn);\\n            }\\n        } else {\\n            if (tokenId == Structures.Tokens.DAI) {\\n                _burnDai(amountToBurn);\\n            } else if (tokenId == Structures.Tokens.MUSE) {\\n                _burn(amountToBurn);\\n            } else if (tokenId == Structures.Tokens.NaN) {\\n                _burnWeth(amountToBurn);\\n            }\\n        }\\n\\n        emit StakeBurned(staker, amountToBurn);\\n\\n        return newDeposit;\\n    }\\n\\n    function _burnFullStake(\\n        Structures.Tokens tokenId,\\n        address staker\\n    ) internal returns (uint256 amountBurned) {\\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, staker);\\n\\n        _burnStake(tokenId, staker, currentDeposit);\\n\\n        return currentDeposit;\\n    }\\n\\n    function getStake(\\n        Structures.Tokens tokenId,\\n        address staker\\n    ) external view returns (uint256 amount) {\\n        // get deposit\\n        amount = Deposit._getDeposit(tokenId, staker);\\n        // explicit return\\n        return amount;\\n    }\\n\\n    function getTotalStaked() external view returns (uint256) {\\n        uint256 amountSeller = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            post.postdata.escrow.seller\\n        );\\n\\n        uint256 amountBuyer = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            post.postdata.escrow.buyer\\n        );\\n\\n        return (amountSeller + amountBuyer);\\n    }\\n\\n    function addStake(\\n        Structures.Tokens tokenId,\\n        address _funder,\\n        uint256 amountToAdd\\n    ) external payable returns (uint256) {\\n        require(tokenId == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n\\n        // Check if the encryptedVaultId matches with either the buyer or the seller\\n        require(\\n            msg.sender == post.postdata.escrow.buyer ||\\n                msg.sender == post.postdata.escrow.seller,\\n            \\\"WRONG_MSGSENDER\\\"\\n        );\\n\\n        // Determine the amount to add based on the role (buyer or seller)\\n        uint256 actualAmountToAdd = (msg.sender == post.postdata.escrow.seller)\\n            ? msg.value\\n            : amountToAdd;\\n\\n        // Update the stake\\n        uint256 newStake = _addStake(\\n            tokenId,\\n            msg.sender,\\n            _funder,\\n            actualAmountToAdd\\n        );\\n\\n        // Update the corresponding escrow value based on the role\\n        if (msg.sender == post.postdata.escrow.buyer) {\\n            post.postdata.escrow.payment = newStake;\\n        } else {\\n            post.postdata.escrow.stake = newStake;\\n        }\\n\\n        return newStake;\\n    }\\n\\n    function takeStake(\\n        Structures.Tokens tokenId,\\n        address receiver,\\n        uint256 amountToTake\\n    ) external returns (uint256) {\\n        require(tokenId == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n\\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, msg.sender);\\n\\n        require(currentDeposit >= amountToTake, \\\"NOT_ENOUGH_STAKE\\\");\\n\\n        uint256 newBalance = _takeStake(\\n            tokenId,\\n            msg.sender,\\n            receiver,\\n            amountToTake\\n        );\\n\\n        if (msg.sender == post.postdata.escrow.buyer) {\\n            post.postdata.escrow.payment = newBalance;\\n        } else {\\n            post.postdata.escrow.stake = newBalance;\\n        }\\n\\n        return newBalance;\\n    }\\n\\n    function takeFullStake(\\n        Structures.Tokens tokenId,\\n        address receiver\\n    ) external returns (uint256) {\\n        require(tokenId == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n\\n        uint256 newBalance = _takeFullStake(tokenId, msg.sender, receiver);\\n\\n        if (msg.sender == post.postdata.escrow.buyer) {\\n            post.postdata.escrow.payment = newBalance;\\n        } else if (msg.sender == post.postdata.escrow.seller) {\\n            post.postdata.escrow.stake = newBalance;\\n        }\\n\\n        return newBalance;\\n    }\\n\\n    function getSellerStake() external view returns (uint256 amount) {\\n        // get deposit\\n        amount = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            post.postdata.escrow.seller\\n        );\\n        // explicit return\\n        return amount;\\n    }\\n\\n    function getBuyerStake() external view returns (uint256 amount) {\\n        // get deposit\\n        amount = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            post.postdata.escrow.buyer\\n        );\\n        // explicit return\\n        return amount;\\n    }\\n}\\n\",\"keccak256\":\"0x94556a37278a2684b61c9734e71d523d215af864486d60b0562f52d5437308dc\"},\"contracts/modules/TokenManager.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"./BurnDAI.sol\\\";\\n\\nabstract contract TokenManager is BurnDAI {\\n    function _getTokenAddress(\\n        Structures.Tokens tokenID\\n    ) internal view returns (address) {\\n        if (tokenID == Structures.Tokens.DAI)\\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\\n        if (tokenID == Structures.Tokens.MUSE)\\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\\n        return address(0);\\n    }\\n\\n    function _checkAllowance(\\n        Structures.Tokens tokenID,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal view {\\n        address tokenAddress = _getTokenAddress(tokenID);\\n        require(\\n            IERC20(tokenAddress).allowance(from, to) >= value,\\n            \\\"INSUFFICIENT_ALLOWANCE\\\"\\n        );\\n    }\\n\\n    modifier onlyValidTokenID(Structures.Tokens tokenID) {\\n        require(\\n            tokenID == Structures.Tokens.MUSE ||\\n                tokenID == Structures.Tokens.DAI ||\\n                tokenID == Structures.Tokens.NaN,\\n            \\\"WRONG_TOKEN\\\"\\n        );\\n        _;\\n    }\\n\\n    function isValidTokenID(\\n        Structures.Tokens tokenID\\n    ) internal pure returns (bool validity) {\\n        return\\n            tokenID == Structures.Tokens.MUSE ||\\n            tokenID == Structures.Tokens.DAI;\\n    }\\n\\n    function _transfer(\\n        Structures.Tokens tokenID,\\n        address to,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        require(\\n            IERC20(_getTokenAddress(tokenID)).transfer(to, value),\\n            \\\"TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function _transferFrom(\\n        Structures.Tokens tokenID,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        address tokenAddress = _getTokenAddress(tokenID);\\n        _checkAllowance(tokenID, from, to, value);\\n        require(\\n            IERC20(tokenAddress).transferFrom(from, to, value),\\n            \\\"TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function _burn(\\n        Structures.Tokens tokenID,\\n        address _receiver,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) returns (bool success) {\\n        bool burnEnabled = IMecenateFeedFactory(settings.factoryContract)\\n            .burnEnabled();\\n\\n        if (burnEnabled == false) {\\n            if (tokenID == Structures.Tokens.NaN) {\\n                (bool result, ) = payable(_receiver).call{value: value}(\\\"\\\");\\n                require(result, \\\"CALL_FAILED\\\");\\n            } else {\\n                TokenManager._transfer(tokenID, _receiver, value);\\n            }\\n        } else {\\n            if (tokenID == Structures.Tokens.DAI) {\\n                _burnDai(value);\\n            } else if (tokenID == Structures.Tokens.MUSE) {\\n                _burn(value);\\n            } else if (tokenID == Structures.Tokens.NaN) {\\n                _burnWeth(value);\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    function _burnFrom(\\n        Structures.Tokens tokenID,\\n        address from,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        address treasury = IMecenateFeedFactory(settings.factoryContract)\\n            .treasuryContract();\\n\\n        if (tokenID == Structures.Tokens.DAI) {\\n            IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\n                .transferFrom(from, treasury, value);\\n        } else if (tokenID == Structures.Tokens.MUSE) {\\n            BurnMUSE._burnFrom(from, value);\\n        }\\n    }\\n\\n    function _approve(\\n        Structures.Tokens tokenID,\\n        address spender,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        if (tokenID == Structures.Tokens.DAI) {\\n            require(\\n                IERC20(\\n                    IMecenateFeedFactory(settings.factoryContract).daiToken()\\n                ).approve(spender, value),\\n                \\\"APPROVE_FAILED\\\"\\n            );\\n        } else if (tokenID == Structures.Tokens.MUSE) {\\n            uint256 currentAllowance = IMUSE(\\n                IMecenateFeedFactory(settings.factoryContract).museToken()\\n            ).allowance(msg.sender, spender);\\n\\n            uint256 newAllowance = currentAllowance + value;\\n            require(\\n                IMUSE(IMecenateFeedFactory(settings.factoryContract).daiToken())\\n                    .increaseAllowance(spender, newAllowance),\\n                \\\"APPROVE_FAILED\\\"\\n            );\\n        }\\n    }\\n\\n    function totalSupply(\\n        Structures.Tokens tokenID\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).totalSupply();\\n    }\\n\\n    function balanceOf(\\n        Structures.Tokens tokenID,\\n        address who\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).balanceOf(who);\\n    }\\n\\n    function allowance(\\n        Structures.Tokens tokenID,\\n        address owner,\\n        address spender\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).allowance(owner, spender);\\n    }\\n}\\n\",\"keccak256\":\"0x8eded6283ea4effbe4861c36f73afaace086765ac8d26ef695ac8855ed15e8b1\"},\"contracts/modules/Version.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/// @title Semver\\n/// @notice A simple contract for managing contract versions.\\nabstract contract Version {\\n    // Contract's major version number.\\n    uint256 private immutable _major;\\n\\n    // Contract's minor version number.\\n    uint256 private immutable _minor;\\n\\n    // Contract's patch version number.\\n    uint256 private immutable _path;\\n\\n    /// @dev Create a new Semver instance.\\n    /// @param major Major version number.\\n    /// @param minor Minor version number.\\n    /// @param patch Patch version number.\\n    constructor(uint256 major, uint256 minor, uint256 patch) {\\n        _major = major;\\n        _minor = minor;\\n        _path = patch;\\n    }\\n\\n    /// @notice Returns the full semver contract version.\\n    /// @return Semver contract version as a string.\\n    function version() external view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    Strings.toString(_major),\\n                    \\\".\\\",\\n                    Strings.toString(_minor),\\n                    \\\".\\\",\\n                    Strings.toString(_path)\\n                )\\n            );\\n    }\\n\\n    function _version() internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    Strings.toString(_major),\\n                    \\\".\\\",\\n                    Strings.toString(_minor),\\n                    \\\".\\\",\\n                    Strings.toString(_path)\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xa99614da4eb0014c2756685061352b80325a07e4cb14f7c704ec2a62e182688f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3523,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"owner","offset":0,"slot":"0","type":"t_address"},{"astId":3526,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"post","offset":0,"slot":"1","type":"t_struct(Post)2574_storage"},{"astId":3529,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"settings","offset":0,"slot":"18","type":"t_struct(FeedSettings)2550_storage"},{"astId":3533,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"postDurationToDays","offset":0,"slot":"24","type":"t_mapping(t_uint8,t_uint256)"},{"astId":3537,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"validStatuses","offset":0,"slot":"25","type":"t_mapping(t_uint8,t_bool)"},{"astId":3871,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"_deposit","offset":0,"slot":"26","type":"t_mapping(t_uint256,t_mapping(t_address,t_uint256))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_enum(PostStatus)2521":{"encoding":"inplace","label":"enum Structures.PostStatus","numberOfBytes":"1"},"t_enum(PostType)2531":{"encoding":"inplace","label":"enum Structures.PostType","numberOfBytes":"1"},"t_enum(Tokens)2525":{"encoding":"inplace","label":"enum Structures.Tokens","numberOfBytes":"1"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_uint8,t_bool)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint8,t_uint256)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(FeedSettings)2550_storage":{"encoding":"inplace","label":"struct Structures.FeedSettings","members":[{"astId":2539,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"punishmentRatio","offset":0,"slot":"0","type":"t_uint256"},{"astId":2541,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"postCount","offset":0,"slot":"1","type":"t_uint256"},{"astId":2543,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"usersModuleContract","offset":0,"slot":"2","type":"t_address"},{"astId":2545,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"factoryContract","offset":0,"slot":"3","type":"t_address"},{"astId":2547,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"router","offset":0,"slot":"4","type":"t_address"},{"astId":2549,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"version","offset":0,"slot":"5","type":"t_string_storage"}],"numberOfBytes":"192"},"t_struct(Post)2574_storage":{"encoding":"inplace","label":"struct Structures.Post","members":[{"astId":2570,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"creator","offset":0,"slot":"0","type":"t_struct(User)2627_storage"},{"astId":2573,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"postdata","offset":0,"slot":"3","type":"t_struct(PostData)2584_storage"}],"numberOfBytes":"544"},"t_struct(PostData)2584_storage":{"encoding":"inplace","label":"struct Structures.PostData","members":[{"astId":2577,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"settings","offset":0,"slot":"0","type":"t_struct(PostSettings)2607_storage"},{"astId":2580,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"escrow","offset":0,"slot":"5","type":"t_struct(PostEscrow)2620_storage"},{"astId":2583,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"data","offset":0,"slot":"11","type":"t_struct(PostEncryptedData)2591_storage"}],"numberOfBytes":"448"},"t_struct(PostEncryptedData)2591_storage":{"encoding":"inplace","label":"struct Structures.PostEncryptedData","members":[{"astId":2586,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"encryptedData","offset":0,"slot":"0","type":"t_bytes_storage"},{"astId":2588,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"encryptedKey","offset":0,"slot":"1","type":"t_bytes_storage"},{"astId":2590,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"decryptedData","offset":0,"slot":"2","type":"t_bytes_storage"}],"numberOfBytes":"96"},"t_struct(PostEscrow)2620_storage":{"encoding":"inplace","label":"struct Structures.PostEscrow","members":[{"astId":2609,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"buyer","offset":0,"slot":"0","type":"t_address"},{"astId":2611,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"seller","offset":0,"slot":"1","type":"t_address"},{"astId":2613,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"stake","offset":0,"slot":"2","type":"t_uint256"},{"astId":2615,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"payment","offset":0,"slot":"3","type":"t_uint256"},{"astId":2617,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"punishment","offset":0,"slot":"4","type":"t_uint256"},{"astId":2619,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"penalty","offset":0,"slot":"5","type":"t_uint256"}],"numberOfBytes":"192"},"t_struct(PostSettings)2607_storage":{"encoding":"inplace","label":"struct Structures.PostSettings","members":[{"astId":2594,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"status","offset":0,"slot":"0","type":"t_enum(PostStatus)2521"},{"astId":2597,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"postType","offset":1,"slot":"0","type":"t_enum(PostType)2531"},{"astId":2599,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"creationTimeStamp","offset":0,"slot":"1","type":"t_uint256"},{"astId":2601,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"endTimeStamp","offset":0,"slot":"2","type":"t_uint256"},{"astId":2603,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"duration","offset":0,"slot":"3","type":"t_uint256"},{"astId":2606,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"tokenId","offset":0,"slot":"4","type":"t_enum(Tokens)2525"}],"numberOfBytes":"160"},"t_struct(User)2627_storage":{"encoding":"inplace","label":"struct Structures.User","members":[{"astId":2622,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"evmAddress","offset":0,"slot":"0","type":"t_address"},{"astId":2624,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"sismoVaultId","offset":0,"slot":"1","type":"t_bytes_storage"},{"astId":2626,"contract":"contracts/modules/Acceptance.sol:Acceptance","label":"publicKey","offset":0,"slot":"2","type":"t_bytes_storage"}],"numberOfBytes":"96"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{"version()":{"notice":"Returns the full semver contract version."}},"version":1}}},"contracts/modules/BurnDAI.sol":{"BurnDAI":{"abi":[{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Accepted","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Created","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Finalized","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Invalid","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"MadePublic","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Renounced","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Valid","type":"event"},{"inputs":[],"name":"getEncryptedPost","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPaymentRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPost","outputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"internalType":"struct Structures.Post","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStakeRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStatus","outputs":[{"internalType":"enum Structures.PostStatus","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenId","outputs":[{"internalType":"enum Structures.Tokens","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenIdAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"post","outputs":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"postCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"version()":{"returns":{"_0":"Semver contract version as a string."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getEncryptedPost()":"729e2eb1","getPaymentRequested()":"d24e0c87","getPost()":"8c6838ba","getStakeRequested()":"faeb5e17","getStatus()":"4e69d560","getTokenId()":"010a38f5","getTokenIdAddress()":"5ad4e170","owner()":"8da5cb5b","post()":"05c1f502","postCount()":"17906c2e","version()":"54fd4d50"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Accepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Invalid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"MadePublic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Renounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Valid\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getEncryptedPost\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaymentRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPost\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.Post\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenIdAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"post\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"version()\":{\"returns\":{\"_0\":\"Semver contract version as a string.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"version()\":{\"notice\":\"Returns the full semver contract version.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/BurnDAI.sol\":\"BurnDAI\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/helpers/eas/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror DeadlineExpired();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/// @notice A struct representing ECDSA signature data.\\nstruct Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/// @notice A struct representing a single attestation.\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/// @notice A helper function to work with unchecked iterators in loops.\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685\",\"license\":\"MIT\"},\"contracts/helpers/eas/IEAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ISchemaRegistry} from \\\"./ISchemaRegistry.sol\\\";\\nimport {Attestation, Signature} from \\\"./Common.sol\\\";\\n\\n/// @notice A struct representing the arguments of the attestation request.\\nstruct AttestationRequestData {\\n    address recipient; // The recipient of the attestation.\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes32 refUID; // The UID of the related attestation.\\n    bytes data; // Custom attestation data.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the attestation request.\\nstruct AttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the full delegated attestation request.\\nstruct DelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n    Signature signature; // The ECDSA signature data.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi attestation request.\\nstruct MultiAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi attestation request.\\nstruct MultiDelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the arguments of the revocation request.\\nstruct RevocationRequestData {\\n    bytes32 uid; // The UID of the attestation to revoke.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the revocation request.\\nstruct RevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the arguments of the full delegated revocation request.\\nstruct DelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n    Signature signature; // The ECDSA signature data.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi revocation request.\\nstruct MultiRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi revocation request.\\nstruct MultiDelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @title IEAS\\n/// @notice EAS - Ethereum Attestation Service interface.\\ninterface IEAS {\\n    /// @notice Emitted when an attestation has been made.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param uid The UID the revoked attestation.\\n    /// @param schemaUID The UID of the schema.\\n    event Attested(\\n        address indexed recipient,\\n        address indexed attester,\\n        bytes32 uid,\\n        bytes32 indexed schemaUID\\n    );\\n\\n    /// @notice Emitted when an attestation has been revoked.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param schemaUID The UID of the schema.\\n    /// @param uid The UID the revoked attestation.\\n    event Revoked(\\n        address indexed recipient,\\n        address indexed attester,\\n        bytes32 uid,\\n        bytes32 indexed schemaUID\\n    );\\n\\n    /// @notice Emitted when a data has been timestamped.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event Timestamped(bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /// @notice Emitted when a data has been revoked.\\n    /// @param revoker The address of the revoker.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event RevokedOffchain(\\n        address indexed revoker,\\n        bytes32 indexed data,\\n        uint64 indexed timestamp\\n    );\\n\\n    /// @notice Returns the address of the global schema registry.\\n    /// @return The address of the global schema registry.\\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\\n\\n    /// @notice Attests to a specific schema.\\n    /// @param request The arguments of the attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attest({\\n    ///         schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",\\n    ///         data: {\\n    ///             recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n    ///             data: \\\"0xF00D\\\",\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function attest(\\n        AttestationRequest calldata request\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attestByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function attestByDelegation(\\n        DelegatedAttestationRequest calldata delegatedRequest\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to multiple schemas.\\n    /// @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttest([{\\n    ///         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\\n    ///             data: '0x12345678',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiAttest(\\n        MultiAttestationRequest[] calldata multiRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Attests to multiple schemas using via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\\n    ///     grouped by distinct schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttestByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiAttestByDelegation(\\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Revokes an existing attestation to a specific schema.\\n    /// @param request The arguments of the revocation request.\\n    ///\\n    /// Example:\\n    ///     revoke({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function revoke(RevocationRequest calldata request) external payable;\\n\\n    /// @notice Revokes an existing attestation to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated revocation request.\\n    ///\\n    /// Example:\\n    ///     revokeByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 27,\\n    ///             r: '0xb593...7142',\\n    ///             s: '0x0f5b...2cce'\\n    ///         },\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function revokeByDelegation(\\n        DelegatedRevocationRequest calldata delegatedRequest\\n    ) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas.\\n    /// @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevoke([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiRevoke(\\n        MultiRevocationRequest[] calldata multiRequests\\n    ) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests\\n    ///     should be grouped by distinct schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevokeByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiRevokeByDelegation(\\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\\n    ) external payable;\\n\\n    /// @notice Timestamps the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function timestamp(bytes32 data) external returns (uint64);\\n\\n    /// @notice Timestamps the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\\n\\n    /// @notice Revokes the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function revokeOffchain(bytes32 data) external returns (uint64);\\n\\n    /// @notice Revokes the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function multiRevokeOffchain(\\n        bytes32[] calldata data\\n    ) external returns (uint64);\\n\\n    /// @notice Returns an existing attestation by UID.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return The attestation data members.\\n    function getAttestation(\\n        bytes32 uid\\n    ) external view returns (Attestation memory);\\n\\n    /// @notice Checks whether an attestation exists.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return Whether an attestation exists.\\n    function isAttestationValid(bytes32 uid) external view returns (bool);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getTimestamp(bytes32 data) external view returns (uint64);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getRevokeOffchain(\\n        address revoker,\\n        bytes32 data\\n    ) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xc95cca3d90dbae3a21d0f0e28fdf38cc5a85cbd8c760b7759782b18e8f62acc2\",\"license\":\"MIT\"},\"contracts/helpers/eas/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ISchemaResolver} from \\\"./ISchemaResolver.sol\\\";\\n\\n/// @notice A struct representing a record for a submitted schema.\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\n/// @title ISchemaRegistry\\n/// @notice The interface of global attestation schemas for the Ethereum Attestation Service protocol.\\ninterface ISchemaRegistry {\\n    /// @notice Emitted when a new schema has been registered\\n    /// @param uid The schema UID.\\n    /// @param registerer The address of the account used to register the schema.\\n    /// @param schema The schema data.\\n    event Registered(\\n        bytes32 indexed uid,\\n        address indexed registerer,\\n        SchemaRecord schema\\n    );\\n\\n    /// @notice Submits and reserves a new schema\\n    /// @param schema The schema data schema.\\n    /// @param resolver An optional schema resolver.\\n    /// @param revocable Whether the schema allows revocations explicitly.\\n    /// @return The UID of the new schema.\\n    function register(\\n        string calldata schema,\\n        ISchemaResolver resolver,\\n        bool revocable\\n    ) external returns (bytes32);\\n\\n    /// @notice Returns an existing schema by UID\\n    /// @param uid The UID of the schema to retrieve.\\n    /// @return The schema data members.\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\\n\",\"keccak256\":\"0x743ddc248c97a78d34239035d1d9557a74dcaaa5b59a2aa66cea4eadabb8b2de\",\"license\":\"MIT\"},\"contracts/helpers/eas/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {Attestation} from \\\"./Common.sol\\\";\\n\\n/// @title ISchemaResolver\\n/// @notice The interface of an optional schema resolver.\\ninterface ISchemaResolver {\\n    /// @notice Checks if the resolver can be sent ETH.\\n    /// @return Whether the resolver supports ETH transfers.\\n    function isPayable() external pure returns (bool);\\n\\n    /// @notice Processes an attestation and verifies whether it's valid.\\n    /// @param attestation The new attestation.\\n    /// @return Whether the attestation is valid.\\n    function attest(\\n        Attestation calldata attestation\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes multiple attestations and verifies whether they are valid.\\n    /// @param attestations The new attestations.\\n    /// @param values Explicit ETH amounts which were sent with each attestation.\\n    /// @return Whether all the attestations are valid.\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\\n    /// @param attestation The existing attestation to be revoked.\\n    /// @return Whether the attestation can be revoked.\\n    function revoke(\\n        Attestation calldata attestation\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\\n    /// @param attestations The existing attestations to be revoked.\\n    /// @param values Explicit ETH amounts which were sent with each revocation.\\n    /// @return Whether the attestations can be revoked.\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0x97ec835833519c6c11c0fb097ea5bccd888e65f650590fdb643d937430bb4f03\",\"license\":\"MIT\"},\"contracts/interfaces/IMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n// import IERC20 from openzeppelin\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMUSE is IERC20 {\\n    function increaseAllowance(\\n        address spender,\\n        uint256 addedValue\\n    ) external returns (bool);\\n\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 subtractedValue\\n    ) external returns (bool);\\n\\n    function mint(uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x8b0a4012a1cd0815460bb3d15278671589bb85003ff2c38315701b3f2228c633\"},\"contracts/interfaces/IMecenateFeed.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateFeed {\\n    function getPost() external view returns (Structures.Post memory);\\n\\n    function getTotalStaked() external view returns (uint256);\\n\\n    function postCount() external view returns (uint256);\\n\\n    function acceptPost(\\n        Structures.Tokens,\\n        uint256 _amount,\\n        address _funder,\\n        address _buyer\\n    ) external payable;\\n\\n    function getSellerStake() external view returns (uint256);\\n\\n    function getBuyerStake() external view returns (uint256);\\n\\n    function getPaymentRequested() external view returns (uint256);\\n\\n    function getStakeRequested() external view returns (uint256);\\n\\n    function getStatus() external view returns (Structures.PostStatus status);\\n\\n    function getTokenId() external view returns (Structures.Tokens tokenId);\\n\\n    function owner() external view returns (address);\\n\\n    function version() external view returns (string memory);\\n\\n    function getEncryptedPost() external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xe7a4b838d4f4540e4a8e3911c2afea70ebd9a2e87bd526eef13b203c2643a645\"},\"contracts/interfaces/IMecenateFeedFactory.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\ninterface IMecenateFeedFactory {\\n    function owner() external view returns (address payable);\\n\\n    function treasuryContract() external view returns (address payable);\\n\\n    function feeds() external view returns (address[] memory);\\n\\n    function contractCounter() external view returns (uint256);\\n\\n    function isFeed(address _feed) external view returns (bool);\\n\\n    function museToken() external view returns (address);\\n\\n    function wethToken() external view returns (address);\\n\\n    function daiToken() external view returns (address);\\n\\n    function router() external view returns (address);\\n\\n    function getRouterFee(uint8 tokenId) external view returns (uint24);\\n\\n    function burnEnabled() external view returns (bool);\\n\\n    function version() external view returns (string memory);\\n\\n    function easSchema() external view returns (bytes32);\\n\\n    function easContract() external view returns (address);\\n}\\n\",\"keccak256\":\"0x79da402b87332cbe8176ab1d0abd2c5369a0da30970743b86283e1a774eea776\"},\"contracts/interfaces/IMecenateTreasury.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateTreasury {\\r\\n    function globalFee() external view returns (uint256);\\r\\n\\r\\n    function fixedFee() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf544878bba8e01c837110d06eac56042957d59c593ba9083f686ef02aa9276a1\"},\"contracts/interfaces/IMecenateUsers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateUsers {\\n    function registerUser(bytes memory metadata) external;\\n\\n    function getUsers() external view returns (address[] memory);\\n\\n    function getUserCount() external view returns (uint256);\\n\\n    function getUserAt(uint256 index) external view returns (address);\\n\\n    function checkifUserExist(address userAddress) external view returns (bool);\\n\\n    function getPaginatedUsers(\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) external view returns (address[] memory);\\n\\n    function getUserMetadata(\\n        address userAddress\\n    ) external view returns (Structures.User memory);\\n\\n    function getUserPublicKey(\\n        address userAddress\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xf0ff65dbfea12d90cf106325b9478e31b284045327e5f0974db5374b8789e93c\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function withdraw(uint256) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xeb4bd6c56a346f12ec3d681183d613795c151709e834d69ef58f13fd6d7edf62\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\n * @title Structures\\n * @dev This library defines various data structures used in the Mecenate platform.\\n */\\npragma solidity 0.8.19;\\n\\nlibrary Structures {\\n    enum PostStatus {\\n        Waiting,\\n        Proposed,\\n        Accepted,\\n        Submitted,\\n        Finalized,\\n        Punished,\\n        Revealed,\\n        Renounced\\n    }\\n\\n    enum Tokens {\\n        NaN,\\n        MUSE,\\n        DAI\\n    }\\n\\n    enum PostType {\\n        Text,\\n        Image,\\n        Video,\\n        Audio,\\n        File\\n    }\\n    enum PostDuration {\\n        OneDay,\\n        ThreeDays,\\n        OneWeek,\\n        TwoWeeks,\\n        OneMonth\\n    }\\n\\n    struct FeedSettings {\\n        uint256 punishmentRatio;\\n        uint256 postCount;\\n        address usersModuleContract;\\n        address factoryContract;\\n        address router;\\n        string version;\\n    }\\n\\n    struct FactorySettings {\\n        address treasuryContract;\\n        address usersModuleContract;\\n        address easContract;\\n        bytes32 easSchema;\\n        address museToken;\\n        address daiToken;\\n        address wethToken;\\n        address router;\\n    }\\n\\n    /**\\n     * @dev Struct representing a post on the Mecenate platform.\\n     */\\n    struct Post {\\n        User creator;\\n        PostData postdata;\\n    }\\n\\n    /**\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\n     */\\n    struct PostData {\\n        PostSettings settings;\\n        PostEscrow escrow;\\n        PostEncryptedData data;\\n    }\\n\\n    /**\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\n     */\\n    struct PostEncryptedData {\\n        bytes encryptedData;\\n        bytes encryptedKey;\\n        bytes decryptedData;\\n    }\\n\\n    /**\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettings {\\n        PostStatus status;\\n        PostType postType;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n        uint256 duration;\\n        Tokens tokenId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\n     */\\n    struct PostEscrow {\\n        address buyer;\\n        address seller;\\n        uint256 stake;\\n        uint256 payment;\\n        uint256 punishment;\\n        uint256 penalty;\\n    }\\n\\n    /**\\n     * @dev Struct representing a user on the Mecenate platform.\\n     */\\n    struct User {\\n        address evmAddress;\\n        bytes sismoVaultId;\\n        bytes publicKey;\\n    }\\n\\n    /**\\n     * @dev Struct representing a feed on the Mecenate platform.\\n     */\\n    struct Feed {\\n        address contractAddress;\\n        address owner;\\n        uint256 sellerStake;\\n        uint256 buyerStake;\\n        uint256 totalStake;\\n        uint256 postCount;\\n        uint256 paymentRequested;\\n        uint256 stakeRequested;\\n        PostStatus status;\\n        Tokens tokenId;\\n        string version;\\n    }\\n\\n    /**\\n     * @dev Struct representing a bay request on the Mecenate platform.\\n     */\\n    struct BayRequest {\\n        bytes request;\\n        uint256 payment;\\n        uint256 stake;\\n        address postAddress;\\n        bool accepted;\\n        uint256 postCount;\\n        Tokens tokenId;\\n        address buyerAddress;\\n    }\\n}\\n\",\"keccak256\":\"0xab56ad7506e91048fc9c6db9fd9510c42afa61d6b11a99a273bf975643307d8f\"},\"contracts/modules/BurnDAI.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"./BurnMUSE.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"../interfaces/IWETH.sol\\\";\\n\\nabstract contract BurnDAI is BurnMUSE {\\n    using SafeMath for uint256;\\n\\n    function _burnFrom(\\n        address from,\\n        uint256 value\\n    ) internal override returns (bool success) {\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\n            .transferFrom(from, address(this), value);\\n\\n        _burn(value);\\n\\n        return true;\\n    }\\n\\n    function _burnDai(uint256 value) internal returns (bool success) {\\n        // approve uniswap for token transfer\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\n            .approve(settings.router, value);\\n\\n        // swap IMecenateFeedFactory(settings.factoryContract).daiToken() for MUSE\\n        uint256 tokens_sold = value;\\n\\n        uint256 tokens_bought = _swapTokensForToken(\\n            IMecenateFeedFactory(settings.factoryContract).daiToken(),\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\n            IMecenateFeedFactory(settings.factoryContract).getRouterFee(0),\\n            tokens_sold\\n        );\\n\\n        uint256 tokens_sold_to_muse = _swapTokensForToken(\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\n            IMecenateFeedFactory(settings.factoryContract).museToken(),\\n            IMecenateFeedFactory(settings.factoryContract).getRouterFee(1),\\n            tokens_bought\\n        );\\n\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).museToken())\\n            .approve(\\n                IMecenateFeedFactory(settings.factoryContract).museToken(),\\n                tokens_sold_to_muse\\n            );\\n\\n        // burn MUSE\\n        BurnMUSE._burn(tokens_sold_to_muse);\\n\\n        return true;\\n    }\\n\\n    function _burnWeth(uint256 value) internal returns (bool success) {\\n        // deposit IMecenateFeedFactory(settings.factoryContract).wethToken()\\n        IWETH(IMecenateFeedFactory(settings.factoryContract).wethToken())\\n            .deposit{value: value}();\\n\\n        // approve uniswap for token transfer\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).wethToken())\\n            .approve(settings.router, value);\\n\\n        // swap IMecenateFeedFactory(settings.factoryContract).wethToken() for MUSE\\n        uint256 tokens_sold = value;\\n\\n        uint256 tokens_bought = _swapTokensForToken(\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\n            IMecenateFeedFactory(settings.factoryContract).museToken(),\\n            IMecenateFeedFactory(settings.factoryContract).getRouterFee(1),\\n            tokens_sold\\n        );\\n\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).museToken())\\n            .approve(\\n                IMecenateFeedFactory(settings.factoryContract).museToken(),\\n                tokens_bought\\n            );\\n\\n        // burn MUSE\\n        BurnMUSE._burn(tokens_bought);\\n\\n        return true;\\n    }\\n\\n    function getTokenAddress()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address token)\\n    {\\n        return IMecenateFeedFactory(settings.factoryContract).daiToken();\\n    }\\n\\n    function getExchangeAddress()\\n        internal\\n        view\\n        override\\n        returns (address exchange)\\n    {\\n        exchange = settings.router;\\n    }\\n\\n    function _swapTokensForToken(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountIn\\n    ) internal returns (uint256 amountOut) {\\n        // Check and approve allowance\\n        uint256 allowance = IERC20(tokenIn).allowance(\\n            address(this),\\n            settings.router\\n        );\\n        if (allowance < amountIn) {\\n            IERC20(tokenIn).approve(settings.router, type(uint256).max);\\n        }\\n\\n        // Prepare parameters\\n        address recipient = address(this);\\n        uint256 deadline = block.timestamp + 60; // 15 seconds from the current block timestamp\\n\\n        // Perform the swap\\n        // Refer to the Uniswap V3 documentation for details on the params.\\n        amountOut = ISwapRouter(settings.router).exactInputSingle(\\n            ISwapRouter.ExactInputSingleParams({\\n                tokenIn: tokenIn,\\n                tokenOut: tokenOut,\\n                fee: fee,\\n                recipient: recipient,\\n                deadline: deadline,\\n                amountIn: amountIn,\\n                amountOutMinimum: 0, // you may want to set a minimum here\\n                sqrtPriceLimitX96: 0\\n            })\\n        );\\n\\n        return amountOut;\\n    }\\n}\\n\",\"keccak256\":\"0xa69462e962a3be48c3514c746d791c7a870247e8e441a2d7a11b5771ec8e0d23\"},\"contracts/modules/BurnMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\nimport \\\"../interfaces/IMUSE.sol\\\";\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\nimport \\\"./Events.sol\\\";\\n\\nabstract contract BurnMUSE is Events {\\n    function _burn(uint256 value) internal virtual returns (bool success) {\\n        IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken()).burn(\\n            value\\n        );\\n        return true;\\n    }\\n\\n    function _burnFrom(\\n        address from,\\n        uint256 value\\n    ) internal virtual returns (bool success) {\\n        IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken())\\n            .transferFrom(from, address(this), value);\\n        _burn(value);\\n        return true;\\n    }\\n\\n    function getTokenAddress() internal view virtual returns (address token) {\\n        return IMecenateFeedFactory(settings.factoryContract).museToken();\\n    }\\n\\n    function getExchangeAddress()\\n        internal\\n        view\\n        virtual\\n        returns (address exchange)\\n    {\\n        exchange = IMecenateFeedFactory(settings.factoryContract).router();\\n    }\\n}\\n\",\"keccak256\":\"0x052049c27f8e98f27fd3d237157e4700d5f5c313343d1cd734614beefa4ccfc6\"},\"contracts/modules/Data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../interfaces/IMecenateFeed.sol\\\";\\nimport \\\"../interfaces/IMecenateUsers.sol\\\";\\nimport \\\"../interfaces/IMecenateTreasury.sol\\\";\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\nimport \\\"../helpers/eas/IEAS.sol\\\";\\nimport \\\"./Version.sol\\\";\\n\\n/**\\n * @title Data\\n * @dev This contract stores data related to Mecenate posts and provides functions to interact with it.\\n */\\ncontract Data is Version {\\n    bytes internal constant ZEROHASH = \\\"0x00\\\";\\n\\n    address public owner;\\n\\n    Structures.Post public post;\\n\\n    Structures.FeedSettings internal settings;\\n\\n    mapping(uint8 => uint256) internal postDurationToDays;\\n\\n    mapping(uint8 => bool) internal validStatuses;\\n\\n    constructor(\\n        address usersModuleContract,\\n        address factoryContract,\\n        uint256 _major,\\n        uint256 _minor,\\n        uint256 _patch\\n    ) Version(_major, _minor, _patch) {\\n        settings.punishmentRatio = 100000000000000000; // Constant value\\n        settings.postCount = 0; // Initialize postCount to 0\\n        settings.usersModuleContract = usersModuleContract;\\n        settings.factoryContract = msg.sender;\\n        settings.router = IMecenateFeedFactory(factoryContract).router();\\n        settings.version = _version();\\n\\n        post.postdata.settings.status = Structures.PostStatus.Waiting;\\n\\n        postDurationToDays[uint8(Structures.PostDuration.OneDay)] = 1 days;\\n        postDurationToDays[uint8(Structures.PostDuration.ThreeDays)] = 3 days;\\n        postDurationToDays[uint8(Structures.PostDuration.OneWeek)] = 7 days;\\n        postDurationToDays[uint8(Structures.PostDuration.TwoWeeks)] = 14 days;\\n        postDurationToDays[uint8(Structures.PostDuration.OneMonth)] = 30 days;\\n\\n        validStatuses[uint8(Structures.PostStatus.Waiting)] = true;\\n    }\\n\\n    function _changeStatus(Structures.PostStatus newStatus) internal {\\n        validStatuses[uint8(post.postdata.settings.status)] = false;\\n        validStatuses[uint8(newStatus)] = true;\\n        post.postdata.settings.status = newStatus;\\n    }\\n\\n    function getStatus() external view returns (Structures.PostStatus) {\\n        return post.postdata.settings.status;\\n    }\\n\\n    function getTokenId() external view returns (Structures.Tokens) {\\n        return post.postdata.settings.tokenId;\\n    }\\n\\n    function getTokenIdAddress() public view returns (address) {\\n        if (post.postdata.settings.tokenId == Structures.Tokens.MUSE) {\\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\\n        } else if (post.postdata.settings.tokenId == Structures.Tokens.DAI) {\\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    function _checkToken(Structures.Tokens _token) internal view {\\n        require(_token == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n    }\\n\\n    function getPaymentRequested() external view returns (uint256) {\\n        return post.postdata.escrow.payment;\\n    }\\n\\n    function getStakeRequested() external view returns (uint256) {\\n        return post.postdata.escrow.stake;\\n    }\\n\\n    function postCount() external view returns (uint256) {\\n        return settings.postCount;\\n    }\\n\\n    function getEncryptedPost() external view returns (bytes memory) {\\n        return post.postdata.data.encryptedData;\\n    }\\n\\n    function getPost() external view returns (Structures.Post memory) {\\n        return post;\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xb09086cdcab6dc2790f56df6a5808c7a48794c5519ea122f927c0a0684d1f2c6\",\"license\":\"MIT\"},\"contracts/modules/Events.sol\":{\"content\":\"/**\\r\\n * @title Events\\r\\n * @dev This abstract contract defines the events related to the Mecenate platform's post lifecycle.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./Data.sol\\\";\\r\\n\\r\\nabstract contract Events is Data {\\r\\n    event Created(Structures.Post post);\\r\\n    event Accepted(Structures.Post post);\\r\\n    event Valid(Structures.Post post);\\r\\n    event Invalid(Structures.Post post);\\r\\n    event Finalized(Structures.Post post);\\r\\n    event MadePublic(Structures.Post post);\\r\\n    event Renounced(Structures.Post post);\\r\\n}\\r\\n\",\"keccak256\":\"0x3aeaf067b1f9010a2456df46fb54d4727b3a24082b1446ac9266dbcdd8c838f6\"},\"contracts/modules/Version.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/// @title Semver\\n/// @notice A simple contract for managing contract versions.\\nabstract contract Version {\\n    // Contract's major version number.\\n    uint256 private immutable _major;\\n\\n    // Contract's minor version number.\\n    uint256 private immutable _minor;\\n\\n    // Contract's patch version number.\\n    uint256 private immutable _path;\\n\\n    /// @dev Create a new Semver instance.\\n    /// @param major Major version number.\\n    /// @param minor Minor version number.\\n    /// @param patch Patch version number.\\n    constructor(uint256 major, uint256 minor, uint256 patch) {\\n        _major = major;\\n        _minor = minor;\\n        _path = patch;\\n    }\\n\\n    /// @notice Returns the full semver contract version.\\n    /// @return Semver contract version as a string.\\n    function version() external view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    Strings.toString(_major),\\n                    \\\".\\\",\\n                    Strings.toString(_minor),\\n                    \\\".\\\",\\n                    Strings.toString(_path)\\n                )\\n            );\\n    }\\n\\n    function _version() internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    Strings.toString(_major),\\n                    \\\".\\\",\\n                    Strings.toString(_minor),\\n                    \\\".\\\",\\n                    Strings.toString(_path)\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xa99614da4eb0014c2756685061352b80325a07e4cb14f7c704ec2a62e182688f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3523,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"owner","offset":0,"slot":"0","type":"t_address"},{"astId":3526,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"post","offset":0,"slot":"1","type":"t_struct(Post)2574_storage"},{"astId":3529,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"settings","offset":0,"slot":"18","type":"t_struct(FeedSettings)2550_storage"},{"astId":3533,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"postDurationToDays","offset":0,"slot":"24","type":"t_mapping(t_uint8,t_uint256)"},{"astId":3537,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"validStatuses","offset":0,"slot":"25","type":"t_mapping(t_uint8,t_bool)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_enum(PostStatus)2521":{"encoding":"inplace","label":"enum Structures.PostStatus","numberOfBytes":"1"},"t_enum(PostType)2531":{"encoding":"inplace","label":"enum Structures.PostType","numberOfBytes":"1"},"t_enum(Tokens)2525":{"encoding":"inplace","label":"enum Structures.Tokens","numberOfBytes":"1"},"t_mapping(t_uint8,t_bool)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint8,t_uint256)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(FeedSettings)2550_storage":{"encoding":"inplace","label":"struct Structures.FeedSettings","members":[{"astId":2539,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"punishmentRatio","offset":0,"slot":"0","type":"t_uint256"},{"astId":2541,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"postCount","offset":0,"slot":"1","type":"t_uint256"},{"astId":2543,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"usersModuleContract","offset":0,"slot":"2","type":"t_address"},{"astId":2545,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"factoryContract","offset":0,"slot":"3","type":"t_address"},{"astId":2547,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"router","offset":0,"slot":"4","type":"t_address"},{"astId":2549,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"version","offset":0,"slot":"5","type":"t_string_storage"}],"numberOfBytes":"192"},"t_struct(Post)2574_storage":{"encoding":"inplace","label":"struct Structures.Post","members":[{"astId":2570,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"creator","offset":0,"slot":"0","type":"t_struct(User)2627_storage"},{"astId":2573,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"postdata","offset":0,"slot":"3","type":"t_struct(PostData)2584_storage"}],"numberOfBytes":"544"},"t_struct(PostData)2584_storage":{"encoding":"inplace","label":"struct Structures.PostData","members":[{"astId":2577,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"settings","offset":0,"slot":"0","type":"t_struct(PostSettings)2607_storage"},{"astId":2580,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"escrow","offset":0,"slot":"5","type":"t_struct(PostEscrow)2620_storage"},{"astId":2583,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"data","offset":0,"slot":"11","type":"t_struct(PostEncryptedData)2591_storage"}],"numberOfBytes":"448"},"t_struct(PostEncryptedData)2591_storage":{"encoding":"inplace","label":"struct Structures.PostEncryptedData","members":[{"astId":2586,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"encryptedData","offset":0,"slot":"0","type":"t_bytes_storage"},{"astId":2588,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"encryptedKey","offset":0,"slot":"1","type":"t_bytes_storage"},{"astId":2590,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"decryptedData","offset":0,"slot":"2","type":"t_bytes_storage"}],"numberOfBytes":"96"},"t_struct(PostEscrow)2620_storage":{"encoding":"inplace","label":"struct Structures.PostEscrow","members":[{"astId":2609,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"buyer","offset":0,"slot":"0","type":"t_address"},{"astId":2611,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"seller","offset":0,"slot":"1","type":"t_address"},{"astId":2613,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"stake","offset":0,"slot":"2","type":"t_uint256"},{"astId":2615,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"payment","offset":0,"slot":"3","type":"t_uint256"},{"astId":2617,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"punishment","offset":0,"slot":"4","type":"t_uint256"},{"astId":2619,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"penalty","offset":0,"slot":"5","type":"t_uint256"}],"numberOfBytes":"192"},"t_struct(PostSettings)2607_storage":{"encoding":"inplace","label":"struct Structures.PostSettings","members":[{"astId":2594,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"status","offset":0,"slot":"0","type":"t_enum(PostStatus)2521"},{"astId":2597,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"postType","offset":1,"slot":"0","type":"t_enum(PostType)2531"},{"astId":2599,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"creationTimeStamp","offset":0,"slot":"1","type":"t_uint256"},{"astId":2601,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"endTimeStamp","offset":0,"slot":"2","type":"t_uint256"},{"astId":2603,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"duration","offset":0,"slot":"3","type":"t_uint256"},{"astId":2606,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"tokenId","offset":0,"slot":"4","type":"t_enum(Tokens)2525"}],"numberOfBytes":"160"},"t_struct(User)2627_storage":{"encoding":"inplace","label":"struct Structures.User","members":[{"astId":2622,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"evmAddress","offset":0,"slot":"0","type":"t_address"},{"astId":2624,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"sismoVaultId","offset":0,"slot":"1","type":"t_bytes_storage"},{"astId":2626,"contract":"contracts/modules/BurnDAI.sol:BurnDAI","label":"publicKey","offset":0,"slot":"2","type":"t_bytes_storage"}],"numberOfBytes":"96"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{"version()":{"notice":"Returns the full semver contract version."}},"version":1}}},"contracts/modules/BurnMUSE.sol":{"BurnMUSE":{"abi":[{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Accepted","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Created","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Finalized","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Invalid","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"MadePublic","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Renounced","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Valid","type":"event"},{"inputs":[],"name":"getEncryptedPost","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPaymentRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPost","outputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"internalType":"struct Structures.Post","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStakeRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStatus","outputs":[{"internalType":"enum Structures.PostStatus","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenId","outputs":[{"internalType":"enum Structures.Tokens","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenIdAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"post","outputs":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"postCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"version()":{"returns":{"_0":"Semver contract version as a string."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getEncryptedPost()":"729e2eb1","getPaymentRequested()":"d24e0c87","getPost()":"8c6838ba","getStakeRequested()":"faeb5e17","getStatus()":"4e69d560","getTokenId()":"010a38f5","getTokenIdAddress()":"5ad4e170","owner()":"8da5cb5b","post()":"05c1f502","postCount()":"17906c2e","version()":"54fd4d50"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Accepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Invalid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"MadePublic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Renounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Valid\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getEncryptedPost\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaymentRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPost\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.Post\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenIdAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"post\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"version()\":{\"returns\":{\"_0\":\"Semver contract version as a string.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"version()\":{\"notice\":\"Returns the full semver contract version.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/BurnMUSE.sol\":\"BurnMUSE\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/helpers/eas/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror DeadlineExpired();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/// @notice A struct representing ECDSA signature data.\\nstruct Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/// @notice A struct representing a single attestation.\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/// @notice A helper function to work with unchecked iterators in loops.\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685\",\"license\":\"MIT\"},\"contracts/helpers/eas/IEAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ISchemaRegistry} from \\\"./ISchemaRegistry.sol\\\";\\nimport {Attestation, Signature} from \\\"./Common.sol\\\";\\n\\n/// @notice A struct representing the arguments of the attestation request.\\nstruct AttestationRequestData {\\n    address recipient; // The recipient of the attestation.\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes32 refUID; // The UID of the related attestation.\\n    bytes data; // Custom attestation data.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the attestation request.\\nstruct AttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the full delegated attestation request.\\nstruct DelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n    Signature signature; // The ECDSA signature data.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi attestation request.\\nstruct MultiAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi attestation request.\\nstruct MultiDelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the arguments of the revocation request.\\nstruct RevocationRequestData {\\n    bytes32 uid; // The UID of the attestation to revoke.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the revocation request.\\nstruct RevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the arguments of the full delegated revocation request.\\nstruct DelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n    Signature signature; // The ECDSA signature data.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi revocation request.\\nstruct MultiRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi revocation request.\\nstruct MultiDelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @title IEAS\\n/// @notice EAS - Ethereum Attestation Service interface.\\ninterface IEAS {\\n    /// @notice Emitted when an attestation has been made.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param uid The UID the revoked attestation.\\n    /// @param schemaUID The UID of the schema.\\n    event Attested(\\n        address indexed recipient,\\n        address indexed attester,\\n        bytes32 uid,\\n        bytes32 indexed schemaUID\\n    );\\n\\n    /// @notice Emitted when an attestation has been revoked.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param schemaUID The UID of the schema.\\n    /// @param uid The UID the revoked attestation.\\n    event Revoked(\\n        address indexed recipient,\\n        address indexed attester,\\n        bytes32 uid,\\n        bytes32 indexed schemaUID\\n    );\\n\\n    /// @notice Emitted when a data has been timestamped.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event Timestamped(bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /// @notice Emitted when a data has been revoked.\\n    /// @param revoker The address of the revoker.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event RevokedOffchain(\\n        address indexed revoker,\\n        bytes32 indexed data,\\n        uint64 indexed timestamp\\n    );\\n\\n    /// @notice Returns the address of the global schema registry.\\n    /// @return The address of the global schema registry.\\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\\n\\n    /// @notice Attests to a specific schema.\\n    /// @param request The arguments of the attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attest({\\n    ///         schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",\\n    ///         data: {\\n    ///             recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n    ///             data: \\\"0xF00D\\\",\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function attest(\\n        AttestationRequest calldata request\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attestByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function attestByDelegation(\\n        DelegatedAttestationRequest calldata delegatedRequest\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to multiple schemas.\\n    /// @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttest([{\\n    ///         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\\n    ///             data: '0x12345678',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiAttest(\\n        MultiAttestationRequest[] calldata multiRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Attests to multiple schemas using via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\\n    ///     grouped by distinct schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttestByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiAttestByDelegation(\\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Revokes an existing attestation to a specific schema.\\n    /// @param request The arguments of the revocation request.\\n    ///\\n    /// Example:\\n    ///     revoke({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function revoke(RevocationRequest calldata request) external payable;\\n\\n    /// @notice Revokes an existing attestation to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated revocation request.\\n    ///\\n    /// Example:\\n    ///     revokeByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 27,\\n    ///             r: '0xb593...7142',\\n    ///             s: '0x0f5b...2cce'\\n    ///         },\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function revokeByDelegation(\\n        DelegatedRevocationRequest calldata delegatedRequest\\n    ) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas.\\n    /// @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevoke([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiRevoke(\\n        MultiRevocationRequest[] calldata multiRequests\\n    ) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests\\n    ///     should be grouped by distinct schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevokeByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiRevokeByDelegation(\\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\\n    ) external payable;\\n\\n    /// @notice Timestamps the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function timestamp(bytes32 data) external returns (uint64);\\n\\n    /// @notice Timestamps the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\\n\\n    /// @notice Revokes the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function revokeOffchain(bytes32 data) external returns (uint64);\\n\\n    /// @notice Revokes the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function multiRevokeOffchain(\\n        bytes32[] calldata data\\n    ) external returns (uint64);\\n\\n    /// @notice Returns an existing attestation by UID.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return The attestation data members.\\n    function getAttestation(\\n        bytes32 uid\\n    ) external view returns (Attestation memory);\\n\\n    /// @notice Checks whether an attestation exists.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return Whether an attestation exists.\\n    function isAttestationValid(bytes32 uid) external view returns (bool);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getTimestamp(bytes32 data) external view returns (uint64);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getRevokeOffchain(\\n        address revoker,\\n        bytes32 data\\n    ) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xc95cca3d90dbae3a21d0f0e28fdf38cc5a85cbd8c760b7759782b18e8f62acc2\",\"license\":\"MIT\"},\"contracts/helpers/eas/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ISchemaResolver} from \\\"./ISchemaResolver.sol\\\";\\n\\n/// @notice A struct representing a record for a submitted schema.\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\n/// @title ISchemaRegistry\\n/// @notice The interface of global attestation schemas for the Ethereum Attestation Service protocol.\\ninterface ISchemaRegistry {\\n    /// @notice Emitted when a new schema has been registered\\n    /// @param uid The schema UID.\\n    /// @param registerer The address of the account used to register the schema.\\n    /// @param schema The schema data.\\n    event Registered(\\n        bytes32 indexed uid,\\n        address indexed registerer,\\n        SchemaRecord schema\\n    );\\n\\n    /// @notice Submits and reserves a new schema\\n    /// @param schema The schema data schema.\\n    /// @param resolver An optional schema resolver.\\n    /// @param revocable Whether the schema allows revocations explicitly.\\n    /// @return The UID of the new schema.\\n    function register(\\n        string calldata schema,\\n        ISchemaResolver resolver,\\n        bool revocable\\n    ) external returns (bytes32);\\n\\n    /// @notice Returns an existing schema by UID\\n    /// @param uid The UID of the schema to retrieve.\\n    /// @return The schema data members.\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\\n\",\"keccak256\":\"0x743ddc248c97a78d34239035d1d9557a74dcaaa5b59a2aa66cea4eadabb8b2de\",\"license\":\"MIT\"},\"contracts/helpers/eas/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {Attestation} from \\\"./Common.sol\\\";\\n\\n/// @title ISchemaResolver\\n/// @notice The interface of an optional schema resolver.\\ninterface ISchemaResolver {\\n    /// @notice Checks if the resolver can be sent ETH.\\n    /// @return Whether the resolver supports ETH transfers.\\n    function isPayable() external pure returns (bool);\\n\\n    /// @notice Processes an attestation and verifies whether it's valid.\\n    /// @param attestation The new attestation.\\n    /// @return Whether the attestation is valid.\\n    function attest(\\n        Attestation calldata attestation\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes multiple attestations and verifies whether they are valid.\\n    /// @param attestations The new attestations.\\n    /// @param values Explicit ETH amounts which were sent with each attestation.\\n    /// @return Whether all the attestations are valid.\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\\n    /// @param attestation The existing attestation to be revoked.\\n    /// @return Whether the attestation can be revoked.\\n    function revoke(\\n        Attestation calldata attestation\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\\n    /// @param attestations The existing attestations to be revoked.\\n    /// @param values Explicit ETH amounts which were sent with each revocation.\\n    /// @return Whether the attestations can be revoked.\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0x97ec835833519c6c11c0fb097ea5bccd888e65f650590fdb643d937430bb4f03\",\"license\":\"MIT\"},\"contracts/interfaces/IMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n// import IERC20 from openzeppelin\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMUSE is IERC20 {\\n    function increaseAllowance(\\n        address spender,\\n        uint256 addedValue\\n    ) external returns (bool);\\n\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 subtractedValue\\n    ) external returns (bool);\\n\\n    function mint(uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x8b0a4012a1cd0815460bb3d15278671589bb85003ff2c38315701b3f2228c633\"},\"contracts/interfaces/IMecenateFeed.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateFeed {\\n    function getPost() external view returns (Structures.Post memory);\\n\\n    function getTotalStaked() external view returns (uint256);\\n\\n    function postCount() external view returns (uint256);\\n\\n    function acceptPost(\\n        Structures.Tokens,\\n        uint256 _amount,\\n        address _funder,\\n        address _buyer\\n    ) external payable;\\n\\n    function getSellerStake() external view returns (uint256);\\n\\n    function getBuyerStake() external view returns (uint256);\\n\\n    function getPaymentRequested() external view returns (uint256);\\n\\n    function getStakeRequested() external view returns (uint256);\\n\\n    function getStatus() external view returns (Structures.PostStatus status);\\n\\n    function getTokenId() external view returns (Structures.Tokens tokenId);\\n\\n    function owner() external view returns (address);\\n\\n    function version() external view returns (string memory);\\n\\n    function getEncryptedPost() external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xe7a4b838d4f4540e4a8e3911c2afea70ebd9a2e87bd526eef13b203c2643a645\"},\"contracts/interfaces/IMecenateFeedFactory.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\ninterface IMecenateFeedFactory {\\n    function owner() external view returns (address payable);\\n\\n    function treasuryContract() external view returns (address payable);\\n\\n    function feeds() external view returns (address[] memory);\\n\\n    function contractCounter() external view returns (uint256);\\n\\n    function isFeed(address _feed) external view returns (bool);\\n\\n    function museToken() external view returns (address);\\n\\n    function wethToken() external view returns (address);\\n\\n    function daiToken() external view returns (address);\\n\\n    function router() external view returns (address);\\n\\n    function getRouterFee(uint8 tokenId) external view returns (uint24);\\n\\n    function burnEnabled() external view returns (bool);\\n\\n    function version() external view returns (string memory);\\n\\n    function easSchema() external view returns (bytes32);\\n\\n    function easContract() external view returns (address);\\n}\\n\",\"keccak256\":\"0x79da402b87332cbe8176ab1d0abd2c5369a0da30970743b86283e1a774eea776\"},\"contracts/interfaces/IMecenateTreasury.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateTreasury {\\r\\n    function globalFee() external view returns (uint256);\\r\\n\\r\\n    function fixedFee() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf544878bba8e01c837110d06eac56042957d59c593ba9083f686ef02aa9276a1\"},\"contracts/interfaces/IMecenateUsers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateUsers {\\n    function registerUser(bytes memory metadata) external;\\n\\n    function getUsers() external view returns (address[] memory);\\n\\n    function getUserCount() external view returns (uint256);\\n\\n    function getUserAt(uint256 index) external view returns (address);\\n\\n    function checkifUserExist(address userAddress) external view returns (bool);\\n\\n    function getPaginatedUsers(\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) external view returns (address[] memory);\\n\\n    function getUserMetadata(\\n        address userAddress\\n    ) external view returns (Structures.User memory);\\n\\n    function getUserPublicKey(\\n        address userAddress\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xf0ff65dbfea12d90cf106325b9478e31b284045327e5f0974db5374b8789e93c\",\"license\":\"MIT\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\n * @title Structures\\n * @dev This library defines various data structures used in the Mecenate platform.\\n */\\npragma solidity 0.8.19;\\n\\nlibrary Structures {\\n    enum PostStatus {\\n        Waiting,\\n        Proposed,\\n        Accepted,\\n        Submitted,\\n        Finalized,\\n        Punished,\\n        Revealed,\\n        Renounced\\n    }\\n\\n    enum Tokens {\\n        NaN,\\n        MUSE,\\n        DAI\\n    }\\n\\n    enum PostType {\\n        Text,\\n        Image,\\n        Video,\\n        Audio,\\n        File\\n    }\\n    enum PostDuration {\\n        OneDay,\\n        ThreeDays,\\n        OneWeek,\\n        TwoWeeks,\\n        OneMonth\\n    }\\n\\n    struct FeedSettings {\\n        uint256 punishmentRatio;\\n        uint256 postCount;\\n        address usersModuleContract;\\n        address factoryContract;\\n        address router;\\n        string version;\\n    }\\n\\n    struct FactorySettings {\\n        address treasuryContract;\\n        address usersModuleContract;\\n        address easContract;\\n        bytes32 easSchema;\\n        address museToken;\\n        address daiToken;\\n        address wethToken;\\n        address router;\\n    }\\n\\n    /**\\n     * @dev Struct representing a post on the Mecenate platform.\\n     */\\n    struct Post {\\n        User creator;\\n        PostData postdata;\\n    }\\n\\n    /**\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\n     */\\n    struct PostData {\\n        PostSettings settings;\\n        PostEscrow escrow;\\n        PostEncryptedData data;\\n    }\\n\\n    /**\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\n     */\\n    struct PostEncryptedData {\\n        bytes encryptedData;\\n        bytes encryptedKey;\\n        bytes decryptedData;\\n    }\\n\\n    /**\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettings {\\n        PostStatus status;\\n        PostType postType;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n        uint256 duration;\\n        Tokens tokenId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\n     */\\n    struct PostEscrow {\\n        address buyer;\\n        address seller;\\n        uint256 stake;\\n        uint256 payment;\\n        uint256 punishment;\\n        uint256 penalty;\\n    }\\n\\n    /**\\n     * @dev Struct representing a user on the Mecenate platform.\\n     */\\n    struct User {\\n        address evmAddress;\\n        bytes sismoVaultId;\\n        bytes publicKey;\\n    }\\n\\n    /**\\n     * @dev Struct representing a feed on the Mecenate platform.\\n     */\\n    struct Feed {\\n        address contractAddress;\\n        address owner;\\n        uint256 sellerStake;\\n        uint256 buyerStake;\\n        uint256 totalStake;\\n        uint256 postCount;\\n        uint256 paymentRequested;\\n        uint256 stakeRequested;\\n        PostStatus status;\\n        Tokens tokenId;\\n        string version;\\n    }\\n\\n    /**\\n     * @dev Struct representing a bay request on the Mecenate platform.\\n     */\\n    struct BayRequest {\\n        bytes request;\\n        uint256 payment;\\n        uint256 stake;\\n        address postAddress;\\n        bool accepted;\\n        uint256 postCount;\\n        Tokens tokenId;\\n        address buyerAddress;\\n    }\\n}\\n\",\"keccak256\":\"0xab56ad7506e91048fc9c6db9fd9510c42afa61d6b11a99a273bf975643307d8f\"},\"contracts/modules/BurnMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\nimport \\\"../interfaces/IMUSE.sol\\\";\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\nimport \\\"./Events.sol\\\";\\n\\nabstract contract BurnMUSE is Events {\\n    function _burn(uint256 value) internal virtual returns (bool success) {\\n        IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken()).burn(\\n            value\\n        );\\n        return true;\\n    }\\n\\n    function _burnFrom(\\n        address from,\\n        uint256 value\\n    ) internal virtual returns (bool success) {\\n        IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken())\\n            .transferFrom(from, address(this), value);\\n        _burn(value);\\n        return true;\\n    }\\n\\n    function getTokenAddress() internal view virtual returns (address token) {\\n        return IMecenateFeedFactory(settings.factoryContract).museToken();\\n    }\\n\\n    function getExchangeAddress()\\n        internal\\n        view\\n        virtual\\n        returns (address exchange)\\n    {\\n        exchange = IMecenateFeedFactory(settings.factoryContract).router();\\n    }\\n}\\n\",\"keccak256\":\"0x052049c27f8e98f27fd3d237157e4700d5f5c313343d1cd734614beefa4ccfc6\"},\"contracts/modules/Data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../interfaces/IMecenateFeed.sol\\\";\\nimport \\\"../interfaces/IMecenateUsers.sol\\\";\\nimport \\\"../interfaces/IMecenateTreasury.sol\\\";\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\nimport \\\"../helpers/eas/IEAS.sol\\\";\\nimport \\\"./Version.sol\\\";\\n\\n/**\\n * @title Data\\n * @dev This contract stores data related to Mecenate posts and provides functions to interact with it.\\n */\\ncontract Data is Version {\\n    bytes internal constant ZEROHASH = \\\"0x00\\\";\\n\\n    address public owner;\\n\\n    Structures.Post public post;\\n\\n    Structures.FeedSettings internal settings;\\n\\n    mapping(uint8 => uint256) internal postDurationToDays;\\n\\n    mapping(uint8 => bool) internal validStatuses;\\n\\n    constructor(\\n        address usersModuleContract,\\n        address factoryContract,\\n        uint256 _major,\\n        uint256 _minor,\\n        uint256 _patch\\n    ) Version(_major, _minor, _patch) {\\n        settings.punishmentRatio = 100000000000000000; // Constant value\\n        settings.postCount = 0; // Initialize postCount to 0\\n        settings.usersModuleContract = usersModuleContract;\\n        settings.factoryContract = msg.sender;\\n        settings.router = IMecenateFeedFactory(factoryContract).router();\\n        settings.version = _version();\\n\\n        post.postdata.settings.status = Structures.PostStatus.Waiting;\\n\\n        postDurationToDays[uint8(Structures.PostDuration.OneDay)] = 1 days;\\n        postDurationToDays[uint8(Structures.PostDuration.ThreeDays)] = 3 days;\\n        postDurationToDays[uint8(Structures.PostDuration.OneWeek)] = 7 days;\\n        postDurationToDays[uint8(Structures.PostDuration.TwoWeeks)] = 14 days;\\n        postDurationToDays[uint8(Structures.PostDuration.OneMonth)] = 30 days;\\n\\n        validStatuses[uint8(Structures.PostStatus.Waiting)] = true;\\n    }\\n\\n    function _changeStatus(Structures.PostStatus newStatus) internal {\\n        validStatuses[uint8(post.postdata.settings.status)] = false;\\n        validStatuses[uint8(newStatus)] = true;\\n        post.postdata.settings.status = newStatus;\\n    }\\n\\n    function getStatus() external view returns (Structures.PostStatus) {\\n        return post.postdata.settings.status;\\n    }\\n\\n    function getTokenId() external view returns (Structures.Tokens) {\\n        return post.postdata.settings.tokenId;\\n    }\\n\\n    function getTokenIdAddress() public view returns (address) {\\n        if (post.postdata.settings.tokenId == Structures.Tokens.MUSE) {\\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\\n        } else if (post.postdata.settings.tokenId == Structures.Tokens.DAI) {\\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    function _checkToken(Structures.Tokens _token) internal view {\\n        require(_token == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n    }\\n\\n    function getPaymentRequested() external view returns (uint256) {\\n        return post.postdata.escrow.payment;\\n    }\\n\\n    function getStakeRequested() external view returns (uint256) {\\n        return post.postdata.escrow.stake;\\n    }\\n\\n    function postCount() external view returns (uint256) {\\n        return settings.postCount;\\n    }\\n\\n    function getEncryptedPost() external view returns (bytes memory) {\\n        return post.postdata.data.encryptedData;\\n    }\\n\\n    function getPost() external view returns (Structures.Post memory) {\\n        return post;\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xb09086cdcab6dc2790f56df6a5808c7a48794c5519ea122f927c0a0684d1f2c6\",\"license\":\"MIT\"},\"contracts/modules/Events.sol\":{\"content\":\"/**\\r\\n * @title Events\\r\\n * @dev This abstract contract defines the events related to the Mecenate platform's post lifecycle.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./Data.sol\\\";\\r\\n\\r\\nabstract contract Events is Data {\\r\\n    event Created(Structures.Post post);\\r\\n    event Accepted(Structures.Post post);\\r\\n    event Valid(Structures.Post post);\\r\\n    event Invalid(Structures.Post post);\\r\\n    event Finalized(Structures.Post post);\\r\\n    event MadePublic(Structures.Post post);\\r\\n    event Renounced(Structures.Post post);\\r\\n}\\r\\n\",\"keccak256\":\"0x3aeaf067b1f9010a2456df46fb54d4727b3a24082b1446ac9266dbcdd8c838f6\"},\"contracts/modules/Version.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/// @title Semver\\n/// @notice A simple contract for managing contract versions.\\nabstract contract Version {\\n    // Contract's major version number.\\n    uint256 private immutable _major;\\n\\n    // Contract's minor version number.\\n    uint256 private immutable _minor;\\n\\n    // Contract's patch version number.\\n    uint256 private immutable _path;\\n\\n    /// @dev Create a new Semver instance.\\n    /// @param major Major version number.\\n    /// @param minor Minor version number.\\n    /// @param patch Patch version number.\\n    constructor(uint256 major, uint256 minor, uint256 patch) {\\n        _major = major;\\n        _minor = minor;\\n        _path = patch;\\n    }\\n\\n    /// @notice Returns the full semver contract version.\\n    /// @return Semver contract version as a string.\\n    function version() external view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    Strings.toString(_major),\\n                    \\\".\\\",\\n                    Strings.toString(_minor),\\n                    \\\".\\\",\\n                    Strings.toString(_path)\\n                )\\n            );\\n    }\\n\\n    function _version() internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    Strings.toString(_major),\\n                    \\\".\\\",\\n                    Strings.toString(_minor),\\n                    \\\".\\\",\\n                    Strings.toString(_path)\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xa99614da4eb0014c2756685061352b80325a07e4cb14f7c704ec2a62e182688f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3523,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"owner","offset":0,"slot":"0","type":"t_address"},{"astId":3526,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"post","offset":0,"slot":"1","type":"t_struct(Post)2574_storage"},{"astId":3529,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"settings","offset":0,"slot":"18","type":"t_struct(FeedSettings)2550_storage"},{"astId":3533,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"postDurationToDays","offset":0,"slot":"24","type":"t_mapping(t_uint8,t_uint256)"},{"astId":3537,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"validStatuses","offset":0,"slot":"25","type":"t_mapping(t_uint8,t_bool)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_enum(PostStatus)2521":{"encoding":"inplace","label":"enum Structures.PostStatus","numberOfBytes":"1"},"t_enum(PostType)2531":{"encoding":"inplace","label":"enum Structures.PostType","numberOfBytes":"1"},"t_enum(Tokens)2525":{"encoding":"inplace","label":"enum Structures.Tokens","numberOfBytes":"1"},"t_mapping(t_uint8,t_bool)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint8,t_uint256)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(FeedSettings)2550_storage":{"encoding":"inplace","label":"struct Structures.FeedSettings","members":[{"astId":2539,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"punishmentRatio","offset":0,"slot":"0","type":"t_uint256"},{"astId":2541,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"postCount","offset":0,"slot":"1","type":"t_uint256"},{"astId":2543,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"usersModuleContract","offset":0,"slot":"2","type":"t_address"},{"astId":2545,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"factoryContract","offset":0,"slot":"3","type":"t_address"},{"astId":2547,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"router","offset":0,"slot":"4","type":"t_address"},{"astId":2549,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"version","offset":0,"slot":"5","type":"t_string_storage"}],"numberOfBytes":"192"},"t_struct(Post)2574_storage":{"encoding":"inplace","label":"struct Structures.Post","members":[{"astId":2570,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"creator","offset":0,"slot":"0","type":"t_struct(User)2627_storage"},{"astId":2573,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"postdata","offset":0,"slot":"3","type":"t_struct(PostData)2584_storage"}],"numberOfBytes":"544"},"t_struct(PostData)2584_storage":{"encoding":"inplace","label":"struct Structures.PostData","members":[{"astId":2577,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"settings","offset":0,"slot":"0","type":"t_struct(PostSettings)2607_storage"},{"astId":2580,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"escrow","offset":0,"slot":"5","type":"t_struct(PostEscrow)2620_storage"},{"astId":2583,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"data","offset":0,"slot":"11","type":"t_struct(PostEncryptedData)2591_storage"}],"numberOfBytes":"448"},"t_struct(PostEncryptedData)2591_storage":{"encoding":"inplace","label":"struct Structures.PostEncryptedData","members":[{"astId":2586,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"encryptedData","offset":0,"slot":"0","type":"t_bytes_storage"},{"astId":2588,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"encryptedKey","offset":0,"slot":"1","type":"t_bytes_storage"},{"astId":2590,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"decryptedData","offset":0,"slot":"2","type":"t_bytes_storage"}],"numberOfBytes":"96"},"t_struct(PostEscrow)2620_storage":{"encoding":"inplace","label":"struct Structures.PostEscrow","members":[{"astId":2609,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"buyer","offset":0,"slot":"0","type":"t_address"},{"astId":2611,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"seller","offset":0,"slot":"1","type":"t_address"},{"astId":2613,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"stake","offset":0,"slot":"2","type":"t_uint256"},{"astId":2615,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"payment","offset":0,"slot":"3","type":"t_uint256"},{"astId":2617,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"punishment","offset":0,"slot":"4","type":"t_uint256"},{"astId":2619,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"penalty","offset":0,"slot":"5","type":"t_uint256"}],"numberOfBytes":"192"},"t_struct(PostSettings)2607_storage":{"encoding":"inplace","label":"struct Structures.PostSettings","members":[{"astId":2594,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"status","offset":0,"slot":"0","type":"t_enum(PostStatus)2521"},{"astId":2597,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"postType","offset":1,"slot":"0","type":"t_enum(PostType)2531"},{"astId":2599,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"creationTimeStamp","offset":0,"slot":"1","type":"t_uint256"},{"astId":2601,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"endTimeStamp","offset":0,"slot":"2","type":"t_uint256"},{"astId":2603,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"duration","offset":0,"slot":"3","type":"t_uint256"},{"astId":2606,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"tokenId","offset":0,"slot":"4","type":"t_enum(Tokens)2525"}],"numberOfBytes":"160"},"t_struct(User)2627_storage":{"encoding":"inplace","label":"struct Structures.User","members":[{"astId":2622,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"evmAddress","offset":0,"slot":"0","type":"t_address"},{"astId":2624,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"sismoVaultId","offset":0,"slot":"1","type":"t_bytes_storage"},{"astId":2626,"contract":"contracts/modules/BurnMUSE.sol:BurnMUSE","label":"publicKey","offset":0,"slot":"2","type":"t_bytes_storage"}],"numberOfBytes":"96"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{"version()":{"notice":"Returns the full semver contract version."}},"version":1}}},"contracts/modules/Creation.sol":{"Creation":{"abi":[{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Accepted","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Created","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenID","type":"uint8"},{"indexed":false,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newDeposit","type":"uint256"}],"name":"DepositDecreased","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenID","type":"uint8"},{"indexed":false,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newDeposit","type":"uint256"}],"name":"DepositIncreased","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Finalized","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Invalid","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"MadePublic","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Renounced","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"staker","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"name":"StakeAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"staker","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"StakeBurned","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"staker","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"name":"StakeTaken","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Valid","type":"event"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"address","name":"_funder","type":"address"},{"internalType":"uint256","name":"amountToAdd","type":"uint256"}],"name":"addStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"encryptedHash","type":"bytes"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"enum Structures.PostDuration","name":"postDuration","type":"uint8"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"stakeAmount","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"address","name":"funder","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"bool","name":"useStake","type":"bool"}],"name":"createPost","outputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"internalType":"struct Structures.Post","name":"","type":"tuple"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"getBuyerStake","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getEncryptedPost","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPaymentRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPost","outputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"internalType":"struct Structures.Post","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSellerStake","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"address","name":"staker","type":"address"}],"name":"getStake","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStakeRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStatus","outputs":[{"internalType":"enum Structures.PostStatus","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenId","outputs":[{"internalType":"enum Structures.Tokens","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenIdAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTotalStaked","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"post","outputs":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"postCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"address","name":"receiver","type":"address"}],"name":"takeFullStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint256","name":"amountToTake","type":"uint256"}],"name":"takeStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"version()":{"returns":{"_0":"Semver contract version as a string."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"addStake(uint8,address,uint256)":"1d0b4af5","createPost(bytes,uint8,uint8,uint256,uint256,uint8,address,address,bool)":"d2af47ab","getBuyerStake()":"4c38d877","getEncryptedPost()":"729e2eb1","getPaymentRequested()":"d24e0c87","getPost()":"8c6838ba","getSellerStake()":"5c63ed69","getStake(uint8,address)":"52a6cb4a","getStakeRequested()":"faeb5e17","getStatus()":"4e69d560","getTokenId()":"010a38f5","getTokenIdAddress()":"5ad4e170","getTotalStaked()":"0917e776","owner()":"8da5cb5b","post()":"05c1f502","postCount()":"17906c2e","takeFullStake(uint8,address)":"f2d7dbb6","takeStake(uint8,address,uint256)":"ed70d5d5","version()":"54fd4d50"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Accepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDeposit\",\"type\":\"uint256\"}],\"name\":\"DepositDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDeposit\",\"type\":\"uint256\"}],\"name\":\"DepositIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Invalid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"MadePublic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Renounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"name\":\"StakeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"name\":\"StakeTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Valid\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_funder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToAdd\",\"type\":\"uint256\"}],\"name\":\"addStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encryptedHash\",\"type\":\"bytes\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostDuration\",\"name\":\"postDuration\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useStake\",\"type\":\"bool\"}],\"name\":\"createPost\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.Post\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyerStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEncryptedPost\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaymentRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPost\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.Post\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellerStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenIdAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"post\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"takeFullStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToTake\",\"type\":\"uint256\"}],\"name\":\"takeStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"version()\":{\"returns\":{\"_0\":\"Semver contract version as a string.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"version()\":{\"notice\":\"Returns the full semver contract version.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/Creation.sol\":\"Creation\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/helpers/eas/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror DeadlineExpired();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/// @notice A struct representing ECDSA signature data.\\nstruct Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/// @notice A struct representing a single attestation.\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/// @notice A helper function to work with unchecked iterators in loops.\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685\",\"license\":\"MIT\"},\"contracts/helpers/eas/IEAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ISchemaRegistry} from \\\"./ISchemaRegistry.sol\\\";\\nimport {Attestation, Signature} from \\\"./Common.sol\\\";\\n\\n/// @notice A struct representing the arguments of the attestation request.\\nstruct AttestationRequestData {\\n    address recipient; // The recipient of the attestation.\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes32 refUID; // The UID of the related attestation.\\n    bytes data; // Custom attestation data.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the attestation request.\\nstruct AttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the full delegated attestation request.\\nstruct DelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n    Signature signature; // The ECDSA signature data.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi attestation request.\\nstruct MultiAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi attestation request.\\nstruct MultiDelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the arguments of the revocation request.\\nstruct RevocationRequestData {\\n    bytes32 uid; // The UID of the attestation to revoke.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the revocation request.\\nstruct RevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the arguments of the full delegated revocation request.\\nstruct DelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n    Signature signature; // The ECDSA signature data.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi revocation request.\\nstruct MultiRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi revocation request.\\nstruct MultiDelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @title IEAS\\n/// @notice EAS - Ethereum Attestation Service interface.\\ninterface IEAS {\\n    /// @notice Emitted when an attestation has been made.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param uid The UID the revoked attestation.\\n    /// @param schemaUID The UID of the schema.\\n    event Attested(\\n        address indexed recipient,\\n        address indexed attester,\\n        bytes32 uid,\\n        bytes32 indexed schemaUID\\n    );\\n\\n    /// @notice Emitted when an attestation has been revoked.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param schemaUID The UID of the schema.\\n    /// @param uid The UID the revoked attestation.\\n    event Revoked(\\n        address indexed recipient,\\n        address indexed attester,\\n        bytes32 uid,\\n        bytes32 indexed schemaUID\\n    );\\n\\n    /// @notice Emitted when a data has been timestamped.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event Timestamped(bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /// @notice Emitted when a data has been revoked.\\n    /// @param revoker The address of the revoker.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event RevokedOffchain(\\n        address indexed revoker,\\n        bytes32 indexed data,\\n        uint64 indexed timestamp\\n    );\\n\\n    /// @notice Returns the address of the global schema registry.\\n    /// @return The address of the global schema registry.\\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\\n\\n    /// @notice Attests to a specific schema.\\n    /// @param request The arguments of the attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attest({\\n    ///         schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",\\n    ///         data: {\\n    ///             recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n    ///             data: \\\"0xF00D\\\",\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function attest(\\n        AttestationRequest calldata request\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attestByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function attestByDelegation(\\n        DelegatedAttestationRequest calldata delegatedRequest\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to multiple schemas.\\n    /// @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttest([{\\n    ///         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\\n    ///             data: '0x12345678',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiAttest(\\n        MultiAttestationRequest[] calldata multiRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Attests to multiple schemas using via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\\n    ///     grouped by distinct schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttestByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiAttestByDelegation(\\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Revokes an existing attestation to a specific schema.\\n    /// @param request The arguments of the revocation request.\\n    ///\\n    /// Example:\\n    ///     revoke({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function revoke(RevocationRequest calldata request) external payable;\\n\\n    /// @notice Revokes an existing attestation to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated revocation request.\\n    ///\\n    /// Example:\\n    ///     revokeByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 27,\\n    ///             r: '0xb593...7142',\\n    ///             s: '0x0f5b...2cce'\\n    ///         },\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function revokeByDelegation(\\n        DelegatedRevocationRequest calldata delegatedRequest\\n    ) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas.\\n    /// @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevoke([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiRevoke(\\n        MultiRevocationRequest[] calldata multiRequests\\n    ) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests\\n    ///     should be grouped by distinct schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevokeByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiRevokeByDelegation(\\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\\n    ) external payable;\\n\\n    /// @notice Timestamps the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function timestamp(bytes32 data) external returns (uint64);\\n\\n    /// @notice Timestamps the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\\n\\n    /// @notice Revokes the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function revokeOffchain(bytes32 data) external returns (uint64);\\n\\n    /// @notice Revokes the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function multiRevokeOffchain(\\n        bytes32[] calldata data\\n    ) external returns (uint64);\\n\\n    /// @notice Returns an existing attestation by UID.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return The attestation data members.\\n    function getAttestation(\\n        bytes32 uid\\n    ) external view returns (Attestation memory);\\n\\n    /// @notice Checks whether an attestation exists.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return Whether an attestation exists.\\n    function isAttestationValid(bytes32 uid) external view returns (bool);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getTimestamp(bytes32 data) external view returns (uint64);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getRevokeOffchain(\\n        address revoker,\\n        bytes32 data\\n    ) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xc95cca3d90dbae3a21d0f0e28fdf38cc5a85cbd8c760b7759782b18e8f62acc2\",\"license\":\"MIT\"},\"contracts/helpers/eas/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ISchemaResolver} from \\\"./ISchemaResolver.sol\\\";\\n\\n/// @notice A struct representing a record for a submitted schema.\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\n/// @title ISchemaRegistry\\n/// @notice The interface of global attestation schemas for the Ethereum Attestation Service protocol.\\ninterface ISchemaRegistry {\\n    /// @notice Emitted when a new schema has been registered\\n    /// @param uid The schema UID.\\n    /// @param registerer The address of the account used to register the schema.\\n    /// @param schema The schema data.\\n    event Registered(\\n        bytes32 indexed uid,\\n        address indexed registerer,\\n        SchemaRecord schema\\n    );\\n\\n    /// @notice Submits and reserves a new schema\\n    /// @param schema The schema data schema.\\n    /// @param resolver An optional schema resolver.\\n    /// @param revocable Whether the schema allows revocations explicitly.\\n    /// @return The UID of the new schema.\\n    function register(\\n        string calldata schema,\\n        ISchemaResolver resolver,\\n        bool revocable\\n    ) external returns (bytes32);\\n\\n    /// @notice Returns an existing schema by UID\\n    /// @param uid The UID of the schema to retrieve.\\n    /// @return The schema data members.\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\\n\",\"keccak256\":\"0x743ddc248c97a78d34239035d1d9557a74dcaaa5b59a2aa66cea4eadabb8b2de\",\"license\":\"MIT\"},\"contracts/helpers/eas/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {Attestation} from \\\"./Common.sol\\\";\\n\\n/// @title ISchemaResolver\\n/// @notice The interface of an optional schema resolver.\\ninterface ISchemaResolver {\\n    /// @notice Checks if the resolver can be sent ETH.\\n    /// @return Whether the resolver supports ETH transfers.\\n    function isPayable() external pure returns (bool);\\n\\n    /// @notice Processes an attestation and verifies whether it's valid.\\n    /// @param attestation The new attestation.\\n    /// @return Whether the attestation is valid.\\n    function attest(\\n        Attestation calldata attestation\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes multiple attestations and verifies whether they are valid.\\n    /// @param attestations The new attestations.\\n    /// @param values Explicit ETH amounts which were sent with each attestation.\\n    /// @return Whether all the attestations are valid.\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\\n    /// @param attestation The existing attestation to be revoked.\\n    /// @return Whether the attestation can be revoked.\\n    function revoke(\\n        Attestation calldata attestation\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\\n    /// @param attestations The existing attestations to be revoked.\\n    /// @param values Explicit ETH amounts which were sent with each revocation.\\n    /// @return Whether the attestations can be revoked.\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0x97ec835833519c6c11c0fb097ea5bccd888e65f650590fdb643d937430bb4f03\",\"license\":\"MIT\"},\"contracts/interfaces/IMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n// import IERC20 from openzeppelin\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMUSE is IERC20 {\\n    function increaseAllowance(\\n        address spender,\\n        uint256 addedValue\\n    ) external returns (bool);\\n\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 subtractedValue\\n    ) external returns (bool);\\n\\n    function mint(uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x8b0a4012a1cd0815460bb3d15278671589bb85003ff2c38315701b3f2228c633\"},\"contracts/interfaces/IMecenateFeed.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateFeed {\\n    function getPost() external view returns (Structures.Post memory);\\n\\n    function getTotalStaked() external view returns (uint256);\\n\\n    function postCount() external view returns (uint256);\\n\\n    function acceptPost(\\n        Structures.Tokens,\\n        uint256 _amount,\\n        address _funder,\\n        address _buyer\\n    ) external payable;\\n\\n    function getSellerStake() external view returns (uint256);\\n\\n    function getBuyerStake() external view returns (uint256);\\n\\n    function getPaymentRequested() external view returns (uint256);\\n\\n    function getStakeRequested() external view returns (uint256);\\n\\n    function getStatus() external view returns (Structures.PostStatus status);\\n\\n    function getTokenId() external view returns (Structures.Tokens tokenId);\\n\\n    function owner() external view returns (address);\\n\\n    function version() external view returns (string memory);\\n\\n    function getEncryptedPost() external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xe7a4b838d4f4540e4a8e3911c2afea70ebd9a2e87bd526eef13b203c2643a645\"},\"contracts/interfaces/IMecenateFeedFactory.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\ninterface IMecenateFeedFactory {\\n    function owner() external view returns (address payable);\\n\\n    function treasuryContract() external view returns (address payable);\\n\\n    function feeds() external view returns (address[] memory);\\n\\n    function contractCounter() external view returns (uint256);\\n\\n    function isFeed(address _feed) external view returns (bool);\\n\\n    function museToken() external view returns (address);\\n\\n    function wethToken() external view returns (address);\\n\\n    function daiToken() external view returns (address);\\n\\n    function router() external view returns (address);\\n\\n    function getRouterFee(uint8 tokenId) external view returns (uint24);\\n\\n    function burnEnabled() external view returns (bool);\\n\\n    function version() external view returns (string memory);\\n\\n    function easSchema() external view returns (bytes32);\\n\\n    function easContract() external view returns (address);\\n}\\n\",\"keccak256\":\"0x79da402b87332cbe8176ab1d0abd2c5369a0da30970743b86283e1a774eea776\"},\"contracts/interfaces/IMecenateTreasury.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateTreasury {\\r\\n    function globalFee() external view returns (uint256);\\r\\n\\r\\n    function fixedFee() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf544878bba8e01c837110d06eac56042957d59c593ba9083f686ef02aa9276a1\"},\"contracts/interfaces/IMecenateUsers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateUsers {\\n    function registerUser(bytes memory metadata) external;\\n\\n    function getUsers() external view returns (address[] memory);\\n\\n    function getUserCount() external view returns (uint256);\\n\\n    function getUserAt(uint256 index) external view returns (address);\\n\\n    function checkifUserExist(address userAddress) external view returns (bool);\\n\\n    function getPaginatedUsers(\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) external view returns (address[] memory);\\n\\n    function getUserMetadata(\\n        address userAddress\\n    ) external view returns (Structures.User memory);\\n\\n    function getUserPublicKey(\\n        address userAddress\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xf0ff65dbfea12d90cf106325b9478e31b284045327e5f0974db5374b8789e93c\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function withdraw(uint256) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xeb4bd6c56a346f12ec3d681183d613795c151709e834d69ef58f13fd6d7edf62\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\n * @title Structures\\n * @dev This library defines various data structures used in the Mecenate platform.\\n */\\npragma solidity 0.8.19;\\n\\nlibrary Structures {\\n    enum PostStatus {\\n        Waiting,\\n        Proposed,\\n        Accepted,\\n        Submitted,\\n        Finalized,\\n        Punished,\\n        Revealed,\\n        Renounced\\n    }\\n\\n    enum Tokens {\\n        NaN,\\n        MUSE,\\n        DAI\\n    }\\n\\n    enum PostType {\\n        Text,\\n        Image,\\n        Video,\\n        Audio,\\n        File\\n    }\\n    enum PostDuration {\\n        OneDay,\\n        ThreeDays,\\n        OneWeek,\\n        TwoWeeks,\\n        OneMonth\\n    }\\n\\n    struct FeedSettings {\\n        uint256 punishmentRatio;\\n        uint256 postCount;\\n        address usersModuleContract;\\n        address factoryContract;\\n        address router;\\n        string version;\\n    }\\n\\n    struct FactorySettings {\\n        address treasuryContract;\\n        address usersModuleContract;\\n        address easContract;\\n        bytes32 easSchema;\\n        address museToken;\\n        address daiToken;\\n        address wethToken;\\n        address router;\\n    }\\n\\n    /**\\n     * @dev Struct representing a post on the Mecenate platform.\\n     */\\n    struct Post {\\n        User creator;\\n        PostData postdata;\\n    }\\n\\n    /**\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\n     */\\n    struct PostData {\\n        PostSettings settings;\\n        PostEscrow escrow;\\n        PostEncryptedData data;\\n    }\\n\\n    /**\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\n     */\\n    struct PostEncryptedData {\\n        bytes encryptedData;\\n        bytes encryptedKey;\\n        bytes decryptedData;\\n    }\\n\\n    /**\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettings {\\n        PostStatus status;\\n        PostType postType;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n        uint256 duration;\\n        Tokens tokenId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\n     */\\n    struct PostEscrow {\\n        address buyer;\\n        address seller;\\n        uint256 stake;\\n        uint256 payment;\\n        uint256 punishment;\\n        uint256 penalty;\\n    }\\n\\n    /**\\n     * @dev Struct representing a user on the Mecenate platform.\\n     */\\n    struct User {\\n        address evmAddress;\\n        bytes sismoVaultId;\\n        bytes publicKey;\\n    }\\n\\n    /**\\n     * @dev Struct representing a feed on the Mecenate platform.\\n     */\\n    struct Feed {\\n        address contractAddress;\\n        address owner;\\n        uint256 sellerStake;\\n        uint256 buyerStake;\\n        uint256 totalStake;\\n        uint256 postCount;\\n        uint256 paymentRequested;\\n        uint256 stakeRequested;\\n        PostStatus status;\\n        Tokens tokenId;\\n        string version;\\n    }\\n\\n    /**\\n     * @dev Struct representing a bay request on the Mecenate platform.\\n     */\\n    struct BayRequest {\\n        bytes request;\\n        uint256 payment;\\n        uint256 stake;\\n        address postAddress;\\n        bool accepted;\\n        uint256 postCount;\\n        Tokens tokenId;\\n        address buyerAddress;\\n    }\\n}\\n\",\"keccak256\":\"0xab56ad7506e91048fc9c6db9fd9510c42afa61d6b11a99a273bf975643307d8f\"},\"contracts/modules/BurnDAI.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"./BurnMUSE.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"../interfaces/IWETH.sol\\\";\\n\\nabstract contract BurnDAI is BurnMUSE {\\n    using SafeMath for uint256;\\n\\n    function _burnFrom(\\n        address from,\\n        uint256 value\\n    ) internal override returns (bool success) {\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\n            .transferFrom(from, address(this), value);\\n\\n        _burn(value);\\n\\n        return true;\\n    }\\n\\n    function _burnDai(uint256 value) internal returns (bool success) {\\n        // approve uniswap for token transfer\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\n            .approve(settings.router, value);\\n\\n        // swap IMecenateFeedFactory(settings.factoryContract).daiToken() for MUSE\\n        uint256 tokens_sold = value;\\n\\n        uint256 tokens_bought = _swapTokensForToken(\\n            IMecenateFeedFactory(settings.factoryContract).daiToken(),\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\n            IMecenateFeedFactory(settings.factoryContract).getRouterFee(0),\\n            tokens_sold\\n        );\\n\\n        uint256 tokens_sold_to_muse = _swapTokensForToken(\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\n            IMecenateFeedFactory(settings.factoryContract).museToken(),\\n            IMecenateFeedFactory(settings.factoryContract).getRouterFee(1),\\n            tokens_bought\\n        );\\n\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).museToken())\\n            .approve(\\n                IMecenateFeedFactory(settings.factoryContract).museToken(),\\n                tokens_sold_to_muse\\n            );\\n\\n        // burn MUSE\\n        BurnMUSE._burn(tokens_sold_to_muse);\\n\\n        return true;\\n    }\\n\\n    function _burnWeth(uint256 value) internal returns (bool success) {\\n        // deposit IMecenateFeedFactory(settings.factoryContract).wethToken()\\n        IWETH(IMecenateFeedFactory(settings.factoryContract).wethToken())\\n            .deposit{value: value}();\\n\\n        // approve uniswap for token transfer\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).wethToken())\\n            .approve(settings.router, value);\\n\\n        // swap IMecenateFeedFactory(settings.factoryContract).wethToken() for MUSE\\n        uint256 tokens_sold = value;\\n\\n        uint256 tokens_bought = _swapTokensForToken(\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\n            IMecenateFeedFactory(settings.factoryContract).museToken(),\\n            IMecenateFeedFactory(settings.factoryContract).getRouterFee(1),\\n            tokens_sold\\n        );\\n\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).museToken())\\n            .approve(\\n                IMecenateFeedFactory(settings.factoryContract).museToken(),\\n                tokens_bought\\n            );\\n\\n        // burn MUSE\\n        BurnMUSE._burn(tokens_bought);\\n\\n        return true;\\n    }\\n\\n    function getTokenAddress()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address token)\\n    {\\n        return IMecenateFeedFactory(settings.factoryContract).daiToken();\\n    }\\n\\n    function getExchangeAddress()\\n        internal\\n        view\\n        override\\n        returns (address exchange)\\n    {\\n        exchange = settings.router;\\n    }\\n\\n    function _swapTokensForToken(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountIn\\n    ) internal returns (uint256 amountOut) {\\n        // Check and approve allowance\\n        uint256 allowance = IERC20(tokenIn).allowance(\\n            address(this),\\n            settings.router\\n        );\\n        if (allowance < amountIn) {\\n            IERC20(tokenIn).approve(settings.router, type(uint256).max);\\n        }\\n\\n        // Prepare parameters\\n        address recipient = address(this);\\n        uint256 deadline = block.timestamp + 60; // 15 seconds from the current block timestamp\\n\\n        // Perform the swap\\n        // Refer to the Uniswap V3 documentation for details on the params.\\n        amountOut = ISwapRouter(settings.router).exactInputSingle(\\n            ISwapRouter.ExactInputSingleParams({\\n                tokenIn: tokenIn,\\n                tokenOut: tokenOut,\\n                fee: fee,\\n                recipient: recipient,\\n                deadline: deadline,\\n                amountIn: amountIn,\\n                amountOutMinimum: 0, // you may want to set a minimum here\\n                sqrtPriceLimitX96: 0\\n            })\\n        );\\n\\n        return amountOut;\\n    }\\n}\\n\",\"keccak256\":\"0xa69462e962a3be48c3514c746d791c7a870247e8e441a2d7a11b5771ec8e0d23\"},\"contracts/modules/BurnMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\nimport \\\"../interfaces/IMUSE.sol\\\";\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\nimport \\\"./Events.sol\\\";\\n\\nabstract contract BurnMUSE is Events {\\n    function _burn(uint256 value) internal virtual returns (bool success) {\\n        IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken()).burn(\\n            value\\n        );\\n        return true;\\n    }\\n\\n    function _burnFrom(\\n        address from,\\n        uint256 value\\n    ) internal virtual returns (bool success) {\\n        IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken())\\n            .transferFrom(from, address(this), value);\\n        _burn(value);\\n        return true;\\n    }\\n\\n    function getTokenAddress() internal view virtual returns (address token) {\\n        return IMecenateFeedFactory(settings.factoryContract).museToken();\\n    }\\n\\n    function getExchangeAddress()\\n        internal\\n        view\\n        virtual\\n        returns (address exchange)\\n    {\\n        exchange = IMecenateFeedFactory(settings.factoryContract).router();\\n    }\\n}\\n\",\"keccak256\":\"0x052049c27f8e98f27fd3d237157e4700d5f5c313343d1cd734614beefa4ccfc6\"},\"contracts/modules/Creation.sol\":{\"content\":\"/**\\n * @title Creation\\n * @dev This contract is an abstract contract that inherits from Staking contract. It provides a function to create a post with the given parameters. The function requires the user to be the owner of the post and to have a stake. The post can have different durations and types. The function returns the created post.\\n */\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"./Staking.sol\\\";\\n\\nabstract contract Creation is Staking {\\n    function createPost(\\n        bytes memory encryptedHash,\\n        Structures.PostType postType,\\n        Structures.PostDuration postDuration,\\n        uint256 payment,\\n        uint256 stakeAmount,\\n        Structures.Tokens tokenId,\\n        address funder,\\n        address seller,\\n        bool useStake\\n    )\\n        external\\n        payable\\n        onlyValidTokenID(tokenId)\\n        returns (Structures.Post memory)\\n    {\\n        require(msg.sender == owner);\\n\\n        require(\\n            IMecenateUsers(settings.usersModuleContract).checkifUserExist(\\n                seller\\n            ),\\n            \\\"USER_NOT_EXIST\\\"\\n        );\\n\\n        require(\\n            validStatuses[uint8(post.postdata.settings.status)],\\n            \\\"INVALID_STATUS\\\"\\n        );\\n\\n        require(stakeAmount > 0, \\\"STAKE_AMOUNT_ZERO\\\");\\n\\n        require(payment > 0, \\\"PAYMENT_ZERO\\\");\\n\\n        uint256 stake;\\n\\n        if (useStake) {\\n            require(\\n                Deposit._getDeposit(tokenId, seller) >= stakeAmount,\\n                \\\"STAKE_INCORRECT\\\"\\n            );\\n\\n            stake = stakeAmount;\\n        } else {\\n            if (tokenId == Structures.Tokens.NaN) {\\n                require(msg.value == stakeAmount, \\\"WRONG_MSG_VALUE\\\");\\n            }\\n\\n            stake = _addStake(tokenId, seller, funder, stakeAmount);\\n        }\\n\\n        uint256 duration = postDurationToDays[uint8(postDuration)];\\n\\n        _changeStatus(Structures.PostStatus.Proposed);\\n\\n        Structures.User memory creator = IMecenateUsers(\\n            settings.usersModuleContract\\n        ).getUserMetadata(seller);\\n\\n        // Initialize the new Post struct with named arguments for clarity\\n        Structures.Post memory newPost = Structures.Post({\\n            creator: creator,\\n            postdata: Structures.PostData({\\n                settings: Structures.PostSettings({\\n                    postType: postType,\\n                    status: Structures.PostStatus.Proposed,\\n                    creationTimeStamp: block.timestamp,\\n                    endTimeStamp: 0,\\n                    duration: duration,\\n                    tokenId: tokenId\\n                }),\\n                escrow: Structures.PostEscrow({\\n                    buyer: address(0),\\n                    seller: seller,\\n                    stake: stake,\\n                    payment: payment,\\n                    punishment: 0,\\n                    penalty: 0\\n                }),\\n                data: Structures.PostEncryptedData({\\n                    encryptedData: encryptedHash,\\n                    encryptedKey: ZEROHASH,\\n                    decryptedData: ZEROHASH\\n                })\\n            })\\n        });\\n\\n        // Update storage and emit event\\n        post = newPost;\\n\\n        settings.postCount++;\\n\\n        emit Created(newPost);\\n\\n        return newPost;\\n    }\\n}\\n\",\"keccak256\":\"0x318bb81851e5d3d276f4ac7676fda917aeab85e705e7830397641a77d97d2384\",\"license\":\"MIT\"},\"contracts/modules/Data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../interfaces/IMecenateFeed.sol\\\";\\nimport \\\"../interfaces/IMecenateUsers.sol\\\";\\nimport \\\"../interfaces/IMecenateTreasury.sol\\\";\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\nimport \\\"../helpers/eas/IEAS.sol\\\";\\nimport \\\"./Version.sol\\\";\\n\\n/**\\n * @title Data\\n * @dev This contract stores data related to Mecenate posts and provides functions to interact with it.\\n */\\ncontract Data is Version {\\n    bytes internal constant ZEROHASH = \\\"0x00\\\";\\n\\n    address public owner;\\n\\n    Structures.Post public post;\\n\\n    Structures.FeedSettings internal settings;\\n\\n    mapping(uint8 => uint256) internal postDurationToDays;\\n\\n    mapping(uint8 => bool) internal validStatuses;\\n\\n    constructor(\\n        address usersModuleContract,\\n        address factoryContract,\\n        uint256 _major,\\n        uint256 _minor,\\n        uint256 _patch\\n    ) Version(_major, _minor, _patch) {\\n        settings.punishmentRatio = 100000000000000000; // Constant value\\n        settings.postCount = 0; // Initialize postCount to 0\\n        settings.usersModuleContract = usersModuleContract;\\n        settings.factoryContract = msg.sender;\\n        settings.router = IMecenateFeedFactory(factoryContract).router();\\n        settings.version = _version();\\n\\n        post.postdata.settings.status = Structures.PostStatus.Waiting;\\n\\n        postDurationToDays[uint8(Structures.PostDuration.OneDay)] = 1 days;\\n        postDurationToDays[uint8(Structures.PostDuration.ThreeDays)] = 3 days;\\n        postDurationToDays[uint8(Structures.PostDuration.OneWeek)] = 7 days;\\n        postDurationToDays[uint8(Structures.PostDuration.TwoWeeks)] = 14 days;\\n        postDurationToDays[uint8(Structures.PostDuration.OneMonth)] = 30 days;\\n\\n        validStatuses[uint8(Structures.PostStatus.Waiting)] = true;\\n    }\\n\\n    function _changeStatus(Structures.PostStatus newStatus) internal {\\n        validStatuses[uint8(post.postdata.settings.status)] = false;\\n        validStatuses[uint8(newStatus)] = true;\\n        post.postdata.settings.status = newStatus;\\n    }\\n\\n    function getStatus() external view returns (Structures.PostStatus) {\\n        return post.postdata.settings.status;\\n    }\\n\\n    function getTokenId() external view returns (Structures.Tokens) {\\n        return post.postdata.settings.tokenId;\\n    }\\n\\n    function getTokenIdAddress() public view returns (address) {\\n        if (post.postdata.settings.tokenId == Structures.Tokens.MUSE) {\\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\\n        } else if (post.postdata.settings.tokenId == Structures.Tokens.DAI) {\\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    function _checkToken(Structures.Tokens _token) internal view {\\n        require(_token == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n    }\\n\\n    function getPaymentRequested() external view returns (uint256) {\\n        return post.postdata.escrow.payment;\\n    }\\n\\n    function getStakeRequested() external view returns (uint256) {\\n        return post.postdata.escrow.stake;\\n    }\\n\\n    function postCount() external view returns (uint256) {\\n        return settings.postCount;\\n    }\\n\\n    function getEncryptedPost() external view returns (bytes memory) {\\n        return post.postdata.data.encryptedData;\\n    }\\n\\n    function getPost() external view returns (Structures.Post memory) {\\n        return post;\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xb09086cdcab6dc2790f56df6a5808c7a48794c5519ea122f927c0a0684d1f2c6\",\"license\":\"MIT\"},\"contracts/modules/Deposit.sol\":{\"content\":\"pragma solidity 0.8.19;\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./TokenManager.sol\\\";\\n\\ncontract Deposit {\\n    using SafeMath for uint256;\\n\\n    mapping(uint256 => mapping(address => uint256)) private _deposit;\\n\\n    event DepositIncreased(\\n        Structures.Tokens tokenID,\\n        address user,\\n        uint256 amount,\\n        uint256 newDeposit\\n    );\\n    event DepositDecreased(\\n        Structures.Tokens tokenID,\\n        address user,\\n        uint256 amount,\\n        uint256 newDeposit\\n    );\\n\\n    function _increaseDeposit(\\n        Structures.Tokens tokenID,\\n        address user,\\n        uint256 amountToAdd\\n    ) internal returns (uint256 newDeposit) {\\n        // calculate new deposit amount\\n        newDeposit = _deposit[uint256(tokenID)][user].add(amountToAdd);\\n\\n        // set new stake to storage\\n        _deposit[uint256(tokenID)][user] = newDeposit;\\n\\n        // emit event\\n        emit DepositIncreased(tokenID, user, amountToAdd, newDeposit);\\n\\n        // return\\n        return newDeposit;\\n    }\\n\\n    function _decreaseDeposit(\\n        Structures.Tokens tokenID,\\n        address user,\\n        uint256 amountToRemove\\n    ) internal returns (uint256 newDeposit) {\\n        // get current deposit\\n        uint256 currentDeposit = _deposit[uint256(tokenID)][user];\\n\\n        // check if sufficient deposit\\n        require(currentDeposit >= amountToRemove, \\\"INSUFFICIENT_DEPOSIT\\\");\\n\\n        // calculate new deposit amount\\n        newDeposit = currentDeposit.sub(amountToRemove);\\n\\n        // set new stake to storage\\n        _deposit[uint256(tokenID)][user] = newDeposit;\\n\\n        // emit event\\n        emit DepositDecreased(tokenID, user, amountToRemove, newDeposit);\\n\\n        // return\\n        return newDeposit;\\n    }\\n\\n    function _clearDeposit(\\n        Structures.Tokens tokenID,\\n        address user\\n    ) internal returns (uint256 amountRemoved) {\\n        // get current deposit\\n        uint256 currentDeposit = _deposit[uint256(tokenID)][user];\\n\\n        // remove deposit\\n        _decreaseDeposit(tokenID, user, currentDeposit);\\n\\n        // return\\n        return currentDeposit;\\n    }\\n\\n    function _getDeposit(\\n        Structures.Tokens tokenID,\\n        address user\\n    ) internal view returns (uint256 deposit) {\\n        return _deposit[uint256(tokenID)][user];\\n    }\\n}\\n\",\"keccak256\":\"0xbde50573d2e5a22daecdfdb1d457c4f50b7ea16e18a03eac04013ce10f269d36\"},\"contracts/modules/Events.sol\":{\"content\":\"/**\\r\\n * @title Events\\r\\n * @dev This abstract contract defines the events related to the Mecenate platform's post lifecycle.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./Data.sol\\\";\\r\\n\\r\\nabstract contract Events is Data {\\r\\n    event Created(Structures.Post post);\\r\\n    event Accepted(Structures.Post post);\\r\\n    event Valid(Structures.Post post);\\r\\n    event Invalid(Structures.Post post);\\r\\n    event Finalized(Structures.Post post);\\r\\n    event MadePublic(Structures.Post post);\\r\\n    event Renounced(Structures.Post post);\\r\\n}\\r\\n\",\"keccak256\":\"0x3aeaf067b1f9010a2456df46fb54d4727b3a24082b1446ac9266dbcdd8c838f6\"},\"contracts/modules/Staking.sol\":{\"content\":\"/**\\n * @title Staking\\n * @dev This contract handles staking functionality for the Mecenate platform.\\n * It allows users to add, take, and burn stakes, and provides functions to get the total staked amount and individual stake amounts.\\n * It also includes a modifier to check the status of a post before allowing stake-related transactions.\\n */\\npragma solidity 0.8.19;\\n\\nimport \\\"./Deposit.sol\\\";\\nimport \\\"./Events.sol\\\";\\n\\nabstract contract Staking is Events, Deposit, TokenManager {\\n    using SafeMath for uint256;\\n\\n    event StakeBurned(address staker, uint256 amount);\\n\\n    event StakeTaken(address staker, uint256 amount, Structures.Tokens tokenId);\\n\\n    event StakeAdded(address staker, uint256 amount, Structures.Tokens tokenId);\\n\\n    function _addStake(\\n        Structures.Tokens tokenId,\\n        address staker,\\n        address funder,\\n        uint256 amountToAdd\\n    ) internal returns (uint256 newStake) {\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\n\\n        require(\\n            currentStatus != Structures.PostStatus.Accepted &&\\n                currentStatus != Structures.PostStatus.Submitted,\\n            \\\"INVALID_STATUS\\\"\\n        );\\n\\n        require(amountToAdd > 0, \\\"STAKE_REQUIRED\\\");\\n\\n        if (tokenId != Structures.Tokens.NaN) {\\n            _transferFrom(tokenId, funder, address(this), amountToAdd);\\n        }\\n\\n        newStake = Deposit._increaseDeposit(tokenId, staker, amountToAdd);\\n\\n        emit StakeAdded(staker, amountToAdd, tokenId);\\n\\n        return newStake;\\n    }\\n\\n    function _takeStake(\\n        Structures.Tokens tokenId,\\n        address staker,\\n        address receiver,\\n        uint256 amountToTake\\n    ) internal returns (uint256 newStake) {\\n        // Memorizza lo status del post in una variabile per evitare accessi ridondanti allo storage\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\n\\n        // Verifica che lo status del post sia valido per procedere\\n        require(\\n            currentStatus != Structures.PostStatus.Accepted &&\\n                currentStatus != Structures.PostStatus.Submitted,\\n            \\\"INVALID_STATUS\\\"\\n        );\\n\\n        // Effettua il trasferimento del token o dell'Ether\\n        if (tokenId == Structures.Tokens.NaN) {\\n            //(bool result, ) = payable(_to).call{value: amountToTake}(\\\"\\\");\\n            //require(result, \\\"CALL_FAILED\\\");\\n            payable(receiver).transfer(amountToTake);\\n        } else {\\n            _transfer(tokenId, receiver, amountToTake);\\n        }\\n\\n        // Aggiorna il deposito e emette un evento\\n        newStake = Deposit._decreaseDeposit(tokenId, staker, amountToTake);\\n        emit StakeTaken(staker, amountToTake, tokenId);\\n\\n        return newStake;\\n    }\\n\\n    function _takeFullStake(\\n        Structures.Tokens tokenId,\\n        address staker,\\n        address receiver\\n    ) internal returns (uint256 amountTaken) {\\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, staker);\\n\\n        uint256 newStake = _takeStake(\\n            tokenId,\\n            staker,\\n            receiver,\\n            currentDeposit\\n        );\\n\\n        return newStake;\\n    }\\n\\n    function _burnStake(\\n        Structures.Tokens tokenId,\\n        address staker,\\n        uint256 amountToBurn\\n    ) internal returns (uint256 newStake) {\\n        uint256 newDeposit = Deposit._decreaseDeposit(\\n            tokenId,\\n            staker,\\n            amountToBurn\\n        );\\n\\n        bool burnEnabled = IMecenateFeedFactory(settings.factoryContract)\\n            .burnEnabled();\\n\\n        address treasuryContract = IMecenateFeedFactory(\\n            settings.factoryContract\\n        ).treasuryContract();\\n\\n        if (burnEnabled == false) {\\n            if (tokenId == Structures.Tokens.NaN) {\\n                (bool result, ) = payable(treasuryContract).call{\\n                    value: amountToBurn\\n                }(\\\"\\\");\\n                require(result, \\\"CALL_FAILED\\\");\\n            } else {\\n                _transfer(tokenId, treasuryContract, amountToBurn);\\n            }\\n        } else {\\n            if (tokenId == Structures.Tokens.DAI) {\\n                _burnDai(amountToBurn);\\n            } else if (tokenId == Structures.Tokens.MUSE) {\\n                _burn(amountToBurn);\\n            } else if (tokenId == Structures.Tokens.NaN) {\\n                _burnWeth(amountToBurn);\\n            }\\n        }\\n\\n        emit StakeBurned(staker, amountToBurn);\\n\\n        return newDeposit;\\n    }\\n\\n    function _burnFullStake(\\n        Structures.Tokens tokenId,\\n        address staker\\n    ) internal returns (uint256 amountBurned) {\\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, staker);\\n\\n        _burnStake(tokenId, staker, currentDeposit);\\n\\n        return currentDeposit;\\n    }\\n\\n    function getStake(\\n        Structures.Tokens tokenId,\\n        address staker\\n    ) external view returns (uint256 amount) {\\n        // get deposit\\n        amount = Deposit._getDeposit(tokenId, staker);\\n        // explicit return\\n        return amount;\\n    }\\n\\n    function getTotalStaked() external view returns (uint256) {\\n        uint256 amountSeller = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            post.postdata.escrow.seller\\n        );\\n\\n        uint256 amountBuyer = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            post.postdata.escrow.buyer\\n        );\\n\\n        return (amountSeller + amountBuyer);\\n    }\\n\\n    function addStake(\\n        Structures.Tokens tokenId,\\n        address _funder,\\n        uint256 amountToAdd\\n    ) external payable returns (uint256) {\\n        require(tokenId == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n\\n        // Check if the encryptedVaultId matches with either the buyer or the seller\\n        require(\\n            msg.sender == post.postdata.escrow.buyer ||\\n                msg.sender == post.postdata.escrow.seller,\\n            \\\"WRONG_MSGSENDER\\\"\\n        );\\n\\n        // Determine the amount to add based on the role (buyer or seller)\\n        uint256 actualAmountToAdd = (msg.sender == post.postdata.escrow.seller)\\n            ? msg.value\\n            : amountToAdd;\\n\\n        // Update the stake\\n        uint256 newStake = _addStake(\\n            tokenId,\\n            msg.sender,\\n            _funder,\\n            actualAmountToAdd\\n        );\\n\\n        // Update the corresponding escrow value based on the role\\n        if (msg.sender == post.postdata.escrow.buyer) {\\n            post.postdata.escrow.payment = newStake;\\n        } else {\\n            post.postdata.escrow.stake = newStake;\\n        }\\n\\n        return newStake;\\n    }\\n\\n    function takeStake(\\n        Structures.Tokens tokenId,\\n        address receiver,\\n        uint256 amountToTake\\n    ) external returns (uint256) {\\n        require(tokenId == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n\\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, msg.sender);\\n\\n        require(currentDeposit >= amountToTake, \\\"NOT_ENOUGH_STAKE\\\");\\n\\n        uint256 newBalance = _takeStake(\\n            tokenId,\\n            msg.sender,\\n            receiver,\\n            amountToTake\\n        );\\n\\n        if (msg.sender == post.postdata.escrow.buyer) {\\n            post.postdata.escrow.payment = newBalance;\\n        } else {\\n            post.postdata.escrow.stake = newBalance;\\n        }\\n\\n        return newBalance;\\n    }\\n\\n    function takeFullStake(\\n        Structures.Tokens tokenId,\\n        address receiver\\n    ) external returns (uint256) {\\n        require(tokenId == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n\\n        uint256 newBalance = _takeFullStake(tokenId, msg.sender, receiver);\\n\\n        if (msg.sender == post.postdata.escrow.buyer) {\\n            post.postdata.escrow.payment = newBalance;\\n        } else if (msg.sender == post.postdata.escrow.seller) {\\n            post.postdata.escrow.stake = newBalance;\\n        }\\n\\n        return newBalance;\\n    }\\n\\n    function getSellerStake() external view returns (uint256 amount) {\\n        // get deposit\\n        amount = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            post.postdata.escrow.seller\\n        );\\n        // explicit return\\n        return amount;\\n    }\\n\\n    function getBuyerStake() external view returns (uint256 amount) {\\n        // get deposit\\n        amount = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            post.postdata.escrow.buyer\\n        );\\n        // explicit return\\n        return amount;\\n    }\\n}\\n\",\"keccak256\":\"0x94556a37278a2684b61c9734e71d523d215af864486d60b0562f52d5437308dc\"},\"contracts/modules/TokenManager.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"./BurnDAI.sol\\\";\\n\\nabstract contract TokenManager is BurnDAI {\\n    function _getTokenAddress(\\n        Structures.Tokens tokenID\\n    ) internal view returns (address) {\\n        if (tokenID == Structures.Tokens.DAI)\\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\\n        if (tokenID == Structures.Tokens.MUSE)\\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\\n        return address(0);\\n    }\\n\\n    function _checkAllowance(\\n        Structures.Tokens tokenID,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal view {\\n        address tokenAddress = _getTokenAddress(tokenID);\\n        require(\\n            IERC20(tokenAddress).allowance(from, to) >= value,\\n            \\\"INSUFFICIENT_ALLOWANCE\\\"\\n        );\\n    }\\n\\n    modifier onlyValidTokenID(Structures.Tokens tokenID) {\\n        require(\\n            tokenID == Structures.Tokens.MUSE ||\\n                tokenID == Structures.Tokens.DAI ||\\n                tokenID == Structures.Tokens.NaN,\\n            \\\"WRONG_TOKEN\\\"\\n        );\\n        _;\\n    }\\n\\n    function isValidTokenID(\\n        Structures.Tokens tokenID\\n    ) internal pure returns (bool validity) {\\n        return\\n            tokenID == Structures.Tokens.MUSE ||\\n            tokenID == Structures.Tokens.DAI;\\n    }\\n\\n    function _transfer(\\n        Structures.Tokens tokenID,\\n        address to,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        require(\\n            IERC20(_getTokenAddress(tokenID)).transfer(to, value),\\n            \\\"TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function _transferFrom(\\n        Structures.Tokens tokenID,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        address tokenAddress = _getTokenAddress(tokenID);\\n        _checkAllowance(tokenID, from, to, value);\\n        require(\\n            IERC20(tokenAddress).transferFrom(from, to, value),\\n            \\\"TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function _burn(\\n        Structures.Tokens tokenID,\\n        address _receiver,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) returns (bool success) {\\n        bool burnEnabled = IMecenateFeedFactory(settings.factoryContract)\\n            .burnEnabled();\\n\\n        if (burnEnabled == false) {\\n            if (tokenID == Structures.Tokens.NaN) {\\n                (bool result, ) = payable(_receiver).call{value: value}(\\\"\\\");\\n                require(result, \\\"CALL_FAILED\\\");\\n            } else {\\n                TokenManager._transfer(tokenID, _receiver, value);\\n            }\\n        } else {\\n            if (tokenID == Structures.Tokens.DAI) {\\n                _burnDai(value);\\n            } else if (tokenID == Structures.Tokens.MUSE) {\\n                _burn(value);\\n            } else if (tokenID == Structures.Tokens.NaN) {\\n                _burnWeth(value);\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    function _burnFrom(\\n        Structures.Tokens tokenID,\\n        address from,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        address treasury = IMecenateFeedFactory(settings.factoryContract)\\n            .treasuryContract();\\n\\n        if (tokenID == Structures.Tokens.DAI) {\\n            IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\n                .transferFrom(from, treasury, value);\\n        } else if (tokenID == Structures.Tokens.MUSE) {\\n            BurnMUSE._burnFrom(from, value);\\n        }\\n    }\\n\\n    function _approve(\\n        Structures.Tokens tokenID,\\n        address spender,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        if (tokenID == Structures.Tokens.DAI) {\\n            require(\\n                IERC20(\\n                    IMecenateFeedFactory(settings.factoryContract).daiToken()\\n                ).approve(spender, value),\\n                \\\"APPROVE_FAILED\\\"\\n            );\\n        } else if (tokenID == Structures.Tokens.MUSE) {\\n            uint256 currentAllowance = IMUSE(\\n                IMecenateFeedFactory(settings.factoryContract).museToken()\\n            ).allowance(msg.sender, spender);\\n\\n            uint256 newAllowance = currentAllowance + value;\\n            require(\\n                IMUSE(IMecenateFeedFactory(settings.factoryContract).daiToken())\\n                    .increaseAllowance(spender, newAllowance),\\n                \\\"APPROVE_FAILED\\\"\\n            );\\n        }\\n    }\\n\\n    function totalSupply(\\n        Structures.Tokens tokenID\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).totalSupply();\\n    }\\n\\n    function balanceOf(\\n        Structures.Tokens tokenID,\\n        address who\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).balanceOf(who);\\n    }\\n\\n    function allowance(\\n        Structures.Tokens tokenID,\\n        address owner,\\n        address spender\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).allowance(owner, spender);\\n    }\\n}\\n\",\"keccak256\":\"0x8eded6283ea4effbe4861c36f73afaace086765ac8d26ef695ac8855ed15e8b1\"},\"contracts/modules/Version.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/// @title Semver\\n/// @notice A simple contract for managing contract versions.\\nabstract contract Version {\\n    // Contract's major version number.\\n    uint256 private immutable _major;\\n\\n    // Contract's minor version number.\\n    uint256 private immutable _minor;\\n\\n    // Contract's patch version number.\\n    uint256 private immutable _path;\\n\\n    /// @dev Create a new Semver instance.\\n    /// @param major Major version number.\\n    /// @param minor Minor version number.\\n    /// @param patch Patch version number.\\n    constructor(uint256 major, uint256 minor, uint256 patch) {\\n        _major = major;\\n        _minor = minor;\\n        _path = patch;\\n    }\\n\\n    /// @notice Returns the full semver contract version.\\n    /// @return Semver contract version as a string.\\n    function version() external view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    Strings.toString(_major),\\n                    \\\".\\\",\\n                    Strings.toString(_minor),\\n                    \\\".\\\",\\n                    Strings.toString(_path)\\n                )\\n            );\\n    }\\n\\n    function _version() internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    Strings.toString(_major),\\n                    \\\".\\\",\\n                    Strings.toString(_minor),\\n                    \\\".\\\",\\n                    Strings.toString(_path)\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xa99614da4eb0014c2756685061352b80325a07e4cb14f7c704ec2a62e182688f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3523,"contract":"contracts/modules/Creation.sol:Creation","label":"owner","offset":0,"slot":"0","type":"t_address"},{"astId":3526,"contract":"contracts/modules/Creation.sol:Creation","label":"post","offset":0,"slot":"1","type":"t_struct(Post)2574_storage"},{"astId":3529,"contract":"contracts/modules/Creation.sol:Creation","label":"settings","offset":0,"slot":"18","type":"t_struct(FeedSettings)2550_storage"},{"astId":3533,"contract":"contracts/modules/Creation.sol:Creation","label":"postDurationToDays","offset":0,"slot":"24","type":"t_mapping(t_uint8,t_uint256)"},{"astId":3537,"contract":"contracts/modules/Creation.sol:Creation","label":"validStatuses","offset":0,"slot":"25","type":"t_mapping(t_uint8,t_bool)"},{"astId":3871,"contract":"contracts/modules/Creation.sol:Creation","label":"_deposit","offset":0,"slot":"26","type":"t_mapping(t_uint256,t_mapping(t_address,t_uint256))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_enum(PostStatus)2521":{"encoding":"inplace","label":"enum Structures.PostStatus","numberOfBytes":"1"},"t_enum(PostType)2531":{"encoding":"inplace","label":"enum Structures.PostType","numberOfBytes":"1"},"t_enum(Tokens)2525":{"encoding":"inplace","label":"enum Structures.Tokens","numberOfBytes":"1"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_uint8,t_bool)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint8,t_uint256)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(FeedSettings)2550_storage":{"encoding":"inplace","label":"struct Structures.FeedSettings","members":[{"astId":2539,"contract":"contracts/modules/Creation.sol:Creation","label":"punishmentRatio","offset":0,"slot":"0","type":"t_uint256"},{"astId":2541,"contract":"contracts/modules/Creation.sol:Creation","label":"postCount","offset":0,"slot":"1","type":"t_uint256"},{"astId":2543,"contract":"contracts/modules/Creation.sol:Creation","label":"usersModuleContract","offset":0,"slot":"2","type":"t_address"},{"astId":2545,"contract":"contracts/modules/Creation.sol:Creation","label":"factoryContract","offset":0,"slot":"3","type":"t_address"},{"astId":2547,"contract":"contracts/modules/Creation.sol:Creation","label":"router","offset":0,"slot":"4","type":"t_address"},{"astId":2549,"contract":"contracts/modules/Creation.sol:Creation","label":"version","offset":0,"slot":"5","type":"t_string_storage"}],"numberOfBytes":"192"},"t_struct(Post)2574_storage":{"encoding":"inplace","label":"struct Structures.Post","members":[{"astId":2570,"contract":"contracts/modules/Creation.sol:Creation","label":"creator","offset":0,"slot":"0","type":"t_struct(User)2627_storage"},{"astId":2573,"contract":"contracts/modules/Creation.sol:Creation","label":"postdata","offset":0,"slot":"3","type":"t_struct(PostData)2584_storage"}],"numberOfBytes":"544"},"t_struct(PostData)2584_storage":{"encoding":"inplace","label":"struct Structures.PostData","members":[{"astId":2577,"contract":"contracts/modules/Creation.sol:Creation","label":"settings","offset":0,"slot":"0","type":"t_struct(PostSettings)2607_storage"},{"astId":2580,"contract":"contracts/modules/Creation.sol:Creation","label":"escrow","offset":0,"slot":"5","type":"t_struct(PostEscrow)2620_storage"},{"astId":2583,"contract":"contracts/modules/Creation.sol:Creation","label":"data","offset":0,"slot":"11","type":"t_struct(PostEncryptedData)2591_storage"}],"numberOfBytes":"448"},"t_struct(PostEncryptedData)2591_storage":{"encoding":"inplace","label":"struct Structures.PostEncryptedData","members":[{"astId":2586,"contract":"contracts/modules/Creation.sol:Creation","label":"encryptedData","offset":0,"slot":"0","type":"t_bytes_storage"},{"astId":2588,"contract":"contracts/modules/Creation.sol:Creation","label":"encryptedKey","offset":0,"slot":"1","type":"t_bytes_storage"},{"astId":2590,"contract":"contracts/modules/Creation.sol:Creation","label":"decryptedData","offset":0,"slot":"2","type":"t_bytes_storage"}],"numberOfBytes":"96"},"t_struct(PostEscrow)2620_storage":{"encoding":"inplace","label":"struct Structures.PostEscrow","members":[{"astId":2609,"contract":"contracts/modules/Creation.sol:Creation","label":"buyer","offset":0,"slot":"0","type":"t_address"},{"astId":2611,"contract":"contracts/modules/Creation.sol:Creation","label":"seller","offset":0,"slot":"1","type":"t_address"},{"astId":2613,"contract":"contracts/modules/Creation.sol:Creation","label":"stake","offset":0,"slot":"2","type":"t_uint256"},{"astId":2615,"contract":"contracts/modules/Creation.sol:Creation","label":"payment","offset":0,"slot":"3","type":"t_uint256"},{"astId":2617,"contract":"contracts/modules/Creation.sol:Creation","label":"punishment","offset":0,"slot":"4","type":"t_uint256"},{"astId":2619,"contract":"contracts/modules/Creation.sol:Creation","label":"penalty","offset":0,"slot":"5","type":"t_uint256"}],"numberOfBytes":"192"},"t_struct(PostSettings)2607_storage":{"encoding":"inplace","label":"struct Structures.PostSettings","members":[{"astId":2594,"contract":"contracts/modules/Creation.sol:Creation","label":"status","offset":0,"slot":"0","type":"t_enum(PostStatus)2521"},{"astId":2597,"contract":"contracts/modules/Creation.sol:Creation","label":"postType","offset":1,"slot":"0","type":"t_enum(PostType)2531"},{"astId":2599,"contract":"contracts/modules/Creation.sol:Creation","label":"creationTimeStamp","offset":0,"slot":"1","type":"t_uint256"},{"astId":2601,"contract":"contracts/modules/Creation.sol:Creation","label":"endTimeStamp","offset":0,"slot":"2","type":"t_uint256"},{"astId":2603,"contract":"contracts/modules/Creation.sol:Creation","label":"duration","offset":0,"slot":"3","type":"t_uint256"},{"astId":2606,"contract":"contracts/modules/Creation.sol:Creation","label":"tokenId","offset":0,"slot":"4","type":"t_enum(Tokens)2525"}],"numberOfBytes":"160"},"t_struct(User)2627_storage":{"encoding":"inplace","label":"struct Structures.User","members":[{"astId":2622,"contract":"contracts/modules/Creation.sol:Creation","label":"evmAddress","offset":0,"slot":"0","type":"t_address"},{"astId":2624,"contract":"contracts/modules/Creation.sol:Creation","label":"sismoVaultId","offset":0,"slot":"1","type":"t_bytes_storage"},{"astId":2626,"contract":"contracts/modules/Creation.sol:Creation","label":"publicKey","offset":0,"slot":"2","type":"t_bytes_storage"}],"numberOfBytes":"96"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{"version()":{"notice":"Returns the full semver contract version."}},"version":1}}},"contracts/modules/Data.sol":{"Data":{"abi":[{"inputs":[{"internalType":"address","name":"usersModuleContract","type":"address"},{"internalType":"address","name":"factoryContract","type":"address"},{"internalType":"uint256","name":"_major","type":"uint256"},{"internalType":"uint256","name":"_minor","type":"uint256"},{"internalType":"uint256","name":"_patch","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"getEncryptedPost","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPaymentRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPost","outputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"internalType":"struct Structures.Post","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStakeRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStatus","outputs":[{"internalType":"enum Structures.PostStatus","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenId","outputs":[{"internalType":"enum Structures.Tokens","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenIdAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"post","outputs":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"postCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"details":"This contract stores data related to Mecenate posts and provides functions to interact with it.","kind":"dev","methods":{"version()":{"returns":{"_0":"Semver contract version as a string."}}},"title":"Data","version":1},"evm":{"bytecode":{"functionDebugData":{"abi_decode_address_fromMemory":{"entryPoint":969,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_string":{"entryPoint":990,"id":null,"parameterSlots":2,"returnSlots":1},"array_allocation_size_string":{"entryPoint":1035,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":911,"id":null,"parameterSlots":2,"returnSlots":0},"fun_toString":{"entryPoint":1063,"id":136,"parameterSlots":1,"returnSlots":1}},"generatedSources":[],"linkReferences":{},"object":"60e06040818152346200038a5760a0826200150280380380916200002482856200038f565b8339810103126200038a576200003a82620003c9565b602062000049818501620003c9565b938381015190608060608201519101519160805260a05260c05267016345785d8a000060125560008060135560018060a01b03928360018060a01b03199116816014541617601455338160155416176015558383865180986303e21fa960e61b8252816004988992165afa8015620003805783906200033d575b6200010f975016906016541617601655620000e060805162000427565b91620000ee60a05162000427565b92620001346200010060c05162000427565b875198899385850190620003de565b601760f91b808252620001296001988980940190620003de565b9081520190620003de565b0362000149601f19918281018952886200038f565b8651906001600160401b0382116200032a57601754978589811c991680156200031f575b848a10146200030c5788601f899a9997989911620002ae575b508391601f8411600114620002405750601993929185918362000234575b5050600019600383901b1c191690861b176017555b60ff19958681541681558380526018825262015180858520558584526203f480858520556002845262093a8085852055600384526212750085852055835262278d008484205582805252209182541617905551610f5a9081620005a882396080518161033b015260a05181610367015260c051816103960152f35b015190503880620001a4565b601786528486209084169695949388939092865b8981106200029357508360199798991062000279575b505050811b01601755620001b9565b015160001960f88460031b161c191690553880806200026a565b8183015184558c98508a959093019291860191860162000254565b9091929394955060178652848620601f850160051c81019186861062000301575b8a97969594939291601f8a920160051c01915b828110620002f257505062000186565b8781558b9850899101620002e2565b9091508190620002cf565b634e487b7160e01b855260228752602485fd5b98607f16986200016d565b634e487b7160e01b845260418652602484fd5b508387813d831162000378575b6200035681836200038f565b8101031262000374576200036e6200010f97620003c9565b620000c3565b8280fd5b503d6200034a565b86513d85823e3d90fd5b600080fd5b601f909101601f19168101906001600160401b03821190821017620003b357604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036200038a57565b9081519160005b838110620003f7575050016000815290565b8060208092840101518185015201620003e5565b6001600160401b038111620003b357601f01601f191660200190565b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008082101562000598575b506d04ee2d6d415b85acef81000000008083101562000588575b50662386f26fc100008083101562000578575b506305f5e1008083101562000568575b506127108083101562000558575b50606482101562000547575b600a809210156200053c575b60019081602181860195620004c9876200040b565b96620004d960405198896200038f565b808852620004ea601f19916200040b565b01366020890137860101905b62000503575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a8353049182156200053657919082620004f6565b620004fc565b9160010191620004b4565b9190606460029104910191620004a8565b600491939204910191386200049c565b600891939204910191386200048e565b601091939204910191386200047e565b602091939204910191386200046b565b6040935081049150386200045156fe60806040818152600436101561001f575b5050361561001d57600080fd5b005b600091823560e01c908163010a38f5146104ab5750806305c1f5021461046357806317906c2e146104455780634e69d5601461041d57806354fd4d50146103235780635ad4e170146102f6578063729e2eb1146101e05780638c6838ba146101075780638da5cb5b146100e0578063d24e0c87146100c25763faeb5e170361001057346100be57816003193601126100be57602090600b549051908152f35b5080fd5b50346100be57816003193601126100be57602090600c549051908152f35b50346100be57816003193601126100be57905490516001600160a01b039091168152602090f35b5090346101dd57806003193601126101dd576101d98251610127816104ee565b83519261013384610520565b83526060906020938285820152828682015281528385519161015483610520565b61015c610d6e565b8352610166610d6e565b82840152865161017581610520565b84815284838201528488820152878401520152836101c6815194610198866104ee565b6101a061057a565b86526101aa610771565b9381870194855283519788978389525192880152860190610b3f565b915190601f198584030190850152610b8b565b0390f35b80fd5b50346100be57816003193601126100be578051908290600f5491600183811c908085169687156102ec575b60209586841089146102d857868899858a98999a5291826000146102b1575050600114610255575b5050506101d99291610246910385610558565b51928284938452830190610b1a565b9190869350600f83527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8025b82841061029957505050820101816102466101d9610233565b8054848a018601528895508794909301928101610280565b60ff19168782015293151560051b8601909301935084925061024691506101d99050610233565b634e487b7160e01b82526022600452602482fd5b91607f169161020b565b50346100be57816003193601126100be57602090610312610ca6565b90516001600160a01b039091168152f35b5090346101dd57806003193601126101dd575061035f7f0000000000000000000000000000000000000000000000000000000000000000610dbc565b6101d961038b7f0000000000000000000000000000000000000000000000000000000000000000610dbc565b9261024660226103ba7f0000000000000000000000000000000000000000000000000000000000000000610dbc565b95835196879187516103d48160209a8b8088019101610af7565b830190601760f91b91828a8201526103f5825180938c602185019101610af7565b0190602182015261040e825180938a8785019101610af7565b01036002810187520185610558565b50346100be57816003193601126100be5760209061044360ff6004541691518092610b7e565bf35b50346100be57816003193601126100be576020906013549051908152f35b5090346101dd57806003193601126101dd575061047e61057a565b906101d961048a610771565b61049d8351948486958652850190610b3f565b908382036020850152610b8b565b8390346100be57816003193601126100be578061044360209260ff600854165b9060038210156104d85752565b634e487b7160e01b600052602160045260246000fd5b6040810190811067ffffffffffffffff82111761050a57604052565b634e487b7160e01b600052604160045260246000fd5b6060810190811067ffffffffffffffff82111761050a57604052565b60c0810190811067ffffffffffffffff82111761050a57604052565b90601f8019910116810190811067ffffffffffffffff82111761050a57604052565b6040519061058782610520565b600180546001600160a01b03168352604051600254808316928592909180831c906000908615610767575b602096878410811461075357838552849291889082156107365750506001146106d8575b6105e292500382610558565b83830152604051926000916003549081811c9181811680156106ce575b84841081146106ba57838852879594939291811561069b5750600114610636575b50505060409291610632910384610558565b0152565b909493925060036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b946000915b818310610683575093945091925090820101816106326040610620565b86548884018501529586019587945091830191610666565b60ff1916848701525050151560051b8301019050816106326040610620565b634e487b7160e01b86526022600452602486fd5b92607f16926105ff565b5050600260005281857f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace856000915b85831061071d5750506105e293508201016105d6565b8091929450548385880101520191018690858593610707565b60ff1916848201526105e294151560051b84010191506105d69050565b634e487b7160e01b83526022600452602483fd5b91607f16916105b2565b604090815161077f81610520565b809280519161078d8361053c565b6004805460ff81166008811015610acd57855260081c60ff16936005851015610ae25760209485820152600554848201526006546060820152600754608082015260ff600854166003811015610acd5760a0820152825282516107ef8161053c565b6009546001600160a01b039081168252600a541685820152600b5484820152600c546060820152600d546080820152600e5460a08201528285015282519361083685610520565b8351600090600f5460019281841c918481168015610ac3575b8684108114610a2b5783855284929187908215610aa6575050600114610a48575b61087c92500382610558565b8652845160006010549081841c918481168015610a3e575b8684108114610a2b5783855284929187908215610a0e5750506001146109b0575b6108c192500382610558565b8287015284519260009160115480821c928282169081156109a6575b86851082146109935750838752869493929181156109735750600114610914575b505061090c92500382610558565b828401520152565b9093915060116000527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c68936000915b81831061095b57505061090c935082010138806108fe565b85548784018501529485019486945091830191610943565b91505061090c94925060ff191682840152151560051b82010138806108fe565b634e487b7160e01b865260229052602485fd5b93607f16936108dd565b5050601060005281847f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae672856000915b8583106109f55750506108c193508201016108b5565b80919294505483858801015201910185908585936109df565b60ff1916848201526108c194151560051b84010191506108b59050565b634e487b7160e01b835260228852602483fd5b92607f1692610894565b5050600f60005281847f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802856000915b858310610a8d57505061087c9350820101610870565b8091929450548385880101520191018590858593610a77565b60ff19168482015261087c94151560051b84010191506108709050565b92607f169261084f565b602183634e487b7160e01b6000525260246000fd5b602182634e487b7160e01b6000525260246000fd5b60005b838110610b0a5750506000910152565b8181015183820152602001610afa565b90602091610b3381518092818552858086019101610af7565b601f01601f1916010190565b610b7b9160018060a01b0382511681526040610b6a6020840151606060208501526060840190610b1a565b920151906040818403910152610b1a565b90565b9060088210156104d85752565b90815191610b9a828451610b7e565b60208301519060058210156104d857610be260a0610b7b95604094602087015284810151858701526060810151606087015260808101516080870152015160a08501906104cb565b60a06020820151600180831b038082511660c087015260208201511660e086015283810151610100860152606081015161012086015260808101516101408601520151610160840152015190610c4e6101a0806101808401526060845191840152610200830190610b1a565b906101e06040610c7260208601519461019f199586868303016101c0870152610b1a565b9401519282850301910152610b1a565b90816020910312610ca157516001600160a01b0381168103610ca15790565b600080fd5b60ff6008541660038110156104d85760018103610d2a575060155460405163f77800e560e01b815290602090829060049082906001600160a01b03165afa908115610d1e57600091610cf6575090565b610b7b915060203d8111610d17575b610d0f8183610558565b810190610c82565b503d610d05565b6040513d6000823e3d90fd5b600203610d6957601554604051635f117aa360e11b815290602090829060049082906001600160a01b03165afa908115610d1e57600091610cf6575090565b600090565b60405190610d7b8261053c565b8160a06000918281528260208201528260408201528260608201528260808201520152565b67ffffffffffffffff811161050a57601f01601f191660200190565b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000080821015610f16575b506d04ee2d6d415b85acef810000000080831015610f07575b50662386f26fc1000080831015610ef8575b506305f5e10080831015610ee9575b5061271080831015610eda575b506064821015610eca575b600a80921015610ec0575b60019081602181860195610e5587610da0565b96610e636040519889610558565b808852610e72601f1991610da0565b01366020890137860101905b610e8a575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a835304918215610ebb57919082610e7e565b610e83565b9160010191610e42565b9190606460029104910191610e37565b60049193920491019138610e2c565b60089193920491019138610e1f565b60109193920491019138610e10565b60209193920491019138610dfe565b604093508104915038610de556fea2646970667358221220cecb7a680656fc1f33f0ddd0516359eb9141e923738ba34b1f302ed44e433fb164736f6c63430008130033","opcodes":"PUSH1 0xE0 PUSH1 0x40 DUP2 DUP2 MSTORE CALLVALUE PUSH3 0x38A JUMPI PUSH1 0xA0 DUP3 PUSH3 0x1502 DUP1 CODESIZE SUB DUP1 SWAP2 PUSH3 0x24 DUP3 DUP6 PUSH3 0x38F JUMP JUMPDEST DUP4 CODECOPY DUP2 ADD SUB SLT PUSH3 0x38A JUMPI PUSH3 0x3A DUP3 PUSH3 0x3C9 JUMP JUMPDEST PUSH1 0x20 PUSH3 0x49 DUP2 DUP6 ADD PUSH3 0x3C9 JUMP JUMPDEST SWAP4 DUP4 DUP2 ADD MLOAD SWAP1 PUSH1 0x80 PUSH1 0x60 DUP3 ADD MLOAD SWAP2 ADD MLOAD SWAP2 PUSH1 0x80 MSTORE PUSH1 0xA0 MSTORE PUSH1 0xC0 MSTORE PUSH8 0x16345785D8A0000 PUSH1 0x12 SSTORE PUSH1 0x0 DUP1 PUSH1 0x13 SSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB NOT SWAP2 AND DUP2 PUSH1 0x14 SLOAD AND OR PUSH1 0x14 SSTORE CALLER DUP2 PUSH1 0x15 SLOAD AND OR PUSH1 0x15 SSTORE DUP4 DUP4 DUP7 MLOAD DUP1 SWAP9 PUSH4 0x3E21FA9 PUSH1 0xE6 SHL DUP3 MSTORE DUP2 PUSH1 0x4 SWAP9 DUP10 SWAP3 AND GAS STATICCALL DUP1 ISZERO PUSH3 0x380 JUMPI DUP4 SWAP1 PUSH3 0x33D JUMPI JUMPDEST PUSH3 0x10F SWAP8 POP AND SWAP1 PUSH1 0x16 SLOAD AND OR PUSH1 0x16 SSTORE PUSH3 0xE0 PUSH1 0x80 MLOAD PUSH3 0x427 JUMP JUMPDEST SWAP2 PUSH3 0xEE PUSH1 0xA0 MLOAD PUSH3 0x427 JUMP JUMPDEST SWAP3 PUSH3 0x134 PUSH3 0x100 PUSH1 0xC0 MLOAD PUSH3 0x427 JUMP JUMPDEST DUP8 MLOAD SWAP9 DUP10 SWAP4 DUP6 DUP6 ADD SWAP1 PUSH3 0x3DE JUMP JUMPDEST PUSH1 0x17 PUSH1 0xF9 SHL DUP1 DUP3 MSTORE PUSH3 0x129 PUSH1 0x1 SWAP9 DUP10 DUP1 SWAP5 ADD SWAP1 PUSH3 0x3DE JUMP JUMPDEST SWAP1 DUP2 MSTORE ADD SWAP1 PUSH3 0x3DE JUMP JUMPDEST SUB PUSH3 0x149 PUSH1 0x1F NOT SWAP2 DUP3 DUP2 ADD DUP10 MSTORE DUP9 PUSH3 0x38F JUMP JUMPDEST DUP7 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH3 0x32A JUMPI PUSH1 0x17 SLOAD SWAP8 DUP6 DUP10 DUP2 SHR SWAP10 AND DUP1 ISZERO PUSH3 0x31F JUMPI JUMPDEST DUP5 DUP11 LT EQ PUSH3 0x30C JUMPI DUP9 PUSH1 0x1F DUP10 SWAP11 SWAP10 SWAP8 SWAP9 SWAP10 GT PUSH3 0x2AE JUMPI JUMPDEST POP DUP4 SWAP2 PUSH1 0x1F DUP5 GT PUSH1 0x1 EQ PUSH3 0x240 JUMPI POP PUSH1 0x19 SWAP4 SWAP3 SWAP2 DUP6 SWAP2 DUP4 PUSH3 0x234 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT PUSH1 0x3 DUP4 SWAP1 SHL SHR NOT AND SWAP1 DUP7 SHL OR PUSH1 0x17 SSTORE JUMPDEST PUSH1 0xFF NOT SWAP6 DUP7 DUP2 SLOAD AND DUP2 SSTORE DUP4 DUP1 MSTORE PUSH1 0x18 DUP3 MSTORE PUSH3 0x15180 DUP6 DUP6 KECCAK256 SSTORE DUP6 DUP5 MSTORE PUSH3 0x3F480 DUP6 DUP6 KECCAK256 SSTORE PUSH1 0x2 DUP5 MSTORE PUSH3 0x93A80 DUP6 DUP6 KECCAK256 SSTORE PUSH1 0x3 DUP5 MSTORE PUSH3 0x127500 DUP6 DUP6 KECCAK256 SSTORE DUP4 MSTORE PUSH3 0x278D00 DUP5 DUP5 KECCAK256 SSTORE DUP3 DUP1 MSTORE MSTORE KECCAK256 SWAP2 DUP3 SLOAD AND OR SWAP1 SSTORE MLOAD PUSH2 0xF5A SWAP1 DUP2 PUSH3 0x5A8 DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 PUSH2 0x33B ADD MSTORE PUSH1 0xA0 MLOAD DUP2 PUSH2 0x367 ADD MSTORE PUSH1 0xC0 MLOAD DUP2 PUSH2 0x396 ADD MSTORE RETURN JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH3 0x1A4 JUMP JUMPDEST PUSH1 0x17 DUP7 MSTORE DUP5 DUP7 KECCAK256 SWAP1 DUP5 AND SWAP7 SWAP6 SWAP5 SWAP4 DUP9 SWAP4 SWAP1 SWAP3 DUP7 JUMPDEST DUP10 DUP2 LT PUSH3 0x293 JUMPI POP DUP4 PUSH1 0x19 SWAP8 SWAP9 SWAP10 LT PUSH3 0x279 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x17 SSTORE PUSH3 0x1B9 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH3 0x26A JUMP JUMPDEST DUP2 DUP4 ADD MLOAD DUP5 SSTORE DUP13 SWAP9 POP DUP11 SWAP6 SWAP1 SWAP4 ADD SWAP3 SWAP2 DUP7 ADD SWAP2 DUP7 ADD PUSH3 0x254 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 POP PUSH1 0x17 DUP7 MSTORE DUP5 DUP7 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 DUP7 DUP7 LT PUSH3 0x301 JUMPI JUMPDEST DUP11 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 PUSH1 0x1F DUP11 SWAP3 ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH3 0x2F2 JUMPI POP POP PUSH3 0x186 JUMP JUMPDEST DUP8 DUP2 SSTORE DUP12 SWAP9 POP DUP10 SWAP2 ADD PUSH3 0x2E2 JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH3 0x2CF JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x22 DUP8 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST SWAP9 PUSH1 0x7F AND SWAP9 PUSH3 0x16D JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x41 DUP7 MSTORE PUSH1 0x24 DUP5 REVERT JUMPDEST POP DUP4 DUP8 DUP2 RETURNDATASIZE DUP4 GT PUSH3 0x378 JUMPI JUMPDEST PUSH3 0x356 DUP2 DUP4 PUSH3 0x38F JUMP JUMPDEST DUP2 ADD SUB SLT PUSH3 0x374 JUMPI PUSH3 0x36E PUSH3 0x10F SWAP8 PUSH3 0x3C9 JUMP JUMPDEST PUSH3 0xC3 JUMP JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH3 0x34A JUMP JUMPDEST DUP7 MLOAD RETURNDATASIZE DUP6 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND DUP2 ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT SWAP1 DUP3 LT OR PUSH3 0x3B3 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH3 0x38A JUMPI JUMP JUMPDEST SWAP1 DUP2 MLOAD SWAP2 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH3 0x3F7 JUMPI POP POP ADD PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST DUP1 PUSH1 0x20 DUP1 SWAP3 DUP5 ADD ADD MLOAD DUP2 DUP6 ADD MSTORE ADD PUSH3 0x3E5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH3 0x3B3 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP1 PUSH1 0x0 SWAP2 PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP1 DUP3 LT ISZERO PUSH3 0x598 JUMPI JUMPDEST POP PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP1 DUP4 LT ISZERO PUSH3 0x588 JUMPI JUMPDEST POP PUSH7 0x2386F26FC10000 DUP1 DUP4 LT ISZERO PUSH3 0x578 JUMPI JUMPDEST POP PUSH4 0x5F5E100 DUP1 DUP4 LT ISZERO PUSH3 0x568 JUMPI JUMPDEST POP PUSH2 0x2710 DUP1 DUP4 LT ISZERO PUSH3 0x558 JUMPI JUMPDEST POP PUSH1 0x64 DUP3 LT ISZERO PUSH3 0x547 JUMPI JUMPDEST PUSH1 0xA DUP1 SWAP3 LT ISZERO PUSH3 0x53C JUMPI JUMPDEST PUSH1 0x1 SWAP1 DUP2 PUSH1 0x21 DUP2 DUP7 ADD SWAP6 PUSH3 0x4C9 DUP8 PUSH3 0x40B JUMP JUMPDEST SWAP7 PUSH3 0x4D9 PUSH1 0x40 MLOAD SWAP9 DUP10 PUSH3 0x38F JUMP JUMPDEST DUP1 DUP9 MSTORE PUSH3 0x4EA PUSH1 0x1F NOT SWAP2 PUSH3 0x40B JUMP JUMPDEST ADD CALLDATASIZE PUSH1 0x20 DUP10 ADD CALLDATACOPY DUP7 ADD ADD SWAP1 JUMPDEST PUSH3 0x503 JUMPI JUMPDEST POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 NOT ADD SWAP1 DUP4 SWAP1 PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP3 DUP3 MOD BYTE DUP4 MSTORE8 DIV SWAP2 DUP3 ISZERO PUSH3 0x536 JUMPI SWAP2 SWAP1 DUP3 PUSH3 0x4F6 JUMP JUMPDEST PUSH3 0x4FC JUMP JUMPDEST SWAP2 PUSH1 0x1 ADD SWAP2 PUSH3 0x4B4 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x64 PUSH1 0x2 SWAP2 DIV SWAP2 ADD SWAP2 PUSH3 0x4A8 JUMP JUMPDEST PUSH1 0x4 SWAP2 SWAP4 SWAP3 DIV SWAP2 ADD SWAP2 CODESIZE PUSH3 0x49C JUMP JUMPDEST PUSH1 0x8 SWAP2 SWAP4 SWAP3 DIV SWAP2 ADD SWAP2 CODESIZE PUSH3 0x48E JUMP JUMPDEST PUSH1 0x10 SWAP2 SWAP4 SWAP3 DIV SWAP2 ADD SWAP2 CODESIZE PUSH3 0x47E JUMP JUMPDEST PUSH1 0x20 SWAP2 SWAP4 SWAP3 DIV SWAP2 ADD SWAP2 CODESIZE PUSH3 0x46B JUMP JUMPDEST PUSH1 0x40 SWAP4 POP DUP2 DIV SWAP2 POP CODESIZE PUSH3 0x451 JUMP INVALID PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x1F JUMPI JUMPDEST POP POP CALLDATASIZE ISZERO PUSH2 0x1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 SWAP2 DUP3 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x10A38F5 EQ PUSH2 0x4AB JUMPI POP DUP1 PUSH4 0x5C1F502 EQ PUSH2 0x463 JUMPI DUP1 PUSH4 0x17906C2E EQ PUSH2 0x445 JUMPI DUP1 PUSH4 0x4E69D560 EQ PUSH2 0x41D JUMPI DUP1 PUSH4 0x54FD4D50 EQ PUSH2 0x323 JUMPI DUP1 PUSH4 0x5AD4E170 EQ PUSH2 0x2F6 JUMPI DUP1 PUSH4 0x729E2EB1 EQ PUSH2 0x1E0 JUMPI DUP1 PUSH4 0x8C6838BA EQ PUSH2 0x107 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xE0 JUMPI DUP1 PUSH4 0xD24E0C87 EQ PUSH2 0xC2 JUMPI PUSH4 0xFAEB5E17 SUB PUSH2 0x10 JUMPI CALLVALUE PUSH2 0xBE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xBE JUMPI PUSH1 0x20 SWAP1 PUSH1 0xB SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0xBE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xBE JUMPI PUSH1 0x20 SWAP1 PUSH1 0xC SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0xBE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xBE JUMPI SWAP1 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x1DD JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1DD JUMPI PUSH2 0x1D9 DUP3 MLOAD PUSH2 0x127 DUP2 PUSH2 0x4EE JUMP JUMPDEST DUP4 MLOAD SWAP3 PUSH2 0x133 DUP5 PUSH2 0x520 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x60 SWAP1 PUSH1 0x20 SWAP4 DUP3 DUP6 DUP3 ADD MSTORE DUP3 DUP7 DUP3 ADD MSTORE DUP2 MSTORE DUP4 DUP6 MLOAD SWAP2 PUSH2 0x154 DUP4 PUSH2 0x520 JUMP JUMPDEST PUSH2 0x15C PUSH2 0xD6E JUMP JUMPDEST DUP4 MSTORE PUSH2 0x166 PUSH2 0xD6E JUMP JUMPDEST DUP3 DUP5 ADD MSTORE DUP7 MLOAD PUSH2 0x175 DUP2 PUSH2 0x520 JUMP JUMPDEST DUP5 DUP2 MSTORE DUP5 DUP4 DUP3 ADD MSTORE DUP5 DUP9 DUP3 ADD MSTORE DUP8 DUP5 ADD MSTORE ADD MSTORE DUP4 PUSH2 0x1C6 DUP2 MLOAD SWAP5 PUSH2 0x198 DUP7 PUSH2 0x4EE JUMP JUMPDEST PUSH2 0x1A0 PUSH2 0x57A JUMP JUMPDEST DUP7 MSTORE PUSH2 0x1AA PUSH2 0x771 JUMP JUMPDEST SWAP4 DUP2 DUP8 ADD SWAP5 DUP6 MSTORE DUP4 MLOAD SWAP8 DUP9 SWAP8 DUP4 DUP10 MSTORE MLOAD SWAP3 DUP9 ADD MSTORE DUP7 ADD SWAP1 PUSH2 0xB3F JUMP JUMPDEST SWAP2 MLOAD SWAP1 PUSH1 0x1F NOT DUP6 DUP5 SUB ADD SWAP1 DUP6 ADD MSTORE PUSH2 0xB8B JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0xBE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xBE JUMPI DUP1 MLOAD SWAP1 DUP3 SWAP1 PUSH1 0xF SLOAD SWAP2 PUSH1 0x1 DUP4 DUP2 SHR SWAP1 DUP1 DUP6 AND SWAP7 DUP8 ISZERO PUSH2 0x2EC JUMPI JUMPDEST PUSH1 0x20 SWAP6 DUP7 DUP5 LT DUP10 EQ PUSH2 0x2D8 JUMPI DUP7 DUP9 SWAP10 DUP6 DUP11 SWAP9 SWAP10 SWAP11 MSTORE SWAP2 DUP3 PUSH1 0x0 EQ PUSH2 0x2B1 JUMPI POP POP PUSH1 0x1 EQ PUSH2 0x255 JUMPI JUMPDEST POP POP POP PUSH2 0x1D9 SWAP3 SWAP2 PUSH2 0x246 SWAP2 SUB DUP6 PUSH2 0x558 JUMP JUMPDEST MLOAD SWAP3 DUP3 DUP5 SWAP4 DUP5 MSTORE DUP4 ADD SWAP1 PUSH2 0xB1A JUMP JUMPDEST SWAP2 SWAP1 DUP7 SWAP4 POP PUSH1 0xF DUP4 MSTORE PUSH32 0x8D1108E10BCB7C27DDDFC02ED9D693A074039D026CF4EA4240B40F7D581AC802 JUMPDEST DUP3 DUP5 LT PUSH2 0x299 JUMPI POP POP POP DUP3 ADD ADD DUP2 PUSH2 0x246 PUSH2 0x1D9 PUSH2 0x233 JUMP JUMPDEST DUP1 SLOAD DUP5 DUP11 ADD DUP7 ADD MSTORE DUP9 SWAP6 POP DUP8 SWAP5 SWAP1 SWAP4 ADD SWAP3 DUP2 ADD PUSH2 0x280 JUMP JUMPDEST PUSH1 0xFF NOT AND DUP8 DUP3 ADD MSTORE SWAP4 ISZERO ISZERO PUSH1 0x5 SHL DUP7 ADD SWAP1 SWAP4 ADD SWAP4 POP DUP5 SWAP3 POP PUSH2 0x246 SWAP2 POP PUSH2 0x1D9 SWAP1 POP PUSH2 0x233 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x20B JUMP JUMPDEST POP CALLVALUE PUSH2 0xBE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xBE JUMPI PUSH1 0x20 SWAP1 PUSH2 0x312 PUSH2 0xCA6 JUMP JUMPDEST SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE RETURN JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x1DD JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1DD JUMPI POP PUSH2 0x35F PUSH32 0x0 PUSH2 0xDBC JUMP JUMPDEST PUSH2 0x1D9 PUSH2 0x38B PUSH32 0x0 PUSH2 0xDBC JUMP JUMPDEST SWAP3 PUSH2 0x246 PUSH1 0x22 PUSH2 0x3BA PUSH32 0x0 PUSH2 0xDBC JUMP JUMPDEST SWAP6 DUP4 MLOAD SWAP7 DUP8 SWAP2 DUP8 MLOAD PUSH2 0x3D4 DUP2 PUSH1 0x20 SWAP11 DUP12 DUP1 DUP9 ADD SWAP2 ADD PUSH2 0xAF7 JUMP JUMPDEST DUP4 ADD SWAP1 PUSH1 0x17 PUSH1 0xF9 SHL SWAP2 DUP3 DUP11 DUP3 ADD MSTORE PUSH2 0x3F5 DUP3 MLOAD DUP1 SWAP4 DUP13 PUSH1 0x21 DUP6 ADD SWAP2 ADD PUSH2 0xAF7 JUMP JUMPDEST ADD SWAP1 PUSH1 0x21 DUP3 ADD MSTORE PUSH2 0x40E DUP3 MLOAD DUP1 SWAP4 DUP11 DUP8 DUP6 ADD SWAP2 ADD PUSH2 0xAF7 JUMP JUMPDEST ADD SUB PUSH1 0x2 DUP2 ADD DUP8 MSTORE ADD DUP6 PUSH2 0x558 JUMP JUMPDEST POP CALLVALUE PUSH2 0xBE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xBE JUMPI PUSH1 0x20 SWAP1 PUSH2 0x443 PUSH1 0xFF PUSH1 0x4 SLOAD AND SWAP2 MLOAD DUP1 SWAP3 PUSH2 0xB7E JUMP JUMPDEST RETURN JUMPDEST POP CALLVALUE PUSH2 0xBE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xBE JUMPI PUSH1 0x20 SWAP1 PUSH1 0x13 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x1DD JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1DD JUMPI POP PUSH2 0x47E PUSH2 0x57A JUMP JUMPDEST SWAP1 PUSH2 0x1D9 PUSH2 0x48A PUSH2 0x771 JUMP JUMPDEST PUSH2 0x49D DUP4 MLOAD SWAP5 DUP5 DUP7 SWAP6 DUP7 MSTORE DUP6 ADD SWAP1 PUSH2 0xB3F JUMP JUMPDEST SWAP1 DUP4 DUP3 SUB PUSH1 0x20 DUP6 ADD MSTORE PUSH2 0xB8B JUMP JUMPDEST DUP4 SWAP1 CALLVALUE PUSH2 0xBE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xBE JUMPI DUP1 PUSH2 0x443 PUSH1 0x20 SWAP3 PUSH1 0xFF PUSH1 0x8 SLOAD AND JUMPDEST SWAP1 PUSH1 0x3 DUP3 LT ISZERO PUSH2 0x4D8 JUMPI MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x50A JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x60 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x50A JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0xC0 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x50A JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x50A JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x587 DUP3 PUSH2 0x520 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE PUSH1 0x40 MLOAD PUSH1 0x2 SLOAD DUP1 DUP4 AND SWAP3 DUP6 SWAP3 SWAP1 SWAP2 DUP1 DUP4 SHR SWAP1 PUSH1 0x0 SWAP1 DUP7 ISZERO PUSH2 0x767 JUMPI JUMPDEST PUSH1 0x20 SWAP7 DUP8 DUP5 LT DUP2 EQ PUSH2 0x753 JUMPI DUP4 DUP6 MSTORE DUP5 SWAP3 SWAP2 DUP9 SWAP1 DUP3 ISZERO PUSH2 0x736 JUMPI POP POP PUSH1 0x1 EQ PUSH2 0x6D8 JUMPI JUMPDEST PUSH2 0x5E2 SWAP3 POP SUB DUP3 PUSH2 0x558 JUMP JUMPDEST DUP4 DUP4 ADD MSTORE PUSH1 0x40 MLOAD SWAP3 PUSH1 0x0 SWAP2 PUSH1 0x3 SLOAD SWAP1 DUP2 DUP2 SHR SWAP2 DUP2 DUP2 AND DUP1 ISZERO PUSH2 0x6CE JUMPI JUMPDEST DUP5 DUP5 LT DUP2 EQ PUSH2 0x6BA JUMPI DUP4 DUP9 MSTORE DUP8 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 DUP2 ISZERO PUSH2 0x69B JUMPI POP PUSH1 0x1 EQ PUSH2 0x636 JUMPI JUMPDEST POP POP POP PUSH1 0x40 SWAP3 SWAP2 PUSH2 0x632 SWAP2 SUB DUP5 PUSH2 0x558 JUMP JUMPDEST ADD MSTORE JUMP JUMPDEST SWAP1 SWAP5 SWAP4 SWAP3 POP PUSH1 0x3 PUSH1 0x0 MSTORE PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B SWAP5 PUSH1 0x0 SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x683 JUMPI POP SWAP4 SWAP5 POP SWAP2 SWAP3 POP SWAP1 DUP3 ADD ADD DUP2 PUSH2 0x632 PUSH1 0x40 PUSH2 0x620 JUMP JUMPDEST DUP7 SLOAD DUP9 DUP5 ADD DUP6 ADD MSTORE SWAP6 DUP7 ADD SWAP6 DUP8 SWAP5 POP SWAP2 DUP4 ADD SWAP2 PUSH2 0x666 JUMP JUMPDEST PUSH1 0xFF NOT AND DUP5 DUP8 ADD MSTORE POP POP ISZERO ISZERO PUSH1 0x5 SHL DUP4 ADD ADD SWAP1 POP DUP2 PUSH2 0x632 PUSH1 0x40 PUSH2 0x620 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST SWAP3 PUSH1 0x7F AND SWAP3 PUSH2 0x5FF JUMP JUMPDEST POP POP PUSH1 0x2 PUSH1 0x0 MSTORE DUP2 DUP6 PUSH32 0x405787FA12A823E0F2B7631CC41B3BA8828B3321CA811111FA75CD3AA3BB5ACE DUP6 PUSH1 0x0 SWAP2 JUMPDEST DUP6 DUP4 LT PUSH2 0x71D JUMPI POP POP PUSH2 0x5E2 SWAP4 POP DUP3 ADD ADD PUSH2 0x5D6 JUMP JUMPDEST DUP1 SWAP2 SWAP3 SWAP5 POP SLOAD DUP4 DUP6 DUP9 ADD ADD MSTORE ADD SWAP2 ADD DUP7 SWAP1 DUP6 DUP6 SWAP4 PUSH2 0x707 JUMP JUMPDEST PUSH1 0xFF NOT AND DUP5 DUP3 ADD MSTORE PUSH2 0x5E2 SWAP5 ISZERO ISZERO PUSH1 0x5 SHL DUP5 ADD ADD SWAP2 POP PUSH2 0x5D6 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x5B2 JUMP JUMPDEST PUSH1 0x40 SWAP1 DUP2 MLOAD PUSH2 0x77F DUP2 PUSH2 0x520 JUMP JUMPDEST DUP1 SWAP3 DUP1 MLOAD SWAP2 PUSH2 0x78D DUP4 PUSH2 0x53C JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0xFF DUP2 AND PUSH1 0x8 DUP2 LT ISZERO PUSH2 0xACD JUMPI DUP6 MSTORE PUSH1 0x8 SHR PUSH1 0xFF AND SWAP4 PUSH1 0x5 DUP6 LT ISZERO PUSH2 0xAE2 JUMPI PUSH1 0x20 SWAP5 DUP6 DUP3 ADD MSTORE PUSH1 0x5 SLOAD DUP5 DUP3 ADD MSTORE PUSH1 0x6 SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x7 SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xFF PUSH1 0x8 SLOAD AND PUSH1 0x3 DUP2 LT ISZERO PUSH2 0xACD JUMPI PUSH1 0xA0 DUP3 ADD MSTORE DUP3 MSTORE DUP3 MLOAD PUSH2 0x7EF DUP2 PUSH2 0x53C JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0xA SLOAD AND DUP6 DUP3 ADD MSTORE PUSH1 0xB SLOAD DUP5 DUP3 ADD MSTORE PUSH1 0xC SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0xD SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xE SLOAD PUSH1 0xA0 DUP3 ADD MSTORE DUP3 DUP6 ADD MSTORE DUP3 MLOAD SWAP4 PUSH2 0x836 DUP6 PUSH2 0x520 JUMP JUMPDEST DUP4 MLOAD PUSH1 0x0 SWAP1 PUSH1 0xF SLOAD PUSH1 0x1 SWAP3 DUP2 DUP5 SHR SWAP2 DUP5 DUP2 AND DUP1 ISZERO PUSH2 0xAC3 JUMPI JUMPDEST DUP7 DUP5 LT DUP2 EQ PUSH2 0xA2B JUMPI DUP4 DUP6 MSTORE DUP5 SWAP3 SWAP2 DUP8 SWAP1 DUP3 ISZERO PUSH2 0xAA6 JUMPI POP POP PUSH1 0x1 EQ PUSH2 0xA48 JUMPI JUMPDEST PUSH2 0x87C SWAP3 POP SUB DUP3 PUSH2 0x558 JUMP JUMPDEST DUP7 MSTORE DUP5 MLOAD PUSH1 0x0 PUSH1 0x10 SLOAD SWAP1 DUP2 DUP5 SHR SWAP2 DUP5 DUP2 AND DUP1 ISZERO PUSH2 0xA3E JUMPI JUMPDEST DUP7 DUP5 LT DUP2 EQ PUSH2 0xA2B JUMPI DUP4 DUP6 MSTORE DUP5 SWAP3 SWAP2 DUP8 SWAP1 DUP3 ISZERO PUSH2 0xA0E JUMPI POP POP PUSH1 0x1 EQ PUSH2 0x9B0 JUMPI JUMPDEST PUSH2 0x8C1 SWAP3 POP SUB DUP3 PUSH2 0x558 JUMP JUMPDEST DUP3 DUP8 ADD MSTORE DUP5 MLOAD SWAP3 PUSH1 0x0 SWAP2 PUSH1 0x11 SLOAD DUP1 DUP3 SHR SWAP3 DUP3 DUP3 AND SWAP1 DUP2 ISZERO PUSH2 0x9A6 JUMPI JUMPDEST DUP7 DUP6 LT DUP3 EQ PUSH2 0x993 JUMPI POP DUP4 DUP8 MSTORE DUP7 SWAP5 SWAP4 SWAP3 SWAP2 DUP2 ISZERO PUSH2 0x973 JUMPI POP PUSH1 0x1 EQ PUSH2 0x914 JUMPI JUMPDEST POP POP PUSH2 0x90C SWAP3 POP SUB DUP3 PUSH2 0x558 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE ADD MSTORE JUMP JUMPDEST SWAP1 SWAP4 SWAP2 POP PUSH1 0x11 PUSH1 0x0 MSTORE PUSH32 0x31ECC21A745E3968A04E9570E4425BC18FA8019C68028196B546D1669C200C68 SWAP4 PUSH1 0x0 SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x95B JUMPI POP POP PUSH2 0x90C SWAP4 POP DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x8FE JUMP JUMPDEST DUP6 SLOAD DUP8 DUP5 ADD DUP6 ADD MSTORE SWAP5 DUP6 ADD SWAP5 DUP7 SWAP5 POP SWAP2 DUP4 ADD SWAP2 PUSH2 0x943 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x90C SWAP5 SWAP3 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x8FE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x22 SWAP1 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST SWAP4 PUSH1 0x7F AND SWAP4 PUSH2 0x8DD JUMP JUMPDEST POP POP PUSH1 0x10 PUSH1 0x0 MSTORE DUP2 DUP5 PUSH32 0x1B6847DC741A1B0CD08D278845F9D819D87B734759AFB55FE2DE5CB82A9AE672 DUP6 PUSH1 0x0 SWAP2 JUMPDEST DUP6 DUP4 LT PUSH2 0x9F5 JUMPI POP POP PUSH2 0x8C1 SWAP4 POP DUP3 ADD ADD PUSH2 0x8B5 JUMP JUMPDEST DUP1 SWAP2 SWAP3 SWAP5 POP SLOAD DUP4 DUP6 DUP9 ADD ADD MSTORE ADD SWAP2 ADD DUP6 SWAP1 DUP6 DUP6 SWAP4 PUSH2 0x9DF JUMP JUMPDEST PUSH1 0xFF NOT AND DUP5 DUP3 ADD MSTORE PUSH2 0x8C1 SWAP5 ISZERO ISZERO PUSH1 0x5 SHL DUP5 ADD ADD SWAP2 POP PUSH2 0x8B5 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x22 DUP9 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST SWAP3 PUSH1 0x7F AND SWAP3 PUSH2 0x894 JUMP JUMPDEST POP POP PUSH1 0xF PUSH1 0x0 MSTORE DUP2 DUP5 PUSH32 0x8D1108E10BCB7C27DDDFC02ED9D693A074039D026CF4EA4240B40F7D581AC802 DUP6 PUSH1 0x0 SWAP2 JUMPDEST DUP6 DUP4 LT PUSH2 0xA8D JUMPI POP POP PUSH2 0x87C SWAP4 POP DUP3 ADD ADD PUSH2 0x870 JUMP JUMPDEST DUP1 SWAP2 SWAP3 SWAP5 POP SLOAD DUP4 DUP6 DUP9 ADD ADD MSTORE ADD SWAP2 ADD DUP6 SWAP1 DUP6 DUP6 SWAP4 PUSH2 0xA77 JUMP JUMPDEST PUSH1 0xFF NOT AND DUP5 DUP3 ADD MSTORE PUSH2 0x87C SWAP5 ISZERO ISZERO PUSH1 0x5 SHL DUP5 ADD ADD SWAP2 POP PUSH2 0x870 SWAP1 POP JUMP JUMPDEST SWAP3 PUSH1 0x7F AND SWAP3 PUSH2 0x84F JUMP JUMPDEST PUSH1 0x21 DUP4 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x21 DUP3 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0xB0A JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xAFA JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP2 PUSH2 0xB33 DUP2 MLOAD DUP1 SWAP3 DUP2 DUP6 MSTORE DUP6 DUP1 DUP7 ADD SWAP2 ADD PUSH2 0xAF7 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0xB7B SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP3 MLOAD AND DUP2 MSTORE PUSH1 0x40 PUSH2 0xB6A PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x60 PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x60 DUP5 ADD SWAP1 PUSH2 0xB1A JUMP JUMPDEST SWAP3 ADD MLOAD SWAP1 PUSH1 0x40 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0xB1A JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x8 DUP3 LT ISZERO PUSH2 0x4D8 JUMPI MSTORE JUMP JUMPDEST SWAP1 DUP2 MLOAD SWAP2 PUSH2 0xB9A DUP3 DUP5 MLOAD PUSH2 0xB7E JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD SWAP1 PUSH1 0x5 DUP3 LT ISZERO PUSH2 0x4D8 JUMPI PUSH2 0xBE2 PUSH1 0xA0 PUSH2 0xB7B SWAP6 PUSH1 0x40 SWAP5 PUSH1 0x20 DUP8 ADD MSTORE DUP5 DUP2 ADD MLOAD DUP6 DUP8 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x60 DUP8 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x80 DUP8 ADD MSTORE ADD MLOAD PUSH1 0xA0 DUP6 ADD SWAP1 PUSH2 0x4CB JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 DUP1 DUP4 SHL SUB DUP1 DUP3 MLOAD AND PUSH1 0xC0 DUP8 ADD MSTORE PUSH1 0x20 DUP3 ADD MLOAD AND PUSH1 0xE0 DUP7 ADD MSTORE DUP4 DUP2 ADD MLOAD PUSH2 0x100 DUP7 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH2 0x120 DUP7 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH2 0x140 DUP7 ADD MSTORE ADD MLOAD PUSH2 0x160 DUP5 ADD MSTORE ADD MLOAD SWAP1 PUSH2 0xC4E PUSH2 0x1A0 DUP1 PUSH2 0x180 DUP5 ADD MSTORE PUSH1 0x60 DUP5 MLOAD SWAP2 DUP5 ADD MSTORE PUSH2 0x200 DUP4 ADD SWAP1 PUSH2 0xB1A JUMP JUMPDEST SWAP1 PUSH2 0x1E0 PUSH1 0x40 PUSH2 0xC72 PUSH1 0x20 DUP7 ADD MLOAD SWAP5 PUSH2 0x19F NOT SWAP6 DUP7 DUP7 DUP4 SUB ADD PUSH2 0x1C0 DUP8 ADD MSTORE PUSH2 0xB1A JUMP JUMPDEST SWAP5 ADD MLOAD SWAP3 DUP3 DUP6 SUB ADD SWAP2 ADD MSTORE PUSH2 0xB1A JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0xCA1 JUMPI MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0xCA1 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xFF PUSH1 0x8 SLOAD AND PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x4D8 JUMPI PUSH1 0x1 DUP2 SUB PUSH2 0xD2A JUMPI POP PUSH1 0x15 SLOAD PUSH1 0x40 MLOAD PUSH4 0xF77800E5 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x4 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xD1E JUMPI PUSH1 0x0 SWAP2 PUSH2 0xCF6 JUMPI POP SWAP1 JUMP JUMPDEST PUSH2 0xB7B SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0xD17 JUMPI JUMPDEST PUSH2 0xD0F DUP2 DUP4 PUSH2 0x558 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0xC82 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xD05 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x2 SUB PUSH2 0xD69 JUMPI PUSH1 0x15 SLOAD PUSH1 0x40 MLOAD PUSH4 0x5F117AA3 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x4 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xD1E JUMPI PUSH1 0x0 SWAP2 PUSH2 0xCF6 JUMPI POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0xD7B DUP3 PUSH2 0x53C JUMP JUMPDEST DUP2 PUSH1 0xA0 PUSH1 0x0 SWAP2 DUP3 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE DUP3 PUSH1 0x80 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x50A JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP1 PUSH1 0x0 SWAP2 PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP1 DUP3 LT ISZERO PUSH2 0xF16 JUMPI JUMPDEST POP PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP1 DUP4 LT ISZERO PUSH2 0xF07 JUMPI JUMPDEST POP PUSH7 0x2386F26FC10000 DUP1 DUP4 LT ISZERO PUSH2 0xEF8 JUMPI JUMPDEST POP PUSH4 0x5F5E100 DUP1 DUP4 LT ISZERO PUSH2 0xEE9 JUMPI JUMPDEST POP PUSH2 0x2710 DUP1 DUP4 LT ISZERO PUSH2 0xEDA JUMPI JUMPDEST POP PUSH1 0x64 DUP3 LT ISZERO PUSH2 0xECA JUMPI JUMPDEST PUSH1 0xA DUP1 SWAP3 LT ISZERO PUSH2 0xEC0 JUMPI JUMPDEST PUSH1 0x1 SWAP1 DUP2 PUSH1 0x21 DUP2 DUP7 ADD SWAP6 PUSH2 0xE55 DUP8 PUSH2 0xDA0 JUMP JUMPDEST SWAP7 PUSH2 0xE63 PUSH1 0x40 MLOAD SWAP9 DUP10 PUSH2 0x558 JUMP JUMPDEST DUP1 DUP9 MSTORE PUSH2 0xE72 PUSH1 0x1F NOT SWAP2 PUSH2 0xDA0 JUMP JUMPDEST ADD CALLDATASIZE PUSH1 0x20 DUP10 ADD CALLDATACOPY DUP7 ADD ADD SWAP1 JUMPDEST PUSH2 0xE8A JUMPI JUMPDEST POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 NOT ADD SWAP1 DUP4 SWAP1 PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP3 DUP3 MOD BYTE DUP4 MSTORE8 DIV SWAP2 DUP3 ISZERO PUSH2 0xEBB JUMPI SWAP2 SWAP1 DUP3 PUSH2 0xE7E JUMP JUMPDEST PUSH2 0xE83 JUMP JUMPDEST SWAP2 PUSH1 0x1 ADD SWAP2 PUSH2 0xE42 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x64 PUSH1 0x2 SWAP2 DIV SWAP2 ADD SWAP2 PUSH2 0xE37 JUMP JUMPDEST PUSH1 0x4 SWAP2 SWAP4 SWAP3 DIV SWAP2 ADD SWAP2 CODESIZE PUSH2 0xE2C JUMP JUMPDEST PUSH1 0x8 SWAP2 SWAP4 SWAP3 DIV SWAP2 ADD SWAP2 CODESIZE PUSH2 0xE1F JUMP JUMPDEST PUSH1 0x10 SWAP2 SWAP4 SWAP3 DIV SWAP2 ADD SWAP2 CODESIZE PUSH2 0xE10 JUMP JUMPDEST PUSH1 0x20 SWAP2 SWAP4 SWAP3 DIV SWAP2 ADD SWAP2 CODESIZE PUSH2 0xDFE JUMP JUMPDEST PUSH1 0x40 SWAP4 POP DUP2 DIV SWAP2 POP CODESIZE PUSH2 0xDE5 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCE 0xCB PUSH27 0x680656FC1F33F0DDD0516359EB9141E923738BA34B1F302ED44E43 EXTCODEHASH 0xB1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"423:3069:24:-:0;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;713:14:32;423:3069:24;713:14:32;423:3069:24;737:14:32;761:13;;952:18:24;925:8;423:3069;-1:-1:-1;423:3069:24;998:18;423:3069;;;;;;;;;;;;;;;;;1059:28;423:3069;;;1059:28;423:3069;1146:10;423:3069;1119:24;423:3069;;;1119:24;423:3069;;;;;;;;;;1184:46;;;;423:3069;;;;1184:46;;;;;;;;;;-1:-1:-1;423:3069:24;;;;;1166:15;423:3069;;;1166:15;423:3069;1405:24:32;423:3069:24;;1405:24:32;:::i;:::-;423:3069:24;1476:24:32;423:3069:24;;1476:24:32;:::i;:::-;423:3069:24;;1547:23:32;761:13;423:3069:24;1547:23:32;:::i;:::-;423:3069:24;;1367:221:32;;;;;;423:3069:24;;:::i;:::-;-1:-1:-1;;;423:3069:24;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;1367:221:32;;;;;;;;;;;;:::i;:::-;423:3069:24;;;-1:-1:-1;;;;;423:3069:24;;;;1240:16;423:3069;;;;;;;;;;;;-1:-1:-1;423:3069:24;;;;;;;1367:221:32;423:3069:24;;;;;;;;;-1:-1:-1;423:3069:24;;;1367:221:32;423:3069:24;;;;;;-1:-1:-1;1743:13:24;;423:3069;;;;;;;;-1:-1:-1;;;;423:3069:24;;;;;;;;;;;1240:16;423:3069;;;;;;;;;;;;;;1352:18;423:3069;;1412:6;423:3069;;;;;;;1491:6;423:3069;;;;1059:28;423:3069;;1568:6;423:3069;;;;1119:24;423:3069;;1646:7;423:3069;;;;;;1725:7;423:3069;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;761:13:32;423:3069:24;;;;;;;;;;-1:-1:-1;423:3069:24;;;;;1240:16;423:3069;;;;;;;;;;;;;;;;;;;;;;;;;1743:13;423:3069;;;;;;;;;;;;;1240:16;423:3069;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;423:3069:24;;;;;;;;;;;;;;;;;;;;;;1240:16;423:3069;;;;;1367:221:32;423:3069:24;;;;;;;;;;;;;;;;;;;;;1367:221:32;423:3069:24;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;423:3069:24;;;;;;;;-1:-1:-1;423:3069:24;;;;;-1:-1:-1;;;423:3069:24;;;;;;;;;;;;;;;;-1:-1:-1;;;423:3069:24;;;;;;;;1184:46;;;;;;;;;;;;;;;:::i;:::-;;;423:3069;;;;;;;;:::i;:::-;1184:46;;423:3069;;;;1184:46;;;;;;423:3069;;;;;;;;;;-1:-1:-1;423:3069:24;;;1367:221:32;423:3069:24;;;-1:-1:-1;;423:3069:24;;;;-1:-1:-1;;;;;423:3069:24;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;-1:-1:-1;;;;;423:3069:24;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;423:3069:24;;;;1367:221:32;423:3069:24;-1:-1:-1;;423:3069:24;;;;:::o;447:696:1:-;569:17;-1:-1:-1;10276:8:2;;10267:17;;;;10263:103;;447:696:1;10392:8:2;;10383:17;;;;10379:103;;447:696:1;10508:8:2;;10499:17;;;;10495:103;;447:696:1;10624:7:2;;10615:16;;;;10611:100;;447:696:1;10737:7:2;;10728:16;;;;10724:100;;447:696:1;10841:16:2;10850:7;10841:16;;;10837:100;;447:696:1;10963:7:2;10954:16;;;;10950:66;;447:696:1;589:1;423:3069:24;;731:76:1;423:3069:24;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;1367:221:32;;423:3069:24;;:::i;:::-;;;;;;;731:76:1;;;820:280;589:1;;;820:280;1113:13;;;;447:696;:::o;820:280::-;-1:-1:-1;;423:3069:24;;;;-1:-1:-1;;;925:93:1;;;;423:3069:24;925:93:1;423:3069:24;1068:10:1;;;1064:21;;820:280;;;;;1064:21;1080:5;;10950:66:2;423:3069:24;11000:1:2;423:3069:24;10950:66:2;;;10837:100;423:3069:24;;10850:7:2;10921:1;423:3069:24;;;;10837:100:2;;;10724;10808:1;423:3069:24;;;;;;10724:100:2;;;;10611;10695:1;423:3069:24;;;;;;10611:100:2;;;;10495:103;10581:2;423:3069:24;;;;;;10495:103:2;;;;10379;10465:2;423:3069:24;;;;;;10379:103:2;;;;10263;10349:2;;-1:-1:-1;423:3069:24;;;-1:-1:-1;10263:103:2;;"},"deployedBytecode":{"functionDebugData":{"abi_decode_address_fromMemory":{"entryPoint":3202,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_bytes":{"entryPoint":2842,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_enum_PostStatus":{"entryPoint":2942,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_enum_Tokens":{"entryPoint":1227,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_struct_PostData":{"entryPoint":2955,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_struct_User":{"entryPoint":2879,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_and_zero_memory_struct_struct_PostSettings":{"entryPoint":3438,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_string":{"entryPoint":3488,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":2807,"id":null,"parameterSlots":3,"returnSlots":0},"finalize_allocation":{"entryPoint":1368,"id":null,"parameterSlots":2,"returnSlots":0},"finalize_allocation_5086":{"entryPoint":1262,"id":null,"parameterSlots":1,"returnSlots":0},"finalize_allocation_5087":{"entryPoint":1312,"id":null,"parameterSlots":1,"returnSlots":0},"finalize_allocation_5098":{"entryPoint":1340,"id":null,"parameterSlots":1,"returnSlots":0},"fun_getTokenIdAddress":{"entryPoint":3238,"id":3784,"parameterSlots":0,"returnSlots":1},"fun_toString":{"entryPoint":3516,"id":136,"parameterSlots":1,"returnSlots":1},"read_from_storage_reference_type_struct_PostData":{"entryPoint":1905,"id":null,"parameterSlots":0,"returnSlots":1},"read_from_storage_reference_type_struct_User":{"entryPoint":1402,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[],"immutableReferences":{"6047":[{"length":32,"start":827}],"6049":[{"length":32,"start":871}],"6051":[{"length":32,"start":918}]},"linkReferences":{},"object":"60806040818152600436101561001f575b5050361561001d57600080fd5b005b600091823560e01c908163010a38f5146104ab5750806305c1f5021461046357806317906c2e146104455780634e69d5601461041d57806354fd4d50146103235780635ad4e170146102f6578063729e2eb1146101e05780638c6838ba146101075780638da5cb5b146100e0578063d24e0c87146100c25763faeb5e170361001057346100be57816003193601126100be57602090600b549051908152f35b5080fd5b50346100be57816003193601126100be57602090600c549051908152f35b50346100be57816003193601126100be57905490516001600160a01b039091168152602090f35b5090346101dd57806003193601126101dd576101d98251610127816104ee565b83519261013384610520565b83526060906020938285820152828682015281528385519161015483610520565b61015c610d6e565b8352610166610d6e565b82840152865161017581610520565b84815284838201528488820152878401520152836101c6815194610198866104ee565b6101a061057a565b86526101aa610771565b9381870194855283519788978389525192880152860190610b3f565b915190601f198584030190850152610b8b565b0390f35b80fd5b50346100be57816003193601126100be578051908290600f5491600183811c908085169687156102ec575b60209586841089146102d857868899858a98999a5291826000146102b1575050600114610255575b5050506101d99291610246910385610558565b51928284938452830190610b1a565b9190869350600f83527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8025b82841061029957505050820101816102466101d9610233565b8054848a018601528895508794909301928101610280565b60ff19168782015293151560051b8601909301935084925061024691506101d99050610233565b634e487b7160e01b82526022600452602482fd5b91607f169161020b565b50346100be57816003193601126100be57602090610312610ca6565b90516001600160a01b039091168152f35b5090346101dd57806003193601126101dd575061035f7f0000000000000000000000000000000000000000000000000000000000000000610dbc565b6101d961038b7f0000000000000000000000000000000000000000000000000000000000000000610dbc565b9261024660226103ba7f0000000000000000000000000000000000000000000000000000000000000000610dbc565b95835196879187516103d48160209a8b8088019101610af7565b830190601760f91b91828a8201526103f5825180938c602185019101610af7565b0190602182015261040e825180938a8785019101610af7565b01036002810187520185610558565b50346100be57816003193601126100be5760209061044360ff6004541691518092610b7e565bf35b50346100be57816003193601126100be576020906013549051908152f35b5090346101dd57806003193601126101dd575061047e61057a565b906101d961048a610771565b61049d8351948486958652850190610b3f565b908382036020850152610b8b565b8390346100be57816003193601126100be578061044360209260ff600854165b9060038210156104d85752565b634e487b7160e01b600052602160045260246000fd5b6040810190811067ffffffffffffffff82111761050a57604052565b634e487b7160e01b600052604160045260246000fd5b6060810190811067ffffffffffffffff82111761050a57604052565b60c0810190811067ffffffffffffffff82111761050a57604052565b90601f8019910116810190811067ffffffffffffffff82111761050a57604052565b6040519061058782610520565b600180546001600160a01b03168352604051600254808316928592909180831c906000908615610767575b602096878410811461075357838552849291889082156107365750506001146106d8575b6105e292500382610558565b83830152604051926000916003549081811c9181811680156106ce575b84841081146106ba57838852879594939291811561069b5750600114610636575b50505060409291610632910384610558565b0152565b909493925060036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b946000915b818310610683575093945091925090820101816106326040610620565b86548884018501529586019587945091830191610666565b60ff1916848701525050151560051b8301019050816106326040610620565b634e487b7160e01b86526022600452602486fd5b92607f16926105ff565b5050600260005281857f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace856000915b85831061071d5750506105e293508201016105d6565b8091929450548385880101520191018690858593610707565b60ff1916848201526105e294151560051b84010191506105d69050565b634e487b7160e01b83526022600452602483fd5b91607f16916105b2565b604090815161077f81610520565b809280519161078d8361053c565b6004805460ff81166008811015610acd57855260081c60ff16936005851015610ae25760209485820152600554848201526006546060820152600754608082015260ff600854166003811015610acd5760a0820152825282516107ef8161053c565b6009546001600160a01b039081168252600a541685820152600b5484820152600c546060820152600d546080820152600e5460a08201528285015282519361083685610520565b8351600090600f5460019281841c918481168015610ac3575b8684108114610a2b5783855284929187908215610aa6575050600114610a48575b61087c92500382610558565b8652845160006010549081841c918481168015610a3e575b8684108114610a2b5783855284929187908215610a0e5750506001146109b0575b6108c192500382610558565b8287015284519260009160115480821c928282169081156109a6575b86851082146109935750838752869493929181156109735750600114610914575b505061090c92500382610558565b828401520152565b9093915060116000527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c68936000915b81831061095b57505061090c935082010138806108fe565b85548784018501529485019486945091830191610943565b91505061090c94925060ff191682840152151560051b82010138806108fe565b634e487b7160e01b865260229052602485fd5b93607f16936108dd565b5050601060005281847f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae672856000915b8583106109f55750506108c193508201016108b5565b80919294505483858801015201910185908585936109df565b60ff1916848201526108c194151560051b84010191506108b59050565b634e487b7160e01b835260228852602483fd5b92607f1692610894565b5050600f60005281847f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802856000915b858310610a8d57505061087c9350820101610870565b8091929450548385880101520191018590858593610a77565b60ff19168482015261087c94151560051b84010191506108709050565b92607f169261084f565b602183634e487b7160e01b6000525260246000fd5b602182634e487b7160e01b6000525260246000fd5b60005b838110610b0a5750506000910152565b8181015183820152602001610afa565b90602091610b3381518092818552858086019101610af7565b601f01601f1916010190565b610b7b9160018060a01b0382511681526040610b6a6020840151606060208501526060840190610b1a565b920151906040818403910152610b1a565b90565b9060088210156104d85752565b90815191610b9a828451610b7e565b60208301519060058210156104d857610be260a0610b7b95604094602087015284810151858701526060810151606087015260808101516080870152015160a08501906104cb565b60a06020820151600180831b038082511660c087015260208201511660e086015283810151610100860152606081015161012086015260808101516101408601520151610160840152015190610c4e6101a0806101808401526060845191840152610200830190610b1a565b906101e06040610c7260208601519461019f199586868303016101c0870152610b1a565b9401519282850301910152610b1a565b90816020910312610ca157516001600160a01b0381168103610ca15790565b600080fd5b60ff6008541660038110156104d85760018103610d2a575060155460405163f77800e560e01b815290602090829060049082906001600160a01b03165afa908115610d1e57600091610cf6575090565b610b7b915060203d8111610d17575b610d0f8183610558565b810190610c82565b503d610d05565b6040513d6000823e3d90fd5b600203610d6957601554604051635f117aa360e11b815290602090829060049082906001600160a01b03165afa908115610d1e57600091610cf6575090565b600090565b60405190610d7b8261053c565b8160a06000918281528260208201528260408201528260608201528260808201520152565b67ffffffffffffffff811161050a57601f01601f191660200190565b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000080821015610f16575b506d04ee2d6d415b85acef810000000080831015610f07575b50662386f26fc1000080831015610ef8575b506305f5e10080831015610ee9575b5061271080831015610eda575b506064821015610eca575b600a80921015610ec0575b60019081602181860195610e5587610da0565b96610e636040519889610558565b808852610e72601f1991610da0565b01366020890137860101905b610e8a575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a835304918215610ebb57919082610e7e565b610e83565b9160010191610e42565b9190606460029104910191610e37565b60049193920491019138610e2c565b60089193920491019138610e1f565b60109193920491019138610e10565b60209193920491019138610dfe565b604093508104915038610de556fea2646970667358221220cecb7a680656fc1f33f0ddd0516359eb9141e923738ba34b1f302ed44e433fb164736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x1F JUMPI JUMPDEST POP POP CALLDATASIZE ISZERO PUSH2 0x1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST STOP JUMPDEST PUSH1 0x0 SWAP2 DUP3 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x10A38F5 EQ PUSH2 0x4AB JUMPI POP DUP1 PUSH4 0x5C1F502 EQ PUSH2 0x463 JUMPI DUP1 PUSH4 0x17906C2E EQ PUSH2 0x445 JUMPI DUP1 PUSH4 0x4E69D560 EQ PUSH2 0x41D JUMPI DUP1 PUSH4 0x54FD4D50 EQ PUSH2 0x323 JUMPI DUP1 PUSH4 0x5AD4E170 EQ PUSH2 0x2F6 JUMPI DUP1 PUSH4 0x729E2EB1 EQ PUSH2 0x1E0 JUMPI DUP1 PUSH4 0x8C6838BA EQ PUSH2 0x107 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xE0 JUMPI DUP1 PUSH4 0xD24E0C87 EQ PUSH2 0xC2 JUMPI PUSH4 0xFAEB5E17 SUB PUSH2 0x10 JUMPI CALLVALUE PUSH2 0xBE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xBE JUMPI PUSH1 0x20 SWAP1 PUSH1 0xB SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0xBE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xBE JUMPI PUSH1 0x20 SWAP1 PUSH1 0xC SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0xBE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xBE JUMPI SWAP1 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x1DD JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1DD JUMPI PUSH2 0x1D9 DUP3 MLOAD PUSH2 0x127 DUP2 PUSH2 0x4EE JUMP JUMPDEST DUP4 MLOAD SWAP3 PUSH2 0x133 DUP5 PUSH2 0x520 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x60 SWAP1 PUSH1 0x20 SWAP4 DUP3 DUP6 DUP3 ADD MSTORE DUP3 DUP7 DUP3 ADD MSTORE DUP2 MSTORE DUP4 DUP6 MLOAD SWAP2 PUSH2 0x154 DUP4 PUSH2 0x520 JUMP JUMPDEST PUSH2 0x15C PUSH2 0xD6E JUMP JUMPDEST DUP4 MSTORE PUSH2 0x166 PUSH2 0xD6E JUMP JUMPDEST DUP3 DUP5 ADD MSTORE DUP7 MLOAD PUSH2 0x175 DUP2 PUSH2 0x520 JUMP JUMPDEST DUP5 DUP2 MSTORE DUP5 DUP4 DUP3 ADD MSTORE DUP5 DUP9 DUP3 ADD MSTORE DUP8 DUP5 ADD MSTORE ADD MSTORE DUP4 PUSH2 0x1C6 DUP2 MLOAD SWAP5 PUSH2 0x198 DUP7 PUSH2 0x4EE JUMP JUMPDEST PUSH2 0x1A0 PUSH2 0x57A JUMP JUMPDEST DUP7 MSTORE PUSH2 0x1AA PUSH2 0x771 JUMP JUMPDEST SWAP4 DUP2 DUP8 ADD SWAP5 DUP6 MSTORE DUP4 MLOAD SWAP8 DUP9 SWAP8 DUP4 DUP10 MSTORE MLOAD SWAP3 DUP9 ADD MSTORE DUP7 ADD SWAP1 PUSH2 0xB3F JUMP JUMPDEST SWAP2 MLOAD SWAP1 PUSH1 0x1F NOT DUP6 DUP5 SUB ADD SWAP1 DUP6 ADD MSTORE PUSH2 0xB8B JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0xBE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xBE JUMPI DUP1 MLOAD SWAP1 DUP3 SWAP1 PUSH1 0xF SLOAD SWAP2 PUSH1 0x1 DUP4 DUP2 SHR SWAP1 DUP1 DUP6 AND SWAP7 DUP8 ISZERO PUSH2 0x2EC JUMPI JUMPDEST PUSH1 0x20 SWAP6 DUP7 DUP5 LT DUP10 EQ PUSH2 0x2D8 JUMPI DUP7 DUP9 SWAP10 DUP6 DUP11 SWAP9 SWAP10 SWAP11 MSTORE SWAP2 DUP3 PUSH1 0x0 EQ PUSH2 0x2B1 JUMPI POP POP PUSH1 0x1 EQ PUSH2 0x255 JUMPI JUMPDEST POP POP POP PUSH2 0x1D9 SWAP3 SWAP2 PUSH2 0x246 SWAP2 SUB DUP6 PUSH2 0x558 JUMP JUMPDEST MLOAD SWAP3 DUP3 DUP5 SWAP4 DUP5 MSTORE DUP4 ADD SWAP1 PUSH2 0xB1A JUMP JUMPDEST SWAP2 SWAP1 DUP7 SWAP4 POP PUSH1 0xF DUP4 MSTORE PUSH32 0x8D1108E10BCB7C27DDDFC02ED9D693A074039D026CF4EA4240B40F7D581AC802 JUMPDEST DUP3 DUP5 LT PUSH2 0x299 JUMPI POP POP POP DUP3 ADD ADD DUP2 PUSH2 0x246 PUSH2 0x1D9 PUSH2 0x233 JUMP JUMPDEST DUP1 SLOAD DUP5 DUP11 ADD DUP7 ADD MSTORE DUP9 SWAP6 POP DUP8 SWAP5 SWAP1 SWAP4 ADD SWAP3 DUP2 ADD PUSH2 0x280 JUMP JUMPDEST PUSH1 0xFF NOT AND DUP8 DUP3 ADD MSTORE SWAP4 ISZERO ISZERO PUSH1 0x5 SHL DUP7 ADD SWAP1 SWAP4 ADD SWAP4 POP DUP5 SWAP3 POP PUSH2 0x246 SWAP2 POP PUSH2 0x1D9 SWAP1 POP PUSH2 0x233 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x20B JUMP JUMPDEST POP CALLVALUE PUSH2 0xBE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xBE JUMPI PUSH1 0x20 SWAP1 PUSH2 0x312 PUSH2 0xCA6 JUMP JUMPDEST SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE RETURN JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x1DD JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1DD JUMPI POP PUSH2 0x35F PUSH32 0x0 PUSH2 0xDBC JUMP JUMPDEST PUSH2 0x1D9 PUSH2 0x38B PUSH32 0x0 PUSH2 0xDBC JUMP JUMPDEST SWAP3 PUSH2 0x246 PUSH1 0x22 PUSH2 0x3BA PUSH32 0x0 PUSH2 0xDBC JUMP JUMPDEST SWAP6 DUP4 MLOAD SWAP7 DUP8 SWAP2 DUP8 MLOAD PUSH2 0x3D4 DUP2 PUSH1 0x20 SWAP11 DUP12 DUP1 DUP9 ADD SWAP2 ADD PUSH2 0xAF7 JUMP JUMPDEST DUP4 ADD SWAP1 PUSH1 0x17 PUSH1 0xF9 SHL SWAP2 DUP3 DUP11 DUP3 ADD MSTORE PUSH2 0x3F5 DUP3 MLOAD DUP1 SWAP4 DUP13 PUSH1 0x21 DUP6 ADD SWAP2 ADD PUSH2 0xAF7 JUMP JUMPDEST ADD SWAP1 PUSH1 0x21 DUP3 ADD MSTORE PUSH2 0x40E DUP3 MLOAD DUP1 SWAP4 DUP11 DUP8 DUP6 ADD SWAP2 ADD PUSH2 0xAF7 JUMP JUMPDEST ADD SUB PUSH1 0x2 DUP2 ADD DUP8 MSTORE ADD DUP6 PUSH2 0x558 JUMP JUMPDEST POP CALLVALUE PUSH2 0xBE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xBE JUMPI PUSH1 0x20 SWAP1 PUSH2 0x443 PUSH1 0xFF PUSH1 0x4 SLOAD AND SWAP2 MLOAD DUP1 SWAP3 PUSH2 0xB7E JUMP JUMPDEST RETURN JUMPDEST POP CALLVALUE PUSH2 0xBE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xBE JUMPI PUSH1 0x20 SWAP1 PUSH1 0x13 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x1DD JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1DD JUMPI POP PUSH2 0x47E PUSH2 0x57A JUMP JUMPDEST SWAP1 PUSH2 0x1D9 PUSH2 0x48A PUSH2 0x771 JUMP JUMPDEST PUSH2 0x49D DUP4 MLOAD SWAP5 DUP5 DUP7 SWAP6 DUP7 MSTORE DUP6 ADD SWAP1 PUSH2 0xB3F JUMP JUMPDEST SWAP1 DUP4 DUP3 SUB PUSH1 0x20 DUP6 ADD MSTORE PUSH2 0xB8B JUMP JUMPDEST DUP4 SWAP1 CALLVALUE PUSH2 0xBE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xBE JUMPI DUP1 PUSH2 0x443 PUSH1 0x20 SWAP3 PUSH1 0xFF PUSH1 0x8 SLOAD AND JUMPDEST SWAP1 PUSH1 0x3 DUP3 LT ISZERO PUSH2 0x4D8 JUMPI MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x50A JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x60 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x50A JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0xC0 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x50A JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x50A JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x587 DUP3 PUSH2 0x520 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE PUSH1 0x40 MLOAD PUSH1 0x2 SLOAD DUP1 DUP4 AND SWAP3 DUP6 SWAP3 SWAP1 SWAP2 DUP1 DUP4 SHR SWAP1 PUSH1 0x0 SWAP1 DUP7 ISZERO PUSH2 0x767 JUMPI JUMPDEST PUSH1 0x20 SWAP7 DUP8 DUP5 LT DUP2 EQ PUSH2 0x753 JUMPI DUP4 DUP6 MSTORE DUP5 SWAP3 SWAP2 DUP9 SWAP1 DUP3 ISZERO PUSH2 0x736 JUMPI POP POP PUSH1 0x1 EQ PUSH2 0x6D8 JUMPI JUMPDEST PUSH2 0x5E2 SWAP3 POP SUB DUP3 PUSH2 0x558 JUMP JUMPDEST DUP4 DUP4 ADD MSTORE PUSH1 0x40 MLOAD SWAP3 PUSH1 0x0 SWAP2 PUSH1 0x3 SLOAD SWAP1 DUP2 DUP2 SHR SWAP2 DUP2 DUP2 AND DUP1 ISZERO PUSH2 0x6CE JUMPI JUMPDEST DUP5 DUP5 LT DUP2 EQ PUSH2 0x6BA JUMPI DUP4 DUP9 MSTORE DUP8 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 DUP2 ISZERO PUSH2 0x69B JUMPI POP PUSH1 0x1 EQ PUSH2 0x636 JUMPI JUMPDEST POP POP POP PUSH1 0x40 SWAP3 SWAP2 PUSH2 0x632 SWAP2 SUB DUP5 PUSH2 0x558 JUMP JUMPDEST ADD MSTORE JUMP JUMPDEST SWAP1 SWAP5 SWAP4 SWAP3 POP PUSH1 0x3 PUSH1 0x0 MSTORE PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B SWAP5 PUSH1 0x0 SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x683 JUMPI POP SWAP4 SWAP5 POP SWAP2 SWAP3 POP SWAP1 DUP3 ADD ADD DUP2 PUSH2 0x632 PUSH1 0x40 PUSH2 0x620 JUMP JUMPDEST DUP7 SLOAD DUP9 DUP5 ADD DUP6 ADD MSTORE SWAP6 DUP7 ADD SWAP6 DUP8 SWAP5 POP SWAP2 DUP4 ADD SWAP2 PUSH2 0x666 JUMP JUMPDEST PUSH1 0xFF NOT AND DUP5 DUP8 ADD MSTORE POP POP ISZERO ISZERO PUSH1 0x5 SHL DUP4 ADD ADD SWAP1 POP DUP2 PUSH2 0x632 PUSH1 0x40 PUSH2 0x620 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST SWAP3 PUSH1 0x7F AND SWAP3 PUSH2 0x5FF JUMP JUMPDEST POP POP PUSH1 0x2 PUSH1 0x0 MSTORE DUP2 DUP6 PUSH32 0x405787FA12A823E0F2B7631CC41B3BA8828B3321CA811111FA75CD3AA3BB5ACE DUP6 PUSH1 0x0 SWAP2 JUMPDEST DUP6 DUP4 LT PUSH2 0x71D JUMPI POP POP PUSH2 0x5E2 SWAP4 POP DUP3 ADD ADD PUSH2 0x5D6 JUMP JUMPDEST DUP1 SWAP2 SWAP3 SWAP5 POP SLOAD DUP4 DUP6 DUP9 ADD ADD MSTORE ADD SWAP2 ADD DUP7 SWAP1 DUP6 DUP6 SWAP4 PUSH2 0x707 JUMP JUMPDEST PUSH1 0xFF NOT AND DUP5 DUP3 ADD MSTORE PUSH2 0x5E2 SWAP5 ISZERO ISZERO PUSH1 0x5 SHL DUP5 ADD ADD SWAP2 POP PUSH2 0x5D6 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x5B2 JUMP JUMPDEST PUSH1 0x40 SWAP1 DUP2 MLOAD PUSH2 0x77F DUP2 PUSH2 0x520 JUMP JUMPDEST DUP1 SWAP3 DUP1 MLOAD SWAP2 PUSH2 0x78D DUP4 PUSH2 0x53C JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0xFF DUP2 AND PUSH1 0x8 DUP2 LT ISZERO PUSH2 0xACD JUMPI DUP6 MSTORE PUSH1 0x8 SHR PUSH1 0xFF AND SWAP4 PUSH1 0x5 DUP6 LT ISZERO PUSH2 0xAE2 JUMPI PUSH1 0x20 SWAP5 DUP6 DUP3 ADD MSTORE PUSH1 0x5 SLOAD DUP5 DUP3 ADD MSTORE PUSH1 0x6 SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x7 SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xFF PUSH1 0x8 SLOAD AND PUSH1 0x3 DUP2 LT ISZERO PUSH2 0xACD JUMPI PUSH1 0xA0 DUP3 ADD MSTORE DUP3 MSTORE DUP3 MLOAD PUSH2 0x7EF DUP2 PUSH2 0x53C JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0xA SLOAD AND DUP6 DUP3 ADD MSTORE PUSH1 0xB SLOAD DUP5 DUP3 ADD MSTORE PUSH1 0xC SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0xD SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xE SLOAD PUSH1 0xA0 DUP3 ADD MSTORE DUP3 DUP6 ADD MSTORE DUP3 MLOAD SWAP4 PUSH2 0x836 DUP6 PUSH2 0x520 JUMP JUMPDEST DUP4 MLOAD PUSH1 0x0 SWAP1 PUSH1 0xF SLOAD PUSH1 0x1 SWAP3 DUP2 DUP5 SHR SWAP2 DUP5 DUP2 AND DUP1 ISZERO PUSH2 0xAC3 JUMPI JUMPDEST DUP7 DUP5 LT DUP2 EQ PUSH2 0xA2B JUMPI DUP4 DUP6 MSTORE DUP5 SWAP3 SWAP2 DUP8 SWAP1 DUP3 ISZERO PUSH2 0xAA6 JUMPI POP POP PUSH1 0x1 EQ PUSH2 0xA48 JUMPI JUMPDEST PUSH2 0x87C SWAP3 POP SUB DUP3 PUSH2 0x558 JUMP JUMPDEST DUP7 MSTORE DUP5 MLOAD PUSH1 0x0 PUSH1 0x10 SLOAD SWAP1 DUP2 DUP5 SHR SWAP2 DUP5 DUP2 AND DUP1 ISZERO PUSH2 0xA3E JUMPI JUMPDEST DUP7 DUP5 LT DUP2 EQ PUSH2 0xA2B JUMPI DUP4 DUP6 MSTORE DUP5 SWAP3 SWAP2 DUP8 SWAP1 DUP3 ISZERO PUSH2 0xA0E JUMPI POP POP PUSH1 0x1 EQ PUSH2 0x9B0 JUMPI JUMPDEST PUSH2 0x8C1 SWAP3 POP SUB DUP3 PUSH2 0x558 JUMP JUMPDEST DUP3 DUP8 ADD MSTORE DUP5 MLOAD SWAP3 PUSH1 0x0 SWAP2 PUSH1 0x11 SLOAD DUP1 DUP3 SHR SWAP3 DUP3 DUP3 AND SWAP1 DUP2 ISZERO PUSH2 0x9A6 JUMPI JUMPDEST DUP7 DUP6 LT DUP3 EQ PUSH2 0x993 JUMPI POP DUP4 DUP8 MSTORE DUP7 SWAP5 SWAP4 SWAP3 SWAP2 DUP2 ISZERO PUSH2 0x973 JUMPI POP PUSH1 0x1 EQ PUSH2 0x914 JUMPI JUMPDEST POP POP PUSH2 0x90C SWAP3 POP SUB DUP3 PUSH2 0x558 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE ADD MSTORE JUMP JUMPDEST SWAP1 SWAP4 SWAP2 POP PUSH1 0x11 PUSH1 0x0 MSTORE PUSH32 0x31ECC21A745E3968A04E9570E4425BC18FA8019C68028196B546D1669C200C68 SWAP4 PUSH1 0x0 SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x95B JUMPI POP POP PUSH2 0x90C SWAP4 POP DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x8FE JUMP JUMPDEST DUP6 SLOAD DUP8 DUP5 ADD DUP6 ADD MSTORE SWAP5 DUP6 ADD SWAP5 DUP7 SWAP5 POP SWAP2 DUP4 ADD SWAP2 PUSH2 0x943 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x90C SWAP5 SWAP3 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x8FE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x22 SWAP1 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST SWAP4 PUSH1 0x7F AND SWAP4 PUSH2 0x8DD JUMP JUMPDEST POP POP PUSH1 0x10 PUSH1 0x0 MSTORE DUP2 DUP5 PUSH32 0x1B6847DC741A1B0CD08D278845F9D819D87B734759AFB55FE2DE5CB82A9AE672 DUP6 PUSH1 0x0 SWAP2 JUMPDEST DUP6 DUP4 LT PUSH2 0x9F5 JUMPI POP POP PUSH2 0x8C1 SWAP4 POP DUP3 ADD ADD PUSH2 0x8B5 JUMP JUMPDEST DUP1 SWAP2 SWAP3 SWAP5 POP SLOAD DUP4 DUP6 DUP9 ADD ADD MSTORE ADD SWAP2 ADD DUP6 SWAP1 DUP6 DUP6 SWAP4 PUSH2 0x9DF JUMP JUMPDEST PUSH1 0xFF NOT AND DUP5 DUP3 ADD MSTORE PUSH2 0x8C1 SWAP5 ISZERO ISZERO PUSH1 0x5 SHL DUP5 ADD ADD SWAP2 POP PUSH2 0x8B5 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x22 DUP9 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST SWAP3 PUSH1 0x7F AND SWAP3 PUSH2 0x894 JUMP JUMPDEST POP POP PUSH1 0xF PUSH1 0x0 MSTORE DUP2 DUP5 PUSH32 0x8D1108E10BCB7C27DDDFC02ED9D693A074039D026CF4EA4240B40F7D581AC802 DUP6 PUSH1 0x0 SWAP2 JUMPDEST DUP6 DUP4 LT PUSH2 0xA8D JUMPI POP POP PUSH2 0x87C SWAP4 POP DUP3 ADD ADD PUSH2 0x870 JUMP JUMPDEST DUP1 SWAP2 SWAP3 SWAP5 POP SLOAD DUP4 DUP6 DUP9 ADD ADD MSTORE ADD SWAP2 ADD DUP6 SWAP1 DUP6 DUP6 SWAP4 PUSH2 0xA77 JUMP JUMPDEST PUSH1 0xFF NOT AND DUP5 DUP3 ADD MSTORE PUSH2 0x87C SWAP5 ISZERO ISZERO PUSH1 0x5 SHL DUP5 ADD ADD SWAP2 POP PUSH2 0x870 SWAP1 POP JUMP JUMPDEST SWAP3 PUSH1 0x7F AND SWAP3 PUSH2 0x84F JUMP JUMPDEST PUSH1 0x21 DUP4 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x21 DUP3 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0xB0A JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xAFA JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP2 PUSH2 0xB33 DUP2 MLOAD DUP1 SWAP3 DUP2 DUP6 MSTORE DUP6 DUP1 DUP7 ADD SWAP2 ADD PUSH2 0xAF7 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0xB7B SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP3 MLOAD AND DUP2 MSTORE PUSH1 0x40 PUSH2 0xB6A PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x60 PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x60 DUP5 ADD SWAP1 PUSH2 0xB1A JUMP JUMPDEST SWAP3 ADD MLOAD SWAP1 PUSH1 0x40 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0xB1A JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x8 DUP3 LT ISZERO PUSH2 0x4D8 JUMPI MSTORE JUMP JUMPDEST SWAP1 DUP2 MLOAD SWAP2 PUSH2 0xB9A DUP3 DUP5 MLOAD PUSH2 0xB7E JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD SWAP1 PUSH1 0x5 DUP3 LT ISZERO PUSH2 0x4D8 JUMPI PUSH2 0xBE2 PUSH1 0xA0 PUSH2 0xB7B SWAP6 PUSH1 0x40 SWAP5 PUSH1 0x20 DUP8 ADD MSTORE DUP5 DUP2 ADD MLOAD DUP6 DUP8 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x60 DUP8 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x80 DUP8 ADD MSTORE ADD MLOAD PUSH1 0xA0 DUP6 ADD SWAP1 PUSH2 0x4CB JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 DUP1 DUP4 SHL SUB DUP1 DUP3 MLOAD AND PUSH1 0xC0 DUP8 ADD MSTORE PUSH1 0x20 DUP3 ADD MLOAD AND PUSH1 0xE0 DUP7 ADD MSTORE DUP4 DUP2 ADD MLOAD PUSH2 0x100 DUP7 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH2 0x120 DUP7 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH2 0x140 DUP7 ADD MSTORE ADD MLOAD PUSH2 0x160 DUP5 ADD MSTORE ADD MLOAD SWAP1 PUSH2 0xC4E PUSH2 0x1A0 DUP1 PUSH2 0x180 DUP5 ADD MSTORE PUSH1 0x60 DUP5 MLOAD SWAP2 DUP5 ADD MSTORE PUSH2 0x200 DUP4 ADD SWAP1 PUSH2 0xB1A JUMP JUMPDEST SWAP1 PUSH2 0x1E0 PUSH1 0x40 PUSH2 0xC72 PUSH1 0x20 DUP7 ADD MLOAD SWAP5 PUSH2 0x19F NOT SWAP6 DUP7 DUP7 DUP4 SUB ADD PUSH2 0x1C0 DUP8 ADD MSTORE PUSH2 0xB1A JUMP JUMPDEST SWAP5 ADD MLOAD SWAP3 DUP3 DUP6 SUB ADD SWAP2 ADD MSTORE PUSH2 0xB1A JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0xCA1 JUMPI MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0xCA1 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xFF PUSH1 0x8 SLOAD AND PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x4D8 JUMPI PUSH1 0x1 DUP2 SUB PUSH2 0xD2A JUMPI POP PUSH1 0x15 SLOAD PUSH1 0x40 MLOAD PUSH4 0xF77800E5 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x4 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xD1E JUMPI PUSH1 0x0 SWAP2 PUSH2 0xCF6 JUMPI POP SWAP1 JUMP JUMPDEST PUSH2 0xB7B SWAP2 POP PUSH1 0x20 RETURNDATASIZE DUP2 GT PUSH2 0xD17 JUMPI JUMPDEST PUSH2 0xD0F DUP2 DUP4 PUSH2 0x558 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0xC82 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xD05 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x2 SUB PUSH2 0xD69 JUMPI PUSH1 0x15 SLOAD PUSH1 0x40 MLOAD PUSH4 0x5F117AA3 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x4 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0xD1E JUMPI PUSH1 0x0 SWAP2 PUSH2 0xCF6 JUMPI POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0xD7B DUP3 PUSH2 0x53C JUMP JUMPDEST DUP2 PUSH1 0xA0 PUSH1 0x0 SWAP2 DUP3 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE DUP3 PUSH1 0x80 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x50A JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP1 PUSH1 0x0 SWAP2 PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP1 DUP3 LT ISZERO PUSH2 0xF16 JUMPI JUMPDEST POP PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP1 DUP4 LT ISZERO PUSH2 0xF07 JUMPI JUMPDEST POP PUSH7 0x2386F26FC10000 DUP1 DUP4 LT ISZERO PUSH2 0xEF8 JUMPI JUMPDEST POP PUSH4 0x5F5E100 DUP1 DUP4 LT ISZERO PUSH2 0xEE9 JUMPI JUMPDEST POP PUSH2 0x2710 DUP1 DUP4 LT ISZERO PUSH2 0xEDA JUMPI JUMPDEST POP PUSH1 0x64 DUP3 LT ISZERO PUSH2 0xECA JUMPI JUMPDEST PUSH1 0xA DUP1 SWAP3 LT ISZERO PUSH2 0xEC0 JUMPI JUMPDEST PUSH1 0x1 SWAP1 DUP2 PUSH1 0x21 DUP2 DUP7 ADD SWAP6 PUSH2 0xE55 DUP8 PUSH2 0xDA0 JUMP JUMPDEST SWAP7 PUSH2 0xE63 PUSH1 0x40 MLOAD SWAP9 DUP10 PUSH2 0x558 JUMP JUMPDEST DUP1 DUP9 MSTORE PUSH2 0xE72 PUSH1 0x1F NOT SWAP2 PUSH2 0xDA0 JUMP JUMPDEST ADD CALLDATASIZE PUSH1 0x20 DUP10 ADD CALLDATACOPY DUP7 ADD ADD SWAP1 JUMPDEST PUSH2 0xE8A JUMPI JUMPDEST POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 NOT ADD SWAP1 DUP4 SWAP1 PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP3 DUP3 MOD BYTE DUP4 MSTORE8 DIV SWAP2 DUP3 ISZERO PUSH2 0xEBB JUMPI SWAP2 SWAP1 DUP3 PUSH2 0xE7E JUMP JUMPDEST PUSH2 0xE83 JUMP JUMPDEST SWAP2 PUSH1 0x1 ADD SWAP2 PUSH2 0xE42 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x64 PUSH1 0x2 SWAP2 DIV SWAP2 ADD SWAP2 PUSH2 0xE37 JUMP JUMPDEST PUSH1 0x4 SWAP2 SWAP4 SWAP3 DIV SWAP2 ADD SWAP2 CODESIZE PUSH2 0xE2C JUMP JUMPDEST PUSH1 0x8 SWAP2 SWAP4 SWAP3 DIV SWAP2 ADD SWAP2 CODESIZE PUSH2 0xE1F JUMP JUMPDEST PUSH1 0x10 SWAP2 SWAP4 SWAP3 DIV SWAP2 ADD SWAP2 CODESIZE PUSH2 0xE10 JUMP JUMPDEST PUSH1 0x20 SWAP2 SWAP4 SWAP3 DIV SWAP2 ADD SWAP2 CODESIZE PUSH2 0xDFE JUMP JUMPDEST PUSH1 0x40 SWAP4 POP DUP2 DIV SWAP2 POP CODESIZE PUSH2 0xDE5 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCE 0xCB PUSH27 0x680656FC1F33F0DDD0516359EB9141E923738BA34B1F302ED44E43 EXTCODEHASH 0xB1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"423:3069:24:-:0;;;;;;;;;;;-1:-1:-1;423:3069:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3094:26;423:3069;;;;;;;;;;;;;;;;;;;;;;;;;;2975:28;423:3069;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;423:3069:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;3316:18;423:3069;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;3316:18;423:3069;;;;;;;;;-1:-1:-1;;;423:3069:24;;;;;;;;;;;;;;;;;;;-1:-1:-1;423:3069:24;;;;;;;;;;;-1:-1:-1;;423:3069:24;;;;;;;;;;;;;;;;-1:-1:-1;423:3069:24;;-1:-1:-1;423:3069:24;;-1:-1:-1;423:3069:24;;-1:-1:-1;423:3069:24;;;-1:-1:-1;;;423:3069:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;423:3069:24;;;;;;;;;;;;;;;;;;;;1063:6:32;1046:24;1063:6;1046:24;:::i;:::-;423:3069:24;1117:24:32;1134:6;1117:24;:::i;:::-;1205:5;1008:221;423:3069:24;1188:23:32;1205:5;1188:23;:::i;:::-;423:3069:24;;;;;;;;;1008:221:32;;;;;;;423:3069:24;;;:::i;:::-;;;;-1:-1:-1;;;423:3069:24;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;:::i;:::-;;1008:221:32;;;;;;;;;:::i;423:3069:24:-;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;3203:18;423:3069;;;;;;;;;;;;;;;;;;;;;529:27;;;:::i;:::-;;423:3069;529:27;;:::i;:::-;423:3069;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2267:30;423:3069;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;423:3069:24;;;;;-1:-1:-1;423:3069:24;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::i;:::-;529:27;423:3069;;-1:-1:-1;;;;;423:3069:24;;;;;;;;;;;;;529:27;;423:3069;;;;-1:-1:-1;;423:3069:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;423:3069:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;-1:-1:-1;423:3069:24;;;-1:-1:-1;423:3069:24;;;;;;;-1:-1:-1;423:3069:24;;-1:-1:-1;423:3069:24;;-1:-1:-1;423:3069:24;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;423:3069:24;;;;;;;-1:-1:-1;;423:3069:24;;;;;-1:-1:-1;;423:3069:24;;;;;;;;-1:-1:-1;423:3069:24;;;;;;-1:-1:-1;;;423:3069:24;;;;;;;;;;;;;;;;;;;-1:-1:-1;423:3069:24;;;;;-1:-1:-1;423:3069:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;423:3069:24;;;;;;;;;;;;;;;-1:-1:-1;423:3069:24;;-1:-1:-1;423:3069:24;;-1:-1:-1;;;423:3069:24;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;423:3069:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;423:3069:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;423:3069:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;423:3069:24;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;423:3069:24;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::o;:::-;;;;;;-1:-1:-1;423:3069:24;;;-1:-1:-1;423:3069:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;423:3069:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;423:3069:24;;;;;;;;;;;;;;;;;;;-1:-1:-1;423:3069:24;;;;;-1:-1:-1;423:3069:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;423:3069:24;;;;;;;;;;;;;;;-1:-1:-1;423:3069:24;;-1:-1:-1;423:3069:24;;-1:-1:-1;;;423:3069:24;;;;;;;;;;;;;;;;;;;-1:-1:-1;423:3069:24;;;;;-1:-1:-1;423:3069:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;423:3069:24;;;;;;;;;;;;;;;-1:-1:-1;423:3069:24;;-1:-1:-1;423:3069:24;;;;;;;;;;;;;;-1:-1:-1;423:3069:24;;;-1:-1:-1;423:3069:24;;;;;;;-1:-1:-1;423:3069:24;;;-1:-1:-1;423:3069:24;;;;;;;;;-1:-1:-1;;423:3069:24;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;423:3069:24;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;423:3069:24;;;;;;;:::o;:::-;-1:-1:-1;423:3069:24;;2310:431;423:3069;2383:30;423:3069;;;;;;;;2383:4;:56;;:4;;-1:-1:-1;2483:24:24;423:3069;;;-1:-1:-1;;;2462:58:24;;423:3069;2462:58;;423:3069;;2383:13;;423:3069;;-1:-1:-1;;;;;423:3069:24;2462:58;;;;;;;-1:-1:-1;2462:58:24;;;2455:65;;:::o;2462:58::-;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;423:3069;;;-1:-1:-1;423:3069:24;;;;;2379:356;2575:21;2541:55;2575:21;;2640:24;423:3069;;;-1:-1:-1;;;2619:57:24;;423:3069;2619:57;;423:3069;;2383:13;;423:3069;;-1:-1:-1;;;;;423:3069:24;2619:57;;;;;;;-1:-1:-1;2619:57:24;;;2612:64;;:::o;2537:198::-;-1:-1:-1;2707:17:24;:::o;423:3069::-;;;;;;;:::i;:::-;;;-1:-1:-1;423:3069:24;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;-1:-1:-1;;423:3069:24;;;;:::o;447:696:1:-;569:17;-1:-1:-1;10276:8:2;;10267:17;;;;10263:103;;447:696:1;10392:8:2;;10383:17;;;;10379:103;;447:696:1;10508:8:2;;10499:17;;;;10495:103;;447:696:1;10624:7:2;;10615:16;;;;10611:100;;447:696:1;10737:7:2;;10728:16;;;;10724:100;;447:696:1;10841:16:2;10850:7;10841:16;;;10837:100;;447:696:1;10963:7:2;10954:16;;;;10950:66;;447:696:1;589:1;423:3069:24;;731:76:1;423:3069:24;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;731:76:1;;;820:280;589:1;;;820:280;1113:13;;;;447:696;:::o;820:280::-;-1:-1:-1;;423:3069:24;;;;-1:-1:-1;;;925:93:1;;;;423:3069:24;925:93:1;423:3069:24;1035:11:1;;1068:10;1064:21;;820:280;;;;;1064:21;1080:5;;10950:66:2;423:3069:24;11000:1:2;423:3069:24;10950:66:2;;;10837:100;423:3069:24;;10850:7:2;10921:1;423:3069:24;;;;10837:100:2;;;10724;10808:1;423:3069:24;;;;;;10724:100:2;;;;10611;10695:1;423:3069:24;;;;;;10611:100:2;;;;10495:103;10581:2;423:3069:24;;;;;;10495:103:2;;;;10379;10465:2;423:3069:24;;;;;;10379:103:2;;;;10263;10349:2;;-1:-1:-1;423:3069:24;;;-1:-1:-1;10263:103:2;;"},"gasEstimates":{"creation":{"codeDepositCost":"786000","executionCost":"infinite","totalCost":"infinite"},"external":{"getEncryptedPost()":"infinite","getPaymentRequested()":"2470","getPost()":"infinite","getStakeRequested()":"2486","getStatus()":"2409","getTokenId()":"2325","getTokenIdAddress()":"infinite","owner()":"2469","post()":"infinite","postCount()":"2316","version()":"infinite"},"internal":{"_changeStatus(enum Structures.PostStatus)":"infinite","_checkToken(enum Structures.Tokens)":"infinite"}},"methodIdentifiers":{"getEncryptedPost()":"729e2eb1","getPaymentRequested()":"d24e0c87","getPost()":"8c6838ba","getStakeRequested()":"faeb5e17","getStatus()":"4e69d560","getTokenId()":"010a38f5","getTokenIdAddress()":"5ad4e170","owner()":"8da5cb5b","post()":"05c1f502","postCount()":"17906c2e","version()":"54fd4d50"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usersModuleContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factoryContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_major\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_patch\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"getEncryptedPost\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaymentRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPost\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.Post\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenIdAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"post\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This contract stores data related to Mecenate posts and provides functions to interact with it.\",\"kind\":\"dev\",\"methods\":{\"version()\":{\"returns\":{\"_0\":\"Semver contract version as a string.\"}}},\"title\":\"Data\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"version()\":{\"notice\":\"Returns the full semver contract version.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/Data.sol\":\"Data\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/helpers/eas/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror DeadlineExpired();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/// @notice A struct representing ECDSA signature data.\\nstruct Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/// @notice A struct representing a single attestation.\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/// @notice A helper function to work with unchecked iterators in loops.\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685\",\"license\":\"MIT\"},\"contracts/helpers/eas/IEAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ISchemaRegistry} from \\\"./ISchemaRegistry.sol\\\";\\nimport {Attestation, Signature} from \\\"./Common.sol\\\";\\n\\n/// @notice A struct representing the arguments of the attestation request.\\nstruct AttestationRequestData {\\n    address recipient; // The recipient of the attestation.\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes32 refUID; // The UID of the related attestation.\\n    bytes data; // Custom attestation data.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the attestation request.\\nstruct AttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the full delegated attestation request.\\nstruct DelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n    Signature signature; // The ECDSA signature data.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi attestation request.\\nstruct MultiAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi attestation request.\\nstruct MultiDelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the arguments of the revocation request.\\nstruct RevocationRequestData {\\n    bytes32 uid; // The UID of the attestation to revoke.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the revocation request.\\nstruct RevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the arguments of the full delegated revocation request.\\nstruct DelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n    Signature signature; // The ECDSA signature data.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi revocation request.\\nstruct MultiRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi revocation request.\\nstruct MultiDelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @title IEAS\\n/// @notice EAS - Ethereum Attestation Service interface.\\ninterface IEAS {\\n    /// @notice Emitted when an attestation has been made.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param uid The UID the revoked attestation.\\n    /// @param schemaUID The UID of the schema.\\n    event Attested(\\n        address indexed recipient,\\n        address indexed attester,\\n        bytes32 uid,\\n        bytes32 indexed schemaUID\\n    );\\n\\n    /// @notice Emitted when an attestation has been revoked.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param schemaUID The UID of the schema.\\n    /// @param uid The UID the revoked attestation.\\n    event Revoked(\\n        address indexed recipient,\\n        address indexed attester,\\n        bytes32 uid,\\n        bytes32 indexed schemaUID\\n    );\\n\\n    /// @notice Emitted when a data has been timestamped.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event Timestamped(bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /// @notice Emitted when a data has been revoked.\\n    /// @param revoker The address of the revoker.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event RevokedOffchain(\\n        address indexed revoker,\\n        bytes32 indexed data,\\n        uint64 indexed timestamp\\n    );\\n\\n    /// @notice Returns the address of the global schema registry.\\n    /// @return The address of the global schema registry.\\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\\n\\n    /// @notice Attests to a specific schema.\\n    /// @param request The arguments of the attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attest({\\n    ///         schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",\\n    ///         data: {\\n    ///             recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n    ///             data: \\\"0xF00D\\\",\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function attest(\\n        AttestationRequest calldata request\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attestByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function attestByDelegation(\\n        DelegatedAttestationRequest calldata delegatedRequest\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to multiple schemas.\\n    /// @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttest([{\\n    ///         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\\n    ///             data: '0x12345678',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiAttest(\\n        MultiAttestationRequest[] calldata multiRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Attests to multiple schemas using via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\\n    ///     grouped by distinct schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttestByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiAttestByDelegation(\\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Revokes an existing attestation to a specific schema.\\n    /// @param request The arguments of the revocation request.\\n    ///\\n    /// Example:\\n    ///     revoke({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function revoke(RevocationRequest calldata request) external payable;\\n\\n    /// @notice Revokes an existing attestation to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated revocation request.\\n    ///\\n    /// Example:\\n    ///     revokeByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 27,\\n    ///             r: '0xb593...7142',\\n    ///             s: '0x0f5b...2cce'\\n    ///         },\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function revokeByDelegation(\\n        DelegatedRevocationRequest calldata delegatedRequest\\n    ) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas.\\n    /// @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevoke([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiRevoke(\\n        MultiRevocationRequest[] calldata multiRequests\\n    ) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests\\n    ///     should be grouped by distinct schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevokeByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiRevokeByDelegation(\\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\\n    ) external payable;\\n\\n    /// @notice Timestamps the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function timestamp(bytes32 data) external returns (uint64);\\n\\n    /// @notice Timestamps the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\\n\\n    /// @notice Revokes the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function revokeOffchain(bytes32 data) external returns (uint64);\\n\\n    /// @notice Revokes the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function multiRevokeOffchain(\\n        bytes32[] calldata data\\n    ) external returns (uint64);\\n\\n    /// @notice Returns an existing attestation by UID.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return The attestation data members.\\n    function getAttestation(\\n        bytes32 uid\\n    ) external view returns (Attestation memory);\\n\\n    /// @notice Checks whether an attestation exists.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return Whether an attestation exists.\\n    function isAttestationValid(bytes32 uid) external view returns (bool);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getTimestamp(bytes32 data) external view returns (uint64);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getRevokeOffchain(\\n        address revoker,\\n        bytes32 data\\n    ) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xc95cca3d90dbae3a21d0f0e28fdf38cc5a85cbd8c760b7759782b18e8f62acc2\",\"license\":\"MIT\"},\"contracts/helpers/eas/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ISchemaResolver} from \\\"./ISchemaResolver.sol\\\";\\n\\n/// @notice A struct representing a record for a submitted schema.\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\n/// @title ISchemaRegistry\\n/// @notice The interface of global attestation schemas for the Ethereum Attestation Service protocol.\\ninterface ISchemaRegistry {\\n    /// @notice Emitted when a new schema has been registered\\n    /// @param uid The schema UID.\\n    /// @param registerer The address of the account used to register the schema.\\n    /// @param schema The schema data.\\n    event Registered(\\n        bytes32 indexed uid,\\n        address indexed registerer,\\n        SchemaRecord schema\\n    );\\n\\n    /// @notice Submits and reserves a new schema\\n    /// @param schema The schema data schema.\\n    /// @param resolver An optional schema resolver.\\n    /// @param revocable Whether the schema allows revocations explicitly.\\n    /// @return The UID of the new schema.\\n    function register(\\n        string calldata schema,\\n        ISchemaResolver resolver,\\n        bool revocable\\n    ) external returns (bytes32);\\n\\n    /// @notice Returns an existing schema by UID\\n    /// @param uid The UID of the schema to retrieve.\\n    /// @return The schema data members.\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\\n\",\"keccak256\":\"0x743ddc248c97a78d34239035d1d9557a74dcaaa5b59a2aa66cea4eadabb8b2de\",\"license\":\"MIT\"},\"contracts/helpers/eas/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {Attestation} from \\\"./Common.sol\\\";\\n\\n/// @title ISchemaResolver\\n/// @notice The interface of an optional schema resolver.\\ninterface ISchemaResolver {\\n    /// @notice Checks if the resolver can be sent ETH.\\n    /// @return Whether the resolver supports ETH transfers.\\n    function isPayable() external pure returns (bool);\\n\\n    /// @notice Processes an attestation and verifies whether it's valid.\\n    /// @param attestation The new attestation.\\n    /// @return Whether the attestation is valid.\\n    function attest(\\n        Attestation calldata attestation\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes multiple attestations and verifies whether they are valid.\\n    /// @param attestations The new attestations.\\n    /// @param values Explicit ETH amounts which were sent with each attestation.\\n    /// @return Whether all the attestations are valid.\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\\n    /// @param attestation The existing attestation to be revoked.\\n    /// @return Whether the attestation can be revoked.\\n    function revoke(\\n        Attestation calldata attestation\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\\n    /// @param attestations The existing attestations to be revoked.\\n    /// @param values Explicit ETH amounts which were sent with each revocation.\\n    /// @return Whether the attestations can be revoked.\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0x97ec835833519c6c11c0fb097ea5bccd888e65f650590fdb643d937430bb4f03\",\"license\":\"MIT\"},\"contracts/interfaces/IMecenateFeed.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateFeed {\\n    function getPost() external view returns (Structures.Post memory);\\n\\n    function getTotalStaked() external view returns (uint256);\\n\\n    function postCount() external view returns (uint256);\\n\\n    function acceptPost(\\n        Structures.Tokens,\\n        uint256 _amount,\\n        address _funder,\\n        address _buyer\\n    ) external payable;\\n\\n    function getSellerStake() external view returns (uint256);\\n\\n    function getBuyerStake() external view returns (uint256);\\n\\n    function getPaymentRequested() external view returns (uint256);\\n\\n    function getStakeRequested() external view returns (uint256);\\n\\n    function getStatus() external view returns (Structures.PostStatus status);\\n\\n    function getTokenId() external view returns (Structures.Tokens tokenId);\\n\\n    function owner() external view returns (address);\\n\\n    function version() external view returns (string memory);\\n\\n    function getEncryptedPost() external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xe7a4b838d4f4540e4a8e3911c2afea70ebd9a2e87bd526eef13b203c2643a645\"},\"contracts/interfaces/IMecenateFeedFactory.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\ninterface IMecenateFeedFactory {\\n    function owner() external view returns (address payable);\\n\\n    function treasuryContract() external view returns (address payable);\\n\\n    function feeds() external view returns (address[] memory);\\n\\n    function contractCounter() external view returns (uint256);\\n\\n    function isFeed(address _feed) external view returns (bool);\\n\\n    function museToken() external view returns (address);\\n\\n    function wethToken() external view returns (address);\\n\\n    function daiToken() external view returns (address);\\n\\n    function router() external view returns (address);\\n\\n    function getRouterFee(uint8 tokenId) external view returns (uint24);\\n\\n    function burnEnabled() external view returns (bool);\\n\\n    function version() external view returns (string memory);\\n\\n    function easSchema() external view returns (bytes32);\\n\\n    function easContract() external view returns (address);\\n}\\n\",\"keccak256\":\"0x79da402b87332cbe8176ab1d0abd2c5369a0da30970743b86283e1a774eea776\"},\"contracts/interfaces/IMecenateTreasury.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateTreasury {\\r\\n    function globalFee() external view returns (uint256);\\r\\n\\r\\n    function fixedFee() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf544878bba8e01c837110d06eac56042957d59c593ba9083f686ef02aa9276a1\"},\"contracts/interfaces/IMecenateUsers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateUsers {\\n    function registerUser(bytes memory metadata) external;\\n\\n    function getUsers() external view returns (address[] memory);\\n\\n    function getUserCount() external view returns (uint256);\\n\\n    function getUserAt(uint256 index) external view returns (address);\\n\\n    function checkifUserExist(address userAddress) external view returns (bool);\\n\\n    function getPaginatedUsers(\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) external view returns (address[] memory);\\n\\n    function getUserMetadata(\\n        address userAddress\\n    ) external view returns (Structures.User memory);\\n\\n    function getUserPublicKey(\\n        address userAddress\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xf0ff65dbfea12d90cf106325b9478e31b284045327e5f0974db5374b8789e93c\",\"license\":\"MIT\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\n * @title Structures\\n * @dev This library defines various data structures used in the Mecenate platform.\\n */\\npragma solidity 0.8.19;\\n\\nlibrary Structures {\\n    enum PostStatus {\\n        Waiting,\\n        Proposed,\\n        Accepted,\\n        Submitted,\\n        Finalized,\\n        Punished,\\n        Revealed,\\n        Renounced\\n    }\\n\\n    enum Tokens {\\n        NaN,\\n        MUSE,\\n        DAI\\n    }\\n\\n    enum PostType {\\n        Text,\\n        Image,\\n        Video,\\n        Audio,\\n        File\\n    }\\n    enum PostDuration {\\n        OneDay,\\n        ThreeDays,\\n        OneWeek,\\n        TwoWeeks,\\n        OneMonth\\n    }\\n\\n    struct FeedSettings {\\n        uint256 punishmentRatio;\\n        uint256 postCount;\\n        address usersModuleContract;\\n        address factoryContract;\\n        address router;\\n        string version;\\n    }\\n\\n    struct FactorySettings {\\n        address treasuryContract;\\n        address usersModuleContract;\\n        address easContract;\\n        bytes32 easSchema;\\n        address museToken;\\n        address daiToken;\\n        address wethToken;\\n        address router;\\n    }\\n\\n    /**\\n     * @dev Struct representing a post on the Mecenate platform.\\n     */\\n    struct Post {\\n        User creator;\\n        PostData postdata;\\n    }\\n\\n    /**\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\n     */\\n    struct PostData {\\n        PostSettings settings;\\n        PostEscrow escrow;\\n        PostEncryptedData data;\\n    }\\n\\n    /**\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\n     */\\n    struct PostEncryptedData {\\n        bytes encryptedData;\\n        bytes encryptedKey;\\n        bytes decryptedData;\\n    }\\n\\n    /**\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettings {\\n        PostStatus status;\\n        PostType postType;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n        uint256 duration;\\n        Tokens tokenId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\n     */\\n    struct PostEscrow {\\n        address buyer;\\n        address seller;\\n        uint256 stake;\\n        uint256 payment;\\n        uint256 punishment;\\n        uint256 penalty;\\n    }\\n\\n    /**\\n     * @dev Struct representing a user on the Mecenate platform.\\n     */\\n    struct User {\\n        address evmAddress;\\n        bytes sismoVaultId;\\n        bytes publicKey;\\n    }\\n\\n    /**\\n     * @dev Struct representing a feed on the Mecenate platform.\\n     */\\n    struct Feed {\\n        address contractAddress;\\n        address owner;\\n        uint256 sellerStake;\\n        uint256 buyerStake;\\n        uint256 totalStake;\\n        uint256 postCount;\\n        uint256 paymentRequested;\\n        uint256 stakeRequested;\\n        PostStatus status;\\n        Tokens tokenId;\\n        string version;\\n    }\\n\\n    /**\\n     * @dev Struct representing a bay request on the Mecenate platform.\\n     */\\n    struct BayRequest {\\n        bytes request;\\n        uint256 payment;\\n        uint256 stake;\\n        address postAddress;\\n        bool accepted;\\n        uint256 postCount;\\n        Tokens tokenId;\\n        address buyerAddress;\\n    }\\n}\\n\",\"keccak256\":\"0xab56ad7506e91048fc9c6db9fd9510c42afa61d6b11a99a273bf975643307d8f\"},\"contracts/modules/Data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../interfaces/IMecenateFeed.sol\\\";\\nimport \\\"../interfaces/IMecenateUsers.sol\\\";\\nimport \\\"../interfaces/IMecenateTreasury.sol\\\";\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\nimport \\\"../helpers/eas/IEAS.sol\\\";\\nimport \\\"./Version.sol\\\";\\n\\n/**\\n * @title Data\\n * @dev This contract stores data related to Mecenate posts and provides functions to interact with it.\\n */\\ncontract Data is Version {\\n    bytes internal constant ZEROHASH = \\\"0x00\\\";\\n\\n    address public owner;\\n\\n    Structures.Post public post;\\n\\n    Structures.FeedSettings internal settings;\\n\\n    mapping(uint8 => uint256) internal postDurationToDays;\\n\\n    mapping(uint8 => bool) internal validStatuses;\\n\\n    constructor(\\n        address usersModuleContract,\\n        address factoryContract,\\n        uint256 _major,\\n        uint256 _minor,\\n        uint256 _patch\\n    ) Version(_major, _minor, _patch) {\\n        settings.punishmentRatio = 100000000000000000; // Constant value\\n        settings.postCount = 0; // Initialize postCount to 0\\n        settings.usersModuleContract = usersModuleContract;\\n        settings.factoryContract = msg.sender;\\n        settings.router = IMecenateFeedFactory(factoryContract).router();\\n        settings.version = _version();\\n\\n        post.postdata.settings.status = Structures.PostStatus.Waiting;\\n\\n        postDurationToDays[uint8(Structures.PostDuration.OneDay)] = 1 days;\\n        postDurationToDays[uint8(Structures.PostDuration.ThreeDays)] = 3 days;\\n        postDurationToDays[uint8(Structures.PostDuration.OneWeek)] = 7 days;\\n        postDurationToDays[uint8(Structures.PostDuration.TwoWeeks)] = 14 days;\\n        postDurationToDays[uint8(Structures.PostDuration.OneMonth)] = 30 days;\\n\\n        validStatuses[uint8(Structures.PostStatus.Waiting)] = true;\\n    }\\n\\n    function _changeStatus(Structures.PostStatus newStatus) internal {\\n        validStatuses[uint8(post.postdata.settings.status)] = false;\\n        validStatuses[uint8(newStatus)] = true;\\n        post.postdata.settings.status = newStatus;\\n    }\\n\\n    function getStatus() external view returns (Structures.PostStatus) {\\n        return post.postdata.settings.status;\\n    }\\n\\n    function getTokenId() external view returns (Structures.Tokens) {\\n        return post.postdata.settings.tokenId;\\n    }\\n\\n    function getTokenIdAddress() public view returns (address) {\\n        if (post.postdata.settings.tokenId == Structures.Tokens.MUSE) {\\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\\n        } else if (post.postdata.settings.tokenId == Structures.Tokens.DAI) {\\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    function _checkToken(Structures.Tokens _token) internal view {\\n        require(_token == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n    }\\n\\n    function getPaymentRequested() external view returns (uint256) {\\n        return post.postdata.escrow.payment;\\n    }\\n\\n    function getStakeRequested() external view returns (uint256) {\\n        return post.postdata.escrow.stake;\\n    }\\n\\n    function postCount() external view returns (uint256) {\\n        return settings.postCount;\\n    }\\n\\n    function getEncryptedPost() external view returns (bytes memory) {\\n        return post.postdata.data.encryptedData;\\n    }\\n\\n    function getPost() external view returns (Structures.Post memory) {\\n        return post;\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xb09086cdcab6dc2790f56df6a5808c7a48794c5519ea122f927c0a0684d1f2c6\",\"license\":\"MIT\"},\"contracts/modules/Version.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/// @title Semver\\n/// @notice A simple contract for managing contract versions.\\nabstract contract Version {\\n    // Contract's major version number.\\n    uint256 private immutable _major;\\n\\n    // Contract's minor version number.\\n    uint256 private immutable _minor;\\n\\n    // Contract's patch version number.\\n    uint256 private immutable _path;\\n\\n    /// @dev Create a new Semver instance.\\n    /// @param major Major version number.\\n    /// @param minor Minor version number.\\n    /// @param patch Patch version number.\\n    constructor(uint256 major, uint256 minor, uint256 patch) {\\n        _major = major;\\n        _minor = minor;\\n        _path = patch;\\n    }\\n\\n    /// @notice Returns the full semver contract version.\\n    /// @return Semver contract version as a string.\\n    function version() external view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    Strings.toString(_major),\\n                    \\\".\\\",\\n                    Strings.toString(_minor),\\n                    \\\".\\\",\\n                    Strings.toString(_path)\\n                )\\n            );\\n    }\\n\\n    function _version() internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    Strings.toString(_major),\\n                    \\\".\\\",\\n                    Strings.toString(_minor),\\n                    \\\".\\\",\\n                    Strings.toString(_path)\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xa99614da4eb0014c2756685061352b80325a07e4cb14f7c704ec2a62e182688f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3523,"contract":"contracts/modules/Data.sol:Data","label":"owner","offset":0,"slot":"0","type":"t_address"},{"astId":3526,"contract":"contracts/modules/Data.sol:Data","label":"post","offset":0,"slot":"1","type":"t_struct(Post)2574_storage"},{"astId":3529,"contract":"contracts/modules/Data.sol:Data","label":"settings","offset":0,"slot":"18","type":"t_struct(FeedSettings)2550_storage"},{"astId":3533,"contract":"contracts/modules/Data.sol:Data","label":"postDurationToDays","offset":0,"slot":"24","type":"t_mapping(t_uint8,t_uint256)"},{"astId":3537,"contract":"contracts/modules/Data.sol:Data","label":"validStatuses","offset":0,"slot":"25","type":"t_mapping(t_uint8,t_bool)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_enum(PostStatus)2521":{"encoding":"inplace","label":"enum Structures.PostStatus","numberOfBytes":"1"},"t_enum(PostType)2531":{"encoding":"inplace","label":"enum Structures.PostType","numberOfBytes":"1"},"t_enum(Tokens)2525":{"encoding":"inplace","label":"enum Structures.Tokens","numberOfBytes":"1"},"t_mapping(t_uint8,t_bool)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint8,t_uint256)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(FeedSettings)2550_storage":{"encoding":"inplace","label":"struct Structures.FeedSettings","members":[{"astId":2539,"contract":"contracts/modules/Data.sol:Data","label":"punishmentRatio","offset":0,"slot":"0","type":"t_uint256"},{"astId":2541,"contract":"contracts/modules/Data.sol:Data","label":"postCount","offset":0,"slot":"1","type":"t_uint256"},{"astId":2543,"contract":"contracts/modules/Data.sol:Data","label":"usersModuleContract","offset":0,"slot":"2","type":"t_address"},{"astId":2545,"contract":"contracts/modules/Data.sol:Data","label":"factoryContract","offset":0,"slot":"3","type":"t_address"},{"astId":2547,"contract":"contracts/modules/Data.sol:Data","label":"router","offset":0,"slot":"4","type":"t_address"},{"astId":2549,"contract":"contracts/modules/Data.sol:Data","label":"version","offset":0,"slot":"5","type":"t_string_storage"}],"numberOfBytes":"192"},"t_struct(Post)2574_storage":{"encoding":"inplace","label":"struct Structures.Post","members":[{"astId":2570,"contract":"contracts/modules/Data.sol:Data","label":"creator","offset":0,"slot":"0","type":"t_struct(User)2627_storage"},{"astId":2573,"contract":"contracts/modules/Data.sol:Data","label":"postdata","offset":0,"slot":"3","type":"t_struct(PostData)2584_storage"}],"numberOfBytes":"544"},"t_struct(PostData)2584_storage":{"encoding":"inplace","label":"struct Structures.PostData","members":[{"astId":2577,"contract":"contracts/modules/Data.sol:Data","label":"settings","offset":0,"slot":"0","type":"t_struct(PostSettings)2607_storage"},{"astId":2580,"contract":"contracts/modules/Data.sol:Data","label":"escrow","offset":0,"slot":"5","type":"t_struct(PostEscrow)2620_storage"},{"astId":2583,"contract":"contracts/modules/Data.sol:Data","label":"data","offset":0,"slot":"11","type":"t_struct(PostEncryptedData)2591_storage"}],"numberOfBytes":"448"},"t_struct(PostEncryptedData)2591_storage":{"encoding":"inplace","label":"struct Structures.PostEncryptedData","members":[{"astId":2586,"contract":"contracts/modules/Data.sol:Data","label":"encryptedData","offset":0,"slot":"0","type":"t_bytes_storage"},{"astId":2588,"contract":"contracts/modules/Data.sol:Data","label":"encryptedKey","offset":0,"slot":"1","type":"t_bytes_storage"},{"astId":2590,"contract":"contracts/modules/Data.sol:Data","label":"decryptedData","offset":0,"slot":"2","type":"t_bytes_storage"}],"numberOfBytes":"96"},"t_struct(PostEscrow)2620_storage":{"encoding":"inplace","label":"struct Structures.PostEscrow","members":[{"astId":2609,"contract":"contracts/modules/Data.sol:Data","label":"buyer","offset":0,"slot":"0","type":"t_address"},{"astId":2611,"contract":"contracts/modules/Data.sol:Data","label":"seller","offset":0,"slot":"1","type":"t_address"},{"astId":2613,"contract":"contracts/modules/Data.sol:Data","label":"stake","offset":0,"slot":"2","type":"t_uint256"},{"astId":2615,"contract":"contracts/modules/Data.sol:Data","label":"payment","offset":0,"slot":"3","type":"t_uint256"},{"astId":2617,"contract":"contracts/modules/Data.sol:Data","label":"punishment","offset":0,"slot":"4","type":"t_uint256"},{"astId":2619,"contract":"contracts/modules/Data.sol:Data","label":"penalty","offset":0,"slot":"5","type":"t_uint256"}],"numberOfBytes":"192"},"t_struct(PostSettings)2607_storage":{"encoding":"inplace","label":"struct Structures.PostSettings","members":[{"astId":2594,"contract":"contracts/modules/Data.sol:Data","label":"status","offset":0,"slot":"0","type":"t_enum(PostStatus)2521"},{"astId":2597,"contract":"contracts/modules/Data.sol:Data","label":"postType","offset":1,"slot":"0","type":"t_enum(PostType)2531"},{"astId":2599,"contract":"contracts/modules/Data.sol:Data","label":"creationTimeStamp","offset":0,"slot":"1","type":"t_uint256"},{"astId":2601,"contract":"contracts/modules/Data.sol:Data","label":"endTimeStamp","offset":0,"slot":"2","type":"t_uint256"},{"astId":2603,"contract":"contracts/modules/Data.sol:Data","label":"duration","offset":0,"slot":"3","type":"t_uint256"},{"astId":2606,"contract":"contracts/modules/Data.sol:Data","label":"tokenId","offset":0,"slot":"4","type":"t_enum(Tokens)2525"}],"numberOfBytes":"160"},"t_struct(User)2627_storage":{"encoding":"inplace","label":"struct Structures.User","members":[{"astId":2622,"contract":"contracts/modules/Data.sol:Data","label":"evmAddress","offset":0,"slot":"0","type":"t_address"},{"astId":2624,"contract":"contracts/modules/Data.sol:Data","label":"sismoVaultId","offset":0,"slot":"1","type":"t_bytes_storage"},{"astId":2626,"contract":"contracts/modules/Data.sol:Data","label":"publicKey","offset":0,"slot":"2","type":"t_bytes_storage"}],"numberOfBytes":"96"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{"version()":{"notice":"Returns the full semver contract version."}},"version":1}}},"contracts/modules/Deposit.sol":{"Deposit":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenID","type":"uint8"},{"indexed":false,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newDeposit","type":"uint256"}],"name":"DepositDecreased","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenID","type":"uint8"},{"indexed":false,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newDeposit","type":"uint256"}],"name":"DepositIncreased","type":"event"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601357603a908160198239f35b600080fdfe600080fdfea264697066735822122070d07ad4e2822968f7f059f74991831c2cbd6b91c7ac07a2bbeeaec74324bb4a64736f6c63430008130033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x13 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x19 DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH17 0xD07AD4E2822968F7F059F74991831C2CBD PUSH12 0x91C7AC07A2BBEEAEC74324BB 0x4A PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"170:2199:25:-:0;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea264697066735822122070d07ad4e2822968f7f059f74991831c2cbd6b91c7ac07a2bbeeaec74324bb4a64736f6c63430008130033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH17 0xD07AD4E2822968F7F059F74991831C2CBD PUSH12 0x91C7AC07A2BBEEAEC74324BB 0x4A PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"170:2199:25:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"69","totalCost":"11669"},"internal":{"_clearDeposit(enum Structures.Tokens,address)":"infinite","_decreaseDeposit(enum Structures.Tokens,address,uint256)":"infinite","_getDeposit(enum Structures.Tokens,address)":"infinite","_increaseDeposit(enum Structures.Tokens,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDeposit\",\"type\":\"uint256\"}],\"name\":\"DepositDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDeposit\",\"type\":\"uint256\"}],\"name\":\"DepositIncreased\",\"type\":\"event\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/Deposit.sol\":\"Deposit\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/helpers/eas/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror DeadlineExpired();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/// @notice A struct representing ECDSA signature data.\\nstruct Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/// @notice A struct representing a single attestation.\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/// @notice A helper function to work with unchecked iterators in loops.\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685\",\"license\":\"MIT\"},\"contracts/helpers/eas/IEAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ISchemaRegistry} from \\\"./ISchemaRegistry.sol\\\";\\nimport {Attestation, Signature} from \\\"./Common.sol\\\";\\n\\n/// @notice A struct representing the arguments of the attestation request.\\nstruct AttestationRequestData {\\n    address recipient; // The recipient of the attestation.\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes32 refUID; // The UID of the related attestation.\\n    bytes data; // Custom attestation data.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the attestation request.\\nstruct AttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the full delegated attestation request.\\nstruct DelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n    Signature signature; // The ECDSA signature data.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi attestation request.\\nstruct MultiAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi attestation request.\\nstruct MultiDelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the arguments of the revocation request.\\nstruct RevocationRequestData {\\n    bytes32 uid; // The UID of the attestation to revoke.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the revocation request.\\nstruct RevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the arguments of the full delegated revocation request.\\nstruct DelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n    Signature signature; // The ECDSA signature data.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi revocation request.\\nstruct MultiRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi revocation request.\\nstruct MultiDelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @title IEAS\\n/// @notice EAS - Ethereum Attestation Service interface.\\ninterface IEAS {\\n    /// @notice Emitted when an attestation has been made.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param uid The UID the revoked attestation.\\n    /// @param schemaUID The UID of the schema.\\n    event Attested(\\n        address indexed recipient,\\n        address indexed attester,\\n        bytes32 uid,\\n        bytes32 indexed schemaUID\\n    );\\n\\n    /// @notice Emitted when an attestation has been revoked.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param schemaUID The UID of the schema.\\n    /// @param uid The UID the revoked attestation.\\n    event Revoked(\\n        address indexed recipient,\\n        address indexed attester,\\n        bytes32 uid,\\n        bytes32 indexed schemaUID\\n    );\\n\\n    /// @notice Emitted when a data has been timestamped.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event Timestamped(bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /// @notice Emitted when a data has been revoked.\\n    /// @param revoker The address of the revoker.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event RevokedOffchain(\\n        address indexed revoker,\\n        bytes32 indexed data,\\n        uint64 indexed timestamp\\n    );\\n\\n    /// @notice Returns the address of the global schema registry.\\n    /// @return The address of the global schema registry.\\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\\n\\n    /// @notice Attests to a specific schema.\\n    /// @param request The arguments of the attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attest({\\n    ///         schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",\\n    ///         data: {\\n    ///             recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n    ///             data: \\\"0xF00D\\\",\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function attest(\\n        AttestationRequest calldata request\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attestByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function attestByDelegation(\\n        DelegatedAttestationRequest calldata delegatedRequest\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to multiple schemas.\\n    /// @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttest([{\\n    ///         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\\n    ///             data: '0x12345678',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiAttest(\\n        MultiAttestationRequest[] calldata multiRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Attests to multiple schemas using via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\\n    ///     grouped by distinct schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttestByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiAttestByDelegation(\\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Revokes an existing attestation to a specific schema.\\n    /// @param request The arguments of the revocation request.\\n    ///\\n    /// Example:\\n    ///     revoke({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function revoke(RevocationRequest calldata request) external payable;\\n\\n    /// @notice Revokes an existing attestation to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated revocation request.\\n    ///\\n    /// Example:\\n    ///     revokeByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 27,\\n    ///             r: '0xb593...7142',\\n    ///             s: '0x0f5b...2cce'\\n    ///         },\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function revokeByDelegation(\\n        DelegatedRevocationRequest calldata delegatedRequest\\n    ) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas.\\n    /// @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevoke([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiRevoke(\\n        MultiRevocationRequest[] calldata multiRequests\\n    ) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests\\n    ///     should be grouped by distinct schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevokeByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiRevokeByDelegation(\\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\\n    ) external payable;\\n\\n    /// @notice Timestamps the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function timestamp(bytes32 data) external returns (uint64);\\n\\n    /// @notice Timestamps the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\\n\\n    /// @notice Revokes the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function revokeOffchain(bytes32 data) external returns (uint64);\\n\\n    /// @notice Revokes the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function multiRevokeOffchain(\\n        bytes32[] calldata data\\n    ) external returns (uint64);\\n\\n    /// @notice Returns an existing attestation by UID.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return The attestation data members.\\n    function getAttestation(\\n        bytes32 uid\\n    ) external view returns (Attestation memory);\\n\\n    /// @notice Checks whether an attestation exists.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return Whether an attestation exists.\\n    function isAttestationValid(bytes32 uid) external view returns (bool);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getTimestamp(bytes32 data) external view returns (uint64);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getRevokeOffchain(\\n        address revoker,\\n        bytes32 data\\n    ) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xc95cca3d90dbae3a21d0f0e28fdf38cc5a85cbd8c760b7759782b18e8f62acc2\",\"license\":\"MIT\"},\"contracts/helpers/eas/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ISchemaResolver} from \\\"./ISchemaResolver.sol\\\";\\n\\n/// @notice A struct representing a record for a submitted schema.\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\n/// @title ISchemaRegistry\\n/// @notice The interface of global attestation schemas for the Ethereum Attestation Service protocol.\\ninterface ISchemaRegistry {\\n    /// @notice Emitted when a new schema has been registered\\n    /// @param uid The schema UID.\\n    /// @param registerer The address of the account used to register the schema.\\n    /// @param schema The schema data.\\n    event Registered(\\n        bytes32 indexed uid,\\n        address indexed registerer,\\n        SchemaRecord schema\\n    );\\n\\n    /// @notice Submits and reserves a new schema\\n    /// @param schema The schema data schema.\\n    /// @param resolver An optional schema resolver.\\n    /// @param revocable Whether the schema allows revocations explicitly.\\n    /// @return The UID of the new schema.\\n    function register(\\n        string calldata schema,\\n        ISchemaResolver resolver,\\n        bool revocable\\n    ) external returns (bytes32);\\n\\n    /// @notice Returns an existing schema by UID\\n    /// @param uid The UID of the schema to retrieve.\\n    /// @return The schema data members.\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\\n\",\"keccak256\":\"0x743ddc248c97a78d34239035d1d9557a74dcaaa5b59a2aa66cea4eadabb8b2de\",\"license\":\"MIT\"},\"contracts/helpers/eas/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {Attestation} from \\\"./Common.sol\\\";\\n\\n/// @title ISchemaResolver\\n/// @notice The interface of an optional schema resolver.\\ninterface ISchemaResolver {\\n    /// @notice Checks if the resolver can be sent ETH.\\n    /// @return Whether the resolver supports ETH transfers.\\n    function isPayable() external pure returns (bool);\\n\\n    /// @notice Processes an attestation and verifies whether it's valid.\\n    /// @param attestation The new attestation.\\n    /// @return Whether the attestation is valid.\\n    function attest(\\n        Attestation calldata attestation\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes multiple attestations and verifies whether they are valid.\\n    /// @param attestations The new attestations.\\n    /// @param values Explicit ETH amounts which were sent with each attestation.\\n    /// @return Whether all the attestations are valid.\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\\n    /// @param attestation The existing attestation to be revoked.\\n    /// @return Whether the attestation can be revoked.\\n    function revoke(\\n        Attestation calldata attestation\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\\n    /// @param attestations The existing attestations to be revoked.\\n    /// @param values Explicit ETH amounts which were sent with each revocation.\\n    /// @return Whether the attestations can be revoked.\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0x97ec835833519c6c11c0fb097ea5bccd888e65f650590fdb643d937430bb4f03\",\"license\":\"MIT\"},\"contracts/interfaces/IMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n// import IERC20 from openzeppelin\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMUSE is IERC20 {\\n    function increaseAllowance(\\n        address spender,\\n        uint256 addedValue\\n    ) external returns (bool);\\n\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 subtractedValue\\n    ) external returns (bool);\\n\\n    function mint(uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x8b0a4012a1cd0815460bb3d15278671589bb85003ff2c38315701b3f2228c633\"},\"contracts/interfaces/IMecenateFeed.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateFeed {\\n    function getPost() external view returns (Structures.Post memory);\\n\\n    function getTotalStaked() external view returns (uint256);\\n\\n    function postCount() external view returns (uint256);\\n\\n    function acceptPost(\\n        Structures.Tokens,\\n        uint256 _amount,\\n        address _funder,\\n        address _buyer\\n    ) external payable;\\n\\n    function getSellerStake() external view returns (uint256);\\n\\n    function getBuyerStake() external view returns (uint256);\\n\\n    function getPaymentRequested() external view returns (uint256);\\n\\n    function getStakeRequested() external view returns (uint256);\\n\\n    function getStatus() external view returns (Structures.PostStatus status);\\n\\n    function getTokenId() external view returns (Structures.Tokens tokenId);\\n\\n    function owner() external view returns (address);\\n\\n    function version() external view returns (string memory);\\n\\n    function getEncryptedPost() external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xe7a4b838d4f4540e4a8e3911c2afea70ebd9a2e87bd526eef13b203c2643a645\"},\"contracts/interfaces/IMecenateFeedFactory.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\ninterface IMecenateFeedFactory {\\n    function owner() external view returns (address payable);\\n\\n    function treasuryContract() external view returns (address payable);\\n\\n    function feeds() external view returns (address[] memory);\\n\\n    function contractCounter() external view returns (uint256);\\n\\n    function isFeed(address _feed) external view returns (bool);\\n\\n    function museToken() external view returns (address);\\n\\n    function wethToken() external view returns (address);\\n\\n    function daiToken() external view returns (address);\\n\\n    function router() external view returns (address);\\n\\n    function getRouterFee(uint8 tokenId) external view returns (uint24);\\n\\n    function burnEnabled() external view returns (bool);\\n\\n    function version() external view returns (string memory);\\n\\n    function easSchema() external view returns (bytes32);\\n\\n    function easContract() external view returns (address);\\n}\\n\",\"keccak256\":\"0x79da402b87332cbe8176ab1d0abd2c5369a0da30970743b86283e1a774eea776\"},\"contracts/interfaces/IMecenateTreasury.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateTreasury {\\r\\n    function globalFee() external view returns (uint256);\\r\\n\\r\\n    function fixedFee() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf544878bba8e01c837110d06eac56042957d59c593ba9083f686ef02aa9276a1\"},\"contracts/interfaces/IMecenateUsers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateUsers {\\n    function registerUser(bytes memory metadata) external;\\n\\n    function getUsers() external view returns (address[] memory);\\n\\n    function getUserCount() external view returns (uint256);\\n\\n    function getUserAt(uint256 index) external view returns (address);\\n\\n    function checkifUserExist(address userAddress) external view returns (bool);\\n\\n    function getPaginatedUsers(\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) external view returns (address[] memory);\\n\\n    function getUserMetadata(\\n        address userAddress\\n    ) external view returns (Structures.User memory);\\n\\n    function getUserPublicKey(\\n        address userAddress\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xf0ff65dbfea12d90cf106325b9478e31b284045327e5f0974db5374b8789e93c\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function withdraw(uint256) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xeb4bd6c56a346f12ec3d681183d613795c151709e834d69ef58f13fd6d7edf62\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\n * @title Structures\\n * @dev This library defines various data structures used in the Mecenate platform.\\n */\\npragma solidity 0.8.19;\\n\\nlibrary Structures {\\n    enum PostStatus {\\n        Waiting,\\n        Proposed,\\n        Accepted,\\n        Submitted,\\n        Finalized,\\n        Punished,\\n        Revealed,\\n        Renounced\\n    }\\n\\n    enum Tokens {\\n        NaN,\\n        MUSE,\\n        DAI\\n    }\\n\\n    enum PostType {\\n        Text,\\n        Image,\\n        Video,\\n        Audio,\\n        File\\n    }\\n    enum PostDuration {\\n        OneDay,\\n        ThreeDays,\\n        OneWeek,\\n        TwoWeeks,\\n        OneMonth\\n    }\\n\\n    struct FeedSettings {\\n        uint256 punishmentRatio;\\n        uint256 postCount;\\n        address usersModuleContract;\\n        address factoryContract;\\n        address router;\\n        string version;\\n    }\\n\\n    struct FactorySettings {\\n        address treasuryContract;\\n        address usersModuleContract;\\n        address easContract;\\n        bytes32 easSchema;\\n        address museToken;\\n        address daiToken;\\n        address wethToken;\\n        address router;\\n    }\\n\\n    /**\\n     * @dev Struct representing a post on the Mecenate platform.\\n     */\\n    struct Post {\\n        User creator;\\n        PostData postdata;\\n    }\\n\\n    /**\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\n     */\\n    struct PostData {\\n        PostSettings settings;\\n        PostEscrow escrow;\\n        PostEncryptedData data;\\n    }\\n\\n    /**\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\n     */\\n    struct PostEncryptedData {\\n        bytes encryptedData;\\n        bytes encryptedKey;\\n        bytes decryptedData;\\n    }\\n\\n    /**\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettings {\\n        PostStatus status;\\n        PostType postType;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n        uint256 duration;\\n        Tokens tokenId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\n     */\\n    struct PostEscrow {\\n        address buyer;\\n        address seller;\\n        uint256 stake;\\n        uint256 payment;\\n        uint256 punishment;\\n        uint256 penalty;\\n    }\\n\\n    /**\\n     * @dev Struct representing a user on the Mecenate platform.\\n     */\\n    struct User {\\n        address evmAddress;\\n        bytes sismoVaultId;\\n        bytes publicKey;\\n    }\\n\\n    /**\\n     * @dev Struct representing a feed on the Mecenate platform.\\n     */\\n    struct Feed {\\n        address contractAddress;\\n        address owner;\\n        uint256 sellerStake;\\n        uint256 buyerStake;\\n        uint256 totalStake;\\n        uint256 postCount;\\n        uint256 paymentRequested;\\n        uint256 stakeRequested;\\n        PostStatus status;\\n        Tokens tokenId;\\n        string version;\\n    }\\n\\n    /**\\n     * @dev Struct representing a bay request on the Mecenate platform.\\n     */\\n    struct BayRequest {\\n        bytes request;\\n        uint256 payment;\\n        uint256 stake;\\n        address postAddress;\\n        bool accepted;\\n        uint256 postCount;\\n        Tokens tokenId;\\n        address buyerAddress;\\n    }\\n}\\n\",\"keccak256\":\"0xab56ad7506e91048fc9c6db9fd9510c42afa61d6b11a99a273bf975643307d8f\"},\"contracts/modules/BurnDAI.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"./BurnMUSE.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"../interfaces/IWETH.sol\\\";\\n\\nabstract contract BurnDAI is BurnMUSE {\\n    using SafeMath for uint256;\\n\\n    function _burnFrom(\\n        address from,\\n        uint256 value\\n    ) internal override returns (bool success) {\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\n            .transferFrom(from, address(this), value);\\n\\n        _burn(value);\\n\\n        return true;\\n    }\\n\\n    function _burnDai(uint256 value) internal returns (bool success) {\\n        // approve uniswap for token transfer\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\n            .approve(settings.router, value);\\n\\n        // swap IMecenateFeedFactory(settings.factoryContract).daiToken() for MUSE\\n        uint256 tokens_sold = value;\\n\\n        uint256 tokens_bought = _swapTokensForToken(\\n            IMecenateFeedFactory(settings.factoryContract).daiToken(),\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\n            IMecenateFeedFactory(settings.factoryContract).getRouterFee(0),\\n            tokens_sold\\n        );\\n\\n        uint256 tokens_sold_to_muse = _swapTokensForToken(\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\n            IMecenateFeedFactory(settings.factoryContract).museToken(),\\n            IMecenateFeedFactory(settings.factoryContract).getRouterFee(1),\\n            tokens_bought\\n        );\\n\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).museToken())\\n            .approve(\\n                IMecenateFeedFactory(settings.factoryContract).museToken(),\\n                tokens_sold_to_muse\\n            );\\n\\n        // burn MUSE\\n        BurnMUSE._burn(tokens_sold_to_muse);\\n\\n        return true;\\n    }\\n\\n    function _burnWeth(uint256 value) internal returns (bool success) {\\n        // deposit IMecenateFeedFactory(settings.factoryContract).wethToken()\\n        IWETH(IMecenateFeedFactory(settings.factoryContract).wethToken())\\n            .deposit{value: value}();\\n\\n        // approve uniswap for token transfer\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).wethToken())\\n            .approve(settings.router, value);\\n\\n        // swap IMecenateFeedFactory(settings.factoryContract).wethToken() for MUSE\\n        uint256 tokens_sold = value;\\n\\n        uint256 tokens_bought = _swapTokensForToken(\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\n            IMecenateFeedFactory(settings.factoryContract).museToken(),\\n            IMecenateFeedFactory(settings.factoryContract).getRouterFee(1),\\n            tokens_sold\\n        );\\n\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).museToken())\\n            .approve(\\n                IMecenateFeedFactory(settings.factoryContract).museToken(),\\n                tokens_bought\\n            );\\n\\n        // burn MUSE\\n        BurnMUSE._burn(tokens_bought);\\n\\n        return true;\\n    }\\n\\n    function getTokenAddress()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address token)\\n    {\\n        return IMecenateFeedFactory(settings.factoryContract).daiToken();\\n    }\\n\\n    function getExchangeAddress()\\n        internal\\n        view\\n        override\\n        returns (address exchange)\\n    {\\n        exchange = settings.router;\\n    }\\n\\n    function _swapTokensForToken(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountIn\\n    ) internal returns (uint256 amountOut) {\\n        // Check and approve allowance\\n        uint256 allowance = IERC20(tokenIn).allowance(\\n            address(this),\\n            settings.router\\n        );\\n        if (allowance < amountIn) {\\n            IERC20(tokenIn).approve(settings.router, type(uint256).max);\\n        }\\n\\n        // Prepare parameters\\n        address recipient = address(this);\\n        uint256 deadline = block.timestamp + 60; // 15 seconds from the current block timestamp\\n\\n        // Perform the swap\\n        // Refer to the Uniswap V3 documentation for details on the params.\\n        amountOut = ISwapRouter(settings.router).exactInputSingle(\\n            ISwapRouter.ExactInputSingleParams({\\n                tokenIn: tokenIn,\\n                tokenOut: tokenOut,\\n                fee: fee,\\n                recipient: recipient,\\n                deadline: deadline,\\n                amountIn: amountIn,\\n                amountOutMinimum: 0, // you may want to set a minimum here\\n                sqrtPriceLimitX96: 0\\n            })\\n        );\\n\\n        return amountOut;\\n    }\\n}\\n\",\"keccak256\":\"0xa69462e962a3be48c3514c746d791c7a870247e8e441a2d7a11b5771ec8e0d23\"},\"contracts/modules/BurnMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\nimport \\\"../interfaces/IMUSE.sol\\\";\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\nimport \\\"./Events.sol\\\";\\n\\nabstract contract BurnMUSE is Events {\\n    function _burn(uint256 value) internal virtual returns (bool success) {\\n        IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken()).burn(\\n            value\\n        );\\n        return true;\\n    }\\n\\n    function _burnFrom(\\n        address from,\\n        uint256 value\\n    ) internal virtual returns (bool success) {\\n        IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken())\\n            .transferFrom(from, address(this), value);\\n        _burn(value);\\n        return true;\\n    }\\n\\n    function getTokenAddress() internal view virtual returns (address token) {\\n        return IMecenateFeedFactory(settings.factoryContract).museToken();\\n    }\\n\\n    function getExchangeAddress()\\n        internal\\n        view\\n        virtual\\n        returns (address exchange)\\n    {\\n        exchange = IMecenateFeedFactory(settings.factoryContract).router();\\n    }\\n}\\n\",\"keccak256\":\"0x052049c27f8e98f27fd3d237157e4700d5f5c313343d1cd734614beefa4ccfc6\"},\"contracts/modules/Data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../interfaces/IMecenateFeed.sol\\\";\\nimport \\\"../interfaces/IMecenateUsers.sol\\\";\\nimport \\\"../interfaces/IMecenateTreasury.sol\\\";\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\nimport \\\"../helpers/eas/IEAS.sol\\\";\\nimport \\\"./Version.sol\\\";\\n\\n/**\\n * @title Data\\n * @dev This contract stores data related to Mecenate posts and provides functions to interact with it.\\n */\\ncontract Data is Version {\\n    bytes internal constant ZEROHASH = \\\"0x00\\\";\\n\\n    address public owner;\\n\\n    Structures.Post public post;\\n\\n    Structures.FeedSettings internal settings;\\n\\n    mapping(uint8 => uint256) internal postDurationToDays;\\n\\n    mapping(uint8 => bool) internal validStatuses;\\n\\n    constructor(\\n        address usersModuleContract,\\n        address factoryContract,\\n        uint256 _major,\\n        uint256 _minor,\\n        uint256 _patch\\n    ) Version(_major, _minor, _patch) {\\n        settings.punishmentRatio = 100000000000000000; // Constant value\\n        settings.postCount = 0; // Initialize postCount to 0\\n        settings.usersModuleContract = usersModuleContract;\\n        settings.factoryContract = msg.sender;\\n        settings.router = IMecenateFeedFactory(factoryContract).router();\\n        settings.version = _version();\\n\\n        post.postdata.settings.status = Structures.PostStatus.Waiting;\\n\\n        postDurationToDays[uint8(Structures.PostDuration.OneDay)] = 1 days;\\n        postDurationToDays[uint8(Structures.PostDuration.ThreeDays)] = 3 days;\\n        postDurationToDays[uint8(Structures.PostDuration.OneWeek)] = 7 days;\\n        postDurationToDays[uint8(Structures.PostDuration.TwoWeeks)] = 14 days;\\n        postDurationToDays[uint8(Structures.PostDuration.OneMonth)] = 30 days;\\n\\n        validStatuses[uint8(Structures.PostStatus.Waiting)] = true;\\n    }\\n\\n    function _changeStatus(Structures.PostStatus newStatus) internal {\\n        validStatuses[uint8(post.postdata.settings.status)] = false;\\n        validStatuses[uint8(newStatus)] = true;\\n        post.postdata.settings.status = newStatus;\\n    }\\n\\n    function getStatus() external view returns (Structures.PostStatus) {\\n        return post.postdata.settings.status;\\n    }\\n\\n    function getTokenId() external view returns (Structures.Tokens) {\\n        return post.postdata.settings.tokenId;\\n    }\\n\\n    function getTokenIdAddress() public view returns (address) {\\n        if (post.postdata.settings.tokenId == Structures.Tokens.MUSE) {\\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\\n        } else if (post.postdata.settings.tokenId == Structures.Tokens.DAI) {\\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    function _checkToken(Structures.Tokens _token) internal view {\\n        require(_token == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n    }\\n\\n    function getPaymentRequested() external view returns (uint256) {\\n        return post.postdata.escrow.payment;\\n    }\\n\\n    function getStakeRequested() external view returns (uint256) {\\n        return post.postdata.escrow.stake;\\n    }\\n\\n    function postCount() external view returns (uint256) {\\n        return settings.postCount;\\n    }\\n\\n    function getEncryptedPost() external view returns (bytes memory) {\\n        return post.postdata.data.encryptedData;\\n    }\\n\\n    function getPost() external view returns (Structures.Post memory) {\\n        return post;\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xb09086cdcab6dc2790f56df6a5808c7a48794c5519ea122f927c0a0684d1f2c6\",\"license\":\"MIT\"},\"contracts/modules/Deposit.sol\":{\"content\":\"pragma solidity 0.8.19;\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./TokenManager.sol\\\";\\n\\ncontract Deposit {\\n    using SafeMath for uint256;\\n\\n    mapping(uint256 => mapping(address => uint256)) private _deposit;\\n\\n    event DepositIncreased(\\n        Structures.Tokens tokenID,\\n        address user,\\n        uint256 amount,\\n        uint256 newDeposit\\n    );\\n    event DepositDecreased(\\n        Structures.Tokens tokenID,\\n        address user,\\n        uint256 amount,\\n        uint256 newDeposit\\n    );\\n\\n    function _increaseDeposit(\\n        Structures.Tokens tokenID,\\n        address user,\\n        uint256 amountToAdd\\n    ) internal returns (uint256 newDeposit) {\\n        // calculate new deposit amount\\n        newDeposit = _deposit[uint256(tokenID)][user].add(amountToAdd);\\n\\n        // set new stake to storage\\n        _deposit[uint256(tokenID)][user] = newDeposit;\\n\\n        // emit event\\n        emit DepositIncreased(tokenID, user, amountToAdd, newDeposit);\\n\\n        // return\\n        return newDeposit;\\n    }\\n\\n    function _decreaseDeposit(\\n        Structures.Tokens tokenID,\\n        address user,\\n        uint256 amountToRemove\\n    ) internal returns (uint256 newDeposit) {\\n        // get current deposit\\n        uint256 currentDeposit = _deposit[uint256(tokenID)][user];\\n\\n        // check if sufficient deposit\\n        require(currentDeposit >= amountToRemove, \\\"INSUFFICIENT_DEPOSIT\\\");\\n\\n        // calculate new deposit amount\\n        newDeposit = currentDeposit.sub(amountToRemove);\\n\\n        // set new stake to storage\\n        _deposit[uint256(tokenID)][user] = newDeposit;\\n\\n        // emit event\\n        emit DepositDecreased(tokenID, user, amountToRemove, newDeposit);\\n\\n        // return\\n        return newDeposit;\\n    }\\n\\n    function _clearDeposit(\\n        Structures.Tokens tokenID,\\n        address user\\n    ) internal returns (uint256 amountRemoved) {\\n        // get current deposit\\n        uint256 currentDeposit = _deposit[uint256(tokenID)][user];\\n\\n        // remove deposit\\n        _decreaseDeposit(tokenID, user, currentDeposit);\\n\\n        // return\\n        return currentDeposit;\\n    }\\n\\n    function _getDeposit(\\n        Structures.Tokens tokenID,\\n        address user\\n    ) internal view returns (uint256 deposit) {\\n        return _deposit[uint256(tokenID)][user];\\n    }\\n}\\n\",\"keccak256\":\"0xbde50573d2e5a22daecdfdb1d457c4f50b7ea16e18a03eac04013ce10f269d36\"},\"contracts/modules/Events.sol\":{\"content\":\"/**\\r\\n * @title Events\\r\\n * @dev This abstract contract defines the events related to the Mecenate platform's post lifecycle.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./Data.sol\\\";\\r\\n\\r\\nabstract contract Events is Data {\\r\\n    event Created(Structures.Post post);\\r\\n    event Accepted(Structures.Post post);\\r\\n    event Valid(Structures.Post post);\\r\\n    event Invalid(Structures.Post post);\\r\\n    event Finalized(Structures.Post post);\\r\\n    event MadePublic(Structures.Post post);\\r\\n    event Renounced(Structures.Post post);\\r\\n}\\r\\n\",\"keccak256\":\"0x3aeaf067b1f9010a2456df46fb54d4727b3a24082b1446ac9266dbcdd8c838f6\"},\"contracts/modules/TokenManager.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"./BurnDAI.sol\\\";\\n\\nabstract contract TokenManager is BurnDAI {\\n    function _getTokenAddress(\\n        Structures.Tokens tokenID\\n    ) internal view returns (address) {\\n        if (tokenID == Structures.Tokens.DAI)\\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\\n        if (tokenID == Structures.Tokens.MUSE)\\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\\n        return address(0);\\n    }\\n\\n    function _checkAllowance(\\n        Structures.Tokens tokenID,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal view {\\n        address tokenAddress = _getTokenAddress(tokenID);\\n        require(\\n            IERC20(tokenAddress).allowance(from, to) >= value,\\n            \\\"INSUFFICIENT_ALLOWANCE\\\"\\n        );\\n    }\\n\\n    modifier onlyValidTokenID(Structures.Tokens tokenID) {\\n        require(\\n            tokenID == Structures.Tokens.MUSE ||\\n                tokenID == Structures.Tokens.DAI ||\\n                tokenID == Structures.Tokens.NaN,\\n            \\\"WRONG_TOKEN\\\"\\n        );\\n        _;\\n    }\\n\\n    function isValidTokenID(\\n        Structures.Tokens tokenID\\n    ) internal pure returns (bool validity) {\\n        return\\n            tokenID == Structures.Tokens.MUSE ||\\n            tokenID == Structures.Tokens.DAI;\\n    }\\n\\n    function _transfer(\\n        Structures.Tokens tokenID,\\n        address to,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        require(\\n            IERC20(_getTokenAddress(tokenID)).transfer(to, value),\\n            \\\"TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function _transferFrom(\\n        Structures.Tokens tokenID,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        address tokenAddress = _getTokenAddress(tokenID);\\n        _checkAllowance(tokenID, from, to, value);\\n        require(\\n            IERC20(tokenAddress).transferFrom(from, to, value),\\n            \\\"TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function _burn(\\n        Structures.Tokens tokenID,\\n        address _receiver,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) returns (bool success) {\\n        bool burnEnabled = IMecenateFeedFactory(settings.factoryContract)\\n            .burnEnabled();\\n\\n        if (burnEnabled == false) {\\n            if (tokenID == Structures.Tokens.NaN) {\\n                (bool result, ) = payable(_receiver).call{value: value}(\\\"\\\");\\n                require(result, \\\"CALL_FAILED\\\");\\n            } else {\\n                TokenManager._transfer(tokenID, _receiver, value);\\n            }\\n        } else {\\n            if (tokenID == Structures.Tokens.DAI) {\\n                _burnDai(value);\\n            } else if (tokenID == Structures.Tokens.MUSE) {\\n                _burn(value);\\n            } else if (tokenID == Structures.Tokens.NaN) {\\n                _burnWeth(value);\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    function _burnFrom(\\n        Structures.Tokens tokenID,\\n        address from,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        address treasury = IMecenateFeedFactory(settings.factoryContract)\\n            .treasuryContract();\\n\\n        if (tokenID == Structures.Tokens.DAI) {\\n            IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\n                .transferFrom(from, treasury, value);\\n        } else if (tokenID == Structures.Tokens.MUSE) {\\n            BurnMUSE._burnFrom(from, value);\\n        }\\n    }\\n\\n    function _approve(\\n        Structures.Tokens tokenID,\\n        address spender,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        if (tokenID == Structures.Tokens.DAI) {\\n            require(\\n                IERC20(\\n                    IMecenateFeedFactory(settings.factoryContract).daiToken()\\n                ).approve(spender, value),\\n                \\\"APPROVE_FAILED\\\"\\n            );\\n        } else if (tokenID == Structures.Tokens.MUSE) {\\n            uint256 currentAllowance = IMUSE(\\n                IMecenateFeedFactory(settings.factoryContract).museToken()\\n            ).allowance(msg.sender, spender);\\n\\n            uint256 newAllowance = currentAllowance + value;\\n            require(\\n                IMUSE(IMecenateFeedFactory(settings.factoryContract).daiToken())\\n                    .increaseAllowance(spender, newAllowance),\\n                \\\"APPROVE_FAILED\\\"\\n            );\\n        }\\n    }\\n\\n    function totalSupply(\\n        Structures.Tokens tokenID\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).totalSupply();\\n    }\\n\\n    function balanceOf(\\n        Structures.Tokens tokenID,\\n        address who\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).balanceOf(who);\\n    }\\n\\n    function allowance(\\n        Structures.Tokens tokenID,\\n        address owner,\\n        address spender\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).allowance(owner, spender);\\n    }\\n}\\n\",\"keccak256\":\"0x8eded6283ea4effbe4861c36f73afaace086765ac8d26ef695ac8855ed15e8b1\"},\"contracts/modules/Version.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/// @title Semver\\n/// @notice A simple contract for managing contract versions.\\nabstract contract Version {\\n    // Contract's major version number.\\n    uint256 private immutable _major;\\n\\n    // Contract's minor version number.\\n    uint256 private immutable _minor;\\n\\n    // Contract's patch version number.\\n    uint256 private immutable _path;\\n\\n    /// @dev Create a new Semver instance.\\n    /// @param major Major version number.\\n    /// @param minor Minor version number.\\n    /// @param patch Patch version number.\\n    constructor(uint256 major, uint256 minor, uint256 patch) {\\n        _major = major;\\n        _minor = minor;\\n        _path = patch;\\n    }\\n\\n    /// @notice Returns the full semver contract version.\\n    /// @return Semver contract version as a string.\\n    function version() external view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    Strings.toString(_major),\\n                    \\\".\\\",\\n                    Strings.toString(_minor),\\n                    \\\".\\\",\\n                    Strings.toString(_path)\\n                )\\n            );\\n    }\\n\\n    function _version() internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    Strings.toString(_major),\\n                    \\\".\\\",\\n                    Strings.toString(_minor),\\n                    \\\".\\\",\\n                    Strings.toString(_path)\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xa99614da4eb0014c2756685061352b80325a07e4cb14f7c704ec2a62e182688f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3871,"contract":"contracts/modules/Deposit.sol:Deposit","label":"_deposit","offset":0,"slot":"0","type":"t_mapping(t_uint256,t_mapping(t_address,t_uint256))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/modules/Events.sol":{"Events":{"abi":[{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Accepted","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Created","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Finalized","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Invalid","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"MadePublic","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Renounced","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Valid","type":"event"},{"inputs":[],"name":"getEncryptedPost","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPaymentRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPost","outputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"internalType":"struct Structures.Post","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStakeRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStatus","outputs":[{"internalType":"enum Structures.PostStatus","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenId","outputs":[{"internalType":"enum Structures.Tokens","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenIdAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"post","outputs":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"postCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"version()":{"returns":{"_0":"Semver contract version as a string."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getEncryptedPost()":"729e2eb1","getPaymentRequested()":"d24e0c87","getPost()":"8c6838ba","getStakeRequested()":"faeb5e17","getStatus()":"4e69d560","getTokenId()":"010a38f5","getTokenIdAddress()":"5ad4e170","owner()":"8da5cb5b","post()":"05c1f502","postCount()":"17906c2e","version()":"54fd4d50"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Accepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Invalid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"MadePublic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Renounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Valid\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getEncryptedPost\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaymentRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPost\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.Post\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenIdAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"post\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"version()\":{\"returns\":{\"_0\":\"Semver contract version as a string.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"version()\":{\"notice\":\"Returns the full semver contract version.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/Events.sol\":\"Events\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/helpers/eas/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror DeadlineExpired();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/// @notice A struct representing ECDSA signature data.\\nstruct Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/// @notice A struct representing a single attestation.\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/// @notice A helper function to work with unchecked iterators in loops.\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685\",\"license\":\"MIT\"},\"contracts/helpers/eas/IEAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ISchemaRegistry} from \\\"./ISchemaRegistry.sol\\\";\\nimport {Attestation, Signature} from \\\"./Common.sol\\\";\\n\\n/// @notice A struct representing the arguments of the attestation request.\\nstruct AttestationRequestData {\\n    address recipient; // The recipient of the attestation.\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes32 refUID; // The UID of the related attestation.\\n    bytes data; // Custom attestation data.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the attestation request.\\nstruct AttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the full delegated attestation request.\\nstruct DelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n    Signature signature; // The ECDSA signature data.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi attestation request.\\nstruct MultiAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi attestation request.\\nstruct MultiDelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the arguments of the revocation request.\\nstruct RevocationRequestData {\\n    bytes32 uid; // The UID of the attestation to revoke.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the revocation request.\\nstruct RevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the arguments of the full delegated revocation request.\\nstruct DelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n    Signature signature; // The ECDSA signature data.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi revocation request.\\nstruct MultiRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi revocation request.\\nstruct MultiDelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @title IEAS\\n/// @notice EAS - Ethereum Attestation Service interface.\\ninterface IEAS {\\n    /// @notice Emitted when an attestation has been made.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param uid The UID the revoked attestation.\\n    /// @param schemaUID The UID of the schema.\\n    event Attested(\\n        address indexed recipient,\\n        address indexed attester,\\n        bytes32 uid,\\n        bytes32 indexed schemaUID\\n    );\\n\\n    /// @notice Emitted when an attestation has been revoked.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param schemaUID The UID of the schema.\\n    /// @param uid The UID the revoked attestation.\\n    event Revoked(\\n        address indexed recipient,\\n        address indexed attester,\\n        bytes32 uid,\\n        bytes32 indexed schemaUID\\n    );\\n\\n    /// @notice Emitted when a data has been timestamped.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event Timestamped(bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /// @notice Emitted when a data has been revoked.\\n    /// @param revoker The address of the revoker.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event RevokedOffchain(\\n        address indexed revoker,\\n        bytes32 indexed data,\\n        uint64 indexed timestamp\\n    );\\n\\n    /// @notice Returns the address of the global schema registry.\\n    /// @return The address of the global schema registry.\\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\\n\\n    /// @notice Attests to a specific schema.\\n    /// @param request The arguments of the attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attest({\\n    ///         schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",\\n    ///         data: {\\n    ///             recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n    ///             data: \\\"0xF00D\\\",\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function attest(\\n        AttestationRequest calldata request\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attestByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function attestByDelegation(\\n        DelegatedAttestationRequest calldata delegatedRequest\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to multiple schemas.\\n    /// @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttest([{\\n    ///         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\\n    ///             data: '0x12345678',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiAttest(\\n        MultiAttestationRequest[] calldata multiRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Attests to multiple schemas using via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\\n    ///     grouped by distinct schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttestByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiAttestByDelegation(\\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Revokes an existing attestation to a specific schema.\\n    /// @param request The arguments of the revocation request.\\n    ///\\n    /// Example:\\n    ///     revoke({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function revoke(RevocationRequest calldata request) external payable;\\n\\n    /// @notice Revokes an existing attestation to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated revocation request.\\n    ///\\n    /// Example:\\n    ///     revokeByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 27,\\n    ///             r: '0xb593...7142',\\n    ///             s: '0x0f5b...2cce'\\n    ///         },\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function revokeByDelegation(\\n        DelegatedRevocationRequest calldata delegatedRequest\\n    ) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas.\\n    /// @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevoke([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiRevoke(\\n        MultiRevocationRequest[] calldata multiRequests\\n    ) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests\\n    ///     should be grouped by distinct schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevokeByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiRevokeByDelegation(\\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\\n    ) external payable;\\n\\n    /// @notice Timestamps the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function timestamp(bytes32 data) external returns (uint64);\\n\\n    /// @notice Timestamps the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\\n\\n    /// @notice Revokes the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function revokeOffchain(bytes32 data) external returns (uint64);\\n\\n    /// @notice Revokes the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function multiRevokeOffchain(\\n        bytes32[] calldata data\\n    ) external returns (uint64);\\n\\n    /// @notice Returns an existing attestation by UID.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return The attestation data members.\\n    function getAttestation(\\n        bytes32 uid\\n    ) external view returns (Attestation memory);\\n\\n    /// @notice Checks whether an attestation exists.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return Whether an attestation exists.\\n    function isAttestationValid(bytes32 uid) external view returns (bool);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getTimestamp(bytes32 data) external view returns (uint64);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getRevokeOffchain(\\n        address revoker,\\n        bytes32 data\\n    ) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xc95cca3d90dbae3a21d0f0e28fdf38cc5a85cbd8c760b7759782b18e8f62acc2\",\"license\":\"MIT\"},\"contracts/helpers/eas/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ISchemaResolver} from \\\"./ISchemaResolver.sol\\\";\\n\\n/// @notice A struct representing a record for a submitted schema.\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\n/// @title ISchemaRegistry\\n/// @notice The interface of global attestation schemas for the Ethereum Attestation Service protocol.\\ninterface ISchemaRegistry {\\n    /// @notice Emitted when a new schema has been registered\\n    /// @param uid The schema UID.\\n    /// @param registerer The address of the account used to register the schema.\\n    /// @param schema The schema data.\\n    event Registered(\\n        bytes32 indexed uid,\\n        address indexed registerer,\\n        SchemaRecord schema\\n    );\\n\\n    /// @notice Submits and reserves a new schema\\n    /// @param schema The schema data schema.\\n    /// @param resolver An optional schema resolver.\\n    /// @param revocable Whether the schema allows revocations explicitly.\\n    /// @return The UID of the new schema.\\n    function register(\\n        string calldata schema,\\n        ISchemaResolver resolver,\\n        bool revocable\\n    ) external returns (bytes32);\\n\\n    /// @notice Returns an existing schema by UID\\n    /// @param uid The UID of the schema to retrieve.\\n    /// @return The schema data members.\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\\n\",\"keccak256\":\"0x743ddc248c97a78d34239035d1d9557a74dcaaa5b59a2aa66cea4eadabb8b2de\",\"license\":\"MIT\"},\"contracts/helpers/eas/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {Attestation} from \\\"./Common.sol\\\";\\n\\n/// @title ISchemaResolver\\n/// @notice The interface of an optional schema resolver.\\ninterface ISchemaResolver {\\n    /// @notice Checks if the resolver can be sent ETH.\\n    /// @return Whether the resolver supports ETH transfers.\\n    function isPayable() external pure returns (bool);\\n\\n    /// @notice Processes an attestation and verifies whether it's valid.\\n    /// @param attestation The new attestation.\\n    /// @return Whether the attestation is valid.\\n    function attest(\\n        Attestation calldata attestation\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes multiple attestations and verifies whether they are valid.\\n    /// @param attestations The new attestations.\\n    /// @param values Explicit ETH amounts which were sent with each attestation.\\n    /// @return Whether all the attestations are valid.\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\\n    /// @param attestation The existing attestation to be revoked.\\n    /// @return Whether the attestation can be revoked.\\n    function revoke(\\n        Attestation calldata attestation\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\\n    /// @param attestations The existing attestations to be revoked.\\n    /// @param values Explicit ETH amounts which were sent with each revocation.\\n    /// @return Whether the attestations can be revoked.\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0x97ec835833519c6c11c0fb097ea5bccd888e65f650590fdb643d937430bb4f03\",\"license\":\"MIT\"},\"contracts/interfaces/IMecenateFeed.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateFeed {\\n    function getPost() external view returns (Structures.Post memory);\\n\\n    function getTotalStaked() external view returns (uint256);\\n\\n    function postCount() external view returns (uint256);\\n\\n    function acceptPost(\\n        Structures.Tokens,\\n        uint256 _amount,\\n        address _funder,\\n        address _buyer\\n    ) external payable;\\n\\n    function getSellerStake() external view returns (uint256);\\n\\n    function getBuyerStake() external view returns (uint256);\\n\\n    function getPaymentRequested() external view returns (uint256);\\n\\n    function getStakeRequested() external view returns (uint256);\\n\\n    function getStatus() external view returns (Structures.PostStatus status);\\n\\n    function getTokenId() external view returns (Structures.Tokens tokenId);\\n\\n    function owner() external view returns (address);\\n\\n    function version() external view returns (string memory);\\n\\n    function getEncryptedPost() external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xe7a4b838d4f4540e4a8e3911c2afea70ebd9a2e87bd526eef13b203c2643a645\"},\"contracts/interfaces/IMecenateFeedFactory.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\ninterface IMecenateFeedFactory {\\n    function owner() external view returns (address payable);\\n\\n    function treasuryContract() external view returns (address payable);\\n\\n    function feeds() external view returns (address[] memory);\\n\\n    function contractCounter() external view returns (uint256);\\n\\n    function isFeed(address _feed) external view returns (bool);\\n\\n    function museToken() external view returns (address);\\n\\n    function wethToken() external view returns (address);\\n\\n    function daiToken() external view returns (address);\\n\\n    function router() external view returns (address);\\n\\n    function getRouterFee(uint8 tokenId) external view returns (uint24);\\n\\n    function burnEnabled() external view returns (bool);\\n\\n    function version() external view returns (string memory);\\n\\n    function easSchema() external view returns (bytes32);\\n\\n    function easContract() external view returns (address);\\n}\\n\",\"keccak256\":\"0x79da402b87332cbe8176ab1d0abd2c5369a0da30970743b86283e1a774eea776\"},\"contracts/interfaces/IMecenateTreasury.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateTreasury {\\r\\n    function globalFee() external view returns (uint256);\\r\\n\\r\\n    function fixedFee() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf544878bba8e01c837110d06eac56042957d59c593ba9083f686ef02aa9276a1\"},\"contracts/interfaces/IMecenateUsers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateUsers {\\n    function registerUser(bytes memory metadata) external;\\n\\n    function getUsers() external view returns (address[] memory);\\n\\n    function getUserCount() external view returns (uint256);\\n\\n    function getUserAt(uint256 index) external view returns (address);\\n\\n    function checkifUserExist(address userAddress) external view returns (bool);\\n\\n    function getPaginatedUsers(\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) external view returns (address[] memory);\\n\\n    function getUserMetadata(\\n        address userAddress\\n    ) external view returns (Structures.User memory);\\n\\n    function getUserPublicKey(\\n        address userAddress\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xf0ff65dbfea12d90cf106325b9478e31b284045327e5f0974db5374b8789e93c\",\"license\":\"MIT\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\n * @title Structures\\n * @dev This library defines various data structures used in the Mecenate platform.\\n */\\npragma solidity 0.8.19;\\n\\nlibrary Structures {\\n    enum PostStatus {\\n        Waiting,\\n        Proposed,\\n        Accepted,\\n        Submitted,\\n        Finalized,\\n        Punished,\\n        Revealed,\\n        Renounced\\n    }\\n\\n    enum Tokens {\\n        NaN,\\n        MUSE,\\n        DAI\\n    }\\n\\n    enum PostType {\\n        Text,\\n        Image,\\n        Video,\\n        Audio,\\n        File\\n    }\\n    enum PostDuration {\\n        OneDay,\\n        ThreeDays,\\n        OneWeek,\\n        TwoWeeks,\\n        OneMonth\\n    }\\n\\n    struct FeedSettings {\\n        uint256 punishmentRatio;\\n        uint256 postCount;\\n        address usersModuleContract;\\n        address factoryContract;\\n        address router;\\n        string version;\\n    }\\n\\n    struct FactorySettings {\\n        address treasuryContract;\\n        address usersModuleContract;\\n        address easContract;\\n        bytes32 easSchema;\\n        address museToken;\\n        address daiToken;\\n        address wethToken;\\n        address router;\\n    }\\n\\n    /**\\n     * @dev Struct representing a post on the Mecenate platform.\\n     */\\n    struct Post {\\n        User creator;\\n        PostData postdata;\\n    }\\n\\n    /**\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\n     */\\n    struct PostData {\\n        PostSettings settings;\\n        PostEscrow escrow;\\n        PostEncryptedData data;\\n    }\\n\\n    /**\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\n     */\\n    struct PostEncryptedData {\\n        bytes encryptedData;\\n        bytes encryptedKey;\\n        bytes decryptedData;\\n    }\\n\\n    /**\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettings {\\n        PostStatus status;\\n        PostType postType;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n        uint256 duration;\\n        Tokens tokenId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\n     */\\n    struct PostEscrow {\\n        address buyer;\\n        address seller;\\n        uint256 stake;\\n        uint256 payment;\\n        uint256 punishment;\\n        uint256 penalty;\\n    }\\n\\n    /**\\n     * @dev Struct representing a user on the Mecenate platform.\\n     */\\n    struct User {\\n        address evmAddress;\\n        bytes sismoVaultId;\\n        bytes publicKey;\\n    }\\n\\n    /**\\n     * @dev Struct representing a feed on the Mecenate platform.\\n     */\\n    struct Feed {\\n        address contractAddress;\\n        address owner;\\n        uint256 sellerStake;\\n        uint256 buyerStake;\\n        uint256 totalStake;\\n        uint256 postCount;\\n        uint256 paymentRequested;\\n        uint256 stakeRequested;\\n        PostStatus status;\\n        Tokens tokenId;\\n        string version;\\n    }\\n\\n    /**\\n     * @dev Struct representing a bay request on the Mecenate platform.\\n     */\\n    struct BayRequest {\\n        bytes request;\\n        uint256 payment;\\n        uint256 stake;\\n        address postAddress;\\n        bool accepted;\\n        uint256 postCount;\\n        Tokens tokenId;\\n        address buyerAddress;\\n    }\\n}\\n\",\"keccak256\":\"0xab56ad7506e91048fc9c6db9fd9510c42afa61d6b11a99a273bf975643307d8f\"},\"contracts/modules/Data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../interfaces/IMecenateFeed.sol\\\";\\nimport \\\"../interfaces/IMecenateUsers.sol\\\";\\nimport \\\"../interfaces/IMecenateTreasury.sol\\\";\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\nimport \\\"../helpers/eas/IEAS.sol\\\";\\nimport \\\"./Version.sol\\\";\\n\\n/**\\n * @title Data\\n * @dev This contract stores data related to Mecenate posts and provides functions to interact with it.\\n */\\ncontract Data is Version {\\n    bytes internal constant ZEROHASH = \\\"0x00\\\";\\n\\n    address public owner;\\n\\n    Structures.Post public post;\\n\\n    Structures.FeedSettings internal settings;\\n\\n    mapping(uint8 => uint256) internal postDurationToDays;\\n\\n    mapping(uint8 => bool) internal validStatuses;\\n\\n    constructor(\\n        address usersModuleContract,\\n        address factoryContract,\\n        uint256 _major,\\n        uint256 _minor,\\n        uint256 _patch\\n    ) Version(_major, _minor, _patch) {\\n        settings.punishmentRatio = 100000000000000000; // Constant value\\n        settings.postCount = 0; // Initialize postCount to 0\\n        settings.usersModuleContract = usersModuleContract;\\n        settings.factoryContract = msg.sender;\\n        settings.router = IMecenateFeedFactory(factoryContract).router();\\n        settings.version = _version();\\n\\n        post.postdata.settings.status = Structures.PostStatus.Waiting;\\n\\n        postDurationToDays[uint8(Structures.PostDuration.OneDay)] = 1 days;\\n        postDurationToDays[uint8(Structures.PostDuration.ThreeDays)] = 3 days;\\n        postDurationToDays[uint8(Structures.PostDuration.OneWeek)] = 7 days;\\n        postDurationToDays[uint8(Structures.PostDuration.TwoWeeks)] = 14 days;\\n        postDurationToDays[uint8(Structures.PostDuration.OneMonth)] = 30 days;\\n\\n        validStatuses[uint8(Structures.PostStatus.Waiting)] = true;\\n    }\\n\\n    function _changeStatus(Structures.PostStatus newStatus) internal {\\n        validStatuses[uint8(post.postdata.settings.status)] = false;\\n        validStatuses[uint8(newStatus)] = true;\\n        post.postdata.settings.status = newStatus;\\n    }\\n\\n    function getStatus() external view returns (Structures.PostStatus) {\\n        return post.postdata.settings.status;\\n    }\\n\\n    function getTokenId() external view returns (Structures.Tokens) {\\n        return post.postdata.settings.tokenId;\\n    }\\n\\n    function getTokenIdAddress() public view returns (address) {\\n        if (post.postdata.settings.tokenId == Structures.Tokens.MUSE) {\\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\\n        } else if (post.postdata.settings.tokenId == Structures.Tokens.DAI) {\\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    function _checkToken(Structures.Tokens _token) internal view {\\n        require(_token == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n    }\\n\\n    function getPaymentRequested() external view returns (uint256) {\\n        return post.postdata.escrow.payment;\\n    }\\n\\n    function getStakeRequested() external view returns (uint256) {\\n        return post.postdata.escrow.stake;\\n    }\\n\\n    function postCount() external view returns (uint256) {\\n        return settings.postCount;\\n    }\\n\\n    function getEncryptedPost() external view returns (bytes memory) {\\n        return post.postdata.data.encryptedData;\\n    }\\n\\n    function getPost() external view returns (Structures.Post memory) {\\n        return post;\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xb09086cdcab6dc2790f56df6a5808c7a48794c5519ea122f927c0a0684d1f2c6\",\"license\":\"MIT\"},\"contracts/modules/Events.sol\":{\"content\":\"/**\\r\\n * @title Events\\r\\n * @dev This abstract contract defines the events related to the Mecenate platform's post lifecycle.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./Data.sol\\\";\\r\\n\\r\\nabstract contract Events is Data {\\r\\n    event Created(Structures.Post post);\\r\\n    event Accepted(Structures.Post post);\\r\\n    event Valid(Structures.Post post);\\r\\n    event Invalid(Structures.Post post);\\r\\n    event Finalized(Structures.Post post);\\r\\n    event MadePublic(Structures.Post post);\\r\\n    event Renounced(Structures.Post post);\\r\\n}\\r\\n\",\"keccak256\":\"0x3aeaf067b1f9010a2456df46fb54d4727b3a24082b1446ac9266dbcdd8c838f6\"},\"contracts/modules/Version.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/// @title Semver\\n/// @notice A simple contract for managing contract versions.\\nabstract contract Version {\\n    // Contract's major version number.\\n    uint256 private immutable _major;\\n\\n    // Contract's minor version number.\\n    uint256 private immutable _minor;\\n\\n    // Contract's patch version number.\\n    uint256 private immutable _path;\\n\\n    /// @dev Create a new Semver instance.\\n    /// @param major Major version number.\\n    /// @param minor Minor version number.\\n    /// @param patch Patch version number.\\n    constructor(uint256 major, uint256 minor, uint256 patch) {\\n        _major = major;\\n        _minor = minor;\\n        _path = patch;\\n    }\\n\\n    /// @notice Returns the full semver contract version.\\n    /// @return Semver contract version as a string.\\n    function version() external view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    Strings.toString(_major),\\n                    \\\".\\\",\\n                    Strings.toString(_minor),\\n                    \\\".\\\",\\n                    Strings.toString(_path)\\n                )\\n            );\\n    }\\n\\n    function _version() internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    Strings.toString(_major),\\n                    \\\".\\\",\\n                    Strings.toString(_minor),\\n                    \\\".\\\",\\n                    Strings.toString(_path)\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xa99614da4eb0014c2756685061352b80325a07e4cb14f7c704ec2a62e182688f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3523,"contract":"contracts/modules/Events.sol:Events","label":"owner","offset":0,"slot":"0","type":"t_address"},{"astId":3526,"contract":"contracts/modules/Events.sol:Events","label":"post","offset":0,"slot":"1","type":"t_struct(Post)2574_storage"},{"astId":3529,"contract":"contracts/modules/Events.sol:Events","label":"settings","offset":0,"slot":"18","type":"t_struct(FeedSettings)2550_storage"},{"astId":3533,"contract":"contracts/modules/Events.sol:Events","label":"postDurationToDays","offset":0,"slot":"24","type":"t_mapping(t_uint8,t_uint256)"},{"astId":3537,"contract":"contracts/modules/Events.sol:Events","label":"validStatuses","offset":0,"slot":"25","type":"t_mapping(t_uint8,t_bool)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_enum(PostStatus)2521":{"encoding":"inplace","label":"enum Structures.PostStatus","numberOfBytes":"1"},"t_enum(PostType)2531":{"encoding":"inplace","label":"enum Structures.PostType","numberOfBytes":"1"},"t_enum(Tokens)2525":{"encoding":"inplace","label":"enum Structures.Tokens","numberOfBytes":"1"},"t_mapping(t_uint8,t_bool)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint8,t_uint256)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(FeedSettings)2550_storage":{"encoding":"inplace","label":"struct Structures.FeedSettings","members":[{"astId":2539,"contract":"contracts/modules/Events.sol:Events","label":"punishmentRatio","offset":0,"slot":"0","type":"t_uint256"},{"astId":2541,"contract":"contracts/modules/Events.sol:Events","label":"postCount","offset":0,"slot":"1","type":"t_uint256"},{"astId":2543,"contract":"contracts/modules/Events.sol:Events","label":"usersModuleContract","offset":0,"slot":"2","type":"t_address"},{"astId":2545,"contract":"contracts/modules/Events.sol:Events","label":"factoryContract","offset":0,"slot":"3","type":"t_address"},{"astId":2547,"contract":"contracts/modules/Events.sol:Events","label":"router","offset":0,"slot":"4","type":"t_address"},{"astId":2549,"contract":"contracts/modules/Events.sol:Events","label":"version","offset":0,"slot":"5","type":"t_string_storage"}],"numberOfBytes":"192"},"t_struct(Post)2574_storage":{"encoding":"inplace","label":"struct Structures.Post","members":[{"astId":2570,"contract":"contracts/modules/Events.sol:Events","label":"creator","offset":0,"slot":"0","type":"t_struct(User)2627_storage"},{"astId":2573,"contract":"contracts/modules/Events.sol:Events","label":"postdata","offset":0,"slot":"3","type":"t_struct(PostData)2584_storage"}],"numberOfBytes":"544"},"t_struct(PostData)2584_storage":{"encoding":"inplace","label":"struct Structures.PostData","members":[{"astId":2577,"contract":"contracts/modules/Events.sol:Events","label":"settings","offset":0,"slot":"0","type":"t_struct(PostSettings)2607_storage"},{"astId":2580,"contract":"contracts/modules/Events.sol:Events","label":"escrow","offset":0,"slot":"5","type":"t_struct(PostEscrow)2620_storage"},{"astId":2583,"contract":"contracts/modules/Events.sol:Events","label":"data","offset":0,"slot":"11","type":"t_struct(PostEncryptedData)2591_storage"}],"numberOfBytes":"448"},"t_struct(PostEncryptedData)2591_storage":{"encoding":"inplace","label":"struct Structures.PostEncryptedData","members":[{"astId":2586,"contract":"contracts/modules/Events.sol:Events","label":"encryptedData","offset":0,"slot":"0","type":"t_bytes_storage"},{"astId":2588,"contract":"contracts/modules/Events.sol:Events","label":"encryptedKey","offset":0,"slot":"1","type":"t_bytes_storage"},{"astId":2590,"contract":"contracts/modules/Events.sol:Events","label":"decryptedData","offset":0,"slot":"2","type":"t_bytes_storage"}],"numberOfBytes":"96"},"t_struct(PostEscrow)2620_storage":{"encoding":"inplace","label":"struct Structures.PostEscrow","members":[{"astId":2609,"contract":"contracts/modules/Events.sol:Events","label":"buyer","offset":0,"slot":"0","type":"t_address"},{"astId":2611,"contract":"contracts/modules/Events.sol:Events","label":"seller","offset":0,"slot":"1","type":"t_address"},{"astId":2613,"contract":"contracts/modules/Events.sol:Events","label":"stake","offset":0,"slot":"2","type":"t_uint256"},{"astId":2615,"contract":"contracts/modules/Events.sol:Events","label":"payment","offset":0,"slot":"3","type":"t_uint256"},{"astId":2617,"contract":"contracts/modules/Events.sol:Events","label":"punishment","offset":0,"slot":"4","type":"t_uint256"},{"astId":2619,"contract":"contracts/modules/Events.sol:Events","label":"penalty","offset":0,"slot":"5","type":"t_uint256"}],"numberOfBytes":"192"},"t_struct(PostSettings)2607_storage":{"encoding":"inplace","label":"struct Structures.PostSettings","members":[{"astId":2594,"contract":"contracts/modules/Events.sol:Events","label":"status","offset":0,"slot":"0","type":"t_enum(PostStatus)2521"},{"astId":2597,"contract":"contracts/modules/Events.sol:Events","label":"postType","offset":1,"slot":"0","type":"t_enum(PostType)2531"},{"astId":2599,"contract":"contracts/modules/Events.sol:Events","label":"creationTimeStamp","offset":0,"slot":"1","type":"t_uint256"},{"astId":2601,"contract":"contracts/modules/Events.sol:Events","label":"endTimeStamp","offset":0,"slot":"2","type":"t_uint256"},{"astId":2603,"contract":"contracts/modules/Events.sol:Events","label":"duration","offset":0,"slot":"3","type":"t_uint256"},{"astId":2606,"contract":"contracts/modules/Events.sol:Events","label":"tokenId","offset":0,"slot":"4","type":"t_enum(Tokens)2525"}],"numberOfBytes":"160"},"t_struct(User)2627_storage":{"encoding":"inplace","label":"struct Structures.User","members":[{"astId":2622,"contract":"contracts/modules/Events.sol:Events","label":"evmAddress","offset":0,"slot":"0","type":"t_address"},{"astId":2624,"contract":"contracts/modules/Events.sol:Events","label":"sismoVaultId","offset":0,"slot":"1","type":"t_bytes_storage"},{"astId":2626,"contract":"contracts/modules/Events.sol:Events","label":"publicKey","offset":0,"slot":"2","type":"t_bytes_storage"}],"numberOfBytes":"96"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{"version()":{"notice":"Returns the full semver contract version."}},"version":1}}},"contracts/modules/Finalization.sol":{"Finalization":{"abi":[{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Accepted","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Created","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenID","type":"uint8"},{"indexed":false,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newDeposit","type":"uint256"}],"name":"DepositDecreased","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenID","type":"uint8"},{"indexed":false,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newDeposit","type":"uint256"}],"name":"DepositIncreased","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Finalized","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Invalid","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"MadePublic","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Renounced","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"staker","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"name":"StakeAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"staker","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"StakeBurned","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"staker","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"name":"StakeTaken","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Valid","type":"event"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"address","name":"_funder","type":"address"},{"internalType":"uint256","name":"amountToAdd","type":"uint256"}],"name":"addStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bool","name":"valid","type":"bool"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"bytes32","name":"uid","type":"bytes32"}],"name":"finalizePost","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getBuyerStake","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getEncryptedPost","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPaymentRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPost","outputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"internalType":"struct Structures.Post","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSellerStake","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"address","name":"staker","type":"address"}],"name":"getStake","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStakeRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStatus","outputs":[{"internalType":"enum Structures.PostStatus","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenId","outputs":[{"internalType":"enum Structures.Tokens","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenIdAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTotalStaked","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"post","outputs":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"postCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"address","name":"receiver","type":"address"}],"name":"takeFullStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint256","name":"amountToTake","type":"uint256"}],"name":"takeStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"version()":{"returns":{"_0":"Semver contract version as a string."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"addStake(uint8,address,uint256)":"1d0b4af5","finalizePost(bool,uint256,bytes32)":"8f287dc2","getBuyerStake()":"4c38d877","getEncryptedPost()":"729e2eb1","getPaymentRequested()":"d24e0c87","getPost()":"8c6838ba","getSellerStake()":"5c63ed69","getStake(uint8,address)":"52a6cb4a","getStakeRequested()":"faeb5e17","getStatus()":"4e69d560","getTokenId()":"010a38f5","getTokenIdAddress()":"5ad4e170","getTotalStaked()":"0917e776","owner()":"8da5cb5b","post()":"05c1f502","postCount()":"17906c2e","takeFullStake(uint8,address)":"f2d7dbb6","takeStake(uint8,address,uint256)":"ed70d5d5","version()":"54fd4d50"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Accepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDeposit\",\"type\":\"uint256\"}],\"name\":\"DepositDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDeposit\",\"type\":\"uint256\"}],\"name\":\"DepositIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Invalid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"MadePublic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Renounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"name\":\"StakeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"name\":\"StakeTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Valid\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_funder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToAdd\",\"type\":\"uint256\"}],\"name\":\"addStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"finalizePost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyerStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEncryptedPost\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaymentRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPost\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.Post\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellerStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenIdAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"post\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"takeFullStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToTake\",\"type\":\"uint256\"}],\"name\":\"takeStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"version()\":{\"returns\":{\"_0\":\"Semver contract version as a string.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"version()\":{\"notice\":\"Returns the full semver contract version.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/Finalization.sol\":\"Finalization\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/helpers/eas/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror DeadlineExpired();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/// @notice A struct representing ECDSA signature data.\\nstruct Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/// @notice A struct representing a single attestation.\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/// @notice A helper function to work with unchecked iterators in loops.\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685\",\"license\":\"MIT\"},\"contracts/helpers/eas/IEAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ISchemaRegistry} from \\\"./ISchemaRegistry.sol\\\";\\nimport {Attestation, Signature} from \\\"./Common.sol\\\";\\n\\n/// @notice A struct representing the arguments of the attestation request.\\nstruct AttestationRequestData {\\n    address recipient; // The recipient of the attestation.\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes32 refUID; // The UID of the related attestation.\\n    bytes data; // Custom attestation data.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the attestation request.\\nstruct AttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the full delegated attestation request.\\nstruct DelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n    Signature signature; // The ECDSA signature data.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi attestation request.\\nstruct MultiAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi attestation request.\\nstruct MultiDelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the arguments of the revocation request.\\nstruct RevocationRequestData {\\n    bytes32 uid; // The UID of the attestation to revoke.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the revocation request.\\nstruct RevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the arguments of the full delegated revocation request.\\nstruct DelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n    Signature signature; // The ECDSA signature data.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi revocation request.\\nstruct MultiRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi revocation request.\\nstruct MultiDelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @title IEAS\\n/// @notice EAS - Ethereum Attestation Service interface.\\ninterface IEAS {\\n    /// @notice Emitted when an attestation has been made.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param uid The UID the revoked attestation.\\n    /// @param schemaUID The UID of the schema.\\n    event Attested(\\n        address indexed recipient,\\n        address indexed attester,\\n        bytes32 uid,\\n        bytes32 indexed schemaUID\\n    );\\n\\n    /// @notice Emitted when an attestation has been revoked.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param schemaUID The UID of the schema.\\n    /// @param uid The UID the revoked attestation.\\n    event Revoked(\\n        address indexed recipient,\\n        address indexed attester,\\n        bytes32 uid,\\n        bytes32 indexed schemaUID\\n    );\\n\\n    /// @notice Emitted when a data has been timestamped.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event Timestamped(bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /// @notice Emitted when a data has been revoked.\\n    /// @param revoker The address of the revoker.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event RevokedOffchain(\\n        address indexed revoker,\\n        bytes32 indexed data,\\n        uint64 indexed timestamp\\n    );\\n\\n    /// @notice Returns the address of the global schema registry.\\n    /// @return The address of the global schema registry.\\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\\n\\n    /// @notice Attests to a specific schema.\\n    /// @param request The arguments of the attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attest({\\n    ///         schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",\\n    ///         data: {\\n    ///             recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n    ///             data: \\\"0xF00D\\\",\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function attest(\\n        AttestationRequest calldata request\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attestByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function attestByDelegation(\\n        DelegatedAttestationRequest calldata delegatedRequest\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to multiple schemas.\\n    /// @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttest([{\\n    ///         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\\n    ///             data: '0x12345678',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiAttest(\\n        MultiAttestationRequest[] calldata multiRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Attests to multiple schemas using via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\\n    ///     grouped by distinct schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttestByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiAttestByDelegation(\\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Revokes an existing attestation to a specific schema.\\n    /// @param request The arguments of the revocation request.\\n    ///\\n    /// Example:\\n    ///     revoke({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function revoke(RevocationRequest calldata request) external payable;\\n\\n    /// @notice Revokes an existing attestation to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated revocation request.\\n    ///\\n    /// Example:\\n    ///     revokeByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 27,\\n    ///             r: '0xb593...7142',\\n    ///             s: '0x0f5b...2cce'\\n    ///         },\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function revokeByDelegation(\\n        DelegatedRevocationRequest calldata delegatedRequest\\n    ) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas.\\n    /// @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevoke([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiRevoke(\\n        MultiRevocationRequest[] calldata multiRequests\\n    ) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests\\n    ///     should be grouped by distinct schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevokeByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiRevokeByDelegation(\\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\\n    ) external payable;\\n\\n    /// @notice Timestamps the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function timestamp(bytes32 data) external returns (uint64);\\n\\n    /// @notice Timestamps the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\\n\\n    /// @notice Revokes the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function revokeOffchain(bytes32 data) external returns (uint64);\\n\\n    /// @notice Revokes the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function multiRevokeOffchain(\\n        bytes32[] calldata data\\n    ) external returns (uint64);\\n\\n    /// @notice Returns an existing attestation by UID.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return The attestation data members.\\n    function getAttestation(\\n        bytes32 uid\\n    ) external view returns (Attestation memory);\\n\\n    /// @notice Checks whether an attestation exists.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return Whether an attestation exists.\\n    function isAttestationValid(bytes32 uid) external view returns (bool);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getTimestamp(bytes32 data) external view returns (uint64);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getRevokeOffchain(\\n        address revoker,\\n        bytes32 data\\n    ) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xc95cca3d90dbae3a21d0f0e28fdf38cc5a85cbd8c760b7759782b18e8f62acc2\",\"license\":\"MIT\"},\"contracts/helpers/eas/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ISchemaResolver} from \\\"./ISchemaResolver.sol\\\";\\n\\n/// @notice A struct representing a record for a submitted schema.\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\n/// @title ISchemaRegistry\\n/// @notice The interface of global attestation schemas for the Ethereum Attestation Service protocol.\\ninterface ISchemaRegistry {\\n    /// @notice Emitted when a new schema has been registered\\n    /// @param uid The schema UID.\\n    /// @param registerer The address of the account used to register the schema.\\n    /// @param schema The schema data.\\n    event Registered(\\n        bytes32 indexed uid,\\n        address indexed registerer,\\n        SchemaRecord schema\\n    );\\n\\n    /// @notice Submits and reserves a new schema\\n    /// @param schema The schema data schema.\\n    /// @param resolver An optional schema resolver.\\n    /// @param revocable Whether the schema allows revocations explicitly.\\n    /// @return The UID of the new schema.\\n    function register(\\n        string calldata schema,\\n        ISchemaResolver resolver,\\n        bool revocable\\n    ) external returns (bytes32);\\n\\n    /// @notice Returns an existing schema by UID\\n    /// @param uid The UID of the schema to retrieve.\\n    /// @return The schema data members.\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\\n\",\"keccak256\":\"0x743ddc248c97a78d34239035d1d9557a74dcaaa5b59a2aa66cea4eadabb8b2de\",\"license\":\"MIT\"},\"contracts/helpers/eas/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {Attestation} from \\\"./Common.sol\\\";\\n\\n/// @title ISchemaResolver\\n/// @notice The interface of an optional schema resolver.\\ninterface ISchemaResolver {\\n    /// @notice Checks if the resolver can be sent ETH.\\n    /// @return Whether the resolver supports ETH transfers.\\n    function isPayable() external pure returns (bool);\\n\\n    /// @notice Processes an attestation and verifies whether it's valid.\\n    /// @param attestation The new attestation.\\n    /// @return Whether the attestation is valid.\\n    function attest(\\n        Attestation calldata attestation\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes multiple attestations and verifies whether they are valid.\\n    /// @param attestations The new attestations.\\n    /// @param values Explicit ETH amounts which were sent with each attestation.\\n    /// @return Whether all the attestations are valid.\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\\n    /// @param attestation The existing attestation to be revoked.\\n    /// @return Whether the attestation can be revoked.\\n    function revoke(\\n        Attestation calldata attestation\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\\n    /// @param attestations The existing attestations to be revoked.\\n    /// @param values Explicit ETH amounts which were sent with each revocation.\\n    /// @return Whether the attestations can be revoked.\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0x97ec835833519c6c11c0fb097ea5bccd888e65f650590fdb643d937430bb4f03\",\"license\":\"MIT\"},\"contracts/interfaces/IMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n// import IERC20 from openzeppelin\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMUSE is IERC20 {\\n    function increaseAllowance(\\n        address spender,\\n        uint256 addedValue\\n    ) external returns (bool);\\n\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 subtractedValue\\n    ) external returns (bool);\\n\\n    function mint(uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x8b0a4012a1cd0815460bb3d15278671589bb85003ff2c38315701b3f2228c633\"},\"contracts/interfaces/IMecenateFeed.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateFeed {\\n    function getPost() external view returns (Structures.Post memory);\\n\\n    function getTotalStaked() external view returns (uint256);\\n\\n    function postCount() external view returns (uint256);\\n\\n    function acceptPost(\\n        Structures.Tokens,\\n        uint256 _amount,\\n        address _funder,\\n        address _buyer\\n    ) external payable;\\n\\n    function getSellerStake() external view returns (uint256);\\n\\n    function getBuyerStake() external view returns (uint256);\\n\\n    function getPaymentRequested() external view returns (uint256);\\n\\n    function getStakeRequested() external view returns (uint256);\\n\\n    function getStatus() external view returns (Structures.PostStatus status);\\n\\n    function getTokenId() external view returns (Structures.Tokens tokenId);\\n\\n    function owner() external view returns (address);\\n\\n    function version() external view returns (string memory);\\n\\n    function getEncryptedPost() external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xe7a4b838d4f4540e4a8e3911c2afea70ebd9a2e87bd526eef13b203c2643a645\"},\"contracts/interfaces/IMecenateFeedFactory.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\ninterface IMecenateFeedFactory {\\n    function owner() external view returns (address payable);\\n\\n    function treasuryContract() external view returns (address payable);\\n\\n    function feeds() external view returns (address[] memory);\\n\\n    function contractCounter() external view returns (uint256);\\n\\n    function isFeed(address _feed) external view returns (bool);\\n\\n    function museToken() external view returns (address);\\n\\n    function wethToken() external view returns (address);\\n\\n    function daiToken() external view returns (address);\\n\\n    function router() external view returns (address);\\n\\n    function getRouterFee(uint8 tokenId) external view returns (uint24);\\n\\n    function burnEnabled() external view returns (bool);\\n\\n    function version() external view returns (string memory);\\n\\n    function easSchema() external view returns (bytes32);\\n\\n    function easContract() external view returns (address);\\n}\\n\",\"keccak256\":\"0x79da402b87332cbe8176ab1d0abd2c5369a0da30970743b86283e1a774eea776\"},\"contracts/interfaces/IMecenateTreasury.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateTreasury {\\r\\n    function globalFee() external view returns (uint256);\\r\\n\\r\\n    function fixedFee() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf544878bba8e01c837110d06eac56042957d59c593ba9083f686ef02aa9276a1\"},\"contracts/interfaces/IMecenateUsers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateUsers {\\n    function registerUser(bytes memory metadata) external;\\n\\n    function getUsers() external view returns (address[] memory);\\n\\n    function getUserCount() external view returns (uint256);\\n\\n    function getUserAt(uint256 index) external view returns (address);\\n\\n    function checkifUserExist(address userAddress) external view returns (bool);\\n\\n    function getPaginatedUsers(\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) external view returns (address[] memory);\\n\\n    function getUserMetadata(\\n        address userAddress\\n    ) external view returns (Structures.User memory);\\n\\n    function getUserPublicKey(\\n        address userAddress\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xf0ff65dbfea12d90cf106325b9478e31b284045327e5f0974db5374b8789e93c\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function withdraw(uint256) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xeb4bd6c56a346f12ec3d681183d613795c151709e834d69ef58f13fd6d7edf62\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\n * @title Structures\\n * @dev This library defines various data structures used in the Mecenate platform.\\n */\\npragma solidity 0.8.19;\\n\\nlibrary Structures {\\n    enum PostStatus {\\n        Waiting,\\n        Proposed,\\n        Accepted,\\n        Submitted,\\n        Finalized,\\n        Punished,\\n        Revealed,\\n        Renounced\\n    }\\n\\n    enum Tokens {\\n        NaN,\\n        MUSE,\\n        DAI\\n    }\\n\\n    enum PostType {\\n        Text,\\n        Image,\\n        Video,\\n        Audio,\\n        File\\n    }\\n    enum PostDuration {\\n        OneDay,\\n        ThreeDays,\\n        OneWeek,\\n        TwoWeeks,\\n        OneMonth\\n    }\\n\\n    struct FeedSettings {\\n        uint256 punishmentRatio;\\n        uint256 postCount;\\n        address usersModuleContract;\\n        address factoryContract;\\n        address router;\\n        string version;\\n    }\\n\\n    struct FactorySettings {\\n        address treasuryContract;\\n        address usersModuleContract;\\n        address easContract;\\n        bytes32 easSchema;\\n        address museToken;\\n        address daiToken;\\n        address wethToken;\\n        address router;\\n    }\\n\\n    /**\\n     * @dev Struct representing a post on the Mecenate platform.\\n     */\\n    struct Post {\\n        User creator;\\n        PostData postdata;\\n    }\\n\\n    /**\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\n     */\\n    struct PostData {\\n        PostSettings settings;\\n        PostEscrow escrow;\\n        PostEncryptedData data;\\n    }\\n\\n    /**\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\n     */\\n    struct PostEncryptedData {\\n        bytes encryptedData;\\n        bytes encryptedKey;\\n        bytes decryptedData;\\n    }\\n\\n    /**\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettings {\\n        PostStatus status;\\n        PostType postType;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n        uint256 duration;\\n        Tokens tokenId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\n     */\\n    struct PostEscrow {\\n        address buyer;\\n        address seller;\\n        uint256 stake;\\n        uint256 payment;\\n        uint256 punishment;\\n        uint256 penalty;\\n    }\\n\\n    /**\\n     * @dev Struct representing a user on the Mecenate platform.\\n     */\\n    struct User {\\n        address evmAddress;\\n        bytes sismoVaultId;\\n        bytes publicKey;\\n    }\\n\\n    /**\\n     * @dev Struct representing a feed on the Mecenate platform.\\n     */\\n    struct Feed {\\n        address contractAddress;\\n        address owner;\\n        uint256 sellerStake;\\n        uint256 buyerStake;\\n        uint256 totalStake;\\n        uint256 postCount;\\n        uint256 paymentRequested;\\n        uint256 stakeRequested;\\n        PostStatus status;\\n        Tokens tokenId;\\n        string version;\\n    }\\n\\n    /**\\n     * @dev Struct representing a bay request on the Mecenate platform.\\n     */\\n    struct BayRequest {\\n        bytes request;\\n        uint256 payment;\\n        uint256 stake;\\n        address postAddress;\\n        bool accepted;\\n        uint256 postCount;\\n        Tokens tokenId;\\n        address buyerAddress;\\n    }\\n}\\n\",\"keccak256\":\"0xab56ad7506e91048fc9c6db9fd9510c42afa61d6b11a99a273bf975643307d8f\"},\"contracts/modules/BurnDAI.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"./BurnMUSE.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"../interfaces/IWETH.sol\\\";\\n\\nabstract contract BurnDAI is BurnMUSE {\\n    using SafeMath for uint256;\\n\\n    function _burnFrom(\\n        address from,\\n        uint256 value\\n    ) internal override returns (bool success) {\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\n            .transferFrom(from, address(this), value);\\n\\n        _burn(value);\\n\\n        return true;\\n    }\\n\\n    function _burnDai(uint256 value) internal returns (bool success) {\\n        // approve uniswap for token transfer\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\n            .approve(settings.router, value);\\n\\n        // swap IMecenateFeedFactory(settings.factoryContract).daiToken() for MUSE\\n        uint256 tokens_sold = value;\\n\\n        uint256 tokens_bought = _swapTokensForToken(\\n            IMecenateFeedFactory(settings.factoryContract).daiToken(),\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\n            IMecenateFeedFactory(settings.factoryContract).getRouterFee(0),\\n            tokens_sold\\n        );\\n\\n        uint256 tokens_sold_to_muse = _swapTokensForToken(\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\n            IMecenateFeedFactory(settings.factoryContract).museToken(),\\n            IMecenateFeedFactory(settings.factoryContract).getRouterFee(1),\\n            tokens_bought\\n        );\\n\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).museToken())\\n            .approve(\\n                IMecenateFeedFactory(settings.factoryContract).museToken(),\\n                tokens_sold_to_muse\\n            );\\n\\n        // burn MUSE\\n        BurnMUSE._burn(tokens_sold_to_muse);\\n\\n        return true;\\n    }\\n\\n    function _burnWeth(uint256 value) internal returns (bool success) {\\n        // deposit IMecenateFeedFactory(settings.factoryContract).wethToken()\\n        IWETH(IMecenateFeedFactory(settings.factoryContract).wethToken())\\n            .deposit{value: value}();\\n\\n        // approve uniswap for token transfer\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).wethToken())\\n            .approve(settings.router, value);\\n\\n        // swap IMecenateFeedFactory(settings.factoryContract).wethToken() for MUSE\\n        uint256 tokens_sold = value;\\n\\n        uint256 tokens_bought = _swapTokensForToken(\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\n            IMecenateFeedFactory(settings.factoryContract).museToken(),\\n            IMecenateFeedFactory(settings.factoryContract).getRouterFee(1),\\n            tokens_sold\\n        );\\n\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).museToken())\\n            .approve(\\n                IMecenateFeedFactory(settings.factoryContract).museToken(),\\n                tokens_bought\\n            );\\n\\n        // burn MUSE\\n        BurnMUSE._burn(tokens_bought);\\n\\n        return true;\\n    }\\n\\n    function getTokenAddress()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address token)\\n    {\\n        return IMecenateFeedFactory(settings.factoryContract).daiToken();\\n    }\\n\\n    function getExchangeAddress()\\n        internal\\n        view\\n        override\\n        returns (address exchange)\\n    {\\n        exchange = settings.router;\\n    }\\n\\n    function _swapTokensForToken(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountIn\\n    ) internal returns (uint256 amountOut) {\\n        // Check and approve allowance\\n        uint256 allowance = IERC20(tokenIn).allowance(\\n            address(this),\\n            settings.router\\n        );\\n        if (allowance < amountIn) {\\n            IERC20(tokenIn).approve(settings.router, type(uint256).max);\\n        }\\n\\n        // Prepare parameters\\n        address recipient = address(this);\\n        uint256 deadline = block.timestamp + 60; // 15 seconds from the current block timestamp\\n\\n        // Perform the swap\\n        // Refer to the Uniswap V3 documentation for details on the params.\\n        amountOut = ISwapRouter(settings.router).exactInputSingle(\\n            ISwapRouter.ExactInputSingleParams({\\n                tokenIn: tokenIn,\\n                tokenOut: tokenOut,\\n                fee: fee,\\n                recipient: recipient,\\n                deadline: deadline,\\n                amountIn: amountIn,\\n                amountOutMinimum: 0, // you may want to set a minimum here\\n                sqrtPriceLimitX96: 0\\n            })\\n        );\\n\\n        return amountOut;\\n    }\\n}\\n\",\"keccak256\":\"0xa69462e962a3be48c3514c746d791c7a870247e8e441a2d7a11b5771ec8e0d23\"},\"contracts/modules/BurnMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\nimport \\\"../interfaces/IMUSE.sol\\\";\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\nimport \\\"./Events.sol\\\";\\n\\nabstract contract BurnMUSE is Events {\\n    function _burn(uint256 value) internal virtual returns (bool success) {\\n        IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken()).burn(\\n            value\\n        );\\n        return true;\\n    }\\n\\n    function _burnFrom(\\n        address from,\\n        uint256 value\\n    ) internal virtual returns (bool success) {\\n        IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken())\\n            .transferFrom(from, address(this), value);\\n        _burn(value);\\n        return true;\\n    }\\n\\n    function getTokenAddress() internal view virtual returns (address token) {\\n        return IMecenateFeedFactory(settings.factoryContract).museToken();\\n    }\\n\\n    function getExchangeAddress()\\n        internal\\n        view\\n        virtual\\n        returns (address exchange)\\n    {\\n        exchange = IMecenateFeedFactory(settings.factoryContract).router();\\n    }\\n}\\n\",\"keccak256\":\"0x052049c27f8e98f27fd3d237157e4700d5f5c313343d1cd734614beefa4ccfc6\"},\"contracts/modules/Data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../interfaces/IMecenateFeed.sol\\\";\\nimport \\\"../interfaces/IMecenateUsers.sol\\\";\\nimport \\\"../interfaces/IMecenateTreasury.sol\\\";\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\nimport \\\"../helpers/eas/IEAS.sol\\\";\\nimport \\\"./Version.sol\\\";\\n\\n/**\\n * @title Data\\n * @dev This contract stores data related to Mecenate posts and provides functions to interact with it.\\n */\\ncontract Data is Version {\\n    bytes internal constant ZEROHASH = \\\"0x00\\\";\\n\\n    address public owner;\\n\\n    Structures.Post public post;\\n\\n    Structures.FeedSettings internal settings;\\n\\n    mapping(uint8 => uint256) internal postDurationToDays;\\n\\n    mapping(uint8 => bool) internal validStatuses;\\n\\n    constructor(\\n        address usersModuleContract,\\n        address factoryContract,\\n        uint256 _major,\\n        uint256 _minor,\\n        uint256 _patch\\n    ) Version(_major, _minor, _patch) {\\n        settings.punishmentRatio = 100000000000000000; // Constant value\\n        settings.postCount = 0; // Initialize postCount to 0\\n        settings.usersModuleContract = usersModuleContract;\\n        settings.factoryContract = msg.sender;\\n        settings.router = IMecenateFeedFactory(factoryContract).router();\\n        settings.version = _version();\\n\\n        post.postdata.settings.status = Structures.PostStatus.Waiting;\\n\\n        postDurationToDays[uint8(Structures.PostDuration.OneDay)] = 1 days;\\n        postDurationToDays[uint8(Structures.PostDuration.ThreeDays)] = 3 days;\\n        postDurationToDays[uint8(Structures.PostDuration.OneWeek)] = 7 days;\\n        postDurationToDays[uint8(Structures.PostDuration.TwoWeeks)] = 14 days;\\n        postDurationToDays[uint8(Structures.PostDuration.OneMonth)] = 30 days;\\n\\n        validStatuses[uint8(Structures.PostStatus.Waiting)] = true;\\n    }\\n\\n    function _changeStatus(Structures.PostStatus newStatus) internal {\\n        validStatuses[uint8(post.postdata.settings.status)] = false;\\n        validStatuses[uint8(newStatus)] = true;\\n        post.postdata.settings.status = newStatus;\\n    }\\n\\n    function getStatus() external view returns (Structures.PostStatus) {\\n        return post.postdata.settings.status;\\n    }\\n\\n    function getTokenId() external view returns (Structures.Tokens) {\\n        return post.postdata.settings.tokenId;\\n    }\\n\\n    function getTokenIdAddress() public view returns (address) {\\n        if (post.postdata.settings.tokenId == Structures.Tokens.MUSE) {\\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\\n        } else if (post.postdata.settings.tokenId == Structures.Tokens.DAI) {\\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    function _checkToken(Structures.Tokens _token) internal view {\\n        require(_token == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n    }\\n\\n    function getPaymentRequested() external view returns (uint256) {\\n        return post.postdata.escrow.payment;\\n    }\\n\\n    function getStakeRequested() external view returns (uint256) {\\n        return post.postdata.escrow.stake;\\n    }\\n\\n    function postCount() external view returns (uint256) {\\n        return settings.postCount;\\n    }\\n\\n    function getEncryptedPost() external view returns (bytes memory) {\\n        return post.postdata.data.encryptedData;\\n    }\\n\\n    function getPost() external view returns (Structures.Post memory) {\\n        return post;\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xb09086cdcab6dc2790f56df6a5808c7a48794c5519ea122f927c0a0684d1f2c6\",\"license\":\"MIT\"},\"contracts/modules/Deposit.sol\":{\"content\":\"pragma solidity 0.8.19;\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./TokenManager.sol\\\";\\n\\ncontract Deposit {\\n    using SafeMath for uint256;\\n\\n    mapping(uint256 => mapping(address => uint256)) private _deposit;\\n\\n    event DepositIncreased(\\n        Structures.Tokens tokenID,\\n        address user,\\n        uint256 amount,\\n        uint256 newDeposit\\n    );\\n    event DepositDecreased(\\n        Structures.Tokens tokenID,\\n        address user,\\n        uint256 amount,\\n        uint256 newDeposit\\n    );\\n\\n    function _increaseDeposit(\\n        Structures.Tokens tokenID,\\n        address user,\\n        uint256 amountToAdd\\n    ) internal returns (uint256 newDeposit) {\\n        // calculate new deposit amount\\n        newDeposit = _deposit[uint256(tokenID)][user].add(amountToAdd);\\n\\n        // set new stake to storage\\n        _deposit[uint256(tokenID)][user] = newDeposit;\\n\\n        // emit event\\n        emit DepositIncreased(tokenID, user, amountToAdd, newDeposit);\\n\\n        // return\\n        return newDeposit;\\n    }\\n\\n    function _decreaseDeposit(\\n        Structures.Tokens tokenID,\\n        address user,\\n        uint256 amountToRemove\\n    ) internal returns (uint256 newDeposit) {\\n        // get current deposit\\n        uint256 currentDeposit = _deposit[uint256(tokenID)][user];\\n\\n        // check if sufficient deposit\\n        require(currentDeposit >= amountToRemove, \\\"INSUFFICIENT_DEPOSIT\\\");\\n\\n        // calculate new deposit amount\\n        newDeposit = currentDeposit.sub(amountToRemove);\\n\\n        // set new stake to storage\\n        _deposit[uint256(tokenID)][user] = newDeposit;\\n\\n        // emit event\\n        emit DepositDecreased(tokenID, user, amountToRemove, newDeposit);\\n\\n        // return\\n        return newDeposit;\\n    }\\n\\n    function _clearDeposit(\\n        Structures.Tokens tokenID,\\n        address user\\n    ) internal returns (uint256 amountRemoved) {\\n        // get current deposit\\n        uint256 currentDeposit = _deposit[uint256(tokenID)][user];\\n\\n        // remove deposit\\n        _decreaseDeposit(tokenID, user, currentDeposit);\\n\\n        // return\\n        return currentDeposit;\\n    }\\n\\n    function _getDeposit(\\n        Structures.Tokens tokenID,\\n        address user\\n    ) internal view returns (uint256 deposit) {\\n        return _deposit[uint256(tokenID)][user];\\n    }\\n}\\n\",\"keccak256\":\"0xbde50573d2e5a22daecdfdb1d457c4f50b7ea16e18a03eac04013ce10f269d36\"},\"contracts/modules/Events.sol\":{\"content\":\"/**\\r\\n * @title Events\\r\\n * @dev This abstract contract defines the events related to the Mecenate platform's post lifecycle.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./Data.sol\\\";\\r\\n\\r\\nabstract contract Events is Data {\\r\\n    event Created(Structures.Post post);\\r\\n    event Accepted(Structures.Post post);\\r\\n    event Valid(Structures.Post post);\\r\\n    event Invalid(Structures.Post post);\\r\\n    event Finalized(Structures.Post post);\\r\\n    event MadePublic(Structures.Post post);\\r\\n    event Renounced(Structures.Post post);\\r\\n}\\r\\n\",\"keccak256\":\"0x3aeaf067b1f9010a2456df46fb54d4727b3a24082b1446ac9266dbcdd8c838f6\"},\"contracts/modules/Finalization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\nimport \\\"./Staking.sol\\\";\\n\\nabstract contract Finalization is Staking {\\n    function finalizePost(\\n        bool valid,\\n        uint256 punishment,\\n        bytes32 uid\\n    ) external virtual {\\n        require(msg.sender == post.postdata.escrow.buyer, \\\"NOT_SELLER\\\");\\n\\n        require(\\n            post.postdata.settings.status == Structures.PostStatus.Submitted,\\n            \\\"NOT_SUBMITTED\\\"\\n        );\\n\\n        IEAS eas = IEAS(\\n            IMecenateFeedFactory(settings.factoryContract).easContract()\\n        );\\n\\n        Attestation memory attestation = eas.getAttestation(uid);\\n\\n        require(\\n            attestation.attester == post.postdata.escrow.buyer,\\n            \\\"INVALID_ATTESTATION\\\"\\n        );\\n\\n        require(\\n            attestation.recipient == post.postdata.escrow.seller,\\n            \\\"INVALID_RECIPIENT\\\"\\n        );\\n\\n        require(\\n            attestation.schema ==\\n                IMecenateFeedFactory(settings.factoryContract).easSchema(),\\n            \\\"INVALID_SCHEMA\\\"\\n        );\\n\\n        (bool easResult, address feed, bytes memory postBytes) = abi.decode(\\n            attestation.data,\\n            (bool, address, bytes)\\n        );\\n\\n        require(feed == address(this), \\\"INVALID_FEED\\\");\\n\\n        require(\\n            keccak256(abi.encode(postBytes)) ==\\n                keccak256(abi.encode(post.postdata.data.encryptedData)),\\n            \\\"INVALID_POST\\\"\\n        );\\n\\n        // Common contract addresses and variables\\n        address treasuryContract = IMecenateFeedFactory(\\n            settings.factoryContract\\n        ).treasuryContract();\\n\\n        uint256 buyerFee = (post.postdata.escrow.payment *\\n            IMecenateTreasury(treasuryContract).globalFee()) / 10000;\\n\\n        uint256 amountToAdd = post.postdata.escrow.payment - buyerFee;\\n\\n        // Variables for stake changes\\n        uint256 buyerStake;\\n\\n        uint256 sellerStake;\\n\\n        if (post.postdata.settings.endTimeStamp < block.timestamp || valid) {\\n            require(easResult == valid, \\\"INVALID_ATTESTATION\\\");\\n\\n            // Code for both the timeout and the valid case\\n            buyerStake = Deposit._decreaseDeposit(\\n                post.postdata.settings.tokenId,\\n                post.postdata.escrow.buyer,\\n                post.postdata.escrow.payment\\n            );\\n\\n            sellerStake = Deposit._increaseDeposit(\\n                post.postdata.settings.tokenId,\\n                post.postdata.escrow.seller,\\n                amountToAdd\\n            );\\n\\n            _burn(post.postdata.settings.tokenId, treasuryContract, buyerFee);\\n\\n            post.postdata.escrow.stake = sellerStake;\\n\\n            post.postdata.escrow.payment = buyerStake;\\n\\n            _changeStatus(\\n                valid\\n                    ? Structures.PostStatus.Finalized\\n                    : Structures.PostStatus.Punished\\n            );\\n\\n            emit Valid(post);\\n        } else if (!valid) {\\n            require(easResult == valid, \\\"INVALID_ATTESTATION\\\");\\n\\n            require(\\n                punishment <= post.postdata.escrow.stake,\\n                \\\"PUNISHMENT_TOO_HIGH\\\"\\n            );\\n            require(settings.punishmentRatio < 1e18, \\\"PUNISHMENT_RATIO_HIGH\\\");\\n\\n            uint256 penalty = (punishment * settings.punishmentRatio) / 1e18;\\n\\n            post.postdata.escrow.payment = _burnStake(\\n                post.postdata.settings.tokenId,\\n                post.postdata.escrow.buyer,\\n                penalty\\n            );\\n\\n            post.postdata.escrow.stake = _burnStake(\\n                post.postdata.settings.tokenId,\\n                post.postdata.escrow.seller,\\n                punishment\\n            );\\n\\n            // Update status and penalties\\n            post.postdata.settings.status = Structures.PostStatus.Punished;\\n\\n            post.postdata.escrow.punishment = punishment;\\n\\n            post.postdata.escrow.penalty = penalty;\\n\\n            _changeStatus(Structures.PostStatus.Punished);\\n\\n            emit Invalid(post);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x48480a5f232b62f022911a4f507fa954ee2e8a414ac885e7178e007ba9fe969f\",\"license\":\"MIT\"},\"contracts/modules/Staking.sol\":{\"content\":\"/**\\n * @title Staking\\n * @dev This contract handles staking functionality for the Mecenate platform.\\n * It allows users to add, take, and burn stakes, and provides functions to get the total staked amount and individual stake amounts.\\n * It also includes a modifier to check the status of a post before allowing stake-related transactions.\\n */\\npragma solidity 0.8.19;\\n\\nimport \\\"./Deposit.sol\\\";\\nimport \\\"./Events.sol\\\";\\n\\nabstract contract Staking is Events, Deposit, TokenManager {\\n    using SafeMath for uint256;\\n\\n    event StakeBurned(address staker, uint256 amount);\\n\\n    event StakeTaken(address staker, uint256 amount, Structures.Tokens tokenId);\\n\\n    event StakeAdded(address staker, uint256 amount, Structures.Tokens tokenId);\\n\\n    function _addStake(\\n        Structures.Tokens tokenId,\\n        address staker,\\n        address funder,\\n        uint256 amountToAdd\\n    ) internal returns (uint256 newStake) {\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\n\\n        require(\\n            currentStatus != Structures.PostStatus.Accepted &&\\n                currentStatus != Structures.PostStatus.Submitted,\\n            \\\"INVALID_STATUS\\\"\\n        );\\n\\n        require(amountToAdd > 0, \\\"STAKE_REQUIRED\\\");\\n\\n        if (tokenId != Structures.Tokens.NaN) {\\n            _transferFrom(tokenId, funder, address(this), amountToAdd);\\n        }\\n\\n        newStake = Deposit._increaseDeposit(tokenId, staker, amountToAdd);\\n\\n        emit StakeAdded(staker, amountToAdd, tokenId);\\n\\n        return newStake;\\n    }\\n\\n    function _takeStake(\\n        Structures.Tokens tokenId,\\n        address staker,\\n        address receiver,\\n        uint256 amountToTake\\n    ) internal returns (uint256 newStake) {\\n        // Memorizza lo status del post in una variabile per evitare accessi ridondanti allo storage\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\n\\n        // Verifica che lo status del post sia valido per procedere\\n        require(\\n            currentStatus != Structures.PostStatus.Accepted &&\\n                currentStatus != Structures.PostStatus.Submitted,\\n            \\\"INVALID_STATUS\\\"\\n        );\\n\\n        // Effettua il trasferimento del token o dell'Ether\\n        if (tokenId == Structures.Tokens.NaN) {\\n            //(bool result, ) = payable(_to).call{value: amountToTake}(\\\"\\\");\\n            //require(result, \\\"CALL_FAILED\\\");\\n            payable(receiver).transfer(amountToTake);\\n        } else {\\n            _transfer(tokenId, receiver, amountToTake);\\n        }\\n\\n        // Aggiorna il deposito e emette un evento\\n        newStake = Deposit._decreaseDeposit(tokenId, staker, amountToTake);\\n        emit StakeTaken(staker, amountToTake, tokenId);\\n\\n        return newStake;\\n    }\\n\\n    function _takeFullStake(\\n        Structures.Tokens tokenId,\\n        address staker,\\n        address receiver\\n    ) internal returns (uint256 amountTaken) {\\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, staker);\\n\\n        uint256 newStake = _takeStake(\\n            tokenId,\\n            staker,\\n            receiver,\\n            currentDeposit\\n        );\\n\\n        return newStake;\\n    }\\n\\n    function _burnStake(\\n        Structures.Tokens tokenId,\\n        address staker,\\n        uint256 amountToBurn\\n    ) internal returns (uint256 newStake) {\\n        uint256 newDeposit = Deposit._decreaseDeposit(\\n            tokenId,\\n            staker,\\n            amountToBurn\\n        );\\n\\n        bool burnEnabled = IMecenateFeedFactory(settings.factoryContract)\\n            .burnEnabled();\\n\\n        address treasuryContract = IMecenateFeedFactory(\\n            settings.factoryContract\\n        ).treasuryContract();\\n\\n        if (burnEnabled == false) {\\n            if (tokenId == Structures.Tokens.NaN) {\\n                (bool result, ) = payable(treasuryContract).call{\\n                    value: amountToBurn\\n                }(\\\"\\\");\\n                require(result, \\\"CALL_FAILED\\\");\\n            } else {\\n                _transfer(tokenId, treasuryContract, amountToBurn);\\n            }\\n        } else {\\n            if (tokenId == Structures.Tokens.DAI) {\\n                _burnDai(amountToBurn);\\n            } else if (tokenId == Structures.Tokens.MUSE) {\\n                _burn(amountToBurn);\\n            } else if (tokenId == Structures.Tokens.NaN) {\\n                _burnWeth(amountToBurn);\\n            }\\n        }\\n\\n        emit StakeBurned(staker, amountToBurn);\\n\\n        return newDeposit;\\n    }\\n\\n    function _burnFullStake(\\n        Structures.Tokens tokenId,\\n        address staker\\n    ) internal returns (uint256 amountBurned) {\\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, staker);\\n\\n        _burnStake(tokenId, staker, currentDeposit);\\n\\n        return currentDeposit;\\n    }\\n\\n    function getStake(\\n        Structures.Tokens tokenId,\\n        address staker\\n    ) external view returns (uint256 amount) {\\n        // get deposit\\n        amount = Deposit._getDeposit(tokenId, staker);\\n        // explicit return\\n        return amount;\\n    }\\n\\n    function getTotalStaked() external view returns (uint256) {\\n        uint256 amountSeller = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            post.postdata.escrow.seller\\n        );\\n\\n        uint256 amountBuyer = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            post.postdata.escrow.buyer\\n        );\\n\\n        return (amountSeller + amountBuyer);\\n    }\\n\\n    function addStake(\\n        Structures.Tokens tokenId,\\n        address _funder,\\n        uint256 amountToAdd\\n    ) external payable returns (uint256) {\\n        require(tokenId == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n\\n        // Check if the encryptedVaultId matches with either the buyer or the seller\\n        require(\\n            msg.sender == post.postdata.escrow.buyer ||\\n                msg.sender == post.postdata.escrow.seller,\\n            \\\"WRONG_MSGSENDER\\\"\\n        );\\n\\n        // Determine the amount to add based on the role (buyer or seller)\\n        uint256 actualAmountToAdd = (msg.sender == post.postdata.escrow.seller)\\n            ? msg.value\\n            : amountToAdd;\\n\\n        // Update the stake\\n        uint256 newStake = _addStake(\\n            tokenId,\\n            msg.sender,\\n            _funder,\\n            actualAmountToAdd\\n        );\\n\\n        // Update the corresponding escrow value based on the role\\n        if (msg.sender == post.postdata.escrow.buyer) {\\n            post.postdata.escrow.payment = newStake;\\n        } else {\\n            post.postdata.escrow.stake = newStake;\\n        }\\n\\n        return newStake;\\n    }\\n\\n    function takeStake(\\n        Structures.Tokens tokenId,\\n        address receiver,\\n        uint256 amountToTake\\n    ) external returns (uint256) {\\n        require(tokenId == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n\\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, msg.sender);\\n\\n        require(currentDeposit >= amountToTake, \\\"NOT_ENOUGH_STAKE\\\");\\n\\n        uint256 newBalance = _takeStake(\\n            tokenId,\\n            msg.sender,\\n            receiver,\\n            amountToTake\\n        );\\n\\n        if (msg.sender == post.postdata.escrow.buyer) {\\n            post.postdata.escrow.payment = newBalance;\\n        } else {\\n            post.postdata.escrow.stake = newBalance;\\n        }\\n\\n        return newBalance;\\n    }\\n\\n    function takeFullStake(\\n        Structures.Tokens tokenId,\\n        address receiver\\n    ) external returns (uint256) {\\n        require(tokenId == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n\\n        uint256 newBalance = _takeFullStake(tokenId, msg.sender, receiver);\\n\\n        if (msg.sender == post.postdata.escrow.buyer) {\\n            post.postdata.escrow.payment = newBalance;\\n        } else if (msg.sender == post.postdata.escrow.seller) {\\n            post.postdata.escrow.stake = newBalance;\\n        }\\n\\n        return newBalance;\\n    }\\n\\n    function getSellerStake() external view returns (uint256 amount) {\\n        // get deposit\\n        amount = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            post.postdata.escrow.seller\\n        );\\n        // explicit return\\n        return amount;\\n    }\\n\\n    function getBuyerStake() external view returns (uint256 amount) {\\n        // get deposit\\n        amount = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            post.postdata.escrow.buyer\\n        );\\n        // explicit return\\n        return amount;\\n    }\\n}\\n\",\"keccak256\":\"0x94556a37278a2684b61c9734e71d523d215af864486d60b0562f52d5437308dc\"},\"contracts/modules/TokenManager.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"./BurnDAI.sol\\\";\\n\\nabstract contract TokenManager is BurnDAI {\\n    function _getTokenAddress(\\n        Structures.Tokens tokenID\\n    ) internal view returns (address) {\\n        if (tokenID == Structures.Tokens.DAI)\\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\\n        if (tokenID == Structures.Tokens.MUSE)\\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\\n        return address(0);\\n    }\\n\\n    function _checkAllowance(\\n        Structures.Tokens tokenID,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal view {\\n        address tokenAddress = _getTokenAddress(tokenID);\\n        require(\\n            IERC20(tokenAddress).allowance(from, to) >= value,\\n            \\\"INSUFFICIENT_ALLOWANCE\\\"\\n        );\\n    }\\n\\n    modifier onlyValidTokenID(Structures.Tokens tokenID) {\\n        require(\\n            tokenID == Structures.Tokens.MUSE ||\\n                tokenID == Structures.Tokens.DAI ||\\n                tokenID == Structures.Tokens.NaN,\\n            \\\"WRONG_TOKEN\\\"\\n        );\\n        _;\\n    }\\n\\n    function isValidTokenID(\\n        Structures.Tokens tokenID\\n    ) internal pure returns (bool validity) {\\n        return\\n            tokenID == Structures.Tokens.MUSE ||\\n            tokenID == Structures.Tokens.DAI;\\n    }\\n\\n    function _transfer(\\n        Structures.Tokens tokenID,\\n        address to,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        require(\\n            IERC20(_getTokenAddress(tokenID)).transfer(to, value),\\n            \\\"TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function _transferFrom(\\n        Structures.Tokens tokenID,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        address tokenAddress = _getTokenAddress(tokenID);\\n        _checkAllowance(tokenID, from, to, value);\\n        require(\\n            IERC20(tokenAddress).transferFrom(from, to, value),\\n            \\\"TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function _burn(\\n        Structures.Tokens tokenID,\\n        address _receiver,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) returns (bool success) {\\n        bool burnEnabled = IMecenateFeedFactory(settings.factoryContract)\\n            .burnEnabled();\\n\\n        if (burnEnabled == false) {\\n            if (tokenID == Structures.Tokens.NaN) {\\n                (bool result, ) = payable(_receiver).call{value: value}(\\\"\\\");\\n                require(result, \\\"CALL_FAILED\\\");\\n            } else {\\n                TokenManager._transfer(tokenID, _receiver, value);\\n            }\\n        } else {\\n            if (tokenID == Structures.Tokens.DAI) {\\n                _burnDai(value);\\n            } else if (tokenID == Structures.Tokens.MUSE) {\\n                _burn(value);\\n            } else if (tokenID == Structures.Tokens.NaN) {\\n                _burnWeth(value);\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    function _burnFrom(\\n        Structures.Tokens tokenID,\\n        address from,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        address treasury = IMecenateFeedFactory(settings.factoryContract)\\n            .treasuryContract();\\n\\n        if (tokenID == Structures.Tokens.DAI) {\\n            IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\n                .transferFrom(from, treasury, value);\\n        } else if (tokenID == Structures.Tokens.MUSE) {\\n            BurnMUSE._burnFrom(from, value);\\n        }\\n    }\\n\\n    function _approve(\\n        Structures.Tokens tokenID,\\n        address spender,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        if (tokenID == Structures.Tokens.DAI) {\\n            require(\\n                IERC20(\\n                    IMecenateFeedFactory(settings.factoryContract).daiToken()\\n                ).approve(spender, value),\\n                \\\"APPROVE_FAILED\\\"\\n            );\\n        } else if (tokenID == Structures.Tokens.MUSE) {\\n            uint256 currentAllowance = IMUSE(\\n                IMecenateFeedFactory(settings.factoryContract).museToken()\\n            ).allowance(msg.sender, spender);\\n\\n            uint256 newAllowance = currentAllowance + value;\\n            require(\\n                IMUSE(IMecenateFeedFactory(settings.factoryContract).daiToken())\\n                    .increaseAllowance(spender, newAllowance),\\n                \\\"APPROVE_FAILED\\\"\\n            );\\n        }\\n    }\\n\\n    function totalSupply(\\n        Structures.Tokens tokenID\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).totalSupply();\\n    }\\n\\n    function balanceOf(\\n        Structures.Tokens tokenID,\\n        address who\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).balanceOf(who);\\n    }\\n\\n    function allowance(\\n        Structures.Tokens tokenID,\\n        address owner,\\n        address spender\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).allowance(owner, spender);\\n    }\\n}\\n\",\"keccak256\":\"0x8eded6283ea4effbe4861c36f73afaace086765ac8d26ef695ac8855ed15e8b1\"},\"contracts/modules/Version.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/// @title Semver\\n/// @notice A simple contract for managing contract versions.\\nabstract contract Version {\\n    // Contract's major version number.\\n    uint256 private immutable _major;\\n\\n    // Contract's minor version number.\\n    uint256 private immutable _minor;\\n\\n    // Contract's patch version number.\\n    uint256 private immutable _path;\\n\\n    /// @dev Create a new Semver instance.\\n    /// @param major Major version number.\\n    /// @param minor Minor version number.\\n    /// @param patch Patch version number.\\n    constructor(uint256 major, uint256 minor, uint256 patch) {\\n        _major = major;\\n        _minor = minor;\\n        _path = patch;\\n    }\\n\\n    /// @notice Returns the full semver contract version.\\n    /// @return Semver contract version as a string.\\n    function version() external view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    Strings.toString(_major),\\n                    \\\".\\\",\\n                    Strings.toString(_minor),\\n                    \\\".\\\",\\n                    Strings.toString(_path)\\n                )\\n            );\\n    }\\n\\n    function _version() internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    Strings.toString(_major),\\n                    \\\".\\\",\\n                    Strings.toString(_minor),\\n                    \\\".\\\",\\n                    Strings.toString(_path)\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xa99614da4eb0014c2756685061352b80325a07e4cb14f7c704ec2a62e182688f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3523,"contract":"contracts/modules/Finalization.sol:Finalization","label":"owner","offset":0,"slot":"0","type":"t_address"},{"astId":3526,"contract":"contracts/modules/Finalization.sol:Finalization","label":"post","offset":0,"slot":"1","type":"t_struct(Post)2574_storage"},{"astId":3529,"contract":"contracts/modules/Finalization.sol:Finalization","label":"settings","offset":0,"slot":"18","type":"t_struct(FeedSettings)2550_storage"},{"astId":3533,"contract":"contracts/modules/Finalization.sol:Finalization","label":"postDurationToDays","offset":0,"slot":"24","type":"t_mapping(t_uint8,t_uint256)"},{"astId":3537,"contract":"contracts/modules/Finalization.sol:Finalization","label":"validStatuses","offset":0,"slot":"25","type":"t_mapping(t_uint8,t_bool)"},{"astId":3871,"contract":"contracts/modules/Finalization.sol:Finalization","label":"_deposit","offset":0,"slot":"26","type":"t_mapping(t_uint256,t_mapping(t_address,t_uint256))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_enum(PostStatus)2521":{"encoding":"inplace","label":"enum Structures.PostStatus","numberOfBytes":"1"},"t_enum(PostType)2531":{"encoding":"inplace","label":"enum Structures.PostType","numberOfBytes":"1"},"t_enum(Tokens)2525":{"encoding":"inplace","label":"enum Structures.Tokens","numberOfBytes":"1"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_uint8,t_bool)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint8,t_uint256)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(FeedSettings)2550_storage":{"encoding":"inplace","label":"struct Structures.FeedSettings","members":[{"astId":2539,"contract":"contracts/modules/Finalization.sol:Finalization","label":"punishmentRatio","offset":0,"slot":"0","type":"t_uint256"},{"astId":2541,"contract":"contracts/modules/Finalization.sol:Finalization","label":"postCount","offset":0,"slot":"1","type":"t_uint256"},{"astId":2543,"contract":"contracts/modules/Finalization.sol:Finalization","label":"usersModuleContract","offset":0,"slot":"2","type":"t_address"},{"astId":2545,"contract":"contracts/modules/Finalization.sol:Finalization","label":"factoryContract","offset":0,"slot":"3","type":"t_address"},{"astId":2547,"contract":"contracts/modules/Finalization.sol:Finalization","label":"router","offset":0,"slot":"4","type":"t_address"},{"astId":2549,"contract":"contracts/modules/Finalization.sol:Finalization","label":"version","offset":0,"slot":"5","type":"t_string_storage"}],"numberOfBytes":"192"},"t_struct(Post)2574_storage":{"encoding":"inplace","label":"struct Structures.Post","members":[{"astId":2570,"contract":"contracts/modules/Finalization.sol:Finalization","label":"creator","offset":0,"slot":"0","type":"t_struct(User)2627_storage"},{"astId":2573,"contract":"contracts/modules/Finalization.sol:Finalization","label":"postdata","offset":0,"slot":"3","type":"t_struct(PostData)2584_storage"}],"numberOfBytes":"544"},"t_struct(PostData)2584_storage":{"encoding":"inplace","label":"struct Structures.PostData","members":[{"astId":2577,"contract":"contracts/modules/Finalization.sol:Finalization","label":"settings","offset":0,"slot":"0","type":"t_struct(PostSettings)2607_storage"},{"astId":2580,"contract":"contracts/modules/Finalization.sol:Finalization","label":"escrow","offset":0,"slot":"5","type":"t_struct(PostEscrow)2620_storage"},{"astId":2583,"contract":"contracts/modules/Finalization.sol:Finalization","label":"data","offset":0,"slot":"11","type":"t_struct(PostEncryptedData)2591_storage"}],"numberOfBytes":"448"},"t_struct(PostEncryptedData)2591_storage":{"encoding":"inplace","label":"struct Structures.PostEncryptedData","members":[{"astId":2586,"contract":"contracts/modules/Finalization.sol:Finalization","label":"encryptedData","offset":0,"slot":"0","type":"t_bytes_storage"},{"astId":2588,"contract":"contracts/modules/Finalization.sol:Finalization","label":"encryptedKey","offset":0,"slot":"1","type":"t_bytes_storage"},{"astId":2590,"contract":"contracts/modules/Finalization.sol:Finalization","label":"decryptedData","offset":0,"slot":"2","type":"t_bytes_storage"}],"numberOfBytes":"96"},"t_struct(PostEscrow)2620_storage":{"encoding":"inplace","label":"struct Structures.PostEscrow","members":[{"astId":2609,"contract":"contracts/modules/Finalization.sol:Finalization","label":"buyer","offset":0,"slot":"0","type":"t_address"},{"astId":2611,"contract":"contracts/modules/Finalization.sol:Finalization","label":"seller","offset":0,"slot":"1","type":"t_address"},{"astId":2613,"contract":"contracts/modules/Finalization.sol:Finalization","label":"stake","offset":0,"slot":"2","type":"t_uint256"},{"astId":2615,"contract":"contracts/modules/Finalization.sol:Finalization","label":"payment","offset":0,"slot":"3","type":"t_uint256"},{"astId":2617,"contract":"contracts/modules/Finalization.sol:Finalization","label":"punishment","offset":0,"slot":"4","type":"t_uint256"},{"astId":2619,"contract":"contracts/modules/Finalization.sol:Finalization","label":"penalty","offset":0,"slot":"5","type":"t_uint256"}],"numberOfBytes":"192"},"t_struct(PostSettings)2607_storage":{"encoding":"inplace","label":"struct Structures.PostSettings","members":[{"astId":2594,"contract":"contracts/modules/Finalization.sol:Finalization","label":"status","offset":0,"slot":"0","type":"t_enum(PostStatus)2521"},{"astId":2597,"contract":"contracts/modules/Finalization.sol:Finalization","label":"postType","offset":1,"slot":"0","type":"t_enum(PostType)2531"},{"astId":2599,"contract":"contracts/modules/Finalization.sol:Finalization","label":"creationTimeStamp","offset":0,"slot":"1","type":"t_uint256"},{"astId":2601,"contract":"contracts/modules/Finalization.sol:Finalization","label":"endTimeStamp","offset":0,"slot":"2","type":"t_uint256"},{"astId":2603,"contract":"contracts/modules/Finalization.sol:Finalization","label":"duration","offset":0,"slot":"3","type":"t_uint256"},{"astId":2606,"contract":"contracts/modules/Finalization.sol:Finalization","label":"tokenId","offset":0,"slot":"4","type":"t_enum(Tokens)2525"}],"numberOfBytes":"160"},"t_struct(User)2627_storage":{"encoding":"inplace","label":"struct Structures.User","members":[{"astId":2622,"contract":"contracts/modules/Finalization.sol:Finalization","label":"evmAddress","offset":0,"slot":"0","type":"t_address"},{"astId":2624,"contract":"contracts/modules/Finalization.sol:Finalization","label":"sismoVaultId","offset":0,"slot":"1","type":"t_bytes_storage"},{"astId":2626,"contract":"contracts/modules/Finalization.sol:Finalization","label":"publicKey","offset":0,"slot":"2","type":"t_bytes_storage"}],"numberOfBytes":"96"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{"version()":{"notice":"Returns the full semver contract version."}},"version":1}}},"contracts/modules/Renounce.sol":{"Renounce":{"abi":[{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Accepted","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Created","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenID","type":"uint8"},{"indexed":false,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newDeposit","type":"uint256"}],"name":"DepositDecreased","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenID","type":"uint8"},{"indexed":false,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newDeposit","type":"uint256"}],"name":"DepositIncreased","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Finalized","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Invalid","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"MadePublic","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Renounced","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"staker","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"name":"StakeAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"staker","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"StakeBurned","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"staker","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"name":"StakeTaken","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Valid","type":"event"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"address","name":"_funder","type":"address"},{"internalType":"uint256","name":"amountToAdd","type":"uint256"}],"name":"addStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"getBuyerStake","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getEncryptedPost","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPaymentRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPost","outputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"internalType":"struct Structures.Post","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSellerStake","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"address","name":"staker","type":"address"}],"name":"getStake","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStakeRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStatus","outputs":[{"internalType":"enum Structures.PostStatus","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenId","outputs":[{"internalType":"enum Structures.Tokens","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenIdAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTotalStaked","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"post","outputs":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"postCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renouncePost","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"address","name":"receiver","type":"address"}],"name":"takeFullStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint256","name":"amountToTake","type":"uint256"}],"name":"takeStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"version()":{"returns":{"_0":"Semver contract version as a string."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"addStake(uint8,address,uint256)":"1d0b4af5","getBuyerStake()":"4c38d877","getEncryptedPost()":"729e2eb1","getPaymentRequested()":"d24e0c87","getPost()":"8c6838ba","getSellerStake()":"5c63ed69","getStake(uint8,address)":"52a6cb4a","getStakeRequested()":"faeb5e17","getStatus()":"4e69d560","getTokenId()":"010a38f5","getTokenIdAddress()":"5ad4e170","getTotalStaked()":"0917e776","owner()":"8da5cb5b","post()":"05c1f502","postCount()":"17906c2e","renouncePost()":"3d876d5d","takeFullStake(uint8,address)":"f2d7dbb6","takeStake(uint8,address,uint256)":"ed70d5d5","version()":"54fd4d50"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Accepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDeposit\",\"type\":\"uint256\"}],\"name\":\"DepositDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDeposit\",\"type\":\"uint256\"}],\"name\":\"DepositIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Invalid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"MadePublic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Renounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"name\":\"StakeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"name\":\"StakeTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Valid\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_funder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToAdd\",\"type\":\"uint256\"}],\"name\":\"addStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyerStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEncryptedPost\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaymentRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPost\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.Post\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellerStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenIdAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"post\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"takeFullStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToTake\",\"type\":\"uint256\"}],\"name\":\"takeStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"version()\":{\"returns\":{\"_0\":\"Semver contract version as a string.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"version()\":{\"notice\":\"Returns the full semver contract version.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/Renounce.sol\":\"Renounce\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/helpers/eas/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror DeadlineExpired();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/// @notice A struct representing ECDSA signature data.\\nstruct Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/// @notice A struct representing a single attestation.\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/// @notice A helper function to work with unchecked iterators in loops.\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685\",\"license\":\"MIT\"},\"contracts/helpers/eas/IEAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ISchemaRegistry} from \\\"./ISchemaRegistry.sol\\\";\\nimport {Attestation, Signature} from \\\"./Common.sol\\\";\\n\\n/// @notice A struct representing the arguments of the attestation request.\\nstruct AttestationRequestData {\\n    address recipient; // The recipient of the attestation.\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes32 refUID; // The UID of the related attestation.\\n    bytes data; // Custom attestation data.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the attestation request.\\nstruct AttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the full delegated attestation request.\\nstruct DelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n    Signature signature; // The ECDSA signature data.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi attestation request.\\nstruct MultiAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi attestation request.\\nstruct MultiDelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the arguments of the revocation request.\\nstruct RevocationRequestData {\\n    bytes32 uid; // The UID of the attestation to revoke.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the revocation request.\\nstruct RevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the arguments of the full delegated revocation request.\\nstruct DelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n    Signature signature; // The ECDSA signature data.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi revocation request.\\nstruct MultiRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi revocation request.\\nstruct MultiDelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @title IEAS\\n/// @notice EAS - Ethereum Attestation Service interface.\\ninterface IEAS {\\n    /// @notice Emitted when an attestation has been made.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param uid The UID the revoked attestation.\\n    /// @param schemaUID The UID of the schema.\\n    event Attested(\\n        address indexed recipient,\\n        address indexed attester,\\n        bytes32 uid,\\n        bytes32 indexed schemaUID\\n    );\\n\\n    /// @notice Emitted when an attestation has been revoked.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param schemaUID The UID of the schema.\\n    /// @param uid The UID the revoked attestation.\\n    event Revoked(\\n        address indexed recipient,\\n        address indexed attester,\\n        bytes32 uid,\\n        bytes32 indexed schemaUID\\n    );\\n\\n    /// @notice Emitted when a data has been timestamped.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event Timestamped(bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /// @notice Emitted when a data has been revoked.\\n    /// @param revoker The address of the revoker.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event RevokedOffchain(\\n        address indexed revoker,\\n        bytes32 indexed data,\\n        uint64 indexed timestamp\\n    );\\n\\n    /// @notice Returns the address of the global schema registry.\\n    /// @return The address of the global schema registry.\\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\\n\\n    /// @notice Attests to a specific schema.\\n    /// @param request The arguments of the attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attest({\\n    ///         schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",\\n    ///         data: {\\n    ///             recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n    ///             data: \\\"0xF00D\\\",\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function attest(\\n        AttestationRequest calldata request\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attestByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function attestByDelegation(\\n        DelegatedAttestationRequest calldata delegatedRequest\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to multiple schemas.\\n    /// @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttest([{\\n    ///         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\\n    ///             data: '0x12345678',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiAttest(\\n        MultiAttestationRequest[] calldata multiRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Attests to multiple schemas using via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\\n    ///     grouped by distinct schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttestByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiAttestByDelegation(\\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Revokes an existing attestation to a specific schema.\\n    /// @param request The arguments of the revocation request.\\n    ///\\n    /// Example:\\n    ///     revoke({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function revoke(RevocationRequest calldata request) external payable;\\n\\n    /// @notice Revokes an existing attestation to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated revocation request.\\n    ///\\n    /// Example:\\n    ///     revokeByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 27,\\n    ///             r: '0xb593...7142',\\n    ///             s: '0x0f5b...2cce'\\n    ///         },\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function revokeByDelegation(\\n        DelegatedRevocationRequest calldata delegatedRequest\\n    ) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas.\\n    /// @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevoke([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiRevoke(\\n        MultiRevocationRequest[] calldata multiRequests\\n    ) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests\\n    ///     should be grouped by distinct schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevokeByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiRevokeByDelegation(\\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\\n    ) external payable;\\n\\n    /// @notice Timestamps the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function timestamp(bytes32 data) external returns (uint64);\\n\\n    /// @notice Timestamps the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\\n\\n    /// @notice Revokes the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function revokeOffchain(bytes32 data) external returns (uint64);\\n\\n    /// @notice Revokes the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function multiRevokeOffchain(\\n        bytes32[] calldata data\\n    ) external returns (uint64);\\n\\n    /// @notice Returns an existing attestation by UID.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return The attestation data members.\\n    function getAttestation(\\n        bytes32 uid\\n    ) external view returns (Attestation memory);\\n\\n    /// @notice Checks whether an attestation exists.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return Whether an attestation exists.\\n    function isAttestationValid(bytes32 uid) external view returns (bool);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getTimestamp(bytes32 data) external view returns (uint64);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getRevokeOffchain(\\n        address revoker,\\n        bytes32 data\\n    ) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xc95cca3d90dbae3a21d0f0e28fdf38cc5a85cbd8c760b7759782b18e8f62acc2\",\"license\":\"MIT\"},\"contracts/helpers/eas/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ISchemaResolver} from \\\"./ISchemaResolver.sol\\\";\\n\\n/// @notice A struct representing a record for a submitted schema.\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\n/// @title ISchemaRegistry\\n/// @notice The interface of global attestation schemas for the Ethereum Attestation Service protocol.\\ninterface ISchemaRegistry {\\n    /// @notice Emitted when a new schema has been registered\\n    /// @param uid The schema UID.\\n    /// @param registerer The address of the account used to register the schema.\\n    /// @param schema The schema data.\\n    event Registered(\\n        bytes32 indexed uid,\\n        address indexed registerer,\\n        SchemaRecord schema\\n    );\\n\\n    /// @notice Submits and reserves a new schema\\n    /// @param schema The schema data schema.\\n    /// @param resolver An optional schema resolver.\\n    /// @param revocable Whether the schema allows revocations explicitly.\\n    /// @return The UID of the new schema.\\n    function register(\\n        string calldata schema,\\n        ISchemaResolver resolver,\\n        bool revocable\\n    ) external returns (bytes32);\\n\\n    /// @notice Returns an existing schema by UID\\n    /// @param uid The UID of the schema to retrieve.\\n    /// @return The schema data members.\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\\n\",\"keccak256\":\"0x743ddc248c97a78d34239035d1d9557a74dcaaa5b59a2aa66cea4eadabb8b2de\",\"license\":\"MIT\"},\"contracts/helpers/eas/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {Attestation} from \\\"./Common.sol\\\";\\n\\n/// @title ISchemaResolver\\n/// @notice The interface of an optional schema resolver.\\ninterface ISchemaResolver {\\n    /// @notice Checks if the resolver can be sent ETH.\\n    /// @return Whether the resolver supports ETH transfers.\\n    function isPayable() external pure returns (bool);\\n\\n    /// @notice Processes an attestation and verifies whether it's valid.\\n    /// @param attestation The new attestation.\\n    /// @return Whether the attestation is valid.\\n    function attest(\\n        Attestation calldata attestation\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes multiple attestations and verifies whether they are valid.\\n    /// @param attestations The new attestations.\\n    /// @param values Explicit ETH amounts which were sent with each attestation.\\n    /// @return Whether all the attestations are valid.\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\\n    /// @param attestation The existing attestation to be revoked.\\n    /// @return Whether the attestation can be revoked.\\n    function revoke(\\n        Attestation calldata attestation\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\\n    /// @param attestations The existing attestations to be revoked.\\n    /// @param values Explicit ETH amounts which were sent with each revocation.\\n    /// @return Whether the attestations can be revoked.\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0x97ec835833519c6c11c0fb097ea5bccd888e65f650590fdb643d937430bb4f03\",\"license\":\"MIT\"},\"contracts/interfaces/IMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n// import IERC20 from openzeppelin\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMUSE is IERC20 {\\n    function increaseAllowance(\\n        address spender,\\n        uint256 addedValue\\n    ) external returns (bool);\\n\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 subtractedValue\\n    ) external returns (bool);\\n\\n    function mint(uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x8b0a4012a1cd0815460bb3d15278671589bb85003ff2c38315701b3f2228c633\"},\"contracts/interfaces/IMecenateFeed.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateFeed {\\n    function getPost() external view returns (Structures.Post memory);\\n\\n    function getTotalStaked() external view returns (uint256);\\n\\n    function postCount() external view returns (uint256);\\n\\n    function acceptPost(\\n        Structures.Tokens,\\n        uint256 _amount,\\n        address _funder,\\n        address _buyer\\n    ) external payable;\\n\\n    function getSellerStake() external view returns (uint256);\\n\\n    function getBuyerStake() external view returns (uint256);\\n\\n    function getPaymentRequested() external view returns (uint256);\\n\\n    function getStakeRequested() external view returns (uint256);\\n\\n    function getStatus() external view returns (Structures.PostStatus status);\\n\\n    function getTokenId() external view returns (Structures.Tokens tokenId);\\n\\n    function owner() external view returns (address);\\n\\n    function version() external view returns (string memory);\\n\\n    function getEncryptedPost() external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xe7a4b838d4f4540e4a8e3911c2afea70ebd9a2e87bd526eef13b203c2643a645\"},\"contracts/interfaces/IMecenateFeedFactory.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\ninterface IMecenateFeedFactory {\\n    function owner() external view returns (address payable);\\n\\n    function treasuryContract() external view returns (address payable);\\n\\n    function feeds() external view returns (address[] memory);\\n\\n    function contractCounter() external view returns (uint256);\\n\\n    function isFeed(address _feed) external view returns (bool);\\n\\n    function museToken() external view returns (address);\\n\\n    function wethToken() external view returns (address);\\n\\n    function daiToken() external view returns (address);\\n\\n    function router() external view returns (address);\\n\\n    function getRouterFee(uint8 tokenId) external view returns (uint24);\\n\\n    function burnEnabled() external view returns (bool);\\n\\n    function version() external view returns (string memory);\\n\\n    function easSchema() external view returns (bytes32);\\n\\n    function easContract() external view returns (address);\\n}\\n\",\"keccak256\":\"0x79da402b87332cbe8176ab1d0abd2c5369a0da30970743b86283e1a774eea776\"},\"contracts/interfaces/IMecenateTreasury.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateTreasury {\\r\\n    function globalFee() external view returns (uint256);\\r\\n\\r\\n    function fixedFee() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf544878bba8e01c837110d06eac56042957d59c593ba9083f686ef02aa9276a1\"},\"contracts/interfaces/IMecenateUsers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateUsers {\\n    function registerUser(bytes memory metadata) external;\\n\\n    function getUsers() external view returns (address[] memory);\\n\\n    function getUserCount() external view returns (uint256);\\n\\n    function getUserAt(uint256 index) external view returns (address);\\n\\n    function checkifUserExist(address userAddress) external view returns (bool);\\n\\n    function getPaginatedUsers(\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) external view returns (address[] memory);\\n\\n    function getUserMetadata(\\n        address userAddress\\n    ) external view returns (Structures.User memory);\\n\\n    function getUserPublicKey(\\n        address userAddress\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xf0ff65dbfea12d90cf106325b9478e31b284045327e5f0974db5374b8789e93c\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function withdraw(uint256) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xeb4bd6c56a346f12ec3d681183d613795c151709e834d69ef58f13fd6d7edf62\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\n * @title Structures\\n * @dev This library defines various data structures used in the Mecenate platform.\\n */\\npragma solidity 0.8.19;\\n\\nlibrary Structures {\\n    enum PostStatus {\\n        Waiting,\\n        Proposed,\\n        Accepted,\\n        Submitted,\\n        Finalized,\\n        Punished,\\n        Revealed,\\n        Renounced\\n    }\\n\\n    enum Tokens {\\n        NaN,\\n        MUSE,\\n        DAI\\n    }\\n\\n    enum PostType {\\n        Text,\\n        Image,\\n        Video,\\n        Audio,\\n        File\\n    }\\n    enum PostDuration {\\n        OneDay,\\n        ThreeDays,\\n        OneWeek,\\n        TwoWeeks,\\n        OneMonth\\n    }\\n\\n    struct FeedSettings {\\n        uint256 punishmentRatio;\\n        uint256 postCount;\\n        address usersModuleContract;\\n        address factoryContract;\\n        address router;\\n        string version;\\n    }\\n\\n    struct FactorySettings {\\n        address treasuryContract;\\n        address usersModuleContract;\\n        address easContract;\\n        bytes32 easSchema;\\n        address museToken;\\n        address daiToken;\\n        address wethToken;\\n        address router;\\n    }\\n\\n    /**\\n     * @dev Struct representing a post on the Mecenate platform.\\n     */\\n    struct Post {\\n        User creator;\\n        PostData postdata;\\n    }\\n\\n    /**\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\n     */\\n    struct PostData {\\n        PostSettings settings;\\n        PostEscrow escrow;\\n        PostEncryptedData data;\\n    }\\n\\n    /**\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\n     */\\n    struct PostEncryptedData {\\n        bytes encryptedData;\\n        bytes encryptedKey;\\n        bytes decryptedData;\\n    }\\n\\n    /**\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettings {\\n        PostStatus status;\\n        PostType postType;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n        uint256 duration;\\n        Tokens tokenId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\n     */\\n    struct PostEscrow {\\n        address buyer;\\n        address seller;\\n        uint256 stake;\\n        uint256 payment;\\n        uint256 punishment;\\n        uint256 penalty;\\n    }\\n\\n    /**\\n     * @dev Struct representing a user on the Mecenate platform.\\n     */\\n    struct User {\\n        address evmAddress;\\n        bytes sismoVaultId;\\n        bytes publicKey;\\n    }\\n\\n    /**\\n     * @dev Struct representing a feed on the Mecenate platform.\\n     */\\n    struct Feed {\\n        address contractAddress;\\n        address owner;\\n        uint256 sellerStake;\\n        uint256 buyerStake;\\n        uint256 totalStake;\\n        uint256 postCount;\\n        uint256 paymentRequested;\\n        uint256 stakeRequested;\\n        PostStatus status;\\n        Tokens tokenId;\\n        string version;\\n    }\\n\\n    /**\\n     * @dev Struct representing a bay request on the Mecenate platform.\\n     */\\n    struct BayRequest {\\n        bytes request;\\n        uint256 payment;\\n        uint256 stake;\\n        address postAddress;\\n        bool accepted;\\n        uint256 postCount;\\n        Tokens tokenId;\\n        address buyerAddress;\\n    }\\n}\\n\",\"keccak256\":\"0xab56ad7506e91048fc9c6db9fd9510c42afa61d6b11a99a273bf975643307d8f\"},\"contracts/modules/BurnDAI.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"./BurnMUSE.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"../interfaces/IWETH.sol\\\";\\n\\nabstract contract BurnDAI is BurnMUSE {\\n    using SafeMath for uint256;\\n\\n    function _burnFrom(\\n        address from,\\n        uint256 value\\n    ) internal override returns (bool success) {\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\n            .transferFrom(from, address(this), value);\\n\\n        _burn(value);\\n\\n        return true;\\n    }\\n\\n    function _burnDai(uint256 value) internal returns (bool success) {\\n        // approve uniswap for token transfer\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\n            .approve(settings.router, value);\\n\\n        // swap IMecenateFeedFactory(settings.factoryContract).daiToken() for MUSE\\n        uint256 tokens_sold = value;\\n\\n        uint256 tokens_bought = _swapTokensForToken(\\n            IMecenateFeedFactory(settings.factoryContract).daiToken(),\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\n            IMecenateFeedFactory(settings.factoryContract).getRouterFee(0),\\n            tokens_sold\\n        );\\n\\n        uint256 tokens_sold_to_muse = _swapTokensForToken(\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\n            IMecenateFeedFactory(settings.factoryContract).museToken(),\\n            IMecenateFeedFactory(settings.factoryContract).getRouterFee(1),\\n            tokens_bought\\n        );\\n\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).museToken())\\n            .approve(\\n                IMecenateFeedFactory(settings.factoryContract).museToken(),\\n                tokens_sold_to_muse\\n            );\\n\\n        // burn MUSE\\n        BurnMUSE._burn(tokens_sold_to_muse);\\n\\n        return true;\\n    }\\n\\n    function _burnWeth(uint256 value) internal returns (bool success) {\\n        // deposit IMecenateFeedFactory(settings.factoryContract).wethToken()\\n        IWETH(IMecenateFeedFactory(settings.factoryContract).wethToken())\\n            .deposit{value: value}();\\n\\n        // approve uniswap for token transfer\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).wethToken())\\n            .approve(settings.router, value);\\n\\n        // swap IMecenateFeedFactory(settings.factoryContract).wethToken() for MUSE\\n        uint256 tokens_sold = value;\\n\\n        uint256 tokens_bought = _swapTokensForToken(\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\n            IMecenateFeedFactory(settings.factoryContract).museToken(),\\n            IMecenateFeedFactory(settings.factoryContract).getRouterFee(1),\\n            tokens_sold\\n        );\\n\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).museToken())\\n            .approve(\\n                IMecenateFeedFactory(settings.factoryContract).museToken(),\\n                tokens_bought\\n            );\\n\\n        // burn MUSE\\n        BurnMUSE._burn(tokens_bought);\\n\\n        return true;\\n    }\\n\\n    function getTokenAddress()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address token)\\n    {\\n        return IMecenateFeedFactory(settings.factoryContract).daiToken();\\n    }\\n\\n    function getExchangeAddress()\\n        internal\\n        view\\n        override\\n        returns (address exchange)\\n    {\\n        exchange = settings.router;\\n    }\\n\\n    function _swapTokensForToken(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountIn\\n    ) internal returns (uint256 amountOut) {\\n        // Check and approve allowance\\n        uint256 allowance = IERC20(tokenIn).allowance(\\n            address(this),\\n            settings.router\\n        );\\n        if (allowance < amountIn) {\\n            IERC20(tokenIn).approve(settings.router, type(uint256).max);\\n        }\\n\\n        // Prepare parameters\\n        address recipient = address(this);\\n        uint256 deadline = block.timestamp + 60; // 15 seconds from the current block timestamp\\n\\n        // Perform the swap\\n        // Refer to the Uniswap V3 documentation for details on the params.\\n        amountOut = ISwapRouter(settings.router).exactInputSingle(\\n            ISwapRouter.ExactInputSingleParams({\\n                tokenIn: tokenIn,\\n                tokenOut: tokenOut,\\n                fee: fee,\\n                recipient: recipient,\\n                deadline: deadline,\\n                amountIn: amountIn,\\n                amountOutMinimum: 0, // you may want to set a minimum here\\n                sqrtPriceLimitX96: 0\\n            })\\n        );\\n\\n        return amountOut;\\n    }\\n}\\n\",\"keccak256\":\"0xa69462e962a3be48c3514c746d791c7a870247e8e441a2d7a11b5771ec8e0d23\"},\"contracts/modules/BurnMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\nimport \\\"../interfaces/IMUSE.sol\\\";\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\nimport \\\"./Events.sol\\\";\\n\\nabstract contract BurnMUSE is Events {\\n    function _burn(uint256 value) internal virtual returns (bool success) {\\n        IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken()).burn(\\n            value\\n        );\\n        return true;\\n    }\\n\\n    function _burnFrom(\\n        address from,\\n        uint256 value\\n    ) internal virtual returns (bool success) {\\n        IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken())\\n            .transferFrom(from, address(this), value);\\n        _burn(value);\\n        return true;\\n    }\\n\\n    function getTokenAddress() internal view virtual returns (address token) {\\n        return IMecenateFeedFactory(settings.factoryContract).museToken();\\n    }\\n\\n    function getExchangeAddress()\\n        internal\\n        view\\n        virtual\\n        returns (address exchange)\\n    {\\n        exchange = IMecenateFeedFactory(settings.factoryContract).router();\\n    }\\n}\\n\",\"keccak256\":\"0x052049c27f8e98f27fd3d237157e4700d5f5c313343d1cd734614beefa4ccfc6\"},\"contracts/modules/Data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../interfaces/IMecenateFeed.sol\\\";\\nimport \\\"../interfaces/IMecenateUsers.sol\\\";\\nimport \\\"../interfaces/IMecenateTreasury.sol\\\";\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\nimport \\\"../helpers/eas/IEAS.sol\\\";\\nimport \\\"./Version.sol\\\";\\n\\n/**\\n * @title Data\\n * @dev This contract stores data related to Mecenate posts and provides functions to interact with it.\\n */\\ncontract Data is Version {\\n    bytes internal constant ZEROHASH = \\\"0x00\\\";\\n\\n    address public owner;\\n\\n    Structures.Post public post;\\n\\n    Structures.FeedSettings internal settings;\\n\\n    mapping(uint8 => uint256) internal postDurationToDays;\\n\\n    mapping(uint8 => bool) internal validStatuses;\\n\\n    constructor(\\n        address usersModuleContract,\\n        address factoryContract,\\n        uint256 _major,\\n        uint256 _minor,\\n        uint256 _patch\\n    ) Version(_major, _minor, _patch) {\\n        settings.punishmentRatio = 100000000000000000; // Constant value\\n        settings.postCount = 0; // Initialize postCount to 0\\n        settings.usersModuleContract = usersModuleContract;\\n        settings.factoryContract = msg.sender;\\n        settings.router = IMecenateFeedFactory(factoryContract).router();\\n        settings.version = _version();\\n\\n        post.postdata.settings.status = Structures.PostStatus.Waiting;\\n\\n        postDurationToDays[uint8(Structures.PostDuration.OneDay)] = 1 days;\\n        postDurationToDays[uint8(Structures.PostDuration.ThreeDays)] = 3 days;\\n        postDurationToDays[uint8(Structures.PostDuration.OneWeek)] = 7 days;\\n        postDurationToDays[uint8(Structures.PostDuration.TwoWeeks)] = 14 days;\\n        postDurationToDays[uint8(Structures.PostDuration.OneMonth)] = 30 days;\\n\\n        validStatuses[uint8(Structures.PostStatus.Waiting)] = true;\\n    }\\n\\n    function _changeStatus(Structures.PostStatus newStatus) internal {\\n        validStatuses[uint8(post.postdata.settings.status)] = false;\\n        validStatuses[uint8(newStatus)] = true;\\n        post.postdata.settings.status = newStatus;\\n    }\\n\\n    function getStatus() external view returns (Structures.PostStatus) {\\n        return post.postdata.settings.status;\\n    }\\n\\n    function getTokenId() external view returns (Structures.Tokens) {\\n        return post.postdata.settings.tokenId;\\n    }\\n\\n    function getTokenIdAddress() public view returns (address) {\\n        if (post.postdata.settings.tokenId == Structures.Tokens.MUSE) {\\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\\n        } else if (post.postdata.settings.tokenId == Structures.Tokens.DAI) {\\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    function _checkToken(Structures.Tokens _token) internal view {\\n        require(_token == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n    }\\n\\n    function getPaymentRequested() external view returns (uint256) {\\n        return post.postdata.escrow.payment;\\n    }\\n\\n    function getStakeRequested() external view returns (uint256) {\\n        return post.postdata.escrow.stake;\\n    }\\n\\n    function postCount() external view returns (uint256) {\\n        return settings.postCount;\\n    }\\n\\n    function getEncryptedPost() external view returns (bytes memory) {\\n        return post.postdata.data.encryptedData;\\n    }\\n\\n    function getPost() external view returns (Structures.Post memory) {\\n        return post;\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xb09086cdcab6dc2790f56df6a5808c7a48794c5519ea122f927c0a0684d1f2c6\",\"license\":\"MIT\"},\"contracts/modules/Deposit.sol\":{\"content\":\"pragma solidity 0.8.19;\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./TokenManager.sol\\\";\\n\\ncontract Deposit {\\n    using SafeMath for uint256;\\n\\n    mapping(uint256 => mapping(address => uint256)) private _deposit;\\n\\n    event DepositIncreased(\\n        Structures.Tokens tokenID,\\n        address user,\\n        uint256 amount,\\n        uint256 newDeposit\\n    );\\n    event DepositDecreased(\\n        Structures.Tokens tokenID,\\n        address user,\\n        uint256 amount,\\n        uint256 newDeposit\\n    );\\n\\n    function _increaseDeposit(\\n        Structures.Tokens tokenID,\\n        address user,\\n        uint256 amountToAdd\\n    ) internal returns (uint256 newDeposit) {\\n        // calculate new deposit amount\\n        newDeposit = _deposit[uint256(tokenID)][user].add(amountToAdd);\\n\\n        // set new stake to storage\\n        _deposit[uint256(tokenID)][user] = newDeposit;\\n\\n        // emit event\\n        emit DepositIncreased(tokenID, user, amountToAdd, newDeposit);\\n\\n        // return\\n        return newDeposit;\\n    }\\n\\n    function _decreaseDeposit(\\n        Structures.Tokens tokenID,\\n        address user,\\n        uint256 amountToRemove\\n    ) internal returns (uint256 newDeposit) {\\n        // get current deposit\\n        uint256 currentDeposit = _deposit[uint256(tokenID)][user];\\n\\n        // check if sufficient deposit\\n        require(currentDeposit >= amountToRemove, \\\"INSUFFICIENT_DEPOSIT\\\");\\n\\n        // calculate new deposit amount\\n        newDeposit = currentDeposit.sub(amountToRemove);\\n\\n        // set new stake to storage\\n        _deposit[uint256(tokenID)][user] = newDeposit;\\n\\n        // emit event\\n        emit DepositDecreased(tokenID, user, amountToRemove, newDeposit);\\n\\n        // return\\n        return newDeposit;\\n    }\\n\\n    function _clearDeposit(\\n        Structures.Tokens tokenID,\\n        address user\\n    ) internal returns (uint256 amountRemoved) {\\n        // get current deposit\\n        uint256 currentDeposit = _deposit[uint256(tokenID)][user];\\n\\n        // remove deposit\\n        _decreaseDeposit(tokenID, user, currentDeposit);\\n\\n        // return\\n        return currentDeposit;\\n    }\\n\\n    function _getDeposit(\\n        Structures.Tokens tokenID,\\n        address user\\n    ) internal view returns (uint256 deposit) {\\n        return _deposit[uint256(tokenID)][user];\\n    }\\n}\\n\",\"keccak256\":\"0xbde50573d2e5a22daecdfdb1d457c4f50b7ea16e18a03eac04013ce10f269d36\"},\"contracts/modules/Events.sol\":{\"content\":\"/**\\r\\n * @title Events\\r\\n * @dev This abstract contract defines the events related to the Mecenate platform's post lifecycle.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./Data.sol\\\";\\r\\n\\r\\nabstract contract Events is Data {\\r\\n    event Created(Structures.Post post);\\r\\n    event Accepted(Structures.Post post);\\r\\n    event Valid(Structures.Post post);\\r\\n    event Invalid(Structures.Post post);\\r\\n    event Finalized(Structures.Post post);\\r\\n    event MadePublic(Structures.Post post);\\r\\n    event Renounced(Structures.Post post);\\r\\n}\\r\\n\",\"keccak256\":\"0x3aeaf067b1f9010a2456df46fb54d4727b3a24082b1446ac9266dbcdd8c838f6\"},\"contracts/modules/Renounce.sol\":{\"content\":\"/**\\n * @title Renounce\\n * @dev This abstract contract extends the Staking contract and provides functionality for a seller to renounce a post.\\n * The seller can only renounce a post if they are the original creator of the post and the post is in the Accepted or Submitted status.\\n * Renouncing a post refunds the buyer's payment and transfers the seller's stake to the seller's address.\\n * The post struct is reset and the post status is updated to Renounced.\\n * This contract also provides an internal function for refunding a post, which is called by the renouncePost function.\\n */\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"./Staking.sol\\\";\\n\\nabstract contract Renounce is Staking {\\n    function renouncePost() external {\\n        require(msg.sender == post.postdata.escrow.seller, \\\"NOT_SELLER\\\");\\n\\n        // Validate the post status\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\n\\n        require(validStatuses[uint8(currentStatus)], \\\"INVALID_STATUS\\\");\\n\\n        // Reset post and post settings\\n        post = Structures.Post(\\n            Structures.User({\\n                evmAddress: address(0),\\n                sismoVaultId: ZEROHASH,\\n                publicKey: ZEROHASH\\n            }),\\n            Structures.PostData({\\n                settings: Structures.PostSettings({\\n                    status: Structures.PostStatus.Renounced,\\n                    postType: Structures.PostType.Text,\\n                    creationTimeStamp: 0,\\n                    endTimeStamp: 0,\\n                    duration: 0,\\n                    tokenId: Structures.Tokens.NaN\\n                }),\\n                escrow: Structures.PostEscrow({\\n                    buyer: address(0),\\n                    seller: address(0),\\n                    stake: 0,\\n                    payment: 0,\\n                    punishment: 0,\\n                    penalty: 0\\n                }),\\n                data: Structures.PostEncryptedData({\\n                    encryptedData: \\\"\\\",\\n                    encryptedKey: \\\"\\\",\\n                    decryptedData: \\\"\\\"\\n                })\\n            })\\n        );\\n\\n        // Emit event\\n        emit Renounced(post);\\n    }\\n}\\n\",\"keccak256\":\"0x8ae67d46145c6ff5386d4a5c045996c1bf1e32baf27066d803186c90738601c1\",\"license\":\"MIT\"},\"contracts/modules/Staking.sol\":{\"content\":\"/**\\n * @title Staking\\n * @dev This contract handles staking functionality for the Mecenate platform.\\n * It allows users to add, take, and burn stakes, and provides functions to get the total staked amount and individual stake amounts.\\n * It also includes a modifier to check the status of a post before allowing stake-related transactions.\\n */\\npragma solidity 0.8.19;\\n\\nimport \\\"./Deposit.sol\\\";\\nimport \\\"./Events.sol\\\";\\n\\nabstract contract Staking is Events, Deposit, TokenManager {\\n    using SafeMath for uint256;\\n\\n    event StakeBurned(address staker, uint256 amount);\\n\\n    event StakeTaken(address staker, uint256 amount, Structures.Tokens tokenId);\\n\\n    event StakeAdded(address staker, uint256 amount, Structures.Tokens tokenId);\\n\\n    function _addStake(\\n        Structures.Tokens tokenId,\\n        address staker,\\n        address funder,\\n        uint256 amountToAdd\\n    ) internal returns (uint256 newStake) {\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\n\\n        require(\\n            currentStatus != Structures.PostStatus.Accepted &&\\n                currentStatus != Structures.PostStatus.Submitted,\\n            \\\"INVALID_STATUS\\\"\\n        );\\n\\n        require(amountToAdd > 0, \\\"STAKE_REQUIRED\\\");\\n\\n        if (tokenId != Structures.Tokens.NaN) {\\n            _transferFrom(tokenId, funder, address(this), amountToAdd);\\n        }\\n\\n        newStake = Deposit._increaseDeposit(tokenId, staker, amountToAdd);\\n\\n        emit StakeAdded(staker, amountToAdd, tokenId);\\n\\n        return newStake;\\n    }\\n\\n    function _takeStake(\\n        Structures.Tokens tokenId,\\n        address staker,\\n        address receiver,\\n        uint256 amountToTake\\n    ) internal returns (uint256 newStake) {\\n        // Memorizza lo status del post in una variabile per evitare accessi ridondanti allo storage\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\n\\n        // Verifica che lo status del post sia valido per procedere\\n        require(\\n            currentStatus != Structures.PostStatus.Accepted &&\\n                currentStatus != Structures.PostStatus.Submitted,\\n            \\\"INVALID_STATUS\\\"\\n        );\\n\\n        // Effettua il trasferimento del token o dell'Ether\\n        if (tokenId == Structures.Tokens.NaN) {\\n            //(bool result, ) = payable(_to).call{value: amountToTake}(\\\"\\\");\\n            //require(result, \\\"CALL_FAILED\\\");\\n            payable(receiver).transfer(amountToTake);\\n        } else {\\n            _transfer(tokenId, receiver, amountToTake);\\n        }\\n\\n        // Aggiorna il deposito e emette un evento\\n        newStake = Deposit._decreaseDeposit(tokenId, staker, amountToTake);\\n        emit StakeTaken(staker, amountToTake, tokenId);\\n\\n        return newStake;\\n    }\\n\\n    function _takeFullStake(\\n        Structures.Tokens tokenId,\\n        address staker,\\n        address receiver\\n    ) internal returns (uint256 amountTaken) {\\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, staker);\\n\\n        uint256 newStake = _takeStake(\\n            tokenId,\\n            staker,\\n            receiver,\\n            currentDeposit\\n        );\\n\\n        return newStake;\\n    }\\n\\n    function _burnStake(\\n        Structures.Tokens tokenId,\\n        address staker,\\n        uint256 amountToBurn\\n    ) internal returns (uint256 newStake) {\\n        uint256 newDeposit = Deposit._decreaseDeposit(\\n            tokenId,\\n            staker,\\n            amountToBurn\\n        );\\n\\n        bool burnEnabled = IMecenateFeedFactory(settings.factoryContract)\\n            .burnEnabled();\\n\\n        address treasuryContract = IMecenateFeedFactory(\\n            settings.factoryContract\\n        ).treasuryContract();\\n\\n        if (burnEnabled == false) {\\n            if (tokenId == Structures.Tokens.NaN) {\\n                (bool result, ) = payable(treasuryContract).call{\\n                    value: amountToBurn\\n                }(\\\"\\\");\\n                require(result, \\\"CALL_FAILED\\\");\\n            } else {\\n                _transfer(tokenId, treasuryContract, amountToBurn);\\n            }\\n        } else {\\n            if (tokenId == Structures.Tokens.DAI) {\\n                _burnDai(amountToBurn);\\n            } else if (tokenId == Structures.Tokens.MUSE) {\\n                _burn(amountToBurn);\\n            } else if (tokenId == Structures.Tokens.NaN) {\\n                _burnWeth(amountToBurn);\\n            }\\n        }\\n\\n        emit StakeBurned(staker, amountToBurn);\\n\\n        return newDeposit;\\n    }\\n\\n    function _burnFullStake(\\n        Structures.Tokens tokenId,\\n        address staker\\n    ) internal returns (uint256 amountBurned) {\\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, staker);\\n\\n        _burnStake(tokenId, staker, currentDeposit);\\n\\n        return currentDeposit;\\n    }\\n\\n    function getStake(\\n        Structures.Tokens tokenId,\\n        address staker\\n    ) external view returns (uint256 amount) {\\n        // get deposit\\n        amount = Deposit._getDeposit(tokenId, staker);\\n        // explicit return\\n        return amount;\\n    }\\n\\n    function getTotalStaked() external view returns (uint256) {\\n        uint256 amountSeller = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            post.postdata.escrow.seller\\n        );\\n\\n        uint256 amountBuyer = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            post.postdata.escrow.buyer\\n        );\\n\\n        return (amountSeller + amountBuyer);\\n    }\\n\\n    function addStake(\\n        Structures.Tokens tokenId,\\n        address _funder,\\n        uint256 amountToAdd\\n    ) external payable returns (uint256) {\\n        require(tokenId == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n\\n        // Check if the encryptedVaultId matches with either the buyer or the seller\\n        require(\\n            msg.sender == post.postdata.escrow.buyer ||\\n                msg.sender == post.postdata.escrow.seller,\\n            \\\"WRONG_MSGSENDER\\\"\\n        );\\n\\n        // Determine the amount to add based on the role (buyer or seller)\\n        uint256 actualAmountToAdd = (msg.sender == post.postdata.escrow.seller)\\n            ? msg.value\\n            : amountToAdd;\\n\\n        // Update the stake\\n        uint256 newStake = _addStake(\\n            tokenId,\\n            msg.sender,\\n            _funder,\\n            actualAmountToAdd\\n        );\\n\\n        // Update the corresponding escrow value based on the role\\n        if (msg.sender == post.postdata.escrow.buyer) {\\n            post.postdata.escrow.payment = newStake;\\n        } else {\\n            post.postdata.escrow.stake = newStake;\\n        }\\n\\n        return newStake;\\n    }\\n\\n    function takeStake(\\n        Structures.Tokens tokenId,\\n        address receiver,\\n        uint256 amountToTake\\n    ) external returns (uint256) {\\n        require(tokenId == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n\\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, msg.sender);\\n\\n        require(currentDeposit >= amountToTake, \\\"NOT_ENOUGH_STAKE\\\");\\n\\n        uint256 newBalance = _takeStake(\\n            tokenId,\\n            msg.sender,\\n            receiver,\\n            amountToTake\\n        );\\n\\n        if (msg.sender == post.postdata.escrow.buyer) {\\n            post.postdata.escrow.payment = newBalance;\\n        } else {\\n            post.postdata.escrow.stake = newBalance;\\n        }\\n\\n        return newBalance;\\n    }\\n\\n    function takeFullStake(\\n        Structures.Tokens tokenId,\\n        address receiver\\n    ) external returns (uint256) {\\n        require(tokenId == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n\\n        uint256 newBalance = _takeFullStake(tokenId, msg.sender, receiver);\\n\\n        if (msg.sender == post.postdata.escrow.buyer) {\\n            post.postdata.escrow.payment = newBalance;\\n        } else if (msg.sender == post.postdata.escrow.seller) {\\n            post.postdata.escrow.stake = newBalance;\\n        }\\n\\n        return newBalance;\\n    }\\n\\n    function getSellerStake() external view returns (uint256 amount) {\\n        // get deposit\\n        amount = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            post.postdata.escrow.seller\\n        );\\n        // explicit return\\n        return amount;\\n    }\\n\\n    function getBuyerStake() external view returns (uint256 amount) {\\n        // get deposit\\n        amount = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            post.postdata.escrow.buyer\\n        );\\n        // explicit return\\n        return amount;\\n    }\\n}\\n\",\"keccak256\":\"0x94556a37278a2684b61c9734e71d523d215af864486d60b0562f52d5437308dc\"},\"contracts/modules/TokenManager.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"./BurnDAI.sol\\\";\\n\\nabstract contract TokenManager is BurnDAI {\\n    function _getTokenAddress(\\n        Structures.Tokens tokenID\\n    ) internal view returns (address) {\\n        if (tokenID == Structures.Tokens.DAI)\\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\\n        if (tokenID == Structures.Tokens.MUSE)\\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\\n        return address(0);\\n    }\\n\\n    function _checkAllowance(\\n        Structures.Tokens tokenID,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal view {\\n        address tokenAddress = _getTokenAddress(tokenID);\\n        require(\\n            IERC20(tokenAddress).allowance(from, to) >= value,\\n            \\\"INSUFFICIENT_ALLOWANCE\\\"\\n        );\\n    }\\n\\n    modifier onlyValidTokenID(Structures.Tokens tokenID) {\\n        require(\\n            tokenID == Structures.Tokens.MUSE ||\\n                tokenID == Structures.Tokens.DAI ||\\n                tokenID == Structures.Tokens.NaN,\\n            \\\"WRONG_TOKEN\\\"\\n        );\\n        _;\\n    }\\n\\n    function isValidTokenID(\\n        Structures.Tokens tokenID\\n    ) internal pure returns (bool validity) {\\n        return\\n            tokenID == Structures.Tokens.MUSE ||\\n            tokenID == Structures.Tokens.DAI;\\n    }\\n\\n    function _transfer(\\n        Structures.Tokens tokenID,\\n        address to,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        require(\\n            IERC20(_getTokenAddress(tokenID)).transfer(to, value),\\n            \\\"TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function _transferFrom(\\n        Structures.Tokens tokenID,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        address tokenAddress = _getTokenAddress(tokenID);\\n        _checkAllowance(tokenID, from, to, value);\\n        require(\\n            IERC20(tokenAddress).transferFrom(from, to, value),\\n            \\\"TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function _burn(\\n        Structures.Tokens tokenID,\\n        address _receiver,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) returns (bool success) {\\n        bool burnEnabled = IMecenateFeedFactory(settings.factoryContract)\\n            .burnEnabled();\\n\\n        if (burnEnabled == false) {\\n            if (tokenID == Structures.Tokens.NaN) {\\n                (bool result, ) = payable(_receiver).call{value: value}(\\\"\\\");\\n                require(result, \\\"CALL_FAILED\\\");\\n            } else {\\n                TokenManager._transfer(tokenID, _receiver, value);\\n            }\\n        } else {\\n            if (tokenID == Structures.Tokens.DAI) {\\n                _burnDai(value);\\n            } else if (tokenID == Structures.Tokens.MUSE) {\\n                _burn(value);\\n            } else if (tokenID == Structures.Tokens.NaN) {\\n                _burnWeth(value);\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    function _burnFrom(\\n        Structures.Tokens tokenID,\\n        address from,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        address treasury = IMecenateFeedFactory(settings.factoryContract)\\n            .treasuryContract();\\n\\n        if (tokenID == Structures.Tokens.DAI) {\\n            IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\n                .transferFrom(from, treasury, value);\\n        } else if (tokenID == Structures.Tokens.MUSE) {\\n            BurnMUSE._burnFrom(from, value);\\n        }\\n    }\\n\\n    function _approve(\\n        Structures.Tokens tokenID,\\n        address spender,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        if (tokenID == Structures.Tokens.DAI) {\\n            require(\\n                IERC20(\\n                    IMecenateFeedFactory(settings.factoryContract).daiToken()\\n                ).approve(spender, value),\\n                \\\"APPROVE_FAILED\\\"\\n            );\\n        } else if (tokenID == Structures.Tokens.MUSE) {\\n            uint256 currentAllowance = IMUSE(\\n                IMecenateFeedFactory(settings.factoryContract).museToken()\\n            ).allowance(msg.sender, spender);\\n\\n            uint256 newAllowance = currentAllowance + value;\\n            require(\\n                IMUSE(IMecenateFeedFactory(settings.factoryContract).daiToken())\\n                    .increaseAllowance(spender, newAllowance),\\n                \\\"APPROVE_FAILED\\\"\\n            );\\n        }\\n    }\\n\\n    function totalSupply(\\n        Structures.Tokens tokenID\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).totalSupply();\\n    }\\n\\n    function balanceOf(\\n        Structures.Tokens tokenID,\\n        address who\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).balanceOf(who);\\n    }\\n\\n    function allowance(\\n        Structures.Tokens tokenID,\\n        address owner,\\n        address spender\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).allowance(owner, spender);\\n    }\\n}\\n\",\"keccak256\":\"0x8eded6283ea4effbe4861c36f73afaace086765ac8d26ef695ac8855ed15e8b1\"},\"contracts/modules/Version.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/// @title Semver\\n/// @notice A simple contract for managing contract versions.\\nabstract contract Version {\\n    // Contract's major version number.\\n    uint256 private immutable _major;\\n\\n    // Contract's minor version number.\\n    uint256 private immutable _minor;\\n\\n    // Contract's patch version number.\\n    uint256 private immutable _path;\\n\\n    /// @dev Create a new Semver instance.\\n    /// @param major Major version number.\\n    /// @param minor Minor version number.\\n    /// @param patch Patch version number.\\n    constructor(uint256 major, uint256 minor, uint256 patch) {\\n        _major = major;\\n        _minor = minor;\\n        _path = patch;\\n    }\\n\\n    /// @notice Returns the full semver contract version.\\n    /// @return Semver contract version as a string.\\n    function version() external view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    Strings.toString(_major),\\n                    \\\".\\\",\\n                    Strings.toString(_minor),\\n                    \\\".\\\",\\n                    Strings.toString(_path)\\n                )\\n            );\\n    }\\n\\n    function _version() internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    Strings.toString(_major),\\n                    \\\".\\\",\\n                    Strings.toString(_minor),\\n                    \\\".\\\",\\n                    Strings.toString(_path)\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xa99614da4eb0014c2756685061352b80325a07e4cb14f7c704ec2a62e182688f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3523,"contract":"contracts/modules/Renounce.sol:Renounce","label":"owner","offset":0,"slot":"0","type":"t_address"},{"astId":3526,"contract":"contracts/modules/Renounce.sol:Renounce","label":"post","offset":0,"slot":"1","type":"t_struct(Post)2574_storage"},{"astId":3529,"contract":"contracts/modules/Renounce.sol:Renounce","label":"settings","offset":0,"slot":"18","type":"t_struct(FeedSettings)2550_storage"},{"astId":3533,"contract":"contracts/modules/Renounce.sol:Renounce","label":"postDurationToDays","offset":0,"slot":"24","type":"t_mapping(t_uint8,t_uint256)"},{"astId":3537,"contract":"contracts/modules/Renounce.sol:Renounce","label":"validStatuses","offset":0,"slot":"25","type":"t_mapping(t_uint8,t_bool)"},{"astId":3871,"contract":"contracts/modules/Renounce.sol:Renounce","label":"_deposit","offset":0,"slot":"26","type":"t_mapping(t_uint256,t_mapping(t_address,t_uint256))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_enum(PostStatus)2521":{"encoding":"inplace","label":"enum Structures.PostStatus","numberOfBytes":"1"},"t_enum(PostType)2531":{"encoding":"inplace","label":"enum Structures.PostType","numberOfBytes":"1"},"t_enum(Tokens)2525":{"encoding":"inplace","label":"enum Structures.Tokens","numberOfBytes":"1"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_uint8,t_bool)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint8,t_uint256)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(FeedSettings)2550_storage":{"encoding":"inplace","label":"struct Structures.FeedSettings","members":[{"astId":2539,"contract":"contracts/modules/Renounce.sol:Renounce","label":"punishmentRatio","offset":0,"slot":"0","type":"t_uint256"},{"astId":2541,"contract":"contracts/modules/Renounce.sol:Renounce","label":"postCount","offset":0,"slot":"1","type":"t_uint256"},{"astId":2543,"contract":"contracts/modules/Renounce.sol:Renounce","label":"usersModuleContract","offset":0,"slot":"2","type":"t_address"},{"astId":2545,"contract":"contracts/modules/Renounce.sol:Renounce","label":"factoryContract","offset":0,"slot":"3","type":"t_address"},{"astId":2547,"contract":"contracts/modules/Renounce.sol:Renounce","label":"router","offset":0,"slot":"4","type":"t_address"},{"astId":2549,"contract":"contracts/modules/Renounce.sol:Renounce","label":"version","offset":0,"slot":"5","type":"t_string_storage"}],"numberOfBytes":"192"},"t_struct(Post)2574_storage":{"encoding":"inplace","label":"struct Structures.Post","members":[{"astId":2570,"contract":"contracts/modules/Renounce.sol:Renounce","label":"creator","offset":0,"slot":"0","type":"t_struct(User)2627_storage"},{"astId":2573,"contract":"contracts/modules/Renounce.sol:Renounce","label":"postdata","offset":0,"slot":"3","type":"t_struct(PostData)2584_storage"}],"numberOfBytes":"544"},"t_struct(PostData)2584_storage":{"encoding":"inplace","label":"struct Structures.PostData","members":[{"astId":2577,"contract":"contracts/modules/Renounce.sol:Renounce","label":"settings","offset":0,"slot":"0","type":"t_struct(PostSettings)2607_storage"},{"astId":2580,"contract":"contracts/modules/Renounce.sol:Renounce","label":"escrow","offset":0,"slot":"5","type":"t_struct(PostEscrow)2620_storage"},{"astId":2583,"contract":"contracts/modules/Renounce.sol:Renounce","label":"data","offset":0,"slot":"11","type":"t_struct(PostEncryptedData)2591_storage"}],"numberOfBytes":"448"},"t_struct(PostEncryptedData)2591_storage":{"encoding":"inplace","label":"struct Structures.PostEncryptedData","members":[{"astId":2586,"contract":"contracts/modules/Renounce.sol:Renounce","label":"encryptedData","offset":0,"slot":"0","type":"t_bytes_storage"},{"astId":2588,"contract":"contracts/modules/Renounce.sol:Renounce","label":"encryptedKey","offset":0,"slot":"1","type":"t_bytes_storage"},{"astId":2590,"contract":"contracts/modules/Renounce.sol:Renounce","label":"decryptedData","offset":0,"slot":"2","type":"t_bytes_storage"}],"numberOfBytes":"96"},"t_struct(PostEscrow)2620_storage":{"encoding":"inplace","label":"struct Structures.PostEscrow","members":[{"astId":2609,"contract":"contracts/modules/Renounce.sol:Renounce","label":"buyer","offset":0,"slot":"0","type":"t_address"},{"astId":2611,"contract":"contracts/modules/Renounce.sol:Renounce","label":"seller","offset":0,"slot":"1","type":"t_address"},{"astId":2613,"contract":"contracts/modules/Renounce.sol:Renounce","label":"stake","offset":0,"slot":"2","type":"t_uint256"},{"astId":2615,"contract":"contracts/modules/Renounce.sol:Renounce","label":"payment","offset":0,"slot":"3","type":"t_uint256"},{"astId":2617,"contract":"contracts/modules/Renounce.sol:Renounce","label":"punishment","offset":0,"slot":"4","type":"t_uint256"},{"astId":2619,"contract":"contracts/modules/Renounce.sol:Renounce","label":"penalty","offset":0,"slot":"5","type":"t_uint256"}],"numberOfBytes":"192"},"t_struct(PostSettings)2607_storage":{"encoding":"inplace","label":"struct Structures.PostSettings","members":[{"astId":2594,"contract":"contracts/modules/Renounce.sol:Renounce","label":"status","offset":0,"slot":"0","type":"t_enum(PostStatus)2521"},{"astId":2597,"contract":"contracts/modules/Renounce.sol:Renounce","label":"postType","offset":1,"slot":"0","type":"t_enum(PostType)2531"},{"astId":2599,"contract":"contracts/modules/Renounce.sol:Renounce","label":"creationTimeStamp","offset":0,"slot":"1","type":"t_uint256"},{"astId":2601,"contract":"contracts/modules/Renounce.sol:Renounce","label":"endTimeStamp","offset":0,"slot":"2","type":"t_uint256"},{"astId":2603,"contract":"contracts/modules/Renounce.sol:Renounce","label":"duration","offset":0,"slot":"3","type":"t_uint256"},{"astId":2606,"contract":"contracts/modules/Renounce.sol:Renounce","label":"tokenId","offset":0,"slot":"4","type":"t_enum(Tokens)2525"}],"numberOfBytes":"160"},"t_struct(User)2627_storage":{"encoding":"inplace","label":"struct Structures.User","members":[{"astId":2622,"contract":"contracts/modules/Renounce.sol:Renounce","label":"evmAddress","offset":0,"slot":"0","type":"t_address"},{"astId":2624,"contract":"contracts/modules/Renounce.sol:Renounce","label":"sismoVaultId","offset":0,"slot":"1","type":"t_bytes_storage"},{"astId":2626,"contract":"contracts/modules/Renounce.sol:Renounce","label":"publicKey","offset":0,"slot":"2","type":"t_bytes_storage"}],"numberOfBytes":"96"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{"version()":{"notice":"Returns the full semver contract version."}},"version":1}}},"contracts/modules/Staking.sol":{"Staking":{"abi":[{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Accepted","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Created","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenID","type":"uint8"},{"indexed":false,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newDeposit","type":"uint256"}],"name":"DepositDecreased","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenID","type":"uint8"},{"indexed":false,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newDeposit","type":"uint256"}],"name":"DepositIncreased","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Finalized","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Invalid","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"MadePublic","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Renounced","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"staker","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"name":"StakeAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"staker","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"StakeBurned","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"staker","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"name":"StakeTaken","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Valid","type":"event"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"address","name":"_funder","type":"address"},{"internalType":"uint256","name":"amountToAdd","type":"uint256"}],"name":"addStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"getBuyerStake","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getEncryptedPost","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPaymentRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPost","outputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"internalType":"struct Structures.Post","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSellerStake","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"address","name":"staker","type":"address"}],"name":"getStake","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStakeRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStatus","outputs":[{"internalType":"enum Structures.PostStatus","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenId","outputs":[{"internalType":"enum Structures.Tokens","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenIdAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTotalStaked","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"post","outputs":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"postCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"address","name":"receiver","type":"address"}],"name":"takeFullStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint256","name":"amountToTake","type":"uint256"}],"name":"takeStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"version()":{"returns":{"_0":"Semver contract version as a string."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"addStake(uint8,address,uint256)":"1d0b4af5","getBuyerStake()":"4c38d877","getEncryptedPost()":"729e2eb1","getPaymentRequested()":"d24e0c87","getPost()":"8c6838ba","getSellerStake()":"5c63ed69","getStake(uint8,address)":"52a6cb4a","getStakeRequested()":"faeb5e17","getStatus()":"4e69d560","getTokenId()":"010a38f5","getTokenIdAddress()":"5ad4e170","getTotalStaked()":"0917e776","owner()":"8da5cb5b","post()":"05c1f502","postCount()":"17906c2e","takeFullStake(uint8,address)":"f2d7dbb6","takeStake(uint8,address,uint256)":"ed70d5d5","version()":"54fd4d50"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Accepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDeposit\",\"type\":\"uint256\"}],\"name\":\"DepositDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenID\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDeposit\",\"type\":\"uint256\"}],\"name\":\"DepositIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Invalid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"MadePublic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Renounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"name\":\"StakeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"name\":\"StakeTaken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Valid\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_funder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToAdd\",\"type\":\"uint256\"}],\"name\":\"addStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyerStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEncryptedPost\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaymentRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPost\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.Post\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellerStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenIdAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"post\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"takeFullStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToTake\",\"type\":\"uint256\"}],\"name\":\"takeStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"version()\":{\"returns\":{\"_0\":\"Semver contract version as a string.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"version()\":{\"notice\":\"Returns the full semver contract version.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/Staking.sol\":\"Staking\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/helpers/eas/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror DeadlineExpired();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/// @notice A struct representing ECDSA signature data.\\nstruct Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/// @notice A struct representing a single attestation.\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/// @notice A helper function to work with unchecked iterators in loops.\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685\",\"license\":\"MIT\"},\"contracts/helpers/eas/IEAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ISchemaRegistry} from \\\"./ISchemaRegistry.sol\\\";\\nimport {Attestation, Signature} from \\\"./Common.sol\\\";\\n\\n/// @notice A struct representing the arguments of the attestation request.\\nstruct AttestationRequestData {\\n    address recipient; // The recipient of the attestation.\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes32 refUID; // The UID of the related attestation.\\n    bytes data; // Custom attestation data.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the attestation request.\\nstruct AttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the full delegated attestation request.\\nstruct DelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n    Signature signature; // The ECDSA signature data.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi attestation request.\\nstruct MultiAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi attestation request.\\nstruct MultiDelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the arguments of the revocation request.\\nstruct RevocationRequestData {\\n    bytes32 uid; // The UID of the attestation to revoke.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the revocation request.\\nstruct RevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the arguments of the full delegated revocation request.\\nstruct DelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n    Signature signature; // The ECDSA signature data.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi revocation request.\\nstruct MultiRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi revocation request.\\nstruct MultiDelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @title IEAS\\n/// @notice EAS - Ethereum Attestation Service interface.\\ninterface IEAS {\\n    /// @notice Emitted when an attestation has been made.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param uid The UID the revoked attestation.\\n    /// @param schemaUID The UID of the schema.\\n    event Attested(\\n        address indexed recipient,\\n        address indexed attester,\\n        bytes32 uid,\\n        bytes32 indexed schemaUID\\n    );\\n\\n    /// @notice Emitted when an attestation has been revoked.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param schemaUID The UID of the schema.\\n    /// @param uid The UID the revoked attestation.\\n    event Revoked(\\n        address indexed recipient,\\n        address indexed attester,\\n        bytes32 uid,\\n        bytes32 indexed schemaUID\\n    );\\n\\n    /// @notice Emitted when a data has been timestamped.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event Timestamped(bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /// @notice Emitted when a data has been revoked.\\n    /// @param revoker The address of the revoker.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event RevokedOffchain(\\n        address indexed revoker,\\n        bytes32 indexed data,\\n        uint64 indexed timestamp\\n    );\\n\\n    /// @notice Returns the address of the global schema registry.\\n    /// @return The address of the global schema registry.\\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\\n\\n    /// @notice Attests to a specific schema.\\n    /// @param request The arguments of the attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attest({\\n    ///         schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",\\n    ///         data: {\\n    ///             recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n    ///             data: \\\"0xF00D\\\",\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function attest(\\n        AttestationRequest calldata request\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attestByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function attestByDelegation(\\n        DelegatedAttestationRequest calldata delegatedRequest\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to multiple schemas.\\n    /// @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttest([{\\n    ///         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\\n    ///             data: '0x12345678',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiAttest(\\n        MultiAttestationRequest[] calldata multiRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Attests to multiple schemas using via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\\n    ///     grouped by distinct schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttestByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiAttestByDelegation(\\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Revokes an existing attestation to a specific schema.\\n    /// @param request The arguments of the revocation request.\\n    ///\\n    /// Example:\\n    ///     revoke({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function revoke(RevocationRequest calldata request) external payable;\\n\\n    /// @notice Revokes an existing attestation to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated revocation request.\\n    ///\\n    /// Example:\\n    ///     revokeByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 27,\\n    ///             r: '0xb593...7142',\\n    ///             s: '0x0f5b...2cce'\\n    ///         },\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function revokeByDelegation(\\n        DelegatedRevocationRequest calldata delegatedRequest\\n    ) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas.\\n    /// @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevoke([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiRevoke(\\n        MultiRevocationRequest[] calldata multiRequests\\n    ) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests\\n    ///     should be grouped by distinct schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevokeByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiRevokeByDelegation(\\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\\n    ) external payable;\\n\\n    /// @notice Timestamps the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function timestamp(bytes32 data) external returns (uint64);\\n\\n    /// @notice Timestamps the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\\n\\n    /// @notice Revokes the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function revokeOffchain(bytes32 data) external returns (uint64);\\n\\n    /// @notice Revokes the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function multiRevokeOffchain(\\n        bytes32[] calldata data\\n    ) external returns (uint64);\\n\\n    /// @notice Returns an existing attestation by UID.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return The attestation data members.\\n    function getAttestation(\\n        bytes32 uid\\n    ) external view returns (Attestation memory);\\n\\n    /// @notice Checks whether an attestation exists.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return Whether an attestation exists.\\n    function isAttestationValid(bytes32 uid) external view returns (bool);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getTimestamp(bytes32 data) external view returns (uint64);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getRevokeOffchain(\\n        address revoker,\\n        bytes32 data\\n    ) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xc95cca3d90dbae3a21d0f0e28fdf38cc5a85cbd8c760b7759782b18e8f62acc2\",\"license\":\"MIT\"},\"contracts/helpers/eas/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ISchemaResolver} from \\\"./ISchemaResolver.sol\\\";\\n\\n/// @notice A struct representing a record for a submitted schema.\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\n/// @title ISchemaRegistry\\n/// @notice The interface of global attestation schemas for the Ethereum Attestation Service protocol.\\ninterface ISchemaRegistry {\\n    /// @notice Emitted when a new schema has been registered\\n    /// @param uid The schema UID.\\n    /// @param registerer The address of the account used to register the schema.\\n    /// @param schema The schema data.\\n    event Registered(\\n        bytes32 indexed uid,\\n        address indexed registerer,\\n        SchemaRecord schema\\n    );\\n\\n    /// @notice Submits and reserves a new schema\\n    /// @param schema The schema data schema.\\n    /// @param resolver An optional schema resolver.\\n    /// @param revocable Whether the schema allows revocations explicitly.\\n    /// @return The UID of the new schema.\\n    function register(\\n        string calldata schema,\\n        ISchemaResolver resolver,\\n        bool revocable\\n    ) external returns (bytes32);\\n\\n    /// @notice Returns an existing schema by UID\\n    /// @param uid The UID of the schema to retrieve.\\n    /// @return The schema data members.\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\\n\",\"keccak256\":\"0x743ddc248c97a78d34239035d1d9557a74dcaaa5b59a2aa66cea4eadabb8b2de\",\"license\":\"MIT\"},\"contracts/helpers/eas/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {Attestation} from \\\"./Common.sol\\\";\\n\\n/// @title ISchemaResolver\\n/// @notice The interface of an optional schema resolver.\\ninterface ISchemaResolver {\\n    /// @notice Checks if the resolver can be sent ETH.\\n    /// @return Whether the resolver supports ETH transfers.\\n    function isPayable() external pure returns (bool);\\n\\n    /// @notice Processes an attestation and verifies whether it's valid.\\n    /// @param attestation The new attestation.\\n    /// @return Whether the attestation is valid.\\n    function attest(\\n        Attestation calldata attestation\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes multiple attestations and verifies whether they are valid.\\n    /// @param attestations The new attestations.\\n    /// @param values Explicit ETH amounts which were sent with each attestation.\\n    /// @return Whether all the attestations are valid.\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\\n    /// @param attestation The existing attestation to be revoked.\\n    /// @return Whether the attestation can be revoked.\\n    function revoke(\\n        Attestation calldata attestation\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\\n    /// @param attestations The existing attestations to be revoked.\\n    /// @param values Explicit ETH amounts which were sent with each revocation.\\n    /// @return Whether the attestations can be revoked.\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0x97ec835833519c6c11c0fb097ea5bccd888e65f650590fdb643d937430bb4f03\",\"license\":\"MIT\"},\"contracts/interfaces/IMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n// import IERC20 from openzeppelin\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMUSE is IERC20 {\\n    function increaseAllowance(\\n        address spender,\\n        uint256 addedValue\\n    ) external returns (bool);\\n\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 subtractedValue\\n    ) external returns (bool);\\n\\n    function mint(uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x8b0a4012a1cd0815460bb3d15278671589bb85003ff2c38315701b3f2228c633\"},\"contracts/interfaces/IMecenateFeed.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateFeed {\\n    function getPost() external view returns (Structures.Post memory);\\n\\n    function getTotalStaked() external view returns (uint256);\\n\\n    function postCount() external view returns (uint256);\\n\\n    function acceptPost(\\n        Structures.Tokens,\\n        uint256 _amount,\\n        address _funder,\\n        address _buyer\\n    ) external payable;\\n\\n    function getSellerStake() external view returns (uint256);\\n\\n    function getBuyerStake() external view returns (uint256);\\n\\n    function getPaymentRequested() external view returns (uint256);\\n\\n    function getStakeRequested() external view returns (uint256);\\n\\n    function getStatus() external view returns (Structures.PostStatus status);\\n\\n    function getTokenId() external view returns (Structures.Tokens tokenId);\\n\\n    function owner() external view returns (address);\\n\\n    function version() external view returns (string memory);\\n\\n    function getEncryptedPost() external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xe7a4b838d4f4540e4a8e3911c2afea70ebd9a2e87bd526eef13b203c2643a645\"},\"contracts/interfaces/IMecenateFeedFactory.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\ninterface IMecenateFeedFactory {\\n    function owner() external view returns (address payable);\\n\\n    function treasuryContract() external view returns (address payable);\\n\\n    function feeds() external view returns (address[] memory);\\n\\n    function contractCounter() external view returns (uint256);\\n\\n    function isFeed(address _feed) external view returns (bool);\\n\\n    function museToken() external view returns (address);\\n\\n    function wethToken() external view returns (address);\\n\\n    function daiToken() external view returns (address);\\n\\n    function router() external view returns (address);\\n\\n    function getRouterFee(uint8 tokenId) external view returns (uint24);\\n\\n    function burnEnabled() external view returns (bool);\\n\\n    function version() external view returns (string memory);\\n\\n    function easSchema() external view returns (bytes32);\\n\\n    function easContract() external view returns (address);\\n}\\n\",\"keccak256\":\"0x79da402b87332cbe8176ab1d0abd2c5369a0da30970743b86283e1a774eea776\"},\"contracts/interfaces/IMecenateTreasury.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateTreasury {\\r\\n    function globalFee() external view returns (uint256);\\r\\n\\r\\n    function fixedFee() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf544878bba8e01c837110d06eac56042957d59c593ba9083f686ef02aa9276a1\"},\"contracts/interfaces/IMecenateUsers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateUsers {\\n    function registerUser(bytes memory metadata) external;\\n\\n    function getUsers() external view returns (address[] memory);\\n\\n    function getUserCount() external view returns (uint256);\\n\\n    function getUserAt(uint256 index) external view returns (address);\\n\\n    function checkifUserExist(address userAddress) external view returns (bool);\\n\\n    function getPaginatedUsers(\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) external view returns (address[] memory);\\n\\n    function getUserMetadata(\\n        address userAddress\\n    ) external view returns (Structures.User memory);\\n\\n    function getUserPublicKey(\\n        address userAddress\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xf0ff65dbfea12d90cf106325b9478e31b284045327e5f0974db5374b8789e93c\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function withdraw(uint256) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xeb4bd6c56a346f12ec3d681183d613795c151709e834d69ef58f13fd6d7edf62\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\n * @title Structures\\n * @dev This library defines various data structures used in the Mecenate platform.\\n */\\npragma solidity 0.8.19;\\n\\nlibrary Structures {\\n    enum PostStatus {\\n        Waiting,\\n        Proposed,\\n        Accepted,\\n        Submitted,\\n        Finalized,\\n        Punished,\\n        Revealed,\\n        Renounced\\n    }\\n\\n    enum Tokens {\\n        NaN,\\n        MUSE,\\n        DAI\\n    }\\n\\n    enum PostType {\\n        Text,\\n        Image,\\n        Video,\\n        Audio,\\n        File\\n    }\\n    enum PostDuration {\\n        OneDay,\\n        ThreeDays,\\n        OneWeek,\\n        TwoWeeks,\\n        OneMonth\\n    }\\n\\n    struct FeedSettings {\\n        uint256 punishmentRatio;\\n        uint256 postCount;\\n        address usersModuleContract;\\n        address factoryContract;\\n        address router;\\n        string version;\\n    }\\n\\n    struct FactorySettings {\\n        address treasuryContract;\\n        address usersModuleContract;\\n        address easContract;\\n        bytes32 easSchema;\\n        address museToken;\\n        address daiToken;\\n        address wethToken;\\n        address router;\\n    }\\n\\n    /**\\n     * @dev Struct representing a post on the Mecenate platform.\\n     */\\n    struct Post {\\n        User creator;\\n        PostData postdata;\\n    }\\n\\n    /**\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\n     */\\n    struct PostData {\\n        PostSettings settings;\\n        PostEscrow escrow;\\n        PostEncryptedData data;\\n    }\\n\\n    /**\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\n     */\\n    struct PostEncryptedData {\\n        bytes encryptedData;\\n        bytes encryptedKey;\\n        bytes decryptedData;\\n    }\\n\\n    /**\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettings {\\n        PostStatus status;\\n        PostType postType;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n        uint256 duration;\\n        Tokens tokenId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\n     */\\n    struct PostEscrow {\\n        address buyer;\\n        address seller;\\n        uint256 stake;\\n        uint256 payment;\\n        uint256 punishment;\\n        uint256 penalty;\\n    }\\n\\n    /**\\n     * @dev Struct representing a user on the Mecenate platform.\\n     */\\n    struct User {\\n        address evmAddress;\\n        bytes sismoVaultId;\\n        bytes publicKey;\\n    }\\n\\n    /**\\n     * @dev Struct representing a feed on the Mecenate platform.\\n     */\\n    struct Feed {\\n        address contractAddress;\\n        address owner;\\n        uint256 sellerStake;\\n        uint256 buyerStake;\\n        uint256 totalStake;\\n        uint256 postCount;\\n        uint256 paymentRequested;\\n        uint256 stakeRequested;\\n        PostStatus status;\\n        Tokens tokenId;\\n        string version;\\n    }\\n\\n    /**\\n     * @dev Struct representing a bay request on the Mecenate platform.\\n     */\\n    struct BayRequest {\\n        bytes request;\\n        uint256 payment;\\n        uint256 stake;\\n        address postAddress;\\n        bool accepted;\\n        uint256 postCount;\\n        Tokens tokenId;\\n        address buyerAddress;\\n    }\\n}\\n\",\"keccak256\":\"0xab56ad7506e91048fc9c6db9fd9510c42afa61d6b11a99a273bf975643307d8f\"},\"contracts/modules/BurnDAI.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"./BurnMUSE.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"../interfaces/IWETH.sol\\\";\\n\\nabstract contract BurnDAI is BurnMUSE {\\n    using SafeMath for uint256;\\n\\n    function _burnFrom(\\n        address from,\\n        uint256 value\\n    ) internal override returns (bool success) {\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\n            .transferFrom(from, address(this), value);\\n\\n        _burn(value);\\n\\n        return true;\\n    }\\n\\n    function _burnDai(uint256 value) internal returns (bool success) {\\n        // approve uniswap for token transfer\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\n            .approve(settings.router, value);\\n\\n        // swap IMecenateFeedFactory(settings.factoryContract).daiToken() for MUSE\\n        uint256 tokens_sold = value;\\n\\n        uint256 tokens_bought = _swapTokensForToken(\\n            IMecenateFeedFactory(settings.factoryContract).daiToken(),\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\n            IMecenateFeedFactory(settings.factoryContract).getRouterFee(0),\\n            tokens_sold\\n        );\\n\\n        uint256 tokens_sold_to_muse = _swapTokensForToken(\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\n            IMecenateFeedFactory(settings.factoryContract).museToken(),\\n            IMecenateFeedFactory(settings.factoryContract).getRouterFee(1),\\n            tokens_bought\\n        );\\n\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).museToken())\\n            .approve(\\n                IMecenateFeedFactory(settings.factoryContract).museToken(),\\n                tokens_sold_to_muse\\n            );\\n\\n        // burn MUSE\\n        BurnMUSE._burn(tokens_sold_to_muse);\\n\\n        return true;\\n    }\\n\\n    function _burnWeth(uint256 value) internal returns (bool success) {\\n        // deposit IMecenateFeedFactory(settings.factoryContract).wethToken()\\n        IWETH(IMecenateFeedFactory(settings.factoryContract).wethToken())\\n            .deposit{value: value}();\\n\\n        // approve uniswap for token transfer\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).wethToken())\\n            .approve(settings.router, value);\\n\\n        // swap IMecenateFeedFactory(settings.factoryContract).wethToken() for MUSE\\n        uint256 tokens_sold = value;\\n\\n        uint256 tokens_bought = _swapTokensForToken(\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\n            IMecenateFeedFactory(settings.factoryContract).museToken(),\\n            IMecenateFeedFactory(settings.factoryContract).getRouterFee(1),\\n            tokens_sold\\n        );\\n\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).museToken())\\n            .approve(\\n                IMecenateFeedFactory(settings.factoryContract).museToken(),\\n                tokens_bought\\n            );\\n\\n        // burn MUSE\\n        BurnMUSE._burn(tokens_bought);\\n\\n        return true;\\n    }\\n\\n    function getTokenAddress()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address token)\\n    {\\n        return IMecenateFeedFactory(settings.factoryContract).daiToken();\\n    }\\n\\n    function getExchangeAddress()\\n        internal\\n        view\\n        override\\n        returns (address exchange)\\n    {\\n        exchange = settings.router;\\n    }\\n\\n    function _swapTokensForToken(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountIn\\n    ) internal returns (uint256 amountOut) {\\n        // Check and approve allowance\\n        uint256 allowance = IERC20(tokenIn).allowance(\\n            address(this),\\n            settings.router\\n        );\\n        if (allowance < amountIn) {\\n            IERC20(tokenIn).approve(settings.router, type(uint256).max);\\n        }\\n\\n        // Prepare parameters\\n        address recipient = address(this);\\n        uint256 deadline = block.timestamp + 60; // 15 seconds from the current block timestamp\\n\\n        // Perform the swap\\n        // Refer to the Uniswap V3 documentation for details on the params.\\n        amountOut = ISwapRouter(settings.router).exactInputSingle(\\n            ISwapRouter.ExactInputSingleParams({\\n                tokenIn: tokenIn,\\n                tokenOut: tokenOut,\\n                fee: fee,\\n                recipient: recipient,\\n                deadline: deadline,\\n                amountIn: amountIn,\\n                amountOutMinimum: 0, // you may want to set a minimum here\\n                sqrtPriceLimitX96: 0\\n            })\\n        );\\n\\n        return amountOut;\\n    }\\n}\\n\",\"keccak256\":\"0xa69462e962a3be48c3514c746d791c7a870247e8e441a2d7a11b5771ec8e0d23\"},\"contracts/modules/BurnMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\nimport \\\"../interfaces/IMUSE.sol\\\";\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\nimport \\\"./Events.sol\\\";\\n\\nabstract contract BurnMUSE is Events {\\n    function _burn(uint256 value) internal virtual returns (bool success) {\\n        IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken()).burn(\\n            value\\n        );\\n        return true;\\n    }\\n\\n    function _burnFrom(\\n        address from,\\n        uint256 value\\n    ) internal virtual returns (bool success) {\\n        IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken())\\n            .transferFrom(from, address(this), value);\\n        _burn(value);\\n        return true;\\n    }\\n\\n    function getTokenAddress() internal view virtual returns (address token) {\\n        return IMecenateFeedFactory(settings.factoryContract).museToken();\\n    }\\n\\n    function getExchangeAddress()\\n        internal\\n        view\\n        virtual\\n        returns (address exchange)\\n    {\\n        exchange = IMecenateFeedFactory(settings.factoryContract).router();\\n    }\\n}\\n\",\"keccak256\":\"0x052049c27f8e98f27fd3d237157e4700d5f5c313343d1cd734614beefa4ccfc6\"},\"contracts/modules/Data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../interfaces/IMecenateFeed.sol\\\";\\nimport \\\"../interfaces/IMecenateUsers.sol\\\";\\nimport \\\"../interfaces/IMecenateTreasury.sol\\\";\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\nimport \\\"../helpers/eas/IEAS.sol\\\";\\nimport \\\"./Version.sol\\\";\\n\\n/**\\n * @title Data\\n * @dev This contract stores data related to Mecenate posts and provides functions to interact with it.\\n */\\ncontract Data is Version {\\n    bytes internal constant ZEROHASH = \\\"0x00\\\";\\n\\n    address public owner;\\n\\n    Structures.Post public post;\\n\\n    Structures.FeedSettings internal settings;\\n\\n    mapping(uint8 => uint256) internal postDurationToDays;\\n\\n    mapping(uint8 => bool) internal validStatuses;\\n\\n    constructor(\\n        address usersModuleContract,\\n        address factoryContract,\\n        uint256 _major,\\n        uint256 _minor,\\n        uint256 _patch\\n    ) Version(_major, _minor, _patch) {\\n        settings.punishmentRatio = 100000000000000000; // Constant value\\n        settings.postCount = 0; // Initialize postCount to 0\\n        settings.usersModuleContract = usersModuleContract;\\n        settings.factoryContract = msg.sender;\\n        settings.router = IMecenateFeedFactory(factoryContract).router();\\n        settings.version = _version();\\n\\n        post.postdata.settings.status = Structures.PostStatus.Waiting;\\n\\n        postDurationToDays[uint8(Structures.PostDuration.OneDay)] = 1 days;\\n        postDurationToDays[uint8(Structures.PostDuration.ThreeDays)] = 3 days;\\n        postDurationToDays[uint8(Structures.PostDuration.OneWeek)] = 7 days;\\n        postDurationToDays[uint8(Structures.PostDuration.TwoWeeks)] = 14 days;\\n        postDurationToDays[uint8(Structures.PostDuration.OneMonth)] = 30 days;\\n\\n        validStatuses[uint8(Structures.PostStatus.Waiting)] = true;\\n    }\\n\\n    function _changeStatus(Structures.PostStatus newStatus) internal {\\n        validStatuses[uint8(post.postdata.settings.status)] = false;\\n        validStatuses[uint8(newStatus)] = true;\\n        post.postdata.settings.status = newStatus;\\n    }\\n\\n    function getStatus() external view returns (Structures.PostStatus) {\\n        return post.postdata.settings.status;\\n    }\\n\\n    function getTokenId() external view returns (Structures.Tokens) {\\n        return post.postdata.settings.tokenId;\\n    }\\n\\n    function getTokenIdAddress() public view returns (address) {\\n        if (post.postdata.settings.tokenId == Structures.Tokens.MUSE) {\\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\\n        } else if (post.postdata.settings.tokenId == Structures.Tokens.DAI) {\\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    function _checkToken(Structures.Tokens _token) internal view {\\n        require(_token == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n    }\\n\\n    function getPaymentRequested() external view returns (uint256) {\\n        return post.postdata.escrow.payment;\\n    }\\n\\n    function getStakeRequested() external view returns (uint256) {\\n        return post.postdata.escrow.stake;\\n    }\\n\\n    function postCount() external view returns (uint256) {\\n        return settings.postCount;\\n    }\\n\\n    function getEncryptedPost() external view returns (bytes memory) {\\n        return post.postdata.data.encryptedData;\\n    }\\n\\n    function getPost() external view returns (Structures.Post memory) {\\n        return post;\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xb09086cdcab6dc2790f56df6a5808c7a48794c5519ea122f927c0a0684d1f2c6\",\"license\":\"MIT\"},\"contracts/modules/Deposit.sol\":{\"content\":\"pragma solidity 0.8.19;\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./TokenManager.sol\\\";\\n\\ncontract Deposit {\\n    using SafeMath for uint256;\\n\\n    mapping(uint256 => mapping(address => uint256)) private _deposit;\\n\\n    event DepositIncreased(\\n        Structures.Tokens tokenID,\\n        address user,\\n        uint256 amount,\\n        uint256 newDeposit\\n    );\\n    event DepositDecreased(\\n        Structures.Tokens tokenID,\\n        address user,\\n        uint256 amount,\\n        uint256 newDeposit\\n    );\\n\\n    function _increaseDeposit(\\n        Structures.Tokens tokenID,\\n        address user,\\n        uint256 amountToAdd\\n    ) internal returns (uint256 newDeposit) {\\n        // calculate new deposit amount\\n        newDeposit = _deposit[uint256(tokenID)][user].add(amountToAdd);\\n\\n        // set new stake to storage\\n        _deposit[uint256(tokenID)][user] = newDeposit;\\n\\n        // emit event\\n        emit DepositIncreased(tokenID, user, amountToAdd, newDeposit);\\n\\n        // return\\n        return newDeposit;\\n    }\\n\\n    function _decreaseDeposit(\\n        Structures.Tokens tokenID,\\n        address user,\\n        uint256 amountToRemove\\n    ) internal returns (uint256 newDeposit) {\\n        // get current deposit\\n        uint256 currentDeposit = _deposit[uint256(tokenID)][user];\\n\\n        // check if sufficient deposit\\n        require(currentDeposit >= amountToRemove, \\\"INSUFFICIENT_DEPOSIT\\\");\\n\\n        // calculate new deposit amount\\n        newDeposit = currentDeposit.sub(amountToRemove);\\n\\n        // set new stake to storage\\n        _deposit[uint256(tokenID)][user] = newDeposit;\\n\\n        // emit event\\n        emit DepositDecreased(tokenID, user, amountToRemove, newDeposit);\\n\\n        // return\\n        return newDeposit;\\n    }\\n\\n    function _clearDeposit(\\n        Structures.Tokens tokenID,\\n        address user\\n    ) internal returns (uint256 amountRemoved) {\\n        // get current deposit\\n        uint256 currentDeposit = _deposit[uint256(tokenID)][user];\\n\\n        // remove deposit\\n        _decreaseDeposit(tokenID, user, currentDeposit);\\n\\n        // return\\n        return currentDeposit;\\n    }\\n\\n    function _getDeposit(\\n        Structures.Tokens tokenID,\\n        address user\\n    ) internal view returns (uint256 deposit) {\\n        return _deposit[uint256(tokenID)][user];\\n    }\\n}\\n\",\"keccak256\":\"0xbde50573d2e5a22daecdfdb1d457c4f50b7ea16e18a03eac04013ce10f269d36\"},\"contracts/modules/Events.sol\":{\"content\":\"/**\\r\\n * @title Events\\r\\n * @dev This abstract contract defines the events related to the Mecenate platform's post lifecycle.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./Data.sol\\\";\\r\\n\\r\\nabstract contract Events is Data {\\r\\n    event Created(Structures.Post post);\\r\\n    event Accepted(Structures.Post post);\\r\\n    event Valid(Structures.Post post);\\r\\n    event Invalid(Structures.Post post);\\r\\n    event Finalized(Structures.Post post);\\r\\n    event MadePublic(Structures.Post post);\\r\\n    event Renounced(Structures.Post post);\\r\\n}\\r\\n\",\"keccak256\":\"0x3aeaf067b1f9010a2456df46fb54d4727b3a24082b1446ac9266dbcdd8c838f6\"},\"contracts/modules/Staking.sol\":{\"content\":\"/**\\n * @title Staking\\n * @dev This contract handles staking functionality for the Mecenate platform.\\n * It allows users to add, take, and burn stakes, and provides functions to get the total staked amount and individual stake amounts.\\n * It also includes a modifier to check the status of a post before allowing stake-related transactions.\\n */\\npragma solidity 0.8.19;\\n\\nimport \\\"./Deposit.sol\\\";\\nimport \\\"./Events.sol\\\";\\n\\nabstract contract Staking is Events, Deposit, TokenManager {\\n    using SafeMath for uint256;\\n\\n    event StakeBurned(address staker, uint256 amount);\\n\\n    event StakeTaken(address staker, uint256 amount, Structures.Tokens tokenId);\\n\\n    event StakeAdded(address staker, uint256 amount, Structures.Tokens tokenId);\\n\\n    function _addStake(\\n        Structures.Tokens tokenId,\\n        address staker,\\n        address funder,\\n        uint256 amountToAdd\\n    ) internal returns (uint256 newStake) {\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\n\\n        require(\\n            currentStatus != Structures.PostStatus.Accepted &&\\n                currentStatus != Structures.PostStatus.Submitted,\\n            \\\"INVALID_STATUS\\\"\\n        );\\n\\n        require(amountToAdd > 0, \\\"STAKE_REQUIRED\\\");\\n\\n        if (tokenId != Structures.Tokens.NaN) {\\n            _transferFrom(tokenId, funder, address(this), amountToAdd);\\n        }\\n\\n        newStake = Deposit._increaseDeposit(tokenId, staker, amountToAdd);\\n\\n        emit StakeAdded(staker, amountToAdd, tokenId);\\n\\n        return newStake;\\n    }\\n\\n    function _takeStake(\\n        Structures.Tokens tokenId,\\n        address staker,\\n        address receiver,\\n        uint256 amountToTake\\n    ) internal returns (uint256 newStake) {\\n        // Memorizza lo status del post in una variabile per evitare accessi ridondanti allo storage\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\n\\n        // Verifica che lo status del post sia valido per procedere\\n        require(\\n            currentStatus != Structures.PostStatus.Accepted &&\\n                currentStatus != Structures.PostStatus.Submitted,\\n            \\\"INVALID_STATUS\\\"\\n        );\\n\\n        // Effettua il trasferimento del token o dell'Ether\\n        if (tokenId == Structures.Tokens.NaN) {\\n            //(bool result, ) = payable(_to).call{value: amountToTake}(\\\"\\\");\\n            //require(result, \\\"CALL_FAILED\\\");\\n            payable(receiver).transfer(amountToTake);\\n        } else {\\n            _transfer(tokenId, receiver, amountToTake);\\n        }\\n\\n        // Aggiorna il deposito e emette un evento\\n        newStake = Deposit._decreaseDeposit(tokenId, staker, amountToTake);\\n        emit StakeTaken(staker, amountToTake, tokenId);\\n\\n        return newStake;\\n    }\\n\\n    function _takeFullStake(\\n        Structures.Tokens tokenId,\\n        address staker,\\n        address receiver\\n    ) internal returns (uint256 amountTaken) {\\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, staker);\\n\\n        uint256 newStake = _takeStake(\\n            tokenId,\\n            staker,\\n            receiver,\\n            currentDeposit\\n        );\\n\\n        return newStake;\\n    }\\n\\n    function _burnStake(\\n        Structures.Tokens tokenId,\\n        address staker,\\n        uint256 amountToBurn\\n    ) internal returns (uint256 newStake) {\\n        uint256 newDeposit = Deposit._decreaseDeposit(\\n            tokenId,\\n            staker,\\n            amountToBurn\\n        );\\n\\n        bool burnEnabled = IMecenateFeedFactory(settings.factoryContract)\\n            .burnEnabled();\\n\\n        address treasuryContract = IMecenateFeedFactory(\\n            settings.factoryContract\\n        ).treasuryContract();\\n\\n        if (burnEnabled == false) {\\n            if (tokenId == Structures.Tokens.NaN) {\\n                (bool result, ) = payable(treasuryContract).call{\\n                    value: amountToBurn\\n                }(\\\"\\\");\\n                require(result, \\\"CALL_FAILED\\\");\\n            } else {\\n                _transfer(tokenId, treasuryContract, amountToBurn);\\n            }\\n        } else {\\n            if (tokenId == Structures.Tokens.DAI) {\\n                _burnDai(amountToBurn);\\n            } else if (tokenId == Structures.Tokens.MUSE) {\\n                _burn(amountToBurn);\\n            } else if (tokenId == Structures.Tokens.NaN) {\\n                _burnWeth(amountToBurn);\\n            }\\n        }\\n\\n        emit StakeBurned(staker, amountToBurn);\\n\\n        return newDeposit;\\n    }\\n\\n    function _burnFullStake(\\n        Structures.Tokens tokenId,\\n        address staker\\n    ) internal returns (uint256 amountBurned) {\\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, staker);\\n\\n        _burnStake(tokenId, staker, currentDeposit);\\n\\n        return currentDeposit;\\n    }\\n\\n    function getStake(\\n        Structures.Tokens tokenId,\\n        address staker\\n    ) external view returns (uint256 amount) {\\n        // get deposit\\n        amount = Deposit._getDeposit(tokenId, staker);\\n        // explicit return\\n        return amount;\\n    }\\n\\n    function getTotalStaked() external view returns (uint256) {\\n        uint256 amountSeller = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            post.postdata.escrow.seller\\n        );\\n\\n        uint256 amountBuyer = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            post.postdata.escrow.buyer\\n        );\\n\\n        return (amountSeller + amountBuyer);\\n    }\\n\\n    function addStake(\\n        Structures.Tokens tokenId,\\n        address _funder,\\n        uint256 amountToAdd\\n    ) external payable returns (uint256) {\\n        require(tokenId == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n\\n        // Check if the encryptedVaultId matches with either the buyer or the seller\\n        require(\\n            msg.sender == post.postdata.escrow.buyer ||\\n                msg.sender == post.postdata.escrow.seller,\\n            \\\"WRONG_MSGSENDER\\\"\\n        );\\n\\n        // Determine the amount to add based on the role (buyer or seller)\\n        uint256 actualAmountToAdd = (msg.sender == post.postdata.escrow.seller)\\n            ? msg.value\\n            : amountToAdd;\\n\\n        // Update the stake\\n        uint256 newStake = _addStake(\\n            tokenId,\\n            msg.sender,\\n            _funder,\\n            actualAmountToAdd\\n        );\\n\\n        // Update the corresponding escrow value based on the role\\n        if (msg.sender == post.postdata.escrow.buyer) {\\n            post.postdata.escrow.payment = newStake;\\n        } else {\\n            post.postdata.escrow.stake = newStake;\\n        }\\n\\n        return newStake;\\n    }\\n\\n    function takeStake(\\n        Structures.Tokens tokenId,\\n        address receiver,\\n        uint256 amountToTake\\n    ) external returns (uint256) {\\n        require(tokenId == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n\\n        uint256 currentDeposit = Deposit._getDeposit(tokenId, msg.sender);\\n\\n        require(currentDeposit >= amountToTake, \\\"NOT_ENOUGH_STAKE\\\");\\n\\n        uint256 newBalance = _takeStake(\\n            tokenId,\\n            msg.sender,\\n            receiver,\\n            amountToTake\\n        );\\n\\n        if (msg.sender == post.postdata.escrow.buyer) {\\n            post.postdata.escrow.payment = newBalance;\\n        } else {\\n            post.postdata.escrow.stake = newBalance;\\n        }\\n\\n        return newBalance;\\n    }\\n\\n    function takeFullStake(\\n        Structures.Tokens tokenId,\\n        address receiver\\n    ) external returns (uint256) {\\n        require(tokenId == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n\\n        uint256 newBalance = _takeFullStake(tokenId, msg.sender, receiver);\\n\\n        if (msg.sender == post.postdata.escrow.buyer) {\\n            post.postdata.escrow.payment = newBalance;\\n        } else if (msg.sender == post.postdata.escrow.seller) {\\n            post.postdata.escrow.stake = newBalance;\\n        }\\n\\n        return newBalance;\\n    }\\n\\n    function getSellerStake() external view returns (uint256 amount) {\\n        // get deposit\\n        amount = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            post.postdata.escrow.seller\\n        );\\n        // explicit return\\n        return amount;\\n    }\\n\\n    function getBuyerStake() external view returns (uint256 amount) {\\n        // get deposit\\n        amount = Deposit._getDeposit(\\n            post.postdata.settings.tokenId,\\n            post.postdata.escrow.buyer\\n        );\\n        // explicit return\\n        return amount;\\n    }\\n}\\n\",\"keccak256\":\"0x94556a37278a2684b61c9734e71d523d215af864486d60b0562f52d5437308dc\"},\"contracts/modules/TokenManager.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"./BurnDAI.sol\\\";\\n\\nabstract contract TokenManager is BurnDAI {\\n    function _getTokenAddress(\\n        Structures.Tokens tokenID\\n    ) internal view returns (address) {\\n        if (tokenID == Structures.Tokens.DAI)\\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\\n        if (tokenID == Structures.Tokens.MUSE)\\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\\n        return address(0);\\n    }\\n\\n    function _checkAllowance(\\n        Structures.Tokens tokenID,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal view {\\n        address tokenAddress = _getTokenAddress(tokenID);\\n        require(\\n            IERC20(tokenAddress).allowance(from, to) >= value,\\n            \\\"INSUFFICIENT_ALLOWANCE\\\"\\n        );\\n    }\\n\\n    modifier onlyValidTokenID(Structures.Tokens tokenID) {\\n        require(\\n            tokenID == Structures.Tokens.MUSE ||\\n                tokenID == Structures.Tokens.DAI ||\\n                tokenID == Structures.Tokens.NaN,\\n            \\\"WRONG_TOKEN\\\"\\n        );\\n        _;\\n    }\\n\\n    function isValidTokenID(\\n        Structures.Tokens tokenID\\n    ) internal pure returns (bool validity) {\\n        return\\n            tokenID == Structures.Tokens.MUSE ||\\n            tokenID == Structures.Tokens.DAI;\\n    }\\n\\n    function _transfer(\\n        Structures.Tokens tokenID,\\n        address to,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        require(\\n            IERC20(_getTokenAddress(tokenID)).transfer(to, value),\\n            \\\"TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function _transferFrom(\\n        Structures.Tokens tokenID,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        address tokenAddress = _getTokenAddress(tokenID);\\n        _checkAllowance(tokenID, from, to, value);\\n        require(\\n            IERC20(tokenAddress).transferFrom(from, to, value),\\n            \\\"TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function _burn(\\n        Structures.Tokens tokenID,\\n        address _receiver,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) returns (bool success) {\\n        bool burnEnabled = IMecenateFeedFactory(settings.factoryContract)\\n            .burnEnabled();\\n\\n        if (burnEnabled == false) {\\n            if (tokenID == Structures.Tokens.NaN) {\\n                (bool result, ) = payable(_receiver).call{value: value}(\\\"\\\");\\n                require(result, \\\"CALL_FAILED\\\");\\n            } else {\\n                TokenManager._transfer(tokenID, _receiver, value);\\n            }\\n        } else {\\n            if (tokenID == Structures.Tokens.DAI) {\\n                _burnDai(value);\\n            } else if (tokenID == Structures.Tokens.MUSE) {\\n                _burn(value);\\n            } else if (tokenID == Structures.Tokens.NaN) {\\n                _burnWeth(value);\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    function _burnFrom(\\n        Structures.Tokens tokenID,\\n        address from,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        address treasury = IMecenateFeedFactory(settings.factoryContract)\\n            .treasuryContract();\\n\\n        if (tokenID == Structures.Tokens.DAI) {\\n            IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\n                .transferFrom(from, treasury, value);\\n        } else if (tokenID == Structures.Tokens.MUSE) {\\n            BurnMUSE._burnFrom(from, value);\\n        }\\n    }\\n\\n    function _approve(\\n        Structures.Tokens tokenID,\\n        address spender,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        if (tokenID == Structures.Tokens.DAI) {\\n            require(\\n                IERC20(\\n                    IMecenateFeedFactory(settings.factoryContract).daiToken()\\n                ).approve(spender, value),\\n                \\\"APPROVE_FAILED\\\"\\n            );\\n        } else if (tokenID == Structures.Tokens.MUSE) {\\n            uint256 currentAllowance = IMUSE(\\n                IMecenateFeedFactory(settings.factoryContract).museToken()\\n            ).allowance(msg.sender, spender);\\n\\n            uint256 newAllowance = currentAllowance + value;\\n            require(\\n                IMUSE(IMecenateFeedFactory(settings.factoryContract).daiToken())\\n                    .increaseAllowance(spender, newAllowance),\\n                \\\"APPROVE_FAILED\\\"\\n            );\\n        }\\n    }\\n\\n    function totalSupply(\\n        Structures.Tokens tokenID\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).totalSupply();\\n    }\\n\\n    function balanceOf(\\n        Structures.Tokens tokenID,\\n        address who\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).balanceOf(who);\\n    }\\n\\n    function allowance(\\n        Structures.Tokens tokenID,\\n        address owner,\\n        address spender\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).allowance(owner, spender);\\n    }\\n}\\n\",\"keccak256\":\"0x8eded6283ea4effbe4861c36f73afaace086765ac8d26ef695ac8855ed15e8b1\"},\"contracts/modules/Version.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/// @title Semver\\n/// @notice A simple contract for managing contract versions.\\nabstract contract Version {\\n    // Contract's major version number.\\n    uint256 private immutable _major;\\n\\n    // Contract's minor version number.\\n    uint256 private immutable _minor;\\n\\n    // Contract's patch version number.\\n    uint256 private immutable _path;\\n\\n    /// @dev Create a new Semver instance.\\n    /// @param major Major version number.\\n    /// @param minor Minor version number.\\n    /// @param patch Patch version number.\\n    constructor(uint256 major, uint256 minor, uint256 patch) {\\n        _major = major;\\n        _minor = minor;\\n        _path = patch;\\n    }\\n\\n    /// @notice Returns the full semver contract version.\\n    /// @return Semver contract version as a string.\\n    function version() external view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    Strings.toString(_major),\\n                    \\\".\\\",\\n                    Strings.toString(_minor),\\n                    \\\".\\\",\\n                    Strings.toString(_path)\\n                )\\n            );\\n    }\\n\\n    function _version() internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    Strings.toString(_major),\\n                    \\\".\\\",\\n                    Strings.toString(_minor),\\n                    \\\".\\\",\\n                    Strings.toString(_path)\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xa99614da4eb0014c2756685061352b80325a07e4cb14f7c704ec2a62e182688f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3523,"contract":"contracts/modules/Staking.sol:Staking","label":"owner","offset":0,"slot":"0","type":"t_address"},{"astId":3526,"contract":"contracts/modules/Staking.sol:Staking","label":"post","offset":0,"slot":"1","type":"t_struct(Post)2574_storage"},{"astId":3529,"contract":"contracts/modules/Staking.sol:Staking","label":"settings","offset":0,"slot":"18","type":"t_struct(FeedSettings)2550_storage"},{"astId":3533,"contract":"contracts/modules/Staking.sol:Staking","label":"postDurationToDays","offset":0,"slot":"24","type":"t_mapping(t_uint8,t_uint256)"},{"astId":3537,"contract":"contracts/modules/Staking.sol:Staking","label":"validStatuses","offset":0,"slot":"25","type":"t_mapping(t_uint8,t_bool)"},{"astId":3871,"contract":"contracts/modules/Staking.sol:Staking","label":"_deposit","offset":0,"slot":"26","type":"t_mapping(t_uint256,t_mapping(t_address,t_uint256))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_enum(PostStatus)2521":{"encoding":"inplace","label":"enum Structures.PostStatus","numberOfBytes":"1"},"t_enum(PostType)2531":{"encoding":"inplace","label":"enum Structures.PostType","numberOfBytes":"1"},"t_enum(Tokens)2525":{"encoding":"inplace","label":"enum Structures.Tokens","numberOfBytes":"1"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_uint8,t_bool)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint8,t_uint256)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(FeedSettings)2550_storage":{"encoding":"inplace","label":"struct Structures.FeedSettings","members":[{"astId":2539,"contract":"contracts/modules/Staking.sol:Staking","label":"punishmentRatio","offset":0,"slot":"0","type":"t_uint256"},{"astId":2541,"contract":"contracts/modules/Staking.sol:Staking","label":"postCount","offset":0,"slot":"1","type":"t_uint256"},{"astId":2543,"contract":"contracts/modules/Staking.sol:Staking","label":"usersModuleContract","offset":0,"slot":"2","type":"t_address"},{"astId":2545,"contract":"contracts/modules/Staking.sol:Staking","label":"factoryContract","offset":0,"slot":"3","type":"t_address"},{"astId":2547,"contract":"contracts/modules/Staking.sol:Staking","label":"router","offset":0,"slot":"4","type":"t_address"},{"astId":2549,"contract":"contracts/modules/Staking.sol:Staking","label":"version","offset":0,"slot":"5","type":"t_string_storage"}],"numberOfBytes":"192"},"t_struct(Post)2574_storage":{"encoding":"inplace","label":"struct Structures.Post","members":[{"astId":2570,"contract":"contracts/modules/Staking.sol:Staking","label":"creator","offset":0,"slot":"0","type":"t_struct(User)2627_storage"},{"astId":2573,"contract":"contracts/modules/Staking.sol:Staking","label":"postdata","offset":0,"slot":"3","type":"t_struct(PostData)2584_storage"}],"numberOfBytes":"544"},"t_struct(PostData)2584_storage":{"encoding":"inplace","label":"struct Structures.PostData","members":[{"astId":2577,"contract":"contracts/modules/Staking.sol:Staking","label":"settings","offset":0,"slot":"0","type":"t_struct(PostSettings)2607_storage"},{"astId":2580,"contract":"contracts/modules/Staking.sol:Staking","label":"escrow","offset":0,"slot":"5","type":"t_struct(PostEscrow)2620_storage"},{"astId":2583,"contract":"contracts/modules/Staking.sol:Staking","label":"data","offset":0,"slot":"11","type":"t_struct(PostEncryptedData)2591_storage"}],"numberOfBytes":"448"},"t_struct(PostEncryptedData)2591_storage":{"encoding":"inplace","label":"struct Structures.PostEncryptedData","members":[{"astId":2586,"contract":"contracts/modules/Staking.sol:Staking","label":"encryptedData","offset":0,"slot":"0","type":"t_bytes_storage"},{"astId":2588,"contract":"contracts/modules/Staking.sol:Staking","label":"encryptedKey","offset":0,"slot":"1","type":"t_bytes_storage"},{"astId":2590,"contract":"contracts/modules/Staking.sol:Staking","label":"decryptedData","offset":0,"slot":"2","type":"t_bytes_storage"}],"numberOfBytes":"96"},"t_struct(PostEscrow)2620_storage":{"encoding":"inplace","label":"struct Structures.PostEscrow","members":[{"astId":2609,"contract":"contracts/modules/Staking.sol:Staking","label":"buyer","offset":0,"slot":"0","type":"t_address"},{"astId":2611,"contract":"contracts/modules/Staking.sol:Staking","label":"seller","offset":0,"slot":"1","type":"t_address"},{"astId":2613,"contract":"contracts/modules/Staking.sol:Staking","label":"stake","offset":0,"slot":"2","type":"t_uint256"},{"astId":2615,"contract":"contracts/modules/Staking.sol:Staking","label":"payment","offset":0,"slot":"3","type":"t_uint256"},{"astId":2617,"contract":"contracts/modules/Staking.sol:Staking","label":"punishment","offset":0,"slot":"4","type":"t_uint256"},{"astId":2619,"contract":"contracts/modules/Staking.sol:Staking","label":"penalty","offset":0,"slot":"5","type":"t_uint256"}],"numberOfBytes":"192"},"t_struct(PostSettings)2607_storage":{"encoding":"inplace","label":"struct Structures.PostSettings","members":[{"astId":2594,"contract":"contracts/modules/Staking.sol:Staking","label":"status","offset":0,"slot":"0","type":"t_enum(PostStatus)2521"},{"astId":2597,"contract":"contracts/modules/Staking.sol:Staking","label":"postType","offset":1,"slot":"0","type":"t_enum(PostType)2531"},{"astId":2599,"contract":"contracts/modules/Staking.sol:Staking","label":"creationTimeStamp","offset":0,"slot":"1","type":"t_uint256"},{"astId":2601,"contract":"contracts/modules/Staking.sol:Staking","label":"endTimeStamp","offset":0,"slot":"2","type":"t_uint256"},{"astId":2603,"contract":"contracts/modules/Staking.sol:Staking","label":"duration","offset":0,"slot":"3","type":"t_uint256"},{"astId":2606,"contract":"contracts/modules/Staking.sol:Staking","label":"tokenId","offset":0,"slot":"4","type":"t_enum(Tokens)2525"}],"numberOfBytes":"160"},"t_struct(User)2627_storage":{"encoding":"inplace","label":"struct Structures.User","members":[{"astId":2622,"contract":"contracts/modules/Staking.sol:Staking","label":"evmAddress","offset":0,"slot":"0","type":"t_address"},{"astId":2624,"contract":"contracts/modules/Staking.sol:Staking","label":"sismoVaultId","offset":0,"slot":"1","type":"t_bytes_storage"},{"astId":2626,"contract":"contracts/modules/Staking.sol:Staking","label":"publicKey","offset":0,"slot":"2","type":"t_bytes_storage"}],"numberOfBytes":"96"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{"version()":{"notice":"Returns the full semver contract version."}},"version":1}}},"contracts/modules/Submission.sol":{"Submission":{"abi":[{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Accepted","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Created","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Finalized","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Invalid","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"MadePublic","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Renounced","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Valid","type":"event"},{"inputs":[],"name":"getEncryptedPost","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPaymentRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPost","outputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"internalType":"struct Structures.Post","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStakeRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStatus","outputs":[{"internalType":"enum Structures.PostStatus","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenId","outputs":[{"internalType":"enum Structures.Tokens","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenIdAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"post","outputs":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"postCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"name":"revealData","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"encryptedKey","type":"bytes"}],"name":"submitHash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"version()":{"returns":{"_0":"Semver contract version as a string."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getEncryptedPost()":"729e2eb1","getPaymentRequested()":"d24e0c87","getPost()":"8c6838ba","getStakeRequested()":"faeb5e17","getStatus()":"4e69d560","getTokenId()":"010a38f5","getTokenIdAddress()":"5ad4e170","owner()":"8da5cb5b","post()":"05c1f502","postCount()":"17906c2e","revealData(bytes)":"7abe914d","submitHash(bytes)":"8f903c79","version()":"54fd4d50"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Accepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Invalid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"MadePublic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Renounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Valid\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getEncryptedPost\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaymentRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPost\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.Post\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenIdAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"post\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"name\":\"revealData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"}],\"name\":\"submitHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"version()\":{\"returns\":{\"_0\":\"Semver contract version as a string.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"version()\":{\"notice\":\"Returns the full semver contract version.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/Submission.sol\":\"Submission\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/helpers/eas/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror DeadlineExpired();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/// @notice A struct representing ECDSA signature data.\\nstruct Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/// @notice A struct representing a single attestation.\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/// @notice A helper function to work with unchecked iterators in loops.\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685\",\"license\":\"MIT\"},\"contracts/helpers/eas/IEAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ISchemaRegistry} from \\\"./ISchemaRegistry.sol\\\";\\nimport {Attestation, Signature} from \\\"./Common.sol\\\";\\n\\n/// @notice A struct representing the arguments of the attestation request.\\nstruct AttestationRequestData {\\n    address recipient; // The recipient of the attestation.\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes32 refUID; // The UID of the related attestation.\\n    bytes data; // Custom attestation data.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the attestation request.\\nstruct AttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the full delegated attestation request.\\nstruct DelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n    Signature signature; // The ECDSA signature data.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi attestation request.\\nstruct MultiAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi attestation request.\\nstruct MultiDelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the arguments of the revocation request.\\nstruct RevocationRequestData {\\n    bytes32 uid; // The UID of the attestation to revoke.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the revocation request.\\nstruct RevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the arguments of the full delegated revocation request.\\nstruct DelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n    Signature signature; // The ECDSA signature data.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi revocation request.\\nstruct MultiRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi revocation request.\\nstruct MultiDelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @title IEAS\\n/// @notice EAS - Ethereum Attestation Service interface.\\ninterface IEAS {\\n    /// @notice Emitted when an attestation has been made.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param uid The UID the revoked attestation.\\n    /// @param schemaUID The UID of the schema.\\n    event Attested(\\n        address indexed recipient,\\n        address indexed attester,\\n        bytes32 uid,\\n        bytes32 indexed schemaUID\\n    );\\n\\n    /// @notice Emitted when an attestation has been revoked.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param schemaUID The UID of the schema.\\n    /// @param uid The UID the revoked attestation.\\n    event Revoked(\\n        address indexed recipient,\\n        address indexed attester,\\n        bytes32 uid,\\n        bytes32 indexed schemaUID\\n    );\\n\\n    /// @notice Emitted when a data has been timestamped.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event Timestamped(bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /// @notice Emitted when a data has been revoked.\\n    /// @param revoker The address of the revoker.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event RevokedOffchain(\\n        address indexed revoker,\\n        bytes32 indexed data,\\n        uint64 indexed timestamp\\n    );\\n\\n    /// @notice Returns the address of the global schema registry.\\n    /// @return The address of the global schema registry.\\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\\n\\n    /// @notice Attests to a specific schema.\\n    /// @param request The arguments of the attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attest({\\n    ///         schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",\\n    ///         data: {\\n    ///             recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n    ///             data: \\\"0xF00D\\\",\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function attest(\\n        AttestationRequest calldata request\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attestByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function attestByDelegation(\\n        DelegatedAttestationRequest calldata delegatedRequest\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to multiple schemas.\\n    /// @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttest([{\\n    ///         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\\n    ///             data: '0x12345678',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiAttest(\\n        MultiAttestationRequest[] calldata multiRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Attests to multiple schemas using via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\\n    ///     grouped by distinct schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttestByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiAttestByDelegation(\\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Revokes an existing attestation to a specific schema.\\n    /// @param request The arguments of the revocation request.\\n    ///\\n    /// Example:\\n    ///     revoke({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function revoke(RevocationRequest calldata request) external payable;\\n\\n    /// @notice Revokes an existing attestation to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated revocation request.\\n    ///\\n    /// Example:\\n    ///     revokeByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 27,\\n    ///             r: '0xb593...7142',\\n    ///             s: '0x0f5b...2cce'\\n    ///         },\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function revokeByDelegation(\\n        DelegatedRevocationRequest calldata delegatedRequest\\n    ) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas.\\n    /// @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevoke([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiRevoke(\\n        MultiRevocationRequest[] calldata multiRequests\\n    ) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests\\n    ///     should be grouped by distinct schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevokeByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiRevokeByDelegation(\\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\\n    ) external payable;\\n\\n    /// @notice Timestamps the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function timestamp(bytes32 data) external returns (uint64);\\n\\n    /// @notice Timestamps the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\\n\\n    /// @notice Revokes the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function revokeOffchain(bytes32 data) external returns (uint64);\\n\\n    /// @notice Revokes the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function multiRevokeOffchain(\\n        bytes32[] calldata data\\n    ) external returns (uint64);\\n\\n    /// @notice Returns an existing attestation by UID.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return The attestation data members.\\n    function getAttestation(\\n        bytes32 uid\\n    ) external view returns (Attestation memory);\\n\\n    /// @notice Checks whether an attestation exists.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return Whether an attestation exists.\\n    function isAttestationValid(bytes32 uid) external view returns (bool);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getTimestamp(bytes32 data) external view returns (uint64);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getRevokeOffchain(\\n        address revoker,\\n        bytes32 data\\n    ) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xc95cca3d90dbae3a21d0f0e28fdf38cc5a85cbd8c760b7759782b18e8f62acc2\",\"license\":\"MIT\"},\"contracts/helpers/eas/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ISchemaResolver} from \\\"./ISchemaResolver.sol\\\";\\n\\n/// @notice A struct representing a record for a submitted schema.\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\n/// @title ISchemaRegistry\\n/// @notice The interface of global attestation schemas for the Ethereum Attestation Service protocol.\\ninterface ISchemaRegistry {\\n    /// @notice Emitted when a new schema has been registered\\n    /// @param uid The schema UID.\\n    /// @param registerer The address of the account used to register the schema.\\n    /// @param schema The schema data.\\n    event Registered(\\n        bytes32 indexed uid,\\n        address indexed registerer,\\n        SchemaRecord schema\\n    );\\n\\n    /// @notice Submits and reserves a new schema\\n    /// @param schema The schema data schema.\\n    /// @param resolver An optional schema resolver.\\n    /// @param revocable Whether the schema allows revocations explicitly.\\n    /// @return The UID of the new schema.\\n    function register(\\n        string calldata schema,\\n        ISchemaResolver resolver,\\n        bool revocable\\n    ) external returns (bytes32);\\n\\n    /// @notice Returns an existing schema by UID\\n    /// @param uid The UID of the schema to retrieve.\\n    /// @return The schema data members.\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\\n\",\"keccak256\":\"0x743ddc248c97a78d34239035d1d9557a74dcaaa5b59a2aa66cea4eadabb8b2de\",\"license\":\"MIT\"},\"contracts/helpers/eas/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {Attestation} from \\\"./Common.sol\\\";\\n\\n/// @title ISchemaResolver\\n/// @notice The interface of an optional schema resolver.\\ninterface ISchemaResolver {\\n    /// @notice Checks if the resolver can be sent ETH.\\n    /// @return Whether the resolver supports ETH transfers.\\n    function isPayable() external pure returns (bool);\\n\\n    /// @notice Processes an attestation and verifies whether it's valid.\\n    /// @param attestation The new attestation.\\n    /// @return Whether the attestation is valid.\\n    function attest(\\n        Attestation calldata attestation\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes multiple attestations and verifies whether they are valid.\\n    /// @param attestations The new attestations.\\n    /// @param values Explicit ETH amounts which were sent with each attestation.\\n    /// @return Whether all the attestations are valid.\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\\n    /// @param attestation The existing attestation to be revoked.\\n    /// @return Whether the attestation can be revoked.\\n    function revoke(\\n        Attestation calldata attestation\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\\n    /// @param attestations The existing attestations to be revoked.\\n    /// @param values Explicit ETH amounts which were sent with each revocation.\\n    /// @return Whether the attestations can be revoked.\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0x97ec835833519c6c11c0fb097ea5bccd888e65f650590fdb643d937430bb4f03\",\"license\":\"MIT\"},\"contracts/interfaces/IMecenateFeed.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateFeed {\\n    function getPost() external view returns (Structures.Post memory);\\n\\n    function getTotalStaked() external view returns (uint256);\\n\\n    function postCount() external view returns (uint256);\\n\\n    function acceptPost(\\n        Structures.Tokens,\\n        uint256 _amount,\\n        address _funder,\\n        address _buyer\\n    ) external payable;\\n\\n    function getSellerStake() external view returns (uint256);\\n\\n    function getBuyerStake() external view returns (uint256);\\n\\n    function getPaymentRequested() external view returns (uint256);\\n\\n    function getStakeRequested() external view returns (uint256);\\n\\n    function getStatus() external view returns (Structures.PostStatus status);\\n\\n    function getTokenId() external view returns (Structures.Tokens tokenId);\\n\\n    function owner() external view returns (address);\\n\\n    function version() external view returns (string memory);\\n\\n    function getEncryptedPost() external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xe7a4b838d4f4540e4a8e3911c2afea70ebd9a2e87bd526eef13b203c2643a645\"},\"contracts/interfaces/IMecenateFeedFactory.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\ninterface IMecenateFeedFactory {\\n    function owner() external view returns (address payable);\\n\\n    function treasuryContract() external view returns (address payable);\\n\\n    function feeds() external view returns (address[] memory);\\n\\n    function contractCounter() external view returns (uint256);\\n\\n    function isFeed(address _feed) external view returns (bool);\\n\\n    function museToken() external view returns (address);\\n\\n    function wethToken() external view returns (address);\\n\\n    function daiToken() external view returns (address);\\n\\n    function router() external view returns (address);\\n\\n    function getRouterFee(uint8 tokenId) external view returns (uint24);\\n\\n    function burnEnabled() external view returns (bool);\\n\\n    function version() external view returns (string memory);\\n\\n    function easSchema() external view returns (bytes32);\\n\\n    function easContract() external view returns (address);\\n}\\n\",\"keccak256\":\"0x79da402b87332cbe8176ab1d0abd2c5369a0da30970743b86283e1a774eea776\"},\"contracts/interfaces/IMecenateTreasury.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateTreasury {\\r\\n    function globalFee() external view returns (uint256);\\r\\n\\r\\n    function fixedFee() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf544878bba8e01c837110d06eac56042957d59c593ba9083f686ef02aa9276a1\"},\"contracts/interfaces/IMecenateUsers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateUsers {\\n    function registerUser(bytes memory metadata) external;\\n\\n    function getUsers() external view returns (address[] memory);\\n\\n    function getUserCount() external view returns (uint256);\\n\\n    function getUserAt(uint256 index) external view returns (address);\\n\\n    function checkifUserExist(address userAddress) external view returns (bool);\\n\\n    function getPaginatedUsers(\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) external view returns (address[] memory);\\n\\n    function getUserMetadata(\\n        address userAddress\\n    ) external view returns (Structures.User memory);\\n\\n    function getUserPublicKey(\\n        address userAddress\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xf0ff65dbfea12d90cf106325b9478e31b284045327e5f0974db5374b8789e93c\",\"license\":\"MIT\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\n * @title Structures\\n * @dev This library defines various data structures used in the Mecenate platform.\\n */\\npragma solidity 0.8.19;\\n\\nlibrary Structures {\\n    enum PostStatus {\\n        Waiting,\\n        Proposed,\\n        Accepted,\\n        Submitted,\\n        Finalized,\\n        Punished,\\n        Revealed,\\n        Renounced\\n    }\\n\\n    enum Tokens {\\n        NaN,\\n        MUSE,\\n        DAI\\n    }\\n\\n    enum PostType {\\n        Text,\\n        Image,\\n        Video,\\n        Audio,\\n        File\\n    }\\n    enum PostDuration {\\n        OneDay,\\n        ThreeDays,\\n        OneWeek,\\n        TwoWeeks,\\n        OneMonth\\n    }\\n\\n    struct FeedSettings {\\n        uint256 punishmentRatio;\\n        uint256 postCount;\\n        address usersModuleContract;\\n        address factoryContract;\\n        address router;\\n        string version;\\n    }\\n\\n    struct FactorySettings {\\n        address treasuryContract;\\n        address usersModuleContract;\\n        address easContract;\\n        bytes32 easSchema;\\n        address museToken;\\n        address daiToken;\\n        address wethToken;\\n        address router;\\n    }\\n\\n    /**\\n     * @dev Struct representing a post on the Mecenate platform.\\n     */\\n    struct Post {\\n        User creator;\\n        PostData postdata;\\n    }\\n\\n    /**\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\n     */\\n    struct PostData {\\n        PostSettings settings;\\n        PostEscrow escrow;\\n        PostEncryptedData data;\\n    }\\n\\n    /**\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\n     */\\n    struct PostEncryptedData {\\n        bytes encryptedData;\\n        bytes encryptedKey;\\n        bytes decryptedData;\\n    }\\n\\n    /**\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettings {\\n        PostStatus status;\\n        PostType postType;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n        uint256 duration;\\n        Tokens tokenId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\n     */\\n    struct PostEscrow {\\n        address buyer;\\n        address seller;\\n        uint256 stake;\\n        uint256 payment;\\n        uint256 punishment;\\n        uint256 penalty;\\n    }\\n\\n    /**\\n     * @dev Struct representing a user on the Mecenate platform.\\n     */\\n    struct User {\\n        address evmAddress;\\n        bytes sismoVaultId;\\n        bytes publicKey;\\n    }\\n\\n    /**\\n     * @dev Struct representing a feed on the Mecenate platform.\\n     */\\n    struct Feed {\\n        address contractAddress;\\n        address owner;\\n        uint256 sellerStake;\\n        uint256 buyerStake;\\n        uint256 totalStake;\\n        uint256 postCount;\\n        uint256 paymentRequested;\\n        uint256 stakeRequested;\\n        PostStatus status;\\n        Tokens tokenId;\\n        string version;\\n    }\\n\\n    /**\\n     * @dev Struct representing a bay request on the Mecenate platform.\\n     */\\n    struct BayRequest {\\n        bytes request;\\n        uint256 payment;\\n        uint256 stake;\\n        address postAddress;\\n        bool accepted;\\n        uint256 postCount;\\n        Tokens tokenId;\\n        address buyerAddress;\\n    }\\n}\\n\",\"keccak256\":\"0xab56ad7506e91048fc9c6db9fd9510c42afa61d6b11a99a273bf975643307d8f\"},\"contracts/modules/Data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../interfaces/IMecenateFeed.sol\\\";\\nimport \\\"../interfaces/IMecenateUsers.sol\\\";\\nimport \\\"../interfaces/IMecenateTreasury.sol\\\";\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\nimport \\\"../helpers/eas/IEAS.sol\\\";\\nimport \\\"./Version.sol\\\";\\n\\n/**\\n * @title Data\\n * @dev This contract stores data related to Mecenate posts and provides functions to interact with it.\\n */\\ncontract Data is Version {\\n    bytes internal constant ZEROHASH = \\\"0x00\\\";\\n\\n    address public owner;\\n\\n    Structures.Post public post;\\n\\n    Structures.FeedSettings internal settings;\\n\\n    mapping(uint8 => uint256) internal postDurationToDays;\\n\\n    mapping(uint8 => bool) internal validStatuses;\\n\\n    constructor(\\n        address usersModuleContract,\\n        address factoryContract,\\n        uint256 _major,\\n        uint256 _minor,\\n        uint256 _patch\\n    ) Version(_major, _minor, _patch) {\\n        settings.punishmentRatio = 100000000000000000; // Constant value\\n        settings.postCount = 0; // Initialize postCount to 0\\n        settings.usersModuleContract = usersModuleContract;\\n        settings.factoryContract = msg.sender;\\n        settings.router = IMecenateFeedFactory(factoryContract).router();\\n        settings.version = _version();\\n\\n        post.postdata.settings.status = Structures.PostStatus.Waiting;\\n\\n        postDurationToDays[uint8(Structures.PostDuration.OneDay)] = 1 days;\\n        postDurationToDays[uint8(Structures.PostDuration.ThreeDays)] = 3 days;\\n        postDurationToDays[uint8(Structures.PostDuration.OneWeek)] = 7 days;\\n        postDurationToDays[uint8(Structures.PostDuration.TwoWeeks)] = 14 days;\\n        postDurationToDays[uint8(Structures.PostDuration.OneMonth)] = 30 days;\\n\\n        validStatuses[uint8(Structures.PostStatus.Waiting)] = true;\\n    }\\n\\n    function _changeStatus(Structures.PostStatus newStatus) internal {\\n        validStatuses[uint8(post.postdata.settings.status)] = false;\\n        validStatuses[uint8(newStatus)] = true;\\n        post.postdata.settings.status = newStatus;\\n    }\\n\\n    function getStatus() external view returns (Structures.PostStatus) {\\n        return post.postdata.settings.status;\\n    }\\n\\n    function getTokenId() external view returns (Structures.Tokens) {\\n        return post.postdata.settings.tokenId;\\n    }\\n\\n    function getTokenIdAddress() public view returns (address) {\\n        if (post.postdata.settings.tokenId == Structures.Tokens.MUSE) {\\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\\n        } else if (post.postdata.settings.tokenId == Structures.Tokens.DAI) {\\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    function _checkToken(Structures.Tokens _token) internal view {\\n        require(_token == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n    }\\n\\n    function getPaymentRequested() external view returns (uint256) {\\n        return post.postdata.escrow.payment;\\n    }\\n\\n    function getStakeRequested() external view returns (uint256) {\\n        return post.postdata.escrow.stake;\\n    }\\n\\n    function postCount() external view returns (uint256) {\\n        return settings.postCount;\\n    }\\n\\n    function getEncryptedPost() external view returns (bytes memory) {\\n        return post.postdata.data.encryptedData;\\n    }\\n\\n    function getPost() external view returns (Structures.Post memory) {\\n        return post;\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xb09086cdcab6dc2790f56df6a5808c7a48794c5519ea122f927c0a0684d1f2c6\",\"license\":\"MIT\"},\"contracts/modules/Events.sol\":{\"content\":\"/**\\r\\n * @title Events\\r\\n * @dev This abstract contract defines the events related to the Mecenate platform's post lifecycle.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./Data.sol\\\";\\r\\n\\r\\nabstract contract Events is Data {\\r\\n    event Created(Structures.Post post);\\r\\n    event Accepted(Structures.Post post);\\r\\n    event Valid(Structures.Post post);\\r\\n    event Invalid(Structures.Post post);\\r\\n    event Finalized(Structures.Post post);\\r\\n    event MadePublic(Structures.Post post);\\r\\n    event Renounced(Structures.Post post);\\r\\n}\\r\\n\",\"keccak256\":\"0x3aeaf067b1f9010a2456df46fb54d4727b3a24082b1446ac9266dbcdd8c838f6\"},\"contracts/modules/Submission.sol\":{\"content\":\"/**\\n * @title Submission\\n * @dev This contract is an abstract contract that defines the functions for submitting and revealing data for a post. It inherits from the Events contract.\\n */\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"./Events.sol\\\";\\n\\nabstract contract Submission is Events {\\n    function submitHash(bytes memory encryptedKey) external virtual {\\n        require(msg.sender == post.postdata.escrow.seller, \\\"NOT_SELLER\\\");\\n\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\n        require(\\n            validStatuses[uint8(currentStatus)] &&\\n                (currentStatus == Structures.PostStatus.Accepted ||\\n                    currentStatus == Structures.PostStatus.Submitted),\\n            \\\"WRONG_STATUS\\\"\\n        );\\n\\n        require(\\n            IMecenateUsers(settings.usersModuleContract).checkifUserExist(\\n                msg.sender\\n            ),\\n            \\\"User does not exist\\\"\\n        );\\n\\n        require(post.creator.evmAddress == msg.sender, \\\"NOT_SELLER\\\");\\n\\n        _changeStatus(Structures.PostStatus.Submitted);\\n\\n        post.postdata.data.encryptedKey = encryptedKey;\\n        post.postdata.settings.status = Structures.PostStatus.Submitted;\\n        post.postdata.settings.endTimeStamp =\\n            block.timestamp +\\n            post.postdata.settings.duration;\\n\\n        emit Valid(post);\\n    }\\n\\n    function revealData(\\n        bytes memory decryptedData\\n    ) external virtual returns (bytes memory) {\\n        Structures.PostStatus currentStatus = post.postdata.settings.status;\\n        require(\\n            validStatuses[uint8(currentStatus)] &&\\n                (currentStatus == Structures.PostStatus.Submitted ||\\n                    currentStatus == Structures.PostStatus.Revealed ||\\n                    currentStatus == Structures.PostStatus.Finalized),\\n            \\\"INVALID_STATUS\\\"\\n        );\\n\\n        require(\\n            msg.sender != post.postdata.escrow.seller,\\n            \\\"YOU_ARE_THE_SELLER\\\"\\n        );\\n\\n        require(\\n            currentStatus == Structures.PostStatus.Finalized,\\n            \\\"NOT_FINALIZED\\\"\\n        );\\n\\n        post.postdata.data.decryptedData = decryptedData;\\n        post.postdata.settings.status = Structures.PostStatus.Revealed;\\n\\n        emit MadePublic(post);\\n\\n        return decryptedData;\\n    }\\n}\\n\",\"keccak256\":\"0x1fb24c1495a7bbf805edc40e95a499b96ab454e9cefff0f4f5bd8d64ec317e03\",\"license\":\"MIT\"},\"contracts/modules/Version.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/// @title Semver\\n/// @notice A simple contract for managing contract versions.\\nabstract contract Version {\\n    // Contract's major version number.\\n    uint256 private immutable _major;\\n\\n    // Contract's minor version number.\\n    uint256 private immutable _minor;\\n\\n    // Contract's patch version number.\\n    uint256 private immutable _path;\\n\\n    /// @dev Create a new Semver instance.\\n    /// @param major Major version number.\\n    /// @param minor Minor version number.\\n    /// @param patch Patch version number.\\n    constructor(uint256 major, uint256 minor, uint256 patch) {\\n        _major = major;\\n        _minor = minor;\\n        _path = patch;\\n    }\\n\\n    /// @notice Returns the full semver contract version.\\n    /// @return Semver contract version as a string.\\n    function version() external view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    Strings.toString(_major),\\n                    \\\".\\\",\\n                    Strings.toString(_minor),\\n                    \\\".\\\",\\n                    Strings.toString(_path)\\n                )\\n            );\\n    }\\n\\n    function _version() internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    Strings.toString(_major),\\n                    \\\".\\\",\\n                    Strings.toString(_minor),\\n                    \\\".\\\",\\n                    Strings.toString(_path)\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xa99614da4eb0014c2756685061352b80325a07e4cb14f7c704ec2a62e182688f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3523,"contract":"contracts/modules/Submission.sol:Submission","label":"owner","offset":0,"slot":"0","type":"t_address"},{"astId":3526,"contract":"contracts/modules/Submission.sol:Submission","label":"post","offset":0,"slot":"1","type":"t_struct(Post)2574_storage"},{"astId":3529,"contract":"contracts/modules/Submission.sol:Submission","label":"settings","offset":0,"slot":"18","type":"t_struct(FeedSettings)2550_storage"},{"astId":3533,"contract":"contracts/modules/Submission.sol:Submission","label":"postDurationToDays","offset":0,"slot":"24","type":"t_mapping(t_uint8,t_uint256)"},{"astId":3537,"contract":"contracts/modules/Submission.sol:Submission","label":"validStatuses","offset":0,"slot":"25","type":"t_mapping(t_uint8,t_bool)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_enum(PostStatus)2521":{"encoding":"inplace","label":"enum Structures.PostStatus","numberOfBytes":"1"},"t_enum(PostType)2531":{"encoding":"inplace","label":"enum Structures.PostType","numberOfBytes":"1"},"t_enum(Tokens)2525":{"encoding":"inplace","label":"enum Structures.Tokens","numberOfBytes":"1"},"t_mapping(t_uint8,t_bool)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint8,t_uint256)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(FeedSettings)2550_storage":{"encoding":"inplace","label":"struct Structures.FeedSettings","members":[{"astId":2539,"contract":"contracts/modules/Submission.sol:Submission","label":"punishmentRatio","offset":0,"slot":"0","type":"t_uint256"},{"astId":2541,"contract":"contracts/modules/Submission.sol:Submission","label":"postCount","offset":0,"slot":"1","type":"t_uint256"},{"astId":2543,"contract":"contracts/modules/Submission.sol:Submission","label":"usersModuleContract","offset":0,"slot":"2","type":"t_address"},{"astId":2545,"contract":"contracts/modules/Submission.sol:Submission","label":"factoryContract","offset":0,"slot":"3","type":"t_address"},{"astId":2547,"contract":"contracts/modules/Submission.sol:Submission","label":"router","offset":0,"slot":"4","type":"t_address"},{"astId":2549,"contract":"contracts/modules/Submission.sol:Submission","label":"version","offset":0,"slot":"5","type":"t_string_storage"}],"numberOfBytes":"192"},"t_struct(Post)2574_storage":{"encoding":"inplace","label":"struct Structures.Post","members":[{"astId":2570,"contract":"contracts/modules/Submission.sol:Submission","label":"creator","offset":0,"slot":"0","type":"t_struct(User)2627_storage"},{"astId":2573,"contract":"contracts/modules/Submission.sol:Submission","label":"postdata","offset":0,"slot":"3","type":"t_struct(PostData)2584_storage"}],"numberOfBytes":"544"},"t_struct(PostData)2584_storage":{"encoding":"inplace","label":"struct Structures.PostData","members":[{"astId":2577,"contract":"contracts/modules/Submission.sol:Submission","label":"settings","offset":0,"slot":"0","type":"t_struct(PostSettings)2607_storage"},{"astId":2580,"contract":"contracts/modules/Submission.sol:Submission","label":"escrow","offset":0,"slot":"5","type":"t_struct(PostEscrow)2620_storage"},{"astId":2583,"contract":"contracts/modules/Submission.sol:Submission","label":"data","offset":0,"slot":"11","type":"t_struct(PostEncryptedData)2591_storage"}],"numberOfBytes":"448"},"t_struct(PostEncryptedData)2591_storage":{"encoding":"inplace","label":"struct Structures.PostEncryptedData","members":[{"astId":2586,"contract":"contracts/modules/Submission.sol:Submission","label":"encryptedData","offset":0,"slot":"0","type":"t_bytes_storage"},{"astId":2588,"contract":"contracts/modules/Submission.sol:Submission","label":"encryptedKey","offset":0,"slot":"1","type":"t_bytes_storage"},{"astId":2590,"contract":"contracts/modules/Submission.sol:Submission","label":"decryptedData","offset":0,"slot":"2","type":"t_bytes_storage"}],"numberOfBytes":"96"},"t_struct(PostEscrow)2620_storage":{"encoding":"inplace","label":"struct Structures.PostEscrow","members":[{"astId":2609,"contract":"contracts/modules/Submission.sol:Submission","label":"buyer","offset":0,"slot":"0","type":"t_address"},{"astId":2611,"contract":"contracts/modules/Submission.sol:Submission","label":"seller","offset":0,"slot":"1","type":"t_address"},{"astId":2613,"contract":"contracts/modules/Submission.sol:Submission","label":"stake","offset":0,"slot":"2","type":"t_uint256"},{"astId":2615,"contract":"contracts/modules/Submission.sol:Submission","label":"payment","offset":0,"slot":"3","type":"t_uint256"},{"astId":2617,"contract":"contracts/modules/Submission.sol:Submission","label":"punishment","offset":0,"slot":"4","type":"t_uint256"},{"astId":2619,"contract":"contracts/modules/Submission.sol:Submission","label":"penalty","offset":0,"slot":"5","type":"t_uint256"}],"numberOfBytes":"192"},"t_struct(PostSettings)2607_storage":{"encoding":"inplace","label":"struct Structures.PostSettings","members":[{"astId":2594,"contract":"contracts/modules/Submission.sol:Submission","label":"status","offset":0,"slot":"0","type":"t_enum(PostStatus)2521"},{"astId":2597,"contract":"contracts/modules/Submission.sol:Submission","label":"postType","offset":1,"slot":"0","type":"t_enum(PostType)2531"},{"astId":2599,"contract":"contracts/modules/Submission.sol:Submission","label":"creationTimeStamp","offset":0,"slot":"1","type":"t_uint256"},{"astId":2601,"contract":"contracts/modules/Submission.sol:Submission","label":"endTimeStamp","offset":0,"slot":"2","type":"t_uint256"},{"astId":2603,"contract":"contracts/modules/Submission.sol:Submission","label":"duration","offset":0,"slot":"3","type":"t_uint256"},{"astId":2606,"contract":"contracts/modules/Submission.sol:Submission","label":"tokenId","offset":0,"slot":"4","type":"t_enum(Tokens)2525"}],"numberOfBytes":"160"},"t_struct(User)2627_storage":{"encoding":"inplace","label":"struct Structures.User","members":[{"astId":2622,"contract":"contracts/modules/Submission.sol:Submission","label":"evmAddress","offset":0,"slot":"0","type":"t_address"},{"astId":2624,"contract":"contracts/modules/Submission.sol:Submission","label":"sismoVaultId","offset":0,"slot":"1","type":"t_bytes_storage"},{"astId":2626,"contract":"contracts/modules/Submission.sol:Submission","label":"publicKey","offset":0,"slot":"2","type":"t_bytes_storage"}],"numberOfBytes":"96"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{"version()":{"notice":"Returns the full semver contract version."}},"version":1}}},"contracts/modules/TokenManager.sol":{"TokenManager":{"abi":[{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Accepted","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Created","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Finalized","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Invalid","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"MadePublic","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Renounced","type":"event"},{"anonymous":false,"inputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"indexed":false,"internalType":"struct Structures.Post","name":"post","type":"tuple"}],"name":"Valid","type":"event"},{"inputs":[],"name":"getEncryptedPost","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPaymentRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPost","outputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"internalType":"struct Structures.Post","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStakeRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStatus","outputs":[{"internalType":"enum Structures.PostStatus","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenId","outputs":[{"internalType":"enum Structures.Tokens","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenIdAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"post","outputs":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"postCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"version()":{"returns":{"_0":"Semver contract version as a string."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getEncryptedPost()":"729e2eb1","getPaymentRequested()":"d24e0c87","getPost()":"8c6838ba","getStakeRequested()":"faeb5e17","getStatus()":"4e69d560","getTokenId()":"010a38f5","getTokenIdAddress()":"5ad4e170","owner()":"8da5cb5b","post()":"05c1f502","postCount()":"17906c2e","version()":"54fd4d50"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Accepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Invalid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"MadePublic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Renounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structures.Post\",\"name\":\"post\",\"type\":\"tuple\"}],\"name\":\"Valid\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getEncryptedPost\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaymentRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPost\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.Post\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenIdAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"post\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"version()\":{\"returns\":{\"_0\":\"Semver contract version as a string.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"version()\":{\"notice\":\"Returns the full semver contract version.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/TokenManager.sol\":\"TokenManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/helpers/eas/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror DeadlineExpired();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/// @notice A struct representing ECDSA signature data.\\nstruct Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/// @notice A struct representing a single attestation.\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/// @notice A helper function to work with unchecked iterators in loops.\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685\",\"license\":\"MIT\"},\"contracts/helpers/eas/IEAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ISchemaRegistry} from \\\"./ISchemaRegistry.sol\\\";\\nimport {Attestation, Signature} from \\\"./Common.sol\\\";\\n\\n/// @notice A struct representing the arguments of the attestation request.\\nstruct AttestationRequestData {\\n    address recipient; // The recipient of the attestation.\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes32 refUID; // The UID of the related attestation.\\n    bytes data; // Custom attestation data.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the attestation request.\\nstruct AttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the full delegated attestation request.\\nstruct DelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n    Signature signature; // The ECDSA signature data.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi attestation request.\\nstruct MultiAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi attestation request.\\nstruct MultiDelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the arguments of the revocation request.\\nstruct RevocationRequestData {\\n    bytes32 uid; // The UID of the attestation to revoke.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the revocation request.\\nstruct RevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the arguments of the full delegated revocation request.\\nstruct DelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n    Signature signature; // The ECDSA signature data.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi revocation request.\\nstruct MultiRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi revocation request.\\nstruct MultiDelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @title IEAS\\n/// @notice EAS - Ethereum Attestation Service interface.\\ninterface IEAS {\\n    /// @notice Emitted when an attestation has been made.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param uid The UID the revoked attestation.\\n    /// @param schemaUID The UID of the schema.\\n    event Attested(\\n        address indexed recipient,\\n        address indexed attester,\\n        bytes32 uid,\\n        bytes32 indexed schemaUID\\n    );\\n\\n    /// @notice Emitted when an attestation has been revoked.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param schemaUID The UID of the schema.\\n    /// @param uid The UID the revoked attestation.\\n    event Revoked(\\n        address indexed recipient,\\n        address indexed attester,\\n        bytes32 uid,\\n        bytes32 indexed schemaUID\\n    );\\n\\n    /// @notice Emitted when a data has been timestamped.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event Timestamped(bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /// @notice Emitted when a data has been revoked.\\n    /// @param revoker The address of the revoker.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event RevokedOffchain(\\n        address indexed revoker,\\n        bytes32 indexed data,\\n        uint64 indexed timestamp\\n    );\\n\\n    /// @notice Returns the address of the global schema registry.\\n    /// @return The address of the global schema registry.\\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\\n\\n    /// @notice Attests to a specific schema.\\n    /// @param request The arguments of the attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attest({\\n    ///         schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",\\n    ///         data: {\\n    ///             recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n    ///             data: \\\"0xF00D\\\",\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function attest(\\n        AttestationRequest calldata request\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attestByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function attestByDelegation(\\n        DelegatedAttestationRequest calldata delegatedRequest\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to multiple schemas.\\n    /// @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttest([{\\n    ///         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\\n    ///             data: '0x12345678',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiAttest(\\n        MultiAttestationRequest[] calldata multiRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Attests to multiple schemas using via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\\n    ///     grouped by distinct schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttestByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiAttestByDelegation(\\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Revokes an existing attestation to a specific schema.\\n    /// @param request The arguments of the revocation request.\\n    ///\\n    /// Example:\\n    ///     revoke({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function revoke(RevocationRequest calldata request) external payable;\\n\\n    /// @notice Revokes an existing attestation to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated revocation request.\\n    ///\\n    /// Example:\\n    ///     revokeByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 27,\\n    ///             r: '0xb593...7142',\\n    ///             s: '0x0f5b...2cce'\\n    ///         },\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function revokeByDelegation(\\n        DelegatedRevocationRequest calldata delegatedRequest\\n    ) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas.\\n    /// @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevoke([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiRevoke(\\n        MultiRevocationRequest[] calldata multiRequests\\n    ) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests\\n    ///     should be grouped by distinct schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevokeByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiRevokeByDelegation(\\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\\n    ) external payable;\\n\\n    /// @notice Timestamps the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function timestamp(bytes32 data) external returns (uint64);\\n\\n    /// @notice Timestamps the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\\n\\n    /// @notice Revokes the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function revokeOffchain(bytes32 data) external returns (uint64);\\n\\n    /// @notice Revokes the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function multiRevokeOffchain(\\n        bytes32[] calldata data\\n    ) external returns (uint64);\\n\\n    /// @notice Returns an existing attestation by UID.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return The attestation data members.\\n    function getAttestation(\\n        bytes32 uid\\n    ) external view returns (Attestation memory);\\n\\n    /// @notice Checks whether an attestation exists.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return Whether an attestation exists.\\n    function isAttestationValid(bytes32 uid) external view returns (bool);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getTimestamp(bytes32 data) external view returns (uint64);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getRevokeOffchain(\\n        address revoker,\\n        bytes32 data\\n    ) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xc95cca3d90dbae3a21d0f0e28fdf38cc5a85cbd8c760b7759782b18e8f62acc2\",\"license\":\"MIT\"},\"contracts/helpers/eas/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ISchemaResolver} from \\\"./ISchemaResolver.sol\\\";\\n\\n/// @notice A struct representing a record for a submitted schema.\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\n/// @title ISchemaRegistry\\n/// @notice The interface of global attestation schemas for the Ethereum Attestation Service protocol.\\ninterface ISchemaRegistry {\\n    /// @notice Emitted when a new schema has been registered\\n    /// @param uid The schema UID.\\n    /// @param registerer The address of the account used to register the schema.\\n    /// @param schema The schema data.\\n    event Registered(\\n        bytes32 indexed uid,\\n        address indexed registerer,\\n        SchemaRecord schema\\n    );\\n\\n    /// @notice Submits and reserves a new schema\\n    /// @param schema The schema data schema.\\n    /// @param resolver An optional schema resolver.\\n    /// @param revocable Whether the schema allows revocations explicitly.\\n    /// @return The UID of the new schema.\\n    function register(\\n        string calldata schema,\\n        ISchemaResolver resolver,\\n        bool revocable\\n    ) external returns (bytes32);\\n\\n    /// @notice Returns an existing schema by UID\\n    /// @param uid The UID of the schema to retrieve.\\n    /// @return The schema data members.\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\\n\",\"keccak256\":\"0x743ddc248c97a78d34239035d1d9557a74dcaaa5b59a2aa66cea4eadabb8b2de\",\"license\":\"MIT\"},\"contracts/helpers/eas/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {Attestation} from \\\"./Common.sol\\\";\\n\\n/// @title ISchemaResolver\\n/// @notice The interface of an optional schema resolver.\\ninterface ISchemaResolver {\\n    /// @notice Checks if the resolver can be sent ETH.\\n    /// @return Whether the resolver supports ETH transfers.\\n    function isPayable() external pure returns (bool);\\n\\n    /// @notice Processes an attestation and verifies whether it's valid.\\n    /// @param attestation The new attestation.\\n    /// @return Whether the attestation is valid.\\n    function attest(\\n        Attestation calldata attestation\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes multiple attestations and verifies whether they are valid.\\n    /// @param attestations The new attestations.\\n    /// @param values Explicit ETH amounts which were sent with each attestation.\\n    /// @return Whether all the attestations are valid.\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\\n    /// @param attestation The existing attestation to be revoked.\\n    /// @return Whether the attestation can be revoked.\\n    function revoke(\\n        Attestation calldata attestation\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\\n    /// @param attestations The existing attestations to be revoked.\\n    /// @param values Explicit ETH amounts which were sent with each revocation.\\n    /// @return Whether the attestations can be revoked.\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0x97ec835833519c6c11c0fb097ea5bccd888e65f650590fdb643d937430bb4f03\",\"license\":\"MIT\"},\"contracts/interfaces/IMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\n// import IERC20 from openzeppelin\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMUSE is IERC20 {\\n    function increaseAllowance(\\n        address spender,\\n        uint256 addedValue\\n    ) external returns (bool);\\n\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 subtractedValue\\n    ) external returns (bool);\\n\\n    function mint(uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x8b0a4012a1cd0815460bb3d15278671589bb85003ff2c38315701b3f2228c633\"},\"contracts/interfaces/IMecenateFeed.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateFeed {\\n    function getPost() external view returns (Structures.Post memory);\\n\\n    function getTotalStaked() external view returns (uint256);\\n\\n    function postCount() external view returns (uint256);\\n\\n    function acceptPost(\\n        Structures.Tokens,\\n        uint256 _amount,\\n        address _funder,\\n        address _buyer\\n    ) external payable;\\n\\n    function getSellerStake() external view returns (uint256);\\n\\n    function getBuyerStake() external view returns (uint256);\\n\\n    function getPaymentRequested() external view returns (uint256);\\n\\n    function getStakeRequested() external view returns (uint256);\\n\\n    function getStatus() external view returns (Structures.PostStatus status);\\n\\n    function getTokenId() external view returns (Structures.Tokens tokenId);\\n\\n    function owner() external view returns (address);\\n\\n    function version() external view returns (string memory);\\n\\n    function getEncryptedPost() external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xe7a4b838d4f4540e4a8e3911c2afea70ebd9a2e87bd526eef13b203c2643a645\"},\"contracts/interfaces/IMecenateFeedFactory.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\ninterface IMecenateFeedFactory {\\n    function owner() external view returns (address payable);\\n\\n    function treasuryContract() external view returns (address payable);\\n\\n    function feeds() external view returns (address[] memory);\\n\\n    function contractCounter() external view returns (uint256);\\n\\n    function isFeed(address _feed) external view returns (bool);\\n\\n    function museToken() external view returns (address);\\n\\n    function wethToken() external view returns (address);\\n\\n    function daiToken() external view returns (address);\\n\\n    function router() external view returns (address);\\n\\n    function getRouterFee(uint8 tokenId) external view returns (uint24);\\n\\n    function burnEnabled() external view returns (bool);\\n\\n    function version() external view returns (string memory);\\n\\n    function easSchema() external view returns (bytes32);\\n\\n    function easContract() external view returns (address);\\n}\\n\",\"keccak256\":\"0x79da402b87332cbe8176ab1d0abd2c5369a0da30970743b86283e1a774eea776\"},\"contracts/interfaces/IMecenateTreasury.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateTreasury {\\r\\n    function globalFee() external view returns (uint256);\\r\\n\\r\\n    function fixedFee() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf544878bba8e01c837110d06eac56042957d59c593ba9083f686ef02aa9276a1\"},\"contracts/interfaces/IMecenateUsers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateUsers {\\n    function registerUser(bytes memory metadata) external;\\n\\n    function getUsers() external view returns (address[] memory);\\n\\n    function getUserCount() external view returns (uint256);\\n\\n    function getUserAt(uint256 index) external view returns (address);\\n\\n    function checkifUserExist(address userAddress) external view returns (bool);\\n\\n    function getPaginatedUsers(\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) external view returns (address[] memory);\\n\\n    function getUserMetadata(\\n        address userAddress\\n    ) external view returns (Structures.User memory);\\n\\n    function getUserPublicKey(\\n        address userAddress\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xf0ff65dbfea12d90cf106325b9478e31b284045327e5f0974db5374b8789e93c\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function withdraw(uint256) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xeb4bd6c56a346f12ec3d681183d613795c151709e834d69ef58f13fd6d7edf62\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\n * @title Structures\\n * @dev This library defines various data structures used in the Mecenate platform.\\n */\\npragma solidity 0.8.19;\\n\\nlibrary Structures {\\n    enum PostStatus {\\n        Waiting,\\n        Proposed,\\n        Accepted,\\n        Submitted,\\n        Finalized,\\n        Punished,\\n        Revealed,\\n        Renounced\\n    }\\n\\n    enum Tokens {\\n        NaN,\\n        MUSE,\\n        DAI\\n    }\\n\\n    enum PostType {\\n        Text,\\n        Image,\\n        Video,\\n        Audio,\\n        File\\n    }\\n    enum PostDuration {\\n        OneDay,\\n        ThreeDays,\\n        OneWeek,\\n        TwoWeeks,\\n        OneMonth\\n    }\\n\\n    struct FeedSettings {\\n        uint256 punishmentRatio;\\n        uint256 postCount;\\n        address usersModuleContract;\\n        address factoryContract;\\n        address router;\\n        string version;\\n    }\\n\\n    struct FactorySettings {\\n        address treasuryContract;\\n        address usersModuleContract;\\n        address easContract;\\n        bytes32 easSchema;\\n        address museToken;\\n        address daiToken;\\n        address wethToken;\\n        address router;\\n    }\\n\\n    /**\\n     * @dev Struct representing a post on the Mecenate platform.\\n     */\\n    struct Post {\\n        User creator;\\n        PostData postdata;\\n    }\\n\\n    /**\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\n     */\\n    struct PostData {\\n        PostSettings settings;\\n        PostEscrow escrow;\\n        PostEncryptedData data;\\n    }\\n\\n    /**\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\n     */\\n    struct PostEncryptedData {\\n        bytes encryptedData;\\n        bytes encryptedKey;\\n        bytes decryptedData;\\n    }\\n\\n    /**\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettings {\\n        PostStatus status;\\n        PostType postType;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n        uint256 duration;\\n        Tokens tokenId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\n     */\\n    struct PostEscrow {\\n        address buyer;\\n        address seller;\\n        uint256 stake;\\n        uint256 payment;\\n        uint256 punishment;\\n        uint256 penalty;\\n    }\\n\\n    /**\\n     * @dev Struct representing a user on the Mecenate platform.\\n     */\\n    struct User {\\n        address evmAddress;\\n        bytes sismoVaultId;\\n        bytes publicKey;\\n    }\\n\\n    /**\\n     * @dev Struct representing a feed on the Mecenate platform.\\n     */\\n    struct Feed {\\n        address contractAddress;\\n        address owner;\\n        uint256 sellerStake;\\n        uint256 buyerStake;\\n        uint256 totalStake;\\n        uint256 postCount;\\n        uint256 paymentRequested;\\n        uint256 stakeRequested;\\n        PostStatus status;\\n        Tokens tokenId;\\n        string version;\\n    }\\n\\n    /**\\n     * @dev Struct representing a bay request on the Mecenate platform.\\n     */\\n    struct BayRequest {\\n        bytes request;\\n        uint256 payment;\\n        uint256 stake;\\n        address postAddress;\\n        bool accepted;\\n        uint256 postCount;\\n        Tokens tokenId;\\n        address buyerAddress;\\n    }\\n}\\n\",\"keccak256\":\"0xab56ad7506e91048fc9c6db9fd9510c42afa61d6b11a99a273bf975643307d8f\"},\"contracts/modules/BurnDAI.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"./BurnMUSE.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"../interfaces/IWETH.sol\\\";\\n\\nabstract contract BurnDAI is BurnMUSE {\\n    using SafeMath for uint256;\\n\\n    function _burnFrom(\\n        address from,\\n        uint256 value\\n    ) internal override returns (bool success) {\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\n            .transferFrom(from, address(this), value);\\n\\n        _burn(value);\\n\\n        return true;\\n    }\\n\\n    function _burnDai(uint256 value) internal returns (bool success) {\\n        // approve uniswap for token transfer\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\n            .approve(settings.router, value);\\n\\n        // swap IMecenateFeedFactory(settings.factoryContract).daiToken() for MUSE\\n        uint256 tokens_sold = value;\\n\\n        uint256 tokens_bought = _swapTokensForToken(\\n            IMecenateFeedFactory(settings.factoryContract).daiToken(),\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\n            IMecenateFeedFactory(settings.factoryContract).getRouterFee(0),\\n            tokens_sold\\n        );\\n\\n        uint256 tokens_sold_to_muse = _swapTokensForToken(\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\n            IMecenateFeedFactory(settings.factoryContract).museToken(),\\n            IMecenateFeedFactory(settings.factoryContract).getRouterFee(1),\\n            tokens_bought\\n        );\\n\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).museToken())\\n            .approve(\\n                IMecenateFeedFactory(settings.factoryContract).museToken(),\\n                tokens_sold_to_muse\\n            );\\n\\n        // burn MUSE\\n        BurnMUSE._burn(tokens_sold_to_muse);\\n\\n        return true;\\n    }\\n\\n    function _burnWeth(uint256 value) internal returns (bool success) {\\n        // deposit IMecenateFeedFactory(settings.factoryContract).wethToken()\\n        IWETH(IMecenateFeedFactory(settings.factoryContract).wethToken())\\n            .deposit{value: value}();\\n\\n        // approve uniswap for token transfer\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).wethToken())\\n            .approve(settings.router, value);\\n\\n        // swap IMecenateFeedFactory(settings.factoryContract).wethToken() for MUSE\\n        uint256 tokens_sold = value;\\n\\n        uint256 tokens_bought = _swapTokensForToken(\\n            IMecenateFeedFactory(settings.factoryContract).wethToken(),\\n            IMecenateFeedFactory(settings.factoryContract).museToken(),\\n            IMecenateFeedFactory(settings.factoryContract).getRouterFee(1),\\n            tokens_sold\\n        );\\n\\n        IERC20(IMecenateFeedFactory(settings.factoryContract).museToken())\\n            .approve(\\n                IMecenateFeedFactory(settings.factoryContract).museToken(),\\n                tokens_bought\\n            );\\n\\n        // burn MUSE\\n        BurnMUSE._burn(tokens_bought);\\n\\n        return true;\\n    }\\n\\n    function getTokenAddress()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address token)\\n    {\\n        return IMecenateFeedFactory(settings.factoryContract).daiToken();\\n    }\\n\\n    function getExchangeAddress()\\n        internal\\n        view\\n        override\\n        returns (address exchange)\\n    {\\n        exchange = settings.router;\\n    }\\n\\n    function _swapTokensForToken(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountIn\\n    ) internal returns (uint256 amountOut) {\\n        // Check and approve allowance\\n        uint256 allowance = IERC20(tokenIn).allowance(\\n            address(this),\\n            settings.router\\n        );\\n        if (allowance < amountIn) {\\n            IERC20(tokenIn).approve(settings.router, type(uint256).max);\\n        }\\n\\n        // Prepare parameters\\n        address recipient = address(this);\\n        uint256 deadline = block.timestamp + 60; // 15 seconds from the current block timestamp\\n\\n        // Perform the swap\\n        // Refer to the Uniswap V3 documentation for details on the params.\\n        amountOut = ISwapRouter(settings.router).exactInputSingle(\\n            ISwapRouter.ExactInputSingleParams({\\n                tokenIn: tokenIn,\\n                tokenOut: tokenOut,\\n                fee: fee,\\n                recipient: recipient,\\n                deadline: deadline,\\n                amountIn: amountIn,\\n                amountOutMinimum: 0, // you may want to set a minimum here\\n                sqrtPriceLimitX96: 0\\n            })\\n        );\\n\\n        return amountOut;\\n    }\\n}\\n\",\"keccak256\":\"0xa69462e962a3be48c3514c746d791c7a870247e8e441a2d7a11b5771ec8e0d23\"},\"contracts/modules/BurnMUSE.sol\":{\"content\":\"pragma solidity 0.8.19;\\nimport \\\"../interfaces/IMUSE.sol\\\";\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\nimport \\\"./Events.sol\\\";\\n\\nabstract contract BurnMUSE is Events {\\n    function _burn(uint256 value) internal virtual returns (bool success) {\\n        IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken()).burn(\\n            value\\n        );\\n        return true;\\n    }\\n\\n    function _burnFrom(\\n        address from,\\n        uint256 value\\n    ) internal virtual returns (bool success) {\\n        IMUSE(IMecenateFeedFactory(settings.factoryContract).museToken())\\n            .transferFrom(from, address(this), value);\\n        _burn(value);\\n        return true;\\n    }\\n\\n    function getTokenAddress() internal view virtual returns (address token) {\\n        return IMecenateFeedFactory(settings.factoryContract).museToken();\\n    }\\n\\n    function getExchangeAddress()\\n        internal\\n        view\\n        virtual\\n        returns (address exchange)\\n    {\\n        exchange = IMecenateFeedFactory(settings.factoryContract).router();\\n    }\\n}\\n\",\"keccak256\":\"0x052049c27f8e98f27fd3d237157e4700d5f5c313343d1cd734614beefa4ccfc6\"},\"contracts/modules/Data.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../interfaces/IMecenateFeed.sol\\\";\\nimport \\\"../interfaces/IMecenateUsers.sol\\\";\\nimport \\\"../interfaces/IMecenateTreasury.sol\\\";\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\nimport \\\"../helpers/eas/IEAS.sol\\\";\\nimport \\\"./Version.sol\\\";\\n\\n/**\\n * @title Data\\n * @dev This contract stores data related to Mecenate posts and provides functions to interact with it.\\n */\\ncontract Data is Version {\\n    bytes internal constant ZEROHASH = \\\"0x00\\\";\\n\\n    address public owner;\\n\\n    Structures.Post public post;\\n\\n    Structures.FeedSettings internal settings;\\n\\n    mapping(uint8 => uint256) internal postDurationToDays;\\n\\n    mapping(uint8 => bool) internal validStatuses;\\n\\n    constructor(\\n        address usersModuleContract,\\n        address factoryContract,\\n        uint256 _major,\\n        uint256 _minor,\\n        uint256 _patch\\n    ) Version(_major, _minor, _patch) {\\n        settings.punishmentRatio = 100000000000000000; // Constant value\\n        settings.postCount = 0; // Initialize postCount to 0\\n        settings.usersModuleContract = usersModuleContract;\\n        settings.factoryContract = msg.sender;\\n        settings.router = IMecenateFeedFactory(factoryContract).router();\\n        settings.version = _version();\\n\\n        post.postdata.settings.status = Structures.PostStatus.Waiting;\\n\\n        postDurationToDays[uint8(Structures.PostDuration.OneDay)] = 1 days;\\n        postDurationToDays[uint8(Structures.PostDuration.ThreeDays)] = 3 days;\\n        postDurationToDays[uint8(Structures.PostDuration.OneWeek)] = 7 days;\\n        postDurationToDays[uint8(Structures.PostDuration.TwoWeeks)] = 14 days;\\n        postDurationToDays[uint8(Structures.PostDuration.OneMonth)] = 30 days;\\n\\n        validStatuses[uint8(Structures.PostStatus.Waiting)] = true;\\n    }\\n\\n    function _changeStatus(Structures.PostStatus newStatus) internal {\\n        validStatuses[uint8(post.postdata.settings.status)] = false;\\n        validStatuses[uint8(newStatus)] = true;\\n        post.postdata.settings.status = newStatus;\\n    }\\n\\n    function getStatus() external view returns (Structures.PostStatus) {\\n        return post.postdata.settings.status;\\n    }\\n\\n    function getTokenId() external view returns (Structures.Tokens) {\\n        return post.postdata.settings.tokenId;\\n    }\\n\\n    function getTokenIdAddress() public view returns (address) {\\n        if (post.postdata.settings.tokenId == Structures.Tokens.MUSE) {\\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\\n        } else if (post.postdata.settings.tokenId == Structures.Tokens.DAI) {\\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    function _checkToken(Structures.Tokens _token) internal view {\\n        require(_token == post.postdata.settings.tokenId, \\\"WRONG_TOKEN\\\");\\n    }\\n\\n    function getPaymentRequested() external view returns (uint256) {\\n        return post.postdata.escrow.payment;\\n    }\\n\\n    function getStakeRequested() external view returns (uint256) {\\n        return post.postdata.escrow.stake;\\n    }\\n\\n    function postCount() external view returns (uint256) {\\n        return settings.postCount;\\n    }\\n\\n    function getEncryptedPost() external view returns (bytes memory) {\\n        return post.postdata.data.encryptedData;\\n    }\\n\\n    function getPost() external view returns (Structures.Post memory) {\\n        return post;\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xb09086cdcab6dc2790f56df6a5808c7a48794c5519ea122f927c0a0684d1f2c6\",\"license\":\"MIT\"},\"contracts/modules/Events.sol\":{\"content\":\"/**\\r\\n * @title Events\\r\\n * @dev This abstract contract defines the events related to the Mecenate platform's post lifecycle.\\r\\n */\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./Data.sol\\\";\\r\\n\\r\\nabstract contract Events is Data {\\r\\n    event Created(Structures.Post post);\\r\\n    event Accepted(Structures.Post post);\\r\\n    event Valid(Structures.Post post);\\r\\n    event Invalid(Structures.Post post);\\r\\n    event Finalized(Structures.Post post);\\r\\n    event MadePublic(Structures.Post post);\\r\\n    event Renounced(Structures.Post post);\\r\\n}\\r\\n\",\"keccak256\":\"0x3aeaf067b1f9010a2456df46fb54d4727b3a24082b1446ac9266dbcdd8c838f6\"},\"contracts/modules/TokenManager.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"./BurnDAI.sol\\\";\\n\\nabstract contract TokenManager is BurnDAI {\\n    function _getTokenAddress(\\n        Structures.Tokens tokenID\\n    ) internal view returns (address) {\\n        if (tokenID == Structures.Tokens.DAI)\\n            return IMecenateFeedFactory(settings.factoryContract).daiToken();\\n        if (tokenID == Structures.Tokens.MUSE)\\n            return IMecenateFeedFactory(settings.factoryContract).museToken();\\n        return address(0);\\n    }\\n\\n    function _checkAllowance(\\n        Structures.Tokens tokenID,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal view {\\n        address tokenAddress = _getTokenAddress(tokenID);\\n        require(\\n            IERC20(tokenAddress).allowance(from, to) >= value,\\n            \\\"INSUFFICIENT_ALLOWANCE\\\"\\n        );\\n    }\\n\\n    modifier onlyValidTokenID(Structures.Tokens tokenID) {\\n        require(\\n            tokenID == Structures.Tokens.MUSE ||\\n                tokenID == Structures.Tokens.DAI ||\\n                tokenID == Structures.Tokens.NaN,\\n            \\\"WRONG_TOKEN\\\"\\n        );\\n        _;\\n    }\\n\\n    function isValidTokenID(\\n        Structures.Tokens tokenID\\n    ) internal pure returns (bool validity) {\\n        return\\n            tokenID == Structures.Tokens.MUSE ||\\n            tokenID == Structures.Tokens.DAI;\\n    }\\n\\n    function _transfer(\\n        Structures.Tokens tokenID,\\n        address to,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        require(\\n            IERC20(_getTokenAddress(tokenID)).transfer(to, value),\\n            \\\"TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function _transferFrom(\\n        Structures.Tokens tokenID,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        address tokenAddress = _getTokenAddress(tokenID);\\n        _checkAllowance(tokenID, from, to, value);\\n        require(\\n            IERC20(tokenAddress).transferFrom(from, to, value),\\n            \\\"TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function _burn(\\n        Structures.Tokens tokenID,\\n        address _receiver,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) returns (bool success) {\\n        bool burnEnabled = IMecenateFeedFactory(settings.factoryContract)\\n            .burnEnabled();\\n\\n        if (burnEnabled == false) {\\n            if (tokenID == Structures.Tokens.NaN) {\\n                (bool result, ) = payable(_receiver).call{value: value}(\\\"\\\");\\n                require(result, \\\"CALL_FAILED\\\");\\n            } else {\\n                TokenManager._transfer(tokenID, _receiver, value);\\n            }\\n        } else {\\n            if (tokenID == Structures.Tokens.DAI) {\\n                _burnDai(value);\\n            } else if (tokenID == Structures.Tokens.MUSE) {\\n                _burn(value);\\n            } else if (tokenID == Structures.Tokens.NaN) {\\n                _burnWeth(value);\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    function _burnFrom(\\n        Structures.Tokens tokenID,\\n        address from,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        address treasury = IMecenateFeedFactory(settings.factoryContract)\\n            .treasuryContract();\\n\\n        if (tokenID == Structures.Tokens.DAI) {\\n            IERC20(IMecenateFeedFactory(settings.factoryContract).daiToken())\\n                .transferFrom(from, treasury, value);\\n        } else if (tokenID == Structures.Tokens.MUSE) {\\n            BurnMUSE._burnFrom(from, value);\\n        }\\n    }\\n\\n    function _approve(\\n        Structures.Tokens tokenID,\\n        address spender,\\n        uint256 value\\n    ) internal onlyValidTokenID(tokenID) {\\n        if (tokenID == Structures.Tokens.DAI) {\\n            require(\\n                IERC20(\\n                    IMecenateFeedFactory(settings.factoryContract).daiToken()\\n                ).approve(spender, value),\\n                \\\"APPROVE_FAILED\\\"\\n            );\\n        } else if (tokenID == Structures.Tokens.MUSE) {\\n            uint256 currentAllowance = IMUSE(\\n                IMecenateFeedFactory(settings.factoryContract).museToken()\\n            ).allowance(msg.sender, spender);\\n\\n            uint256 newAllowance = currentAllowance + value;\\n            require(\\n                IMUSE(IMecenateFeedFactory(settings.factoryContract).daiToken())\\n                    .increaseAllowance(spender, newAllowance),\\n                \\\"APPROVE_FAILED\\\"\\n            );\\n        }\\n    }\\n\\n    function totalSupply(\\n        Structures.Tokens tokenID\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).totalSupply();\\n    }\\n\\n    function balanceOf(\\n        Structures.Tokens tokenID,\\n        address who\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).balanceOf(who);\\n    }\\n\\n    function allowance(\\n        Structures.Tokens tokenID,\\n        address owner,\\n        address spender\\n    ) internal view onlyValidTokenID(tokenID) returns (uint256 value) {\\n        return IERC20(_getTokenAddress(tokenID)).allowance(owner, spender);\\n    }\\n}\\n\",\"keccak256\":\"0x8eded6283ea4effbe4861c36f73afaace086765ac8d26ef695ac8855ed15e8b1\"},\"contracts/modules/Version.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/// @title Semver\\n/// @notice A simple contract for managing contract versions.\\nabstract contract Version {\\n    // Contract's major version number.\\n    uint256 private immutable _major;\\n\\n    // Contract's minor version number.\\n    uint256 private immutable _minor;\\n\\n    // Contract's patch version number.\\n    uint256 private immutable _path;\\n\\n    /// @dev Create a new Semver instance.\\n    /// @param major Major version number.\\n    /// @param minor Minor version number.\\n    /// @param patch Patch version number.\\n    constructor(uint256 major, uint256 minor, uint256 patch) {\\n        _major = major;\\n        _minor = minor;\\n        _path = patch;\\n    }\\n\\n    /// @notice Returns the full semver contract version.\\n    /// @return Semver contract version as a string.\\n    function version() external view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    Strings.toString(_major),\\n                    \\\".\\\",\\n                    Strings.toString(_minor),\\n                    \\\".\\\",\\n                    Strings.toString(_path)\\n                )\\n            );\\n    }\\n\\n    function _version() internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    Strings.toString(_major),\\n                    \\\".\\\",\\n                    Strings.toString(_minor),\\n                    \\\".\\\",\\n                    Strings.toString(_path)\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xa99614da4eb0014c2756685061352b80325a07e4cb14f7c704ec2a62e182688f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3523,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"owner","offset":0,"slot":"0","type":"t_address"},{"astId":3526,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"post","offset":0,"slot":"1","type":"t_struct(Post)2574_storage"},{"astId":3529,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"settings","offset":0,"slot":"18","type":"t_struct(FeedSettings)2550_storage"},{"astId":3533,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"postDurationToDays","offset":0,"slot":"24","type":"t_mapping(t_uint8,t_uint256)"},{"astId":3537,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"validStatuses","offset":0,"slot":"25","type":"t_mapping(t_uint8,t_bool)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_enum(PostStatus)2521":{"encoding":"inplace","label":"enum Structures.PostStatus","numberOfBytes":"1"},"t_enum(PostType)2531":{"encoding":"inplace","label":"enum Structures.PostType","numberOfBytes":"1"},"t_enum(Tokens)2525":{"encoding":"inplace","label":"enum Structures.Tokens","numberOfBytes":"1"},"t_mapping(t_uint8,t_bool)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint8,t_uint256)":{"encoding":"mapping","key":"t_uint8","label":"mapping(uint8 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(FeedSettings)2550_storage":{"encoding":"inplace","label":"struct Structures.FeedSettings","members":[{"astId":2539,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"punishmentRatio","offset":0,"slot":"0","type":"t_uint256"},{"astId":2541,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"postCount","offset":0,"slot":"1","type":"t_uint256"},{"astId":2543,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"usersModuleContract","offset":0,"slot":"2","type":"t_address"},{"astId":2545,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"factoryContract","offset":0,"slot":"3","type":"t_address"},{"astId":2547,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"router","offset":0,"slot":"4","type":"t_address"},{"astId":2549,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"version","offset":0,"slot":"5","type":"t_string_storage"}],"numberOfBytes":"192"},"t_struct(Post)2574_storage":{"encoding":"inplace","label":"struct Structures.Post","members":[{"astId":2570,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"creator","offset":0,"slot":"0","type":"t_struct(User)2627_storage"},{"astId":2573,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"postdata","offset":0,"slot":"3","type":"t_struct(PostData)2584_storage"}],"numberOfBytes":"544"},"t_struct(PostData)2584_storage":{"encoding":"inplace","label":"struct Structures.PostData","members":[{"astId":2577,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"settings","offset":0,"slot":"0","type":"t_struct(PostSettings)2607_storage"},{"astId":2580,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"escrow","offset":0,"slot":"5","type":"t_struct(PostEscrow)2620_storage"},{"astId":2583,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"data","offset":0,"slot":"11","type":"t_struct(PostEncryptedData)2591_storage"}],"numberOfBytes":"448"},"t_struct(PostEncryptedData)2591_storage":{"encoding":"inplace","label":"struct Structures.PostEncryptedData","members":[{"astId":2586,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"encryptedData","offset":0,"slot":"0","type":"t_bytes_storage"},{"astId":2588,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"encryptedKey","offset":0,"slot":"1","type":"t_bytes_storage"},{"astId":2590,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"decryptedData","offset":0,"slot":"2","type":"t_bytes_storage"}],"numberOfBytes":"96"},"t_struct(PostEscrow)2620_storage":{"encoding":"inplace","label":"struct Structures.PostEscrow","members":[{"astId":2609,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"buyer","offset":0,"slot":"0","type":"t_address"},{"astId":2611,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"seller","offset":0,"slot":"1","type":"t_address"},{"astId":2613,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"stake","offset":0,"slot":"2","type":"t_uint256"},{"astId":2615,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"payment","offset":0,"slot":"3","type":"t_uint256"},{"astId":2617,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"punishment","offset":0,"slot":"4","type":"t_uint256"},{"astId":2619,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"penalty","offset":0,"slot":"5","type":"t_uint256"}],"numberOfBytes":"192"},"t_struct(PostSettings)2607_storage":{"encoding":"inplace","label":"struct Structures.PostSettings","members":[{"astId":2594,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"status","offset":0,"slot":"0","type":"t_enum(PostStatus)2521"},{"astId":2597,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"postType","offset":1,"slot":"0","type":"t_enum(PostType)2531"},{"astId":2599,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"creationTimeStamp","offset":0,"slot":"1","type":"t_uint256"},{"astId":2601,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"endTimeStamp","offset":0,"slot":"2","type":"t_uint256"},{"astId":2603,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"duration","offset":0,"slot":"3","type":"t_uint256"},{"astId":2606,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"tokenId","offset":0,"slot":"4","type":"t_enum(Tokens)2525"}],"numberOfBytes":"160"},"t_struct(User)2627_storage":{"encoding":"inplace","label":"struct Structures.User","members":[{"astId":2622,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"evmAddress","offset":0,"slot":"0","type":"t_address"},{"astId":2624,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"sismoVaultId","offset":0,"slot":"1","type":"t_bytes_storage"},{"astId":2626,"contract":"contracts/modules/TokenManager.sol:TokenManager","label":"publicKey","offset":0,"slot":"2","type":"t_bytes_storage"}],"numberOfBytes":"96"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{"version()":{"notice":"Returns the full semver contract version."}},"version":1}}},"contracts/modules/Version.sol":{"Version":{"abi":[{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"constructor":{"details":"Create a new Semver instance.","params":{"major":"Major version number.","minor":"Minor version number.","patch":"Patch version number."}},"version()":{"returns":{"_0":"Semver contract version as a string."}}},"title":"Semver","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"version()":"54fd4d50"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Create a new Semver instance.\",\"params\":{\"major\":\"Major version number.\",\"minor\":\"Minor version number.\",\"patch\":\"Patch version number.\"}},\"version()\":{\"returns\":{\"_0\":\"Semver contract version as a string.\"}}},\"title\":\"Semver\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"version()\":{\"notice\":\"Returns the full semver contract version.\"}},\"notice\":\"A simple contract for managing contract versions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/Version.sol\":\"Version\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/modules/Version.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/// @title Semver\\n/// @notice A simple contract for managing contract versions.\\nabstract contract Version {\\n    // Contract's major version number.\\n    uint256 private immutable _major;\\n\\n    // Contract's minor version number.\\n    uint256 private immutable _minor;\\n\\n    // Contract's patch version number.\\n    uint256 private immutable _path;\\n\\n    /// @dev Create a new Semver instance.\\n    /// @param major Major version number.\\n    /// @param minor Minor version number.\\n    /// @param patch Patch version number.\\n    constructor(uint256 major, uint256 minor, uint256 patch) {\\n        _major = major;\\n        _minor = minor;\\n        _path = patch;\\n    }\\n\\n    /// @notice Returns the full semver contract version.\\n    /// @return Semver contract version as a string.\\n    function version() external view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    Strings.toString(_major),\\n                    \\\".\\\",\\n                    Strings.toString(_minor),\\n                    \\\".\\\",\\n                    Strings.toString(_path)\\n                )\\n            );\\n    }\\n\\n    function _version() internal view returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    Strings.toString(_major),\\n                    \\\".\\\",\\n                    Strings.toString(_minor),\\n                    \\\".\\\",\\n                    Strings.toString(_path)\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xa99614da4eb0014c2756685061352b80325a07e4cb14f7c704ec2a62e182688f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"version()":{"notice":"Returns the full semver contract version."}},"notice":"A simple contract for managing contract versions.","version":1}}},"contracts/stats/MecenateStats.sol":{"MecenateStats":{"abi":[{"inputs":[{"internalType":"address","name":"mecenateUsersAddress","type":"address"},{"internalType":"address","name":"mecenateFeedFactoryAddress","type":"address"},{"internalType":"address","name":"mecenateBayAddress","type":"address"},{"internalType":"address","name":"mecenateTreasuryAddress","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"getStats","outputs":[{"components":[{"internalType":"uint256","name":"totalUsers","type":"uint256"},{"internalType":"uint256","name":"totalBayRequests","type":"uint256"},{"internalType":"uint256","name":"totalFeeds","type":"uint256"},{"internalType":"uint256","name":"globalFee","type":"uint256"},{"internalType":"uint256","name":"fixedFee","type":"uint256"},{"internalType":"uint256","name":"treasuryBalance","type":"uint256"}],"internalType":"struct MecenateStats.Stats","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"mecenateBay","outputs":[{"internalType":"contract IMecenateBay","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"mecenateFeedFactory","outputs":[{"internalType":"contract IMecenateFeedFactory","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"mecenateTreasury","outputs":[{"internalType":"contract IMecenateTreasury","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"mecenateUsers","outputs":[{"internalType":"contract IMecenateUsers","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{"abi_decode_address_fromMemory":{"entryPoint":212,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[],"linkReferences":{},"object":"6080346100b957601f6104eb38819003918201601f19168301916001600160401b038311848410176100be578084926080946040528339810103126100b957610047816100d4565b90610054602082016100d4565b61006c6060610065604085016100d4565b93016100d4565b9060018060a01b03928380928160018060a01b0319971687600054161760005516856001541617600155168360025416176002551690600354161760035560405161040290816100e98239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036100b95756fe6080604081815260048036101561001557600080fd5b600092833560e01c908163139e3c541461035457508063295b7b9a1461032b5780633f16a3bb1461030257806377260151146102d55763c59d48471461005a57600080fd5b346102d157826003193601126102d157815161007581610378565b8381528360a060209282848201528286820152826060820152826080820152015260018060a01b03908160025416938051928284868163019ef4ed60e21b998a82525afa9384156102985787946102a2575b50828160015416968684518099819382525afa9081156102985785968896959692610262575b50838189541684519889809263b5cb15f760e01b82525afa968715610258578897610225575b506003548351634047e10360e11b815294911681858781845afa9485156101ec5789956101f6575b5081845180976391792d5b60e01b825281845afa9586156101ec5789966101b5575b5060c09850319560a0845161017181610378565b8981528381019283528581019485526060810196875260808101978852019687528351978852519087015251908501525160608401525160808301525160a0820152f35b9095508181813d83116101e5575b6101cd81836103aa565b810103126101e15760c0985051943861015d565b8880fd5b503d6101c3565b84513d8b823e3d90fd5b9094508181813d831161021e575b61020e81836103aa565b810103126101e15751933861013b565b503d610204565b9096508381813d8311610251575b61023d81836103aa565b8101031261024d57519538610113565b8780fd5b503d610233565b83513d8a823e3d90fd5b945090508284813d8111610291575b61027b81836103aa565b8101031261028d5785935190386100ed565b8680fd5b503d610271565b82513d89823e3d90fd5b9093508281813d83116102ca575b6102ba81836103aa565b8101031261028d575192386100c7565b503d6102b0565b8280fd5b5050346102fe57816003193601126102fe5760015490516001600160a01b039091168152602090f35b5080fd5b5050346102fe57816003193601126102fe5760025490516001600160a01b039091168152602090f35b5050346102fe57816003193601126102fe5760035490516001600160a01b039091168152602090f35b8490346102fe57816003193601126102fe5790546001600160a01b03168152602090f35b60c0810190811067ffffffffffffffff82111761039457604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176103945760405256fea2646970667358221220c7d085faec6fa10f0f4b436adb3e21cff38bf80323b1e21f705be0047d9fdb9364736f6c63430008130033","opcodes":"PUSH1 0x80 CALLVALUE PUSH2 0xB9 JUMPI PUSH1 0x1F PUSH2 0x4EB CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT DUP5 DUP5 LT OR PUSH2 0xBE JUMPI DUP1 DUP5 SWAP3 PUSH1 0x80 SWAP5 PUSH1 0x40 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH2 0xB9 JUMPI PUSH2 0x47 DUP2 PUSH2 0xD4 JUMP JUMPDEST SWAP1 PUSH2 0x54 PUSH1 0x20 DUP3 ADD PUSH2 0xD4 JUMP JUMPDEST PUSH2 0x6C PUSH1 0x60 PUSH2 0x65 PUSH1 0x40 DUP6 ADD PUSH2 0xD4 JUMP JUMPDEST SWAP4 ADD PUSH2 0xD4 JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 DUP1 SWAP3 DUP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB NOT SWAP8 AND DUP8 PUSH1 0x0 SLOAD AND OR PUSH1 0x0 SSTORE AND DUP6 PUSH1 0x1 SLOAD AND OR PUSH1 0x1 SSTORE AND DUP4 PUSH1 0x2 SLOAD AND OR PUSH1 0x2 SSTORE AND SWAP1 PUSH1 0x3 SLOAD AND OR PUSH1 0x3 SSTORE PUSH1 0x40 MLOAD PUSH2 0x402 SWAP1 DUP2 PUSH2 0xE9 DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xB9 JUMPI JUMP INVALID PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH1 0x4 DUP1 CALLDATASIZE LT ISZERO PUSH2 0x15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 DUP4 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x139E3C54 EQ PUSH2 0x354 JUMPI POP DUP1 PUSH4 0x295B7B9A EQ PUSH2 0x32B JUMPI DUP1 PUSH4 0x3F16A3BB EQ PUSH2 0x302 JUMPI DUP1 PUSH4 0x77260151 EQ PUSH2 0x2D5 JUMPI PUSH4 0xC59D4847 EQ PUSH2 0x5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x2D1 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2D1 JUMPI DUP2 MLOAD PUSH2 0x75 DUP2 PUSH2 0x378 JUMP JUMPDEST DUP4 DUP2 MSTORE DUP4 PUSH1 0xA0 PUSH1 0x20 SWAP3 DUP3 DUP5 DUP3 ADD MSTORE DUP3 DUP7 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE DUP3 PUSH1 0x80 DUP3 ADD MSTORE ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 PUSH1 0x2 SLOAD AND SWAP4 DUP1 MLOAD SWAP3 DUP3 DUP5 DUP7 DUP2 PUSH4 0x19EF4ED PUSH1 0xE2 SHL SWAP10 DUP11 DUP3 MSTORE GAS STATICCALL SWAP4 DUP5 ISZERO PUSH2 0x298 JUMPI DUP8 SWAP5 PUSH2 0x2A2 JUMPI JUMPDEST POP DUP3 DUP2 PUSH1 0x1 SLOAD AND SWAP7 DUP7 DUP5 MLOAD DUP1 SWAP10 DUP2 SWAP4 DUP3 MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x298 JUMPI DUP6 SWAP7 DUP9 SWAP7 SWAP6 SWAP7 SWAP3 PUSH2 0x262 JUMPI JUMPDEST POP DUP4 DUP2 DUP10 SLOAD AND DUP5 MLOAD SWAP9 DUP10 DUP1 SWAP3 PUSH4 0xB5CB15F7 PUSH1 0xE0 SHL DUP3 MSTORE GAS STATICCALL SWAP7 DUP8 ISZERO PUSH2 0x258 JUMPI DUP9 SWAP8 PUSH2 0x225 JUMPI JUMPDEST POP PUSH1 0x3 SLOAD DUP4 MLOAD PUSH4 0x4047E103 PUSH1 0xE1 SHL DUP2 MSTORE SWAP5 SWAP2 AND DUP2 DUP6 DUP8 DUP2 DUP5 GAS STATICCALL SWAP5 DUP6 ISZERO PUSH2 0x1EC JUMPI DUP10 SWAP6 PUSH2 0x1F6 JUMPI JUMPDEST POP DUP2 DUP5 MLOAD DUP1 SWAP8 PUSH4 0x91792D5B PUSH1 0xE0 SHL DUP3 MSTORE DUP2 DUP5 GAS STATICCALL SWAP6 DUP7 ISZERO PUSH2 0x1EC JUMPI DUP10 SWAP7 PUSH2 0x1B5 JUMPI JUMPDEST POP PUSH1 0xC0 SWAP9 POP BALANCE SWAP6 PUSH1 0xA0 DUP5 MLOAD PUSH2 0x171 DUP2 PUSH2 0x378 JUMP JUMPDEST DUP10 DUP2 MSTORE DUP4 DUP2 ADD SWAP3 DUP4 MSTORE DUP6 DUP2 ADD SWAP5 DUP6 MSTORE PUSH1 0x60 DUP2 ADD SWAP7 DUP8 MSTORE PUSH1 0x80 DUP2 ADD SWAP8 DUP9 MSTORE ADD SWAP7 DUP8 MSTORE DUP4 MLOAD SWAP8 DUP9 MSTORE MLOAD SWAP1 DUP8 ADD MSTORE MLOAD SWAP1 DUP6 ADD MSTORE MLOAD PUSH1 0x60 DUP5 ADD MSTORE MLOAD PUSH1 0x80 DUP4 ADD MSTORE MLOAD PUSH1 0xA0 DUP3 ADD MSTORE RETURN JUMPDEST SWAP1 SWAP6 POP DUP2 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x1E5 JUMPI JUMPDEST PUSH2 0x1CD DUP2 DUP4 PUSH2 0x3AA JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x1E1 JUMPI PUSH1 0xC0 SWAP9 POP MLOAD SWAP5 CODESIZE PUSH2 0x15D JUMP JUMPDEST DUP9 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x1C3 JUMP JUMPDEST DUP5 MLOAD RETURNDATASIZE DUP12 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 SWAP5 POP DUP2 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x21E JUMPI JUMPDEST PUSH2 0x20E DUP2 DUP4 PUSH2 0x3AA JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x1E1 JUMPI MLOAD SWAP4 CODESIZE PUSH2 0x13B JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x204 JUMP JUMPDEST SWAP1 SWAP7 POP DUP4 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x251 JUMPI JUMPDEST PUSH2 0x23D DUP2 DUP4 PUSH2 0x3AA JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x24D JUMPI MLOAD SWAP6 CODESIZE PUSH2 0x113 JUMP JUMPDEST DUP8 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x233 JUMP JUMPDEST DUP4 MLOAD RETURNDATASIZE DUP11 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP5 POP SWAP1 POP DUP3 DUP5 DUP2 RETURNDATASIZE DUP2 GT PUSH2 0x291 JUMPI JUMPDEST PUSH2 0x27B DUP2 DUP4 PUSH2 0x3AA JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x28D JUMPI DUP6 SWAP4 MLOAD SWAP1 CODESIZE PUSH2 0xED JUMP JUMPDEST DUP7 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x271 JUMP JUMPDEST DUP3 MLOAD RETURNDATASIZE DUP10 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 SWAP4 POP DUP3 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x2CA JUMPI JUMPDEST PUSH2 0x2BA DUP2 DUP4 PUSH2 0x3AA JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x28D JUMPI MLOAD SWAP3 CODESIZE PUSH2 0xC7 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x2B0 JUMP JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x2FE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2FE JUMPI PUSH1 0x1 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x2FE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2FE JUMPI PUSH1 0x2 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x2FE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2FE JUMPI PUSH1 0x3 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP5 SWAP1 CALLVALUE PUSH2 0x2FE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2FE JUMPI SWAP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST PUSH1 0xC0 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x394 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x394 JUMPI PUSH1 0x40 MSTORE JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC7 0xD0 DUP6 STATICCALL 0xEC PUSH16 0xA10F0F4B436ADB3E21CFF38BF80323B1 0xE2 0x1F PUSH17 0x5BE0047D9FDB9364736F6C634300081300 CALLER ","sourceMap":"411:1366:33:-:0;;;;;;;;;;;;;-1:-1:-1;;411:1366:33;;;;-1:-1:-1;;;;;411:1366:33;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;411:1366:33;;;-1:-1:-1;411:1366:33;;;;;;;;;;;1150:46;411:1366;;;1150:46;411:1366;;;1206:61;411:1366;;;1206:61;411:1366;;;;;;;;;;;-1:-1:-1;411:1366:33;;;;;;-1:-1:-1;411:1366:33;;;;;-1:-1:-1;411:1366:33;;;;-1:-1:-1;;;;;411:1366:33;;;;;;:::o"},"deployedBytecode":{"functionDebugData":{"finalize_allocation":{"entryPoint":938,"id":null,"parameterSlots":2,"returnSlots":0},"finalize_allocation_2234":{"entryPoint":888,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604081815260048036101561001557600080fd5b600092833560e01c908163139e3c541461035457508063295b7b9a1461032b5780633f16a3bb1461030257806377260151146102d55763c59d48471461005a57600080fd5b346102d157826003193601126102d157815161007581610378565b8381528360a060209282848201528286820152826060820152826080820152015260018060a01b03908160025416938051928284868163019ef4ed60e21b998a82525afa9384156102985787946102a2575b50828160015416968684518099819382525afa9081156102985785968896959692610262575b50838189541684519889809263b5cb15f760e01b82525afa968715610258578897610225575b506003548351634047e10360e11b815294911681858781845afa9485156101ec5789956101f6575b5081845180976391792d5b60e01b825281845afa9586156101ec5789966101b5575b5060c09850319560a0845161017181610378565b8981528381019283528581019485526060810196875260808101978852019687528351978852519087015251908501525160608401525160808301525160a0820152f35b9095508181813d83116101e5575b6101cd81836103aa565b810103126101e15760c0985051943861015d565b8880fd5b503d6101c3565b84513d8b823e3d90fd5b9094508181813d831161021e575b61020e81836103aa565b810103126101e15751933861013b565b503d610204565b9096508381813d8311610251575b61023d81836103aa565b8101031261024d57519538610113565b8780fd5b503d610233565b83513d8a823e3d90fd5b945090508284813d8111610291575b61027b81836103aa565b8101031261028d5785935190386100ed565b8680fd5b503d610271565b82513d89823e3d90fd5b9093508281813d83116102ca575b6102ba81836103aa565b8101031261028d575192386100c7565b503d6102b0565b8280fd5b5050346102fe57816003193601126102fe5760015490516001600160a01b039091168152602090f35b5080fd5b5050346102fe57816003193601126102fe5760025490516001600160a01b039091168152602090f35b5050346102fe57816003193601126102fe5760035490516001600160a01b039091168152602090f35b8490346102fe57816003193601126102fe5790546001600160a01b03168152602090f35b60c0810190811067ffffffffffffffff82111761039457604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176103945760405256fea2646970667358221220c7d085faec6fa10f0f4b436adb3e21cff38bf80323b1e21f705be0047d9fdb9364736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH1 0x4 DUP1 CALLDATASIZE LT ISZERO PUSH2 0x15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 DUP4 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x139E3C54 EQ PUSH2 0x354 JUMPI POP DUP1 PUSH4 0x295B7B9A EQ PUSH2 0x32B JUMPI DUP1 PUSH4 0x3F16A3BB EQ PUSH2 0x302 JUMPI DUP1 PUSH4 0x77260151 EQ PUSH2 0x2D5 JUMPI PUSH4 0xC59D4847 EQ PUSH2 0x5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x2D1 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2D1 JUMPI DUP2 MLOAD PUSH2 0x75 DUP2 PUSH2 0x378 JUMP JUMPDEST DUP4 DUP2 MSTORE DUP4 PUSH1 0xA0 PUSH1 0x20 SWAP3 DUP3 DUP5 DUP3 ADD MSTORE DUP3 DUP7 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE DUP3 PUSH1 0x80 DUP3 ADD MSTORE ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 PUSH1 0x2 SLOAD AND SWAP4 DUP1 MLOAD SWAP3 DUP3 DUP5 DUP7 DUP2 PUSH4 0x19EF4ED PUSH1 0xE2 SHL SWAP10 DUP11 DUP3 MSTORE GAS STATICCALL SWAP4 DUP5 ISZERO PUSH2 0x298 JUMPI DUP8 SWAP5 PUSH2 0x2A2 JUMPI JUMPDEST POP DUP3 DUP2 PUSH1 0x1 SLOAD AND SWAP7 DUP7 DUP5 MLOAD DUP1 SWAP10 DUP2 SWAP4 DUP3 MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x298 JUMPI DUP6 SWAP7 DUP9 SWAP7 SWAP6 SWAP7 SWAP3 PUSH2 0x262 JUMPI JUMPDEST POP DUP4 DUP2 DUP10 SLOAD AND DUP5 MLOAD SWAP9 DUP10 DUP1 SWAP3 PUSH4 0xB5CB15F7 PUSH1 0xE0 SHL DUP3 MSTORE GAS STATICCALL SWAP7 DUP8 ISZERO PUSH2 0x258 JUMPI DUP9 SWAP8 PUSH2 0x225 JUMPI JUMPDEST POP PUSH1 0x3 SLOAD DUP4 MLOAD PUSH4 0x4047E103 PUSH1 0xE1 SHL DUP2 MSTORE SWAP5 SWAP2 AND DUP2 DUP6 DUP8 DUP2 DUP5 GAS STATICCALL SWAP5 DUP6 ISZERO PUSH2 0x1EC JUMPI DUP10 SWAP6 PUSH2 0x1F6 JUMPI JUMPDEST POP DUP2 DUP5 MLOAD DUP1 SWAP8 PUSH4 0x91792D5B PUSH1 0xE0 SHL DUP3 MSTORE DUP2 DUP5 GAS STATICCALL SWAP6 DUP7 ISZERO PUSH2 0x1EC JUMPI DUP10 SWAP7 PUSH2 0x1B5 JUMPI JUMPDEST POP PUSH1 0xC0 SWAP9 POP BALANCE SWAP6 PUSH1 0xA0 DUP5 MLOAD PUSH2 0x171 DUP2 PUSH2 0x378 JUMP JUMPDEST DUP10 DUP2 MSTORE DUP4 DUP2 ADD SWAP3 DUP4 MSTORE DUP6 DUP2 ADD SWAP5 DUP6 MSTORE PUSH1 0x60 DUP2 ADD SWAP7 DUP8 MSTORE PUSH1 0x80 DUP2 ADD SWAP8 DUP9 MSTORE ADD SWAP7 DUP8 MSTORE DUP4 MLOAD SWAP8 DUP9 MSTORE MLOAD SWAP1 DUP8 ADD MSTORE MLOAD SWAP1 DUP6 ADD MSTORE MLOAD PUSH1 0x60 DUP5 ADD MSTORE MLOAD PUSH1 0x80 DUP4 ADD MSTORE MLOAD PUSH1 0xA0 DUP3 ADD MSTORE RETURN JUMPDEST SWAP1 SWAP6 POP DUP2 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x1E5 JUMPI JUMPDEST PUSH2 0x1CD DUP2 DUP4 PUSH2 0x3AA JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x1E1 JUMPI PUSH1 0xC0 SWAP9 POP MLOAD SWAP5 CODESIZE PUSH2 0x15D JUMP JUMPDEST DUP9 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x1C3 JUMP JUMPDEST DUP5 MLOAD RETURNDATASIZE DUP12 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 SWAP5 POP DUP2 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x21E JUMPI JUMPDEST PUSH2 0x20E DUP2 DUP4 PUSH2 0x3AA JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x1E1 JUMPI MLOAD SWAP4 CODESIZE PUSH2 0x13B JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x204 JUMP JUMPDEST SWAP1 SWAP7 POP DUP4 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x251 JUMPI JUMPDEST PUSH2 0x23D DUP2 DUP4 PUSH2 0x3AA JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x24D JUMPI MLOAD SWAP6 CODESIZE PUSH2 0x113 JUMP JUMPDEST DUP8 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x233 JUMP JUMPDEST DUP4 MLOAD RETURNDATASIZE DUP11 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP5 POP SWAP1 POP DUP3 DUP5 DUP2 RETURNDATASIZE DUP2 GT PUSH2 0x291 JUMPI JUMPDEST PUSH2 0x27B DUP2 DUP4 PUSH2 0x3AA JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x28D JUMPI DUP6 SWAP4 MLOAD SWAP1 CODESIZE PUSH2 0xED JUMP JUMPDEST DUP7 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x271 JUMP JUMPDEST DUP3 MLOAD RETURNDATASIZE DUP10 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 SWAP4 POP DUP3 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x2CA JUMPI JUMPDEST PUSH2 0x2BA DUP2 DUP4 PUSH2 0x3AA JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x28D JUMPI MLOAD SWAP3 CODESIZE PUSH2 0xC7 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x2B0 JUMP JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x2FE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2FE JUMPI PUSH1 0x1 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x2FE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2FE JUMPI PUSH1 0x2 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x2FE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2FE JUMPI PUSH1 0x3 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP5 SWAP1 CALLVALUE PUSH2 0x2FE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2FE JUMPI SWAP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST PUSH1 0xC0 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x394 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x394 JUMPI PUSH1 0x40 MSTORE JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC7 0xD0 DUP6 STATICCALL 0xEC PUSH16 0xA10F0F4B436ADB3E21CFF38BF80323B1 0xE2 0x1F PUSH17 0x5BE0047D9FDB9364736F6C634300081300 CALLER ","sourceMap":"411:1366:33:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1372:11;411:1366;;;;;;;;;;;;;1372:29;;;;;;;;;;;;;;;411:1366;;;;;;;;;;;1432:37;;;;;;;;;;;;;;;;;;;;;;411:1366;;;;;;;;;;;;;;;;1522:28;;;;;;;;;;;;;411:1366;-1:-1:-1;411:1366:33;;;;-1:-1:-1;;;1630:28:33;;411:1366;;;;;1630:28;411:1366;;1630:28;;;;;;;;;;;411:1366;;;;;;;;;;1676:27;;;;;;;;;;;;;;;411:1366;1721:33;411:1366;1721:33;;;411:1366;;;;;;;:::i;:::-;;;;1499:269;;;411:1366;;;1499:269;;;411:1366;;;;1499:269;;411:1366;;;;1499:269;;411:1366;;;1499:269;411:1366;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1676:27;;;;;;;;;;;;;;;;;:::i;:::-;;;411:1366;;;;;;;;1676:27;;;;411:1366;;;;1676:27;;;;;;411:1366;;;;;;;;;1630:28;;;;;;;;;;;;;;;;;:::i;:::-;;;411:1366;;;;;1630:28;;;;;;;;;1522;;;;;;;;;;;;;;;;;:::i;:::-;;;411:1366;;;;;1522:28;;;;411:1366;;;;1522:28;;;;;;411:1366;;;;;;;;;1432:37;;-1:-1:-1;1432:37:33;-1:-1:-1;1432:37:33;;;;;;;;;;;;;:::i;:::-;;;411:1366;;;;;;;1432:37;;;;411:1366;;;;1432:37;;;;;;411:1366;;;;;;;;;1372:29;;;;;;;;;;;;;;;;;:::i;:::-;;;411:1366;;;;;1372:29;;;;;;;;;411:1366;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;411:1366:33;;;;;;;;;;;;;;;;;;;;;;;;;;736:31;411:1366;;;-1:-1:-1;;;;;411:1366:33;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;411:1366:33;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;411:1366:33;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"205200","executionCost":"infinite","totalCost":"infinite"},"external":{"getStats()":"infinite","mecenateBay()":"2342","mecenateFeedFactory()":"2364","mecenateTreasury()":"2320","mecenateUsers()":"2286"}},"methodIdentifiers":{"getStats()":"c59d4847","mecenateBay()":"3f16a3bb","mecenateFeedFactory()":"77260151","mecenateTreasury()":"295b7b9a","mecenateUsers()":"139e3c54"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mecenateUsersAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mecenateFeedFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mecenateBayAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mecenateTreasuryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"getStats\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalUsers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBayRequests\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFeeds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"globalFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct MecenateStats.Stats\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mecenateBay\",\"outputs\":[{\"internalType\":\"contract IMecenateBay\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mecenateFeedFactory\",\"outputs\":[{\"internalType\":\"contract IMecenateFeedFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mecenateTreasury\",\"outputs\":[{\"internalType\":\"contract IMecenateTreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mecenateUsers\",\"outputs\":[{\"internalType\":\"contract IMecenateUsers\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/stats/MecenateStats.sol\":\"MecenateStats\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/interfaces/IMecenateBay.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\nimport \\\"../library/Structures.sol\\\";\\r\\n\\r\\ninterface IMecenateBay {\\r\\n    function allRequests()\\r\\n        external\\r\\n        view\\r\\n        returns (Structures.BayRequest[] memory);\\r\\n\\r\\n    function contractCounter() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x8964368dca5e796c8c094a3275105747756aa83f66079ef4cce5f7e1c512428d\"},\"contracts/interfaces/IMecenateFeedFactory.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\ninterface IMecenateFeedFactory {\\n    function owner() external view returns (address payable);\\n\\n    function treasuryContract() external view returns (address payable);\\n\\n    function feeds() external view returns (address[] memory);\\n\\n    function contractCounter() external view returns (uint256);\\n\\n    function isFeed(address _feed) external view returns (bool);\\n\\n    function museToken() external view returns (address);\\n\\n    function wethToken() external view returns (address);\\n\\n    function daiToken() external view returns (address);\\n\\n    function router() external view returns (address);\\n\\n    function getRouterFee(uint8 tokenId) external view returns (uint24);\\n\\n    function burnEnabled() external view returns (bool);\\n\\n    function version() external view returns (string memory);\\n\\n    function easSchema() external view returns (bytes32);\\n\\n    function easContract() external view returns (address);\\n}\\n\",\"keccak256\":\"0x79da402b87332cbe8176ab1d0abd2c5369a0da30970743b86283e1a774eea776\"},\"contracts/interfaces/IMecenateTreasury.sol\":{\"content\":\"pragma solidity 0.8.19;\\r\\n\\r\\ninterface IMecenateTreasury {\\r\\n    function globalFee() external view returns (uint256);\\r\\n\\r\\n    function fixedFee() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xf544878bba8e01c837110d06eac56042957d59c593ba9083f686ef02aa9276a1\"},\"contracts/interfaces/IMecenateUsers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateUsers {\\n    function registerUser(bytes memory metadata) external;\\n\\n    function getUsers() external view returns (address[] memory);\\n\\n    function getUserCount() external view returns (uint256);\\n\\n    function getUserAt(uint256 index) external view returns (address);\\n\\n    function checkifUserExist(address userAddress) external view returns (bool);\\n\\n    function getPaginatedUsers(\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) external view returns (address[] memory);\\n\\n    function getUserMetadata(\\n        address userAddress\\n    ) external view returns (Structures.User memory);\\n\\n    function getUserPublicKey(\\n        address userAddress\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xf0ff65dbfea12d90cf106325b9478e31b284045327e5f0974db5374b8789e93c\",\"license\":\"MIT\"},\"contracts/library/Structures.sol\":{\"content\":\"/**\\n * @title Structures\\n * @dev This library defines various data structures used in the Mecenate platform.\\n */\\npragma solidity 0.8.19;\\n\\nlibrary Structures {\\n    enum PostStatus {\\n        Waiting,\\n        Proposed,\\n        Accepted,\\n        Submitted,\\n        Finalized,\\n        Punished,\\n        Revealed,\\n        Renounced\\n    }\\n\\n    enum Tokens {\\n        NaN,\\n        MUSE,\\n        DAI\\n    }\\n\\n    enum PostType {\\n        Text,\\n        Image,\\n        Video,\\n        Audio,\\n        File\\n    }\\n    enum PostDuration {\\n        OneDay,\\n        ThreeDays,\\n        OneWeek,\\n        TwoWeeks,\\n        OneMonth\\n    }\\n\\n    struct FeedSettings {\\n        uint256 punishmentRatio;\\n        uint256 postCount;\\n        address usersModuleContract;\\n        address factoryContract;\\n        address router;\\n        string version;\\n    }\\n\\n    struct FactorySettings {\\n        address treasuryContract;\\n        address usersModuleContract;\\n        address easContract;\\n        bytes32 easSchema;\\n        address museToken;\\n        address daiToken;\\n        address wethToken;\\n        address router;\\n    }\\n\\n    /**\\n     * @dev Struct representing a post on the Mecenate platform.\\n     */\\n    struct Post {\\n        User creator;\\n        PostData postdata;\\n    }\\n\\n    /**\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\n     */\\n    struct PostData {\\n        PostSettings settings;\\n        PostEscrow escrow;\\n        PostEncryptedData data;\\n    }\\n\\n    /**\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\n     */\\n    struct PostEncryptedData {\\n        bytes encryptedData;\\n        bytes encryptedKey;\\n        bytes decryptedData;\\n    }\\n\\n    /**\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettings {\\n        PostStatus status;\\n        PostType postType;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n        uint256 duration;\\n        Tokens tokenId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\n     */\\n    struct PostEscrow {\\n        address buyer;\\n        address seller;\\n        uint256 stake;\\n        uint256 payment;\\n        uint256 punishment;\\n        uint256 penalty;\\n    }\\n\\n    /**\\n     * @dev Struct representing a user on the Mecenate platform.\\n     */\\n    struct User {\\n        address evmAddress;\\n        bytes sismoVaultId;\\n        bytes publicKey;\\n    }\\n\\n    /**\\n     * @dev Struct representing a feed on the Mecenate platform.\\n     */\\n    struct Feed {\\n        address contractAddress;\\n        address owner;\\n        uint256 sellerStake;\\n        uint256 buyerStake;\\n        uint256 totalStake;\\n        uint256 postCount;\\n        uint256 paymentRequested;\\n        uint256 stakeRequested;\\n        PostStatus status;\\n        Tokens tokenId;\\n        string version;\\n    }\\n\\n    /**\\n     * @dev Struct representing a bay request on the Mecenate platform.\\n     */\\n    struct BayRequest {\\n        bytes request;\\n        uint256 payment;\\n        uint256 stake;\\n        address postAddress;\\n        bool accepted;\\n        uint256 postCount;\\n        Tokens tokenId;\\n        address buyerAddress;\\n    }\\n}\\n\",\"keccak256\":\"0xab56ad7506e91048fc9c6db9fd9510c42afa61d6b11a99a273bf975643307d8f\"},\"contracts/stats/MecenateStats.sol\":{\"content\":\"/**\\n * @title MecenateStats\\n * @dev This contract provides statistics about the Mecenate platform, including the total number of users, bay requests, feeds, global fee, fixed fee, and treasury balance.\\n */\\npragma solidity 0.8.19;\\n\\nimport \\\"../interfaces/IMecenateUsers.sol\\\";\\nimport \\\"../interfaces/IMecenateFeedFactory.sol\\\";\\nimport \\\"../interfaces/IMecenateBay.sol\\\";\\nimport \\\"../interfaces/IMecenateTreasury.sol\\\";\\n\\ncontract MecenateStats {\\n    struct Stats {\\n        uint256 totalUsers;\\n        uint256 totalBayRequests;\\n        uint256 totalFeeds;\\n        uint256 globalFee;\\n        uint256 fixedFee;\\n        uint256 treasuryBalance;\\n    }\\n\\n    IMecenateUsers public mecenateUsers;\\n    IMecenateFeedFactory public mecenateFeedFactory;\\n    IMecenateBay public mecenateBay;\\n    IMecenateTreasury public mecenateTreasury;\\n\\n    constructor(\\n        address mecenateUsersAddress,\\n        address mecenateFeedFactoryAddress,\\n        address mecenateBayAddress,\\n        address mecenateTreasuryAddress\\n    ) {\\n        mecenateUsers = IMecenateUsers(mecenateUsersAddress);\\n        mecenateFeedFactory = IMecenateFeedFactory(mecenateFeedFactoryAddress);\\n        mecenateBay = IMecenateBay(mecenateBayAddress);\\n        mecenateTreasury = IMecenateTreasury(mecenateTreasuryAddress);\\n    }\\n\\n    function getStats() public view returns (Stats memory) {\\n        uint256 totalBayRequests = mecenateBay.contractCounter();\\n        uint256 totalFeeds = mecenateFeedFactory.contractCounter();\\n\\n        return\\n            Stats(\\n                mecenateUsers.getUserCount(),\\n                totalBayRequests,\\n                totalFeeds,\\n                mecenateTreasury.globalFee(),\\n                mecenateTreasury.fixedFee(),\\n                address(mecenateTreasury).balance\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x697a4b68d1bf57fe1a1a6e32dc7e01e2ef1da3d11460b976a68494e849805c61\"}},\"version\":1}","storageLayout":{"storage":[{"astId":6152,"contract":"contracts/stats/MecenateStats.sol:MecenateStats","label":"mecenateUsers","offset":0,"slot":"0","type":"t_contract(IMecenateUsers)2490"},{"astId":6155,"contract":"contracts/stats/MecenateStats.sol:MecenateStats","label":"mecenateFeedFactory","offset":0,"slot":"1","type":"t_contract(IMecenateFeedFactory)2419"},{"astId":6158,"contract":"contracts/stats/MecenateStats.sol:MecenateStats","label":"mecenateBay","offset":0,"slot":"2","type":"t_contract(IMecenateBay)2262"},{"astId":6161,"contract":"contracts/stats/MecenateStats.sol:MecenateStats","label":"mecenateTreasury","offset":0,"slot":"3","type":"t_contract(IMecenateTreasury)2432"}],"types":{"t_contract(IMecenateBay)2262":{"encoding":"inplace","label":"contract IMecenateBay","numberOfBytes":"20"},"t_contract(IMecenateFeedFactory)2419":{"encoding":"inplace","label":"contract IMecenateFeedFactory","numberOfBytes":"20"},"t_contract(IMecenateTreasury)2432":{"encoding":"inplace","label":"contract IMecenateTreasury","numberOfBytes":"20"},"t_contract(IMecenateUsers)2490":{"encoding":"inplace","label":"contract IMecenateUsers","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}