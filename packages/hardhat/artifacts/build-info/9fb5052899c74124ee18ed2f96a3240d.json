{"id":"9fb5052899c74124ee18ed2f96a3240d","_format":"hh-sol-build-info-1","solcVersion":"0.8.19","solcLongVersion":"0.8.19+commit.7dd6d404","input":{"language":"Solidity","sources":{"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary ClonesUpgradeable {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create(0, 0x09, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create2(0, 0x09, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(add(ptr, 0x38), deployer)\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\n            mstore(add(ptr, 0x14), implementation)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\n            mstore(add(ptr, 0x58), salt)\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\n            predicted := keccak256(add(ptr, 0x43), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt\n    ) internal view returns (address predicted) {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMathUpgradeable {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\nimport \"./math/SignedMathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMathUpgradeable.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSetUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"},"contracts/factories/MecenateFeedFactory.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"../interfaces/IMecenateUsers.sol\";\nimport \"../interfaces/IMecenateTreasury.sol\";\nimport \"../modules/FeedViewer.sol\";\nimport \"../interfaces/IProxyCall.sol\";\nimport \"../interfaces/IFeedInitializer.sol\";\n\ncontract MecenateFeedFactory is Initializable, OwnableUpgradeable, FeedViewer {\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n    using ClonesUpgradeable for address;\n    using StringsUpgradeable for uint256;\n\n    using AddressUpgradeable for address;\n    using AddressUpgradeable for address payable;\n\n    IProxyCall public proxyCallContract;\n\n    address public implementation;\n    address public defaultOperator;\n\n    EnumerableSetUpgradeable.AddressSet internal feeds;\n    Structures.FactorySettings internal settings;\n\n    bytes internal feedByteCode;\n\n    mapping(uint256 => uint24) internal routerFee;\n    mapping(address => EnumerableSetUpgradeable.AddressSet) internal feedStore;\n\n    bool public burnEnabled = false;\n\n    uint256 public contractCounter;\n\n    uint256 public major;\n    uint256 public minor;\n    uint256 public patch;\n\n    event FeedCreated(address indexed addr);\n\n    event ImplementationUpdated(\n        address indexed implementation,\n        uint256 indexed version\n    );\n\n    event ProxyCallContractUpdated(address indexed _proxyCallContract);\n\n    function initialize(\n        address _proxyCallContract,\n        address _usersModuleContract,\n        address _treasuryContract,\n        address _easContract,\n        bytes32 _easSchema,\n        address _wethToken,\n        address _museToken,\n        address _daiToken,\n        address _router\n    ) public initializer {\n        __Ownable_init();\n        __Ownable_init_unchained();\n\n        transferOwnership(msg.sender);\n        _updateProxyCallContract(_proxyCallContract);\n\n        settings.usersModuleContract = _usersModuleContract;\n        settings.treasuryContract = _treasuryContract;\n        settings.easContract = _easContract;\n        settings.easSchema = _easSchema;\n        settings.wethToken = _wethToken;\n        settings.museToken = _museToken;\n        settings.daiToken = _daiToken;\n        settings.router = _router;\n        proxyCallContract = IProxyCall(_proxyCallContract);\n        defaultOperator = msg.sender;\n        major = 2;\n        minor = 0;\n        patch = 0;\n    }\n\n    function adminUpdateImplementation(\n        address _implementation,\n        uint256 major,\n        uint256 minor,\n        uint256 patch\n    ) external onlyOwner {\n        _updateImplementation(_implementation, major, minor, patch);\n    }\n\n    function adminUpdateProxyCallContract(\n        address _proxyCallContract\n    ) external onlyOwner {\n        _updateProxyCallContract(_proxyCallContract);\n    }\n\n    function treasuryContract() external view returns (address) {\n        return settings.treasuryContract;\n    }\n\n    function easSchema() external view returns (bytes32) {\n        return settings.easSchema;\n    }\n\n    function easContract() external view returns (address) {\n        return settings.easContract;\n    }\n\n    function daiToken() external view returns (address) {\n        return settings.daiToken;\n    }\n\n    function wethToken() external view returns (address) {\n        return settings.wethToken;\n    }\n\n    function museToken() external view returns (address) {\n        return settings.museToken;\n    }\n\n    function router() external view returns (address) {\n        return settings.router;\n    }\n\n    function getRouterFee(uint256 tokenId) external view returns (uint24) {\n        return routerFee[tokenId];\n    }\n\n    function setRouterFee(uint256 tokenId, uint24 fee) external onlyOwner {\n        routerFee[tokenId] = fee;\n    }\n\n    function setBurnEnabled(bool newBurnEnabled) external onlyOwner {\n        burnEnabled = newBurnEnabled;\n    }\n\n    function isFeed(address newFeed) external view returns (bool) {\n        return feeds.contains(newFeed);\n    }\n\n    function changeMultipleSettings(\n        address treasury,\n        address usersModule,\n        address newEasContract,\n        bytes32 newEasSchema,\n        address wethTokenAddr,\n        address museTokenAddr,\n        address daiTokenAddr,\n        address routerAddr\n    ) external onlyOwner {\n        settings.treasuryContract = treasury;\n        settings.usersModuleContract = usersModule;\n        settings.easContract = newEasContract;\n        settings.easSchema = newEasSchema;\n        settings.wethToken = wethTokenAddr;\n        settings.museToken = museTokenAddr;\n        settings.daiToken = daiTokenAddr;\n        settings.router = routerAddr;\n    }\n\n    function buildFeed() external payable returns (address ctx) {\n        uint256 nonce = uint256(\n            keccak256(abi.encodePacked(msg.sender, block.timestamp))\n        );\n\n        ctx = implementation.cloneDeterministic(\n            _getSalt(msg.sender, nonce + 1)\n        );\n\n        IFeedInitializer(ctx).initialize(\n            msg.sender,\n            address(this),\n            settings.usersModuleContract,\n            major,\n            minor,\n            patch\n        );\n\n        require(\n            IMecenateUsers(settings.usersModuleContract).checkifUserExist(\n                msg.sender\n            ),\n            \"user does not exist\"\n        );\n\n        require(msg.value >= getCreationFee(), \"NOT_ENOUGH_FEE\");\n\n        (bool _result, ) = payable(settings.treasuryContract).call{\n            value: msg.value\n        }(\"\");\n\n        require(_result, \"CALL_FAILED\");\n\n        contractCounter++;\n\n        address feed = ctx;\n\n        feeds.add(address(feed));\n\n        feedStore[msg.sender].add(address(feed));\n\n        emit FeedCreated(address(feed));\n\n        return address(feed);\n    }\n\n    function getFeeds() external view returns (address[] memory) {\n        return feeds.values();\n    }\n\n    function getFeedsOwned(\n        address user\n    ) external view returns (address[] memory) {\n        return feedStore[user].values();\n    }\n\n    function getFeedsInfoOwned(\n        address user\n    ) external view returns (Structures.Feed[] memory) {\n        return _getFeedsInfo(feedStore[user].values());\n    }\n\n    function getFeedInfo(\n        address user\n    ) external view returns (Structures.Feed memory) {\n        return _getFeedInfo(user);\n    }\n\n    function getFeedsInfo() external view returns (Structures.Feed[] memory) {\n        return _getFeedsInfo(feeds.values());\n    }\n\n    function isContractCreated(\n        address contractAddress\n    ) external view returns (bool) {\n        return feeds.contains(contractAddress);\n    }\n\n    function getCreationFee() internal view returns (uint256) {\n        return IMecenateTreasury(settings.treasuryContract).fixedFee();\n    }\n\n    function _updateProxyCallContract(address _proxyCallContract) private {\n        require(\n            _proxyCallContract.isContract(),\n            \"FNDCollectionFactory: Proxy call address is not a contract\"\n        );\n        proxyCallContract = IProxyCall(_proxyCallContract);\n\n        emit ProxyCallContractUpdated(_proxyCallContract);\n    }\n\n    function _updateImplementation(\n        address _implementation,\n        uint256 majorNew,\n        uint256 minorNew,\n        uint256 patchNew\n    ) private {\n        require(\n            _implementation.isContract(),\n            \"nali: implementation is not a contract\"\n        );\n\n        implementation = _implementation;\n\n        unchecked {\n            // Version cannot overflow 256 bits.\n            major = majorNew;\n            minor = minorNew;\n            patch = patchNew;\n        }\n\n        IFeedInitializer(implementation).initialize(\n            msg.sender,\n            address(this),\n            settings.usersModuleContract,\n            major,\n            minor,\n            patch\n        );\n\n        uint256 version = majorNew * 10000 + minorNew * 100 + patchNew;\n\n        emit ImplementationUpdated(_implementation, version);\n    }\n\n    function _getSalt(\n        address creator,\n        uint256 nonce\n    ) private pure returns (bytes32) {\n        return keccak256(abi.encodePacked(creator, nonce));\n    }\n}\n"},"contracts/helpers/ExternalProxyCall.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\r\n\r\npragma solidity 0.8.19;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\r\nimport \"../interfaces/IProxyCall.sol\";\r\n\r\n/**\r\n * @title Forwards arbitrary calls to an external contract.\r\n * @notice DO NOT approve this contract to transfer any ERC-20 or ERC-721,\r\n * or grant any other permissions for another contract.\r\n * @dev This is used so that the from address of the calling contract does not have\r\n * any special permissions (e.g. ERC-20 transfer).\r\n * Other return types and call structures may be added in the future.\r\n */\r\ncontract ExternalProxyCall is IProxyCall {\r\n    using AddressUpgradeable for address;\r\n\r\n    function proxyCallAndReturnAddress(\r\n        address externalContract,\r\n        bytes memory callData\r\n    ) external override returns (address payable result) {\r\n        bytes memory returnData = externalContract.functionCall(callData);\r\n\r\n        // Skip the length at the start of the bytes array and return the data, casted to an address\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            result := mload(add(returnData, 32))\r\n        }\r\n    }\r\n}\r\n"},"contracts/interfaces/IFeedInitializer.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\ninterface IFeedInitializer {\n    function initialize(\n        address _owner,\n        address _factoryContract,\n        address _usersModuleContract,\n        uint256 major,\n        uint256 minor,\n        uint256 patch\n    ) external;\n}\n"},"contracts/interfaces/IMecenateFeed.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\nimport \"../library/Structures.sol\";\n\ninterface IMecenateFeed {\n    function getPost() external view returns (Structures.Post memory);\n\n    function getTotalStaked() external view returns (uint256);\n\n    function postCount() external view returns (uint256);\n\n    function acceptPost(\n        Structures.Tokens,\n        uint256 _amount,\n        address _funder,\n        address _buyer\n    ) external payable;\n\n    function getSellerStake() external view returns (uint256);\n\n    function getBuyerStake() external view returns (uint256);\n\n    function getPaymentRequested() external view returns (uint256);\n\n    function getStakeRequested() external view returns (uint256);\n\n    function getStatus() external view returns (Structures.PostStatus status);\n\n    function getTokenId() external view returns (Structures.Tokens tokenId);\n\n    function getPostId() external view returns (bytes32);\n\n    function getAllPostIds() external view returns (bytes32[] memory);\n\n    function getPostTimestamp(\n        bytes32 postId\n    ) external view returns (Structures.PostTimestamp memory);\n\n    function owner() external view returns (address);\n\n    function version() external view returns (string memory);\n\n    function getEncryptedPost() external view returns (bytes memory);\n}\n"},"contracts/interfaces/IMecenateTreasury.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.19;\n\ninterface IMecenateTreasury {\n    function globalFee() external view returns (uint256);\n\n    function fixedFee() external view returns (uint256);\n}\n"},"contracts/interfaces/IMecenateUsers.sol":{"content":"// SPDX-License-Identifier: MIT\nimport \"../library/Structures.sol\";\n\ninterface IMecenateUsers {\n    function registerUser(bytes memory metadata) external;\n\n    function getUsers() external view returns (address[] memory);\n\n    function getUserCount() external view returns (uint256);\n\n    function getUserAt(uint256 index) external view returns (address);\n\n    function checkifUserExist(address userAddress) external view returns (bool);\n\n    function getPaginatedUsers(\n        uint256 startIndex,\n        uint256 endIndex\n    ) external view returns (address[] memory);\n\n    function getUserMetadata(\n        address userAddress\n    ) external view returns (Structures.User memory);\n\n    function getUserPublicKey(\n        address userAddress\n    ) external view returns (bytes memory);\n}\n"},"contracts/interfaces/IProxyCall.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\r\npragma solidity 0.8.19;\r\n\r\ninterface IProxyCall {\r\n    function proxyCallAndReturnAddress(\r\n        address externalContract,\r\n        bytes memory callData\r\n    ) external returns (address payable result);\r\n}\r\n"},"contracts/library/Structures.sol":{"content":"// SPDX-License-Identifier: MIT\n\n/**\n * @title Structures\n * @dev This library defines various data structures used in the Mecenate platform.\n */\npragma solidity 0.8.19;\n\nlibrary Structures {\n    enum PostStatus {\n        Waiting,\n        Proposed,\n        Accepted,\n        Submitted,\n        Finalized,\n        Punished,\n        Revealed,\n        Renounced\n    }\n\n    enum PostResult {\n        None,\n        Valid,\n        Punished\n    }\n\n    enum Tokens {\n        NaN,\n        MUSE,\n        DAI\n    }\n\n    enum PostType {\n        Text,\n        Image,\n        Video,\n        Audio,\n        File\n    }\n    enum PostDuration {\n        OneDay,\n        ThreeDays,\n        OneWeek,\n        TwoWeeks,\n        OneMonth\n    }\n\n    struct PostTimestamp {\n        PostResult postResult;\n        uint256 creationTimeStamp;\n        uint256 endTimeStamp;\n    }\n\n    struct FeedSettings {\n        uint256 punishmentRatio;\n        uint256 postCount;\n        address usersModuleContract;\n        address factoryContract;\n        address router;\n        string version;\n    }\n\n    struct FactorySettings {\n        address treasuryContract;\n        address usersModuleContract;\n        address easContract;\n        bytes32 easSchema;\n        address museToken;\n        address daiToken;\n        address wethToken;\n        address router;\n    }\n\n    /**\n     * @dev Struct representing a post on the Mecenate platform.\n     */\n    struct Post {\n        User creator;\n        PostData postdata;\n    }\n\n    /**\n     * @dev Struct representing the data of a post on the Mecenate platform.\n     */\n    struct PostData {\n        PostSettings settings;\n        PostEscrow escrow;\n        PostEncryptedData data;\n    }\n\n    /**\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\n     */\n    struct PostEncryptedData {\n        bytes encryptedData;\n        bytes encryptedKey;\n        bytes decryptedData;\n    }\n\n    /**\n     * @dev Struct representing the settings of a post on the Mecenate platform.\n     */\n    struct PostSettings {\n        PostStatus status;\n        PostType postType;\n        uint256 creationTimeStamp;\n        uint256 endTimeStamp;\n        uint256 duration;\n        Tokens tokenId;\n        bytes32 postId;\n    }\n\n    /**\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\n     */\n    struct PostEscrow {\n        address buyer;\n        address seller;\n        uint256 stake;\n        uint256 payment;\n        uint256 punishment;\n        uint256 penalty;\n    }\n\n    /**\n     * @dev Struct representing a user on the Mecenate platform.\n     */\n    struct User {\n        address evmAddress;\n        bytes sismoVaultId;\n        bytes publicKey;\n    }\n\n    /**\n     * @dev Struct representing a feed on the Mecenate platform.\n     */\n    struct Feed {\n        address contractAddress;\n        address owner;\n        uint256 sellerStake;\n        uint256 buyerStake;\n        uint256 totalStake;\n        uint256 postCount;\n        uint256 paymentRequested;\n        uint256 stakeRequested;\n        PostStatus status;\n        Tokens tokenId;\n        string version;\n        bytes32 postId;\n    }\n\n    /**\n     * @dev Struct representing a bay request on the Mecenate platform.\n     */\n    struct BayRequest {\n        bytes request;\n        uint256 payment;\n        uint256 stake;\n        address postAddress;\n        bool accepted;\n        uint256 postCount;\n        Tokens tokenId;\n        address buyerAddress;\n        bytes32 postId;\n    }\n}\n"},"contracts/modules/FeedViewer.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"../library/Structures.sol\";\nimport \"../interfaces/IMecenateFeed.sol\";\n\ncontract FeedViewer {\n    function _getFeedInfo(\n        address feed\n    ) internal view returns (Structures.Feed memory) {\n        Structures.Feed memory f;\n\n        IMecenateFeed mecenateFeed = IMecenateFeed(feed);\n\n        f.contractAddress = feed;\n        f.owner = mecenateFeed.owner();\n        f.sellerStake = mecenateFeed.getSellerStake();\n        f.buyerStake = mecenateFeed.getBuyerStake();\n        f.totalStake = mecenateFeed.getTotalStaked();\n        f.postCount = mecenateFeed.postCount();\n        f.paymentRequested = mecenateFeed.getPaymentRequested();\n        f.stakeRequested = mecenateFeed.getStakeRequested();\n        f.status = mecenateFeed.getStatus();\n        f.tokenId = mecenateFeed.getTokenId();\n        f.version = mecenateFeed.version();\n        f.postId = mecenateFeed.getPostId();\n\n        return f;\n    }\n\n    function _getFeedsInfo(\n        address[] memory _feeds\n    ) internal view returns (Structures.Feed[] memory) {\n        uint256 len = _feeds.length;\n        Structures.Feed[] memory f = new Structures.Feed[](len);\n\n        for (uint256 i = 0; i < len; i++) {\n            f[i] = _getFeedInfo(_feeds[i]);\n        }\n\n        return f;\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"viaIR":true,"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates","devdoc","userdoc"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"3420","formattedMessage":"Warning: Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.19;\"\n--> contracts/interfaces/IMecenateUsers.sol\n\n","message":"Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.19;\"","severity":"warning","sourceLocation":{"end":-1,"file":"contracts/interfaces/IMecenateUsers.sol","start":-1},"type":"Warning"},{"component":"general","errorCode":"2519","formattedMessage":"Warning: This declaration shadows an existing declaration.\n  --> contracts/factories/MecenateFeedFactory.sol:88:9:\n   |\n88 |         uint256 major,\n   |         ^^^^^^^^^^^^^\nNote: The shadowed declaration is here:\n  --> contracts/factories/MecenateFeedFactory.sol:41:5:\n   |\n41 |     uint256 public major;\n   |     ^^^^^^^^^^^^^^^^^^^^\n\n","message":"This declaration shadows an existing declaration.","secondarySourceLocations":[{"end":1551,"file":"contracts/factories/MecenateFeedFactory.sol","message":"The shadowed declaration is here:","start":1531}],"severity":"warning","sourceLocation":{"end":2935,"file":"contracts/factories/MecenateFeedFactory.sol","start":2922},"type":"Warning"},{"component":"general","errorCode":"2519","formattedMessage":"Warning: This declaration shadows an existing declaration.\n  --> contracts/factories/MecenateFeedFactory.sol:89:9:\n   |\n89 |         uint256 minor,\n   |         ^^^^^^^^^^^^^\nNote: The shadowed declaration is here:\n  --> contracts/factories/MecenateFeedFactory.sol:42:5:\n   |\n42 |     uint256 public minor;\n   |     ^^^^^^^^^^^^^^^^^^^^\n\n","message":"This declaration shadows an existing declaration.","secondarySourceLocations":[{"end":1577,"file":"contracts/factories/MecenateFeedFactory.sol","message":"The shadowed declaration is here:","start":1557}],"severity":"warning","sourceLocation":{"end":2958,"file":"contracts/factories/MecenateFeedFactory.sol","start":2945},"type":"Warning"},{"component":"general","errorCode":"2519","formattedMessage":"Warning: This declaration shadows an existing declaration.\n  --> contracts/factories/MecenateFeedFactory.sol:90:9:\n   |\n90 |         uint256 patch\n   |         ^^^^^^^^^^^^^\nNote: The shadowed declaration is here:\n  --> contracts/factories/MecenateFeedFactory.sol:43:5:\n   |\n43 |     uint256 public patch;\n   |     ^^^^^^^^^^^^^^^^^^^^\n\n","message":"This declaration shadows an existing declaration.","secondarySourceLocations":[{"end":1603,"file":"contracts/factories/MecenateFeedFactory.sol","message":"The shadowed declaration is here:","start":1583}],"severity":"warning","sourceLocation":{"end":2981,"file":"contracts/factories/MecenateFeedFactory.sol","start":2968},"type":"Warning"}],"sources":{"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[710],"ContextUpgradeable":[752],"Initializable":[380],"OwnableUpgradeable":[131]},"id":132,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:0"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":132,"sourceUnit":753,"src":"127:41:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":132,"sourceUnit":381,"src":"169:42:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":5,"name":"Initializable","nameLocations":["748:13:0"],"nodeType":"IdentifierPath","referencedDeclaration":380,"src":"748:13:0"},"id":6,"nodeType":"InheritanceSpecifier","src":"748:13:0"},{"baseName":{"id":7,"name":"ContextUpgradeable","nameLocations":["763:18:0"],"nodeType":"IdentifierPath","referencedDeclaration":752,"src":"763:18:0"},"id":8,"nodeType":"InheritanceSpecifier","src":"763:18:0"}],"canonicalName":"OwnableUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":4,"nodeType":"StructuredDocumentation","src":"213:494:0","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":131,"linearizedBaseContracts":[131,752,380],"name":"OwnableUpgradeable","nameLocation":"726:18:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":10,"mutability":"mutable","name":"_owner","nameLocation":"804:6:0","nodeType":"VariableDeclaration","scope":131,"src":"788:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":9,"name":"address","nodeType":"ElementaryTypeName","src":"788:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":16,"name":"OwnershipTransferred","nameLocation":"823:20:0","nodeType":"EventDefinition","parameters":{"id":15,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"860:13:0","nodeType":"VariableDeclaration","scope":16,"src":"844:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":11,"name":"address","nodeType":"ElementaryTypeName","src":"844:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":14,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"891:8:0","nodeType":"VariableDeclaration","scope":16,"src":"875:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13,"name":"address","nodeType":"ElementaryTypeName","src":"875:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"843:57:0"},"src":"817:84:0"},{"body":{"id":25,"nodeType":"Block","src":"1055:43:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":22,"name":"__Ownable_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":37,"src":"1065:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":23,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1065:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":24,"nodeType":"ExpressionStatement","src":"1065:26:0"}]},"documentation":{"id":17,"nodeType":"StructuredDocumentation","src":"907:91:0","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":26,"implemented":true,"kind":"function","modifiers":[{"id":20,"kind":"modifierInvocation","modifierName":{"id":19,"name":"onlyInitializing","nameLocations":["1038:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":325,"src":"1038:16:0"},"nodeType":"ModifierInvocation","src":"1038:16:0"}],"name":"__Ownable_init","nameLocation":"1012:14:0","nodeType":"FunctionDefinition","parameters":{"id":18,"nodeType":"ParameterList","parameters":[],"src":"1026:2:0"},"returnParameters":{"id":21,"nodeType":"ParameterList","parameters":[],"src":"1055:0:0"},"scope":131,"src":"1003:95:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":36,"nodeType":"Block","src":"1166:49:0","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":32,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":737,"src":"1195:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":33,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1195:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":31,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":125,"src":"1176:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":34,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1176:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":35,"nodeType":"ExpressionStatement","src":"1176:32:0"}]},"id":37,"implemented":true,"kind":"function","modifiers":[{"id":29,"kind":"modifierInvocation","modifierName":{"id":28,"name":"onlyInitializing","nameLocations":["1149:16:0"],"nodeType":"IdentifierPath","referencedDeclaration":325,"src":"1149:16:0"},"nodeType":"ModifierInvocation","src":"1149:16:0"}],"name":"__Ownable_init_unchained","nameLocation":"1113:24:0","nodeType":"FunctionDefinition","parameters":{"id":27,"nodeType":"ParameterList","parameters":[],"src":"1137:2:0"},"returnParameters":{"id":30,"nodeType":"ParameterList","parameters":[],"src":"1166:0:0"},"scope":131,"src":"1104:111:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":44,"nodeType":"Block","src":"1324:41:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":40,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":68,"src":"1334:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":41,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1334:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":42,"nodeType":"ExpressionStatement","src":"1334:13:0"},{"id":43,"nodeType":"PlaceholderStatement","src":"1357:1:0"}]},"documentation":{"id":38,"nodeType":"StructuredDocumentation","src":"1221:77:0","text":" @dev Throws if called by any account other than the owner."},"id":45,"name":"onlyOwner","nameLocation":"1312:9:0","nodeType":"ModifierDefinition","parameters":{"id":39,"nodeType":"ParameterList","parameters":[],"src":"1321:2:0"},"src":"1303:62:0","virtual":false,"visibility":"internal"},{"body":{"id":53,"nodeType":"Block","src":"1496:30:0","statements":[{"expression":{"id":51,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"1513:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":50,"id":52,"nodeType":"Return","src":"1506:13:0"}]},"documentation":{"id":46,"nodeType":"StructuredDocumentation","src":"1371:65:0","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":54,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1450:5:0","nodeType":"FunctionDefinition","parameters":{"id":47,"nodeType":"ParameterList","parameters":[],"src":"1455:2:0"},"returnParameters":{"id":50,"nodeType":"ParameterList","parameters":[{"constant":false,"id":49,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":54,"src":"1487:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":48,"name":"address","nodeType":"ElementaryTypeName","src":"1487:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1486:9:0"},"scope":131,"src":"1441:85:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":67,"nodeType":"Block","src":"1644:85:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":63,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":59,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":54,"src":"1662:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":60,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1662:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":61,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":737,"src":"1673:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":62,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1673:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1662:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":64,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1687:34:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":58,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1654:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":65,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1654:68:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":66,"nodeType":"ExpressionStatement","src":"1654:68:0"}]},"documentation":{"id":55,"nodeType":"StructuredDocumentation","src":"1532:62:0","text":" @dev Throws if the sender is not the owner."},"id":68,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1608:11:0","nodeType":"FunctionDefinition","parameters":{"id":56,"nodeType":"ParameterList","parameters":[],"src":"1619:2:0"},"returnParameters":{"id":57,"nodeType":"ParameterList","parameters":[],"src":"1644:0:0"},"scope":131,"src":"1599:130:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":81,"nodeType":"Block","src":"2118:47:0","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":77,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2155:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":76,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2147:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":75,"name":"address","nodeType":"ElementaryTypeName","src":"2147:7:0","typeDescriptions":{}}},"id":78,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2147:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":74,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":125,"src":"2128:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":79,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2128:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":80,"nodeType":"ExpressionStatement","src":"2128:30:0"}]},"documentation":{"id":69,"nodeType":"StructuredDocumentation","src":"1735:324:0","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":82,"implemented":true,"kind":"function","modifiers":[{"id":72,"kind":"modifierInvocation","modifierName":{"id":71,"name":"onlyOwner","nameLocations":["2108:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"2108:9:0"},"nodeType":"ModifierInvocation","src":"2108:9:0"}],"name":"renounceOwnership","nameLocation":"2073:17:0","nodeType":"FunctionDefinition","parameters":{"id":70,"nodeType":"ParameterList","parameters":[],"src":"2090:2:0"},"returnParameters":{"id":73,"nodeType":"ParameterList","parameters":[],"src":"2118:0:0"},"scope":131,"src":"2064:101:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":104,"nodeType":"Block","src":"2384:128:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":96,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":91,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":85,"src":"2402:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":94,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2422:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":93,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2414:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":92,"name":"address","nodeType":"ElementaryTypeName","src":"2414:7:0","typeDescriptions":{}}},"id":95,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2414:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2402:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":97,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2426:40:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":90,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2394:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":98,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2394:73:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":99,"nodeType":"ExpressionStatement","src":"2394:73:0"},{"expression":{"arguments":[{"id":101,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":85,"src":"2496:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":100,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":125,"src":"2477:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":102,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2477:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":103,"nodeType":"ExpressionStatement","src":"2477:28:0"}]},"documentation":{"id":83,"nodeType":"StructuredDocumentation","src":"2171:138:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":105,"implemented":true,"kind":"function","modifiers":[{"id":88,"kind":"modifierInvocation","modifierName":{"id":87,"name":"onlyOwner","nameLocations":["2374:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"2374:9:0"},"nodeType":"ModifierInvocation","src":"2374:9:0"}],"name":"transferOwnership","nameLocation":"2323:17:0","nodeType":"FunctionDefinition","parameters":{"id":86,"nodeType":"ParameterList","parameters":[{"constant":false,"id":85,"mutability":"mutable","name":"newOwner","nameLocation":"2349:8:0","nodeType":"VariableDeclaration","scope":105,"src":"2341:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":84,"name":"address","nodeType":"ElementaryTypeName","src":"2341:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2340:18:0"},"returnParameters":{"id":89,"nodeType":"ParameterList","parameters":[],"src":"2384:0:0"},"scope":131,"src":"2314:198:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":124,"nodeType":"Block","src":"2729:124:0","statements":[{"assignments":[112],"declarations":[{"constant":false,"id":112,"mutability":"mutable","name":"oldOwner","nameLocation":"2747:8:0","nodeType":"VariableDeclaration","scope":124,"src":"2739:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":111,"name":"address","nodeType":"ElementaryTypeName","src":"2739:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":114,"initialValue":{"id":113,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"2758:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2739:25:0"},{"expression":{"id":117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":115,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":10,"src":"2774:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":116,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":108,"src":"2783:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2774:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":118,"nodeType":"ExpressionStatement","src":"2774:17:0"},{"eventCall":{"arguments":[{"id":120,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112,"src":"2827:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":121,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":108,"src":"2837:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":119,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":16,"src":"2806:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":122,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2806:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":123,"nodeType":"EmitStatement","src":"2801:45:0"}]},"documentation":{"id":106,"nodeType":"StructuredDocumentation","src":"2518:143:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":125,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2675:18:0","nodeType":"FunctionDefinition","parameters":{"id":109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":108,"mutability":"mutable","name":"newOwner","nameLocation":"2702:8:0","nodeType":"VariableDeclaration","scope":125,"src":"2694:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":107,"name":"address","nodeType":"ElementaryTypeName","src":"2694:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2693:18:0"},"returnParameters":{"id":110,"nodeType":"ParameterList","parameters":[],"src":"2729:0:0"},"scope":131,"src":"2666:187:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":126,"nodeType":"StructuredDocumentation","src":"2859:254:0","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":130,"mutability":"mutable","name":"__gap","nameLocation":"3138:5:0","nodeType":"VariableDeclaration","scope":131,"src":"3118:25:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":127,"name":"uint256","nodeType":"ElementaryTypeName","src":"3118:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":129,"length":{"hexValue":"3439","id":128,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3126:2:0","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3118:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":132,"src":"708:2438:0","usedErrors":[]}],"src":"102:3045:0"},"id":0},"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol","exportedSymbols":{"ClonesUpgradeable":[211]},"id":212,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":133,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:1"},{"abstract":false,"baseContracts":[],"canonicalName":"ClonesUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":134,"nodeType":"StructuredDocumentation","src":"125:629:1","text":" @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n deploying minimal proxy contracts, also known as \"clones\".\n > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n deterministic method.\n _Available since v3.4._"},"fullyImplemented":true,"id":211,"linearizedBaseContracts":[211],"name":"ClonesUpgradeable","nameLocation":"763:17:1","nodeType":"ContractDefinition","nodes":[{"body":{"id":153,"nodeType":"Block","src":"1059:684:1","statements":[{"AST":{"nodeType":"YulBlock","src":"1121:549:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1326:4:1","type":"","value":"0x00"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1339:4:1","type":"","value":"0xe8"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1349:4:1","type":"","value":"0x60"},{"name":"implementation","nodeType":"YulIdentifier","src":"1355:14:1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1345:3:1"},"nodeType":"YulFunctionCall","src":"1345:25:1"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1335:3:1"},"nodeType":"YulFunctionCall","src":"1335:36:1"},{"kind":"number","nodeType":"YulLiteral","src":"1373:48:1","type":"","value":"0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1332:2:1"},"nodeType":"YulFunctionCall","src":"1332:90:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1319:6:1"},"nodeType":"YulFunctionCall","src":"1319:104:1"},"nodeType":"YulExpressionStatement","src":"1319:104:1"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1544:4:1","type":"","value":"0x20"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1557:4:1","type":"","value":"0x78"},{"name":"implementation","nodeType":"YulIdentifier","src":"1563:14:1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1553:3:1"},"nodeType":"YulFunctionCall","src":"1553:25:1"},{"kind":"number","nodeType":"YulLiteral","src":"1580:32:1","type":"","value":"0x5af43d82803e903d91602b57fd5bf3"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1550:2:1"},"nodeType":"YulFunctionCall","src":"1550:63:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1537:6:1"},"nodeType":"YulFunctionCall","src":"1537:77:1"},"nodeType":"YulExpressionStatement","src":"1537:77:1"},{"nodeType":"YulAssignment","src":"1627:33:1","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1646:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1649:4:1","type":"","value":"0x09"},{"kind":"number","nodeType":"YulLiteral","src":"1655:4:1","type":"","value":"0x37"}],"functionName":{"name":"create","nodeType":"YulIdentifier","src":"1639:6:1"},"nodeType":"YulFunctionCall","src":"1639:21:1"},"variableNames":[{"name":"instance","nodeType":"YulIdentifier","src":"1627:8:1"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":137,"isOffset":false,"isSlot":false,"src":"1355:14:1","valueSize":1},{"declaration":137,"isOffset":false,"isSlot":false,"src":"1563:14:1","valueSize":1},{"declaration":140,"isOffset":false,"isSlot":false,"src":"1627:8:1","valueSize":1}],"id":142,"nodeType":"InlineAssembly","src":"1112:558:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":144,"name":"instance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":140,"src":"1687:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":147,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1707:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":146,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1699:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":145,"name":"address","nodeType":"ElementaryTypeName","src":"1699:7:1","typeDescriptions":{}}},"id":148,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1699:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1687:22:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313136373a20637265617465206661696c6564","id":150,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1711:24:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_68ca40b61460257f14e69f48b1a4dbc812e9afc6932f127ef8084544457b3335","typeString":"literal_string \"ERC1167: create failed\""},"value":"ERC1167: create failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_68ca40b61460257f14e69f48b1a4dbc812e9afc6932f127ef8084544457b3335","typeString":"literal_string \"ERC1167: create failed\""}],"id":143,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1679:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1679:57:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":152,"nodeType":"ExpressionStatement","src":"1679:57:1"}]},"documentation":{"id":135,"nodeType":"StructuredDocumentation","src":"787:192:1","text":" @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n This function uses the create opcode, which should never revert."},"id":154,"implemented":true,"kind":"function","modifiers":[],"name":"clone","nameLocation":"993:5:1","nodeType":"FunctionDefinition","parameters":{"id":138,"nodeType":"ParameterList","parameters":[{"constant":false,"id":137,"mutability":"mutable","name":"implementation","nameLocation":"1007:14:1","nodeType":"VariableDeclaration","scope":154,"src":"999:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":136,"name":"address","nodeType":"ElementaryTypeName","src":"999:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"998:24:1"},"returnParameters":{"id":141,"nodeType":"ParameterList","parameters":[{"constant":false,"id":140,"mutability":"mutable","name":"instance","nameLocation":"1049:8:1","nodeType":"VariableDeclaration","scope":154,"src":"1041:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":139,"name":"address","nodeType":"ElementaryTypeName","src":"1041:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1040:18:1"},"scope":211,"src":"984:759:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":175,"nodeType":"Block","src":"2220:692:1","statements":[{"AST":{"nodeType":"YulBlock","src":"2282:556:1","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2487:4:1","type":"","value":"0x00"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2500:4:1","type":"","value":"0xe8"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2510:4:1","type":"","value":"0x60"},{"name":"implementation","nodeType":"YulIdentifier","src":"2516:14:1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2506:3:1"},"nodeType":"YulFunctionCall","src":"2506:25:1"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2496:3:1"},"nodeType":"YulFunctionCall","src":"2496:36:1"},{"kind":"number","nodeType":"YulLiteral","src":"2534:48:1","type":"","value":"0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2493:2:1"},"nodeType":"YulFunctionCall","src":"2493:90:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2480:6:1"},"nodeType":"YulFunctionCall","src":"2480:104:1"},"nodeType":"YulExpressionStatement","src":"2480:104:1"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2705:4:1","type":"","value":"0x20"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2718:4:1","type":"","value":"0x78"},{"name":"implementation","nodeType":"YulIdentifier","src":"2724:14:1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2714:3:1"},"nodeType":"YulFunctionCall","src":"2714:25:1"},{"kind":"number","nodeType":"YulLiteral","src":"2741:32:1","type":"","value":"0x5af43d82803e903d91602b57fd5bf3"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2711:2:1"},"nodeType":"YulFunctionCall","src":"2711:63:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2698:6:1"},"nodeType":"YulFunctionCall","src":"2698:77:1"},"nodeType":"YulExpressionStatement","src":"2698:77:1"},{"nodeType":"YulAssignment","src":"2788:40:1","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2808:1:1","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2811:4:1","type":"","value":"0x09"},{"kind":"number","nodeType":"YulLiteral","src":"2817:4:1","type":"","value":"0x37"},{"name":"salt","nodeType":"YulIdentifier","src":"2823:4:1"}],"functionName":{"name":"create2","nodeType":"YulIdentifier","src":"2800:7:1"},"nodeType":"YulFunctionCall","src":"2800:28:1"},"variableNames":[{"name":"instance","nodeType":"YulIdentifier","src":"2788:8:1"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":157,"isOffset":false,"isSlot":false,"src":"2516:14:1","valueSize":1},{"declaration":157,"isOffset":false,"isSlot":false,"src":"2724:14:1","valueSize":1},{"declaration":162,"isOffset":false,"isSlot":false,"src":"2788:8:1","valueSize":1},{"declaration":159,"isOffset":false,"isSlot":false,"src":"2823:4:1","valueSize":1}],"id":164,"nodeType":"InlineAssembly","src":"2273:565:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":166,"name":"instance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":162,"src":"2855:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2875:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":168,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2867:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":167,"name":"address","nodeType":"ElementaryTypeName","src":"2867:7:1","typeDescriptions":{}}},"id":170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2867:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2855:22:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313136373a2063726561746532206661696c6564","id":172,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2879:25:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_4ec050e530ce66e7658278ab7a4e4a2f19225159c48fc52eb249bd268e755d73","typeString":"literal_string \"ERC1167: create2 failed\""},"value":"ERC1167: create2 failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4ec050e530ce66e7658278ab7a4e4a2f19225159c48fc52eb249bd268e755d73","typeString":"literal_string \"ERC1167: create2 failed\""}],"id":165,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2847:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":173,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2847:58:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":174,"nodeType":"ExpressionStatement","src":"2847:58:1"}]},"documentation":{"id":155,"nodeType":"StructuredDocumentation","src":"1749:364:1","text":" @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n This function uses the create2 opcode and a `salt` to deterministically deploy\n the clone. Using the same `implementation` and `salt` multiple time will revert, since\n the clones cannot be deployed twice at the same address."},"id":176,"implemented":true,"kind":"function","modifiers":[],"name":"cloneDeterministic","nameLocation":"2127:18:1","nodeType":"FunctionDefinition","parameters":{"id":160,"nodeType":"ParameterList","parameters":[{"constant":false,"id":157,"mutability":"mutable","name":"implementation","nameLocation":"2154:14:1","nodeType":"VariableDeclaration","scope":176,"src":"2146:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":156,"name":"address","nodeType":"ElementaryTypeName","src":"2146:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":159,"mutability":"mutable","name":"salt","nameLocation":"2178:4:1","nodeType":"VariableDeclaration","scope":176,"src":"2170:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":158,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2170:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2145:38:1"},"returnParameters":{"id":163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":162,"mutability":"mutable","name":"instance","nameLocation":"2210:8:1","nodeType":"VariableDeclaration","scope":176,"src":"2202:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":161,"name":"address","nodeType":"ElementaryTypeName","src":"2202:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2201:18:1"},"scope":211,"src":"2118:794:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":189,"nodeType":"Block","src":"3187:515:1","statements":[{"AST":{"nodeType":"YulBlock","src":"3249:447:1","statements":[{"nodeType":"YulVariableDeclaration","src":"3263:22:1","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3280:4:1","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3274:5:1"},"nodeType":"YulFunctionCall","src":"3274:11:1"},"variables":[{"name":"ptr","nodeType":"YulTypedName","src":"3267:3:1","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"3309:3:1"},{"kind":"number","nodeType":"YulLiteral","src":"3314:4:1","type":"","value":"0x38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3305:3:1"},"nodeType":"YulFunctionCall","src":"3305:14:1"},{"name":"deployer","nodeType":"YulIdentifier","src":"3321:8:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3298:6:1"},"nodeType":"YulFunctionCall","src":"3298:32:1"},"nodeType":"YulExpressionStatement","src":"3298:32:1"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"3354:3:1"},{"kind":"number","nodeType":"YulLiteral","src":"3359:4:1","type":"","value":"0x24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3350:3:1"},"nodeType":"YulFunctionCall","src":"3350:14:1"},{"kind":"number","nodeType":"YulLiteral","src":"3366:34:1","type":"","value":"0x5af43d82803e903d91602b57fd5bf3ff"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3343:6:1"},"nodeType":"YulFunctionCall","src":"3343:58:1"},"nodeType":"YulExpressionStatement","src":"3343:58:1"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"3425:3:1"},{"kind":"number","nodeType":"YulLiteral","src":"3430:4:1","type":"","value":"0x14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3421:3:1"},"nodeType":"YulFunctionCall","src":"3421:14:1"},{"name":"implementation","nodeType":"YulIdentifier","src":"3437:14:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3414:6:1"},"nodeType":"YulFunctionCall","src":"3414:38:1"},"nodeType":"YulExpressionStatement","src":"3414:38:1"},{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"3472:3:1"},{"kind":"number","nodeType":"YulLiteral","src":"3477:42:1","type":"","value":"0x3d602d80600a3d3981f3363d3d373d3d3d363d73"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3465:6:1"},"nodeType":"YulFunctionCall","src":"3465:55:1"},"nodeType":"YulExpressionStatement","src":"3465:55:1"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"3544:3:1"},{"kind":"number","nodeType":"YulLiteral","src":"3549:4:1","type":"","value":"0x58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3540:3:1"},"nodeType":"YulFunctionCall","src":"3540:14:1"},{"name":"salt","nodeType":"YulIdentifier","src":"3556:4:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3533:6:1"},"nodeType":"YulFunctionCall","src":"3533:28:1"},"nodeType":"YulExpressionStatement","src":"3533:28:1"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"3585:3:1"},{"kind":"number","nodeType":"YulLiteral","src":"3590:4:1","type":"","value":"0x78"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3581:3:1"},"nodeType":"YulFunctionCall","src":"3581:14:1"},{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"3611:3:1"},{"kind":"number","nodeType":"YulLiteral","src":"3616:4:1","type":"","value":"0x0c"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3607:3:1"},"nodeType":"YulFunctionCall","src":"3607:14:1"},{"kind":"number","nodeType":"YulLiteral","src":"3623:4:1","type":"","value":"0x37"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"3597:9:1"},"nodeType":"YulFunctionCall","src":"3597:31:1"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3574:6:1"},"nodeType":"YulFunctionCall","src":"3574:55:1"},"nodeType":"YulExpressionStatement","src":"3574:55:1"},{"nodeType":"YulAssignment","src":"3642:44:1","value":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"3669:3:1"},{"kind":"number","nodeType":"YulLiteral","src":"3674:4:1","type":"","value":"0x43"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3665:3:1"},"nodeType":"YulFunctionCall","src":"3665:14:1"},{"kind":"number","nodeType":"YulLiteral","src":"3681:4:1","type":"","value":"0x55"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"3655:9:1"},"nodeType":"YulFunctionCall","src":"3655:31:1"},"variableNames":[{"name":"predicted","nodeType":"YulIdentifier","src":"3642:9:1"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":183,"isOffset":false,"isSlot":false,"src":"3321:8:1","valueSize":1},{"declaration":179,"isOffset":false,"isSlot":false,"src":"3437:14:1","valueSize":1},{"declaration":186,"isOffset":false,"isSlot":false,"src":"3642:9:1","valueSize":1},{"declaration":181,"isOffset":false,"isSlot":false,"src":"3556:4:1","valueSize":1}],"id":188,"nodeType":"InlineAssembly","src":"3240:456:1"}]},"documentation":{"id":177,"nodeType":"StructuredDocumentation","src":"2918:99:1","text":" @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}."},"id":190,"implemented":true,"kind":"function","modifiers":[],"name":"predictDeterministicAddress","nameLocation":"3031:27:1","nodeType":"FunctionDefinition","parameters":{"id":184,"nodeType":"ParameterList","parameters":[{"constant":false,"id":179,"mutability":"mutable","name":"implementation","nameLocation":"3076:14:1","nodeType":"VariableDeclaration","scope":190,"src":"3068:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":178,"name":"address","nodeType":"ElementaryTypeName","src":"3068:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":181,"mutability":"mutable","name":"salt","nameLocation":"3108:4:1","nodeType":"VariableDeclaration","scope":190,"src":"3100:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":180,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3100:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":183,"mutability":"mutable","name":"deployer","nameLocation":"3130:8:1","nodeType":"VariableDeclaration","scope":190,"src":"3122:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":182,"name":"address","nodeType":"ElementaryTypeName","src":"3122:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3058:86:1"},"returnParameters":{"id":187,"nodeType":"ParameterList","parameters":[{"constant":false,"id":186,"mutability":"mutable","name":"predicted","nameLocation":"3176:9:1","nodeType":"VariableDeclaration","scope":190,"src":"3168:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":185,"name":"address","nodeType":"ElementaryTypeName","src":"3168:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3167:19:1"},"scope":211,"src":"3022:680:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":209,"nodeType":"Block","src":"3951:88:1","statements":[{"expression":{"arguments":[{"id":201,"name":"implementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":193,"src":"3996:14:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":202,"name":"salt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":195,"src":"4012:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":205,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4026:4:1","typeDescriptions":{"typeIdentifier":"t_contract$_ClonesUpgradeable_$211","typeString":"library ClonesUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ClonesUpgradeable_$211","typeString":"library ClonesUpgradeable"}],"id":204,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4018:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":203,"name":"address","nodeType":"ElementaryTypeName","src":"4018:7:1","typeDescriptions":{}}},"id":206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4018:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":200,"name":"predictDeterministicAddress","nodeType":"Identifier","overloadedDeclarations":[190,210],"referencedDeclaration":190,"src":"3968:27:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$_t_bytes32_$_t_address_$returns$_t_address_$","typeString":"function (address,bytes32,address) pure returns (address)"}},"id":207,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3968:64:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":199,"id":208,"nodeType":"Return","src":"3961:71:1"}]},"documentation":{"id":191,"nodeType":"StructuredDocumentation","src":"3708:99:1","text":" @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}."},"id":210,"implemented":true,"kind":"function","modifiers":[],"name":"predictDeterministicAddress","nameLocation":"3821:27:1","nodeType":"FunctionDefinition","parameters":{"id":196,"nodeType":"ParameterList","parameters":[{"constant":false,"id":193,"mutability":"mutable","name":"implementation","nameLocation":"3866:14:1","nodeType":"VariableDeclaration","scope":210,"src":"3858:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":192,"name":"address","nodeType":"ElementaryTypeName","src":"3858:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":195,"mutability":"mutable","name":"salt","nameLocation":"3898:4:1","nodeType":"VariableDeclaration","scope":210,"src":"3890:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":194,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3890:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3848:60:1"},"returnParameters":{"id":199,"nodeType":"ParameterList","parameters":[{"constant":false,"id":198,"mutability":"mutable","name":"predicted","nameLocation":"3940:9:1","nodeType":"VariableDeclaration","scope":210,"src":"3932:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":197,"name":"address","nodeType":"ElementaryTypeName","src":"3932:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3931:19:1"},"scope":211,"src":"3812:227:1","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":212,"src":"755:3286:1","usedErrors":[]}],"src":"100:3942:1"},"id":1},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","exportedSymbols":{"AddressUpgradeable":[710],"Initializable":[380]},"id":381,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":213,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"113:23:2"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":214,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":381,"sourceUnit":711,"src":"138:44:2","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"Initializable","contractDependencies":[],"contractKind":"contract","documentation":{"id":215,"nodeType":"StructuredDocumentation","src":"184:2209:2","text":" @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```solidity\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="},"fullyImplemented":true,"id":380,"linearizedBaseContracts":[380],"name":"Initializable","nameLocation":"2412:13:2","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":216,"nodeType":"StructuredDocumentation","src":"2432:109:2","text":" @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"},"id":218,"mutability":"mutable","name":"_initialized","nameLocation":"2560:12:2","nodeType":"VariableDeclaration","scope":380,"src":"2546:26:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":217,"name":"uint8","nodeType":"ElementaryTypeName","src":"2546:5:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"private"},{"constant":false,"documentation":{"id":219,"nodeType":"StructuredDocumentation","src":"2579:91:2","text":" @dev Indicates that the contract is in the process of being initialized."},"id":221,"mutability":"mutable","name":"_initializing","nameLocation":"2688:13:2","nodeType":"VariableDeclaration","scope":380,"src":"2675:26:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":220,"name":"bool","nodeType":"ElementaryTypeName","src":"2675:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"anonymous":false,"documentation":{"id":222,"nodeType":"StructuredDocumentation","src":"2708:90:2","text":" @dev Triggered when the contract has been initialized or reinitialized."},"eventSelector":"7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498","id":226,"name":"Initialized","nameLocation":"2809:11:2","nodeType":"EventDefinition","parameters":{"id":225,"nodeType":"ParameterList","parameters":[{"constant":false,"id":224,"indexed":false,"mutability":"mutable","name":"version","nameLocation":"2827:7:2","nodeType":"VariableDeclaration","scope":226,"src":"2821:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":223,"name":"uint8","nodeType":"ElementaryTypeName","src":"2821:5:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2820:15:2"},"src":"2803:33:2"},{"body":{"id":281,"nodeType":"Block","src":"3269:483:2","statements":[{"assignments":[230],"declarations":[{"constant":false,"id":230,"mutability":"mutable","name":"isTopLevelCall","nameLocation":"3284:14:2","nodeType":"VariableDeclaration","scope":281,"src":"3279:19:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":229,"name":"bool","nodeType":"ElementaryTypeName","src":"3279:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":233,"initialValue":{"id":232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3301:14:2","subExpression":{"id":231,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":221,"src":"3302:13:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3279:36:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":235,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":230,"src":"3347:14:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":236,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":218,"src":"3365:12:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"31","id":237,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3380:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3365:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3347:34:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":240,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3346:36:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3387:45:2","subExpression":{"arguments":[{"arguments":[{"id":245,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3426:4:2","typeDescriptions":{"typeIdentifier":"t_contract$_Initializable_$380","typeString":"contract Initializable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Initializable_$380","typeString":"contract Initializable"}],"id":244,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3418:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":243,"name":"address","nodeType":"ElementaryTypeName","src":"3418:7:2","typeDescriptions":{}}},"id":246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3418:13:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":241,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":710,"src":"3388:18:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$710_$","typeString":"type(library AddressUpgradeable)"}},"id":242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3407:10:2","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":398,"src":"3388:29:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3388:44:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":249,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":218,"src":"3436:12:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3452:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3436:17:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3387:66:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":253,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3386:68:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3346:108:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3468:48:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":234,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3325:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":256,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3325:201:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":257,"nodeType":"ExpressionStatement","src":"3325:201:2"},{"expression":{"id":260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":258,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":218,"src":"3536:12:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":259,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3551:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3536:16:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":261,"nodeType":"ExpressionStatement","src":"3536:16:2"},{"condition":{"id":262,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":230,"src":"3566:14:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":268,"nodeType":"IfStatement","src":"3562:65:2","trueBody":{"id":267,"nodeType":"Block","src":"3582:45:2","statements":[{"expression":{"id":265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":263,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":221,"src":"3596:13:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":264,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3612:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3596:20:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":266,"nodeType":"ExpressionStatement","src":"3596:20:2"}]}},{"id":269,"nodeType":"PlaceholderStatement","src":"3636:1:2"},{"condition":{"id":270,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":230,"src":"3651:14:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":280,"nodeType":"IfStatement","src":"3647:99:2","trueBody":{"id":279,"nodeType":"Block","src":"3667:79:2","statements":[{"expression":{"id":273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":271,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":221,"src":"3681:13:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":272,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3697:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3681:21:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":274,"nodeType":"ExpressionStatement","src":"3681:21:2"},{"eventCall":{"arguments":[{"hexValue":"31","id":276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3733:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":275,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":226,"src":"3721:11:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3721:14:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":278,"nodeType":"EmitStatement","src":"3716:19:2"}]}}]},"documentation":{"id":227,"nodeType":"StructuredDocumentation","src":"2842:399:2","text":" @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n constructor.\n Emits an {Initialized} event."},"id":282,"name":"initializer","nameLocation":"3255:11:2","nodeType":"ModifierDefinition","parameters":{"id":228,"nodeType":"ParameterList","parameters":[],"src":"3266:2:2"},"src":"3246:506:2","virtual":false,"visibility":"internal"},{"body":{"id":314,"nodeType":"Block","src":"4863:255:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4881:14:2","subExpression":{"id":288,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":221,"src":"4882:13:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":290,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":218,"src":"4899:12:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":291,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":285,"src":"4914:7:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4899:22:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4881:40:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":294,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4923:48:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":287,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4873:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":295,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4873:99:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":296,"nodeType":"ExpressionStatement","src":"4873:99:2"},{"expression":{"id":299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":297,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":218,"src":"4982:12:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":298,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":285,"src":"4997:7:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4982:22:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":300,"nodeType":"ExpressionStatement","src":"4982:22:2"},{"expression":{"id":303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":301,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":221,"src":"5014:13:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":302,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5030:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5014:20:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":304,"nodeType":"ExpressionStatement","src":"5014:20:2"},{"id":305,"nodeType":"PlaceholderStatement","src":"5044:1:2"},{"expression":{"id":308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":306,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":221,"src":"5055:13:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5071:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"5055:21:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":309,"nodeType":"ExpressionStatement","src":"5055:21:2"},{"eventCall":{"arguments":[{"id":311,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":285,"src":"5103:7:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":310,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":226,"src":"5091:11:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":312,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5091:20:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":313,"nodeType":"EmitStatement","src":"5086:25:2"}]},"documentation":{"id":283,"nodeType":"StructuredDocumentation","src":"3758:1062:2","text":" @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: setting the version to 255 will prevent any future reinitialization.\n Emits an {Initialized} event."},"id":315,"name":"reinitializer","nameLocation":"4834:13:2","nodeType":"ModifierDefinition","parameters":{"id":286,"nodeType":"ParameterList","parameters":[{"constant":false,"id":285,"mutability":"mutable","name":"version","nameLocation":"4854:7:2","nodeType":"VariableDeclaration","scope":315,"src":"4848:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":284,"name":"uint8","nodeType":"ElementaryTypeName","src":"4848:5:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"4847:15:2"},"src":"4825:293:2","virtual":false,"visibility":"internal"},{"body":{"id":324,"nodeType":"Block","src":"5356:97:2","statements":[{"expression":{"arguments":[{"id":319,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":221,"src":"5374:13:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67","id":320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5389:45:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""},"value":"Initializable: contract is not initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""}],"id":318,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5366:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":321,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5366:69:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":322,"nodeType":"ExpressionStatement","src":"5366:69:2"},{"id":323,"nodeType":"PlaceholderStatement","src":"5445:1:2"}]},"documentation":{"id":316,"nodeType":"StructuredDocumentation","src":"5124:199:2","text":" @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."},"id":325,"name":"onlyInitializing","nameLocation":"5337:16:2","nodeType":"ModifierDefinition","parameters":{"id":317,"nodeType":"ParameterList","parameters":[],"src":"5353:2:2"},"src":"5328:125:2","virtual":false,"visibility":"internal"},{"body":{"id":360,"nodeType":"Block","src":"5988:231:2","statements":[{"expression":{"arguments":[{"id":331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6006:14:2","subExpression":{"id":330,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":221,"src":"6007:13:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67","id":332,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6022:41:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""},"value":"Initializable: contract is initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""}],"id":329,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5998:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":333,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5998:66:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":334,"nodeType":"ExpressionStatement","src":"5998:66:2"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":335,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":218,"src":"6078:12:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":338,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6099:5:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":337,"name":"uint8","nodeType":"ElementaryTypeName","src":"6099:5:2","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":336,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6094:4:2","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":339,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6094:11:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":340,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6106:3:2","memberName":"max","nodeType":"MemberAccess","src":"6094:15:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6078:31:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":359,"nodeType":"IfStatement","src":"6074:139:2","trueBody":{"id":358,"nodeType":"Block","src":"6111:102:2","statements":[{"expression":{"id":348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":342,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":218,"src":"6125:12:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":345,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6145:5:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":344,"name":"uint8","nodeType":"ElementaryTypeName","src":"6145:5:2","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":343,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6140:4:2","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6140:11:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":347,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6152:3:2","memberName":"max","nodeType":"MemberAccess","src":"6140:15:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6125:30:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":349,"nodeType":"ExpressionStatement","src":"6125:30:2"},{"eventCall":{"arguments":[{"expression":{"arguments":[{"id":353,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6191:5:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":352,"name":"uint8","nodeType":"ElementaryTypeName","src":"6191:5:2","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":351,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6186:4:2","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":354,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6186:11:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":355,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6198:3:2","memberName":"max","nodeType":"MemberAccess","src":"6186:15:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":350,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":226,"src":"6174:11:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":356,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6174:28:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":357,"nodeType":"EmitStatement","src":"6169:33:2"}]}}]},"documentation":{"id":326,"nodeType":"StructuredDocumentation","src":"5459:475:2","text":" @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."},"id":361,"implemented":true,"kind":"function","modifiers":[],"name":"_disableInitializers","nameLocation":"5948:20:2","nodeType":"FunctionDefinition","parameters":{"id":327,"nodeType":"ParameterList","parameters":[],"src":"5968:2:2"},"returnParameters":{"id":328,"nodeType":"ParameterList","parameters":[],"src":"5988:0:2"},"scope":380,"src":"5939:280:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":369,"nodeType":"Block","src":"6393:36:2","statements":[{"expression":{"id":367,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":218,"src":"6410:12:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":366,"id":368,"nodeType":"Return","src":"6403:19:2"}]},"documentation":{"id":362,"nodeType":"StructuredDocumentation","src":"6225:99:2","text":" @dev Returns the highest version that has been initialized. See {reinitializer}."},"id":370,"implemented":true,"kind":"function","modifiers":[],"name":"_getInitializedVersion","nameLocation":"6338:22:2","nodeType":"FunctionDefinition","parameters":{"id":363,"nodeType":"ParameterList","parameters":[],"src":"6360:2:2"},"returnParameters":{"id":366,"nodeType":"ParameterList","parameters":[{"constant":false,"id":365,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":370,"src":"6386:5:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":364,"name":"uint8","nodeType":"ElementaryTypeName","src":"6386:5:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"6385:7:2"},"scope":380,"src":"6329:100:2","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":378,"nodeType":"Block","src":"6601:37:2","statements":[{"expression":{"id":376,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":221,"src":"6618:13:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":375,"id":377,"nodeType":"Return","src":"6611:20:2"}]},"documentation":{"id":371,"nodeType":"StructuredDocumentation","src":"6435:105:2","text":" @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."},"id":379,"implemented":true,"kind":"function","modifiers":[],"name":"_isInitializing","nameLocation":"6554:15:2","nodeType":"FunctionDefinition","parameters":{"id":372,"nodeType":"ParameterList","parameters":[],"src":"6569:2:2"},"returnParameters":{"id":375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":374,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":379,"src":"6595:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":373,"name":"bool","nodeType":"ElementaryTypeName","src":"6595:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6594:6:2"},"scope":380,"src":"6545:93:2","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":381,"src":"2394:4246:2","usedErrors":[]}],"src":"113:6528:2"},"id":2},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[710]},"id":711,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":382,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:3"},{"abstract":false,"baseContracts":[],"canonicalName":"AddressUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":383,"nodeType":"StructuredDocumentation","src":"126:67:3","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":710,"linearizedBaseContracts":[710],"name":"AddressUpgradeable","nameLocation":"202:18:3","nodeType":"ContractDefinition","nodes":[{"body":{"id":397,"nodeType":"Block","src":"1489:254:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":391,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":386,"src":"1713:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1721:4:3","memberName":"code","nodeType":"MemberAccess","src":"1713:12:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1726:6:3","memberName":"length","nodeType":"MemberAccess","src":"1713:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":394,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1735:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1713:23:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":390,"id":396,"nodeType":"Return","src":"1706:30:3"}]},"documentation":{"id":384,"nodeType":"StructuredDocumentation","src":"227:1191:3","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":398,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1432:10:3","nodeType":"FunctionDefinition","parameters":{"id":387,"nodeType":"ParameterList","parameters":[{"constant":false,"id":386,"mutability":"mutable","name":"account","nameLocation":"1451:7:3","nodeType":"VariableDeclaration","scope":398,"src":"1443:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":385,"name":"address","nodeType":"ElementaryTypeName","src":"1443:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1442:17:3"},"returnParameters":{"id":390,"nodeType":"ParameterList","parameters":[{"constant":false,"id":389,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":398,"src":"1483:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":388,"name":"bool","nodeType":"ElementaryTypeName","src":"1483:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1482:6:3"},"scope":710,"src":"1423:320:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":431,"nodeType":"Block","src":"2729:241:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":409,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2755:4:3","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$710","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$710","typeString":"library AddressUpgradeable"}],"id":408,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2747:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":407,"name":"address","nodeType":"ElementaryTypeName","src":"2747:7:3","typeDescriptions":{}}},"id":410,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2747:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2761:7:3","memberName":"balance","nodeType":"MemberAccess","src":"2747:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":412,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":403,"src":"2772:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2747:31:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2780:31:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":406,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2739:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":415,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2739:73:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":416,"nodeType":"ExpressionStatement","src":"2739:73:3"},{"assignments":[418,null],"declarations":[{"constant":false,"id":418,"mutability":"mutable","name":"success","nameLocation":"2829:7:3","nodeType":"VariableDeclaration","scope":431,"src":"2824:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":417,"name":"bool","nodeType":"ElementaryTypeName","src":"2824:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":425,"initialValue":{"arguments":[{"hexValue":"","id":423,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2872:2:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":419,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":401,"src":"2842:9:3","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2852:4:3","memberName":"call","nodeType":"MemberAccess","src":"2842:14:3","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":421,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":403,"src":"2864:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2842:29:3","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":424,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2842:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2823:52:3"},{"expression":{"arguments":[{"id":427,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"2893:7:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":428,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2902:60:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":426,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2885:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":429,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2885:78:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":430,"nodeType":"ExpressionStatement","src":"2885:78:3"}]},"documentation":{"id":399,"nodeType":"StructuredDocumentation","src":"1749:904:3","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":432,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2667:9:3","nodeType":"FunctionDefinition","parameters":{"id":404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":401,"mutability":"mutable","name":"recipient","nameLocation":"2693:9:3","nodeType":"VariableDeclaration","scope":432,"src":"2677:25:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":400,"name":"address","nodeType":"ElementaryTypeName","src":"2677:15:3","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":403,"mutability":"mutable","name":"amount","nameLocation":"2712:6:3","nodeType":"VariableDeclaration","scope":432,"src":"2704:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":402,"name":"uint256","nodeType":"ElementaryTypeName","src":"2704:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2676:43:3"},"returnParameters":{"id":405,"nodeType":"ParameterList","parameters":[],"src":"2729:0:3"},"scope":710,"src":"2658:312:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":449,"nodeType":"Block","src":"3801:96:3","statements":[{"expression":{"arguments":[{"id":443,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":435,"src":"3840:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":444,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":437,"src":"3848:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":445,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3854:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":446,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3857:32:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":442,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[490,534],"referencedDeclaration":534,"src":"3818:21:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":447,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3818:72:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":441,"id":448,"nodeType":"Return","src":"3811:79:3"}]},"documentation":{"id":433,"nodeType":"StructuredDocumentation","src":"2976:731:3","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":450,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3721:12:3","nodeType":"FunctionDefinition","parameters":{"id":438,"nodeType":"ParameterList","parameters":[{"constant":false,"id":435,"mutability":"mutable","name":"target","nameLocation":"3742:6:3","nodeType":"VariableDeclaration","scope":450,"src":"3734:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":434,"name":"address","nodeType":"ElementaryTypeName","src":"3734:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":437,"mutability":"mutable","name":"data","nameLocation":"3763:4:3","nodeType":"VariableDeclaration","scope":450,"src":"3750:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":436,"name":"bytes","nodeType":"ElementaryTypeName","src":"3750:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3733:35:3"},"returnParameters":{"id":441,"nodeType":"ParameterList","parameters":[{"constant":false,"id":440,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":450,"src":"3787:12:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":439,"name":"bytes","nodeType":"ElementaryTypeName","src":"3787:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3786:14:3"},"scope":710,"src":"3712:185:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":469,"nodeType":"Block","src":"4266:76:3","statements":[{"expression":{"arguments":[{"id":463,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"4305:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":464,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":455,"src":"4313:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":465,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4319:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":466,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":457,"src":"4322:12:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":462,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[490,534],"referencedDeclaration":534,"src":"4283:21:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":467,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4283:52:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":461,"id":468,"nodeType":"Return","src":"4276:59:3"}]},"documentation":{"id":451,"nodeType":"StructuredDocumentation","src":"3903:211:3","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":470,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4128:12:3","nodeType":"FunctionDefinition","parameters":{"id":458,"nodeType":"ParameterList","parameters":[{"constant":false,"id":453,"mutability":"mutable","name":"target","nameLocation":"4158:6:3","nodeType":"VariableDeclaration","scope":470,"src":"4150:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":452,"name":"address","nodeType":"ElementaryTypeName","src":"4150:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":455,"mutability":"mutable","name":"data","nameLocation":"4187:4:3","nodeType":"VariableDeclaration","scope":470,"src":"4174:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":454,"name":"bytes","nodeType":"ElementaryTypeName","src":"4174:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":457,"mutability":"mutable","name":"errorMessage","nameLocation":"4215:12:3","nodeType":"VariableDeclaration","scope":470,"src":"4201:26:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":456,"name":"string","nodeType":"ElementaryTypeName","src":"4201:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4140:93:3"},"returnParameters":{"id":461,"nodeType":"ParameterList","parameters":[{"constant":false,"id":460,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":470,"src":"4252:12:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":459,"name":"bytes","nodeType":"ElementaryTypeName","src":"4252:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4251:14:3"},"scope":710,"src":"4119:223:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":489,"nodeType":"Block","src":"4817:111:3","statements":[{"expression":{"arguments":[{"id":483,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":473,"src":"4856:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":484,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":475,"src":"4864:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":485,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":477,"src":"4870:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":486,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4877:43:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":482,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[490,534],"referencedDeclaration":534,"src":"4834:21:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":487,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4834:87:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":481,"id":488,"nodeType":"Return","src":"4827:94:3"}]},"documentation":{"id":471,"nodeType":"StructuredDocumentation","src":"4348:351:3","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":490,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4713:21:3","nodeType":"FunctionDefinition","parameters":{"id":478,"nodeType":"ParameterList","parameters":[{"constant":false,"id":473,"mutability":"mutable","name":"target","nameLocation":"4743:6:3","nodeType":"VariableDeclaration","scope":490,"src":"4735:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":472,"name":"address","nodeType":"ElementaryTypeName","src":"4735:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":475,"mutability":"mutable","name":"data","nameLocation":"4764:4:3","nodeType":"VariableDeclaration","scope":490,"src":"4751:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":474,"name":"bytes","nodeType":"ElementaryTypeName","src":"4751:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":477,"mutability":"mutable","name":"value","nameLocation":"4778:5:3","nodeType":"VariableDeclaration","scope":490,"src":"4770:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":476,"name":"uint256","nodeType":"ElementaryTypeName","src":"4770:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4734:50:3"},"returnParameters":{"id":481,"nodeType":"ParameterList","parameters":[{"constant":false,"id":480,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":490,"src":"4803:12:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":479,"name":"bytes","nodeType":"ElementaryTypeName","src":"4803:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4802:14:3"},"scope":710,"src":"4704:224:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":533,"nodeType":"Block","src":"5355:267:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":507,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5381:4:3","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$710","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$710","typeString":"library AddressUpgradeable"}],"id":506,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5373:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":505,"name":"address","nodeType":"ElementaryTypeName","src":"5373:7:3","typeDescriptions":{}}},"id":508,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5373:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5387:7:3","memberName":"balance","nodeType":"MemberAccess","src":"5373:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":510,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":497,"src":"5398:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5373:30:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":512,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5405:40:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":504,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5365:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":513,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5365:81:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":514,"nodeType":"ExpressionStatement","src":"5365:81:3"},{"assignments":[516,518],"declarations":[{"constant":false,"id":516,"mutability":"mutable","name":"success","nameLocation":"5462:7:3","nodeType":"VariableDeclaration","scope":533,"src":"5457:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":515,"name":"bool","nodeType":"ElementaryTypeName","src":"5457:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":518,"mutability":"mutable","name":"returndata","nameLocation":"5484:10:3","nodeType":"VariableDeclaration","scope":533,"src":"5471:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":517,"name":"bytes","nodeType":"ElementaryTypeName","src":"5471:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":525,"initialValue":{"arguments":[{"id":523,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":495,"src":"5524:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":519,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":493,"src":"5498:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5505:4:3","memberName":"call","nodeType":"MemberAccess","src":"5498:11:3","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":521,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":497,"src":"5517:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5498:25:3","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":524,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5498:31:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5456:73:3"},{"expression":{"arguments":[{"id":527,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":493,"src":"5573:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":528,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":516,"src":"5581:7:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":529,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":518,"src":"5590:10:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":530,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":499,"src":"5602:12:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":526,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":665,"src":"5546:26:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":531,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5546:69:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":503,"id":532,"nodeType":"Return","src":"5539:76:3"}]},"documentation":{"id":491,"nodeType":"StructuredDocumentation","src":"4934:237:3","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":534,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5185:21:3","nodeType":"FunctionDefinition","parameters":{"id":500,"nodeType":"ParameterList","parameters":[{"constant":false,"id":493,"mutability":"mutable","name":"target","nameLocation":"5224:6:3","nodeType":"VariableDeclaration","scope":534,"src":"5216:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":492,"name":"address","nodeType":"ElementaryTypeName","src":"5216:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":495,"mutability":"mutable","name":"data","nameLocation":"5253:4:3","nodeType":"VariableDeclaration","scope":534,"src":"5240:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":494,"name":"bytes","nodeType":"ElementaryTypeName","src":"5240:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":497,"mutability":"mutable","name":"value","nameLocation":"5275:5:3","nodeType":"VariableDeclaration","scope":534,"src":"5267:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":496,"name":"uint256","nodeType":"ElementaryTypeName","src":"5267:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":499,"mutability":"mutable","name":"errorMessage","nameLocation":"5304:12:3","nodeType":"VariableDeclaration","scope":534,"src":"5290:26:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":498,"name":"string","nodeType":"ElementaryTypeName","src":"5290:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5206:116:3"},"returnParameters":{"id":503,"nodeType":"ParameterList","parameters":[{"constant":false,"id":502,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":534,"src":"5341:12:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":501,"name":"bytes","nodeType":"ElementaryTypeName","src":"5341:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5340:14:3"},"scope":710,"src":"5176:446:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":550,"nodeType":"Block","src":"5899:97:3","statements":[{"expression":{"arguments":[{"id":545,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":537,"src":"5935:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":546,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":539,"src":"5943:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":547,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5949:39:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":544,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[551,580],"referencedDeclaration":580,"src":"5916:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":548,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5916:73:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":543,"id":549,"nodeType":"Return","src":"5909:80:3"}]},"documentation":{"id":535,"nodeType":"StructuredDocumentation","src":"5628:166:3","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":551,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5808:18:3","nodeType":"FunctionDefinition","parameters":{"id":540,"nodeType":"ParameterList","parameters":[{"constant":false,"id":537,"mutability":"mutable","name":"target","nameLocation":"5835:6:3","nodeType":"VariableDeclaration","scope":551,"src":"5827:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":536,"name":"address","nodeType":"ElementaryTypeName","src":"5827:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":539,"mutability":"mutable","name":"data","nameLocation":"5856:4:3","nodeType":"VariableDeclaration","scope":551,"src":"5843:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":538,"name":"bytes","nodeType":"ElementaryTypeName","src":"5843:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5826:35:3"},"returnParameters":{"id":543,"nodeType":"ParameterList","parameters":[{"constant":false,"id":542,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":551,"src":"5885:12:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":541,"name":"bytes","nodeType":"ElementaryTypeName","src":"5885:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5884:14:3"},"scope":710,"src":"5799:197:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":579,"nodeType":"Block","src":"6338:168:3","statements":[{"assignments":[564,566],"declarations":[{"constant":false,"id":564,"mutability":"mutable","name":"success","nameLocation":"6354:7:3","nodeType":"VariableDeclaration","scope":579,"src":"6349:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":563,"name":"bool","nodeType":"ElementaryTypeName","src":"6349:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":566,"mutability":"mutable","name":"returndata","nameLocation":"6376:10:3","nodeType":"VariableDeclaration","scope":579,"src":"6363:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":565,"name":"bytes","nodeType":"ElementaryTypeName","src":"6363:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":571,"initialValue":{"arguments":[{"id":569,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":556,"src":"6408:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":567,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"6390:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6397:10:3","memberName":"staticcall","nodeType":"MemberAccess","src":"6390:17:3","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":570,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6390:23:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6348:65:3"},{"expression":{"arguments":[{"id":573,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":554,"src":"6457:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":574,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":564,"src":"6465:7:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":575,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":566,"src":"6474:10:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":576,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":558,"src":"6486:12:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":572,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":665,"src":"6430:26:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":577,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6430:69:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":562,"id":578,"nodeType":"Return","src":"6423:76:3"}]},"documentation":{"id":552,"nodeType":"StructuredDocumentation","src":"6002:173:3","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":580,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6189:18:3","nodeType":"FunctionDefinition","parameters":{"id":559,"nodeType":"ParameterList","parameters":[{"constant":false,"id":554,"mutability":"mutable","name":"target","nameLocation":"6225:6:3","nodeType":"VariableDeclaration","scope":580,"src":"6217:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":553,"name":"address","nodeType":"ElementaryTypeName","src":"6217:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":556,"mutability":"mutable","name":"data","nameLocation":"6254:4:3","nodeType":"VariableDeclaration","scope":580,"src":"6241:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":555,"name":"bytes","nodeType":"ElementaryTypeName","src":"6241:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":558,"mutability":"mutable","name":"errorMessage","nameLocation":"6282:12:3","nodeType":"VariableDeclaration","scope":580,"src":"6268:26:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":557,"name":"string","nodeType":"ElementaryTypeName","src":"6268:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6207:93:3"},"returnParameters":{"id":562,"nodeType":"ParameterList","parameters":[{"constant":false,"id":561,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":580,"src":"6324:12:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":560,"name":"bytes","nodeType":"ElementaryTypeName","src":"6324:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6323:14:3"},"scope":710,"src":"6180:326:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":596,"nodeType":"Block","src":"6782:101:3","statements":[{"expression":{"arguments":[{"id":591,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":583,"src":"6820:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":592,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":585,"src":"6828:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":593,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6834:41:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":590,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[597,626],"referencedDeclaration":626,"src":"6799:20:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":594,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6799:77:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":589,"id":595,"nodeType":"Return","src":"6792:84:3"}]},"documentation":{"id":581,"nodeType":"StructuredDocumentation","src":"6512:168:3","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":597,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6694:20:3","nodeType":"FunctionDefinition","parameters":{"id":586,"nodeType":"ParameterList","parameters":[{"constant":false,"id":583,"mutability":"mutable","name":"target","nameLocation":"6723:6:3","nodeType":"VariableDeclaration","scope":597,"src":"6715:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":582,"name":"address","nodeType":"ElementaryTypeName","src":"6715:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":585,"mutability":"mutable","name":"data","nameLocation":"6744:4:3","nodeType":"VariableDeclaration","scope":597,"src":"6731:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":584,"name":"bytes","nodeType":"ElementaryTypeName","src":"6731:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6714:35:3"},"returnParameters":{"id":589,"nodeType":"ParameterList","parameters":[{"constant":false,"id":588,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":597,"src":"6768:12:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":587,"name":"bytes","nodeType":"ElementaryTypeName","src":"6768:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6767:14:3"},"scope":710,"src":"6685:198:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":625,"nodeType":"Block","src":"7224:170:3","statements":[{"assignments":[610,612],"declarations":[{"constant":false,"id":610,"mutability":"mutable","name":"success","nameLocation":"7240:7:3","nodeType":"VariableDeclaration","scope":625,"src":"7235:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":609,"name":"bool","nodeType":"ElementaryTypeName","src":"7235:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":612,"mutability":"mutable","name":"returndata","nameLocation":"7262:10:3","nodeType":"VariableDeclaration","scope":625,"src":"7249:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":611,"name":"bytes","nodeType":"ElementaryTypeName","src":"7249:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":617,"initialValue":{"arguments":[{"id":615,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":602,"src":"7296:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":613,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":600,"src":"7276:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7283:12:3","memberName":"delegatecall","nodeType":"MemberAccess","src":"7276:19:3","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":616,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7276:25:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7234:67:3"},{"expression":{"arguments":[{"id":619,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":600,"src":"7345:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":620,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":610,"src":"7353:7:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":621,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"7362:10:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":622,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"7374:12:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":618,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":665,"src":"7318:26:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":623,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7318:69:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":608,"id":624,"nodeType":"Return","src":"7311:76:3"}]},"documentation":{"id":598,"nodeType":"StructuredDocumentation","src":"6889:175:3","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":626,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7078:20:3","nodeType":"FunctionDefinition","parameters":{"id":605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":600,"mutability":"mutable","name":"target","nameLocation":"7116:6:3","nodeType":"VariableDeclaration","scope":626,"src":"7108:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":599,"name":"address","nodeType":"ElementaryTypeName","src":"7108:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":602,"mutability":"mutable","name":"data","nameLocation":"7145:4:3","nodeType":"VariableDeclaration","scope":626,"src":"7132:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":601,"name":"bytes","nodeType":"ElementaryTypeName","src":"7132:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":604,"mutability":"mutable","name":"errorMessage","nameLocation":"7173:12:3","nodeType":"VariableDeclaration","scope":626,"src":"7159:26:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":603,"name":"string","nodeType":"ElementaryTypeName","src":"7159:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7098:93:3"},"returnParameters":{"id":608,"nodeType":"ParameterList","parameters":[{"constant":false,"id":607,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":626,"src":"7210:12:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":606,"name":"bytes","nodeType":"ElementaryTypeName","src":"7210:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7209:14:3"},"scope":710,"src":"7069:325:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":664,"nodeType":"Block","src":"7876:434:3","statements":[{"condition":{"id":640,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":631,"src":"7890:7:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":662,"nodeType":"Block","src":"8246:58:3","statements":[{"expression":{"arguments":[{"id":658,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"8268:10:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":659,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":635,"src":"8280:12:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":657,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":709,"src":"8260:7:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":660,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8260:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":661,"nodeType":"ExpressionStatement","src":"8260:33:3"}]},"id":663,"nodeType":"IfStatement","src":"7886:418:3","trueBody":{"id":656,"nodeType":"Block","src":"7899:341:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":641,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"7917:10:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7928:6:3","memberName":"length","nodeType":"MemberAccess","src":"7917:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":643,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7938:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7917:22:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":653,"nodeType":"IfStatement","src":"7913:286:3","trueBody":{"id":652,"nodeType":"Block","src":"7941:258:3","statements":[{"expression":{"arguments":[{"arguments":[{"id":647,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":629,"src":"8143:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":646,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":398,"src":"8132:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":648,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8132:18:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":649,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8152:31:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":645,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8124:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":650,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8124:60:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":651,"nodeType":"ExpressionStatement","src":"8124:60:3"}]}},{"expression":{"id":654,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"8219:10:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":639,"id":655,"nodeType":"Return","src":"8212:17:3"}]}}]},"documentation":{"id":627,"nodeType":"StructuredDocumentation","src":"7400:277:3","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":665,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7691:26:3","nodeType":"FunctionDefinition","parameters":{"id":636,"nodeType":"ParameterList","parameters":[{"constant":false,"id":629,"mutability":"mutable","name":"target","nameLocation":"7735:6:3","nodeType":"VariableDeclaration","scope":665,"src":"7727:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":628,"name":"address","nodeType":"ElementaryTypeName","src":"7727:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":631,"mutability":"mutable","name":"success","nameLocation":"7756:7:3","nodeType":"VariableDeclaration","scope":665,"src":"7751:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":630,"name":"bool","nodeType":"ElementaryTypeName","src":"7751:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":633,"mutability":"mutable","name":"returndata","nameLocation":"7786:10:3","nodeType":"VariableDeclaration","scope":665,"src":"7773:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":632,"name":"bytes","nodeType":"ElementaryTypeName","src":"7773:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":635,"mutability":"mutable","name":"errorMessage","nameLocation":"7820:12:3","nodeType":"VariableDeclaration","scope":665,"src":"7806:26:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":634,"name":"string","nodeType":"ElementaryTypeName","src":"7806:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7717:121:3"},"returnParameters":{"id":639,"nodeType":"ParameterList","parameters":[{"constant":false,"id":638,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":665,"src":"7862:12:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":637,"name":"bytes","nodeType":"ElementaryTypeName","src":"7862:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7861:14:3"},"scope":710,"src":"7682:628:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":688,"nodeType":"Block","src":"8691:135:3","statements":[{"condition":{"id":677,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":668,"src":"8705:7:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":686,"nodeType":"Block","src":"8762:58:3","statements":[{"expression":{"arguments":[{"id":682,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":670,"src":"8784:10:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":683,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":672,"src":"8796:12:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":681,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":709,"src":"8776:7:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":684,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8776:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":685,"nodeType":"ExpressionStatement","src":"8776:33:3"}]},"id":687,"nodeType":"IfStatement","src":"8701:119:3","trueBody":{"id":680,"nodeType":"Block","src":"8714:42:3","statements":[{"expression":{"id":678,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":670,"src":"8735:10:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":676,"id":679,"nodeType":"Return","src":"8728:17:3"}]}}]},"documentation":{"id":666,"nodeType":"StructuredDocumentation","src":"8316:210:3","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":689,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8540:16:3","nodeType":"FunctionDefinition","parameters":{"id":673,"nodeType":"ParameterList","parameters":[{"constant":false,"id":668,"mutability":"mutable","name":"success","nameLocation":"8571:7:3","nodeType":"VariableDeclaration","scope":689,"src":"8566:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":667,"name":"bool","nodeType":"ElementaryTypeName","src":"8566:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":670,"mutability":"mutable","name":"returndata","nameLocation":"8601:10:3","nodeType":"VariableDeclaration","scope":689,"src":"8588:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":669,"name":"bytes","nodeType":"ElementaryTypeName","src":"8588:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":672,"mutability":"mutable","name":"errorMessage","nameLocation":"8635:12:3","nodeType":"VariableDeclaration","scope":689,"src":"8621:26:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":671,"name":"string","nodeType":"ElementaryTypeName","src":"8621:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8556:97:3"},"returnParameters":{"id":676,"nodeType":"ParameterList","parameters":[{"constant":false,"id":675,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":689,"src":"8677:12:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":674,"name":"bytes","nodeType":"ElementaryTypeName","src":"8677:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8676:14:3"},"scope":710,"src":"8531:295:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":708,"nodeType":"Block","src":"8915:457:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":696,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":691,"src":"8991:10:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9002:6:3","memberName":"length","nodeType":"MemberAccess","src":"8991:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":698,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9011:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8991:21:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":706,"nodeType":"Block","src":"9321:45:3","statements":[{"expression":{"arguments":[{"id":703,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":693,"src":"9342:12:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":702,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9335:6:3","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":704,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9335:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":705,"nodeType":"ExpressionStatement","src":"9335:20:3"}]},"id":707,"nodeType":"IfStatement","src":"8987:379:3","trueBody":{"id":701,"nodeType":"Block","src":"9014:301:3","statements":[{"AST":{"nodeType":"YulBlock","src":"9172:133:3","statements":[{"nodeType":"YulVariableDeclaration","src":"9190:40:3","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9219:10:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9213:5:3"},"nodeType":"YulFunctionCall","src":"9213:17:3"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"9194:15:3","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9258:2:3","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9262:10:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9254:3:3"},"nodeType":"YulFunctionCall","src":"9254:19:3"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9275:15:3"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9247:6:3"},"nodeType":"YulFunctionCall","src":"9247:44:3"},"nodeType":"YulExpressionStatement","src":"9247:44:3"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":691,"isOffset":false,"isSlot":false,"src":"9219:10:3","valueSize":1},{"declaration":691,"isOffset":false,"isSlot":false,"src":"9262:10:3","valueSize":1}],"id":700,"nodeType":"InlineAssembly","src":"9163:142:3"}]}}]},"id":709,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8841:7:3","nodeType":"FunctionDefinition","parameters":{"id":694,"nodeType":"ParameterList","parameters":[{"constant":false,"id":691,"mutability":"mutable","name":"returndata","nameLocation":"8862:10:3","nodeType":"VariableDeclaration","scope":709,"src":"8849:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":690,"name":"bytes","nodeType":"ElementaryTypeName","src":"8849:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":693,"mutability":"mutable","name":"errorMessage","nameLocation":"8888:12:3","nodeType":"VariableDeclaration","scope":709,"src":"8874:26:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":692,"name":"string","nodeType":"ElementaryTypeName","src":"8874:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8848:53:3"},"returnParameters":{"id":695,"nodeType":"ParameterList","parameters":[],"src":"8915:0:3"},"scope":710,"src":"8832:540:3","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":711,"src":"194:9180:3","usedErrors":[]}],"src":"101:9274:3"},"id":3},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[710],"ContextUpgradeable":[752],"Initializable":[380]},"id":753,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":712,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:4"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":713,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":753,"sourceUnit":381,"src":"110:42:4","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":715,"name":"Initializable","nameLocations":["691:13:4"],"nodeType":"IdentifierPath","referencedDeclaration":380,"src":"691:13:4"},"id":716,"nodeType":"InheritanceSpecifier","src":"691:13:4"}],"canonicalName":"ContextUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":714,"nodeType":"StructuredDocumentation","src":"154:496:4","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":752,"linearizedBaseContracts":[752,380],"name":"ContextUpgradeable","nameLocation":"669:18:4","nodeType":"ContractDefinition","nodes":[{"body":{"id":721,"nodeType":"Block","src":"763:7:4","statements":[]},"id":722,"implemented":true,"kind":"function","modifiers":[{"id":719,"kind":"modifierInvocation","modifierName":{"id":718,"name":"onlyInitializing","nameLocations":["746:16:4"],"nodeType":"IdentifierPath","referencedDeclaration":325,"src":"746:16:4"},"nodeType":"ModifierInvocation","src":"746:16:4"}],"name":"__Context_init","nameLocation":"720:14:4","nodeType":"FunctionDefinition","parameters":{"id":717,"nodeType":"ParameterList","parameters":[],"src":"734:2:4"},"returnParameters":{"id":720,"nodeType":"ParameterList","parameters":[],"src":"763:0:4"},"scope":752,"src":"711:59:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":727,"nodeType":"Block","src":"838:7:4","statements":[]},"id":728,"implemented":true,"kind":"function","modifiers":[{"id":725,"kind":"modifierInvocation","modifierName":{"id":724,"name":"onlyInitializing","nameLocations":["821:16:4"],"nodeType":"IdentifierPath","referencedDeclaration":325,"src":"821:16:4"},"nodeType":"ModifierInvocation","src":"821:16:4"}],"name":"__Context_init_unchained","nameLocation":"785:24:4","nodeType":"FunctionDefinition","parameters":{"id":723,"nodeType":"ParameterList","parameters":[],"src":"809:2:4"},"returnParameters":{"id":726,"nodeType":"ParameterList","parameters":[],"src":"838:0:4"},"scope":752,"src":"776:69:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":736,"nodeType":"Block","src":"912:34:4","statements":[{"expression":{"expression":{"id":733,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"929:3:4","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"933:6:4","memberName":"sender","nodeType":"MemberAccess","src":"929:10:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":732,"id":735,"nodeType":"Return","src":"922:17:4"}]},"id":737,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"859:10:4","nodeType":"FunctionDefinition","parameters":{"id":729,"nodeType":"ParameterList","parameters":[],"src":"869:2:4"},"returnParameters":{"id":732,"nodeType":"ParameterList","parameters":[{"constant":false,"id":731,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":737,"src":"903:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":730,"name":"address","nodeType":"ElementaryTypeName","src":"903:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"902:9:4"},"scope":752,"src":"850:96:4","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":745,"nodeType":"Block","src":"1019:32:4","statements":[{"expression":{"expression":{"id":742,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1036:3:4","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1040:4:4","memberName":"data","nodeType":"MemberAccess","src":"1036:8:4","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":741,"id":744,"nodeType":"Return","src":"1029:15:4"}]},"id":746,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"961:8:4","nodeType":"FunctionDefinition","parameters":{"id":738,"nodeType":"ParameterList","parameters":[],"src":"969:2:4"},"returnParameters":{"id":741,"nodeType":"ParameterList","parameters":[{"constant":false,"id":740,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":746,"src":"1003:14:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":739,"name":"bytes","nodeType":"ElementaryTypeName","src":"1003:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1002:16:4"},"scope":752,"src":"952:99:4","stateMutability":"view","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":747,"nodeType":"StructuredDocumentation","src":"1057:254:4","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":751,"mutability":"mutable","name":"__gap","nameLocation":"1336:5:4","nodeType":"VariableDeclaration","scope":752,"src":"1316:25:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":748,"name":"uint256","nodeType":"ElementaryTypeName","src":"1316:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":750,"length":{"hexValue":"3530","id":749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1324:2:4","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1316:11:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":753,"src":"651:693:4","usedErrors":[]}],"src":"86:1259:4"},"id":4},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","exportedSymbols":{"MathUpgradeable":[1847],"SignedMathUpgradeable":[1952],"StringsUpgradeable":[981]},"id":982,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":754,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:5"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol","file":"./math/MathUpgradeable.sol","id":755,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":982,"sourceUnit":1848,"src":"126:36:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol","file":"./math/SignedMathUpgradeable.sol","id":756,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":982,"sourceUnit":1953,"src":"163:42:5","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"StringsUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":757,"nodeType":"StructuredDocumentation","src":"207:34:5","text":" @dev String operations."},"fullyImplemented":true,"id":981,"linearizedBaseContracts":[981],"name":"StringsUpgradeable","nameLocation":"250:18:5","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":760,"mutability":"constant","name":"_SYMBOLS","nameLocation":"300:8:5","nodeType":"VariableDeclaration","scope":981,"src":"275:54:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":758,"name":"bytes16","nodeType":"ElementaryTypeName","src":"275:7:5","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":759,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"311:18:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":763,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"358:15:5","nodeType":"VariableDeclaration","scope":981,"src":"335:43:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":761,"name":"uint8","nodeType":"ElementaryTypeName","src":"335:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":762,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"376:2:5","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":810,"nodeType":"Block","src":"551:636:5","statements":[{"id":809,"nodeType":"UncheckedBlock","src":"561:620:5","statements":[{"assignments":[772],"declarations":[{"constant":false,"id":772,"mutability":"mutable","name":"length","nameLocation":"593:6:5","nodeType":"VariableDeclaration","scope":809,"src":"585:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":771,"name":"uint256","nodeType":"ElementaryTypeName","src":"585:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":779,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":775,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":766,"src":"624:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":773,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1847,"src":"602:15:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$1847_$","typeString":"type(library MathUpgradeable)"}},"id":774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"618:5:5","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":1684,"src":"602:21:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":776,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"602:28:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":777,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"633:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"602:32:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"585:49:5"},{"assignments":[781],"declarations":[{"constant":false,"id":781,"mutability":"mutable","name":"buffer","nameLocation":"662:6:5","nodeType":"VariableDeclaration","scope":809,"src":"648:20:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":780,"name":"string","nodeType":"ElementaryTypeName","src":"648:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":786,"initialValue":{"arguments":[{"id":784,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":772,"src":"682:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":783,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"671:10:5","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":782,"name":"string","nodeType":"ElementaryTypeName","src":"675:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"671:18:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"648:41:5"},{"assignments":[788],"declarations":[{"constant":false,"id":788,"mutability":"mutable","name":"ptr","nameLocation":"711:3:5","nodeType":"VariableDeclaration","scope":809,"src":"703:11:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":787,"name":"uint256","nodeType":"ElementaryTypeName","src":"703:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":789,"nodeType":"VariableDeclarationStatement","src":"703:11:5"},{"AST":{"nodeType":"YulBlock","src":"784:67:5","statements":[{"nodeType":"YulAssignment","src":"802:35:5","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"813:6:5"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"825:2:5","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"829:6:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"821:3:5"},"nodeType":"YulFunctionCall","src":"821:15:5"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"809:3:5"},"nodeType":"YulFunctionCall","src":"809:28:5"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"802:3:5"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":781,"isOffset":false,"isSlot":false,"src":"813:6:5","valueSize":1},{"declaration":772,"isOffset":false,"isSlot":false,"src":"829:6:5","valueSize":1},{"declaration":788,"isOffset":false,"isSlot":false,"src":"802:3:5","valueSize":1}],"id":790,"nodeType":"InlineAssembly","src":"775:76:5"},{"body":{"id":805,"nodeType":"Block","src":"877:267:5","statements":[{"expression":{"id":793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"895:5:5","subExpression":{"id":792,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":788,"src":"895:3:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":794,"nodeType":"ExpressionStatement","src":"895:5:5"},{"AST":{"nodeType":"YulBlock","src":"978:84:5","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"1008:3:5"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1022:5:5"},{"kind":"number","nodeType":"YulLiteral","src":"1029:2:5","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"1018:3:5"},"nodeType":"YulFunctionCall","src":"1018:14:5"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"1034:8:5"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"1013:4:5"},"nodeType":"YulFunctionCall","src":"1013:30:5"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"1000:7:5"},"nodeType":"YulFunctionCall","src":"1000:44:5"},"nodeType":"YulExpressionStatement","src":"1000:44:5"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":760,"isOffset":false,"isSlot":false,"src":"1034:8:5","valueSize":1},{"declaration":788,"isOffset":false,"isSlot":false,"src":"1008:3:5","valueSize":1},{"declaration":766,"isOffset":false,"isSlot":false,"src":"1022:5:5","valueSize":1}],"id":795,"nodeType":"InlineAssembly","src":"969:93:5"},{"expression":{"id":798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":796,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":766,"src":"1079:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":797,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1088:2:5","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1079:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":799,"nodeType":"ExpressionStatement","src":"1079:11:5"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":800,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":766,"src":"1112:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1121:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1112:10:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":804,"nodeType":"IfStatement","src":"1108:21:5","trueBody":{"id":803,"nodeType":"Break","src":"1124:5:5"}}]},"condition":{"hexValue":"74727565","id":791,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"871:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":806,"nodeType":"WhileStatement","src":"864:280:5"},{"expression":{"id":807,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":781,"src":"1164:6:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":770,"id":808,"nodeType":"Return","src":"1157:13:5"}]}]},"documentation":{"id":764,"nodeType":"StructuredDocumentation","src":"385:90:5","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":811,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"489:8:5","nodeType":"FunctionDefinition","parameters":{"id":767,"nodeType":"ParameterList","parameters":[{"constant":false,"id":766,"mutability":"mutable","name":"value","nameLocation":"506:5:5","nodeType":"VariableDeclaration","scope":811,"src":"498:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":765,"name":"uint256","nodeType":"ElementaryTypeName","src":"498:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"497:15:5"},"returnParameters":{"id":770,"nodeType":"ParameterList","parameters":[{"constant":false,"id":769,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":811,"src":"536:13:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":768,"name":"string","nodeType":"ElementaryTypeName","src":"536:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"535:15:5"},"scope":981,"src":"480:707:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":838,"nodeType":"Block","src":"1357:114:5","statements":[{"expression":{"arguments":[{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":823,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":814,"src":"1398:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":824,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1406:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1398:9:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":827,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1416:2:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1398:20:5","trueExpression":{"hexValue":"2d","id":826,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1410:3:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":832,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":814,"src":"1455:5:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":830,"name":"SignedMathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1952,"src":"1429:21:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMathUpgradeable_$1952_$","typeString":"type(library SignedMathUpgradeable)"}},"id":831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1451:3:5","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":1951,"src":"1429:25:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":833,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1429:32:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":829,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[811,839],"referencedDeclaration":811,"src":"1420:8:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":834,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1420:42:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":821,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1381:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":822,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1385:12:5","memberName":"encodePacked","nodeType":"MemberAccess","src":"1381:16:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":835,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1381:82:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":820,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1374:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":819,"name":"string","nodeType":"ElementaryTypeName","src":"1374:6:5","typeDescriptions":{}}},"id":836,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1374:90:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":818,"id":837,"nodeType":"Return","src":"1367:97:5"}]},"documentation":{"id":812,"nodeType":"StructuredDocumentation","src":"1193:89:5","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":839,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"1296:8:5","nodeType":"FunctionDefinition","parameters":{"id":815,"nodeType":"ParameterList","parameters":[{"constant":false,"id":814,"mutability":"mutable","name":"value","nameLocation":"1312:5:5","nodeType":"VariableDeclaration","scope":839,"src":"1305:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":813,"name":"int256","nodeType":"ElementaryTypeName","src":"1305:6:5","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1304:14:5"},"returnParameters":{"id":818,"nodeType":"ParameterList","parameters":[{"constant":false,"id":817,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":839,"src":"1342:13:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":816,"name":"string","nodeType":"ElementaryTypeName","src":"1342:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1341:15:5"},"scope":981,"src":"1287:184:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":858,"nodeType":"Block","src":"1650:111:5","statements":[{"id":857,"nodeType":"UncheckedBlock","src":"1660:95:5","statements":[{"expression":{"arguments":[{"id":848,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":842,"src":"1703:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":851,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":842,"src":"1733:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":849,"name":"MathUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1847,"src":"1710:15:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MathUpgradeable_$1847_$","typeString":"type(library MathUpgradeable)"}},"id":850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1726:6:5","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":1807,"src":"1710:22:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":852,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1710:29:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":853,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1742:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1710:33:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":847,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[859,935,955],"referencedDeclaration":935,"src":"1691:11:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":855,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1691:53:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":846,"id":856,"nodeType":"Return","src":"1684:60:5"}]}]},"documentation":{"id":840,"nodeType":"StructuredDocumentation","src":"1477:94:5","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":859,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1585:11:5","nodeType":"FunctionDefinition","parameters":{"id":843,"nodeType":"ParameterList","parameters":[{"constant":false,"id":842,"mutability":"mutable","name":"value","nameLocation":"1605:5:5","nodeType":"VariableDeclaration","scope":859,"src":"1597:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":841,"name":"uint256","nodeType":"ElementaryTypeName","src":"1597:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1596:15:5"},"returnParameters":{"id":846,"nodeType":"ParameterList","parameters":[{"constant":false,"id":845,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":859,"src":"1635:13:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":844,"name":"string","nodeType":"ElementaryTypeName","src":"1635:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1634:15:5"},"scope":981,"src":"1576:185:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":934,"nodeType":"Block","src":"1974:347:5","statements":[{"assignments":[870],"declarations":[{"constant":false,"id":870,"mutability":"mutable","name":"buffer","nameLocation":"1997:6:5","nodeType":"VariableDeclaration","scope":934,"src":"1984:19:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":869,"name":"bytes","nodeType":"ElementaryTypeName","src":"1984:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":879,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":875,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":873,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2016:1:5","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":874,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":864,"src":"2020:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2016:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":876,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2029:1:5","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2016:14:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":872,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2006:9:5","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":871,"name":"bytes","nodeType":"ElementaryTypeName","src":"2010:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":878,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2006:25:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1984:47:5"},{"expression":{"id":884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":880,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"2041:6:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":882,"indexExpression":{"hexValue":"30","id":881,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2048:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2041:9:5","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":883,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2053:3:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"2041:15:5","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":885,"nodeType":"ExpressionStatement","src":"2041:15:5"},{"expression":{"id":890,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":886,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"2066:6:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":888,"indexExpression":{"hexValue":"31","id":887,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2073:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2066:9:5","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":889,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2078:3:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2066:15:5","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":891,"nodeType":"ExpressionStatement","src":"2066:15:5"},{"body":{"id":920,"nodeType":"Block","src":"2136:83:5","statements":[{"expression":{"id":914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":906,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"2150:6:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":908,"indexExpression":{"id":907,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":893,"src":"2157:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2150:9:5","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":909,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":760,"src":"2162:8:5","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":913,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":910,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"2171:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":911,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2179:3:5","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2171:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2162:21:5","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2150:33:5","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":915,"nodeType":"ExpressionStatement","src":"2150:33:5"},{"expression":{"id":918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":916,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"2197:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":917,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2207:1:5","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2197:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":919,"nodeType":"ExpressionStatement","src":"2197:11:5"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":900,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":893,"src":"2124:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":901,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2128:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2124:5:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":921,"initializationExpression":{"assignments":[893],"declarations":[{"constant":false,"id":893,"mutability":"mutable","name":"i","nameLocation":"2104:1:5","nodeType":"VariableDeclaration","scope":921,"src":"2096:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":892,"name":"uint256","nodeType":"ElementaryTypeName","src":"2096:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":899,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":894,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2108:1:5","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":895,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":864,"src":"2112:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2108:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":897,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2121:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2108:14:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2096:26:5"},"loopExpression":{"expression":{"id":904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2131:3:5","subExpression":{"id":903,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":893,"src":"2133:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":905,"nodeType":"ExpressionStatement","src":"2131:3:5"},"nodeType":"ForStatement","src":"2091:128:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":923,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"2236:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":924,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2245:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2236:10:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":926,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2248:34:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":922,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2228:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":927,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2228:55:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":928,"nodeType":"ExpressionStatement","src":"2228:55:5"},{"expression":{"arguments":[{"id":931,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"2307:6:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":930,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2300:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":929,"name":"string","nodeType":"ElementaryTypeName","src":"2300:6:5","typeDescriptions":{}}},"id":932,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2300:14:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":868,"id":933,"nodeType":"Return","src":"2293:21:5"}]},"documentation":{"id":860,"nodeType":"StructuredDocumentation","src":"1767:112:5","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":935,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1893:11:5","nodeType":"FunctionDefinition","parameters":{"id":865,"nodeType":"ParameterList","parameters":[{"constant":false,"id":862,"mutability":"mutable","name":"value","nameLocation":"1913:5:5","nodeType":"VariableDeclaration","scope":935,"src":"1905:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":861,"name":"uint256","nodeType":"ElementaryTypeName","src":"1905:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":864,"mutability":"mutable","name":"length","nameLocation":"1928:6:5","nodeType":"VariableDeclaration","scope":935,"src":"1920:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":863,"name":"uint256","nodeType":"ElementaryTypeName","src":"1920:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1904:31:5"},"returnParameters":{"id":868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":867,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":935,"src":"1959:13:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":866,"name":"string","nodeType":"ElementaryTypeName","src":"1959:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1958:15:5"},"scope":981,"src":"1884:437:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":954,"nodeType":"Block","src":"2546:76:5","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":948,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":938,"src":"2591:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":947,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2583:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":946,"name":"uint160","nodeType":"ElementaryTypeName","src":"2583:7:5","typeDescriptions":{}}},"id":949,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2583:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":945,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2575:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":944,"name":"uint256","nodeType":"ElementaryTypeName","src":"2575:7:5","typeDescriptions":{}}},"id":950,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2575:22:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":951,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":763,"src":"2599:15:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":943,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[859,935,955],"referencedDeclaration":935,"src":"2563:11:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":952,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2563:52:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":942,"id":953,"nodeType":"Return","src":"2556:59:5"}]},"documentation":{"id":936,"nodeType":"StructuredDocumentation","src":"2327:141:5","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":955,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2482:11:5","nodeType":"FunctionDefinition","parameters":{"id":939,"nodeType":"ParameterList","parameters":[{"constant":false,"id":938,"mutability":"mutable","name":"addr","nameLocation":"2502:4:5","nodeType":"VariableDeclaration","scope":955,"src":"2494:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":937,"name":"address","nodeType":"ElementaryTypeName","src":"2494:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2493:14:5"},"returnParameters":{"id":942,"nodeType":"ParameterList","parameters":[{"constant":false,"id":941,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":955,"src":"2531:13:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":940,"name":"string","nodeType":"ElementaryTypeName","src":"2531:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2530:15:5"},"scope":981,"src":"2473:149:5","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":979,"nodeType":"Block","src":"2777:66:5","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":968,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":958,"src":"2810:1:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":967,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2804:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":966,"name":"bytes","nodeType":"ElementaryTypeName","src":"2804:5:5","typeDescriptions":{}}},"id":969,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2804:8:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":965,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2794:9:5","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":970,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2794:19:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":974,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":960,"src":"2833:1:5","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":973,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2827:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":972,"name":"bytes","nodeType":"ElementaryTypeName","src":"2827:5:5","typeDescriptions":{}}},"id":975,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2827:8:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":971,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2817:9:5","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":976,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2817:19:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2794:42:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":964,"id":978,"nodeType":"Return","src":"2787:49:5"}]},"documentation":{"id":956,"nodeType":"StructuredDocumentation","src":"2628:66:5","text":" @dev Returns true if the two strings are equal."},"id":980,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2708:5:5","nodeType":"FunctionDefinition","parameters":{"id":961,"nodeType":"ParameterList","parameters":[{"constant":false,"id":958,"mutability":"mutable","name":"a","nameLocation":"2728:1:5","nodeType":"VariableDeclaration","scope":980,"src":"2714:15:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":957,"name":"string","nodeType":"ElementaryTypeName","src":"2714:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":960,"mutability":"mutable","name":"b","nameLocation":"2745:1:5","nodeType":"VariableDeclaration","scope":980,"src":"2731:15:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":959,"name":"string","nodeType":"ElementaryTypeName","src":"2731:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2713:34:5"},"returnParameters":{"id":964,"nodeType":"ParameterList","parameters":[{"constant":false,"id":963,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":980,"src":"2771:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":962,"name":"bool","nodeType":"ElementaryTypeName","src":"2771:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2770:6:5"},"scope":981,"src":"2699:144:5","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":982,"src":"242:2603:5","usedErrors":[]}],"src":"101:2745:5"},"id":5},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol","exportedSymbols":{"MathUpgradeable":[1847]},"id":1848,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":983,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:6"},{"abstract":false,"baseContracts":[],"canonicalName":"MathUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":984,"nodeType":"StructuredDocumentation","src":"128:73:6","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":1847,"linearizedBaseContracts":[1847],"name":"MathUpgradeable","nameLocation":"210:15:6","nodeType":"ContractDefinition","nodes":[{"canonicalName":"MathUpgradeable.Rounding","id":988,"members":[{"id":985,"name":"Down","nameLocation":"256:4:6","nodeType":"EnumValue","src":"256:4:6"},{"id":986,"name":"Up","nameLocation":"298:2:6","nodeType":"EnumValue","src":"298:2:6"},{"id":987,"name":"Zero","nameLocation":"329:4:6","nodeType":"EnumValue","src":"329:4:6"}],"name":"Rounding","nameLocation":"237:8:6","nodeType":"EnumDefinition","src":"232:122:6"},{"body":{"id":1005,"nodeType":"Block","src":"491:37:6","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":998,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":991,"src":"508:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":999,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":993,"src":"512:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"508:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1002,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":993,"src":"520:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"508:13:6","trueExpression":{"id":1001,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":991,"src":"516:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":997,"id":1004,"nodeType":"Return","src":"501:20:6"}]},"documentation":{"id":989,"nodeType":"StructuredDocumentation","src":"360:59:6","text":" @dev Returns the largest of two numbers."},"id":1006,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"433:3:6","nodeType":"FunctionDefinition","parameters":{"id":994,"nodeType":"ParameterList","parameters":[{"constant":false,"id":991,"mutability":"mutable","name":"a","nameLocation":"445:1:6","nodeType":"VariableDeclaration","scope":1006,"src":"437:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":990,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":993,"mutability":"mutable","name":"b","nameLocation":"456:1:6","nodeType":"VariableDeclaration","scope":1006,"src":"448:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":992,"name":"uint256","nodeType":"ElementaryTypeName","src":"448:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"436:22:6"},"returnParameters":{"id":997,"nodeType":"ParameterList","parameters":[{"constant":false,"id":996,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1006,"src":"482:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":995,"name":"uint256","nodeType":"ElementaryTypeName","src":"482:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"481:9:6"},"scope":1847,"src":"424:104:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1023,"nodeType":"Block","src":"666:37:6","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1016,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1009,"src":"683:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1017,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1011,"src":"687:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"683:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1020,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1011,"src":"695:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"683:13:6","trueExpression":{"id":1019,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1009,"src":"691:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1015,"id":1022,"nodeType":"Return","src":"676:20:6"}]},"documentation":{"id":1007,"nodeType":"StructuredDocumentation","src":"534:60:6","text":" @dev Returns the smallest of two numbers."},"id":1024,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"608:3:6","nodeType":"FunctionDefinition","parameters":{"id":1012,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1009,"mutability":"mutable","name":"a","nameLocation":"620:1:6","nodeType":"VariableDeclaration","scope":1024,"src":"612:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1008,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1011,"mutability":"mutable","name":"b","nameLocation":"631:1:6","nodeType":"VariableDeclaration","scope":1024,"src":"623:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1010,"name":"uint256","nodeType":"ElementaryTypeName","src":"623:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"611:22:6"},"returnParameters":{"id":1015,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1014,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1024,"src":"657:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1013,"name":"uint256","nodeType":"ElementaryTypeName","src":"657:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"656:9:6"},"scope":1847,"src":"599:104:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1046,"nodeType":"Block","src":"887:82:6","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1034,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1027,"src":"942:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":1035,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1029,"src":"946:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"942:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1037,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"941:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1038,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1027,"src":"952:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":1039,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1029,"src":"956:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"952:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1041,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"951:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":1042,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"961:1:6","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"951:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1033,"id":1045,"nodeType":"Return","src":"934:28:6"}]},"documentation":{"id":1025,"nodeType":"StructuredDocumentation","src":"709:102:6","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":1047,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"825:7:6","nodeType":"FunctionDefinition","parameters":{"id":1030,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1027,"mutability":"mutable","name":"a","nameLocation":"841:1:6","nodeType":"VariableDeclaration","scope":1047,"src":"833:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1026,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1029,"mutability":"mutable","name":"b","nameLocation":"852:1:6","nodeType":"VariableDeclaration","scope":1047,"src":"844:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1028,"name":"uint256","nodeType":"ElementaryTypeName","src":"844:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"832:22:6"},"returnParameters":{"id":1033,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1032,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1047,"src":"878:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1031,"name":"uint256","nodeType":"ElementaryTypeName","src":"878:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"877:9:6"},"scope":1847,"src":"816:153:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1071,"nodeType":"Block","src":"1239:123:6","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1057,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1050,"src":"1327:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1058,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1332:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1327:6:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1066,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1061,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1050,"src":"1341:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1062,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1345:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1341:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1064,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1340:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1065,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1052,"src":"1350:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1340:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1067,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1354:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1340:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1327:28:6","trueExpression":{"hexValue":"30","id":1060,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1336:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1056,"id":1070,"nodeType":"Return","src":"1320:35:6"}]},"documentation":{"id":1048,"nodeType":"StructuredDocumentation","src":"975:188:6","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":1072,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1177:7:6","nodeType":"FunctionDefinition","parameters":{"id":1053,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1050,"mutability":"mutable","name":"a","nameLocation":"1193:1:6","nodeType":"VariableDeclaration","scope":1072,"src":"1185:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1049,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1052,"mutability":"mutable","name":"b","nameLocation":"1204:1:6","nodeType":"VariableDeclaration","scope":1072,"src":"1196:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1051,"name":"uint256","nodeType":"ElementaryTypeName","src":"1196:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1184:22:6"},"returnParameters":{"id":1056,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1055,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1072,"src":"1230:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1054,"name":"uint256","nodeType":"ElementaryTypeName","src":"1230:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1229:9:6"},"scope":1847,"src":"1168:194:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1194,"nodeType":"Block","src":"1776:4115:6","statements":[{"id":1193,"nodeType":"UncheckedBlock","src":"1786:4099:6","statements":[{"assignments":[1085],"declarations":[{"constant":false,"id":1085,"mutability":"mutable","name":"prod0","nameLocation":"2115:5:6","nodeType":"VariableDeclaration","scope":1193,"src":"2107:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1084,"name":"uint256","nodeType":"ElementaryTypeName","src":"2107:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1086,"nodeType":"VariableDeclarationStatement","src":"2107:13:6"},{"assignments":[1088],"declarations":[{"constant":false,"id":1088,"mutability":"mutable","name":"prod1","nameLocation":"2187:5:6","nodeType":"VariableDeclaration","scope":1193,"src":"2179:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1087,"name":"uint256","nodeType":"ElementaryTypeName","src":"2179:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1089,"nodeType":"VariableDeclarationStatement","src":"2179:13:6"},{"AST":{"nodeType":"YulBlock","src":"2259:157:6","statements":[{"nodeType":"YulVariableDeclaration","src":"2277:30:6","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2294:1:6"},{"name":"y","nodeType":"YulIdentifier","src":"2297:1:6"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2304:1:6","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2300:3:6"},"nodeType":"YulFunctionCall","src":"2300:6:6"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2287:6:6"},"nodeType":"YulFunctionCall","src":"2287:20:6"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2281:2:6","type":""}]},{"nodeType":"YulAssignment","src":"2324:18:6","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2337:1:6"},{"name":"y","nodeType":"YulIdentifier","src":"2340:1:6"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2333:3:6"},"nodeType":"YulFunctionCall","src":"2333:9:6"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2324:5:6"}]},{"nodeType":"YulAssignment","src":"2359:43:6","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2376:2:6"},{"name":"prod0","nodeType":"YulIdentifier","src":"2380:5:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2372:3:6"},"nodeType":"YulFunctionCall","src":"2372:14:6"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2391:2:6"},{"name":"prod0","nodeType":"YulIdentifier","src":"2395:5:6"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2388:2:6"},"nodeType":"YulFunctionCall","src":"2388:13:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2368:3:6"},"nodeType":"YulFunctionCall","src":"2368:34:6"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2359:5:6"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1085,"isOffset":false,"isSlot":false,"src":"2324:5:6","valueSize":1},{"declaration":1085,"isOffset":false,"isSlot":false,"src":"2380:5:6","valueSize":1},{"declaration":1085,"isOffset":false,"isSlot":false,"src":"2395:5:6","valueSize":1},{"declaration":1088,"isOffset":false,"isSlot":false,"src":"2359:5:6","valueSize":1},{"declaration":1075,"isOffset":false,"isSlot":false,"src":"2294:1:6","valueSize":1},{"declaration":1075,"isOffset":false,"isSlot":false,"src":"2337:1:6","valueSize":1},{"declaration":1077,"isOffset":false,"isSlot":false,"src":"2297:1:6","valueSize":1},{"declaration":1077,"isOffset":false,"isSlot":false,"src":"2340:1:6","valueSize":1}],"id":1090,"nodeType":"InlineAssembly","src":"2250:166:6"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1093,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1091,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1088,"src":"2497:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1092,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2506:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2497:10:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1099,"nodeType":"IfStatement","src":"2493:368:6","trueBody":{"id":1098,"nodeType":"Block","src":"2509:352:6","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1094,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1085,"src":"2827:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1095,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1079,"src":"2835:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2827:19:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1083,"id":1097,"nodeType":"Return","src":"2820:26:6"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1101,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1079,"src":"2971:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1102,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1088,"src":"2985:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2971:19:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d6174683a206d756c446976206f766572666c6f77","id":1104,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2992:23:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""},"value":"Math: mulDiv overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""}],"id":1100,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2963:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2963:53:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1106,"nodeType":"ExpressionStatement","src":"2963:53:6"},{"assignments":[1108],"declarations":[{"constant":false,"id":1108,"mutability":"mutable","name":"remainder","nameLocation":"3280:9:6","nodeType":"VariableDeclaration","scope":1193,"src":"3272:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1107,"name":"uint256","nodeType":"ElementaryTypeName","src":"3272:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1109,"nodeType":"VariableDeclarationStatement","src":"3272:17:6"},{"AST":{"nodeType":"YulBlock","src":"3312:291:6","statements":[{"nodeType":"YulAssignment","src":"3381:38:6","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3401:1:6"},{"name":"y","nodeType":"YulIdentifier","src":"3404:1:6"},{"name":"denominator","nodeType":"YulIdentifier","src":"3407:11:6"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3394:6:6"},"nodeType":"YulFunctionCall","src":"3394:25:6"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3381:9:6"}]},{"nodeType":"YulAssignment","src":"3501:41:6","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3514:5:6"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3524:9:6"},{"name":"prod0","nodeType":"YulIdentifier","src":"3535:5:6"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3521:2:6"},"nodeType":"YulFunctionCall","src":"3521:20:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3510:3:6"},"nodeType":"YulFunctionCall","src":"3510:32:6"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3501:5:6"}]},{"nodeType":"YulAssignment","src":"3559:30:6","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3572:5:6"},{"name":"remainder","nodeType":"YulIdentifier","src":"3579:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3568:3:6"},"nodeType":"YulFunctionCall","src":"3568:21:6"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3559:5:6"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1079,"isOffset":false,"isSlot":false,"src":"3407:11:6","valueSize":1},{"declaration":1085,"isOffset":false,"isSlot":false,"src":"3535:5:6","valueSize":1},{"declaration":1085,"isOffset":false,"isSlot":false,"src":"3559:5:6","valueSize":1},{"declaration":1085,"isOffset":false,"isSlot":false,"src":"3572:5:6","valueSize":1},{"declaration":1088,"isOffset":false,"isSlot":false,"src":"3501:5:6","valueSize":1},{"declaration":1088,"isOffset":false,"isSlot":false,"src":"3514:5:6","valueSize":1},{"declaration":1108,"isOffset":false,"isSlot":false,"src":"3381:9:6","valueSize":1},{"declaration":1108,"isOffset":false,"isSlot":false,"src":"3524:9:6","valueSize":1},{"declaration":1108,"isOffset":false,"isSlot":false,"src":"3579:9:6","valueSize":1},{"declaration":1075,"isOffset":false,"isSlot":false,"src":"3401:1:6","valueSize":1},{"declaration":1077,"isOffset":false,"isSlot":false,"src":"3404:1:6","valueSize":1}],"id":1110,"nodeType":"InlineAssembly","src":"3303:300:6"},{"assignments":[1112],"declarations":[{"constant":false,"id":1112,"mutability":"mutable","name":"twos","nameLocation":"3918:4:6","nodeType":"VariableDeclaration","scope":1193,"src":"3910:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1111,"name":"uint256","nodeType":"ElementaryTypeName","src":"3910:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1120,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1113,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1079,"src":"3925:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3940:12:6","subExpression":{"id":1114,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1079,"src":"3941:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3955:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3940:16:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1118,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3939:18:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3925:32:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3910:47:6"},{"AST":{"nodeType":"YulBlock","src":"3980:362:6","statements":[{"nodeType":"YulAssignment","src":"4045:37:6","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"4064:11:6"},{"name":"twos","nodeType":"YulIdentifier","src":"4077:4:6"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4060:3:6"},"nodeType":"YulFunctionCall","src":"4060:22:6"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"4045:11:6"}]},{"nodeType":"YulAssignment","src":"4149:25:6","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"4162:5:6"},{"name":"twos","nodeType":"YulIdentifier","src":"4169:4:6"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4158:3:6"},"nodeType":"YulFunctionCall","src":"4158:16:6"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"4149:5:6"}]},{"nodeType":"YulAssignment","src":"4289:39:6","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4309:1:6","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4312:4:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4305:3:6"},"nodeType":"YulFunctionCall","src":"4305:12:6"},{"name":"twos","nodeType":"YulIdentifier","src":"4319:4:6"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4301:3:6"},"nodeType":"YulFunctionCall","src":"4301:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"4326:1:6","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4297:3:6"},"nodeType":"YulFunctionCall","src":"4297:31:6"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"4289:4:6"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1079,"isOffset":false,"isSlot":false,"src":"4045:11:6","valueSize":1},{"declaration":1079,"isOffset":false,"isSlot":false,"src":"4064:11:6","valueSize":1},{"declaration":1085,"isOffset":false,"isSlot":false,"src":"4149:5:6","valueSize":1},{"declaration":1085,"isOffset":false,"isSlot":false,"src":"4162:5:6","valueSize":1},{"declaration":1112,"isOffset":false,"isSlot":false,"src":"4077:4:6","valueSize":1},{"declaration":1112,"isOffset":false,"isSlot":false,"src":"4169:4:6","valueSize":1},{"declaration":1112,"isOffset":false,"isSlot":false,"src":"4289:4:6","valueSize":1},{"declaration":1112,"isOffset":false,"isSlot":false,"src":"4312:4:6","valueSize":1},{"declaration":1112,"isOffset":false,"isSlot":false,"src":"4319:4:6","valueSize":1}],"id":1121,"nodeType":"InlineAssembly","src":"3971:371:6"},{"expression":{"id":1126,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1122,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1085,"src":"4408:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1123,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1088,"src":"4417:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1124,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1112,"src":"4425:4:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4417:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4408:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1127,"nodeType":"ExpressionStatement","src":"4408:21:6"},{"assignments":[1129],"declarations":[{"constant":false,"id":1129,"mutability":"mutable","name":"inverse","nameLocation":"4755:7:6","nodeType":"VariableDeclaration","scope":1193,"src":"4747:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1128,"name":"uint256","nodeType":"ElementaryTypeName","src":"4747:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1136,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":1130,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4766:1:6","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1131,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1079,"src":"4770:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4766:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1133,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4765:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":1134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4785:1:6","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4765:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4747:39:6"},{"expression":{"id":1143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1137,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1129,"src":"5003:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1138,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5014:1:6","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1139,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1079,"src":"5018:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1140,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1129,"src":"5032:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5018:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5014:25:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5003:36:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1144,"nodeType":"ExpressionStatement","src":"5003:36:6"},{"expression":{"id":1151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1145,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1129,"src":"5072:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1146,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5083:1:6","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1147,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1079,"src":"5087:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1148,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1129,"src":"5101:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5087:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5083:25:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5072:36:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1152,"nodeType":"ExpressionStatement","src":"5072:36:6"},{"expression":{"id":1159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1153,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1129,"src":"5142:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1154,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5153:1:6","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1155,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1079,"src":"5157:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1156,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1129,"src":"5171:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5157:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5153:25:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5142:36:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1160,"nodeType":"ExpressionStatement","src":"5142:36:6"},{"expression":{"id":1167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1161,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1129,"src":"5212:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1162,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5223:1:6","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1163,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1079,"src":"5227:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1164,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1129,"src":"5241:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5227:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5223:25:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5212:36:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1168,"nodeType":"ExpressionStatement","src":"5212:36:6"},{"expression":{"id":1175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1169,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1129,"src":"5282:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5293:1:6","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1171,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1079,"src":"5297:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1172,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1129,"src":"5311:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5297:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5293:25:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5282:36:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1176,"nodeType":"ExpressionStatement","src":"5282:36:6"},{"expression":{"id":1183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1177,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1129,"src":"5353:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5364:1:6","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1179,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1079,"src":"5368:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1180,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1129,"src":"5382:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5368:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5364:25:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5353:36:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1184,"nodeType":"ExpressionStatement","src":"5353:36:6"},{"expression":{"id":1189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1185,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1082,"src":"5823:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1186,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1085,"src":"5832:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1187,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1129,"src":"5840:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5832:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5823:24:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1190,"nodeType":"ExpressionStatement","src":"5823:24:6"},{"expression":{"id":1191,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1082,"src":"5868:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1083,"id":1192,"nodeType":"Return","src":"5861:13:6"}]}]},"documentation":{"id":1073,"nodeType":"StructuredDocumentation","src":"1368:305:6","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":1195,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1687:6:6","nodeType":"FunctionDefinition","parameters":{"id":1080,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1075,"mutability":"mutable","name":"x","nameLocation":"1702:1:6","nodeType":"VariableDeclaration","scope":1195,"src":"1694:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1074,"name":"uint256","nodeType":"ElementaryTypeName","src":"1694:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1077,"mutability":"mutable","name":"y","nameLocation":"1713:1:6","nodeType":"VariableDeclaration","scope":1195,"src":"1705:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1076,"name":"uint256","nodeType":"ElementaryTypeName","src":"1705:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1079,"mutability":"mutable","name":"denominator","nameLocation":"1724:11:6","nodeType":"VariableDeclaration","scope":1195,"src":"1716:19:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1078,"name":"uint256","nodeType":"ElementaryTypeName","src":"1716:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1693:43:6"},"returnParameters":{"id":1083,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1082,"mutability":"mutable","name":"result","nameLocation":"1768:6:6","nodeType":"VariableDeclaration","scope":1195,"src":"1760:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1081,"name":"uint256","nodeType":"ElementaryTypeName","src":"1760:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1759:16:6"},"scope":1847,"src":"1678:4213:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1238,"nodeType":"Block","src":"6133:189:6","statements":[{"assignments":[1211],"declarations":[{"constant":false,"id":1211,"mutability":"mutable","name":"result","nameLocation":"6151:6:6","nodeType":"VariableDeclaration","scope":1238,"src":"6143:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1210,"name":"uint256","nodeType":"ElementaryTypeName","src":"6143:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1217,"initialValue":{"arguments":[{"id":1213,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1198,"src":"6167:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1214,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1200,"src":"6170:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1215,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1202,"src":"6173:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1212,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[1195,1239],"referencedDeclaration":1195,"src":"6160:6:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1216,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6160:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6143:42:6"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$988","typeString":"enum MathUpgradeable.Rounding"},"id":1221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1218,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1205,"src":"6199:8:6","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$988","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1219,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":988,"src":"6211:8:6","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$988_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":1220,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6220:2:6","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":986,"src":"6211:11:6","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$988","typeString":"enum MathUpgradeable.Rounding"}},"src":"6199:23:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1223,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1198,"src":"6233:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1224,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1200,"src":"6236:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1225,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1202,"src":"6239:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1222,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"6226:6:6","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1226,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6226:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6254:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6226:29:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6199:56:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1235,"nodeType":"IfStatement","src":"6195:98:6","trueBody":{"id":1234,"nodeType":"Block","src":"6257:36:6","statements":[{"expression":{"id":1232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1230,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1211,"src":"6271:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1231,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6281:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6271:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1233,"nodeType":"ExpressionStatement","src":"6271:11:6"}]}},{"expression":{"id":1236,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1211,"src":"6309:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1209,"id":1237,"nodeType":"Return","src":"6302:13:6"}]},"documentation":{"id":1196,"nodeType":"StructuredDocumentation","src":"5897:121:6","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":1239,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"6032:6:6","nodeType":"FunctionDefinition","parameters":{"id":1206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1198,"mutability":"mutable","name":"x","nameLocation":"6047:1:6","nodeType":"VariableDeclaration","scope":1239,"src":"6039:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1197,"name":"uint256","nodeType":"ElementaryTypeName","src":"6039:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1200,"mutability":"mutable","name":"y","nameLocation":"6058:1:6","nodeType":"VariableDeclaration","scope":1239,"src":"6050:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1199,"name":"uint256","nodeType":"ElementaryTypeName","src":"6050:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1202,"mutability":"mutable","name":"denominator","nameLocation":"6069:11:6","nodeType":"VariableDeclaration","scope":1239,"src":"6061:19:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1201,"name":"uint256","nodeType":"ElementaryTypeName","src":"6061:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1205,"mutability":"mutable","name":"rounding","nameLocation":"6091:8:6","nodeType":"VariableDeclaration","scope":1239,"src":"6082:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$988","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":1204,"nodeType":"UserDefinedTypeName","pathNode":{"id":1203,"name":"Rounding","nameLocations":["6082:8:6"],"nodeType":"IdentifierPath","referencedDeclaration":988,"src":"6082:8:6"},"referencedDeclaration":988,"src":"6082:8:6","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$988","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"6038:62:6"},"returnParameters":{"id":1209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1208,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1239,"src":"6124:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1207,"name":"uint256","nodeType":"ElementaryTypeName","src":"6124:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6123:9:6"},"scope":1847,"src":"6023:299:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1350,"nodeType":"Block","src":"6598:1585:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1247,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1242,"src":"6612:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1248,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6617:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6612:6:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1253,"nodeType":"IfStatement","src":"6608:45:6","trueBody":{"id":1252,"nodeType":"Block","src":"6620:33:6","statements":[{"expression":{"hexValue":"30","id":1250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6641:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":1246,"id":1251,"nodeType":"Return","src":"6634:8:6"}]}},{"assignments":[1255],"declarations":[{"constant":false,"id":1255,"mutability":"mutable","name":"result","nameLocation":"7340:6:6","nodeType":"VariableDeclaration","scope":1350,"src":"7332:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1254,"name":"uint256","nodeType":"ElementaryTypeName","src":"7332:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1264,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7349:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1258,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1242,"src":"7360:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1257,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[1519,1555],"referencedDeclaration":1519,"src":"7355:4:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1259,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7355:7:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7366:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7355:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1262,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7354:14:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7349:19:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7332:36:6"},{"id":1349,"nodeType":"UncheckedBlock","src":"7769:408:6","statements":[{"expression":{"id":1274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1265,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"7793:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1266,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"7803:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1267,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1242,"src":"7812:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1268,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"7816:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7812:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7803:19:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1271,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7802:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1272,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7827:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7802:26:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7793:35:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1275,"nodeType":"ExpressionStatement","src":"7793:35:6"},{"expression":{"id":1285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1276,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"7842:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1284,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1277,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"7852:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1278,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1242,"src":"7861:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1279,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"7865:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7861:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7852:19:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1282,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7851:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7876:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7851:26:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7842:35:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1286,"nodeType":"ExpressionStatement","src":"7842:35:6"},{"expression":{"id":1296,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1287,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"7891:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1288,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"7901:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1289,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1242,"src":"7910:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1290,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"7914:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7910:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7901:19:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1293,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7900:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1294,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7925:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7900:26:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7891:35:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1297,"nodeType":"ExpressionStatement","src":"7891:35:6"},{"expression":{"id":1307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1298,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"7940:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1299,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"7950:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1300,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1242,"src":"7959:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1301,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"7963:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7959:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7950:19:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1304,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7949:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1305,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7974:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7949:26:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7940:35:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1308,"nodeType":"ExpressionStatement","src":"7940:35:6"},{"expression":{"id":1318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1309,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"7989:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1310,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"7999:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1311,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1242,"src":"8008:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1312,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"8012:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8008:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7999:19:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1315,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7998:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1316,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8023:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7998:26:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7989:35:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1319,"nodeType":"ExpressionStatement","src":"7989:35:6"},{"expression":{"id":1329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1320,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"8038:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1321,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"8048:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1322,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1242,"src":"8057:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1323,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"8061:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8057:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8048:19:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1326,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8047:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1327,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8072:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8047:26:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8038:35:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1330,"nodeType":"ExpressionStatement","src":"8038:35:6"},{"expression":{"id":1340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1331,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"8087:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1332,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"8097:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1333,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1242,"src":"8106:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1334,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"8110:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8106:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8097:19:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1337,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8096:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1338,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8121:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8096:26:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8087:35:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1341,"nodeType":"ExpressionStatement","src":"8087:35:6"},{"expression":{"arguments":[{"id":1343,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"8147:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1344,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1242,"src":"8155:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1345,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"8159:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8155:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1342,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1024,"src":"8143:3:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":1347,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8143:23:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1246,"id":1348,"nodeType":"Return","src":"8136:30:6"}]}]},"documentation":{"id":1240,"nodeType":"StructuredDocumentation","src":"6328:208:6","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":1351,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6550:4:6","nodeType":"FunctionDefinition","parameters":{"id":1243,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1242,"mutability":"mutable","name":"a","nameLocation":"6563:1:6","nodeType":"VariableDeclaration","scope":1351,"src":"6555:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1241,"name":"uint256","nodeType":"ElementaryTypeName","src":"6555:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6554:11:6"},"returnParameters":{"id":1246,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1245,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1351,"src":"6589:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1244,"name":"uint256","nodeType":"ElementaryTypeName","src":"6589:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6588:9:6"},"scope":1847,"src":"6541:1642:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1386,"nodeType":"Block","src":"8359:161:6","statements":[{"id":1385,"nodeType":"UncheckedBlock","src":"8369:145:6","statements":[{"assignments":[1363],"declarations":[{"constant":false,"id":1363,"mutability":"mutable","name":"result","nameLocation":"8401:6:6","nodeType":"VariableDeclaration","scope":1385,"src":"8393:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1362,"name":"uint256","nodeType":"ElementaryTypeName","src":"8393:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1367,"initialValue":{"arguments":[{"id":1365,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1354,"src":"8415:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1364,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[1351,1387],"referencedDeclaration":1351,"src":"8410:4:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1366,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8410:7:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8393:24:6"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1368,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"8438:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$988","typeString":"enum MathUpgradeable.Rounding"},"id":1372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1369,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1357,"src":"8448:8:6","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$988","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1370,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":988,"src":"8460:8:6","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$988_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":1371,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8469:2:6","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":986,"src":"8460:11:6","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$988","typeString":"enum MathUpgradeable.Rounding"}},"src":"8448:23:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1373,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"8475:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1374,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"8484:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8475:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1376,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1354,"src":"8493:1:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8475:19:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8448:46:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1380,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8501:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8448:54:6","trueExpression":{"hexValue":"31","id":1379,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8497:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1382,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8447:56:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8438:65:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1361,"id":1384,"nodeType":"Return","src":"8431:72:6"}]}]},"documentation":{"id":1352,"nodeType":"StructuredDocumentation","src":"8189:89:6","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":1387,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8292:4:6","nodeType":"FunctionDefinition","parameters":{"id":1358,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1354,"mutability":"mutable","name":"a","nameLocation":"8305:1:6","nodeType":"VariableDeclaration","scope":1387,"src":"8297:9:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1353,"name":"uint256","nodeType":"ElementaryTypeName","src":"8297:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1357,"mutability":"mutable","name":"rounding","nameLocation":"8317:8:6","nodeType":"VariableDeclaration","scope":1387,"src":"8308:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$988","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":1356,"nodeType":"UserDefinedTypeName","pathNode":{"id":1355,"name":"Rounding","nameLocations":["8308:8:6"],"nodeType":"IdentifierPath","referencedDeclaration":988,"src":"8308:8:6"},"referencedDeclaration":988,"src":"8308:8:6","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$988","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"8296:30:6"},"returnParameters":{"id":1361,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1360,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1387,"src":"8350:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1359,"name":"uint256","nodeType":"ElementaryTypeName","src":"8350:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8349:9:6"},"scope":1847,"src":"8283:237:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1518,"nodeType":"Block","src":"8705:922:6","statements":[{"assignments":[1396],"declarations":[{"constant":false,"id":1396,"mutability":"mutable","name":"result","nameLocation":"8723:6:6","nodeType":"VariableDeclaration","scope":1518,"src":"8715:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1395,"name":"uint256","nodeType":"ElementaryTypeName","src":"8715:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1398,"initialValue":{"hexValue":"30","id":1397,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8732:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8715:18:6"},{"id":1515,"nodeType":"UncheckedBlock","src":"8743:855:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1399,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1390,"src":"8771:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":1400,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8780:3:6","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8771:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1402,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8786:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8771:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1413,"nodeType":"IfStatement","src":"8767:99:6","trueBody":{"id":1412,"nodeType":"Block","src":"8789:77:6","statements":[{"expression":{"id":1406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1404,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1390,"src":"8807:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":1405,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8817:3:6","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8807:13:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1407,"nodeType":"ExpressionStatement","src":"8807:13:6"},{"expression":{"id":1410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1408,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1396,"src":"8838:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":1409,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8848:3:6","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8838:13:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1411,"nodeType":"ExpressionStatement","src":"8838:13:6"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1414,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1390,"src":"8883:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":1415,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8892:2:6","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8883:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1417,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8897:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8883:15:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1428,"nodeType":"IfStatement","src":"8879:96:6","trueBody":{"id":1427,"nodeType":"Block","src":"8900:75:6","statements":[{"expression":{"id":1421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1419,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1390,"src":"8918:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":1420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8928:2:6","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8918:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1422,"nodeType":"ExpressionStatement","src":"8918:12:6"},{"expression":{"id":1425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1423,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1396,"src":"8948:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":1424,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8958:2:6","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8948:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1426,"nodeType":"ExpressionStatement","src":"8948:12:6"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1429,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1390,"src":"8992:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":1430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9001:2:6","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8992:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1432,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9006:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8992:15:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1443,"nodeType":"IfStatement","src":"8988:96:6","trueBody":{"id":1442,"nodeType":"Block","src":"9009:75:6","statements":[{"expression":{"id":1436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1434,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1390,"src":"9027:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":1435,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9037:2:6","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9027:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1437,"nodeType":"ExpressionStatement","src":"9027:12:6"},{"expression":{"id":1440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1438,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1396,"src":"9057:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":1439,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9067:2:6","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9057:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1441,"nodeType":"ExpressionStatement","src":"9057:12:6"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1444,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1390,"src":"9101:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":1445,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9110:2:6","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9101:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1447,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9115:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9101:15:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1458,"nodeType":"IfStatement","src":"9097:96:6","trueBody":{"id":1457,"nodeType":"Block","src":"9118:75:6","statements":[{"expression":{"id":1451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1449,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1390,"src":"9136:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":1450,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9146:2:6","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9136:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1452,"nodeType":"ExpressionStatement","src":"9136:12:6"},{"expression":{"id":1455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1453,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1396,"src":"9166:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":1454,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9176:2:6","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9166:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1456,"nodeType":"ExpressionStatement","src":"9166:12:6"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1459,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1390,"src":"9210:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":1460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9219:1:6","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9210:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1462,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9223:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9210:14:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1473,"nodeType":"IfStatement","src":"9206:93:6","trueBody":{"id":1472,"nodeType":"Block","src":"9226:73:6","statements":[{"expression":{"id":1466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1464,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1390,"src":"9244:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":1465,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9254:1:6","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9244:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1467,"nodeType":"ExpressionStatement","src":"9244:11:6"},{"expression":{"id":1470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1468,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1396,"src":"9273:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":1469,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9283:1:6","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9273:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1471,"nodeType":"ExpressionStatement","src":"9273:11:6"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1474,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1390,"src":"9316:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":1475,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9325:1:6","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9316:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1477,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9329:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9316:14:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1488,"nodeType":"IfStatement","src":"9312:93:6","trueBody":{"id":1487,"nodeType":"Block","src":"9332:73:6","statements":[{"expression":{"id":1481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1479,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1390,"src":"9350:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":1480,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9360:1:6","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9350:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1482,"nodeType":"ExpressionStatement","src":"9350:11:6"},{"expression":{"id":1485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1483,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1396,"src":"9379:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":1484,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9389:1:6","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9379:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1486,"nodeType":"ExpressionStatement","src":"9379:11:6"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1489,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1390,"src":"9422:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":1490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9431:1:6","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9422:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1492,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9435:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9422:14:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1503,"nodeType":"IfStatement","src":"9418:93:6","trueBody":{"id":1502,"nodeType":"Block","src":"9438:73:6","statements":[{"expression":{"id":1496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1494,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1390,"src":"9456:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":1495,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9466:1:6","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9456:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1497,"nodeType":"ExpressionStatement","src":"9456:11:6"},{"expression":{"id":1500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1498,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1396,"src":"9485:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":1499,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9495:1:6","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9485:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1501,"nodeType":"ExpressionStatement","src":"9485:11:6"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1504,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1390,"src":"9528:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1505,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9537:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9528:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9541:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9528:14:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1514,"nodeType":"IfStatement","src":"9524:64:6","trueBody":{"id":1513,"nodeType":"Block","src":"9544:44:6","statements":[{"expression":{"id":1511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1509,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1396,"src":"9562:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1510,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9572:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9562:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1512,"nodeType":"ExpressionStatement","src":"9562:11:6"}]}}]},{"expression":{"id":1516,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1396,"src":"9614:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1394,"id":1517,"nodeType":"Return","src":"9607:13:6"}]},"documentation":{"id":1388,"nodeType":"StructuredDocumentation","src":"8526:113:6","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":1519,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8653:4:6","nodeType":"FunctionDefinition","parameters":{"id":1391,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1390,"mutability":"mutable","name":"value","nameLocation":"8666:5:6","nodeType":"VariableDeclaration","scope":1519,"src":"8658:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1389,"name":"uint256","nodeType":"ElementaryTypeName","src":"8658:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8657:15:6"},"returnParameters":{"id":1394,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1393,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1519,"src":"8696:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1392,"name":"uint256","nodeType":"ElementaryTypeName","src":"8696:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8695:9:6"},"scope":1847,"src":"8644:983:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1554,"nodeType":"Block","src":"9860:165:6","statements":[{"id":1553,"nodeType":"UncheckedBlock","src":"9870:149:6","statements":[{"assignments":[1531],"declarations":[{"constant":false,"id":1531,"mutability":"mutable","name":"result","nameLocation":"9902:6:6","nodeType":"VariableDeclaration","scope":1553,"src":"9894:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1530,"name":"uint256","nodeType":"ElementaryTypeName","src":"9894:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1535,"initialValue":{"arguments":[{"id":1533,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1522,"src":"9916:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1532,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[1519,1555],"referencedDeclaration":1519,"src":"9911:4:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1534,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9911:11:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9894:28:6"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1536,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1531,"src":"9943:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$988","typeString":"enum MathUpgradeable.Rounding"},"id":1540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1537,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1525,"src":"9953:8:6","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$988","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1538,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":988,"src":"9965:8:6","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$988_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":1539,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9974:2:6","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":986,"src":"9965:11:6","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$988","typeString":"enum MathUpgradeable.Rounding"}},"src":"9953:23:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1541,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9980:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":1542,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1531,"src":"9985:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9980:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1544,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1522,"src":"9994:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9980:19:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9953:46:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1548,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10006:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9953:54:6","trueExpression":{"hexValue":"31","id":1547,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10002:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1550,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9952:56:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9943:65:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1529,"id":1552,"nodeType":"Return","src":"9936:72:6"}]}]},"documentation":{"id":1520,"nodeType":"StructuredDocumentation","src":"9633:142:6","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":1555,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9789:4:6","nodeType":"FunctionDefinition","parameters":{"id":1526,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1522,"mutability":"mutable","name":"value","nameLocation":"9802:5:6","nodeType":"VariableDeclaration","scope":1555,"src":"9794:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1521,"name":"uint256","nodeType":"ElementaryTypeName","src":"9794:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1525,"mutability":"mutable","name":"rounding","nameLocation":"9818:8:6","nodeType":"VariableDeclaration","scope":1555,"src":"9809:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$988","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":1524,"nodeType":"UserDefinedTypeName","pathNode":{"id":1523,"name":"Rounding","nameLocations":["9809:8:6"],"nodeType":"IdentifierPath","referencedDeclaration":988,"src":"9809:8:6"},"referencedDeclaration":988,"src":"9809:8:6","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$988","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"9793:34:6"},"returnParameters":{"id":1529,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1528,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1555,"src":"9851:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1527,"name":"uint256","nodeType":"ElementaryTypeName","src":"9851:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9850:9:6"},"scope":1847,"src":"9780:245:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1683,"nodeType":"Block","src":"10212:854:6","statements":[{"assignments":[1564],"declarations":[{"constant":false,"id":1564,"mutability":"mutable","name":"result","nameLocation":"10230:6:6","nodeType":"VariableDeclaration","scope":1683,"src":"10222:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1563,"name":"uint256","nodeType":"ElementaryTypeName","src":"10222:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1566,"initialValue":{"hexValue":"30","id":1565,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10239:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10222:18:6"},{"id":1680,"nodeType":"UncheckedBlock","src":"10250:787:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1567,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1558,"src":"10278:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":1570,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1568,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10287:2:6","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":1569,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10293:2:6","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10287:8:6","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10278:17:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1583,"nodeType":"IfStatement","src":"10274:103:6","trueBody":{"id":1582,"nodeType":"Block","src":"10297:80:6","statements":[{"expression":{"id":1576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1572,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1558,"src":"10315:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":1575,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10324:2:6","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":1574,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10330:2:6","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10324:8:6","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10315:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1577,"nodeType":"ExpressionStatement","src":"10315:17:6"},{"expression":{"id":1580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1578,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1564,"src":"10350:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":1579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10360:2:6","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10350:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1581,"nodeType":"ExpressionStatement","src":"10350:12:6"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1584,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1558,"src":"10394:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":1587,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1585,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10403:2:6","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":1586,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10409:2:6","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10403:8:6","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10394:17:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1600,"nodeType":"IfStatement","src":"10390:103:6","trueBody":{"id":1599,"nodeType":"Block","src":"10413:80:6","statements":[{"expression":{"id":1593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1589,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1558,"src":"10431:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":1592,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1590,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10440:2:6","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":1591,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10446:2:6","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10440:8:6","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10431:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1594,"nodeType":"ExpressionStatement","src":"10431:17:6"},{"expression":{"id":1597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1595,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1564,"src":"10466:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":1596,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10476:2:6","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10466:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1598,"nodeType":"ExpressionStatement","src":"10466:12:6"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1601,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1558,"src":"10510:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":1604,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1602,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10519:2:6","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":1603,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10525:2:6","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10519:8:6","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10510:17:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1617,"nodeType":"IfStatement","src":"10506:103:6","trueBody":{"id":1616,"nodeType":"Block","src":"10529:80:6","statements":[{"expression":{"id":1610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1606,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1558,"src":"10547:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":1609,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1607,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10556:2:6","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":1608,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10562:2:6","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10556:8:6","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10547:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1611,"nodeType":"ExpressionStatement","src":"10547:17:6"},{"expression":{"id":1614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1612,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1564,"src":"10582:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":1613,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10592:2:6","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10582:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1615,"nodeType":"ExpressionStatement","src":"10582:12:6"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1618,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1558,"src":"10626:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":1621,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1619,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10635:2:6","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":1620,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10641:1:6","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10635:7:6","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10626:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1634,"nodeType":"IfStatement","src":"10622:100:6","trueBody":{"id":1633,"nodeType":"Block","src":"10644:78:6","statements":[{"expression":{"id":1627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1623,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1558,"src":"10662:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":1626,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1624,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10671:2:6","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":1625,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10677:1:6","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10671:7:6","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10662:16:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1628,"nodeType":"ExpressionStatement","src":"10662:16:6"},{"expression":{"id":1631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1629,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1564,"src":"10696:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":1630,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10706:1:6","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10696:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1632,"nodeType":"ExpressionStatement","src":"10696:11:6"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1635,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1558,"src":"10739:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":1638,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1636,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10748:2:6","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":1637,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10754:1:6","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10748:7:6","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10739:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1651,"nodeType":"IfStatement","src":"10735:100:6","trueBody":{"id":1650,"nodeType":"Block","src":"10757:78:6","statements":[{"expression":{"id":1644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1640,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1558,"src":"10775:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":1643,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1641,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10784:2:6","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":1642,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10790:1:6","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10784:7:6","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10775:16:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1645,"nodeType":"ExpressionStatement","src":"10775:16:6"},{"expression":{"id":1648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1646,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1564,"src":"10809:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":1647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10819:1:6","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10809:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1649,"nodeType":"ExpressionStatement","src":"10809:11:6"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1652,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1558,"src":"10852:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":1655,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1653,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10861:2:6","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":1654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10867:1:6","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10861:7:6","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10852:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1668,"nodeType":"IfStatement","src":"10848:100:6","trueBody":{"id":1667,"nodeType":"Block","src":"10870:78:6","statements":[{"expression":{"id":1661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1657,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1558,"src":"10888:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":1660,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1658,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10897:2:6","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":1659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10903:1:6","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10897:7:6","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10888:16:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1662,"nodeType":"ExpressionStatement","src":"10888:16:6"},{"expression":{"id":1665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1663,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1564,"src":"10922:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":1664,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10932:1:6","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10922:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1666,"nodeType":"ExpressionStatement","src":"10922:11:6"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1669,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1558,"src":"10965:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":1672,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1670,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10974:2:6","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":1671,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10980:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10974:7:6","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10965:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1679,"nodeType":"IfStatement","src":"10961:66:6","trueBody":{"id":1678,"nodeType":"Block","src":"10983:44:6","statements":[{"expression":{"id":1676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1674,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1564,"src":"11001:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1675,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11011:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11001:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1677,"nodeType":"ExpressionStatement","src":"11001:11:6"}]}}]},{"expression":{"id":1681,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1564,"src":"11053:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1562,"id":1682,"nodeType":"Return","src":"11046:13:6"}]},"documentation":{"id":1556,"nodeType":"StructuredDocumentation","src":"10031:114:6","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":1684,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10159:5:6","nodeType":"FunctionDefinition","parameters":{"id":1559,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1558,"mutability":"mutable","name":"value","nameLocation":"10173:5:6","nodeType":"VariableDeclaration","scope":1684,"src":"10165:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1557,"name":"uint256","nodeType":"ElementaryTypeName","src":"10165:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10164:15:6"},"returnParameters":{"id":1562,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1561,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1684,"src":"10203:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1560,"name":"uint256","nodeType":"ElementaryTypeName","src":"10203:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10202:9:6"},"scope":1847,"src":"10150:916:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1719,"nodeType":"Block","src":"11301:167:6","statements":[{"id":1718,"nodeType":"UncheckedBlock","src":"11311:151:6","statements":[{"assignments":[1696],"declarations":[{"constant":false,"id":1696,"mutability":"mutable","name":"result","nameLocation":"11343:6:6","nodeType":"VariableDeclaration","scope":1718,"src":"11335:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1695,"name":"uint256","nodeType":"ElementaryTypeName","src":"11335:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1700,"initialValue":{"arguments":[{"id":1698,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1687,"src":"11358:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1697,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[1684,1720],"referencedDeclaration":1684,"src":"11352:5:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1699,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11352:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11335:29:6"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1701,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1696,"src":"11385:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$988","typeString":"enum MathUpgradeable.Rounding"},"id":1705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1702,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1690,"src":"11395:8:6","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$988","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1703,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":988,"src":"11407:8:6","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$988_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":1704,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11416:2:6","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":986,"src":"11407:11:6","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$988","typeString":"enum MathUpgradeable.Rounding"}},"src":"11395:23:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1706,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11422:2:6","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":1707,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1696,"src":"11428:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11422:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1709,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1687,"src":"11437:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11422:20:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11395:47:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1713,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11449:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11395:55:6","trueExpression":{"hexValue":"31","id":1712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11445:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1715,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11394:57:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11385:66:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1694,"id":1717,"nodeType":"Return","src":"11378:73:6"}]}]},"documentation":{"id":1685,"nodeType":"StructuredDocumentation","src":"11072:143:6","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":1720,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"11229:5:6","nodeType":"FunctionDefinition","parameters":{"id":1691,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1687,"mutability":"mutable","name":"value","nameLocation":"11243:5:6","nodeType":"VariableDeclaration","scope":1720,"src":"11235:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1686,"name":"uint256","nodeType":"ElementaryTypeName","src":"11235:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1690,"mutability":"mutable","name":"rounding","nameLocation":"11259:8:6","nodeType":"VariableDeclaration","scope":1720,"src":"11250:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$988","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":1689,"nodeType":"UserDefinedTypeName","pathNode":{"id":1688,"name":"Rounding","nameLocations":["11250:8:6"],"nodeType":"IdentifierPath","referencedDeclaration":988,"src":"11250:8:6"},"referencedDeclaration":988,"src":"11250:8:6","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$988","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"11234:34:6"},"returnParameters":{"id":1694,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1693,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1720,"src":"11292:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1692,"name":"uint256","nodeType":"ElementaryTypeName","src":"11292:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11291:9:6"},"scope":1847,"src":"11220:248:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1806,"nodeType":"Block","src":"11782:600:6","statements":[{"assignments":[1729],"declarations":[{"constant":false,"id":1729,"mutability":"mutable","name":"result","nameLocation":"11800:6:6","nodeType":"VariableDeclaration","scope":1806,"src":"11792:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1728,"name":"uint256","nodeType":"ElementaryTypeName","src":"11792:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1731,"initialValue":{"hexValue":"30","id":1730,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11809:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11792:18:6"},{"id":1803,"nodeType":"UncheckedBlock","src":"11820:533:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1732,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1723,"src":"11848:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":1733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11857:3:6","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11848:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1735,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11863:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11848:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1746,"nodeType":"IfStatement","src":"11844:98:6","trueBody":{"id":1745,"nodeType":"Block","src":"11866:76:6","statements":[{"expression":{"id":1739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1737,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1723,"src":"11884:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":1738,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11894:3:6","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11884:13:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1740,"nodeType":"ExpressionStatement","src":"11884:13:6"},{"expression":{"id":1743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1741,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1729,"src":"11915:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":1742,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11925:2:6","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11915:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1744,"nodeType":"ExpressionStatement","src":"11915:12:6"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1747,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1723,"src":"11959:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":1748,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11968:2:6","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11959:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1750,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11973:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11959:15:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1761,"nodeType":"IfStatement","src":"11955:95:6","trueBody":{"id":1760,"nodeType":"Block","src":"11976:74:6","statements":[{"expression":{"id":1754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1752,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1723,"src":"11994:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":1753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12004:2:6","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11994:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1755,"nodeType":"ExpressionStatement","src":"11994:12:6"},{"expression":{"id":1758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1756,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1729,"src":"12024:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":1757,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12034:1:6","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12024:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1759,"nodeType":"ExpressionStatement","src":"12024:11:6"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1762,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1723,"src":"12067:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":1763,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12076:2:6","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12067:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1765,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12081:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12067:15:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1776,"nodeType":"IfStatement","src":"12063:95:6","trueBody":{"id":1775,"nodeType":"Block","src":"12084:74:6","statements":[{"expression":{"id":1769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1767,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1723,"src":"12102:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":1768,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12112:2:6","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12102:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1770,"nodeType":"ExpressionStatement","src":"12102:12:6"},{"expression":{"id":1773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1771,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1729,"src":"12132:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":1772,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12142:1:6","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12132:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1774,"nodeType":"ExpressionStatement","src":"12132:11:6"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1781,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1777,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1723,"src":"12175:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":1778,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12184:2:6","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12175:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1780,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12189:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12175:15:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1791,"nodeType":"IfStatement","src":"12171:95:6","trueBody":{"id":1790,"nodeType":"Block","src":"12192:74:6","statements":[{"expression":{"id":1784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1782,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1723,"src":"12210:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":1783,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12220:2:6","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12210:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1785,"nodeType":"ExpressionStatement","src":"12210:12:6"},{"expression":{"id":1788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1786,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1729,"src":"12240:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":1787,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12250:1:6","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12240:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1789,"nodeType":"ExpressionStatement","src":"12240:11:6"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1792,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1723,"src":"12283:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":1793,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12292:1:6","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12283:10:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1795,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12296:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12283:14:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1802,"nodeType":"IfStatement","src":"12279:64:6","trueBody":{"id":1801,"nodeType":"Block","src":"12299:44:6","statements":[{"expression":{"id":1799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1797,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1729,"src":"12317:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1798,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12327:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12317:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1800,"nodeType":"ExpressionStatement","src":"12317:11:6"}]}}]},{"expression":{"id":1804,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1729,"src":"12369:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1727,"id":1805,"nodeType":"Return","src":"12362:13:6"}]},"documentation":{"id":1721,"nodeType":"StructuredDocumentation","src":"11474:240:6","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":1807,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11728:6:6","nodeType":"FunctionDefinition","parameters":{"id":1724,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1723,"mutability":"mutable","name":"value","nameLocation":"11743:5:6","nodeType":"VariableDeclaration","scope":1807,"src":"11735:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1722,"name":"uint256","nodeType":"ElementaryTypeName","src":"11735:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11734:15:6"},"returnParameters":{"id":1727,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1726,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1807,"src":"11773:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1725,"name":"uint256","nodeType":"ElementaryTypeName","src":"11773:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11772:9:6"},"scope":1847,"src":"11719:663:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1845,"nodeType":"Block","src":"12619:174:6","statements":[{"id":1844,"nodeType":"UncheckedBlock","src":"12629:158:6","statements":[{"assignments":[1819],"declarations":[{"constant":false,"id":1819,"mutability":"mutable","name":"result","nameLocation":"12661:6:6","nodeType":"VariableDeclaration","scope":1844,"src":"12653:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1818,"name":"uint256","nodeType":"ElementaryTypeName","src":"12653:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1823,"initialValue":{"arguments":[{"id":1821,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1810,"src":"12677:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1820,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[1807,1846],"referencedDeclaration":1807,"src":"12670:6:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1822,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12670:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12653:30:6"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1824,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1819,"src":"12704:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$988","typeString":"enum MathUpgradeable.Rounding"},"id":1828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1825,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1813,"src":"12714:8:6","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$988","typeString":"enum MathUpgradeable.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1826,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":988,"src":"12726:8:6","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$988_$","typeString":"type(enum MathUpgradeable.Rounding)"}},"id":1827,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12735:2:6","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":986,"src":"12726:11:6","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$988","typeString":"enum MathUpgradeable.Rounding"}},"src":"12714:23:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1834,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1829,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12741:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1830,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1819,"src":"12747:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":1831,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12757:1:6","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"12747:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1833,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12746:13:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12741:18:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1835,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1810,"src":"12762:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12741:26:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12714:53:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":1839,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12774:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":1840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12714:61:6","trueExpression":{"hexValue":"31","id":1838,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12770:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":1841,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12713:63:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12704:72:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1817,"id":1843,"nodeType":"Return","src":"12697:79:6"}]}]},"documentation":{"id":1808,"nodeType":"StructuredDocumentation","src":"12388:144:6","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":1846,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12546:6:6","nodeType":"FunctionDefinition","parameters":{"id":1814,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1810,"mutability":"mutable","name":"value","nameLocation":"12561:5:6","nodeType":"VariableDeclaration","scope":1846,"src":"12553:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1809,"name":"uint256","nodeType":"ElementaryTypeName","src":"12553:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1813,"mutability":"mutable","name":"rounding","nameLocation":"12577:8:6","nodeType":"VariableDeclaration","scope":1846,"src":"12568:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$988","typeString":"enum MathUpgradeable.Rounding"},"typeName":{"id":1812,"nodeType":"UserDefinedTypeName","pathNode":{"id":1811,"name":"Rounding","nameLocations":["12568:8:6"],"nodeType":"IdentifierPath","referencedDeclaration":988,"src":"12568:8:6"},"referencedDeclaration":988,"src":"12568:8:6","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$988","typeString":"enum MathUpgradeable.Rounding"}},"visibility":"internal"}],"src":"12552:34:6"},"returnParameters":{"id":1817,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1816,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1846,"src":"12610:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1815,"name":"uint256","nodeType":"ElementaryTypeName","src":"12610:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12609:9:6"},"scope":1847,"src":"12537:256:6","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1848,"src":"202:12593:6","usedErrors":[]}],"src":"103:12693:6"},"id":6},"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol","exportedSymbols":{"SignedMathUpgradeable":[1952]},"id":1953,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1849,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"109:23:7"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMathUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1850,"nodeType":"StructuredDocumentation","src":"134:80:7","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":1952,"linearizedBaseContracts":[1952],"name":"SignedMathUpgradeable","nameLocation":"223:21:7","nodeType":"ContractDefinition","nodes":[{"body":{"id":1867,"nodeType":"Block","src":"386:37:7","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1860,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1853,"src":"403:1:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1861,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1855,"src":"407:1:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"403:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1864,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1855,"src":"415:1:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":1865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"403:13:7","trueExpression":{"id":1863,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1853,"src":"411:1:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":1859,"id":1866,"nodeType":"Return","src":"396:20:7"}]},"documentation":{"id":1851,"nodeType":"StructuredDocumentation","src":"251:66:7","text":" @dev Returns the largest of two signed numbers."},"id":1868,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"331:3:7","nodeType":"FunctionDefinition","parameters":{"id":1856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1853,"mutability":"mutable","name":"a","nameLocation":"342:1:7","nodeType":"VariableDeclaration","scope":1868,"src":"335:8:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1852,"name":"int256","nodeType":"ElementaryTypeName","src":"335:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1855,"mutability":"mutable","name":"b","nameLocation":"352:1:7","nodeType":"VariableDeclaration","scope":1868,"src":"345:8:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1854,"name":"int256","nodeType":"ElementaryTypeName","src":"345:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"334:20:7"},"returnParameters":{"id":1859,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1858,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1868,"src":"378:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1857,"name":"int256","nodeType":"ElementaryTypeName","src":"378:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"377:8:7"},"scope":1952,"src":"322:101:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1885,"nodeType":"Block","src":"565:37:7","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1878,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1871,"src":"582:1:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1879,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1873,"src":"586:1:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"582:5:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1882,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1873,"src":"594:1:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":1883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"582:13:7","trueExpression":{"id":1881,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1871,"src":"590:1:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":1877,"id":1884,"nodeType":"Return","src":"575:20:7"}]},"documentation":{"id":1869,"nodeType":"StructuredDocumentation","src":"429:67:7","text":" @dev Returns the smallest of two signed numbers."},"id":1886,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"510:3:7","nodeType":"FunctionDefinition","parameters":{"id":1874,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1871,"mutability":"mutable","name":"a","nameLocation":"521:1:7","nodeType":"VariableDeclaration","scope":1886,"src":"514:8:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1870,"name":"int256","nodeType":"ElementaryTypeName","src":"514:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1873,"mutability":"mutable","name":"b","nameLocation":"531:1:7","nodeType":"VariableDeclaration","scope":1886,"src":"524:8:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1872,"name":"int256","nodeType":"ElementaryTypeName","src":"524:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"513:20:7"},"returnParameters":{"id":1877,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1876,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1886,"src":"557:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1875,"name":"int256","nodeType":"ElementaryTypeName","src":"557:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"556:8:7"},"scope":1952,"src":"501:101:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1929,"nodeType":"Block","src":"807:162:7","statements":[{"assignments":[1897],"declarations":[{"constant":false,"id":1897,"mutability":"mutable","name":"x","nameLocation":"876:1:7","nodeType":"VariableDeclaration","scope":1929,"src":"869:8:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1896,"name":"int256","nodeType":"ElementaryTypeName","src":"869:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":1910,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1898,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1889,"src":"881:1:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":1899,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1891,"src":"885:1:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"881:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1901,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:7:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1902,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1889,"src":"892:1:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":1903,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1891,"src":"896:1:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"892:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1905,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"891:7:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1906,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"902:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"891:12:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1908,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"890:14:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"880:24:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"869:35:7"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1911,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1897,"src":"921:1:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1916,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1897,"src":"941:1:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":1915,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"933:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1914,"name":"uint256","nodeType":"ElementaryTypeName","src":"933:7:7","typeDescriptions":{}}},"id":1917,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"933:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":1918,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"947:3:7","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"933:17:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1913,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"926:6:7","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":1912,"name":"int256","nodeType":"ElementaryTypeName","src":"926:6:7","typeDescriptions":{}}},"id":1920,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"926:25:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1921,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1889,"src":"955:1:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":1922,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1891,"src":"959:1:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"955:5:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1924,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"954:7:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"926:35:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":1926,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"925:37:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"921:41:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":1895,"id":1928,"nodeType":"Return","src":"914:48:7"}]},"documentation":{"id":1887,"nodeType":"StructuredDocumentation","src":"608:126:7","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":1930,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"748:7:7","nodeType":"FunctionDefinition","parameters":{"id":1892,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1889,"mutability":"mutable","name":"a","nameLocation":"763:1:7","nodeType":"VariableDeclaration","scope":1930,"src":"756:8:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1888,"name":"int256","nodeType":"ElementaryTypeName","src":"756:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":1891,"mutability":"mutable","name":"b","nameLocation":"773:1:7","nodeType":"VariableDeclaration","scope":1930,"src":"766:8:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1890,"name":"int256","nodeType":"ElementaryTypeName","src":"766:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"755:20:7"},"returnParameters":{"id":1895,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1894,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1930,"src":"799:6:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1893,"name":"int256","nodeType":"ElementaryTypeName","src":"799:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"798:8:7"},"scope":1952,"src":"739:230:7","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1950,"nodeType":"Block","src":"1113:158:7","statements":[{"id":1949,"nodeType":"UncheckedBlock","src":"1123:142:7","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1940,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1933,"src":"1238:1:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":1941,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1243:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1238:6:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1251:2:7","subExpression":{"id":1944,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1933,"src":"1252:1:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":1946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1238:15:7","trueExpression":{"id":1943,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1933,"src":"1247:1:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":1939,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1230:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1938,"name":"uint256","nodeType":"ElementaryTypeName","src":"1230:7:7","typeDescriptions":{}}},"id":1947,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1230:24:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1937,"id":1948,"nodeType":"Return","src":"1223:31:7"}]}]},"documentation":{"id":1931,"nodeType":"StructuredDocumentation","src":"975:78:7","text":" @dev Returns the absolute unsigned value of a signed value."},"id":1951,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1067:3:7","nodeType":"FunctionDefinition","parameters":{"id":1934,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1933,"mutability":"mutable","name":"n","nameLocation":"1078:1:7","nodeType":"VariableDeclaration","scope":1951,"src":"1071:8:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1932,"name":"int256","nodeType":"ElementaryTypeName","src":"1071:6:7","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1070:10:7"},"returnParameters":{"id":1937,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1936,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1951,"src":"1104:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1935,"name":"uint256","nodeType":"ElementaryTypeName","src":"1104:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1103:9:7"},"scope":1952,"src":"1058:213:7","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1953,"src":"215:1058:7","usedErrors":[]}],"src":"109:1165:7"},"id":7},"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol","exportedSymbols":{"EnumerableSetUpgradeable":[2565]},"id":2566,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1954,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"205:23:8"},{"abstract":false,"baseContracts":[],"canonicalName":"EnumerableSetUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":1955,"nodeType":"StructuredDocumentation","src":"230:1098:8","text":" @dev Library for managing\n https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n types.\n Sets have the following properties:\n - Elements are added, removed, and checked for existence in constant time\n (O(1)).\n - Elements are enumerated in O(n). No guarantees are made on the ordering.\n ```solidity\n contract Example {\n     // Add the library methods\n     using EnumerableSet for EnumerableSet.AddressSet;\n     // Declare a set state variable\n     EnumerableSet.AddressSet private mySet;\n }\n ```\n As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n and `uint256` (`UintSet`) are supported.\n [WARNING]\n ====\n Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n unusable.\n See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n array of EnumerableSet.\n ===="},"fullyImplemented":true,"id":2565,"linearizedBaseContracts":[2565],"name":"EnumerableSetUpgradeable","nameLocation":"1337:24:8","nodeType":"ContractDefinition","nodes":[{"canonicalName":"EnumerableSetUpgradeable.Set","id":1963,"members":[{"constant":false,"id":1958,"mutability":"mutable","name":"_values","nameLocation":"1872:7:8","nodeType":"VariableDeclaration","scope":1963,"src":"1862:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1956,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1862:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1957,"nodeType":"ArrayTypeName","src":"1862:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1962,"mutability":"mutable","name":"_indexes","nameLocation":"2040:8:8","nodeType":"VariableDeclaration","scope":1963,"src":"2012:36:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"typeName":{"id":1961,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1959,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2020:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2012:27:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1960,"name":"uint256","nodeType":"ElementaryTypeName","src":"2031:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"}],"name":"Set","nameLocation":"1815:3:8","nodeType":"StructDefinition","scope":2565,"src":"1808:247:8","visibility":"public"},{"body":{"id":2004,"nodeType":"Block","src":"2294:335:8","statements":[{"condition":{"id":1978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2308:22:8","subExpression":{"arguments":[{"id":1975,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1967,"src":"2319:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"}},{"id":1976,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"2324:5:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$1963_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1974,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2108,"src":"2309:9:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$1963_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer,bytes32) view returns (bool)"}},"id":1977,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2309:21:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2002,"nodeType":"Block","src":"2586:37:8","statements":[{"expression":{"hexValue":"66616c7365","id":2000,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2607:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":1973,"id":2001,"nodeType":"Return","src":"2600:12:8"}]},"id":2003,"nodeType":"IfStatement","src":"2304:319:8","trueBody":{"id":1999,"nodeType":"Block","src":"2332:248:8","statements":[{"expression":{"arguments":[{"id":1984,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"2363:5:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"expression":{"id":1979,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1967,"src":"2346:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"}},"id":1982,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2350:7:8","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":1958,"src":"2346:11:8","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":1983,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2358:4:8","memberName":"push","nodeType":"MemberAccess","src":"2346:16:8","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$_t_bytes32_$returns$__$attached_to$_t_array$_t_bytes32_$dyn_storage_ptr_$","typeString":"function (bytes32[] storage pointer,bytes32)"}},"id":1985,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2346:23:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1986,"nodeType":"ExpressionStatement","src":"2346:23:8"},{"expression":{"id":1995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":1987,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1967,"src":"2504:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"}},"id":1990,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2508:8:8","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":1962,"src":"2504:12:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":1991,"indexExpression":{"id":1989,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"2517:5:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2504:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"expression":{"id":1992,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1967,"src":"2526:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"}},"id":1993,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2530:7:8","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":1958,"src":"2526:11:8","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":1994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2538:6:8","memberName":"length","nodeType":"MemberAccess","src":"2526:18:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2504:40:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1996,"nodeType":"ExpressionStatement","src":"2504:40:8"},{"expression":{"hexValue":"74727565","id":1997,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2565:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1973,"id":1998,"nodeType":"Return","src":"2558:11:8"}]}}]},"documentation":{"id":1964,"nodeType":"StructuredDocumentation","src":"2061:159:8","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":2005,"implemented":true,"kind":"function","modifiers":[],"name":"_add","nameLocation":"2234:4:8","nodeType":"FunctionDefinition","parameters":{"id":1970,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1967,"mutability":"mutable","name":"set","nameLocation":"2251:3:8","nodeType":"VariableDeclaration","scope":2005,"src":"2239:15:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"},"typeName":{"id":1966,"nodeType":"UserDefinedTypeName","pathNode":{"id":1965,"name":"Set","nameLocations":["2239:3:8"],"nodeType":"IdentifierPath","referencedDeclaration":1963,"src":"2239:3:8"},"referencedDeclaration":1963,"src":"2239:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"}},"visibility":"internal"},{"constant":false,"id":1969,"mutability":"mutable","name":"value","nameLocation":"2264:5:8","nodeType":"VariableDeclaration","scope":2005,"src":"2256:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1968,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2256:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2238:32:8"},"returnParameters":{"id":1973,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1972,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2005,"src":"2288:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1971,"name":"bool","nodeType":"ElementaryTypeName","src":"2288:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2287:6:8"},"scope":2565,"src":"2225:404:8","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":2088,"nodeType":"Block","src":"2869:1316:8","statements":[{"assignments":[2017],"declarations":[{"constant":false,"id":2017,"mutability":"mutable","name":"valueIndex","nameLocation":"2987:10:8","nodeType":"VariableDeclaration","scope":2088,"src":"2979:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2016,"name":"uint256","nodeType":"ElementaryTypeName","src":"2979:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2022,"initialValue":{"baseExpression":{"expression":{"id":2018,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2009,"src":"3000:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"}},"id":2019,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3004:8:8","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":1962,"src":"3000:12:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":2021,"indexExpression":{"id":2020,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2011,"src":"3013:5:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3000:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2979:40:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2023,"name":"valueIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2017,"src":"3034:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2024,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3048:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3034:15:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2086,"nodeType":"Block","src":"4142:37:8","statements":[{"expression":{"hexValue":"66616c7365","id":2084,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4163:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":2015,"id":2085,"nodeType":"Return","src":"4156:12:8"}]},"id":2087,"nodeType":"IfStatement","src":"3030:1149:8","trueBody":{"id":2083,"nodeType":"Block","src":"3051:1085:8","statements":[{"assignments":[2027],"declarations":[{"constant":false,"id":2027,"mutability":"mutable","name":"toDeleteIndex","nameLocation":"3411:13:8","nodeType":"VariableDeclaration","scope":2083,"src":"3403:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2026,"name":"uint256","nodeType":"ElementaryTypeName","src":"3403:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2031,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2028,"name":"valueIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2017,"src":"3427:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2029,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3440:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3427:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3403:38:8"},{"assignments":[2033],"declarations":[{"constant":false,"id":2033,"mutability":"mutable","name":"lastIndex","nameLocation":"3463:9:8","nodeType":"VariableDeclaration","scope":2083,"src":"3455:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2032,"name":"uint256","nodeType":"ElementaryTypeName","src":"3455:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2039,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2034,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2009,"src":"3475:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"}},"id":2035,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3479:7:8","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":1958,"src":"3475:11:8","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":2036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3487:6:8","memberName":"length","nodeType":"MemberAccess","src":"3475:18:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2037,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3496:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3475:22:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3455:42:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2040,"name":"lastIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2033,"src":"3516:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2041,"name":"toDeleteIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2027,"src":"3529:13:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3516:26:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2067,"nodeType":"IfStatement","src":"3512:398:8","trueBody":{"id":2066,"nodeType":"Block","src":"3544:366:8","statements":[{"assignments":[2044],"declarations":[{"constant":false,"id":2044,"mutability":"mutable","name":"lastValue","nameLocation":"3570:9:8","nodeType":"VariableDeclaration","scope":2066,"src":"3562:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2043,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3562:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2049,"initialValue":{"baseExpression":{"expression":{"id":2045,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2009,"src":"3582:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"}},"id":2046,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3586:7:8","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":1958,"src":"3582:11:8","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":2048,"indexExpression":{"id":2047,"name":"lastIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2033,"src":"3594:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3582:22:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3562:42:8"},{"expression":{"id":2056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2050,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2009,"src":"3704:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"}},"id":2053,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3708:7:8","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":1958,"src":"3704:11:8","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":2054,"indexExpression":{"id":2052,"name":"toDeleteIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2027,"src":"3716:13:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3704:26:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2055,"name":"lastValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2044,"src":"3733:9:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3704:38:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2057,"nodeType":"ExpressionStatement","src":"3704:38:8"},{"expression":{"id":2064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2058,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2009,"src":"3816:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"}},"id":2061,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3820:8:8","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":1962,"src":"3816:12:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":2062,"indexExpression":{"id":2060,"name":"lastValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2044,"src":"3829:9:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3816:23:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2063,"name":"valueIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2017,"src":"3842:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3816:36:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2065,"nodeType":"ExpressionStatement","src":"3816:36:8"}]}},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":2068,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2009,"src":"3988:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"}},"id":2071,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3992:7:8","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":1958,"src":"3988:11:8","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":2072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4000:3:8","memberName":"pop","nodeType":"MemberAccess","src":"3988:15:8","typeDescriptions":{"typeIdentifier":"t_function_arraypop_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$returns$__$attached_to$_t_array$_t_bytes32_$dyn_storage_ptr_$","typeString":"function (bytes32[] storage pointer)"}},"id":2073,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3988:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2074,"nodeType":"ExpressionStatement","src":"3988:17:8"},{"expression":{"id":2079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"4073:26:8","subExpression":{"baseExpression":{"expression":{"id":2075,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2009,"src":"4080:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"}},"id":2076,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4084:8:8","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":1962,"src":"4080:12:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":2078,"indexExpression":{"id":2077,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2011,"src":"4093:5:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4080:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2080,"nodeType":"ExpressionStatement","src":"4073:26:8"},{"expression":{"hexValue":"74727565","id":2081,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4121:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":2015,"id":2082,"nodeType":"Return","src":"4114:11:8"}]}}]},"documentation":{"id":2006,"nodeType":"StructuredDocumentation","src":"2635:157:8","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":2089,"implemented":true,"kind":"function","modifiers":[],"name":"_remove","nameLocation":"2806:7:8","nodeType":"FunctionDefinition","parameters":{"id":2012,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2009,"mutability":"mutable","name":"set","nameLocation":"2826:3:8","nodeType":"VariableDeclaration","scope":2089,"src":"2814:15:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"},"typeName":{"id":2008,"nodeType":"UserDefinedTypeName","pathNode":{"id":2007,"name":"Set","nameLocations":["2814:3:8"],"nodeType":"IdentifierPath","referencedDeclaration":1963,"src":"2814:3:8"},"referencedDeclaration":1963,"src":"2814:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"}},"visibility":"internal"},{"constant":false,"id":2011,"mutability":"mutable","name":"value","nameLocation":"2839:5:8","nodeType":"VariableDeclaration","scope":2089,"src":"2831:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2010,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2831:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2813:32:8"},"returnParameters":{"id":2015,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2014,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2089,"src":"2863:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2013,"name":"bool","nodeType":"ElementaryTypeName","src":"2863:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2862:6:8"},"scope":2565,"src":"2797:1388:8","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":2107,"nodeType":"Block","src":"4345:48:8","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"expression":{"id":2100,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2093,"src":"4362:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"}},"id":2101,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4366:8:8","memberName":"_indexes","nodeType":"MemberAccess","referencedDeclaration":1962,"src":"4362:12:8","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":2103,"indexExpression":{"id":2102,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2095,"src":"4375:5:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4362:19:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2104,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4385:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4362:24:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2099,"id":2106,"nodeType":"Return","src":"4355:31:8"}]},"documentation":{"id":2090,"nodeType":"StructuredDocumentation","src":"4191:70:8","text":" @dev Returns true if the value is in the set. O(1)."},"id":2108,"implemented":true,"kind":"function","modifiers":[],"name":"_contains","nameLocation":"4275:9:8","nodeType":"FunctionDefinition","parameters":{"id":2096,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2093,"mutability":"mutable","name":"set","nameLocation":"4297:3:8","nodeType":"VariableDeclaration","scope":2108,"src":"4285:15:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"},"typeName":{"id":2092,"nodeType":"UserDefinedTypeName","pathNode":{"id":2091,"name":"Set","nameLocations":["4285:3:8"],"nodeType":"IdentifierPath","referencedDeclaration":1963,"src":"4285:3:8"},"referencedDeclaration":1963,"src":"4285:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"}},"visibility":"internal"},{"constant":false,"id":2095,"mutability":"mutable","name":"value","nameLocation":"4310:5:8","nodeType":"VariableDeclaration","scope":2108,"src":"4302:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2094,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4302:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4284:32:8"},"returnParameters":{"id":2099,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2098,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2108,"src":"4339:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2097,"name":"bool","nodeType":"ElementaryTypeName","src":"4339:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4338:6:8"},"scope":2565,"src":"4266:127:8","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":2121,"nodeType":"Block","src":"4539:42:8","statements":[{"expression":{"expression":{"expression":{"id":2117,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2112,"src":"4556:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"}},"id":2118,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4560:7:8","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":1958,"src":"4556:11:8","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":2119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4568:6:8","memberName":"length","nodeType":"MemberAccess","src":"4556:18:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2116,"id":2120,"nodeType":"Return","src":"4549:25:8"}]},"documentation":{"id":2109,"nodeType":"StructuredDocumentation","src":"4399:70:8","text":" @dev Returns the number of values on the set. O(1)."},"id":2122,"implemented":true,"kind":"function","modifiers":[],"name":"_length","nameLocation":"4483:7:8","nodeType":"FunctionDefinition","parameters":{"id":2113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2112,"mutability":"mutable","name":"set","nameLocation":"4503:3:8","nodeType":"VariableDeclaration","scope":2122,"src":"4491:15:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"},"typeName":{"id":2111,"nodeType":"UserDefinedTypeName","pathNode":{"id":2110,"name":"Set","nameLocations":["4491:3:8"],"nodeType":"IdentifierPath","referencedDeclaration":1963,"src":"4491:3:8"},"referencedDeclaration":1963,"src":"4491:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"}},"visibility":"internal"}],"src":"4490:17:8"},"returnParameters":{"id":2116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2115,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2122,"src":"4530:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2114,"name":"uint256","nodeType":"ElementaryTypeName","src":"4530:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4529:9:8"},"scope":2565,"src":"4474:107:8","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":2138,"nodeType":"Block","src":"4999:42:8","statements":[{"expression":{"baseExpression":{"expression":{"id":2133,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2126,"src":"5016:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"}},"id":2134,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5020:7:8","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":1958,"src":"5016:11:8","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"id":2136,"indexExpression":{"id":2135,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2128,"src":"5028:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5016:18:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2132,"id":2137,"nodeType":"Return","src":"5009:25:8"}]},"documentation":{"id":2123,"nodeType":"StructuredDocumentation","src":"4587:331:8","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":2139,"implemented":true,"kind":"function","modifiers":[],"name":"_at","nameLocation":"4932:3:8","nodeType":"FunctionDefinition","parameters":{"id":2129,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2126,"mutability":"mutable","name":"set","nameLocation":"4948:3:8","nodeType":"VariableDeclaration","scope":2139,"src":"4936:15:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"},"typeName":{"id":2125,"nodeType":"UserDefinedTypeName","pathNode":{"id":2124,"name":"Set","nameLocations":["4936:3:8"],"nodeType":"IdentifierPath","referencedDeclaration":1963,"src":"4936:3:8"},"referencedDeclaration":1963,"src":"4936:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"}},"visibility":"internal"},{"constant":false,"id":2128,"mutability":"mutable","name":"index","nameLocation":"4961:5:8","nodeType":"VariableDeclaration","scope":2139,"src":"4953:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2127,"name":"uint256","nodeType":"ElementaryTypeName","src":"4953:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4935:32:8"},"returnParameters":{"id":2132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2131,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2139,"src":"4990:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2130,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4990:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4989:9:8"},"scope":2565,"src":"4923:118:8","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":2152,"nodeType":"Block","src":"5655:35:8","statements":[{"expression":{"expression":{"id":2149,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2143,"src":"5672:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set storage pointer"}},"id":2150,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5676:7:8","memberName":"_values","nodeType":"MemberAccess","referencedDeclaration":1958,"src":"5672:11:8","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage","typeString":"bytes32[] storage ref"}},"functionReturnParameters":2148,"id":2151,"nodeType":"Return","src":"5665:18:8"}]},"documentation":{"id":2140,"nodeType":"StructuredDocumentation","src":"5047:529:8","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":2153,"implemented":true,"kind":"function","modifiers":[],"name":"_values","nameLocation":"5590:7:8","nodeType":"FunctionDefinition","parameters":{"id":2144,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2143,"mutability":"mutable","name":"set","nameLocation":"5610:3:8","nodeType":"VariableDeclaration","scope":2153,"src":"5598:15:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"},"typeName":{"id":2142,"nodeType":"UserDefinedTypeName","pathNode":{"id":2141,"name":"Set","nameLocations":["5598:3:8"],"nodeType":"IdentifierPath","referencedDeclaration":1963,"src":"5598:3:8"},"referencedDeclaration":1963,"src":"5598:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"}},"visibility":"internal"}],"src":"5597:17:8"},"returnParameters":{"id":2148,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2147,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2153,"src":"5637:16:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2145,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5637:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2146,"nodeType":"ArrayTypeName","src":"5637:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"5636:18:8"},"scope":2565,"src":"5581:109:8","stateMutability":"view","virtual":false,"visibility":"private"},{"canonicalName":"EnumerableSetUpgradeable.Bytes32Set","id":2157,"members":[{"constant":false,"id":2156,"mutability":"mutable","name":"_inner","nameLocation":"5747:6:8","nodeType":"VariableDeclaration","scope":2157,"src":"5743:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"},"typeName":{"id":2155,"nodeType":"UserDefinedTypeName","pathNode":{"id":2154,"name":"Set","nameLocations":["5743:3:8"],"nodeType":"IdentifierPath","referencedDeclaration":1963,"src":"5743:3:8"},"referencedDeclaration":1963,"src":"5743:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"}},"visibility":"internal"}],"name":"Bytes32Set","nameLocation":"5722:10:8","nodeType":"StructDefinition","scope":2565,"src":"5715:45:8","visibility":"public"},{"body":{"id":2174,"nodeType":"Block","src":"6006:47:8","statements":[{"expression":{"arguments":[{"expression":{"id":2169,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2161,"src":"6028:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2157_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set storage pointer"}},"id":2170,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6032:6:8","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":2156,"src":"6028:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}},{"id":2171,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2163,"src":"6040:5:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$1963_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2168,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"6023:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$1963_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer,bytes32) returns (bool)"}},"id":2172,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6023:23:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2167,"id":2173,"nodeType":"Return","src":"6016:30:8"}]},"documentation":{"id":2158,"nodeType":"StructuredDocumentation","src":"5766:159:8","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":2175,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"5939:3:8","nodeType":"FunctionDefinition","parameters":{"id":2164,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2161,"mutability":"mutable","name":"set","nameLocation":"5962:3:8","nodeType":"VariableDeclaration","scope":2175,"src":"5943:22:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2157_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set"},"typeName":{"id":2160,"nodeType":"UserDefinedTypeName","pathNode":{"id":2159,"name":"Bytes32Set","nameLocations":["5943:10:8"],"nodeType":"IdentifierPath","referencedDeclaration":2157,"src":"5943:10:8"},"referencedDeclaration":2157,"src":"5943:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2157_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":2163,"mutability":"mutable","name":"value","nameLocation":"5975:5:8","nodeType":"VariableDeclaration","scope":2175,"src":"5967:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2162,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5967:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5942:39:8"},"returnParameters":{"id":2167,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2166,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2175,"src":"6000:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2165,"name":"bool","nodeType":"ElementaryTypeName","src":"6000:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5999:6:8"},"scope":2565,"src":"5930:123:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2192,"nodeType":"Block","src":"6300:50:8","statements":[{"expression":{"arguments":[{"expression":{"id":2187,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2179,"src":"6325:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2157_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set storage pointer"}},"id":2188,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6329:6:8","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":2156,"src":"6325:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}},{"id":2189,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2181,"src":"6337:5:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$1963_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2186,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2089,"src":"6317:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$1963_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer,bytes32) returns (bool)"}},"id":2190,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6317:26:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2185,"id":2191,"nodeType":"Return","src":"6310:33:8"}]},"documentation":{"id":2176,"nodeType":"StructuredDocumentation","src":"6059:157:8","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":2193,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"6230:6:8","nodeType":"FunctionDefinition","parameters":{"id":2182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2179,"mutability":"mutable","name":"set","nameLocation":"6256:3:8","nodeType":"VariableDeclaration","scope":2193,"src":"6237:22:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2157_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set"},"typeName":{"id":2178,"nodeType":"UserDefinedTypeName","pathNode":{"id":2177,"name":"Bytes32Set","nameLocations":["6237:10:8"],"nodeType":"IdentifierPath","referencedDeclaration":2157,"src":"6237:10:8"},"referencedDeclaration":2157,"src":"6237:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2157_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":2181,"mutability":"mutable","name":"value","nameLocation":"6269:5:8","nodeType":"VariableDeclaration","scope":2193,"src":"6261:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2180,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6261:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6236:39:8"},"returnParameters":{"id":2185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2184,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2193,"src":"6294:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2183,"name":"bool","nodeType":"ElementaryTypeName","src":"6294:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6293:6:8"},"scope":2565,"src":"6221:129:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2210,"nodeType":"Block","src":"6517:52:8","statements":[{"expression":{"arguments":[{"expression":{"id":2205,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2197,"src":"6544:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2157_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set storage pointer"}},"id":2206,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6548:6:8","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":2156,"src":"6544:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}},{"id":2207,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2199,"src":"6556:5:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$1963_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2204,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2108,"src":"6534:9:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$1963_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer,bytes32) view returns (bool)"}},"id":2208,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6534:28:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2203,"id":2209,"nodeType":"Return","src":"6527:35:8"}]},"documentation":{"id":2194,"nodeType":"StructuredDocumentation","src":"6356:70:8","text":" @dev Returns true if the value is in the set. O(1)."},"id":2211,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"6440:8:8","nodeType":"FunctionDefinition","parameters":{"id":2200,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2197,"mutability":"mutable","name":"set","nameLocation":"6468:3:8","nodeType":"VariableDeclaration","scope":2211,"src":"6449:22:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2157_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set"},"typeName":{"id":2196,"nodeType":"UserDefinedTypeName","pathNode":{"id":2195,"name":"Bytes32Set","nameLocations":["6449:10:8"],"nodeType":"IdentifierPath","referencedDeclaration":2157,"src":"6449:10:8"},"referencedDeclaration":2157,"src":"6449:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2157_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":2199,"mutability":"mutable","name":"value","nameLocation":"6481:5:8","nodeType":"VariableDeclaration","scope":2211,"src":"6473:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2198,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6473:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6448:39:8"},"returnParameters":{"id":2203,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2202,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2211,"src":"6511:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2201,"name":"bool","nodeType":"ElementaryTypeName","src":"6511:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6510:6:8"},"scope":2565,"src":"6431:138:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2225,"nodeType":"Block","src":"6722:43:8","statements":[{"expression":{"arguments":[{"expression":{"id":2221,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"6747:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2157_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set storage pointer"}},"id":2222,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6751:6:8","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":2156,"src":"6747:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$1963_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}],"id":2220,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2122,"src":"6739:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$1963_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer) view returns (uint256)"}},"id":2223,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6739:19:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2219,"id":2224,"nodeType":"Return","src":"6732:26:8"}]},"documentation":{"id":2212,"nodeType":"StructuredDocumentation","src":"6575:70:8","text":" @dev Returns the number of values in the set. O(1)."},"id":2226,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"6659:6:8","nodeType":"FunctionDefinition","parameters":{"id":2216,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2215,"mutability":"mutable","name":"set","nameLocation":"6685:3:8","nodeType":"VariableDeclaration","scope":2226,"src":"6666:22:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2157_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set"},"typeName":{"id":2214,"nodeType":"UserDefinedTypeName","pathNode":{"id":2213,"name":"Bytes32Set","nameLocations":["6666:10:8"],"nodeType":"IdentifierPath","referencedDeclaration":2157,"src":"6666:10:8"},"referencedDeclaration":2157,"src":"6666:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2157_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set"}},"visibility":"internal"}],"src":"6665:24:8"},"returnParameters":{"id":2219,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2218,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2226,"src":"6713:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2217,"name":"uint256","nodeType":"ElementaryTypeName","src":"6713:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6712:9:8"},"scope":2565,"src":"6650:115:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2243,"nodeType":"Block","src":"7190:46:8","statements":[{"expression":{"arguments":[{"expression":{"id":2238,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2230,"src":"7211:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2157_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set storage pointer"}},"id":2239,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7215:6:8","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":2156,"src":"7211:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}},{"id":2240,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2232,"src":"7223:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$1963_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2237,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2139,"src":"7207:3:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$1963_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer,uint256) view returns (bytes32)"}},"id":2241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7207:22:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2236,"id":2242,"nodeType":"Return","src":"7200:29:8"}]},"documentation":{"id":2227,"nodeType":"StructuredDocumentation","src":"6771:331:8","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":2244,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"7116:2:8","nodeType":"FunctionDefinition","parameters":{"id":2233,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2230,"mutability":"mutable","name":"set","nameLocation":"7138:3:8","nodeType":"VariableDeclaration","scope":2244,"src":"7119:22:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2157_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set"},"typeName":{"id":2229,"nodeType":"UserDefinedTypeName","pathNode":{"id":2228,"name":"Bytes32Set","nameLocations":["7119:10:8"],"nodeType":"IdentifierPath","referencedDeclaration":2157,"src":"7119:10:8"},"referencedDeclaration":2157,"src":"7119:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2157_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set"}},"visibility":"internal"},{"constant":false,"id":2232,"mutability":"mutable","name":"index","nameLocation":"7151:5:8","nodeType":"VariableDeclaration","scope":2244,"src":"7143:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2231,"name":"uint256","nodeType":"ElementaryTypeName","src":"7143:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7118:39:8"},"returnParameters":{"id":2236,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2235,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2244,"src":"7181:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2234,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7181:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7180:9:8"},"scope":2565,"src":"7107:129:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2273,"nodeType":"Block","src":"7857:219:8","statements":[{"assignments":[2258],"declarations":[{"constant":false,"id":2258,"mutability":"mutable","name":"store","nameLocation":"7884:5:8","nodeType":"VariableDeclaration","scope":2273,"src":"7867:22:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2256,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7867:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2257,"nodeType":"ArrayTypeName","src":"7867:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":2263,"initialValue":{"arguments":[{"expression":{"id":2260,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2248,"src":"7900:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2157_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set storage pointer"}},"id":2261,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7904:6:8","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":2156,"src":"7900:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$1963_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}],"id":2259,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2153,"src":"7892:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$1963_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer) view returns (bytes32[] memory)"}},"id":2262,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7892:19:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"7867:44:8"},{"assignments":[2268],"declarations":[{"constant":false,"id":2268,"mutability":"mutable","name":"result","nameLocation":"7938:6:8","nodeType":"VariableDeclaration","scope":2273,"src":"7921:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2266,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7921:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2267,"nodeType":"ArrayTypeName","src":"7921:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":2269,"nodeType":"VariableDeclarationStatement","src":"7921:23:8"},{"AST":{"nodeType":"YulBlock","src":"8007:39:8","statements":[{"nodeType":"YulAssignment","src":"8021:15:8","value":{"name":"store","nodeType":"YulIdentifier","src":"8031:5:8"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"8021:6:8"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2268,"isOffset":false,"isSlot":false,"src":"8021:6:8","valueSize":1},{"declaration":2258,"isOffset":false,"isSlot":false,"src":"8031:5:8","valueSize":1}],"id":2270,"nodeType":"InlineAssembly","src":"7998:48:8"},{"expression":{"id":2271,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2268,"src":"8063:6:8","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"functionReturnParameters":2253,"id":2272,"nodeType":"Return","src":"8056:13:8"}]},"documentation":{"id":2245,"nodeType":"StructuredDocumentation","src":"7242:529:8","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":2274,"implemented":true,"kind":"function","modifiers":[],"name":"values","nameLocation":"7785:6:8","nodeType":"FunctionDefinition","parameters":{"id":2249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2248,"mutability":"mutable","name":"set","nameLocation":"7811:3:8","nodeType":"VariableDeclaration","scope":2274,"src":"7792:22:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2157_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set"},"typeName":{"id":2247,"nodeType":"UserDefinedTypeName","pathNode":{"id":2246,"name":"Bytes32Set","nameLocations":["7792:10:8"],"nodeType":"IdentifierPath","referencedDeclaration":2157,"src":"7792:10:8"},"referencedDeclaration":2157,"src":"7792:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Set_$2157_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Bytes32Set"}},"visibility":"internal"}],"src":"7791:24:8"},"returnParameters":{"id":2253,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2252,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2274,"src":"7839:16:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2250,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7839:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2251,"nodeType":"ArrayTypeName","src":"7839:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"7838:18:8"},"scope":2565,"src":"7776:300:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"canonicalName":"EnumerableSetUpgradeable.AddressSet","id":2278,"members":[{"constant":false,"id":2277,"mutability":"mutable","name":"_inner","nameLocation":"8133:6:8","nodeType":"VariableDeclaration","scope":2278,"src":"8129:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"},"typeName":{"id":2276,"nodeType":"UserDefinedTypeName","pathNode":{"id":2275,"name":"Set","nameLocations":["8129:3:8"],"nodeType":"IdentifierPath","referencedDeclaration":1963,"src":"8129:3:8"},"referencedDeclaration":1963,"src":"8129:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"}},"visibility":"internal"}],"name":"AddressSet","nameLocation":"8108:10:8","nodeType":"StructDefinition","scope":2565,"src":"8101:45:8","visibility":"public"},{"body":{"id":2304,"nodeType":"Block","src":"8392:74:8","statements":[{"expression":{"arguments":[{"expression":{"id":2290,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2282,"src":"8414:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$2278_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet storage pointer"}},"id":2291,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8418:6:8","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":2277,"src":"8414:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":2298,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2284,"src":"8450:5:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2297,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8442:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2296,"name":"uint160","nodeType":"ElementaryTypeName","src":"8442:7:8","typeDescriptions":{}}},"id":2299,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8442:14:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2295,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8434:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2294,"name":"uint256","nodeType":"ElementaryTypeName","src":"8434:7:8","typeDescriptions":{}}},"id":2300,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8434:23:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2293,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8426:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2292,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8426:7:8","typeDescriptions":{}}},"id":2301,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8426:32:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$1963_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2289,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"8409:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$1963_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer,bytes32) returns (bool)"}},"id":2302,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8409:50:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2288,"id":2303,"nodeType":"Return","src":"8402:57:8"}]},"documentation":{"id":2279,"nodeType":"StructuredDocumentation","src":"8152:159:8","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":2305,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"8325:3:8","nodeType":"FunctionDefinition","parameters":{"id":2285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2282,"mutability":"mutable","name":"set","nameLocation":"8348:3:8","nodeType":"VariableDeclaration","scope":2305,"src":"8329:22:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$2278_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet"},"typeName":{"id":2281,"nodeType":"UserDefinedTypeName","pathNode":{"id":2280,"name":"AddressSet","nameLocations":["8329:10:8"],"nodeType":"IdentifierPath","referencedDeclaration":2278,"src":"8329:10:8"},"referencedDeclaration":2278,"src":"8329:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$2278_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet"}},"visibility":"internal"},{"constant":false,"id":2284,"mutability":"mutable","name":"value","nameLocation":"8361:5:8","nodeType":"VariableDeclaration","scope":2305,"src":"8353:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2283,"name":"address","nodeType":"ElementaryTypeName","src":"8353:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8328:39:8"},"returnParameters":{"id":2288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2287,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2305,"src":"8386:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2286,"name":"bool","nodeType":"ElementaryTypeName","src":"8386:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8385:6:8"},"scope":2565,"src":"8316:150:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2331,"nodeType":"Block","src":"8713:77:8","statements":[{"expression":{"arguments":[{"expression":{"id":2317,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2309,"src":"8738:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$2278_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet storage pointer"}},"id":2318,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8742:6:8","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":2277,"src":"8738:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":2325,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"8774:5:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2324,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8766:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2323,"name":"uint160","nodeType":"ElementaryTypeName","src":"8766:7:8","typeDescriptions":{}}},"id":2326,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8766:14:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2322,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8758:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2321,"name":"uint256","nodeType":"ElementaryTypeName","src":"8758:7:8","typeDescriptions":{}}},"id":2327,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8758:23:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2320,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8750:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2319,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8750:7:8","typeDescriptions":{}}},"id":2328,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8750:32:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$1963_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2316,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2089,"src":"8730:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$1963_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer,bytes32) returns (bool)"}},"id":2329,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8730:53:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2315,"id":2330,"nodeType":"Return","src":"8723:60:8"}]},"documentation":{"id":2306,"nodeType":"StructuredDocumentation","src":"8472:157:8","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":2332,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"8643:6:8","nodeType":"FunctionDefinition","parameters":{"id":2312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2309,"mutability":"mutable","name":"set","nameLocation":"8669:3:8","nodeType":"VariableDeclaration","scope":2332,"src":"8650:22:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$2278_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet"},"typeName":{"id":2308,"nodeType":"UserDefinedTypeName","pathNode":{"id":2307,"name":"AddressSet","nameLocations":["8650:10:8"],"nodeType":"IdentifierPath","referencedDeclaration":2278,"src":"8650:10:8"},"referencedDeclaration":2278,"src":"8650:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$2278_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet"}},"visibility":"internal"},{"constant":false,"id":2311,"mutability":"mutable","name":"value","nameLocation":"8682:5:8","nodeType":"VariableDeclaration","scope":2332,"src":"8674:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2310,"name":"address","nodeType":"ElementaryTypeName","src":"8674:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8649:39:8"},"returnParameters":{"id":2315,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2314,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2332,"src":"8707:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2313,"name":"bool","nodeType":"ElementaryTypeName","src":"8707:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8706:6:8"},"scope":2565,"src":"8634:156:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2358,"nodeType":"Block","src":"8957:79:8","statements":[{"expression":{"arguments":[{"expression":{"id":2344,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2336,"src":"8984:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$2278_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet storage pointer"}},"id":2345,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8988:6:8","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":2277,"src":"8984:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}},{"arguments":[{"arguments":[{"arguments":[{"id":2352,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2338,"src":"9020:5:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2351,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9012:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2350,"name":"uint160","nodeType":"ElementaryTypeName","src":"9012:7:8","typeDescriptions":{}}},"id":2353,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9012:14:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2349,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9004:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2348,"name":"uint256","nodeType":"ElementaryTypeName","src":"9004:7:8","typeDescriptions":{}}},"id":2354,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9004:23:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2347,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8996:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2346,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8996:7:8","typeDescriptions":{}}},"id":2355,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8996:32:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$1963_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2343,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2108,"src":"8974:9:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$1963_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer,bytes32) view returns (bool)"}},"id":2356,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8974:55:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2342,"id":2357,"nodeType":"Return","src":"8967:62:8"}]},"documentation":{"id":2333,"nodeType":"StructuredDocumentation","src":"8796:70:8","text":" @dev Returns true if the value is in the set. O(1)."},"id":2359,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"8880:8:8","nodeType":"FunctionDefinition","parameters":{"id":2339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2336,"mutability":"mutable","name":"set","nameLocation":"8908:3:8","nodeType":"VariableDeclaration","scope":2359,"src":"8889:22:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$2278_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet"},"typeName":{"id":2335,"nodeType":"UserDefinedTypeName","pathNode":{"id":2334,"name":"AddressSet","nameLocations":["8889:10:8"],"nodeType":"IdentifierPath","referencedDeclaration":2278,"src":"8889:10:8"},"referencedDeclaration":2278,"src":"8889:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$2278_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet"}},"visibility":"internal"},{"constant":false,"id":2338,"mutability":"mutable","name":"value","nameLocation":"8921:5:8","nodeType":"VariableDeclaration","scope":2359,"src":"8913:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2337,"name":"address","nodeType":"ElementaryTypeName","src":"8913:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8888:39:8"},"returnParameters":{"id":2342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2341,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2359,"src":"8951:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2340,"name":"bool","nodeType":"ElementaryTypeName","src":"8951:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8950:6:8"},"scope":2565,"src":"8871:165:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2373,"nodeType":"Block","src":"9189:43:8","statements":[{"expression":{"arguments":[{"expression":{"id":2369,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2363,"src":"9214:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$2278_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet storage pointer"}},"id":2370,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9218:6:8","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":2277,"src":"9214:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$1963_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}],"id":2368,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2122,"src":"9206:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$1963_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer) view returns (uint256)"}},"id":2371,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9206:19:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2367,"id":2372,"nodeType":"Return","src":"9199:26:8"}]},"documentation":{"id":2360,"nodeType":"StructuredDocumentation","src":"9042:70:8","text":" @dev Returns the number of values in the set. O(1)."},"id":2374,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"9126:6:8","nodeType":"FunctionDefinition","parameters":{"id":2364,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2363,"mutability":"mutable","name":"set","nameLocation":"9152:3:8","nodeType":"VariableDeclaration","scope":2374,"src":"9133:22:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$2278_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet"},"typeName":{"id":2362,"nodeType":"UserDefinedTypeName","pathNode":{"id":2361,"name":"AddressSet","nameLocations":["9133:10:8"],"nodeType":"IdentifierPath","referencedDeclaration":2278,"src":"9133:10:8"},"referencedDeclaration":2278,"src":"9133:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$2278_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet"}},"visibility":"internal"}],"src":"9132:24:8"},"returnParameters":{"id":2367,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2366,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2374,"src":"9180:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2365,"name":"uint256","nodeType":"ElementaryTypeName","src":"9180:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9179:9:8"},"scope":2565,"src":"9117:115:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2400,"nodeType":"Block","src":"9657:73:8","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"expression":{"id":2392,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2378,"src":"9702:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$2278_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet storage pointer"}},"id":2393,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9706:6:8","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":2277,"src":"9702:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}},{"id":2394,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2380,"src":"9714:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$1963_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2391,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2139,"src":"9698:3:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$1963_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer,uint256) view returns (bytes32)"}},"id":2395,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9698:22:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2390,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9690:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2389,"name":"uint256","nodeType":"ElementaryTypeName","src":"9690:7:8","typeDescriptions":{}}},"id":2396,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9690:31:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2388,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9682:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2387,"name":"uint160","nodeType":"ElementaryTypeName","src":"9682:7:8","typeDescriptions":{}}},"id":2397,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9682:40:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2386,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9674:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2385,"name":"address","nodeType":"ElementaryTypeName","src":"9674:7:8","typeDescriptions":{}}},"id":2398,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9674:49:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2384,"id":2399,"nodeType":"Return","src":"9667:56:8"}]},"documentation":{"id":2375,"nodeType":"StructuredDocumentation","src":"9238:331:8","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":2401,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"9583:2:8","nodeType":"FunctionDefinition","parameters":{"id":2381,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2378,"mutability":"mutable","name":"set","nameLocation":"9605:3:8","nodeType":"VariableDeclaration","scope":2401,"src":"9586:22:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$2278_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet"},"typeName":{"id":2377,"nodeType":"UserDefinedTypeName","pathNode":{"id":2376,"name":"AddressSet","nameLocations":["9586:10:8"],"nodeType":"IdentifierPath","referencedDeclaration":2278,"src":"9586:10:8"},"referencedDeclaration":2278,"src":"9586:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$2278_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet"}},"visibility":"internal"},{"constant":false,"id":2380,"mutability":"mutable","name":"index","nameLocation":"9618:5:8","nodeType":"VariableDeclaration","scope":2401,"src":"9610:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2379,"name":"uint256","nodeType":"ElementaryTypeName","src":"9610:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9585:39:8"},"returnParameters":{"id":2384,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2383,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2401,"src":"9648:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2382,"name":"address","nodeType":"ElementaryTypeName","src":"9648:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9647:9:8"},"scope":2565,"src":"9574:156:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2430,"nodeType":"Block","src":"10351:219:8","statements":[{"assignments":[2415],"declarations":[{"constant":false,"id":2415,"mutability":"mutable","name":"store","nameLocation":"10378:5:8","nodeType":"VariableDeclaration","scope":2430,"src":"10361:22:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2413,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10361:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2414,"nodeType":"ArrayTypeName","src":"10361:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":2420,"initialValue":{"arguments":[{"expression":{"id":2417,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2405,"src":"10394:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$2278_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet storage pointer"}},"id":2418,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10398:6:8","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":2277,"src":"10394:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$1963_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}],"id":2416,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2153,"src":"10386:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$1963_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer) view returns (bytes32[] memory)"}},"id":2419,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10386:19:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"10361:44:8"},{"assignments":[2425],"declarations":[{"constant":false,"id":2425,"mutability":"mutable","name":"result","nameLocation":"10432:6:8","nodeType":"VariableDeclaration","scope":2430,"src":"10415:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2423,"name":"address","nodeType":"ElementaryTypeName","src":"10415:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2424,"nodeType":"ArrayTypeName","src":"10415:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":2426,"nodeType":"VariableDeclarationStatement","src":"10415:23:8"},{"AST":{"nodeType":"YulBlock","src":"10501:39:8","statements":[{"nodeType":"YulAssignment","src":"10515:15:8","value":{"name":"store","nodeType":"YulIdentifier","src":"10525:5:8"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"10515:6:8"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2425,"isOffset":false,"isSlot":false,"src":"10515:6:8","valueSize":1},{"declaration":2415,"isOffset":false,"isSlot":false,"src":"10525:5:8","valueSize":1}],"id":2427,"nodeType":"InlineAssembly","src":"10492:48:8"},{"expression":{"id":2428,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2425,"src":"10557:6:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"functionReturnParameters":2410,"id":2429,"nodeType":"Return","src":"10550:13:8"}]},"documentation":{"id":2402,"nodeType":"StructuredDocumentation","src":"9736:529:8","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":2431,"implemented":true,"kind":"function","modifiers":[],"name":"values","nameLocation":"10279:6:8","nodeType":"FunctionDefinition","parameters":{"id":2406,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2405,"mutability":"mutable","name":"set","nameLocation":"10305:3:8","nodeType":"VariableDeclaration","scope":2431,"src":"10286:22:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$2278_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet"},"typeName":{"id":2404,"nodeType":"UserDefinedTypeName","pathNode":{"id":2403,"name":"AddressSet","nameLocations":["10286:10:8"],"nodeType":"IdentifierPath","referencedDeclaration":2278,"src":"10286:10:8"},"referencedDeclaration":2278,"src":"10286:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$2278_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet"}},"visibility":"internal"}],"src":"10285:24:8"},"returnParameters":{"id":2410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2409,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2431,"src":"10333:16:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2407,"name":"address","nodeType":"ElementaryTypeName","src":"10333:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2408,"nodeType":"ArrayTypeName","src":"10333:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"10332:18:8"},"scope":2565,"src":"10270:300:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"canonicalName":"EnumerableSetUpgradeable.UintSet","id":2435,"members":[{"constant":false,"id":2434,"mutability":"mutable","name":"_inner","nameLocation":"10621:6:8","nodeType":"VariableDeclaration","scope":2435,"src":"10617:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"},"typeName":{"id":2433,"nodeType":"UserDefinedTypeName","pathNode":{"id":2432,"name":"Set","nameLocations":["10617:3:8"],"nodeType":"IdentifierPath","referencedDeclaration":1963,"src":"10617:3:8"},"referencedDeclaration":1963,"src":"10617:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage_ptr","typeString":"struct EnumerableSetUpgradeable.Set"}},"visibility":"internal"}],"name":"UintSet","nameLocation":"10599:7:8","nodeType":"StructDefinition","scope":2565,"src":"10592:42:8","visibility":"public"},{"body":{"id":2455,"nodeType":"Block","src":"10877:56:8","statements":[{"expression":{"arguments":[{"expression":{"id":2447,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2439,"src":"10899:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$2435_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet storage pointer"}},"id":2448,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10903:6:8","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":2434,"src":"10899:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}},{"arguments":[{"id":2451,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2441,"src":"10919:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2450,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10911:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2449,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10911:7:8","typeDescriptions":{}}},"id":2452,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10911:14:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$1963_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2446,"name":"_add","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"10894:4:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$1963_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer,bytes32) returns (bool)"}},"id":2453,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10894:32:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2445,"id":2454,"nodeType":"Return","src":"10887:39:8"}]},"documentation":{"id":2436,"nodeType":"StructuredDocumentation","src":"10640:159:8","text":" @dev Add a value to a set. O(1).\n Returns true if the value was added to the set, that is if it was not\n already present."},"id":2456,"implemented":true,"kind":"function","modifiers":[],"name":"add","nameLocation":"10813:3:8","nodeType":"FunctionDefinition","parameters":{"id":2442,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2439,"mutability":"mutable","name":"set","nameLocation":"10833:3:8","nodeType":"VariableDeclaration","scope":2456,"src":"10817:19:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$2435_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet"},"typeName":{"id":2438,"nodeType":"UserDefinedTypeName","pathNode":{"id":2437,"name":"UintSet","nameLocations":["10817:7:8"],"nodeType":"IdentifierPath","referencedDeclaration":2435,"src":"10817:7:8"},"referencedDeclaration":2435,"src":"10817:7:8","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$2435_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet"}},"visibility":"internal"},{"constant":false,"id":2441,"mutability":"mutable","name":"value","nameLocation":"10846:5:8","nodeType":"VariableDeclaration","scope":2456,"src":"10838:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2440,"name":"uint256","nodeType":"ElementaryTypeName","src":"10838:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10816:36:8"},"returnParameters":{"id":2445,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2444,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2456,"src":"10871:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2443,"name":"bool","nodeType":"ElementaryTypeName","src":"10871:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"10870:6:8"},"scope":2565,"src":"10804:129:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2476,"nodeType":"Block","src":"11177:59:8","statements":[{"expression":{"arguments":[{"expression":{"id":2468,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2460,"src":"11202:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$2435_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet storage pointer"}},"id":2469,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11206:6:8","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":2434,"src":"11202:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}},{"arguments":[{"id":2472,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2462,"src":"11222:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2471,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11214:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2470,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11214:7:8","typeDescriptions":{}}},"id":2473,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11214:14:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$1963_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2467,"name":"_remove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2089,"src":"11194:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Set_$1963_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer,bytes32) returns (bool)"}},"id":2474,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11194:35:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2466,"id":2475,"nodeType":"Return","src":"11187:42:8"}]},"documentation":{"id":2457,"nodeType":"StructuredDocumentation","src":"10939:157:8","text":" @dev Removes a value from a set. O(1).\n Returns true if the value was removed from the set, that is if it was\n present."},"id":2477,"implemented":true,"kind":"function","modifiers":[],"name":"remove","nameLocation":"11110:6:8","nodeType":"FunctionDefinition","parameters":{"id":2463,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2460,"mutability":"mutable","name":"set","nameLocation":"11133:3:8","nodeType":"VariableDeclaration","scope":2477,"src":"11117:19:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$2435_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet"},"typeName":{"id":2459,"nodeType":"UserDefinedTypeName","pathNode":{"id":2458,"name":"UintSet","nameLocations":["11117:7:8"],"nodeType":"IdentifierPath","referencedDeclaration":2435,"src":"11117:7:8"},"referencedDeclaration":2435,"src":"11117:7:8","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$2435_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet"}},"visibility":"internal"},{"constant":false,"id":2462,"mutability":"mutable","name":"value","nameLocation":"11146:5:8","nodeType":"VariableDeclaration","scope":2477,"src":"11138:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2461,"name":"uint256","nodeType":"ElementaryTypeName","src":"11138:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11116:36:8"},"returnParameters":{"id":2466,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2465,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2477,"src":"11171:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2464,"name":"bool","nodeType":"ElementaryTypeName","src":"11171:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"11170:6:8"},"scope":2565,"src":"11101:135:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2497,"nodeType":"Block","src":"11400:61:8","statements":[{"expression":{"arguments":[{"expression":{"id":2489,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2481,"src":"11427:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$2435_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet storage pointer"}},"id":2490,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11431:6:8","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":2434,"src":"11427:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}},{"arguments":[{"id":2493,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2483,"src":"11447:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2492,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11439:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2491,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11439:7:8","typeDescriptions":{}}},"id":2494,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11439:14:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$1963_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2488,"name":"_contains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2108,"src":"11417:9:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$1963_storage_ptr_$_t_bytes32_$returns$_t_bool_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer,bytes32) view returns (bool)"}},"id":2495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11417:37:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2487,"id":2496,"nodeType":"Return","src":"11410:44:8"}]},"documentation":{"id":2478,"nodeType":"StructuredDocumentation","src":"11242:70:8","text":" @dev Returns true if the value is in the set. O(1)."},"id":2498,"implemented":true,"kind":"function","modifiers":[],"name":"contains","nameLocation":"11326:8:8","nodeType":"FunctionDefinition","parameters":{"id":2484,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2481,"mutability":"mutable","name":"set","nameLocation":"11351:3:8","nodeType":"VariableDeclaration","scope":2498,"src":"11335:19:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$2435_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet"},"typeName":{"id":2480,"nodeType":"UserDefinedTypeName","pathNode":{"id":2479,"name":"UintSet","nameLocations":["11335:7:8"],"nodeType":"IdentifierPath","referencedDeclaration":2435,"src":"11335:7:8"},"referencedDeclaration":2435,"src":"11335:7:8","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$2435_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet"}},"visibility":"internal"},{"constant":false,"id":2483,"mutability":"mutable","name":"value","nameLocation":"11364:5:8","nodeType":"VariableDeclaration","scope":2498,"src":"11356:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2482,"name":"uint256","nodeType":"ElementaryTypeName","src":"11356:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11334:36:8"},"returnParameters":{"id":2487,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2486,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2498,"src":"11394:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2485,"name":"bool","nodeType":"ElementaryTypeName","src":"11394:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"11393:6:8"},"scope":2565,"src":"11317:144:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2512,"nodeType":"Block","src":"11611:43:8","statements":[{"expression":{"arguments":[{"expression":{"id":2508,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2502,"src":"11636:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$2435_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet storage pointer"}},"id":2509,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11640:6:8","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":2434,"src":"11636:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$1963_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}],"id":2507,"name":"_length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2122,"src":"11628:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$1963_storage_ptr_$returns$_t_uint256_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer) view returns (uint256)"}},"id":2510,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11628:19:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2506,"id":2511,"nodeType":"Return","src":"11621:26:8"}]},"documentation":{"id":2499,"nodeType":"StructuredDocumentation","src":"11467:70:8","text":" @dev Returns the number of values in the set. O(1)."},"id":2513,"implemented":true,"kind":"function","modifiers":[],"name":"length","nameLocation":"11551:6:8","nodeType":"FunctionDefinition","parameters":{"id":2503,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2502,"mutability":"mutable","name":"set","nameLocation":"11574:3:8","nodeType":"VariableDeclaration","scope":2513,"src":"11558:19:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$2435_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet"},"typeName":{"id":2501,"nodeType":"UserDefinedTypeName","pathNode":{"id":2500,"name":"UintSet","nameLocations":["11558:7:8"],"nodeType":"IdentifierPath","referencedDeclaration":2435,"src":"11558:7:8"},"referencedDeclaration":2435,"src":"11558:7:8","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$2435_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet"}},"visibility":"internal"}],"src":"11557:21:8"},"returnParameters":{"id":2506,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2505,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2513,"src":"11602:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2504,"name":"uint256","nodeType":"ElementaryTypeName","src":"11602:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11601:9:8"},"scope":2565,"src":"11542:112:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2533,"nodeType":"Block","src":"12076:55:8","statements":[{"expression":{"arguments":[{"arguments":[{"expression":{"id":2527,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2517,"src":"12105:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$2435_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet storage pointer"}},"id":2528,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12109:6:8","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":2434,"src":"12105:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}},{"id":2529,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2519,"src":"12117:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$1963_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2526,"name":"_at","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2139,"src":"12101:3:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$1963_storage_ptr_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer,uint256) view returns (bytes32)"}},"id":2530,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12101:22:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2525,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12093:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2524,"name":"uint256","nodeType":"ElementaryTypeName","src":"12093:7:8","typeDescriptions":{}}},"id":2531,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12093:31:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2523,"id":2532,"nodeType":"Return","src":"12086:38:8"}]},"documentation":{"id":2514,"nodeType":"StructuredDocumentation","src":"11660:331:8","text":" @dev Returns the value stored at position `index` in the set. O(1).\n Note that there are no guarantees on the ordering of values inside the\n array, and it may change when more values are added or removed.\n Requirements:\n - `index` must be strictly less than {length}."},"id":2534,"implemented":true,"kind":"function","modifiers":[],"name":"at","nameLocation":"12005:2:8","nodeType":"FunctionDefinition","parameters":{"id":2520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2517,"mutability":"mutable","name":"set","nameLocation":"12024:3:8","nodeType":"VariableDeclaration","scope":2534,"src":"12008:19:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$2435_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet"},"typeName":{"id":2516,"nodeType":"UserDefinedTypeName","pathNode":{"id":2515,"name":"UintSet","nameLocations":["12008:7:8"],"nodeType":"IdentifierPath","referencedDeclaration":2435,"src":"12008:7:8"},"referencedDeclaration":2435,"src":"12008:7:8","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$2435_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet"}},"visibility":"internal"},{"constant":false,"id":2519,"mutability":"mutable","name":"index","nameLocation":"12037:5:8","nodeType":"VariableDeclaration","scope":2534,"src":"12029:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2518,"name":"uint256","nodeType":"ElementaryTypeName","src":"12029:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12007:36:8"},"returnParameters":{"id":2523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2522,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2534,"src":"12067:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2521,"name":"uint256","nodeType":"ElementaryTypeName","src":"12067:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12066:9:8"},"scope":2565,"src":"11996:135:8","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2563,"nodeType":"Block","src":"12749:219:8","statements":[{"assignments":[2548],"declarations":[{"constant":false,"id":2548,"mutability":"mutable","name":"store","nameLocation":"12776:5:8","nodeType":"VariableDeclaration","scope":2563,"src":"12759:22:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2546,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12759:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2547,"nodeType":"ArrayTypeName","src":"12759:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":2553,"initialValue":{"arguments":[{"expression":{"id":2550,"name":"set","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2538,"src":"12792:3:8","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$2435_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet storage pointer"}},"id":2551,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12796:6:8","memberName":"_inner","nodeType":"MemberAccess","referencedDeclaration":2434,"src":"12792:10:8","typeDescriptions":{"typeIdentifier":"t_struct$_Set_$1963_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Set_$1963_storage","typeString":"struct EnumerableSetUpgradeable.Set storage ref"}],"id":2549,"name":"_values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2153,"src":"12784:7:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Set_$1963_storage_ptr_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (struct EnumerableSetUpgradeable.Set storage pointer) view returns (bytes32[] memory)"}},"id":2552,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12784:19:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"12759:44:8"},{"assignments":[2558],"declarations":[{"constant":false,"id":2558,"mutability":"mutable","name":"result","nameLocation":"12830:6:8","nodeType":"VariableDeclaration","scope":2563,"src":"12813:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2556,"name":"uint256","nodeType":"ElementaryTypeName","src":"12813:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2557,"nodeType":"ArrayTypeName","src":"12813:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":2559,"nodeType":"VariableDeclarationStatement","src":"12813:23:8"},{"AST":{"nodeType":"YulBlock","src":"12899:39:8","statements":[{"nodeType":"YulAssignment","src":"12913:15:8","value":{"name":"store","nodeType":"YulIdentifier","src":"12923:5:8"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"12913:6:8"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2558,"isOffset":false,"isSlot":false,"src":"12913:6:8","valueSize":1},{"declaration":2548,"isOffset":false,"isSlot":false,"src":"12923:5:8","valueSize":1}],"id":2560,"nodeType":"InlineAssembly","src":"12890:48:8"},{"expression":{"id":2561,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2558,"src":"12955:6:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":2543,"id":2562,"nodeType":"Return","src":"12948:13:8"}]},"documentation":{"id":2535,"nodeType":"StructuredDocumentation","src":"12137:529:8","text":" @dev Return the entire set in an array\n WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n this function has an unbounded cost, and using it as part of a state-changing function may render the function\n uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block."},"id":2564,"implemented":true,"kind":"function","modifiers":[],"name":"values","nameLocation":"12680:6:8","nodeType":"FunctionDefinition","parameters":{"id":2539,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2538,"mutability":"mutable","name":"set","nameLocation":"12703:3:8","nodeType":"VariableDeclaration","scope":2564,"src":"12687:19:8","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$2435_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet"},"typeName":{"id":2537,"nodeType":"UserDefinedTypeName","pathNode":{"id":2536,"name":"UintSet","nameLocations":["12687:7:8"],"nodeType":"IdentifierPath","referencedDeclaration":2435,"src":"12687:7:8"},"referencedDeclaration":2435,"src":"12687:7:8","typeDescriptions":{"typeIdentifier":"t_struct$_UintSet_$2435_storage_ptr","typeString":"struct EnumerableSetUpgradeable.UintSet"}},"visibility":"internal"}],"src":"12686:21:8"},"returnParameters":{"id":2543,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2542,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2564,"src":"12731:16:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2540,"name":"uint256","nodeType":"ElementaryTypeName","src":"12731:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2541,"nodeType":"ArrayTypeName","src":"12731:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"12730:18:8"},"scope":2565,"src":"12671:297:8","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":2566,"src":"1329:11641:8","usedErrors":[]}],"src":"205:12766:8"},"id":8},"contracts/factories/MecenateFeedFactory.sol":{"ast":{"absolutePath":"contracts/factories/MecenateFeedFactory.sol","exportedSymbols":{"AddressUpgradeable":[710],"ClonesUpgradeable":[211],"ContextUpgradeable":[752],"EnumerableSetUpgradeable":[2565],"FeedViewer":[3901],"IFeedInitializer":[3365],"IMecenateFeed":[3463],"IMecenateTreasury":[3476],"IMecenateUsers":[3534],"IProxyCall":[3546],"Initializable":[380],"MathUpgradeable":[1847],"MecenateFeedFactory":[3317],"OwnableUpgradeable":[131],"SignedMathUpgradeable":[1952],"StringsUpgradeable":[981],"Structures":[3725]},"id":3318,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2567,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"32:23:9"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","id":2568,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3318,"sourceUnit":711,"src":"57:74:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol","id":2569,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3318,"sourceUnit":2566,"src":"132:88:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol","id":2570,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3318,"sourceUnit":982,"src":"221:74:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol","id":2571,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3318,"sourceUnit":212,"src":"296:73:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","id":2572,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3318,"sourceUnit":381,"src":"370:75:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","id":2573,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3318,"sourceUnit":132,"src":"446:75:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IMecenateUsers.sol","file":"../interfaces/IMecenateUsers.sol","id":2574,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3318,"sourceUnit":3535,"src":"522:42:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IMecenateTreasury.sol","file":"../interfaces/IMecenateTreasury.sol","id":2575,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3318,"sourceUnit":3477,"src":"565:45:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/modules/FeedViewer.sol","file":"../modules/FeedViewer.sol","id":2576,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3318,"sourceUnit":3902,"src":"611:35:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IProxyCall.sol","file":"../interfaces/IProxyCall.sol","id":2577,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3318,"sourceUnit":3547,"src":"647:38:9","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IFeedInitializer.sol","file":"../interfaces/IFeedInitializer.sol","id":2578,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3318,"sourceUnit":3366,"src":"686:44:9","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2579,"name":"Initializable","nameLocations":["764:13:9"],"nodeType":"IdentifierPath","referencedDeclaration":380,"src":"764:13:9"},"id":2580,"nodeType":"InheritanceSpecifier","src":"764:13:9"},{"baseName":{"id":2581,"name":"OwnableUpgradeable","nameLocations":["779:18:9"],"nodeType":"IdentifierPath","referencedDeclaration":131,"src":"779:18:9"},"id":2582,"nodeType":"InheritanceSpecifier","src":"779:18:9"},{"baseName":{"id":2583,"name":"FeedViewer","nameLocations":["799:10:9"],"nodeType":"IdentifierPath","referencedDeclaration":3901,"src":"799:10:9"},"id":2584,"nodeType":"InheritanceSpecifier","src":"799:10:9"}],"canonicalName":"MecenateFeedFactory","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3317,"linearizedBaseContracts":[3317,3901,131,752,380],"name":"MecenateFeedFactory","nameLocation":"741:19:9","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2588,"libraryName":{"id":2585,"name":"EnumerableSetUpgradeable","nameLocations":["822:24:9"],"nodeType":"IdentifierPath","referencedDeclaration":2565,"src":"822:24:9"},"nodeType":"UsingForDirective","src":"816:71:9","typeName":{"id":2587,"nodeType":"UserDefinedTypeName","pathNode":{"id":2586,"name":"EnumerableSetUpgradeable.AddressSet","nameLocations":["851:24:9","876:10:9"],"nodeType":"IdentifierPath","referencedDeclaration":2278,"src":"851:35:9"},"referencedDeclaration":2278,"src":"851:35:9","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$2278_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet"}}},{"global":false,"id":2591,"libraryName":{"id":2589,"name":"ClonesUpgradeable","nameLocations":["898:17:9"],"nodeType":"IdentifierPath","referencedDeclaration":211,"src":"898:17:9"},"nodeType":"UsingForDirective","src":"892:36:9","typeName":{"id":2590,"name":"address","nodeType":"ElementaryTypeName","src":"920:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":2594,"libraryName":{"id":2592,"name":"StringsUpgradeable","nameLocations":["939:18:9"],"nodeType":"IdentifierPath","referencedDeclaration":981,"src":"939:18:9"},"nodeType":"UsingForDirective","src":"933:37:9","typeName":{"id":2593,"name":"uint256","nodeType":"ElementaryTypeName","src":"962:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"global":false,"id":2597,"libraryName":{"id":2595,"name":"AddressUpgradeable","nameLocations":["982:18:9"],"nodeType":"IdentifierPath","referencedDeclaration":710,"src":"982:18:9"},"nodeType":"UsingForDirective","src":"976:37:9","typeName":{"id":2596,"name":"address","nodeType":"ElementaryTypeName","src":"1005:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":2600,"libraryName":{"id":2598,"name":"AddressUpgradeable","nameLocations":["1024:18:9"],"nodeType":"IdentifierPath","referencedDeclaration":710,"src":"1024:18:9"},"nodeType":"UsingForDirective","src":"1018:45:9","typeName":{"id":2599,"name":"address","nodeType":"ElementaryTypeName","src":"1047:15:9","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}},{"constant":false,"functionSelector":"bb7e3648","id":2603,"mutability":"mutable","name":"proxyCallContract","nameLocation":"1087:17:9","nodeType":"VariableDeclaration","scope":3317,"src":"1069:35:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IProxyCall_$3546","typeString":"contract IProxyCall"},"typeName":{"id":2602,"nodeType":"UserDefinedTypeName","pathNode":{"id":2601,"name":"IProxyCall","nameLocations":["1069:10:9"],"nodeType":"IdentifierPath","referencedDeclaration":3546,"src":"1069:10:9"},"referencedDeclaration":3546,"src":"1069:10:9","typeDescriptions":{"typeIdentifier":"t_contract$_IProxyCall_$3546","typeString":"contract IProxyCall"}},"visibility":"public"},{"constant":false,"functionSelector":"5c60da1b","id":2605,"mutability":"mutable","name":"implementation","nameLocation":"1126:14:9","nodeType":"VariableDeclaration","scope":3317,"src":"1111:29:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2604,"name":"address","nodeType":"ElementaryTypeName","src":"1111:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"functionSelector":"80ca11fc","id":2607,"mutability":"mutable","name":"defaultOperator","nameLocation":"1161:15:9","nodeType":"VariableDeclaration","scope":3317,"src":"1146:30:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2606,"name":"address","nodeType":"ElementaryTypeName","src":"1146:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"id":2610,"mutability":"mutable","name":"feeds","nameLocation":"1228:5:9","nodeType":"VariableDeclaration","scope":3317,"src":"1183:50:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$2278_storage","typeString":"struct EnumerableSetUpgradeable.AddressSet"},"typeName":{"id":2609,"nodeType":"UserDefinedTypeName","pathNode":{"id":2608,"name":"EnumerableSetUpgradeable.AddressSet","nameLocations":["1183:24:9","1208:10:9"],"nodeType":"IdentifierPath","referencedDeclaration":2278,"src":"1183:35:9"},"referencedDeclaration":2278,"src":"1183:35:9","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$2278_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet"}},"visibility":"internal"},{"constant":false,"id":2613,"mutability":"mutable","name":"settings","nameLocation":"1275:8:9","nodeType":"VariableDeclaration","scope":3317,"src":"1239:44:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_FactorySettings_$3615_storage","typeString":"struct Structures.FactorySettings"},"typeName":{"id":2612,"nodeType":"UserDefinedTypeName","pathNode":{"id":2611,"name":"Structures.FactorySettings","nameLocations":["1239:10:9","1250:15:9"],"nodeType":"IdentifierPath","referencedDeclaration":3615,"src":"1239:26:9"},"referencedDeclaration":3615,"src":"1239:26:9","typeDescriptions":{"typeIdentifier":"t_struct$_FactorySettings_$3615_storage_ptr","typeString":"struct Structures.FactorySettings"}},"visibility":"internal"},{"constant":false,"id":2615,"mutability":"mutable","name":"feedByteCode","nameLocation":"1305:12:9","nodeType":"VariableDeclaration","scope":3317,"src":"1290:27:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage","typeString":"bytes"},"typeName":{"id":2614,"name":"bytes","nodeType":"ElementaryTypeName","src":"1290:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2619,"mutability":"mutable","name":"routerFee","nameLocation":"1360:9:9","nodeType":"VariableDeclaration","scope":3317,"src":"1324:45:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint24_$","typeString":"mapping(uint256 => uint24)"},"typeName":{"id":2618,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2616,"name":"uint256","nodeType":"ElementaryTypeName","src":"1332:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1324:26:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint24_$","typeString":"mapping(uint256 => uint24)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2617,"name":"uint24","nodeType":"ElementaryTypeName","src":"1343:6:9","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}}},"visibility":"internal"},{"constant":false,"id":2624,"mutability":"mutable","name":"feedStore","nameLocation":"1440:9:9","nodeType":"VariableDeclaration","scope":3317,"src":"1375:74:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_AddressSet_$2278_storage_$","typeString":"mapping(address => struct EnumerableSetUpgradeable.AddressSet)"},"typeName":{"id":2623,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2620,"name":"address","nodeType":"ElementaryTypeName","src":"1383:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1375:55:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_AddressSet_$2278_storage_$","typeString":"mapping(address => struct EnumerableSetUpgradeable.AddressSet)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2622,"nodeType":"UserDefinedTypeName","pathNode":{"id":2621,"name":"EnumerableSetUpgradeable.AddressSet","nameLocations":["1394:24:9","1419:10:9"],"nodeType":"IdentifierPath","referencedDeclaration":2278,"src":"1394:35:9"},"referencedDeclaration":2278,"src":"1394:35:9","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$2278_storage_ptr","typeString":"struct EnumerableSetUpgradeable.AddressSet"}}},"visibility":"internal"},{"constant":false,"functionSelector":"5dc96d16","id":2627,"mutability":"mutable","name":"burnEnabled","nameLocation":"1468:11:9","nodeType":"VariableDeclaration","scope":3317,"src":"1456:31:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2625,"name":"bool","nodeType":"ElementaryTypeName","src":"1456:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":{"hexValue":"66616c7365","id":2626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1482:5:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"visibility":"public"},{"constant":false,"functionSelector":"067bd3b4","id":2629,"mutability":"mutable","name":"contractCounter","nameLocation":"1509:15:9","nodeType":"VariableDeclaration","scope":3317,"src":"1494:30:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2628,"name":"uint256","nodeType":"ElementaryTypeName","src":"1494:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"f86d0b38","id":2631,"mutability":"mutable","name":"major","nameLocation":"1546:5:9","nodeType":"VariableDeclaration","scope":3317,"src":"1531:20:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2630,"name":"uint256","nodeType":"ElementaryTypeName","src":"1531:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"bb834b0e","id":2633,"mutability":"mutable","name":"minor","nameLocation":"1572:5:9","nodeType":"VariableDeclaration","scope":3317,"src":"1557:20:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2632,"name":"uint256","nodeType":"ElementaryTypeName","src":"1557:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"49975235","id":2635,"mutability":"mutable","name":"patch","nameLocation":"1598:5:9","nodeType":"VariableDeclaration","scope":3317,"src":"1583:20:9","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2634,"name":"uint256","nodeType":"ElementaryTypeName","src":"1583:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"anonymous":false,"eventSelector":"b658664a46408e6670a38ec7ea8b7614c9e2916184dff2fad99d3a7a3491ca7d","id":2639,"name":"FeedCreated","nameLocation":"1616:11:9","nodeType":"EventDefinition","parameters":{"id":2638,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2637,"indexed":true,"mutability":"mutable","name":"addr","nameLocation":"1644:4:9","nodeType":"VariableDeclaration","scope":2639,"src":"1628:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2636,"name":"address","nodeType":"ElementaryTypeName","src":"1628:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1627:22:9"},"src":"1610:40:9"},{"anonymous":false,"eventSelector":"5678af47993f4856157dd819bee3183b87c10ee1b3575a5128fe25896c073a28","id":2645,"name":"ImplementationUpdated","nameLocation":"1662:21:9","nodeType":"EventDefinition","parameters":{"id":2644,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2641,"indexed":true,"mutability":"mutable","name":"implementation","nameLocation":"1709:14:9","nodeType":"VariableDeclaration","scope":2645,"src":"1693:30:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2640,"name":"address","nodeType":"ElementaryTypeName","src":"1693:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2643,"indexed":true,"mutability":"mutable","name":"version","nameLocation":"1749:7:9","nodeType":"VariableDeclaration","scope":2645,"src":"1733:23:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2642,"name":"uint256","nodeType":"ElementaryTypeName","src":"1733:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1683:79:9"},"src":"1656:107:9"},{"anonymous":false,"eventSelector":"7213e3d637e4ef4968f947d5f602103307355f708bfd5bfce9d87da7c78f8521","id":2649,"name":"ProxyCallContractUpdated","nameLocation":"1775:24:9","nodeType":"EventDefinition","parameters":{"id":2648,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2647,"indexed":true,"mutability":"mutable","name":"_proxyCallContract","nameLocation":"1816:18:9","nodeType":"VariableDeclaration","scope":2649,"src":"1800:34:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2646,"name":"address","nodeType":"ElementaryTypeName","src":"1800:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1799:36:9"},"src":"1769:67:9"},{"body":{"id":2758,"nodeType":"Block","src":"2162:677:9","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2672,"name":"__Ownable_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":26,"src":"2172:14:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":2673,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2172:16:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2674,"nodeType":"ExpressionStatement","src":"2172:16:9"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2675,"name":"__Ownable_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":37,"src":"2198:24:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":2676,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2198:26:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2677,"nodeType":"ExpressionStatement","src":"2198:26:9"},{"expression":{"arguments":[{"expression":{"id":2679,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2253:3:9","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2257:6:9","memberName":"sender","nodeType":"MemberAccess","src":"2253:10:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2678,"name":"transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":105,"src":"2235:17:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2681,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2235:29:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2682,"nodeType":"ExpressionStatement","src":"2235:29:9"},{"expression":{"arguments":[{"id":2684,"name":"_proxyCallContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2651,"src":"2299:18:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2683,"name":"_updateProxyCallContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3228,"src":"2274:24:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2685,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2274:44:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2686,"nodeType":"ExpressionStatement","src":"2274:44:9"},{"expression":{"id":2691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2687,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2613,"src":"2329:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_FactorySettings_$3615_storage","typeString":"struct Structures.FactorySettings storage ref"}},"id":2689,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2338:19:9","memberName":"usersModuleContract","nodeType":"MemberAccess","referencedDeclaration":3602,"src":"2329:28:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2690,"name":"_usersModuleContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2653,"src":"2360:20:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2329:51:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2692,"nodeType":"ExpressionStatement","src":"2329:51:9"},{"expression":{"id":2697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2693,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2613,"src":"2390:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_FactorySettings_$3615_storage","typeString":"struct Structures.FactorySettings storage ref"}},"id":2695,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2399:16:9","memberName":"treasuryContract","nodeType":"MemberAccess","referencedDeclaration":3600,"src":"2390:25:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2696,"name":"_treasuryContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2655,"src":"2418:17:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2390:45:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2698,"nodeType":"ExpressionStatement","src":"2390:45:9"},{"expression":{"id":2703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2699,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2613,"src":"2445:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_FactorySettings_$3615_storage","typeString":"struct Structures.FactorySettings storage ref"}},"id":2701,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2454:11:9","memberName":"easContract","nodeType":"MemberAccess","referencedDeclaration":3604,"src":"2445:20:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2702,"name":"_easContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2657,"src":"2468:12:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2445:35:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2704,"nodeType":"ExpressionStatement","src":"2445:35:9"},{"expression":{"id":2709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2705,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2613,"src":"2490:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_FactorySettings_$3615_storage","typeString":"struct Structures.FactorySettings storage ref"}},"id":2707,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2499:9:9","memberName":"easSchema","nodeType":"MemberAccess","referencedDeclaration":3606,"src":"2490:18:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2708,"name":"_easSchema","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2659,"src":"2511:10:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2490:31:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2710,"nodeType":"ExpressionStatement","src":"2490:31:9"},{"expression":{"id":2715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2711,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2613,"src":"2531:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_FactorySettings_$3615_storage","typeString":"struct Structures.FactorySettings storage ref"}},"id":2713,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2540:9:9","memberName":"wethToken","nodeType":"MemberAccess","referencedDeclaration":3612,"src":"2531:18:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2714,"name":"_wethToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2661,"src":"2552:10:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2531:31:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2716,"nodeType":"ExpressionStatement","src":"2531:31:9"},{"expression":{"id":2721,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2717,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2613,"src":"2572:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_FactorySettings_$3615_storage","typeString":"struct Structures.FactorySettings storage ref"}},"id":2719,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2581:9:9","memberName":"museToken","nodeType":"MemberAccess","referencedDeclaration":3608,"src":"2572:18:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2720,"name":"_museToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2663,"src":"2593:10:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2572:31:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2722,"nodeType":"ExpressionStatement","src":"2572:31:9"},{"expression":{"id":2727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2723,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2613,"src":"2613:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_FactorySettings_$3615_storage","typeString":"struct Structures.FactorySettings storage ref"}},"id":2725,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2622:8:9","memberName":"daiToken","nodeType":"MemberAccess","referencedDeclaration":3610,"src":"2613:17:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2726,"name":"_daiToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2665,"src":"2633:9:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2613:29:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2728,"nodeType":"ExpressionStatement","src":"2613:29:9"},{"expression":{"id":2733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2729,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2613,"src":"2652:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_FactorySettings_$3615_storage","typeString":"struct Structures.FactorySettings storage ref"}},"id":2731,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2661:6:9","memberName":"router","nodeType":"MemberAccess","referencedDeclaration":3614,"src":"2652:15:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2732,"name":"_router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2667,"src":"2670:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2652:25:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2734,"nodeType":"ExpressionStatement","src":"2652:25:9"},{"expression":{"id":2739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2735,"name":"proxyCallContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2603,"src":"2687:17:9","typeDescriptions":{"typeIdentifier":"t_contract$_IProxyCall_$3546","typeString":"contract IProxyCall"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2737,"name":"_proxyCallContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2651,"src":"2718:18:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2736,"name":"IProxyCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3546,"src":"2707:10:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IProxyCall_$3546_$","typeString":"type(contract IProxyCall)"}},"id":2738,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2707:30:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IProxyCall_$3546","typeString":"contract IProxyCall"}},"src":"2687:50:9","typeDescriptions":{"typeIdentifier":"t_contract$_IProxyCall_$3546","typeString":"contract IProxyCall"}},"id":2740,"nodeType":"ExpressionStatement","src":"2687:50:9"},{"expression":{"id":2744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2741,"name":"defaultOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2607,"src":"2747:15:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":2742,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2765:3:9","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2769:6:9","memberName":"sender","nodeType":"MemberAccess","src":"2765:10:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2747:28:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2745,"nodeType":"ExpressionStatement","src":"2747:28:9"},{"expression":{"id":2748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2746,"name":"major","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2631,"src":"2785:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"32","id":2747,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2793:1:9","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"2785:9:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2749,"nodeType":"ExpressionStatement","src":"2785:9:9"},{"expression":{"id":2752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2750,"name":"minor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2633,"src":"2804:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":2751,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2812:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2804:9:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2753,"nodeType":"ExpressionStatement","src":"2804:9:9"},{"expression":{"id":2756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2754,"name":"patch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2635,"src":"2823:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":2755,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2831:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2823:9:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2757,"nodeType":"ExpressionStatement","src":"2823:9:9"}]},"functionSelector":"d024dda8","id":2759,"implemented":true,"kind":"function","modifiers":[{"id":2670,"kind":"modifierInvocation","modifierName":{"id":2669,"name":"initializer","nameLocations":["2150:11:9"],"nodeType":"IdentifierPath","referencedDeclaration":282,"src":"2150:11:9"},"nodeType":"ModifierInvocation","src":"2150:11:9"}],"name":"initialize","nameLocation":"1851:10:9","nodeType":"FunctionDefinition","parameters":{"id":2668,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2651,"mutability":"mutable","name":"_proxyCallContract","nameLocation":"1879:18:9","nodeType":"VariableDeclaration","scope":2759,"src":"1871:26:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2650,"name":"address","nodeType":"ElementaryTypeName","src":"1871:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2653,"mutability":"mutable","name":"_usersModuleContract","nameLocation":"1915:20:9","nodeType":"VariableDeclaration","scope":2759,"src":"1907:28:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2652,"name":"address","nodeType":"ElementaryTypeName","src":"1907:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2655,"mutability":"mutable","name":"_treasuryContract","nameLocation":"1953:17:9","nodeType":"VariableDeclaration","scope":2759,"src":"1945:25:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2654,"name":"address","nodeType":"ElementaryTypeName","src":"1945:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2657,"mutability":"mutable","name":"_easContract","nameLocation":"1988:12:9","nodeType":"VariableDeclaration","scope":2759,"src":"1980:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2656,"name":"address","nodeType":"ElementaryTypeName","src":"1980:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2659,"mutability":"mutable","name":"_easSchema","nameLocation":"2018:10:9","nodeType":"VariableDeclaration","scope":2759,"src":"2010:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2658,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2010:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2661,"mutability":"mutable","name":"_wethToken","nameLocation":"2046:10:9","nodeType":"VariableDeclaration","scope":2759,"src":"2038:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2660,"name":"address","nodeType":"ElementaryTypeName","src":"2038:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2663,"mutability":"mutable","name":"_museToken","nameLocation":"2074:10:9","nodeType":"VariableDeclaration","scope":2759,"src":"2066:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2662,"name":"address","nodeType":"ElementaryTypeName","src":"2066:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2665,"mutability":"mutable","name":"_daiToken","nameLocation":"2102:9:9","nodeType":"VariableDeclaration","scope":2759,"src":"2094:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2664,"name":"address","nodeType":"ElementaryTypeName","src":"2094:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2667,"mutability":"mutable","name":"_router","nameLocation":"2129:7:9","nodeType":"VariableDeclaration","scope":2759,"src":"2121:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2666,"name":"address","nodeType":"ElementaryTypeName","src":"2121:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1861:281:9"},"returnParameters":{"id":2671,"nodeType":"ParameterList","parameters":[],"src":"2162:0:9"},"scope":3317,"src":"1842:997:9","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2779,"nodeType":"Block","src":"3007:76:9","statements":[{"expression":{"arguments":[{"id":2773,"name":"_implementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2761,"src":"3039:15:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2774,"name":"major","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2763,"src":"3056:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2775,"name":"minor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2765,"src":"3063:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2776,"name":"patch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2767,"src":"3070:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2772,"name":"_updateImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3298,"src":"3017:21:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256,uint256)"}},"id":2777,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3017:59:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2778,"nodeType":"ExpressionStatement","src":"3017:59:9"}]},"functionSelector":"b19bcb58","id":2780,"implemented":true,"kind":"function","modifiers":[{"id":2770,"kind":"modifierInvocation","modifierName":{"id":2769,"name":"onlyOwner","nameLocations":["2997:9:9"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"2997:9:9"},"nodeType":"ModifierInvocation","src":"2997:9:9"}],"name":"adminUpdateImplementation","nameLocation":"2854:25:9","nodeType":"FunctionDefinition","parameters":{"id":2768,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2761,"mutability":"mutable","name":"_implementation","nameLocation":"2897:15:9","nodeType":"VariableDeclaration","scope":2780,"src":"2889:23:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2760,"name":"address","nodeType":"ElementaryTypeName","src":"2889:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2763,"mutability":"mutable","name":"major","nameLocation":"2930:5:9","nodeType":"VariableDeclaration","scope":2780,"src":"2922:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2762,"name":"uint256","nodeType":"ElementaryTypeName","src":"2922:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2765,"mutability":"mutable","name":"minor","nameLocation":"2953:5:9","nodeType":"VariableDeclaration","scope":2780,"src":"2945:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2764,"name":"uint256","nodeType":"ElementaryTypeName","src":"2945:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2767,"mutability":"mutable","name":"patch","nameLocation":"2976:5:9","nodeType":"VariableDeclaration","scope":2780,"src":"2968:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2766,"name":"uint256","nodeType":"ElementaryTypeName","src":"2968:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2879:108:9"},"returnParameters":{"id":2771,"nodeType":"ParameterList","parameters":[],"src":"3007:0:9"},"scope":3317,"src":"2845:238:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2791,"nodeType":"Block","src":"3188:61:9","statements":[{"expression":{"arguments":[{"id":2788,"name":"_proxyCallContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2782,"src":"3223:18:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2787,"name":"_updateProxyCallContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3228,"src":"3198:24:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2789,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3198:44:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2790,"nodeType":"ExpressionStatement","src":"3198:44:9"}]},"functionSelector":"a17bb199","id":2792,"implemented":true,"kind":"function","modifiers":[{"id":2785,"kind":"modifierInvocation","modifierName":{"id":2784,"name":"onlyOwner","nameLocations":["3178:9:9"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"3178:9:9"},"nodeType":"ModifierInvocation","src":"3178:9:9"}],"name":"adminUpdateProxyCallContract","nameLocation":"3098:28:9","nodeType":"FunctionDefinition","parameters":{"id":2783,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2782,"mutability":"mutable","name":"_proxyCallContract","nameLocation":"3144:18:9","nodeType":"VariableDeclaration","scope":2792,"src":"3136:26:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2781,"name":"address","nodeType":"ElementaryTypeName","src":"3136:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3126:42:9"},"returnParameters":{"id":2786,"nodeType":"ParameterList","parameters":[],"src":"3188:0:9"},"scope":3317,"src":"3089:160:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2800,"nodeType":"Block","src":"3315:49:9","statements":[{"expression":{"expression":{"id":2797,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2613,"src":"3332:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_FactorySettings_$3615_storage","typeString":"struct Structures.FactorySettings storage ref"}},"id":2798,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3341:16:9","memberName":"treasuryContract","nodeType":"MemberAccess","referencedDeclaration":3600,"src":"3332:25:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2796,"id":2799,"nodeType":"Return","src":"3325:32:9"}]},"functionSelector":"18da0011","id":2801,"implemented":true,"kind":"function","modifiers":[],"name":"treasuryContract","nameLocation":"3264:16:9","nodeType":"FunctionDefinition","parameters":{"id":2793,"nodeType":"ParameterList","parameters":[],"src":"3280:2:9"},"returnParameters":{"id":2796,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2795,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2801,"src":"3306:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2794,"name":"address","nodeType":"ElementaryTypeName","src":"3306:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3305:9:9"},"scope":3317,"src":"3255:109:9","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":2809,"nodeType":"Block","src":"3423:42:9","statements":[{"expression":{"expression":{"id":2806,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2613,"src":"3440:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_FactorySettings_$3615_storage","typeString":"struct Structures.FactorySettings storage ref"}},"id":2807,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3449:9:9","memberName":"easSchema","nodeType":"MemberAccess","referencedDeclaration":3606,"src":"3440:18:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2805,"id":2808,"nodeType":"Return","src":"3433:25:9"}]},"functionSelector":"3ec4f23d","id":2810,"implemented":true,"kind":"function","modifiers":[],"name":"easSchema","nameLocation":"3379:9:9","nodeType":"FunctionDefinition","parameters":{"id":2802,"nodeType":"ParameterList","parameters":[],"src":"3388:2:9"},"returnParameters":{"id":2805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2804,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2810,"src":"3414:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2803,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3414:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3413:9:9"},"scope":3317,"src":"3370:95:9","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":2818,"nodeType":"Block","src":"3526:44:9","statements":[{"expression":{"expression":{"id":2815,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2613,"src":"3543:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_FactorySettings_$3615_storage","typeString":"struct Structures.FactorySettings storage ref"}},"id":2816,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3552:11:9","memberName":"easContract","nodeType":"MemberAccess","referencedDeclaration":3604,"src":"3543:20:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2814,"id":2817,"nodeType":"Return","src":"3536:27:9"}]},"functionSelector":"cd77b52c","id":2819,"implemented":true,"kind":"function","modifiers":[],"name":"easContract","nameLocation":"3480:11:9","nodeType":"FunctionDefinition","parameters":{"id":2811,"nodeType":"ParameterList","parameters":[],"src":"3491:2:9"},"returnParameters":{"id":2814,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2813,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2819,"src":"3517:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2812,"name":"address","nodeType":"ElementaryTypeName","src":"3517:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3516:9:9"},"scope":3317,"src":"3471:99:9","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":2827,"nodeType":"Block","src":"3628:41:9","statements":[{"expression":{"expression":{"id":2824,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2613,"src":"3645:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_FactorySettings_$3615_storage","typeString":"struct Structures.FactorySettings storage ref"}},"id":2825,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3654:8:9","memberName":"daiToken","nodeType":"MemberAccess","referencedDeclaration":3610,"src":"3645:17:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2823,"id":2826,"nodeType":"Return","src":"3638:24:9"}]},"functionSelector":"be22f546","id":2828,"implemented":true,"kind":"function","modifiers":[],"name":"daiToken","nameLocation":"3585:8:9","nodeType":"FunctionDefinition","parameters":{"id":2820,"nodeType":"ParameterList","parameters":[],"src":"3593:2:9"},"returnParameters":{"id":2823,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2822,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2828,"src":"3619:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2821,"name":"address","nodeType":"ElementaryTypeName","src":"3619:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3618:9:9"},"scope":3317,"src":"3576:93:9","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":2836,"nodeType":"Block","src":"3728:42:9","statements":[{"expression":{"expression":{"id":2833,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2613,"src":"3745:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_FactorySettings_$3615_storage","typeString":"struct Structures.FactorySettings storage ref"}},"id":2834,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3754:9:9","memberName":"wethToken","nodeType":"MemberAccess","referencedDeclaration":3612,"src":"3745:18:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2832,"id":2835,"nodeType":"Return","src":"3738:25:9"}]},"functionSelector":"4b57b0be","id":2837,"implemented":true,"kind":"function","modifiers":[],"name":"wethToken","nameLocation":"3684:9:9","nodeType":"FunctionDefinition","parameters":{"id":2829,"nodeType":"ParameterList","parameters":[],"src":"3693:2:9"},"returnParameters":{"id":2832,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2831,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2837,"src":"3719:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2830,"name":"address","nodeType":"ElementaryTypeName","src":"3719:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3718:9:9"},"scope":3317,"src":"3675:95:9","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":2845,"nodeType":"Block","src":"3829:42:9","statements":[{"expression":{"expression":{"id":2842,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2613,"src":"3846:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_FactorySettings_$3615_storage","typeString":"struct Structures.FactorySettings storage ref"}},"id":2843,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3855:9:9","memberName":"museToken","nodeType":"MemberAccess","referencedDeclaration":3608,"src":"3846:18:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2841,"id":2844,"nodeType":"Return","src":"3839:25:9"}]},"functionSelector":"f77800e5","id":2846,"implemented":true,"kind":"function","modifiers":[],"name":"museToken","nameLocation":"3785:9:9","nodeType":"FunctionDefinition","parameters":{"id":2838,"nodeType":"ParameterList","parameters":[],"src":"3794:2:9"},"returnParameters":{"id":2841,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2840,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2846,"src":"3820:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2839,"name":"address","nodeType":"ElementaryTypeName","src":"3820:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3819:9:9"},"scope":3317,"src":"3776:95:9","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":2854,"nodeType":"Block","src":"3927:39:9","statements":[{"expression":{"expression":{"id":2851,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2613,"src":"3944:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_FactorySettings_$3615_storage","typeString":"struct Structures.FactorySettings storage ref"}},"id":2852,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3953:6:9","memberName":"router","nodeType":"MemberAccess","referencedDeclaration":3614,"src":"3944:15:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2850,"id":2853,"nodeType":"Return","src":"3937:22:9"}]},"functionSelector":"f887ea40","id":2855,"implemented":true,"kind":"function","modifiers":[],"name":"router","nameLocation":"3886:6:9","nodeType":"FunctionDefinition","parameters":{"id":2847,"nodeType":"ParameterList","parameters":[],"src":"3892:2:9"},"returnParameters":{"id":2850,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2849,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2855,"src":"3918:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2848,"name":"address","nodeType":"ElementaryTypeName","src":"3918:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3917:9:9"},"scope":3317,"src":"3877:89:9","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":2866,"nodeType":"Block","src":"4042:42:9","statements":[{"expression":{"baseExpression":{"id":2862,"name":"routerFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2619,"src":"4059:9:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint24_$","typeString":"mapping(uint256 => uint24)"}},"id":2864,"indexExpression":{"id":2863,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2857,"src":"4069:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4059:18:9","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"functionReturnParameters":2861,"id":2865,"nodeType":"Return","src":"4052:25:9"}]},"functionSelector":"5978e9b0","id":2867,"implemented":true,"kind":"function","modifiers":[],"name":"getRouterFee","nameLocation":"3981:12:9","nodeType":"FunctionDefinition","parameters":{"id":2858,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2857,"mutability":"mutable","name":"tokenId","nameLocation":"4002:7:9","nodeType":"VariableDeclaration","scope":2867,"src":"3994:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2856,"name":"uint256","nodeType":"ElementaryTypeName","src":"3994:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3993:17:9"},"returnParameters":{"id":2861,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2860,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2867,"src":"4034:6:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":2859,"name":"uint24","nodeType":"ElementaryTypeName","src":"4034:6:9","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"4033:8:9"},"scope":3317,"src":"3972:112:9","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":2882,"nodeType":"Block","src":"4160:41:9","statements":[{"expression":{"id":2880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2876,"name":"routerFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2619,"src":"4170:9:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint24_$","typeString":"mapping(uint256 => uint24)"}},"id":2878,"indexExpression":{"id":2877,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2869,"src":"4180:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4170:18:9","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2879,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2871,"src":"4191:3:9","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"src":"4170:24:9","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"id":2881,"nodeType":"ExpressionStatement","src":"4170:24:9"}]},"functionSelector":"6a3f9c30","id":2883,"implemented":true,"kind":"function","modifiers":[{"id":2874,"kind":"modifierInvocation","modifierName":{"id":2873,"name":"onlyOwner","nameLocations":["4150:9:9"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"4150:9:9"},"nodeType":"ModifierInvocation","src":"4150:9:9"}],"name":"setRouterFee","nameLocation":"4099:12:9","nodeType":"FunctionDefinition","parameters":{"id":2872,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2869,"mutability":"mutable","name":"tokenId","nameLocation":"4120:7:9","nodeType":"VariableDeclaration","scope":2883,"src":"4112:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2868,"name":"uint256","nodeType":"ElementaryTypeName","src":"4112:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2871,"mutability":"mutable","name":"fee","nameLocation":"4136:3:9","nodeType":"VariableDeclaration","scope":2883,"src":"4129:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"},"typeName":{"id":2870,"name":"uint24","nodeType":"ElementaryTypeName","src":"4129:6:9","typeDescriptions":{"typeIdentifier":"t_uint24","typeString":"uint24"}},"visibility":"internal"}],"src":"4111:29:9"},"returnParameters":{"id":2875,"nodeType":"ParameterList","parameters":[],"src":"4160:0:9"},"scope":3317,"src":"4090:111:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2894,"nodeType":"Block","src":"4271:45:9","statements":[{"expression":{"id":2892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2890,"name":"burnEnabled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2627,"src":"4281:11:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2891,"name":"newBurnEnabled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2885,"src":"4295:14:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4281:28:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2893,"nodeType":"ExpressionStatement","src":"4281:28:9"}]},"functionSelector":"7b2c835f","id":2895,"implemented":true,"kind":"function","modifiers":[{"id":2888,"kind":"modifierInvocation","modifierName":{"id":2887,"name":"onlyOwner","nameLocations":["4261:9:9"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"4261:9:9"},"nodeType":"ModifierInvocation","src":"4261:9:9"}],"name":"setBurnEnabled","nameLocation":"4216:14:9","nodeType":"FunctionDefinition","parameters":{"id":2886,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2885,"mutability":"mutable","name":"newBurnEnabled","nameLocation":"4236:14:9","nodeType":"VariableDeclaration","scope":2895,"src":"4231:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2884,"name":"bool","nodeType":"ElementaryTypeName","src":"4231:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4230:21:9"},"returnParameters":{"id":2889,"nodeType":"ParameterList","parameters":[],"src":"4271:0:9"},"scope":3317,"src":"4207:109:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2907,"nodeType":"Block","src":"4384:47:9","statements":[{"expression":{"arguments":[{"id":2904,"name":"newFeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2897,"src":"4416:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2902,"name":"feeds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2610,"src":"4401:5:9","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$2278_storage","typeString":"struct EnumerableSetUpgradeable.AddressSet storage ref"}},"id":2903,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4407:8:9","memberName":"contains","nodeType":"MemberAccess","referencedDeclaration":2359,"src":"4401:14:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressSet_$2278_storage_ptr_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_AddressSet_$2278_storage_ptr_$","typeString":"function (struct EnumerableSetUpgradeable.AddressSet storage pointer,address) view returns (bool)"}},"id":2905,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4401:23:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2901,"id":2906,"nodeType":"Return","src":"4394:30:9"}]},"functionSelector":"e58fdd04","id":2908,"implemented":true,"kind":"function","modifiers":[],"name":"isFeed","nameLocation":"4331:6:9","nodeType":"FunctionDefinition","parameters":{"id":2898,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2897,"mutability":"mutable","name":"newFeed","nameLocation":"4346:7:9","nodeType":"VariableDeclaration","scope":2908,"src":"4338:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2896,"name":"address","nodeType":"ElementaryTypeName","src":"4338:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4337:17:9"},"returnParameters":{"id":2901,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2900,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2908,"src":"4378:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2899,"name":"bool","nodeType":"ElementaryTypeName","src":"4378:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4377:6:9"},"scope":3317,"src":"4322:109:9","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":2977,"nodeType":"Block","src":"4731:363:9","statements":[{"expression":{"id":2933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2929,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2613,"src":"4741:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_FactorySettings_$3615_storage","typeString":"struct Structures.FactorySettings storage ref"}},"id":2931,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4750:16:9","memberName":"treasuryContract","nodeType":"MemberAccess","referencedDeclaration":3600,"src":"4741:25:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2932,"name":"treasury","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2910,"src":"4769:8:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4741:36:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2934,"nodeType":"ExpressionStatement","src":"4741:36:9"},{"expression":{"id":2939,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2935,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2613,"src":"4787:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_FactorySettings_$3615_storage","typeString":"struct Structures.FactorySettings storage ref"}},"id":2937,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4796:19:9","memberName":"usersModuleContract","nodeType":"MemberAccess","referencedDeclaration":3602,"src":"4787:28:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2938,"name":"usersModule","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2912,"src":"4818:11:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4787:42:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2940,"nodeType":"ExpressionStatement","src":"4787:42:9"},{"expression":{"id":2945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2941,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2613,"src":"4839:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_FactorySettings_$3615_storage","typeString":"struct Structures.FactorySettings storage ref"}},"id":2943,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4848:11:9","memberName":"easContract","nodeType":"MemberAccess","referencedDeclaration":3604,"src":"4839:20:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2944,"name":"newEasContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2914,"src":"4862:14:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4839:37:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2946,"nodeType":"ExpressionStatement","src":"4839:37:9"},{"expression":{"id":2951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2947,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2613,"src":"4886:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_FactorySettings_$3615_storage","typeString":"struct Structures.FactorySettings storage ref"}},"id":2949,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4895:9:9","memberName":"easSchema","nodeType":"MemberAccess","referencedDeclaration":3606,"src":"4886:18:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2950,"name":"newEasSchema","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2916,"src":"4907:12:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4886:33:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2952,"nodeType":"ExpressionStatement","src":"4886:33:9"},{"expression":{"id":2957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2953,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2613,"src":"4929:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_FactorySettings_$3615_storage","typeString":"struct Structures.FactorySettings storage ref"}},"id":2955,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4938:9:9","memberName":"wethToken","nodeType":"MemberAccess","referencedDeclaration":3612,"src":"4929:18:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2956,"name":"wethTokenAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2918,"src":"4950:13:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4929:34:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2958,"nodeType":"ExpressionStatement","src":"4929:34:9"},{"expression":{"id":2963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2959,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2613,"src":"4973:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_FactorySettings_$3615_storage","typeString":"struct Structures.FactorySettings storage ref"}},"id":2961,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4982:9:9","memberName":"museToken","nodeType":"MemberAccess","referencedDeclaration":3608,"src":"4973:18:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2962,"name":"museTokenAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2920,"src":"4994:13:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4973:34:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2964,"nodeType":"ExpressionStatement","src":"4973:34:9"},{"expression":{"id":2969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2965,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2613,"src":"5017:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_FactorySettings_$3615_storage","typeString":"struct Structures.FactorySettings storage ref"}},"id":2967,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5026:8:9","memberName":"daiToken","nodeType":"MemberAccess","referencedDeclaration":3610,"src":"5017:17:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2968,"name":"daiTokenAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2922,"src":"5037:12:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5017:32:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2970,"nodeType":"ExpressionStatement","src":"5017:32:9"},{"expression":{"id":2975,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2971,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2613,"src":"5059:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_FactorySettings_$3615_storage","typeString":"struct Structures.FactorySettings storage ref"}},"id":2973,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5068:6:9","memberName":"router","nodeType":"MemberAccess","referencedDeclaration":3614,"src":"5059:15:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2974,"name":"routerAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2924,"src":"5077:10:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5059:28:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2976,"nodeType":"ExpressionStatement","src":"5059:28:9"}]},"functionSelector":"9496d7f1","id":2978,"implemented":true,"kind":"function","modifiers":[{"id":2927,"kind":"modifierInvocation","modifierName":{"id":2926,"name":"onlyOwner","nameLocations":["4721:9:9"],"nodeType":"IdentifierPath","referencedDeclaration":45,"src":"4721:9:9"},"nodeType":"ModifierInvocation","src":"4721:9:9"}],"name":"changeMultipleSettings","nameLocation":"4446:22:9","nodeType":"FunctionDefinition","parameters":{"id":2925,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2910,"mutability":"mutable","name":"treasury","nameLocation":"4486:8:9","nodeType":"VariableDeclaration","scope":2978,"src":"4478:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2909,"name":"address","nodeType":"ElementaryTypeName","src":"4478:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2912,"mutability":"mutable","name":"usersModule","nameLocation":"4512:11:9","nodeType":"VariableDeclaration","scope":2978,"src":"4504:19:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2911,"name":"address","nodeType":"ElementaryTypeName","src":"4504:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2914,"mutability":"mutable","name":"newEasContract","nameLocation":"4541:14:9","nodeType":"VariableDeclaration","scope":2978,"src":"4533:22:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2913,"name":"address","nodeType":"ElementaryTypeName","src":"4533:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2916,"mutability":"mutable","name":"newEasSchema","nameLocation":"4573:12:9","nodeType":"VariableDeclaration","scope":2978,"src":"4565:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2915,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4565:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2918,"mutability":"mutable","name":"wethTokenAddr","nameLocation":"4603:13:9","nodeType":"VariableDeclaration","scope":2978,"src":"4595:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2917,"name":"address","nodeType":"ElementaryTypeName","src":"4595:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2920,"mutability":"mutable","name":"museTokenAddr","nameLocation":"4634:13:9","nodeType":"VariableDeclaration","scope":2978,"src":"4626:21:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2919,"name":"address","nodeType":"ElementaryTypeName","src":"4626:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2922,"mutability":"mutable","name":"daiTokenAddr","nameLocation":"4665:12:9","nodeType":"VariableDeclaration","scope":2978,"src":"4657:20:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2921,"name":"address","nodeType":"ElementaryTypeName","src":"4657:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2924,"mutability":"mutable","name":"routerAddr","nameLocation":"4695:10:9","nodeType":"VariableDeclaration","scope":2978,"src":"4687:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2923,"name":"address","nodeType":"ElementaryTypeName","src":"4687:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4468:243:9"},"returnParameters":{"id":2928,"nodeType":"ParameterList","parameters":[],"src":"4731:0:9"},"scope":3317,"src":"4437:657:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3107,"nodeType":"Block","src":"5160:1046:9","statements":[{"assignments":[2984],"declarations":[{"constant":false,"id":2984,"mutability":"mutable","name":"nonce","nameLocation":"5178:5:9","nodeType":"VariableDeclaration","scope":3107,"src":"5170:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2983,"name":"uint256","nodeType":"ElementaryTypeName","src":"5170:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2997,"initialValue":{"arguments":[{"arguments":[{"arguments":[{"expression":{"id":2990,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5234:3:9","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5238:6:9","memberName":"sender","nodeType":"MemberAccess","src":"5234:10:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2992,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"5246:5:9","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2993,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5252:9:9","memberName":"timestamp","nodeType":"MemberAccess","src":"5246:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2988,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5217:3:9","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2989,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5221:12:9","memberName":"encodePacked","nodeType":"MemberAccess","src":"5217:16:9","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2994,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5217:45:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2987,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"5207:9:9","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2995,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5207:56:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2986,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5186:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2985,"name":"uint256","nodeType":"ElementaryTypeName","src":"5186:7:9","typeDescriptions":{}}},"id":2996,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5186:87:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5170:103:9"},{"expression":{"id":3009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2998,"name":"ctx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2981,"src":"5284:3:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"expression":{"id":3002,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5346:3:9","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5350:6:9","memberName":"sender","nodeType":"MemberAccess","src":"5346:10:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3004,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2984,"src":"5358:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3005,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5366:1:9","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5358:9:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3001,"name":"_getSalt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3316,"src":"5337:8:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (address,uint256) pure returns (bytes32)"}},"id":3007,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5337:31:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2999,"name":"implementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2605,"src":"5290:14:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5305:18:9","memberName":"cloneDeterministic","nodeType":"MemberAccess","referencedDeclaration":176,"src":"5290:33:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes32_$returns$_t_address_$attached_to$_t_address_$","typeString":"function (address,bytes32) returns (address)"}},"id":3008,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5290:88:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5284:94:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3010,"nodeType":"ExpressionStatement","src":"5284:94:9"},{"expression":{"arguments":[{"expression":{"id":3015,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5435:3:9","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5439:6:9","memberName":"sender","nodeType":"MemberAccess","src":"5435:10:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":3019,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5467:4:9","typeDescriptions":{"typeIdentifier":"t_contract$_MecenateFeedFactory_$3317","typeString":"contract MecenateFeedFactory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_MecenateFeedFactory_$3317","typeString":"contract MecenateFeedFactory"}],"id":3018,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5459:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3017,"name":"address","nodeType":"ElementaryTypeName","src":"5459:7:9","typeDescriptions":{}}},"id":3020,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5459:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3021,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2613,"src":"5486:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_FactorySettings_$3615_storage","typeString":"struct Structures.FactorySettings storage ref"}},"id":3022,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5495:19:9","memberName":"usersModuleContract","nodeType":"MemberAccess","referencedDeclaration":3602,"src":"5486:28:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3023,"name":"major","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2631,"src":"5528:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3024,"name":"minor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2633,"src":"5547:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3025,"name":"patch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2635,"src":"5566:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3012,"name":"ctx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2981,"src":"5406:3:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3011,"name":"IFeedInitializer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3365,"src":"5389:16:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IFeedInitializer_$3365_$","typeString":"type(contract IFeedInitializer)"}},"id":3013,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5389:21:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IFeedInitializer_$3365","typeString":"contract IFeedInitializer"}},"id":3014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5411:10:9","memberName":"initialize","nodeType":"MemberAccess","referencedDeclaration":3364,"src":"5389:32:9","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256,uint256,uint256) external"}},"id":3026,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5389:192:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3027,"nodeType":"ExpressionStatement","src":"5389:192:9"},{"expression":{"arguments":[{"arguments":[{"expression":{"id":3034,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5692:3:9","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5696:6:9","memberName":"sender","nodeType":"MemberAccess","src":"5692:10:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"expression":{"id":3030,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2613,"src":"5628:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_FactorySettings_$3615_storage","typeString":"struct Structures.FactorySettings storage ref"}},"id":3031,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5637:19:9","memberName":"usersModuleContract","nodeType":"MemberAccess","referencedDeclaration":3602,"src":"5628:28:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3029,"name":"IMecenateUsers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3534,"src":"5613:14:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateUsers_$3534_$","typeString":"type(contract IMecenateUsers)"}},"id":3032,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5613:44:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateUsers_$3534","typeString":"contract IMecenateUsers"}},"id":3033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5658:16:9","memberName":"checkifUserExist","nodeType":"MemberAccess","referencedDeclaration":3508,"src":"5613:61:9","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view external returns (bool)"}},"id":3036,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5613:103:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"7573657220646f6573206e6f74206578697374","id":3037,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5730:21:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_44a1c20ceeb2d3c42bdd712ac4353ffb65e737bf726621f6505798c5f70aba18","typeString":"literal_string \"user does not exist\""},"value":"user does not exist"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_44a1c20ceeb2d3c42bdd712ac4353ffb65e737bf726621f6505798c5f70aba18","typeString":"literal_string \"user does not exist\""}],"id":3028,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5592:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3038,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5592:169:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3039,"nodeType":"ExpressionStatement","src":"5592:169:9"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3041,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5780:3:9","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5784:5:9","memberName":"value","nodeType":"MemberAccess","src":"5780:9:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":3043,"name":"getCreationFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3205,"src":"5793:14:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":3044,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5793:16:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5780:29:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e4f545f454e4f5547485f464545","id":3046,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5811:16:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_9ebe5d23cbaee1bcc28a4b16bfe7d25d68ce2c424c78fe83bbebdfd0983c24e1","typeString":"literal_string \"NOT_ENOUGH_FEE\""},"value":"NOT_ENOUGH_FEE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9ebe5d23cbaee1bcc28a4b16bfe7d25d68ce2c424c78fe83bbebdfd0983c24e1","typeString":"literal_string \"NOT_ENOUGH_FEE\""}],"id":3040,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5772:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3047,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5772:56:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3048,"nodeType":"ExpressionStatement","src":"5772:56:9"},{"assignments":[3050,null],"declarations":[{"constant":false,"id":3050,"mutability":"mutable","name":"_result","nameLocation":"5845:7:9","nodeType":"VariableDeclaration","scope":3107,"src":"5840:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3049,"name":"bool","nodeType":"ElementaryTypeName","src":"5840:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":3062,"initialValue":{"arguments":[{"hexValue":"","id":3060,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5938:2:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"arguments":[{"expression":{"id":3053,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2613,"src":"5866:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_FactorySettings_$3615_storage","typeString":"struct Structures.FactorySettings storage ref"}},"id":3054,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5875:16:9","memberName":"treasuryContract","nodeType":"MemberAccess","referencedDeclaration":3600,"src":"5866:25:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3052,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5858:8:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":3051,"name":"address","nodeType":"ElementaryTypeName","src":"5858:8:9","stateMutability":"payable","typeDescriptions":{}}},"id":3055,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5858:34:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":3056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5893:4:9","memberName":"call","nodeType":"MemberAccess","src":"5858:39:9","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"expression":{"id":3057,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5918:3:9","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5922:5:9","memberName":"value","nodeType":"MemberAccess","src":"5918:9:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5858:79:9","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3061,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5858:83:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5839:102:9"},{"expression":{"arguments":[{"id":3064,"name":"_result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3050,"src":"5960:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"43414c4c5f4641494c4544","id":3065,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5969:13:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_f3432607971be3e819458f2225636489dcaafd232f467570b81899b0f48540f3","typeString":"literal_string \"CALL_FAILED\""},"value":"CALL_FAILED"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f3432607971be3e819458f2225636489dcaafd232f467570b81899b0f48540f3","typeString":"literal_string \"CALL_FAILED\""}],"id":3063,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5952:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3066,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5952:31:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3067,"nodeType":"ExpressionStatement","src":"5952:31:9"},{"expression":{"id":3069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"5994:17:9","subExpression":{"id":3068,"name":"contractCounter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2629,"src":"5994:15:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3070,"nodeType":"ExpressionStatement","src":"5994:17:9"},{"assignments":[3072],"declarations":[{"constant":false,"id":3072,"mutability":"mutable","name":"feed","nameLocation":"6030:4:9","nodeType":"VariableDeclaration","scope":3107,"src":"6022:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3071,"name":"address","nodeType":"ElementaryTypeName","src":"6022:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3074,"initialValue":{"id":3073,"name":"ctx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2981,"src":"6037:3:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6022:18:9"},{"expression":{"arguments":[{"arguments":[{"id":3080,"name":"feed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3072,"src":"6069:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3079,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6061:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3078,"name":"address","nodeType":"ElementaryTypeName","src":"6061:7:9","typeDescriptions":{}}},"id":3081,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6061:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3075,"name":"feeds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2610,"src":"6051:5:9","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$2278_storage","typeString":"struct EnumerableSetUpgradeable.AddressSet storage ref"}},"id":3077,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6057:3:9","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":2305,"src":"6051:9:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_AddressSet_$2278_storage_ptr_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_AddressSet_$2278_storage_ptr_$","typeString":"function (struct EnumerableSetUpgradeable.AddressSet storage pointer,address) returns (bool)"}},"id":3082,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6051:24:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3083,"nodeType":"ExpressionStatement","src":"6051:24:9"},{"expression":{"arguments":[{"arguments":[{"id":3091,"name":"feed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3072,"src":"6120:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3090,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6112:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3089,"name":"address","nodeType":"ElementaryTypeName","src":"6112:7:9","typeDescriptions":{}}},"id":3092,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6112:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"baseExpression":{"id":3084,"name":"feedStore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2624,"src":"6086:9:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_AddressSet_$2278_storage_$","typeString":"mapping(address => struct EnumerableSetUpgradeable.AddressSet storage ref)"}},"id":3087,"indexExpression":{"expression":{"id":3085,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6096:3:9","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6100:6:9","memberName":"sender","nodeType":"MemberAccess","src":"6096:10:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6086:21:9","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$2278_storage","typeString":"struct EnumerableSetUpgradeable.AddressSet storage ref"}},"id":3088,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6108:3:9","memberName":"add","nodeType":"MemberAccess","referencedDeclaration":2305,"src":"6086:25:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_AddressSet_$2278_storage_ptr_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_AddressSet_$2278_storage_ptr_$","typeString":"function (struct EnumerableSetUpgradeable.AddressSet storage pointer,address) returns (bool)"}},"id":3093,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6086:40:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3094,"nodeType":"ExpressionStatement","src":"6086:40:9"},{"eventCall":{"arguments":[{"arguments":[{"id":3098,"name":"feed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3072,"src":"6162:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3097,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6154:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3096,"name":"address","nodeType":"ElementaryTypeName","src":"6154:7:9","typeDescriptions":{}}},"id":3099,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6154:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3095,"name":"FeedCreated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2639,"src":"6142:11:9","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3100,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6142:26:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3101,"nodeType":"EmitStatement","src":"6137:31:9"},{"expression":{"arguments":[{"id":3104,"name":"feed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3072,"src":"6194:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3103,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6186:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3102,"name":"address","nodeType":"ElementaryTypeName","src":"6186:7:9","typeDescriptions":{}}},"id":3105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6186:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2982,"id":3106,"nodeType":"Return","src":"6179:20:9"}]},"functionSelector":"ca5b4e5c","id":3108,"implemented":true,"kind":"function","modifiers":[],"name":"buildFeed","nameLocation":"5109:9:9","nodeType":"FunctionDefinition","parameters":{"id":2979,"nodeType":"ParameterList","parameters":[],"src":"5118:2:9"},"returnParameters":{"id":2982,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2981,"mutability":"mutable","name":"ctx","nameLocation":"5155:3:9","nodeType":"VariableDeclaration","scope":3108,"src":"5147:11:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2980,"name":"address","nodeType":"ElementaryTypeName","src":"5147:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5146:13:9"},"scope":3317,"src":"5100:1106:9","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":3118,"nodeType":"Block","src":"6273:38:9","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3114,"name":"feeds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2610,"src":"6290:5:9","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$2278_storage","typeString":"struct EnumerableSetUpgradeable.AddressSet storage ref"}},"id":3115,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6296:6:9","memberName":"values","nodeType":"MemberAccess","referencedDeclaration":2431,"src":"6290:12:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressSet_$2278_storage_ptr_$returns$_t_array$_t_address_$dyn_memory_ptr_$attached_to$_t_struct$_AddressSet_$2278_storage_ptr_$","typeString":"function (struct EnumerableSetUpgradeable.AddressSet storage pointer) view returns (address[] memory)"}},"id":3116,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6290:14:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"functionReturnParameters":3113,"id":3117,"nodeType":"Return","src":"6283:21:9"}]},"functionSelector":"7fe955d4","id":3119,"implemented":true,"kind":"function","modifiers":[],"name":"getFeeds","nameLocation":"6221:8:9","nodeType":"FunctionDefinition","parameters":{"id":3109,"nodeType":"ParameterList","parameters":[],"src":"6229:2:9"},"returnParameters":{"id":3113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3112,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3119,"src":"6255:16:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3110,"name":"address","nodeType":"ElementaryTypeName","src":"6255:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3111,"nodeType":"ArrayTypeName","src":"6255:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"6254:18:9"},"scope":3317,"src":"6212:99:9","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3133,"nodeType":"Block","src":"6409:48:9","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"baseExpression":{"id":3127,"name":"feedStore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2624,"src":"6426:9:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_AddressSet_$2278_storage_$","typeString":"mapping(address => struct EnumerableSetUpgradeable.AddressSet storage ref)"}},"id":3129,"indexExpression":{"id":3128,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3121,"src":"6436:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6426:15:9","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$2278_storage","typeString":"struct EnumerableSetUpgradeable.AddressSet storage ref"}},"id":3130,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6442:6:9","memberName":"values","nodeType":"MemberAccess","referencedDeclaration":2431,"src":"6426:22:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressSet_$2278_storage_ptr_$returns$_t_array$_t_address_$dyn_memory_ptr_$attached_to$_t_struct$_AddressSet_$2278_storage_ptr_$","typeString":"function (struct EnumerableSetUpgradeable.AddressSet storage pointer) view returns (address[] memory)"}},"id":3131,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6426:24:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"functionReturnParameters":3126,"id":3132,"nodeType":"Return","src":"6419:31:9"}]},"functionSelector":"b2a2e9ca","id":3134,"implemented":true,"kind":"function","modifiers":[],"name":"getFeedsOwned","nameLocation":"6326:13:9","nodeType":"FunctionDefinition","parameters":{"id":3122,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3121,"mutability":"mutable","name":"user","nameLocation":"6357:4:9","nodeType":"VariableDeclaration","scope":3134,"src":"6349:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3120,"name":"address","nodeType":"ElementaryTypeName","src":"6349:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6339:28:9"},"returnParameters":{"id":3126,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3125,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3134,"src":"6391:16:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3123,"name":"address","nodeType":"ElementaryTypeName","src":"6391:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3124,"nodeType":"ArrayTypeName","src":"6391:9:9","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"6390:18:9"},"scope":3317,"src":"6317:140:9","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3151,"nodeType":"Block","src":"6567:63:9","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"baseExpression":{"id":3144,"name":"feedStore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2624,"src":"6598:9:9","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_AddressSet_$2278_storage_$","typeString":"mapping(address => struct EnumerableSetUpgradeable.AddressSet storage ref)"}},"id":3146,"indexExpression":{"id":3145,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3136,"src":"6608:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6598:15:9","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$2278_storage","typeString":"struct EnumerableSetUpgradeable.AddressSet storage ref"}},"id":3147,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6614:6:9","memberName":"values","nodeType":"MemberAccess","referencedDeclaration":2431,"src":"6598:22:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressSet_$2278_storage_ptr_$returns$_t_array$_t_address_$dyn_memory_ptr_$attached_to$_t_struct$_AddressSet_$2278_storage_ptr_$","typeString":"function (struct EnumerableSetUpgradeable.AddressSet storage pointer) view returns (address[] memory)"}},"id":3148,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6598:24:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}],"id":3143,"name":"_getFeedsInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3900,"src":"6584:13:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_address_$dyn_memory_ptr_$returns$_t_array$_t_struct$_Feed_$3704_memory_ptr_$dyn_memory_ptr_$","typeString":"function (address[] memory) view returns (struct Structures.Feed memory[] memory)"}},"id":3149,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6584:39:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Feed_$3704_memory_ptr_$dyn_memory_ptr","typeString":"struct Structures.Feed memory[] memory"}},"functionReturnParameters":3142,"id":3150,"nodeType":"Return","src":"6577:46:9"}]},"functionSelector":"ad861324","id":3152,"implemented":true,"kind":"function","modifiers":[],"name":"getFeedsInfoOwned","nameLocation":"6472:17:9","nodeType":"FunctionDefinition","parameters":{"id":3137,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3136,"mutability":"mutable","name":"user","nameLocation":"6507:4:9","nodeType":"VariableDeclaration","scope":3152,"src":"6499:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3135,"name":"address","nodeType":"ElementaryTypeName","src":"6499:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6489:28:9"},"returnParameters":{"id":3142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3141,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3152,"src":"6541:24:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Feed_$3704_memory_ptr_$dyn_memory_ptr","typeString":"struct Structures.Feed[]"},"typeName":{"baseType":{"id":3139,"nodeType":"UserDefinedTypeName","pathNode":{"id":3138,"name":"Structures.Feed","nameLocations":["6541:10:9","6552:4:9"],"nodeType":"IdentifierPath","referencedDeclaration":3704,"src":"6541:15:9"},"referencedDeclaration":3704,"src":"6541:15:9","typeDescriptions":{"typeIdentifier":"t_struct$_Feed_$3704_storage_ptr","typeString":"struct Structures.Feed"}},"id":3140,"nodeType":"ArrayTypeName","src":"6541:17:9","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Feed_$3704_storage_$dyn_storage_ptr","typeString":"struct Structures.Feed[]"}},"visibility":"internal"}],"src":"6540:26:9"},"scope":3317,"src":"6463:167:9","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3164,"nodeType":"Block","src":"6732:42:9","statements":[{"expression":{"arguments":[{"id":3161,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3154,"src":"6762:4:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3160,"name":"_getFeedInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3847,"src":"6749:12:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_struct$_Feed_$3704_memory_ptr_$","typeString":"function (address) view returns (struct Structures.Feed memory)"}},"id":3162,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6749:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Feed_$3704_memory_ptr","typeString":"struct Structures.Feed memory"}},"functionReturnParameters":3159,"id":3163,"nodeType":"Return","src":"6742:25:9"}]},"functionSelector":"d570a66d","id":3165,"implemented":true,"kind":"function","modifiers":[],"name":"getFeedInfo","nameLocation":"6645:11:9","nodeType":"FunctionDefinition","parameters":{"id":3155,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3154,"mutability":"mutable","name":"user","nameLocation":"6674:4:9","nodeType":"VariableDeclaration","scope":3165,"src":"6666:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3153,"name":"address","nodeType":"ElementaryTypeName","src":"6666:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6656:28:9"},"returnParameters":{"id":3159,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3158,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3165,"src":"6708:22:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Feed_$3704_memory_ptr","typeString":"struct Structures.Feed"},"typeName":{"id":3157,"nodeType":"UserDefinedTypeName","pathNode":{"id":3156,"name":"Structures.Feed","nameLocations":["6708:10:9","6719:4:9"],"nodeType":"IdentifierPath","referencedDeclaration":3704,"src":"6708:15:9"},"referencedDeclaration":3704,"src":"6708:15:9","typeDescriptions":{"typeIdentifier":"t_struct$_Feed_$3704_storage_ptr","typeString":"struct Structures.Feed"}},"visibility":"internal"}],"src":"6707:24:9"},"scope":3317,"src":"6636:138:9","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3178,"nodeType":"Block","src":"6853:53:9","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3173,"name":"feeds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2610,"src":"6884:5:9","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$2278_storage","typeString":"struct EnumerableSetUpgradeable.AddressSet storage ref"}},"id":3174,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6890:6:9","memberName":"values","nodeType":"MemberAccess","referencedDeclaration":2431,"src":"6884:12:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressSet_$2278_storage_ptr_$returns$_t_array$_t_address_$dyn_memory_ptr_$attached_to$_t_struct$_AddressSet_$2278_storage_ptr_$","typeString":"function (struct EnumerableSetUpgradeable.AddressSet storage pointer) view returns (address[] memory)"}},"id":3175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6884:14:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}],"id":3172,"name":"_getFeedsInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3900,"src":"6870:13:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_address_$dyn_memory_ptr_$returns$_t_array$_t_struct$_Feed_$3704_memory_ptr_$dyn_memory_ptr_$","typeString":"function (address[] memory) view returns (struct Structures.Feed memory[] memory)"}},"id":3176,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6870:29:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Feed_$3704_memory_ptr_$dyn_memory_ptr","typeString":"struct Structures.Feed memory[] memory"}},"functionReturnParameters":3171,"id":3177,"nodeType":"Return","src":"6863:36:9"}]},"functionSelector":"e86ef353","id":3179,"implemented":true,"kind":"function","modifiers":[],"name":"getFeedsInfo","nameLocation":"6789:12:9","nodeType":"FunctionDefinition","parameters":{"id":3166,"nodeType":"ParameterList","parameters":[],"src":"6801:2:9"},"returnParameters":{"id":3171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3170,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3179,"src":"6827:24:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Feed_$3704_memory_ptr_$dyn_memory_ptr","typeString":"struct Structures.Feed[]"},"typeName":{"baseType":{"id":3168,"nodeType":"UserDefinedTypeName","pathNode":{"id":3167,"name":"Structures.Feed","nameLocations":["6827:10:9","6838:4:9"],"nodeType":"IdentifierPath","referencedDeclaration":3704,"src":"6827:15:9"},"referencedDeclaration":3704,"src":"6827:15:9","typeDescriptions":{"typeIdentifier":"t_struct$_Feed_$3704_storage_ptr","typeString":"struct Structures.Feed"}},"id":3169,"nodeType":"ArrayTypeName","src":"6827:17:9","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Feed_$3704_storage_$dyn_storage_ptr","typeString":"struct Structures.Feed[]"}},"visibility":"internal"}],"src":"6826:26:9"},"scope":3317,"src":"6780:126:9","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3191,"nodeType":"Block","src":"7007:55:9","statements":[{"expression":{"arguments":[{"id":3188,"name":"contractAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3181,"src":"7039:15:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3186,"name":"feeds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2610,"src":"7024:5:9","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSet_$2278_storage","typeString":"struct EnumerableSetUpgradeable.AddressSet storage ref"}},"id":3187,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7030:8:9","memberName":"contains","nodeType":"MemberAccess","referencedDeclaration":2359,"src":"7024:14:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_AddressSet_$2278_storage_ptr_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_AddressSet_$2278_storage_ptr_$","typeString":"function (struct EnumerableSetUpgradeable.AddressSet storage pointer,address) view returns (bool)"}},"id":3189,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7024:31:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3185,"id":3190,"nodeType":"Return","src":"7017:38:9"}]},"functionSelector":"cedf3ba2","id":3192,"implemented":true,"kind":"function","modifiers":[],"name":"isContractCreated","nameLocation":"6921:17:9","nodeType":"FunctionDefinition","parameters":{"id":3182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3181,"mutability":"mutable","name":"contractAddress","nameLocation":"6956:15:9","nodeType":"VariableDeclaration","scope":3192,"src":"6948:23:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3180,"name":"address","nodeType":"ElementaryTypeName","src":"6948:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6938:39:9"},"returnParameters":{"id":3185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3184,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3192,"src":"7001:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3183,"name":"bool","nodeType":"ElementaryTypeName","src":"7001:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7000:6:9"},"scope":3317,"src":"6912:150:9","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3204,"nodeType":"Block","src":"7126:79:9","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"expression":{"id":3198,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2613,"src":"7161:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_FactorySettings_$3615_storage","typeString":"struct Structures.FactorySettings storage ref"}},"id":3199,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7170:16:9","memberName":"treasuryContract","nodeType":"MemberAccess","referencedDeclaration":3600,"src":"7161:25:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3197,"name":"IMecenateTreasury","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3476,"src":"7143:17:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateTreasury_$3476_$","typeString":"type(contract IMecenateTreasury)"}},"id":3200,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7143:44:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateTreasury_$3476","typeString":"contract IMecenateTreasury"}},"id":3201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7188:8:9","memberName":"fixedFee","nodeType":"MemberAccess","referencedDeclaration":3475,"src":"7143:53:9","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":3202,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7143:55:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3196,"id":3203,"nodeType":"Return","src":"7136:62:9"}]},"id":3205,"implemented":true,"kind":"function","modifiers":[],"name":"getCreationFee","nameLocation":"7077:14:9","nodeType":"FunctionDefinition","parameters":{"id":3193,"nodeType":"ParameterList","parameters":[],"src":"7091:2:9"},"returnParameters":{"id":3196,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3195,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3205,"src":"7117:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3194,"name":"uint256","nodeType":"ElementaryTypeName","src":"7117:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7116:9:9"},"scope":3317,"src":"7068:137:9","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3227,"nodeType":"Block","src":"7281:273:9","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3211,"name":"_proxyCallContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3207,"src":"7312:18:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7331:10:9","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":398,"src":"7312:29:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":3213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7312:31:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"464e44436f6c6c656374696f6e466163746f72793a2050726f78792063616c6c2061646472657373206973206e6f74206120636f6e7472616374","id":3214,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7357:60:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_b9d1c47218ba09232bacd7ed386edf851f41c653266ef355cce8d28e9fc6eb8e","typeString":"literal_string \"FNDCollectionFactory: Proxy call address is not a contract\""},"value":"FNDCollectionFactory: Proxy call address is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b9d1c47218ba09232bacd7ed386edf851f41c653266ef355cce8d28e9fc6eb8e","typeString":"literal_string \"FNDCollectionFactory: Proxy call address is not a contract\""}],"id":3210,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7291:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3215,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7291:136:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3216,"nodeType":"ExpressionStatement","src":"7291:136:9"},{"expression":{"id":3221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3217,"name":"proxyCallContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2603,"src":"7437:17:9","typeDescriptions":{"typeIdentifier":"t_contract$_IProxyCall_$3546","typeString":"contract IProxyCall"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3219,"name":"_proxyCallContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3207,"src":"7468:18:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3218,"name":"IProxyCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3546,"src":"7457:10:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IProxyCall_$3546_$","typeString":"type(contract IProxyCall)"}},"id":3220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7457:30:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IProxyCall_$3546","typeString":"contract IProxyCall"}},"src":"7437:50:9","typeDescriptions":{"typeIdentifier":"t_contract$_IProxyCall_$3546","typeString":"contract IProxyCall"}},"id":3222,"nodeType":"ExpressionStatement","src":"7437:50:9"},{"eventCall":{"arguments":[{"id":3224,"name":"_proxyCallContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3207,"src":"7528:18:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3223,"name":"ProxyCallContractUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2649,"src":"7503:24:9","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3225,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7503:44:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3226,"nodeType":"EmitStatement","src":"7498:49:9"}]},"id":3228,"implemented":true,"kind":"function","modifiers":[],"name":"_updateProxyCallContract","nameLocation":"7220:24:9","nodeType":"FunctionDefinition","parameters":{"id":3208,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3207,"mutability":"mutable","name":"_proxyCallContract","nameLocation":"7253:18:9","nodeType":"VariableDeclaration","scope":3228,"src":"7245:26:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3206,"name":"address","nodeType":"ElementaryTypeName","src":"7245:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7244:28:9"},"returnParameters":{"id":3209,"nodeType":"ParameterList","parameters":[],"src":"7281:0:9"},"scope":3317,"src":"7211:343:9","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":3297,"nodeType":"Block","src":"7716:693:9","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3240,"name":"_implementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3230,"src":"7747:15:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7763:10:9","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":398,"src":"7747:26:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":3242,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7747:28:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"6e616c693a20696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374","id":3243,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7789:40:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_03e2cc16d2396c15082bec731bf82d75975591d6ac403f66cd5fdaefe422b9cc","typeString":"literal_string \"nali: implementation is not a contract\""},"value":"nali: implementation is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_03e2cc16d2396c15082bec731bf82d75975591d6ac403f66cd5fdaefe422b9cc","typeString":"literal_string \"nali: implementation is not a contract\""}],"id":3239,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7726:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3244,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7726:113:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3245,"nodeType":"ExpressionStatement","src":"7726:113:9"},{"expression":{"id":3248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3246,"name":"implementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2605,"src":"7850:14:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3247,"name":"_implementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3230,"src":"7867:15:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7850:32:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3249,"nodeType":"ExpressionStatement","src":"7850:32:9"},{"id":3262,"nodeType":"UncheckedBlock","src":"7893:160:9","statements":[{"expression":{"id":3252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3250,"name":"major","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2631,"src":"7966:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3251,"name":"majorNew","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3232,"src":"7974:8:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7966:16:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3253,"nodeType":"ExpressionStatement","src":"7966:16:9"},{"expression":{"id":3256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3254,"name":"minor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2633,"src":"7996:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3255,"name":"minorNew","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3234,"src":"8004:8:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7996:16:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3257,"nodeType":"ExpressionStatement","src":"7996:16:9"},{"expression":{"id":3260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3258,"name":"patch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2635,"src":"8026:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3259,"name":"patchNew","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3236,"src":"8034:8:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8026:16:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3261,"nodeType":"ExpressionStatement","src":"8026:16:9"}]},{"expression":{"arguments":[{"expression":{"id":3267,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"8120:3:9","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8124:6:9","memberName":"sender","nodeType":"MemberAccess","src":"8120:10:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":3271,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"8152:4:9","typeDescriptions":{"typeIdentifier":"t_contract$_MecenateFeedFactory_$3317","typeString":"contract MecenateFeedFactory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_MecenateFeedFactory_$3317","typeString":"contract MecenateFeedFactory"}],"id":3270,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8144:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3269,"name":"address","nodeType":"ElementaryTypeName","src":"8144:7:9","typeDescriptions":{}}},"id":3272,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8144:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":3273,"name":"settings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2613,"src":"8171:8:9","typeDescriptions":{"typeIdentifier":"t_struct$_FactorySettings_$3615_storage","typeString":"struct Structures.FactorySettings storage ref"}},"id":3274,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8180:19:9","memberName":"usersModuleContract","nodeType":"MemberAccess","referencedDeclaration":3602,"src":"8171:28:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3275,"name":"major","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2631,"src":"8213:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3276,"name":"minor","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2633,"src":"8232:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3277,"name":"patch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2635,"src":"8251:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3264,"name":"implementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2605,"src":"8080:14:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3263,"name":"IFeedInitializer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3365,"src":"8063:16:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IFeedInitializer_$3365_$","typeString":"type(contract IFeedInitializer)"}},"id":3265,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8063:32:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IFeedInitializer_$3365","typeString":"contract IFeedInitializer"}},"id":3266,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8096:10:9","memberName":"initialize","nodeType":"MemberAccess","referencedDeclaration":3364,"src":"8063:43:9","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,address,uint256,uint256,uint256) external"}},"id":3278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8063:203:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3279,"nodeType":"ExpressionStatement","src":"8063:203:9"},{"assignments":[3281],"declarations":[{"constant":false,"id":3281,"mutability":"mutable","name":"version","nameLocation":"8285:7:9","nodeType":"VariableDeclaration","scope":3297,"src":"8277:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3280,"name":"uint256","nodeType":"ElementaryTypeName","src":"8277:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3291,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3284,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3282,"name":"majorNew","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3232,"src":"8295:8:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"3130303030","id":3283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8306:5:9","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"value":"10000"},"src":"8295:16:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3285,"name":"minorNew","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3234,"src":"8314:8:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"313030","id":3286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8325:3:9","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"src":"8314:14:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8295:33:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3289,"name":"patchNew","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3236,"src":"8331:8:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8295:44:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8277:62:9"},{"eventCall":{"arguments":[{"id":3293,"name":"_implementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3230,"src":"8377:15:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3294,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3281,"src":"8394:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3292,"name":"ImplementationUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2645,"src":"8355:21:9","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":3295,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8355:47:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3296,"nodeType":"EmitStatement","src":"8350:52:9"}]},"id":3298,"implemented":true,"kind":"function","modifiers":[],"name":"_updateImplementation","nameLocation":"7569:21:9","nodeType":"FunctionDefinition","parameters":{"id":3237,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3230,"mutability":"mutable","name":"_implementation","nameLocation":"7608:15:9","nodeType":"VariableDeclaration","scope":3298,"src":"7600:23:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3229,"name":"address","nodeType":"ElementaryTypeName","src":"7600:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3232,"mutability":"mutable","name":"majorNew","nameLocation":"7641:8:9","nodeType":"VariableDeclaration","scope":3298,"src":"7633:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3231,"name":"uint256","nodeType":"ElementaryTypeName","src":"7633:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3234,"mutability":"mutable","name":"minorNew","nameLocation":"7667:8:9","nodeType":"VariableDeclaration","scope":3298,"src":"7659:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3233,"name":"uint256","nodeType":"ElementaryTypeName","src":"7659:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3236,"mutability":"mutable","name":"patchNew","nameLocation":"7693:8:9","nodeType":"VariableDeclaration","scope":3298,"src":"7685:16:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3235,"name":"uint256","nodeType":"ElementaryTypeName","src":"7685:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7590:117:9"},"returnParameters":{"id":3238,"nodeType":"ParameterList","parameters":[],"src":"7716:0:9"},"scope":3317,"src":"7560:849:9","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":3315,"nodeType":"Block","src":"8518:67:9","statements":[{"expression":{"arguments":[{"arguments":[{"id":3310,"name":"creator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3300,"src":"8562:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3311,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3302,"src":"8571:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3308,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"8545:3:9","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3309,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8549:12:9","memberName":"encodePacked","nodeType":"MemberAccess","src":"8545:16:9","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3312,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8545:32:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3307,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"8535:9:9","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3313,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8535:43:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3306,"id":3314,"nodeType":"Return","src":"8528:50:9"}]},"id":3316,"implemented":true,"kind":"function","modifiers":[],"name":"_getSalt","nameLocation":"8424:8:9","nodeType":"FunctionDefinition","parameters":{"id":3303,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3300,"mutability":"mutable","name":"creator","nameLocation":"8450:7:9","nodeType":"VariableDeclaration","scope":3316,"src":"8442:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3299,"name":"address","nodeType":"ElementaryTypeName","src":"8442:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3302,"mutability":"mutable","name":"nonce","nameLocation":"8475:5:9","nodeType":"VariableDeclaration","scope":3316,"src":"8467:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3301,"name":"uint256","nodeType":"ElementaryTypeName","src":"8467:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8432:54:9"},"returnParameters":{"id":3306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3305,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3316,"src":"8509:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3304,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8509:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8508:9:9"},"scope":3317,"src":"8415:170:9","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":3318,"src":"732:7855:9","usedErrors":[]}],"src":"32:8556:9"},"id":9},"contracts/helpers/ExternalProxyCall.sol":{"ast":{"absolutePath":"contracts/helpers/ExternalProxyCall.sol","exportedSymbols":{"AddressUpgradeable":[710],"ExternalProxyCall":[3347],"IProxyCall":[3546]},"id":3348,"license":"MIT OR Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":3319,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"49:23:10"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","id":3320,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3348,"sourceUnit":711,"src":"76:74:10","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IProxyCall.sol","file":"../interfaces/IProxyCall.sol","id":3321,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3348,"sourceUnit":3547,"src":"152:38:10","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3323,"name":"IProxyCall","nameLocations":["636:10:10"],"nodeType":"IdentifierPath","referencedDeclaration":3546,"src":"636:10:10"},"id":3324,"nodeType":"InheritanceSpecifier","src":"636:10:10"}],"canonicalName":"ExternalProxyCall","contractDependencies":[],"contractKind":"contract","documentation":{"id":3322,"nodeType":"StructuredDocumentation","src":"194:410:10","text":" @title Forwards arbitrary calls to an external contract.\n @notice DO NOT approve this contract to transfer any ERC-20 or ERC-721,\n or grant any other permissions for another contract.\n @dev This is used so that the from address of the calling contract does not have\n any special permissions (e.g. ERC-20 transfer).\n Other return types and call structures may be added in the future."},"fullyImplemented":true,"id":3347,"linearizedBaseContracts":[3347,3546],"name":"ExternalProxyCall","nameLocation":"615:17:10","nodeType":"ContractDefinition","nodes":[{"global":false,"id":3327,"libraryName":{"id":3325,"name":"AddressUpgradeable","nameLocations":["660:18:10"],"nodeType":"IdentifierPath","referencedDeclaration":710,"src":"660:18:10"},"nodeType":"UsingForDirective","src":"654:37:10","typeName":{"id":3326,"name":"address","nodeType":"ElementaryTypeName","src":"683:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"baseFunctions":[3545],"body":{"id":3345,"nodeType":"Block","src":"859:326:10","statements":[{"assignments":[3338],"declarations":[{"constant":false,"id":3338,"mutability":"mutable","name":"returnData","nameLocation":"883:10:10","nodeType":"VariableDeclaration","scope":3345,"src":"870:23:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3337,"name":"bytes","nodeType":"ElementaryTypeName","src":"870:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3343,"initialValue":{"arguments":[{"id":3341,"name":"callData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3331,"src":"926:8:10","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3339,"name":"externalContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3329,"src":"896:16:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"913:12:10","memberName":"functionCall","nodeType":"MemberAccess","referencedDeclaration":450,"src":"896:29:10","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$attached_to$_t_address_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":3342,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"896:39:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"870:65:10"},{"AST":{"nodeType":"YulBlock","src":"1116:62:10","statements":[{"nodeType":"YulAssignment","src":"1131:36:10","value":{"arguments":[{"arguments":[{"name":"returnData","nodeType":"YulIdentifier","src":"1151:10:10"},{"kind":"number","nodeType":"YulLiteral","src":"1163:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1147:3:10"},"nodeType":"YulFunctionCall","src":"1147:19:10"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1141:5:10"},"nodeType":"YulFunctionCall","src":"1141:26:10"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"1131:6:10"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3335,"isOffset":false,"isSlot":false,"src":"1131:6:10","valueSize":1},{"declaration":3338,"isOffset":false,"isSlot":false,"src":"1151:10:10","valueSize":1}],"id":3344,"nodeType":"InlineAssembly","src":"1107:71:10"}]},"functionSelector":"a1453b0e","id":3346,"implemented":true,"kind":"function","modifiers":[],"name":"proxyCallAndReturnAddress","nameLocation":"708:25:10","nodeType":"FunctionDefinition","overrides":{"id":3333,"nodeType":"OverrideSpecifier","overrides":[],"src":"817:8:10"},"parameters":{"id":3332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3329,"mutability":"mutable","name":"externalContract","nameLocation":"752:16:10","nodeType":"VariableDeclaration","scope":3346,"src":"744:24:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3328,"name":"address","nodeType":"ElementaryTypeName","src":"744:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3331,"mutability":"mutable","name":"callData","nameLocation":"792:8:10","nodeType":"VariableDeclaration","scope":3346,"src":"779:21:10","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3330,"name":"bytes","nodeType":"ElementaryTypeName","src":"779:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"733:74:10"},"returnParameters":{"id":3336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3335,"mutability":"mutable","name":"result","nameLocation":"851:6:10","nodeType":"VariableDeclaration","scope":3346,"src":"835:22:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":3334,"name":"address","nodeType":"ElementaryTypeName","src":"835:15:10","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"834:24:10"},"scope":3347,"src":"699:486:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3348,"src":"606:582:10","usedErrors":[]}],"src":"49:1141:10"},"id":10},"contracts/interfaces/IFeedInitializer.sol":{"ast":{"absolutePath":"contracts/interfaces/IFeedInitializer.sol","exportedSymbols":{"IFeedInitializer":[3365]},"id":3366,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3349,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"32:23:11"},{"abstract":false,"baseContracts":[],"canonicalName":"IFeedInitializer","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":3365,"linearizedBaseContracts":[3365],"name":"IFeedInitializer","nameLocation":"67:16:11","nodeType":"ContractDefinition","nodes":[{"functionSelector":"728cdbca","id":3364,"implemented":false,"kind":"function","modifiers":[],"name":"initialize","nameLocation":"99:10:11","nodeType":"FunctionDefinition","parameters":{"id":3362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3351,"mutability":"mutable","name":"_owner","nameLocation":"127:6:11","nodeType":"VariableDeclaration","scope":3364,"src":"119:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3350,"name":"address","nodeType":"ElementaryTypeName","src":"119:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3353,"mutability":"mutable","name":"_factoryContract","nameLocation":"151:16:11","nodeType":"VariableDeclaration","scope":3364,"src":"143:24:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3352,"name":"address","nodeType":"ElementaryTypeName","src":"143:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3355,"mutability":"mutable","name":"_usersModuleContract","nameLocation":"185:20:11","nodeType":"VariableDeclaration","scope":3364,"src":"177:28:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3354,"name":"address","nodeType":"ElementaryTypeName","src":"177:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3357,"mutability":"mutable","name":"major","nameLocation":"223:5:11","nodeType":"VariableDeclaration","scope":3364,"src":"215:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3356,"name":"uint256","nodeType":"ElementaryTypeName","src":"215:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3359,"mutability":"mutable","name":"minor","nameLocation":"246:5:11","nodeType":"VariableDeclaration","scope":3364,"src":"238:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3358,"name":"uint256","nodeType":"ElementaryTypeName","src":"238:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3361,"mutability":"mutable","name":"patch","nameLocation":"269:5:11","nodeType":"VariableDeclaration","scope":3364,"src":"261:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3360,"name":"uint256","nodeType":"ElementaryTypeName","src":"261:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"109:171:11"},"returnParameters":{"id":3363,"nodeType":"ParameterList","parameters":[],"src":"289:0:11"},"scope":3365,"src":"90:200:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3366,"src":"57:235:11","usedErrors":[]}],"src":"32:261:11"},"id":11},"contracts/interfaces/IMecenateFeed.sol":{"ast":{"absolutePath":"contracts/interfaces/IMecenateFeed.sol","exportedSymbols":{"IMecenateFeed":[3463],"Structures":[3725]},"id":3464,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3367,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"32:23:12"},{"absolutePath":"contracts/library/Structures.sol","file":"../library/Structures.sol","id":3368,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3464,"sourceUnit":3726,"src":"56:35:12","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IMecenateFeed","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":3463,"linearizedBaseContracts":[3463],"name":"IMecenateFeed","nameLocation":"103:13:12","nodeType":"ContractDefinition","nodes":[{"functionSelector":"8c6838ba","id":3374,"implemented":false,"kind":"function","modifiers":[],"name":"getPost","nameLocation":"132:7:12","nodeType":"FunctionDefinition","parameters":{"id":3369,"nodeType":"ParameterList","parameters":[],"src":"139:2:12"},"returnParameters":{"id":3373,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3372,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3374,"src":"165:22:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$3622_memory_ptr","typeString":"struct Structures.Post"},"typeName":{"id":3371,"nodeType":"UserDefinedTypeName","pathNode":{"id":3370,"name":"Structures.Post","nameLocations":["165:10:12","176:4:12"],"nodeType":"IdentifierPath","referencedDeclaration":3622,"src":"165:15:12"},"referencedDeclaration":3622,"src":"165:15:12","typeDescriptions":{"typeIdentifier":"t_struct$_Post_$3622_storage_ptr","typeString":"struct Structures.Post"}},"visibility":"internal"}],"src":"164:24:12"},"scope":3463,"src":"123:66:12","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"0917e776","id":3379,"implemented":false,"kind":"function","modifiers":[],"name":"getTotalStaked","nameLocation":"204:14:12","nodeType":"FunctionDefinition","parameters":{"id":3375,"nodeType":"ParameterList","parameters":[],"src":"218:2:12"},"returnParameters":{"id":3378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3377,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3379,"src":"244:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3376,"name":"uint256","nodeType":"ElementaryTypeName","src":"244:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"243:9:12"},"scope":3463,"src":"195:58:12","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"17906c2e","id":3384,"implemented":false,"kind":"function","modifiers":[],"name":"postCount","nameLocation":"268:9:12","nodeType":"FunctionDefinition","parameters":{"id":3380,"nodeType":"ParameterList","parameters":[],"src":"277:2:12"},"returnParameters":{"id":3383,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3382,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3384,"src":"303:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3381,"name":"uint256","nodeType":"ElementaryTypeName","src":"303:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"302:9:12"},"scope":3463,"src":"259:53:12","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"07388dba","id":3396,"implemented":false,"kind":"function","modifiers":[],"name":"acceptPost","nameLocation":"327:10:12","nodeType":"FunctionDefinition","parameters":{"id":3394,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3387,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3396,"src":"347:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$3565","typeString":"enum Structures.Tokens"},"typeName":{"id":3386,"nodeType":"UserDefinedTypeName","pathNode":{"id":3385,"name":"Structures.Tokens","nameLocations":["347:10:12","358:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":3565,"src":"347:17:12"},"referencedDeclaration":3565,"src":"347:17:12","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$3565","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":3389,"mutability":"mutable","name":"_amount","nameLocation":"382:7:12","nodeType":"VariableDeclaration","scope":3396,"src":"374:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3388,"name":"uint256","nodeType":"ElementaryTypeName","src":"374:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3391,"mutability":"mutable","name":"_funder","nameLocation":"407:7:12","nodeType":"VariableDeclaration","scope":3396,"src":"399:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3390,"name":"address","nodeType":"ElementaryTypeName","src":"399:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3393,"mutability":"mutable","name":"_buyer","nameLocation":"432:6:12","nodeType":"VariableDeclaration","scope":3396,"src":"424:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3392,"name":"address","nodeType":"ElementaryTypeName","src":"424:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"337:107:12"},"returnParameters":{"id":3395,"nodeType":"ParameterList","parameters":[],"src":"461:0:12"},"scope":3463,"src":"318:144:12","stateMutability":"payable","virtual":false,"visibility":"external"},{"functionSelector":"5c63ed69","id":3401,"implemented":false,"kind":"function","modifiers":[],"name":"getSellerStake","nameLocation":"477:14:12","nodeType":"FunctionDefinition","parameters":{"id":3397,"nodeType":"ParameterList","parameters":[],"src":"491:2:12"},"returnParameters":{"id":3400,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3399,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3401,"src":"517:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3398,"name":"uint256","nodeType":"ElementaryTypeName","src":"517:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"516:9:12"},"scope":3463,"src":"468:58:12","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"4c38d877","id":3406,"implemented":false,"kind":"function","modifiers":[],"name":"getBuyerStake","nameLocation":"541:13:12","nodeType":"FunctionDefinition","parameters":{"id":3402,"nodeType":"ParameterList","parameters":[],"src":"554:2:12"},"returnParameters":{"id":3405,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3404,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3406,"src":"580:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3403,"name":"uint256","nodeType":"ElementaryTypeName","src":"580:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"579:9:12"},"scope":3463,"src":"532:57:12","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"d24e0c87","id":3411,"implemented":false,"kind":"function","modifiers":[],"name":"getPaymentRequested","nameLocation":"604:19:12","nodeType":"FunctionDefinition","parameters":{"id":3407,"nodeType":"ParameterList","parameters":[],"src":"623:2:12"},"returnParameters":{"id":3410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3409,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3411,"src":"649:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3408,"name":"uint256","nodeType":"ElementaryTypeName","src":"649:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"648:9:12"},"scope":3463,"src":"595:63:12","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"faeb5e17","id":3416,"implemented":false,"kind":"function","modifiers":[],"name":"getStakeRequested","nameLocation":"673:17:12","nodeType":"FunctionDefinition","parameters":{"id":3412,"nodeType":"ParameterList","parameters":[],"src":"690:2:12"},"returnParameters":{"id":3415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3414,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3416,"src":"716:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3413,"name":"uint256","nodeType":"ElementaryTypeName","src":"716:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"715:9:12"},"scope":3463,"src":"664:61:12","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"4e69d560","id":3422,"implemented":false,"kind":"function","modifiers":[],"name":"getStatus","nameLocation":"740:9:12","nodeType":"FunctionDefinition","parameters":{"id":3417,"nodeType":"ParameterList","parameters":[],"src":"749:2:12"},"returnParameters":{"id":3421,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3420,"mutability":"mutable","name":"status","nameLocation":"797:6:12","nodeType":"VariableDeclaration","scope":3422,"src":"775:28:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$3557","typeString":"enum Structures.PostStatus"},"typeName":{"id":3419,"nodeType":"UserDefinedTypeName","pathNode":{"id":3418,"name":"Structures.PostStatus","nameLocations":["775:10:12","786:10:12"],"nodeType":"IdentifierPath","referencedDeclaration":3557,"src":"775:21:12"},"referencedDeclaration":3557,"src":"775:21:12","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$3557","typeString":"enum Structures.PostStatus"}},"visibility":"internal"}],"src":"774:30:12"},"scope":3463,"src":"731:74:12","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"010a38f5","id":3428,"implemented":false,"kind":"function","modifiers":[],"name":"getTokenId","nameLocation":"820:10:12","nodeType":"FunctionDefinition","parameters":{"id":3423,"nodeType":"ParameterList","parameters":[],"src":"830:2:12"},"returnParameters":{"id":3427,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3426,"mutability":"mutable","name":"tokenId","nameLocation":"874:7:12","nodeType":"VariableDeclaration","scope":3428,"src":"856:25:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$3565","typeString":"enum Structures.Tokens"},"typeName":{"id":3425,"nodeType":"UserDefinedTypeName","pathNode":{"id":3424,"name":"Structures.Tokens","nameLocations":["856:10:12","867:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":3565,"src":"856:17:12"},"referencedDeclaration":3565,"src":"856:17:12","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$3565","typeString":"enum Structures.Tokens"}},"visibility":"internal"}],"src":"855:27:12"},"scope":3463,"src":"811:72:12","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"32946a87","id":3433,"implemented":false,"kind":"function","modifiers":[],"name":"getPostId","nameLocation":"898:9:12","nodeType":"FunctionDefinition","parameters":{"id":3429,"nodeType":"ParameterList","parameters":[],"src":"907:2:12"},"returnParameters":{"id":3432,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3431,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3433,"src":"933:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3430,"name":"bytes32","nodeType":"ElementaryTypeName","src":"933:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"932:9:12"},"scope":3463,"src":"889:53:12","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"8e25df9e","id":3439,"implemented":false,"kind":"function","modifiers":[],"name":"getAllPostIds","nameLocation":"957:13:12","nodeType":"FunctionDefinition","parameters":{"id":3434,"nodeType":"ParameterList","parameters":[],"src":"970:2:12"},"returnParameters":{"id":3438,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3437,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3439,"src":"996:16:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":3435,"name":"bytes32","nodeType":"ElementaryTypeName","src":"996:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3436,"nodeType":"ArrayTypeName","src":"996:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"995:18:12"},"scope":3463,"src":"948:66:12","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"825821fb","id":3447,"implemented":false,"kind":"function","modifiers":[],"name":"getPostTimestamp","nameLocation":"1029:16:12","nodeType":"FunctionDefinition","parameters":{"id":3442,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3441,"mutability":"mutable","name":"postId","nameLocation":"1063:6:12","nodeType":"VariableDeclaration","scope":3447,"src":"1055:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3440,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1055:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1045:30:12"},"returnParameters":{"id":3446,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3445,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3447,"src":"1099:31:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PostTimestamp_$3585_memory_ptr","typeString":"struct Structures.PostTimestamp"},"typeName":{"id":3444,"nodeType":"UserDefinedTypeName","pathNode":{"id":3443,"name":"Structures.PostTimestamp","nameLocations":["1099:10:12","1110:13:12"],"nodeType":"IdentifierPath","referencedDeclaration":3585,"src":"1099:24:12"},"referencedDeclaration":3585,"src":"1099:24:12","typeDescriptions":{"typeIdentifier":"t_struct$_PostTimestamp_$3585_storage_ptr","typeString":"struct Structures.PostTimestamp"}},"visibility":"internal"}],"src":"1098:33:12"},"scope":3463,"src":"1020:112:12","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"8da5cb5b","id":3452,"implemented":false,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1147:5:12","nodeType":"FunctionDefinition","parameters":{"id":3448,"nodeType":"ParameterList","parameters":[],"src":"1152:2:12"},"returnParameters":{"id":3451,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3450,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3452,"src":"1178:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3449,"name":"address","nodeType":"ElementaryTypeName","src":"1178:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1177:9:12"},"scope":3463,"src":"1138:49:12","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"54fd4d50","id":3457,"implemented":false,"kind":"function","modifiers":[],"name":"version","nameLocation":"1202:7:12","nodeType":"FunctionDefinition","parameters":{"id":3453,"nodeType":"ParameterList","parameters":[],"src":"1209:2:12"},"returnParameters":{"id":3456,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3455,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3457,"src":"1235:13:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3454,"name":"string","nodeType":"ElementaryTypeName","src":"1235:6:12","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1234:15:12"},"scope":3463,"src":"1193:57:12","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"729e2eb1","id":3462,"implemented":false,"kind":"function","modifiers":[],"name":"getEncryptedPost","nameLocation":"1265:16:12","nodeType":"FunctionDefinition","parameters":{"id":3458,"nodeType":"ParameterList","parameters":[],"src":"1281:2:12"},"returnParameters":{"id":3461,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3460,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3462,"src":"1307:12:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3459,"name":"bytes","nodeType":"ElementaryTypeName","src":"1307:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1306:14:12"},"scope":3463,"src":"1256:65:12","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3464,"src":"93:1230:12","usedErrors":[]}],"src":"32:1292:12"},"id":12},"contracts/interfaces/IMecenateTreasury.sol":{"ast":{"absolutePath":"contracts/interfaces/IMecenateTreasury.sol","exportedSymbols":{"IMecenateTreasury":[3476]},"id":3477,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3465,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"32:23:13"},{"abstract":false,"baseContracts":[],"canonicalName":"IMecenateTreasury","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":3476,"linearizedBaseContracts":[3476],"name":"IMecenateTreasury","nameLocation":"67:17:13","nodeType":"ContractDefinition","nodes":[{"functionSelector":"808fc206","id":3470,"implemented":false,"kind":"function","modifiers":[],"name":"globalFee","nameLocation":"100:9:13","nodeType":"FunctionDefinition","parameters":{"id":3466,"nodeType":"ParameterList","parameters":[],"src":"109:2:13"},"returnParameters":{"id":3469,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3468,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3470,"src":"135:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3467,"name":"uint256","nodeType":"ElementaryTypeName","src":"135:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"134:9:13"},"scope":3476,"src":"91:53:13","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"91792d5b","id":3475,"implemented":false,"kind":"function","modifiers":[],"name":"fixedFee","nameLocation":"159:8:13","nodeType":"FunctionDefinition","parameters":{"id":3471,"nodeType":"ParameterList","parameters":[],"src":"167:2:13"},"returnParameters":{"id":3474,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3473,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3475,"src":"193:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3472,"name":"uint256","nodeType":"ElementaryTypeName","src":"193:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"192:9:13"},"scope":3476,"src":"150:52:13","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3477,"src":"57:147:13","usedErrors":[]}],"src":"32:173:13"},"id":13},"contracts/interfaces/IMecenateUsers.sol":{"ast":{"absolutePath":"contracts/interfaces/IMecenateUsers.sol","exportedSymbols":{"IMecenateUsers":[3534],"Structures":[3725]},"id":3535,"license":"MIT","nodeType":"SourceUnit","nodes":[{"absolutePath":"contracts/library/Structures.sol","file":"../library/Structures.sol","id":3478,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3535,"sourceUnit":3726,"src":"32:35:14","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IMecenateUsers","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":3534,"linearizedBaseContracts":[3534],"name":"IMecenateUsers","nameLocation":"79:14:14","nodeType":"ContractDefinition","nodes":[{"functionSelector":"0a38178c","id":3483,"implemented":false,"kind":"function","modifiers":[],"name":"registerUser","nameLocation":"109:12:14","nodeType":"FunctionDefinition","parameters":{"id":3481,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3480,"mutability":"mutable","name":"metadata","nameLocation":"135:8:14","nodeType":"VariableDeclaration","scope":3483,"src":"122:21:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3479,"name":"bytes","nodeType":"ElementaryTypeName","src":"122:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"121:23:14"},"returnParameters":{"id":3482,"nodeType":"ParameterList","parameters":[],"src":"153:0:14"},"scope":3534,"src":"100:54:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"00ce8e3e","id":3489,"implemented":false,"kind":"function","modifiers":[],"name":"getUsers","nameLocation":"169:8:14","nodeType":"FunctionDefinition","parameters":{"id":3484,"nodeType":"ParameterList","parameters":[],"src":"177:2:14"},"returnParameters":{"id":3488,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3487,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3489,"src":"203:16:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3485,"name":"address","nodeType":"ElementaryTypeName","src":"203:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3486,"nodeType":"ArrayTypeName","src":"203:9:14","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"202:18:14"},"scope":3534,"src":"160:61:14","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"b5cb15f7","id":3494,"implemented":false,"kind":"function","modifiers":[],"name":"getUserCount","nameLocation":"236:12:14","nodeType":"FunctionDefinition","parameters":{"id":3490,"nodeType":"ParameterList","parameters":[],"src":"248:2:14"},"returnParameters":{"id":3493,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3492,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3494,"src":"274:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3491,"name":"uint256","nodeType":"ElementaryTypeName","src":"274:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"273:9:14"},"scope":3534,"src":"227:56:14","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"c6e064ad","id":3501,"implemented":false,"kind":"function","modifiers":[],"name":"getUserAt","nameLocation":"298:9:14","nodeType":"FunctionDefinition","parameters":{"id":3497,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3496,"mutability":"mutable","name":"index","nameLocation":"316:5:14","nodeType":"VariableDeclaration","scope":3501,"src":"308:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3495,"name":"uint256","nodeType":"ElementaryTypeName","src":"308:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"307:15:14"},"returnParameters":{"id":3500,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3499,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3501,"src":"346:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3498,"name":"address","nodeType":"ElementaryTypeName","src":"346:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"345:9:14"},"scope":3534,"src":"289:66:14","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"48990fcc","id":3508,"implemented":false,"kind":"function","modifiers":[],"name":"checkifUserExist","nameLocation":"370:16:14","nodeType":"FunctionDefinition","parameters":{"id":3504,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3503,"mutability":"mutable","name":"userAddress","nameLocation":"395:11:14","nodeType":"VariableDeclaration","scope":3508,"src":"387:19:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3502,"name":"address","nodeType":"ElementaryTypeName","src":"387:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"386:21:14"},"returnParameters":{"id":3507,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3506,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3508,"src":"431:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3505,"name":"bool","nodeType":"ElementaryTypeName","src":"431:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"430:6:14"},"scope":3534,"src":"361:76:14","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"cf5caa12","id":3518,"implemented":false,"kind":"function","modifiers":[],"name":"getPaginatedUsers","nameLocation":"452:17:14","nodeType":"FunctionDefinition","parameters":{"id":3513,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3510,"mutability":"mutable","name":"startIndex","nameLocation":"487:10:14","nodeType":"VariableDeclaration","scope":3518,"src":"479:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3509,"name":"uint256","nodeType":"ElementaryTypeName","src":"479:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3512,"mutability":"mutable","name":"endIndex","nameLocation":"515:8:14","nodeType":"VariableDeclaration","scope":3518,"src":"507:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3511,"name":"uint256","nodeType":"ElementaryTypeName","src":"507:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"469:60:14"},"returnParameters":{"id":3517,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3516,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3518,"src":"553:16:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3514,"name":"address","nodeType":"ElementaryTypeName","src":"553:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3515,"nodeType":"ArrayTypeName","src":"553:9:14","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"552:18:14"},"scope":3534,"src":"443:128:14","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"ef2a8764","id":3526,"implemented":false,"kind":"function","modifiers":[],"name":"getUserMetadata","nameLocation":"586:15:14","nodeType":"FunctionDefinition","parameters":{"id":3521,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3520,"mutability":"mutable","name":"userAddress","nameLocation":"619:11:14","nodeType":"VariableDeclaration","scope":3526,"src":"611:19:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3519,"name":"address","nodeType":"ElementaryTypeName","src":"611:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"601:35:14"},"returnParameters":{"id":3525,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3524,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3526,"src":"660:22:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_User_$3677_memory_ptr","typeString":"struct Structures.User"},"typeName":{"id":3523,"nodeType":"UserDefinedTypeName","pathNode":{"id":3522,"name":"Structures.User","nameLocations":["660:10:14","671:4:14"],"nodeType":"IdentifierPath","referencedDeclaration":3677,"src":"660:15:14"},"referencedDeclaration":3677,"src":"660:15:14","typeDescriptions":{"typeIdentifier":"t_struct$_User_$3677_storage_ptr","typeString":"struct Structures.User"}},"visibility":"internal"}],"src":"659:24:14"},"scope":3534,"src":"577:107:14","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"11231fe0","id":3533,"implemented":false,"kind":"function","modifiers":[],"name":"getUserPublicKey","nameLocation":"699:16:14","nodeType":"FunctionDefinition","parameters":{"id":3529,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3528,"mutability":"mutable","name":"userAddress","nameLocation":"733:11:14","nodeType":"VariableDeclaration","scope":3533,"src":"725:19:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3527,"name":"address","nodeType":"ElementaryTypeName","src":"725:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"715:35:14"},"returnParameters":{"id":3532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3531,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3533,"src":"774:12:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3530,"name":"bytes","nodeType":"ElementaryTypeName","src":"774:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"773:14:14"},"scope":3534,"src":"690:98:14","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3535,"src":"69:721:14","usedErrors":[]}],"src":"32:759:14"},"id":14},"contracts/interfaces/IProxyCall.sol":{"ast":{"absolutePath":"contracts/interfaces/IProxyCall.sol","exportedSymbols":{"IProxyCall":[3546]},"id":3547,"license":"MIT OR Apache-2.0","nodeType":"SourceUnit","nodes":[{"id":3536,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"47:23:15"},{"abstract":false,"baseContracts":[],"canonicalName":"IProxyCall","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":3546,"linearizedBaseContracts":[3546],"name":"IProxyCall","nameLocation":"84:10:15","nodeType":"ContractDefinition","nodes":[{"functionSelector":"a1453b0e","id":3545,"implemented":false,"kind":"function","modifiers":[],"name":"proxyCallAndReturnAddress","nameLocation":"111:25:15","nodeType":"FunctionDefinition","parameters":{"id":3541,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3538,"mutability":"mutable","name":"externalContract","nameLocation":"155:16:15","nodeType":"VariableDeclaration","scope":3545,"src":"147:24:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3537,"name":"address","nodeType":"ElementaryTypeName","src":"147:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3540,"mutability":"mutable","name":"callData","nameLocation":"195:8:15","nodeType":"VariableDeclaration","scope":3545,"src":"182:21:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3539,"name":"bytes","nodeType":"ElementaryTypeName","src":"182:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"136:74:15"},"returnParameters":{"id":3544,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3543,"mutability":"mutable","name":"result","nameLocation":"245:6:15","nodeType":"VariableDeclaration","scope":3545,"src":"229:22:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":3542,"name":"address","nodeType":"ElementaryTypeName","src":"229:15:15","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"228:24:15"},"scope":3546,"src":"102:151:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3547,"src":"74:182:15","usedErrors":[]}],"src":"47:211:15"},"id":15},"contracts/library/Structures.sol":{"ast":{"absolutePath":"contracts/library/Structures.sol","exportedSymbols":{"Structures":[3725]},"id":3726,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3548,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"146:23:16"},{"abstract":false,"baseContracts":[],"canonicalName":"Structures","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":3725,"linearizedBaseContracts":[3725],"name":"Structures","nameLocation":"179:10:16","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Structures.PostStatus","id":3557,"members":[{"id":3549,"name":"Waiting","nameLocation":"222:7:16","nodeType":"EnumValue","src":"222:7:16"},{"id":3550,"name":"Proposed","nameLocation":"239:8:16","nodeType":"EnumValue","src":"239:8:16"},{"id":3551,"name":"Accepted","nameLocation":"257:8:16","nodeType":"EnumValue","src":"257:8:16"},{"id":3552,"name":"Submitted","nameLocation":"275:9:16","nodeType":"EnumValue","src":"275:9:16"},{"id":3553,"name":"Finalized","nameLocation":"294:9:16","nodeType":"EnumValue","src":"294:9:16"},{"id":3554,"name":"Punished","nameLocation":"313:8:16","nodeType":"EnumValue","src":"313:8:16"},{"id":3555,"name":"Revealed","nameLocation":"331:8:16","nodeType":"EnumValue","src":"331:8:16"},{"id":3556,"name":"Renounced","nameLocation":"349:9:16","nodeType":"EnumValue","src":"349:9:16"}],"name":"PostStatus","nameLocation":"201:10:16","nodeType":"EnumDefinition","src":"196:168:16"},{"canonicalName":"Structures.PostResult","id":3561,"members":[{"id":3558,"name":"None","nameLocation":"396:4:16","nodeType":"EnumValue","src":"396:4:16"},{"id":3559,"name":"Valid","nameLocation":"410:5:16","nodeType":"EnumValue","src":"410:5:16"},{"id":3560,"name":"Punished","nameLocation":"425:8:16","nodeType":"EnumValue","src":"425:8:16"}],"name":"PostResult","nameLocation":"375:10:16","nodeType":"EnumDefinition","src":"370:69:16"},{"canonicalName":"Structures.Tokens","id":3565,"members":[{"id":3562,"name":"NaN","nameLocation":"467:3:16","nodeType":"EnumValue","src":"467:3:16"},{"id":3563,"name":"MUSE","nameLocation":"480:4:16","nodeType":"EnumValue","src":"480:4:16"},{"id":3564,"name":"DAI","nameLocation":"494:3:16","nodeType":"EnumValue","src":"494:3:16"}],"name":"Tokens","nameLocation":"450:6:16","nodeType":"EnumDefinition","src":"445:58:16"},{"canonicalName":"Structures.PostType","id":3571,"members":[{"id":3566,"name":"Text","nameLocation":"533:4:16","nodeType":"EnumValue","src":"533:4:16"},{"id":3567,"name":"Image","nameLocation":"547:5:16","nodeType":"EnumValue","src":"547:5:16"},{"id":3568,"name":"Video","nameLocation":"562:5:16","nodeType":"EnumValue","src":"562:5:16"},{"id":3569,"name":"Audio","nameLocation":"577:5:16","nodeType":"EnumValue","src":"577:5:16"},{"id":3570,"name":"File","nameLocation":"592:4:16","nodeType":"EnumValue","src":"592:4:16"}],"name":"PostType","nameLocation":"514:8:16","nodeType":"EnumDefinition","src":"509:93:16"},{"canonicalName":"Structures.PostDuration","id":3577,"members":[{"id":3572,"name":"OneDay","nameLocation":"635:6:16","nodeType":"EnumValue","src":"635:6:16"},{"id":3573,"name":"ThreeDays","nameLocation":"651:9:16","nodeType":"EnumValue","src":"651:9:16"},{"id":3574,"name":"OneWeek","nameLocation":"670:7:16","nodeType":"EnumValue","src":"670:7:16"},{"id":3575,"name":"TwoWeeks","nameLocation":"687:8:16","nodeType":"EnumValue","src":"687:8:16"},{"id":3576,"name":"OneMonth","nameLocation":"705:8:16","nodeType":"EnumValue","src":"705:8:16"}],"name":"PostDuration","nameLocation":"612:12:16","nodeType":"EnumDefinition","src":"607:112:16"},{"canonicalName":"Structures.PostTimestamp","id":3585,"members":[{"constant":false,"id":3580,"mutability":"mutable","name":"postResult","nameLocation":"767:10:16","nodeType":"VariableDeclaration","scope":3585,"src":"756:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PostResult_$3561","typeString":"enum Structures.PostResult"},"typeName":{"id":3579,"nodeType":"UserDefinedTypeName","pathNode":{"id":3578,"name":"PostResult","nameLocations":["756:10:16"],"nodeType":"IdentifierPath","referencedDeclaration":3561,"src":"756:10:16"},"referencedDeclaration":3561,"src":"756:10:16","typeDescriptions":{"typeIdentifier":"t_enum$_PostResult_$3561","typeString":"enum Structures.PostResult"}},"visibility":"internal"},{"constant":false,"id":3582,"mutability":"mutable","name":"creationTimeStamp","nameLocation":"795:17:16","nodeType":"VariableDeclaration","scope":3585,"src":"787:25:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3581,"name":"uint256","nodeType":"ElementaryTypeName","src":"787:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3584,"mutability":"mutable","name":"endTimeStamp","nameLocation":"830:12:16","nodeType":"VariableDeclaration","scope":3585,"src":"822:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3583,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"PostTimestamp","nameLocation":"732:13:16","nodeType":"StructDefinition","scope":3725,"src":"725:124:16","visibility":"public"},{"canonicalName":"Structures.FeedSettings","id":3598,"members":[{"constant":false,"id":3587,"mutability":"mutable","name":"punishmentRatio","nameLocation":"893:15:16","nodeType":"VariableDeclaration","scope":3598,"src":"885:23:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3586,"name":"uint256","nodeType":"ElementaryTypeName","src":"885:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3589,"mutability":"mutable","name":"postCount","nameLocation":"926:9:16","nodeType":"VariableDeclaration","scope":3598,"src":"918:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3588,"name":"uint256","nodeType":"ElementaryTypeName","src":"918:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3591,"mutability":"mutable","name":"usersModuleContract","nameLocation":"953:19:16","nodeType":"VariableDeclaration","scope":3598,"src":"945:27:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3590,"name":"address","nodeType":"ElementaryTypeName","src":"945:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3593,"mutability":"mutable","name":"factoryContract","nameLocation":"990:15:16","nodeType":"VariableDeclaration","scope":3598,"src":"982:23:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3592,"name":"address","nodeType":"ElementaryTypeName","src":"982:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3595,"mutability":"mutable","name":"router","nameLocation":"1023:6:16","nodeType":"VariableDeclaration","scope":3598,"src":"1015:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3594,"name":"address","nodeType":"ElementaryTypeName","src":"1015:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3597,"mutability":"mutable","name":"version","nameLocation":"1046:7:16","nodeType":"VariableDeclaration","scope":3598,"src":"1039:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":3596,"name":"string","nodeType":"ElementaryTypeName","src":"1039:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"FeedSettings","nameLocation":"862:12:16","nodeType":"StructDefinition","scope":3725,"src":"855:205:16","visibility":"public"},{"canonicalName":"Structures.FactorySettings","id":3615,"members":[{"constant":false,"id":3600,"mutability":"mutable","name":"treasuryContract","nameLocation":"1107:16:16","nodeType":"VariableDeclaration","scope":3615,"src":"1099:24:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3599,"name":"address","nodeType":"ElementaryTypeName","src":"1099:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3602,"mutability":"mutable","name":"usersModuleContract","nameLocation":"1141:19:16","nodeType":"VariableDeclaration","scope":3615,"src":"1133:27:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3601,"name":"address","nodeType":"ElementaryTypeName","src":"1133:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3604,"mutability":"mutable","name":"easContract","nameLocation":"1178:11:16","nodeType":"VariableDeclaration","scope":3615,"src":"1170:19:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3603,"name":"address","nodeType":"ElementaryTypeName","src":"1170:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3606,"mutability":"mutable","name":"easSchema","nameLocation":"1207:9:16","nodeType":"VariableDeclaration","scope":3615,"src":"1199:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3605,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1199:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3608,"mutability":"mutable","name":"museToken","nameLocation":"1234:9:16","nodeType":"VariableDeclaration","scope":3615,"src":"1226:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3607,"name":"address","nodeType":"ElementaryTypeName","src":"1226:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3610,"mutability":"mutable","name":"daiToken","nameLocation":"1261:8:16","nodeType":"VariableDeclaration","scope":3615,"src":"1253:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3609,"name":"address","nodeType":"ElementaryTypeName","src":"1253:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3612,"mutability":"mutable","name":"wethToken","nameLocation":"1287:9:16","nodeType":"VariableDeclaration","scope":3615,"src":"1279:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3611,"name":"address","nodeType":"ElementaryTypeName","src":"1279:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3614,"mutability":"mutable","name":"router","nameLocation":"1314:6:16","nodeType":"VariableDeclaration","scope":3615,"src":"1306:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3613,"name":"address","nodeType":"ElementaryTypeName","src":"1306:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"FactorySettings","nameLocation":"1073:15:16","nodeType":"StructDefinition","scope":3725,"src":"1066:261:16","visibility":"public"},{"canonicalName":"Structures.Post","id":3622,"members":[{"constant":false,"id":3618,"mutability":"mutable","name":"creator","nameLocation":"1441:7:16","nodeType":"VariableDeclaration","scope":3622,"src":"1436:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_User_$3677_storage_ptr","typeString":"struct Structures.User"},"typeName":{"id":3617,"nodeType":"UserDefinedTypeName","pathNode":{"id":3616,"name":"User","nameLocations":["1436:4:16"],"nodeType":"IdentifierPath","referencedDeclaration":3677,"src":"1436:4:16"},"referencedDeclaration":3677,"src":"1436:4:16","typeDescriptions":{"typeIdentifier":"t_struct$_User_$3677_storage_ptr","typeString":"struct Structures.User"}},"visibility":"internal"},{"constant":false,"id":3621,"mutability":"mutable","name":"postdata","nameLocation":"1467:8:16","nodeType":"VariableDeclaration","scope":3622,"src":"1458:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$3632_storage_ptr","typeString":"struct Structures.PostData"},"typeName":{"id":3620,"nodeType":"UserDefinedTypeName","pathNode":{"id":3619,"name":"PostData","nameLocations":["1458:8:16"],"nodeType":"IdentifierPath","referencedDeclaration":3632,"src":"1458:8:16"},"referencedDeclaration":3632,"src":"1458:8:16","typeDescriptions":{"typeIdentifier":"t_struct$_PostData_$3632_storage_ptr","typeString":"struct Structures.PostData"}},"visibility":"internal"}],"name":"Post","nameLocation":"1421:4:16","nodeType":"StructDefinition","scope":3725,"src":"1414:68:16","visibility":"public"},{"canonicalName":"Structures.PostData","id":3632,"members":[{"constant":false,"id":3625,"mutability":"mutable","name":"settings","nameLocation":"1620:8:16","nodeType":"VariableDeclaration","scope":3632,"src":"1607:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$3657_storage_ptr","typeString":"struct Structures.PostSettings"},"typeName":{"id":3624,"nodeType":"UserDefinedTypeName","pathNode":{"id":3623,"name":"PostSettings","nameLocations":["1607:12:16"],"nodeType":"IdentifierPath","referencedDeclaration":3657,"src":"1607:12:16"},"referencedDeclaration":3657,"src":"1607:12:16","typeDescriptions":{"typeIdentifier":"t_struct$_PostSettings_$3657_storage_ptr","typeString":"struct Structures.PostSettings"}},"visibility":"internal"},{"constant":false,"id":3628,"mutability":"mutable","name":"escrow","nameLocation":"1649:6:16","nodeType":"VariableDeclaration","scope":3632,"src":"1638:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$3670_storage_ptr","typeString":"struct Structures.PostEscrow"},"typeName":{"id":3627,"nodeType":"UserDefinedTypeName","pathNode":{"id":3626,"name":"PostEscrow","nameLocations":["1638:10:16"],"nodeType":"IdentifierPath","referencedDeclaration":3670,"src":"1638:10:16"},"referencedDeclaration":3670,"src":"1638:10:16","typeDescriptions":{"typeIdentifier":"t_struct$_PostEscrow_$3670_storage_ptr","typeString":"struct Structures.PostEscrow"}},"visibility":"internal"},{"constant":false,"id":3631,"mutability":"mutable","name":"data","nameLocation":"1683:4:16","nodeType":"VariableDeclaration","scope":3632,"src":"1665:22:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_PostEncryptedData_$3639_storage_ptr","typeString":"struct Structures.PostEncryptedData"},"typeName":{"id":3630,"nodeType":"UserDefinedTypeName","pathNode":{"id":3629,"name":"PostEncryptedData","nameLocations":["1665:17:16"],"nodeType":"IdentifierPath","referencedDeclaration":3639,"src":"1665:17:16"},"referencedDeclaration":3639,"src":"1665:17:16","typeDescriptions":{"typeIdentifier":"t_struct$_PostEncryptedData_$3639_storage_ptr","typeString":"struct Structures.PostEncryptedData"}},"visibility":"internal"}],"name":"PostData","nameLocation":"1588:8:16","nodeType":"StructDefinition","scope":3725,"src":"1581:113:16","visibility":"public"},{"canonicalName":"Structures.PostEncryptedData","id":3639,"members":[{"constant":false,"id":3634,"mutability":"mutable","name":"encryptedData","nameLocation":"1844:13:16","nodeType":"VariableDeclaration","scope":3639,"src":"1838:19:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":3633,"name":"bytes","nodeType":"ElementaryTypeName","src":"1838:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3636,"mutability":"mutable","name":"encryptedKey","nameLocation":"1873:12:16","nodeType":"VariableDeclaration","scope":3639,"src":"1867:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":3635,"name":"bytes","nodeType":"ElementaryTypeName","src":"1867:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3638,"mutability":"mutable","name":"decryptedData","nameLocation":"1901:13:16","nodeType":"VariableDeclaration","scope":3639,"src":"1895:19:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":3637,"name":"bytes","nodeType":"ElementaryTypeName","src":"1895:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"PostEncryptedData","nameLocation":"1810:17:16","nodeType":"StructDefinition","scope":3725,"src":"1803:118:16","visibility":"public"},{"canonicalName":"Structures.PostSettings","id":3657,"members":[{"constant":false,"id":3642,"mutability":"mutable","name":"status","nameLocation":"2065:6:16","nodeType":"VariableDeclaration","scope":3657,"src":"2054:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$3557","typeString":"enum Structures.PostStatus"},"typeName":{"id":3641,"nodeType":"UserDefinedTypeName","pathNode":{"id":3640,"name":"PostStatus","nameLocations":["2054:10:16"],"nodeType":"IdentifierPath","referencedDeclaration":3557,"src":"2054:10:16"},"referencedDeclaration":3557,"src":"2054:10:16","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$3557","typeString":"enum Structures.PostStatus"}},"visibility":"internal"},{"constant":false,"id":3645,"mutability":"mutable","name":"postType","nameLocation":"2090:8:16","nodeType":"VariableDeclaration","scope":3657,"src":"2081:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PostType_$3571","typeString":"enum Structures.PostType"},"typeName":{"id":3644,"nodeType":"UserDefinedTypeName","pathNode":{"id":3643,"name":"PostType","nameLocations":["2081:8:16"],"nodeType":"IdentifierPath","referencedDeclaration":3571,"src":"2081:8:16"},"referencedDeclaration":3571,"src":"2081:8:16","typeDescriptions":{"typeIdentifier":"t_enum$_PostType_$3571","typeString":"enum Structures.PostType"}},"visibility":"internal"},{"constant":false,"id":3647,"mutability":"mutable","name":"creationTimeStamp","nameLocation":"2116:17:16","nodeType":"VariableDeclaration","scope":3657,"src":"2108:25:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3646,"name":"uint256","nodeType":"ElementaryTypeName","src":"2108:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3649,"mutability":"mutable","name":"endTimeStamp","nameLocation":"2151:12:16","nodeType":"VariableDeclaration","scope":3657,"src":"2143:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3648,"name":"uint256","nodeType":"ElementaryTypeName","src":"2143:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3651,"mutability":"mutable","name":"duration","nameLocation":"2181:8:16","nodeType":"VariableDeclaration","scope":3657,"src":"2173:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3650,"name":"uint256","nodeType":"ElementaryTypeName","src":"2173:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3654,"mutability":"mutable","name":"tokenId","nameLocation":"2206:7:16","nodeType":"VariableDeclaration","scope":3657,"src":"2199:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$3565","typeString":"enum Structures.Tokens"},"typeName":{"id":3653,"nodeType":"UserDefinedTypeName","pathNode":{"id":3652,"name":"Tokens","nameLocations":["2199:6:16"],"nodeType":"IdentifierPath","referencedDeclaration":3565,"src":"2199:6:16"},"referencedDeclaration":3565,"src":"2199:6:16","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$3565","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":3656,"mutability":"mutable","name":"postId","nameLocation":"2231:6:16","nodeType":"VariableDeclaration","scope":3657,"src":"2223:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3655,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2223:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"PostSettings","nameLocation":"2031:12:16","nodeType":"StructDefinition","scope":3725,"src":"2024:220:16","visibility":"public"},{"canonicalName":"Structures.PostEscrow","id":3670,"members":[{"constant":false,"id":3659,"mutability":"mutable","name":"buyer","nameLocation":"2381:5:16","nodeType":"VariableDeclaration","scope":3670,"src":"2373:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3658,"name":"address","nodeType":"ElementaryTypeName","src":"2373:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3661,"mutability":"mutable","name":"seller","nameLocation":"2404:6:16","nodeType":"VariableDeclaration","scope":3670,"src":"2396:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3660,"name":"address","nodeType":"ElementaryTypeName","src":"2396:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3663,"mutability":"mutable","name":"stake","nameLocation":"2428:5:16","nodeType":"VariableDeclaration","scope":3670,"src":"2420:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3662,"name":"uint256","nodeType":"ElementaryTypeName","src":"2420:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3665,"mutability":"mutable","name":"payment","nameLocation":"2451:7:16","nodeType":"VariableDeclaration","scope":3670,"src":"2443:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3664,"name":"uint256","nodeType":"ElementaryTypeName","src":"2443:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3667,"mutability":"mutable","name":"punishment","nameLocation":"2476:10:16","nodeType":"VariableDeclaration","scope":3670,"src":"2468:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3666,"name":"uint256","nodeType":"ElementaryTypeName","src":"2468:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3669,"mutability":"mutable","name":"penalty","nameLocation":"2504:7:16","nodeType":"VariableDeclaration","scope":3670,"src":"2496:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3668,"name":"uint256","nodeType":"ElementaryTypeName","src":"2496:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"PostEscrow","nameLocation":"2352:10:16","nodeType":"StructDefinition","scope":3725,"src":"2345:173:16","visibility":"public"},{"canonicalName":"Structures.User","id":3677,"members":[{"constant":false,"id":3672,"mutability":"mutable","name":"evmAddress","nameLocation":"2635:10:16","nodeType":"VariableDeclaration","scope":3677,"src":"2627:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3671,"name":"address","nodeType":"ElementaryTypeName","src":"2627:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3674,"mutability":"mutable","name":"sismoVaultId","nameLocation":"2661:12:16","nodeType":"VariableDeclaration","scope":3677,"src":"2655:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":3673,"name":"bytes","nodeType":"ElementaryTypeName","src":"2655:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3676,"mutability":"mutable","name":"publicKey","nameLocation":"2689:9:16","nodeType":"VariableDeclaration","scope":3677,"src":"2683:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":3675,"name":"bytes","nodeType":"ElementaryTypeName","src":"2683:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"User","nameLocation":"2612:4:16","nodeType":"StructDefinition","scope":3725,"src":"2605:100:16","visibility":"public"},{"canonicalName":"Structures.Feed","id":3704,"members":[{"constant":false,"id":3679,"mutability":"mutable","name":"contractAddress","nameLocation":"2822:15:16","nodeType":"VariableDeclaration","scope":3704,"src":"2814:23:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3678,"name":"address","nodeType":"ElementaryTypeName","src":"2814:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3681,"mutability":"mutable","name":"owner","nameLocation":"2855:5:16","nodeType":"VariableDeclaration","scope":3704,"src":"2847:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3680,"name":"address","nodeType":"ElementaryTypeName","src":"2847:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3683,"mutability":"mutable","name":"sellerStake","nameLocation":"2878:11:16","nodeType":"VariableDeclaration","scope":3704,"src":"2870:19:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3682,"name":"uint256","nodeType":"ElementaryTypeName","src":"2870:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3685,"mutability":"mutable","name":"buyerStake","nameLocation":"2907:10:16","nodeType":"VariableDeclaration","scope":3704,"src":"2899:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3684,"name":"uint256","nodeType":"ElementaryTypeName","src":"2899:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3687,"mutability":"mutable","name":"totalStake","nameLocation":"2935:10:16","nodeType":"VariableDeclaration","scope":3704,"src":"2927:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3686,"name":"uint256","nodeType":"ElementaryTypeName","src":"2927:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3689,"mutability":"mutable","name":"postCount","nameLocation":"2963:9:16","nodeType":"VariableDeclaration","scope":3704,"src":"2955:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3688,"name":"uint256","nodeType":"ElementaryTypeName","src":"2955:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3691,"mutability":"mutable","name":"paymentRequested","nameLocation":"2990:16:16","nodeType":"VariableDeclaration","scope":3704,"src":"2982:24:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3690,"name":"uint256","nodeType":"ElementaryTypeName","src":"2982:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3693,"mutability":"mutable","name":"stakeRequested","nameLocation":"3024:14:16","nodeType":"VariableDeclaration","scope":3704,"src":"3016:22:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3692,"name":"uint256","nodeType":"ElementaryTypeName","src":"3016:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3696,"mutability":"mutable","name":"status","nameLocation":"3059:6:16","nodeType":"VariableDeclaration","scope":3704,"src":"3048:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$3557","typeString":"enum Structures.PostStatus"},"typeName":{"id":3695,"nodeType":"UserDefinedTypeName","pathNode":{"id":3694,"name":"PostStatus","nameLocations":["3048:10:16"],"nodeType":"IdentifierPath","referencedDeclaration":3557,"src":"3048:10:16"},"referencedDeclaration":3557,"src":"3048:10:16","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$3557","typeString":"enum Structures.PostStatus"}},"visibility":"internal"},{"constant":false,"id":3699,"mutability":"mutable","name":"tokenId","nameLocation":"3082:7:16","nodeType":"VariableDeclaration","scope":3704,"src":"3075:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$3565","typeString":"enum Structures.Tokens"},"typeName":{"id":3698,"nodeType":"UserDefinedTypeName","pathNode":{"id":3697,"name":"Tokens","nameLocations":["3075:6:16"],"nodeType":"IdentifierPath","referencedDeclaration":3565,"src":"3075:6:16"},"referencedDeclaration":3565,"src":"3075:6:16","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$3565","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":3701,"mutability":"mutable","name":"version","nameLocation":"3106:7:16","nodeType":"VariableDeclaration","scope":3704,"src":"3099:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":3700,"name":"string","nodeType":"ElementaryTypeName","src":"3099:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3703,"mutability":"mutable","name":"postId","nameLocation":"3131:6:16","nodeType":"VariableDeclaration","scope":3704,"src":"3123:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3702,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3123:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Feed","nameLocation":"2799:4:16","nodeType":"StructDefinition","scope":3725,"src":"2792:352:16","visibility":"public"},{"canonicalName":"Structures.BayRequest","id":3724,"members":[{"constant":false,"id":3706,"mutability":"mutable","name":"request","nameLocation":"3272:7:16","nodeType":"VariableDeclaration","scope":3724,"src":"3266:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":3705,"name":"bytes","nodeType":"ElementaryTypeName","src":"3266:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3708,"mutability":"mutable","name":"payment","nameLocation":"3297:7:16","nodeType":"VariableDeclaration","scope":3724,"src":"3289:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3707,"name":"uint256","nodeType":"ElementaryTypeName","src":"3289:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3710,"mutability":"mutable","name":"stake","nameLocation":"3322:5:16","nodeType":"VariableDeclaration","scope":3724,"src":"3314:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3709,"name":"uint256","nodeType":"ElementaryTypeName","src":"3314:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3712,"mutability":"mutable","name":"postAddress","nameLocation":"3345:11:16","nodeType":"VariableDeclaration","scope":3724,"src":"3337:19:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3711,"name":"address","nodeType":"ElementaryTypeName","src":"3337:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3714,"mutability":"mutable","name":"accepted","nameLocation":"3371:8:16","nodeType":"VariableDeclaration","scope":3724,"src":"3366:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3713,"name":"bool","nodeType":"ElementaryTypeName","src":"3366:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3716,"mutability":"mutable","name":"postCount","nameLocation":"3397:9:16","nodeType":"VariableDeclaration","scope":3724,"src":"3389:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3715,"name":"uint256","nodeType":"ElementaryTypeName","src":"3389:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3719,"mutability":"mutable","name":"tokenId","nameLocation":"3423:7:16","nodeType":"VariableDeclaration","scope":3724,"src":"3416:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$3565","typeString":"enum Structures.Tokens"},"typeName":{"id":3718,"nodeType":"UserDefinedTypeName","pathNode":{"id":3717,"name":"Tokens","nameLocations":["3416:6:16"],"nodeType":"IdentifierPath","referencedDeclaration":3565,"src":"3416:6:16"},"referencedDeclaration":3565,"src":"3416:6:16","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$3565","typeString":"enum Structures.Tokens"}},"visibility":"internal"},{"constant":false,"id":3721,"mutability":"mutable","name":"buyerAddress","nameLocation":"3448:12:16","nodeType":"VariableDeclaration","scope":3724,"src":"3440:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3720,"name":"address","nodeType":"ElementaryTypeName","src":"3440:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3723,"mutability":"mutable","name":"postId","nameLocation":"3478:6:16","nodeType":"VariableDeclaration","scope":3724,"src":"3470:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3722,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3470:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"BayRequest","nameLocation":"3245:10:16","nodeType":"StructDefinition","scope":3725,"src":"3238:253:16","visibility":"public"}],"scope":3726,"src":"171:3322:16","usedErrors":[]}],"src":"146:3348:16"},"id":16},"contracts/modules/FeedViewer.sol":{"ast":{"absolutePath":"contracts/modules/FeedViewer.sol","exportedSymbols":{"FeedViewer":[3901],"IMecenateFeed":[3463],"Structures":[3725]},"id":3902,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3727,"literals":["solidity","^","0.8",".9"],"nodeType":"PragmaDirective","src":"32:23:17"},{"absolutePath":"contracts/library/Structures.sol","file":"../library/Structures.sol","id":3728,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3902,"sourceUnit":3726,"src":"57:35:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/interfaces/IMecenateFeed.sol","file":"../interfaces/IMecenateFeed.sol","id":3729,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3902,"sourceUnit":3464,"src":"93:41:17","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"FeedViewer","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3901,"linearizedBaseContracts":[3901],"name":"FeedViewer","nameLocation":"145:10:17","nodeType":"ContractDefinition","nodes":[{"body":{"id":3846,"nodeType":"Block","src":"259:711:17","statements":[{"assignments":[3741],"declarations":[{"constant":false,"id":3741,"mutability":"mutable","name":"f","nameLocation":"292:1:17","nodeType":"VariableDeclaration","scope":3846,"src":"269:24:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Feed_$3704_memory_ptr","typeString":"struct Structures.Feed"},"typeName":{"id":3740,"nodeType":"UserDefinedTypeName","pathNode":{"id":3739,"name":"Structures.Feed","nameLocations":["269:10:17","280:4:17"],"nodeType":"IdentifierPath","referencedDeclaration":3704,"src":"269:15:17"},"referencedDeclaration":3704,"src":"269:15:17","typeDescriptions":{"typeIdentifier":"t_struct$_Feed_$3704_storage_ptr","typeString":"struct Structures.Feed"}},"visibility":"internal"}],"id":3742,"nodeType":"VariableDeclarationStatement","src":"269:24:17"},{"assignments":[3745],"declarations":[{"constant":false,"id":3745,"mutability":"mutable","name":"mecenateFeed","nameLocation":"318:12:17","nodeType":"VariableDeclaration","scope":3846,"src":"304:26:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeed_$3463","typeString":"contract IMecenateFeed"},"typeName":{"id":3744,"nodeType":"UserDefinedTypeName","pathNode":{"id":3743,"name":"IMecenateFeed","nameLocations":["304:13:17"],"nodeType":"IdentifierPath","referencedDeclaration":3463,"src":"304:13:17"},"referencedDeclaration":3463,"src":"304:13:17","typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeed_$3463","typeString":"contract IMecenateFeed"}},"visibility":"internal"}],"id":3749,"initialValue":{"arguments":[{"id":3747,"name":"feed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3731,"src":"347:4:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3746,"name":"IMecenateFeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3463,"src":"333:13:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IMecenateFeed_$3463_$","typeString":"type(contract IMecenateFeed)"}},"id":3748,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"333:19:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeed_$3463","typeString":"contract IMecenateFeed"}},"nodeType":"VariableDeclarationStatement","src":"304:48:17"},{"expression":{"id":3754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3750,"name":"f","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3741,"src":"363:1:17","typeDescriptions":{"typeIdentifier":"t_struct$_Feed_$3704_memory_ptr","typeString":"struct Structures.Feed memory"}},"id":3752,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"365:15:17","memberName":"contractAddress","nodeType":"MemberAccess","referencedDeclaration":3679,"src":"363:17:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3753,"name":"feed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3731,"src":"383:4:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"363:24:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3755,"nodeType":"ExpressionStatement","src":"363:24:17"},{"expression":{"id":3762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3756,"name":"f","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3741,"src":"397:1:17","typeDescriptions":{"typeIdentifier":"t_struct$_Feed_$3704_memory_ptr","typeString":"struct Structures.Feed memory"}},"id":3758,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"399:5:17","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":3681,"src":"397:7:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3759,"name":"mecenateFeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3745,"src":"407:12:17","typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeed_$3463","typeString":"contract IMecenateFeed"}},"id":3760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"420:5:17","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":3452,"src":"407:18:17","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":3761,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"407:20:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"397:30:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3763,"nodeType":"ExpressionStatement","src":"397:30:17"},{"expression":{"id":3770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3764,"name":"f","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3741,"src":"437:1:17","typeDescriptions":{"typeIdentifier":"t_struct$_Feed_$3704_memory_ptr","typeString":"struct Structures.Feed memory"}},"id":3766,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"439:11:17","memberName":"sellerStake","nodeType":"MemberAccess","referencedDeclaration":3683,"src":"437:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3767,"name":"mecenateFeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3745,"src":"453:12:17","typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeed_$3463","typeString":"contract IMecenateFeed"}},"id":3768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"466:14:17","memberName":"getSellerStake","nodeType":"MemberAccess","referencedDeclaration":3401,"src":"453:27:17","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":3769,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"453:29:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"437:45:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3771,"nodeType":"ExpressionStatement","src":"437:45:17"},{"expression":{"id":3778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3772,"name":"f","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3741,"src":"492:1:17","typeDescriptions":{"typeIdentifier":"t_struct$_Feed_$3704_memory_ptr","typeString":"struct Structures.Feed memory"}},"id":3774,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"494:10:17","memberName":"buyerStake","nodeType":"MemberAccess","referencedDeclaration":3685,"src":"492:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3775,"name":"mecenateFeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3745,"src":"507:12:17","typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeed_$3463","typeString":"contract IMecenateFeed"}},"id":3776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"520:13:17","memberName":"getBuyerStake","nodeType":"MemberAccess","referencedDeclaration":3406,"src":"507:26:17","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":3777,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"507:28:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"492:43:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3779,"nodeType":"ExpressionStatement","src":"492:43:17"},{"expression":{"id":3786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3780,"name":"f","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3741,"src":"545:1:17","typeDescriptions":{"typeIdentifier":"t_struct$_Feed_$3704_memory_ptr","typeString":"struct Structures.Feed memory"}},"id":3782,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"547:10:17","memberName":"totalStake","nodeType":"MemberAccess","referencedDeclaration":3687,"src":"545:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3783,"name":"mecenateFeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3745,"src":"560:12:17","typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeed_$3463","typeString":"contract IMecenateFeed"}},"id":3784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"573:14:17","memberName":"getTotalStaked","nodeType":"MemberAccess","referencedDeclaration":3379,"src":"560:27:17","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":3785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"560:29:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"545:44:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3787,"nodeType":"ExpressionStatement","src":"545:44:17"},{"expression":{"id":3794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3788,"name":"f","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3741,"src":"599:1:17","typeDescriptions":{"typeIdentifier":"t_struct$_Feed_$3704_memory_ptr","typeString":"struct Structures.Feed memory"}},"id":3790,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"601:9:17","memberName":"postCount","nodeType":"MemberAccess","referencedDeclaration":3689,"src":"599:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3791,"name":"mecenateFeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3745,"src":"613:12:17","typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeed_$3463","typeString":"contract IMecenateFeed"}},"id":3792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"626:9:17","memberName":"postCount","nodeType":"MemberAccess","referencedDeclaration":3384,"src":"613:22:17","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":3793,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"613:24:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"599:38:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3795,"nodeType":"ExpressionStatement","src":"599:38:17"},{"expression":{"id":3802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3796,"name":"f","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3741,"src":"647:1:17","typeDescriptions":{"typeIdentifier":"t_struct$_Feed_$3704_memory_ptr","typeString":"struct Structures.Feed memory"}},"id":3798,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"649:16:17","memberName":"paymentRequested","nodeType":"MemberAccess","referencedDeclaration":3691,"src":"647:18:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3799,"name":"mecenateFeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3745,"src":"668:12:17","typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeed_$3463","typeString":"contract IMecenateFeed"}},"id":3800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"681:19:17","memberName":"getPaymentRequested","nodeType":"MemberAccess","referencedDeclaration":3411,"src":"668:32:17","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":3801,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"668:34:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"647:55:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3803,"nodeType":"ExpressionStatement","src":"647:55:17"},{"expression":{"id":3810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3804,"name":"f","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3741,"src":"712:1:17","typeDescriptions":{"typeIdentifier":"t_struct$_Feed_$3704_memory_ptr","typeString":"struct Structures.Feed memory"}},"id":3806,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"714:14:17","memberName":"stakeRequested","nodeType":"MemberAccess","referencedDeclaration":3693,"src":"712:16:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3807,"name":"mecenateFeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3745,"src":"731:12:17","typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeed_$3463","typeString":"contract IMecenateFeed"}},"id":3808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"744:17:17","memberName":"getStakeRequested","nodeType":"MemberAccess","referencedDeclaration":3416,"src":"731:30:17","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":3809,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"731:32:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"712:51:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3811,"nodeType":"ExpressionStatement","src":"712:51:17"},{"expression":{"id":3818,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3812,"name":"f","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3741,"src":"773:1:17","typeDescriptions":{"typeIdentifier":"t_struct$_Feed_$3704_memory_ptr","typeString":"struct Structures.Feed memory"}},"id":3814,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"775:6:17","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":3696,"src":"773:8:17","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$3557","typeString":"enum Structures.PostStatus"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3815,"name":"mecenateFeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3745,"src":"784:12:17","typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeed_$3463","typeString":"contract IMecenateFeed"}},"id":3816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"797:9:17","memberName":"getStatus","nodeType":"MemberAccess","referencedDeclaration":3422,"src":"784:22:17","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_enum$_PostStatus_$3557_$","typeString":"function () view external returns (enum Structures.PostStatus)"}},"id":3817,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"784:24:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$3557","typeString":"enum Structures.PostStatus"}},"src":"773:35:17","typeDescriptions":{"typeIdentifier":"t_enum$_PostStatus_$3557","typeString":"enum Structures.PostStatus"}},"id":3819,"nodeType":"ExpressionStatement","src":"773:35:17"},{"expression":{"id":3826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3820,"name":"f","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3741,"src":"818:1:17","typeDescriptions":{"typeIdentifier":"t_struct$_Feed_$3704_memory_ptr","typeString":"struct Structures.Feed memory"}},"id":3822,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"820:7:17","memberName":"tokenId","nodeType":"MemberAccess","referencedDeclaration":3699,"src":"818:9:17","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$3565","typeString":"enum Structures.Tokens"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3823,"name":"mecenateFeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3745,"src":"830:12:17","typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeed_$3463","typeString":"contract IMecenateFeed"}},"id":3824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"843:10:17","memberName":"getTokenId","nodeType":"MemberAccess","referencedDeclaration":3428,"src":"830:23:17","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_enum$_Tokens_$3565_$","typeString":"function () view external returns (enum Structures.Tokens)"}},"id":3825,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"830:25:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$3565","typeString":"enum Structures.Tokens"}},"src":"818:37:17","typeDescriptions":{"typeIdentifier":"t_enum$_Tokens_$3565","typeString":"enum Structures.Tokens"}},"id":3827,"nodeType":"ExpressionStatement","src":"818:37:17"},{"expression":{"id":3834,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3828,"name":"f","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3741,"src":"865:1:17","typeDescriptions":{"typeIdentifier":"t_struct$_Feed_$3704_memory_ptr","typeString":"struct Structures.Feed memory"}},"id":3830,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"867:7:17","memberName":"version","nodeType":"MemberAccess","referencedDeclaration":3701,"src":"865:9:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3831,"name":"mecenateFeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3745,"src":"877:12:17","typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeed_$3463","typeString":"contract IMecenateFeed"}},"id":3832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"890:7:17","memberName":"version","nodeType":"MemberAccess","referencedDeclaration":3457,"src":"877:20:17","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view external returns (string memory)"}},"id":3833,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"877:22:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"865:34:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"id":3835,"nodeType":"ExpressionStatement","src":"865:34:17"},{"expression":{"id":3842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3836,"name":"f","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3741,"src":"909:1:17","typeDescriptions":{"typeIdentifier":"t_struct$_Feed_$3704_memory_ptr","typeString":"struct Structures.Feed memory"}},"id":3838,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"911:6:17","memberName":"postId","nodeType":"MemberAccess","referencedDeclaration":3703,"src":"909:8:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3839,"name":"mecenateFeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3745,"src":"920:12:17","typeDescriptions":{"typeIdentifier":"t_contract$_IMecenateFeed_$3463","typeString":"contract IMecenateFeed"}},"id":3840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"933:9:17","memberName":"getPostId","nodeType":"MemberAccess","referencedDeclaration":3433,"src":"920:22:17","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_bytes32_$","typeString":"function () view external returns (bytes32)"}},"id":3841,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"920:24:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"909:35:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3843,"nodeType":"ExpressionStatement","src":"909:35:17"},{"expression":{"id":3844,"name":"f","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3741,"src":"962:1:17","typeDescriptions":{"typeIdentifier":"t_struct$_Feed_$3704_memory_ptr","typeString":"struct Structures.Feed memory"}},"functionReturnParameters":3736,"id":3845,"nodeType":"Return","src":"955:8:17"}]},"id":3847,"implemented":true,"kind":"function","modifiers":[],"name":"_getFeedInfo","nameLocation":"171:12:17","nodeType":"FunctionDefinition","parameters":{"id":3732,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3731,"mutability":"mutable","name":"feed","nameLocation":"201:4:17","nodeType":"VariableDeclaration","scope":3847,"src":"193:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3730,"name":"address","nodeType":"ElementaryTypeName","src":"193:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"183:28:17"},"returnParameters":{"id":3736,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3735,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3847,"src":"235:22:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Feed_$3704_memory_ptr","typeString":"struct Structures.Feed"},"typeName":{"id":3734,"nodeType":"UserDefinedTypeName","pathNode":{"id":3733,"name":"Structures.Feed","nameLocations":["235:10:17","246:4:17"],"nodeType":"IdentifierPath","referencedDeclaration":3704,"src":"235:15:17"},"referencedDeclaration":3704,"src":"235:15:17","typeDescriptions":{"typeIdentifier":"t_struct$_Feed_$3704_storage_ptr","typeString":"struct Structures.Feed"}},"visibility":"internal"}],"src":"234:24:17"},"scope":3901,"src":"162:808:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3899,"nodeType":"Block","src":"1087:227:17","statements":[{"assignments":[3858],"declarations":[{"constant":false,"id":3858,"mutability":"mutable","name":"len","nameLocation":"1105:3:17","nodeType":"VariableDeclaration","scope":3899,"src":"1097:11:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3857,"name":"uint256","nodeType":"ElementaryTypeName","src":"1097:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3861,"initialValue":{"expression":{"id":3859,"name":"_feeds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3850,"src":"1111:6:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1118:6:17","memberName":"length","nodeType":"MemberAccess","src":"1111:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1097:27:17"},{"assignments":[3867],"declarations":[{"constant":false,"id":3867,"mutability":"mutable","name":"f","nameLocation":"1159:1:17","nodeType":"VariableDeclaration","scope":3899,"src":"1134:26:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Feed_$3704_memory_ptr_$dyn_memory_ptr","typeString":"struct Structures.Feed[]"},"typeName":{"baseType":{"id":3865,"nodeType":"UserDefinedTypeName","pathNode":{"id":3864,"name":"Structures.Feed","nameLocations":["1134:10:17","1145:4:17"],"nodeType":"IdentifierPath","referencedDeclaration":3704,"src":"1134:15:17"},"referencedDeclaration":3704,"src":"1134:15:17","typeDescriptions":{"typeIdentifier":"t_struct$_Feed_$3704_storage_ptr","typeString":"struct Structures.Feed"}},"id":3866,"nodeType":"ArrayTypeName","src":"1134:17:17","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Feed_$3704_storage_$dyn_storage_ptr","typeString":"struct Structures.Feed[]"}},"visibility":"internal"}],"id":3874,"initialValue":{"arguments":[{"id":3872,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3858,"src":"1185:3:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3871,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1163:21:17","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_Feed_$3704_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (struct Structures.Feed memory[] memory)"},"typeName":{"baseType":{"id":3869,"nodeType":"UserDefinedTypeName","pathNode":{"id":3868,"name":"Structures.Feed","nameLocations":["1167:10:17","1178:4:17"],"nodeType":"IdentifierPath","referencedDeclaration":3704,"src":"1167:15:17"},"referencedDeclaration":3704,"src":"1167:15:17","typeDescriptions":{"typeIdentifier":"t_struct$_Feed_$3704_storage_ptr","typeString":"struct Structures.Feed"}},"id":3870,"nodeType":"ArrayTypeName","src":"1167:17:17","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Feed_$3704_storage_$dyn_storage_ptr","typeString":"struct Structures.Feed[]"}}},"id":3873,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1163:26:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Feed_$3704_memory_ptr_$dyn_memory_ptr","typeString":"struct Structures.Feed memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"1134:55:17"},{"body":{"id":3895,"nodeType":"Block","src":"1234:55:17","statements":[{"expression":{"id":3893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3885,"name":"f","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3867,"src":"1248:1:17","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Feed_$3704_memory_ptr_$dyn_memory_ptr","typeString":"struct Structures.Feed memory[] memory"}},"id":3887,"indexExpression":{"id":3886,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3876,"src":"1250:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1248:4:17","typeDescriptions":{"typeIdentifier":"t_struct$_Feed_$3704_memory_ptr","typeString":"struct Structures.Feed memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":3889,"name":"_feeds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3850,"src":"1268:6:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3891,"indexExpression":{"id":3890,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3876,"src":"1275:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1268:9:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3888,"name":"_getFeedInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3847,"src":"1255:12:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_struct$_Feed_$3704_memory_ptr_$","typeString":"function (address) view returns (struct Structures.Feed memory)"}},"id":3892,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1255:23:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Feed_$3704_memory_ptr","typeString":"struct Structures.Feed memory"}},"src":"1248:30:17","typeDescriptions":{"typeIdentifier":"t_struct$_Feed_$3704_memory_ptr","typeString":"struct Structures.Feed memory"}},"id":3894,"nodeType":"ExpressionStatement","src":"1248:30:17"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3879,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3876,"src":"1220:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3880,"name":"len","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3858,"src":"1224:3:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1220:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3896,"initializationExpression":{"assignments":[3876],"declarations":[{"constant":false,"id":3876,"mutability":"mutable","name":"i","nameLocation":"1213:1:17","nodeType":"VariableDeclaration","scope":3896,"src":"1205:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3875,"name":"uint256","nodeType":"ElementaryTypeName","src":"1205:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3878,"initialValue":{"hexValue":"30","id":3877,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1217:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"1205:13:17"},"loopExpression":{"expression":{"id":3883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"1229:3:17","subExpression":{"id":3882,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3876,"src":"1229:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3884,"nodeType":"ExpressionStatement","src":"1229:3:17"},"nodeType":"ForStatement","src":"1200:89:17"},{"expression":{"id":3897,"name":"f","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3867,"src":"1306:1:17","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Feed_$3704_memory_ptr_$dyn_memory_ptr","typeString":"struct Structures.Feed memory[] memory"}},"functionReturnParameters":3856,"id":3898,"nodeType":"Return","src":"1299:8:17"}]},"id":3900,"implemented":true,"kind":"function","modifiers":[],"name":"_getFeedsInfo","nameLocation":"985:13:17","nodeType":"FunctionDefinition","parameters":{"id":3851,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3850,"mutability":"mutable","name":"_feeds","nameLocation":"1025:6:17","nodeType":"VariableDeclaration","scope":3900,"src":"1008:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3848,"name":"address","nodeType":"ElementaryTypeName","src":"1008:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3849,"nodeType":"ArrayTypeName","src":"1008:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"998:39:17"},"returnParameters":{"id":3856,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3855,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3900,"src":"1061:24:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Feed_$3704_memory_ptr_$dyn_memory_ptr","typeString":"struct Structures.Feed[]"},"typeName":{"baseType":{"id":3853,"nodeType":"UserDefinedTypeName","pathNode":{"id":3852,"name":"Structures.Feed","nameLocations":["1061:10:17","1072:4:17"],"nodeType":"IdentifierPath","referencedDeclaration":3704,"src":"1061:15:17"},"referencedDeclaration":3704,"src":"1061:15:17","typeDescriptions":{"typeIdentifier":"t_struct$_Feed_$3704_storage_ptr","typeString":"struct Structures.Feed"}},"id":3854,"nodeType":"ArrayTypeName","src":"1061:17:17","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Feed_$3704_storage_$dyn_storage_ptr","typeString":"struct Structures.Feed[]"}},"visibility":"internal"}],"src":"1060:26:17"},"scope":3901,"src":"976:338:17","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":3902,"src":"136:1180:17","usedErrors":[]}],"src":"32:1285:17"},"id":17}},"contracts":{"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"OwnableUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":218,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":221,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":751,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":10,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":130,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol":{"ClonesUpgradeable":{"abi":[],"devdoc":{"details":"https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for deploying minimal proxy contracts, also known as \"clones\". > To simply and cheaply clone contract functionality in an immutable way, this standard specifies > a minimal bytecode implementation that delegates all calls to a known, fixed address. The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2` (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the deterministic method. _Available since v3.4._","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220b6b82420753eda19c300746be28a73863704df589823f2a0e378eb5013cb7d0464736f6c63430008130033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB6 0xB8 0x24 KECCAK256 PUSH22 0x3EDA19C300746BE28A73863704DF589823F2A0E378EB POP SGT 0xCB PUSH30 0x464736F6C63430008130033000000000000000000000000000000000000 ","sourceMap":"755:3286:1:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea2646970667358221220b6b82420753eda19c300746be28a73863704df589823f2a0e378eb5013cb7d0464736f6c63430008130033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB6 0xB8 0x24 KECCAK256 PUSH22 0x3EDA19C300746BE28A73863704DF589823F2A0E378EB POP SGT 0xCB PUSH30 0x464736F6C63430008130033000000000000000000000000000000000000 ","sourceMap":"755:3286:1:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"clone(address)":"infinite","cloneDeterministic(address,bytes32)":"infinite","predictDeterministicAddress(address,bytes32)":"infinite","predictDeterministicAddress(address,bytes32,address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for deploying minimal proxy contracts, also known as \\\"clones\\\". > To simply and cheaply clone contract functionality in an immutable way, this standard specifies > a minimal bytecode implementation that delegates all calls to a known, fixed address. The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2` (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the deterministic method. _Available since v3.4._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\":\"ClonesUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary ClonesUpgradeable {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x3d98edeb5d5be8410fca707b73dabe7544d1dd11e35b73dd907c473fe43cc3ae\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"Initializable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"constructor constructor() {     _disableInitializers(); } ``` ====","details":"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"_initialized":{"custom:oz-retyped-from":"bool","details":"Indicates that the contract has been initialized."},"_initializing":{"details":"Indicates that the contract is in the process of being initialized."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":218,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":221,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"AddressUpgradeable":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220ac4c2d9bbdfaa375c6a2d3a3c81dc2dac613100516b2524b8c31063a0ba0b84464736f6c63430008130033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAC 0x4C 0x2D SWAP12 0xBD STATICCALL LOG3 PUSH22 0xC6A2D3A3C81DC2DAC613100516B2524B8C31063A0BA0 0xB8 PREVRANDAO PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"194:9180:3:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea2646970667358221220ac4c2d9bbdfaa375c6a2d3a3c81dc2dac613100516b2524b8c31063a0ba0b84464736f6c63430008130033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAC 0x4C 0x2D SWAP12 0xBD STATICCALL LOG3 PUSH22 0xC6A2D3A3C81DC2DAC613100516B2524B8C31063A0BA0 0xB8 PREVRANDAO PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"194:9180:3:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ContextUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":218,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":221,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":751,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol":{"StringsUpgradeable":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212202e316c88416135a67627b89589b08a3494ec3ac8226a21fa38fdb42d77d33cec64736f6c63430008130033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2E BALANCE PUSH13 0x88416135A67627B89589B08A34 SWAP5 0xEC GASPRICE 0xC8 0x22 PUSH11 0x21FA38FDB42D77D33CEC64 PUSH20 0x6F6C634300081300330000000000000000000000 ","sourceMap":"242:2603:5:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea26469706673582212202e316c88416135a67627b89589b08a3494ec3ac8226a21fa38fdb42d77d33cec64736f6c63430008130033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2E BALANCE PUSH13 0x88416135A67627B89589B08A34 SWAP5 0xEC GASPRICE 0xC8 0x22 PUSH11 0x21FA38FDB42D77D33CEC64 PUSH20 0x6F6C634300081300330000000000000000000000 ","sourceMap":"242:2603:5:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(int256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":\"StringsUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol":{"MathUpgradeable":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212201be96573c171e8d5a2ad92ca66daa8676076b32b46f03d4966d5c91ff45a4f8864736f6c63430008130033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SHL 0xE9 PUSH6 0x73C171E8D5A2 0xAD SWAP3 0xCA PUSH7 0xDAA8676076B32B CHAINID CREATE RETURNDATASIZE 0x49 PUSH7 0xD5C91FF45A4F88 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"202:12593:6:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea26469706673582212201be96573c171e8d5a2ad92ca66daa8676076b32b46f03d4966d5c91ff45a4f8864736f6c63430008130033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SHL 0xE9 PUSH6 0x73C171E8D5A2 0xAD SWAP3 0xCA PUSH7 0xDAA8676076B32B CHAINID CREATE RETURNDATASIZE 0x49 PUSH7 0xD5C91FF45A4F88 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"202:12593:6:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum MathUpgradeable.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum MathUpgradeable.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum MathUpgradeable.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum MathUpgradeable.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum MathUpgradeable.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":\"MathUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol":{"SignedMathUpgradeable":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea264697066735822122040c3147b31d435b246b2da3aab877938abe841c9877f4850544081094c20c72f64736f6c63430008130033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BLOCKHASH 0xC3 EQ PUSH28 0x31D435B246B2DA3AAB877938ABE841C9877F4850544081094C20C72F PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"215:1058:7:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea264697066735822122040c3147b31d435b246b2da3aab877938abe841c9877f4850544081094c20c72f64736f6c63430008130033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BLOCKHASH 0xC3 EQ PUSH28 0x31D435B246B2DA3AAB877938ABE841C9877F4850544081094C20C72F PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"215:1058:7:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":\"SignedMathUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol":{"EnumerableSetUpgradeable":{"abi":[],"devdoc":{"details":"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ```solidity contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212200593c5db797d1012b972b686c8aa1102721b29461bd4f5f0243ffb32be1400f564736f6c63430008130033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SDIV SWAP4 0xC5 0xDB PUSH26 0x7D1012B972B686C8AA1102721B29461BD4F5F0243FFB32BE1400 CREATE2 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"1329:11641:8:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea26469706673582212200593c5db797d1012b972b686c8aa1102721b29461bd4f5f0243ffb32be1400f564736f6c63430008130033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SDIV SWAP4 0xC5 0xDB PUSH26 0x7D1012B972B686C8AA1102721B29461BD4F5F0243FFB32BE1400 CREATE2 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"1329:11641:8:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"_add(struct EnumerableSetUpgradeable.Set storage pointer,bytes32)":"infinite","_at(struct EnumerableSetUpgradeable.Set storage pointer,uint256)":"infinite","_contains(struct EnumerableSetUpgradeable.Set storage pointer,bytes32)":"infinite","_length(struct EnumerableSetUpgradeable.Set storage pointer)":"infinite","_remove(struct EnumerableSetUpgradeable.Set storage pointer,bytes32)":"infinite","_values(struct EnumerableSetUpgradeable.Set storage pointer)":"infinite","add(struct EnumerableSetUpgradeable.AddressSet storage pointer,address)":"infinite","add(struct EnumerableSetUpgradeable.Bytes32Set storage pointer,bytes32)":"infinite","add(struct EnumerableSetUpgradeable.UintSet storage pointer,uint256)":"infinite","at(struct EnumerableSetUpgradeable.AddressSet storage pointer,uint256)":"infinite","at(struct EnumerableSetUpgradeable.Bytes32Set storage pointer,uint256)":"infinite","at(struct EnumerableSetUpgradeable.UintSet storage pointer,uint256)":"infinite","contains(struct EnumerableSetUpgradeable.AddressSet storage pointer,address)":"infinite","contains(struct EnumerableSetUpgradeable.Bytes32Set storage pointer,bytes32)":"infinite","contains(struct EnumerableSetUpgradeable.UintSet storage pointer,uint256)":"infinite","length(struct EnumerableSetUpgradeable.AddressSet storage pointer)":"infinite","length(struct EnumerableSetUpgradeable.Bytes32Set storage pointer)":"infinite","length(struct EnumerableSetUpgradeable.UintSet storage pointer)":"infinite","remove(struct EnumerableSetUpgradeable.AddressSet storage pointer,address)":"infinite","remove(struct EnumerableSetUpgradeable.Bytes32Set storage pointer,bytes32)":"infinite","remove(struct EnumerableSetUpgradeable.UintSet storage pointer,uint256)":"infinite","values(struct EnumerableSetUpgradeable.AddressSet storage pointer)":"infinite","values(struct EnumerableSetUpgradeable.Bytes32Set storage pointer)":"infinite","values(struct EnumerableSetUpgradeable.UintSet storage pointer)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ```solidity contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":\"EnumerableSetUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x1c65595a26548a1b2263315b08a56334a2d7087319814437559c3c96025e939f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/factories/MecenateFeedFactory.sol":{"MecenateFeedFactory":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"addr","type":"address"}],"name":"FeedCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"},{"indexed":true,"internalType":"uint256","name":"version","type":"uint256"}],"name":"ImplementationUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_proxyCallContract","type":"address"}],"name":"ProxyCallContractUpdated","type":"event"},{"inputs":[{"internalType":"address","name":"_implementation","type":"address"},{"internalType":"uint256","name":"major","type":"uint256"},{"internalType":"uint256","name":"minor","type":"uint256"},{"internalType":"uint256","name":"patch","type":"uint256"}],"name":"adminUpdateImplementation","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_proxyCallContract","type":"address"}],"name":"adminUpdateProxyCallContract","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"buildFeed","outputs":[{"internalType":"address","name":"ctx","type":"address"}],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"burnEnabled","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"treasury","type":"address"},{"internalType":"address","name":"usersModule","type":"address"},{"internalType":"address","name":"newEasContract","type":"address"},{"internalType":"bytes32","name":"newEasSchema","type":"bytes32"},{"internalType":"address","name":"wethTokenAddr","type":"address"},{"internalType":"address","name":"museTokenAddr","type":"address"},{"internalType":"address","name":"daiTokenAddr","type":"address"},{"internalType":"address","name":"routerAddr","type":"address"}],"name":"changeMultipleSettings","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"contractCounter","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"daiToken","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"defaultOperator","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"easContract","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"easSchema","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"getFeedInfo","outputs":[{"components":[{"internalType":"address","name":"contractAddress","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"sellerStake","type":"uint256"},{"internalType":"uint256","name":"buyerStake","type":"uint256"},{"internalType":"uint256","name":"totalStake","type":"uint256"},{"internalType":"uint256","name":"postCount","type":"uint256"},{"internalType":"uint256","name":"paymentRequested","type":"uint256"},{"internalType":"uint256","name":"stakeRequested","type":"uint256"},{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"string","name":"version","type":"string"},{"internalType":"bytes32","name":"postId","type":"bytes32"}],"internalType":"struct Structures.Feed","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getFeeds","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getFeedsInfo","outputs":[{"components":[{"internalType":"address","name":"contractAddress","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"sellerStake","type":"uint256"},{"internalType":"uint256","name":"buyerStake","type":"uint256"},{"internalType":"uint256","name":"totalStake","type":"uint256"},{"internalType":"uint256","name":"postCount","type":"uint256"},{"internalType":"uint256","name":"paymentRequested","type":"uint256"},{"internalType":"uint256","name":"stakeRequested","type":"uint256"},{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"string","name":"version","type":"string"},{"internalType":"bytes32","name":"postId","type":"bytes32"}],"internalType":"struct Structures.Feed[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"getFeedsInfoOwned","outputs":[{"components":[{"internalType":"address","name":"contractAddress","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"sellerStake","type":"uint256"},{"internalType":"uint256","name":"buyerStake","type":"uint256"},{"internalType":"uint256","name":"totalStake","type":"uint256"},{"internalType":"uint256","name":"postCount","type":"uint256"},{"internalType":"uint256","name":"paymentRequested","type":"uint256"},{"internalType":"uint256","name":"stakeRequested","type":"uint256"},{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"string","name":"version","type":"string"},{"internalType":"bytes32","name":"postId","type":"bytes32"}],"internalType":"struct Structures.Feed[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"getFeedsOwned","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getRouterFee","outputs":[{"internalType":"uint24","name":"","type":"uint24"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"implementation","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_proxyCallContract","type":"address"},{"internalType":"address","name":"_usersModuleContract","type":"address"},{"internalType":"address","name":"_treasuryContract","type":"address"},{"internalType":"address","name":"_easContract","type":"address"},{"internalType":"bytes32","name":"_easSchema","type":"bytes32"},{"internalType":"address","name":"_wethToken","type":"address"},{"internalType":"address","name":"_museToken","type":"address"},{"internalType":"address","name":"_daiToken","type":"address"},{"internalType":"address","name":"_router","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"contractAddress","type":"address"}],"name":"isContractCreated","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newFeed","type":"address"}],"name":"isFeed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"major","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"minor","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"museToken","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"patch","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"proxyCallContract","outputs":[{"internalType":"contract IProxyCall","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"router","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bool","name":"newBurnEnabled","type":"bool"}],"name":"setBurnEnabled","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint24","name":"fee","type":"uint24"}],"name":"setRouterFee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"treasuryContract","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"wethToken","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608080604052346100205760ff1960755416607555611cd690816100268239f35b600080fdfe608060408181526004918236101561001657600080fd5b600092833560e01c918263067bd3b4146110d95750816318da0011146110b05781633ec4f23d1461109157816349975235146110725781634b57b0be146110495781635978e9b01461101c5781635c60da1b14610ff35781635dc96d1614610fcf5781636a3f9c3014610f86578163715018a614610f295781637b2c835f14610ef25781637fe955d414610e7857816380ca11fc14610e4f5781638da5cb5b14610e265781639496d7f114610d5f578163a17bb19914610d35578163ad86132414610cbb578163b19bcb5814610b0c578163b2a2e9ca14610a8e578163bb7e364814610a65578163bb834b0e14610a46578163be22f54614610a1d578163ca5b4e5c14610638578163cd77b52c1461060f578163cedf3ba214610327578163d024dda81461036f578163d570a66d1461032c578163e58fdd0414610327578163e86ef35314610297578163f2fde38b1461020157508063f77800e5146101d9578063f86d0b38146101bb5763f887ea401461019057600080fd5b346101b757816003193601126101b75760715490516001600160a01b039091168152602090f35b5080fd5b50346101b757816003193601126101b7576020906077549051908152f35b50346101b757816003193601126101b757606e5490516001600160a01b039091168152602090f35b9050346102935760203660031901126102935761021c611139565b91610225611353565b6001600160a01b03831615610241578361023e846113ab565b80f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b5050346101b757816003193601126101b75780518092606854808352602080930192606883527fa2153420d844928b4421650203c77babc8b33d7f2e7b450e2966db0c2209775392905b8282106103105761030c86610301896102fc818a038261147e565b611c04565b9051918291826112b5565b0390f35b8354855293840193600193840193909101906102e1565b611317565b5050346101b75760203660031901126101b75761030c9061035c61034e611139565b61035661160b565b50611730565b90519182916020835260208301906111e0565b905034610293576101203660031901126102935761038b611139565b61039361114f565b9061039c611165565b6001600160a01b0391906064358381169081900361060a576103bc61117b565b6103c4611191565b906103cd6111a7565b92610104359487861680960361060a578b549960ff8b60081c16159a8b809c6105fd575b80156105e6575b1561058c5760ff8e61043f928e60018419831617835561057b575b5061042c82825460081c16610427816113f4565b6113f4565b610435336113ab565b5460081c166113f4565b610448336113ab565b610450611353565b331561052957508794939192859384809361046a336113ab565b6104738b611678565b816001600160601b0360a01b9d168d606b541617606b55168b606a541617606a558a606c541617606c55608435606d55168860705416176070551686606e541617606e551684606f541617606f558360715416176071551681606554161760655533906067541617606755600260775582607855826079556104f3575080f35b60207f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989161ff001984541684555160018152a180f35b60849060208d519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b61ffff191661010117815538610413565b8c5162461bcd60e51b8152602081840152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156103f85750600160ff8216146103f8565b50600160ff8216106103f1565b600080fd5b5050346101b757816003193601126101b757606c5490516001600160a01b039091168152602090f35b8383816003193601126101b75780516bffffffffffffffffffffffff193360601b16602080830191825242603480850191909152835294601f19939290919061068260548261147e565b5190206066549360018201809211610a0a5783513360601b6bffffffffffffffffffffffff191688820190815260148101939093526e5af43d82803e903d91602b57fd5bf392916106de9082603485010390810183528261147e565b519020608885901c62ffffff16763d602d80600a3d3981f3363d3d373d3d3d363d7300000017865260789490941b6effffffffffffffffffffffffffffff19161785526001600160a01b039283906037600987f5169283156109c85780606b541660775460785491607954873b156109c45786516339466de560e11b8152338782019081523060208201526001600160a01b0390931660408401526060830193909352608082019390935260a08101929092529086908290819060c001038183895af18015610930579086916109ac575b505060248682606b541685519283809263122643f360e21b825233888301525afa908115610930578691610972575b501561093a57606a541682516391792d5b60e01b815286818481855afa908115610930578691610903575b5034106108d057848080809334905af13d156108cb573d610829816114c3565b906108368551928361147e565b815285873d92013e5b1561089c57507fb658664a46408e6670a38ec7ea8b7614c9e2916184dff2fad99d3a7a3491ca7d82916108736076546114df565b60765561087f836114ee565b503385526074865261089383828720611586565b50519380a28152f35b84606492519162461bcd60e51b8352820152600b60248201526a10d0531317d1905253115160aa1b6044820152fd5b61083f565b5084606492519162461bcd60e51b8352820152600e60248201526d4e4f545f454e4f5547485f46454560901b6044820152fd5b90508681813d8311610929575b61091a818361147e565b8101031261060a575187610809565b503d610910565b84513d88823e3d90fd5b5084606492519162461bcd60e51b835282015260136024820152721d5cd95c88191bd95cc81b9bdd08195e1a5cdd606a1b6044820152fd5b90508681813d83116109a5575b610989818361147e565b810103126109a1575180151581036109a157876107de565b8580fd5b503d61097f565b6109b590611454565b6109c05784876107af565b8480fd5b8880fd5b5084606492519162461bcd60e51b8352820152601760248201527f455243313136373a2063726561746532206661696c65640000000000000000006044820152fd5b634e487b7160e01b865260118352602486fd5b5050346101b757816003193601126101b757606f5490516001600160a01b039091168152602090f35b5050346101b757816003193601126101b7576020906078549051908152f35b5050346101b757816003193601126101b75760655490516001600160a01b039091168152602090f35b5050346101b75760209081600319360112610293576001600160a01b03610ab3611139565b168352607482528083209281518093808654928381520195835280832092905b828210610af55761030c8686610aeb828b038361147e565b51918291826110f5565b835487529586019560019384019390910190610ad3565b8383346101b75760803660031901126101b757610b27611139565b906024356044359060643592610b3b611353565b843b15610c6a5760018060a01b0380951694856001600160601b0360a01b6066541617606655826077558360785584607955606b5416853b15610c665781516339466de560e11b815233818a019081523060208201526001600160a01b039092166040830152606082018490526080820185905260a08201869052919087908390819060c0010381838a5af1908115610c5d5750610c4a575b5061271090818102918183041490151715610c3757606482029180830460641490151715610c3757610c0f9291610c0a916114a0565b6114a0565b907f5678af47993f4856157dd819bee3183b87c10ee1b3575a5128fe25896c073a288380a380f35b634e487b7160e01b855260118652602485fd5b610c5690959195611454565b9386610bd4565b513d88823e3d90fd5b8680fd5b5162461bcd60e51b8152602081880152602660248201527f6e616c693a20696d706c656d656e746174696f6e206973206e6f74206120636f6044820152651b9d1c9858dd60d21b6064820152608490fd5b5050346101b75760209182600319360112610d32576001600160a01b03610ce0611139565b168152607483528181209082518094808454928381520193835280832092905b828210610d1b5761030c86610301896102fc818a038261147e565b835485529384019360019384019390910190610d00565b80fd5b8334610d32576020366003190112610d325761023e610d52611139565b610d5a611353565b611678565b8334610d3257610100366003190112610d3257610d7a611139565b610d8261114f565b610d8a611165565b6001600160a01b03919060843583811691908290036109a157838092610dae61117b565b9082610db8611191565b9481610dc26111a7565b98610dcb611353565b816001600160601b0360a01b9c168c606a541617606a55168a606b541617606b551688606c541617606c55606435606d558760705416176070551685606e541617606e551683606f541617606f551690607154161760715580f35b5050346101b757816003193601126101b75760335490516001600160a01b039091168152602090f35b5050346101b757816003193601126101b75760675490516001600160a01b039091168152602090f35b828434610d325780600319360112610d32578151918291606854808552602080950194606883527fa2153420d844928b4421650203c77babc8b33d7f2e7b450e2966db0c2209775392905b828210610edb5761030c8686610aeb828b038361147e565b835487529586019560019384019390910190610ec3565b8390346101b75760203660031901126101b757358015158091036101b757610f18611353565b60ff80196075541691161760755580f35b8334610d325780600319360112610d3257610f42611353565b603380546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b919050346102935780600319360112610293576024359162ffffff8316809303610fcb57610fb2611353565b358352607360205282209062ffffff1982541617905580f35b8380fd5b5050346101b757816003193601126101b75760209060ff6075541690519015158152f35b5050346101b757816003193601126101b75760665490516001600160a01b039091168152602090f35b905034610293576020366003190112610293578160209362ffffff92358152607385522054169051908152f35b5050346101b757816003193601126101b75760705490516001600160a01b039091168152602090f35b5050346101b757816003193601126101b7576020906079549051908152f35b5050346101b757816003193601126101b757602090606d549051908152f35b5050346101b757816003193601126101b757606a5490516001600160a01b039091168152602090f35b8490346101b757816003193601126101b7576020906076548152f35b6020908160408183019282815285518094520193019160005b82811061111c575050505090565b83516001600160a01b03168552938101939281019260010161110e565b600435906001600160a01b038216820361060a57565b602435906001600160a01b038216820361060a57565b604435906001600160a01b038216820361060a57565b60a435906001600160a01b038216820361060a57565b60c435906001600160a01b038216820361060a57565b60e435906001600160a01b038216820361060a57565b60005b8381106111d05750506000910152565b81810151838201526020016111c0565b9060018060a01b03808351168252602083015116602082015260408201516040820152606082015160608201526080820151608082015260a082015160a082015260c082015160c082015260e082015160e08201526101008083015190600882101561129f578201526101208083015190600382101561129f578201526101408083015192610180809284015283518092840152611288826101a095602087870191016111bd565b6101609081015190830152601f01601f1916010190565b634e487b7160e01b600052602160045260246000fd5b602080820190808352835180925260408301928160408460051b8301019501936000915b8483106112e95750505050505090565b9091929394958480611307600193603f198682030187528a516111e0565b98019301930191949392906112d9565b3461060a57602036600319011261060a576001600160a01b03611338611139565b16600052606960205260206040600020541515604051908152f35b6033546001600160a01b0316330361136757565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b603380546001600160a01b039283166001600160a01b0319821681179092559091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b156113fb57565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b67ffffffffffffffff811161146857604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761146857604052565b919082018092116114ad57565b634e487b7160e01b600052601160045260246000fd5b67ffffffffffffffff811161146857601f01601f191660200190565b60001981146114ad5760010190565b60008181526069602052604081205461158157606854600160401b81101561156d5760018101806068558110156115595790826040927fa2153420d844928b4421650203c77babc8b33d7f2e7b450e2966db0c22097753015560685492815260696020522055600190565b634e487b7160e01b82526032600452602482fd5b634e487b7160e01b82526041600452602482fd5b905090565b9190600183016000908282528060205260408220541560001461160557845494600160401b8610156115f157600186018082558610156115dd57836040949596828552602085200155549382526020522055600190565b634e487b7160e01b83526032600452602483fd5b634e487b7160e01b83526041600452602483fd5b50925050565b60405190610180820182811067ffffffffffffffff82111761146857604052816101606000918281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e0820152826101008201528261012082015260606101408201520152565b803b156116c557606580546001600160a01b0319166001600160a01b039290921691821790557f7213e3d637e4ef4968f947d5f602103307355f708bfd5bfce9d87da7c78f8521600080a2565b60405162461bcd60e51b815260206004820152603a60248201527f464e44436f6c6c656374696f6e466163746f72793a2050726f78792063616c6c60448201527f2061646472657373206973206e6f74206120636f6e74726163740000000000006064820152608490fd5b61173861160b565b5061174161160b565b6001600160a01b0391821680825260408051638da5cb5b60e01b81529293600493919260209290919083818781865afa908115611bb757600091611b81575b5016858301528251635c63ed6960e01b815282818681855afa9081156119e757600091611b54575b50858401528251634c38d87760e01b815282818681855afa9081156119e757600091611b27575b506060860152825163048bf3bb60e11b815282818681855afa9081156119e757600091611afa575b5060808601528251630bc8361760e11b815282818681855afa9081156119e757600091611acd575b5060a0860152825163d24e0c8760e01b815282818681855afa9081156119e757600091611aa0575b5060c0860152825163faeb5e1760e01b815282818681855afa9081156119e757600091611a73575b5060e086015282516302734eab60e51b815282818681855afa9081156119e757600091611a3d575b5060088110156119f257610100860152825163010a38f560e01b815282818681855afa9081156119e757600091611a07575b5060038110156119f257610120860152825163054fd4d560e41b81526000818681855afa9081156119e7579083929160009161196b575b5061014087015283516332946a8760e01b815294859182905afa9182156119615750600091611935575b506101608301525090565b82813d831161195a575b611949818361147e565b81010312610d32575051803861192a565b503d61193f565b513d6000823e3d90fd5b9192503d8082843e61197d818461147e565b82019184818403126101b75780519067ffffffffffffffff8211610293570182601f820112156101b7578051916119b3836114c3565b936119c08851958661147e565b838552868484010111610d32575082916119e19186808097960191016111bd565b38611900565b84513d6000823e3d90fd5b602185634e487b7160e01b6000525260246000fd5b8381813d8311611a36575b611a1c818361147e565b810103126101b75751906003821015610d325750386118c9565b503d611a12565b8381813d8311611a6c575b611a52818361147e565b810103126101b75751906008821015610d32575038611897565b503d611a48565b908382813d8311611a99575b611a89818361147e565b81010312610d325750513861186f565b503d611a7f565b908382813d8311611ac6575b611ab6818361147e565b81010312610d3257505138611847565b503d611aac565b908382813d8311611af3575b611ae3818361147e565b81010312610d325750513861181f565b503d611ad9565b908382813d8311611b20575b611b10818361147e565b81010312610d32575051386117f7565b503d611b06565b908382813d8311611b4d575b611b3d818361147e565b81010312610d32575051386117cf565b503d611b33565b908382813d8311611b7a575b611b6a818361147e565b81010312610d32575051386117a8565b503d611b60565b8481813d8311611bb0575b611b96818361147e565b810103126101b75751908282168203610d32575038611780565b503d611b8c565b85513d6000823e3d90fd5b67ffffffffffffffff81116114685760051b60200190565b8051821015611bee5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b8051611c0f81611bc2565b91611c1d604051938461147e565b818352601f19611c2c83611bc2565b0160005b818110611c8957505060005b828110611c495750505090565b611c8490611c696001600160a01b03611c628386611bda565b5116611730565b611c738287611bda565b52611c7e8186611bda565b506114df565b611c3c565b602090611c9461160b565b82828801015201611c3056fea26469706673582212201550a7d1c3183f82d266fea7c3ca83126c5ee7f08f120aecb1e8cf8d492f2a2a64736f6c63430008130033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x20 JUMPI PUSH1 0xFF NOT PUSH1 0x75 SLOAD AND PUSH1 0x75 SSTORE PUSH2 0x1CD6 SWAP1 DUP2 PUSH2 0x26 DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH1 0x4 SWAP2 DUP3 CALLDATASIZE LT ISZERO PUSH2 0x16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 DUP4 CALLDATALOAD PUSH1 0xE0 SHR SWAP2 DUP3 PUSH4 0x67BD3B4 EQ PUSH2 0x10D9 JUMPI POP DUP2 PUSH4 0x18DA0011 EQ PUSH2 0x10B0 JUMPI DUP2 PUSH4 0x3EC4F23D EQ PUSH2 0x1091 JUMPI DUP2 PUSH4 0x49975235 EQ PUSH2 0x1072 JUMPI DUP2 PUSH4 0x4B57B0BE EQ PUSH2 0x1049 JUMPI DUP2 PUSH4 0x5978E9B0 EQ PUSH2 0x101C JUMPI DUP2 PUSH4 0x5C60DA1B EQ PUSH2 0xFF3 JUMPI DUP2 PUSH4 0x5DC96D16 EQ PUSH2 0xFCF JUMPI DUP2 PUSH4 0x6A3F9C30 EQ PUSH2 0xF86 JUMPI DUP2 PUSH4 0x715018A6 EQ PUSH2 0xF29 JUMPI DUP2 PUSH4 0x7B2C835F EQ PUSH2 0xEF2 JUMPI DUP2 PUSH4 0x7FE955D4 EQ PUSH2 0xE78 JUMPI DUP2 PUSH4 0x80CA11FC EQ PUSH2 0xE4F JUMPI DUP2 PUSH4 0x8DA5CB5B EQ PUSH2 0xE26 JUMPI DUP2 PUSH4 0x9496D7F1 EQ PUSH2 0xD5F JUMPI DUP2 PUSH4 0xA17BB199 EQ PUSH2 0xD35 JUMPI DUP2 PUSH4 0xAD861324 EQ PUSH2 0xCBB JUMPI DUP2 PUSH4 0xB19BCB58 EQ PUSH2 0xB0C JUMPI DUP2 PUSH4 0xB2A2E9CA EQ PUSH2 0xA8E JUMPI DUP2 PUSH4 0xBB7E3648 EQ PUSH2 0xA65 JUMPI DUP2 PUSH4 0xBB834B0E EQ PUSH2 0xA46 JUMPI DUP2 PUSH4 0xBE22F546 EQ PUSH2 0xA1D JUMPI DUP2 PUSH4 0xCA5B4E5C EQ PUSH2 0x638 JUMPI DUP2 PUSH4 0xCD77B52C EQ PUSH2 0x60F JUMPI DUP2 PUSH4 0xCEDF3BA2 EQ PUSH2 0x327 JUMPI DUP2 PUSH4 0xD024DDA8 EQ PUSH2 0x36F JUMPI DUP2 PUSH4 0xD570A66D EQ PUSH2 0x32C JUMPI DUP2 PUSH4 0xE58FDD04 EQ PUSH2 0x327 JUMPI DUP2 PUSH4 0xE86EF353 EQ PUSH2 0x297 JUMPI DUP2 PUSH4 0xF2FDE38B EQ PUSH2 0x201 JUMPI POP DUP1 PUSH4 0xF77800E5 EQ PUSH2 0x1D9 JUMPI DUP1 PUSH4 0xF86D0B38 EQ PUSH2 0x1BB JUMPI PUSH4 0xF887EA40 EQ PUSH2 0x190 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1B7 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1B7 JUMPI PUSH1 0x71 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x1B7 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1B7 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x77 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1B7 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1B7 JUMPI PUSH1 0x6E SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST SWAP1 POP CALLVALUE PUSH2 0x293 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x293 JUMPI PUSH2 0x21C PUSH2 0x1139 JUMP JUMPDEST SWAP2 PUSH2 0x225 PUSH2 0x1353 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO PUSH2 0x241 JUMPI DUP4 PUSH2 0x23E DUP5 PUSH2 0x13AB JUMP JUMPDEST DUP1 RETURN JUMPDEST SWAP1 PUSH1 0x20 PUSH1 0x84 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x1B7 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1B7 JUMPI DUP1 MLOAD DUP1 SWAP3 PUSH1 0x68 SLOAD DUP1 DUP4 MSTORE PUSH1 0x20 DUP1 SWAP4 ADD SWAP3 PUSH1 0x68 DUP4 MSTORE PUSH32 0xA2153420D844928B4421650203C77BABC8B33D7F2E7B450E2966DB0C22097753 SWAP3 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x310 JUMPI PUSH2 0x30C DUP7 PUSH2 0x301 DUP10 PUSH2 0x2FC DUP2 DUP11 SUB DUP3 PUSH2 0x147E JUMP JUMPDEST PUSH2 0x1C04 JUMP JUMPDEST SWAP1 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x12B5 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST DUP4 SLOAD DUP6 MSTORE SWAP4 DUP5 ADD SWAP4 PUSH1 0x1 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x2E1 JUMP JUMPDEST PUSH2 0x1317 JUMP JUMPDEST POP POP CALLVALUE PUSH2 0x1B7 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1B7 JUMPI PUSH2 0x30C SWAP1 PUSH2 0x35C PUSH2 0x34E PUSH2 0x1139 JUMP JUMPDEST PUSH2 0x356 PUSH2 0x160B JUMP JUMPDEST POP PUSH2 0x1730 JUMP JUMPDEST SWAP1 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x11E0 JUMP JUMPDEST SWAP1 POP CALLVALUE PUSH2 0x293 JUMPI PUSH2 0x120 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x293 JUMPI PUSH2 0x38B PUSH2 0x1139 JUMP JUMPDEST PUSH2 0x393 PUSH2 0x114F JUMP JUMPDEST SWAP1 PUSH2 0x39C PUSH2 0x1165 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 PUSH1 0x64 CALLDATALOAD DUP4 DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x60A JUMPI PUSH2 0x3BC PUSH2 0x117B JUMP JUMPDEST PUSH2 0x3C4 PUSH2 0x1191 JUMP JUMPDEST SWAP1 PUSH2 0x3CD PUSH2 0x11A7 JUMP JUMPDEST SWAP3 PUSH2 0x104 CALLDATALOAD SWAP5 DUP8 DUP7 AND DUP1 SWAP7 SUB PUSH2 0x60A JUMPI DUP12 SLOAD SWAP10 PUSH1 0xFF DUP12 PUSH1 0x8 SHR AND ISZERO SWAP11 DUP12 DUP1 SWAP13 PUSH2 0x5FD JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x5E6 JUMPI JUMPDEST ISZERO PUSH2 0x58C JUMPI PUSH1 0xFF DUP15 PUSH2 0x43F SWAP3 DUP15 PUSH1 0x1 DUP5 NOT DUP4 AND OR DUP4 SSTORE PUSH2 0x57B JUMPI JUMPDEST POP PUSH2 0x42C DUP3 DUP3 SLOAD PUSH1 0x8 SHR AND PUSH2 0x427 DUP2 PUSH2 0x13F4 JUMP JUMPDEST PUSH2 0x13F4 JUMP JUMPDEST PUSH2 0x435 CALLER PUSH2 0x13AB JUMP JUMPDEST SLOAD PUSH1 0x8 SHR AND PUSH2 0x13F4 JUMP JUMPDEST PUSH2 0x448 CALLER PUSH2 0x13AB JUMP JUMPDEST PUSH2 0x450 PUSH2 0x1353 JUMP JUMPDEST CALLER ISZERO PUSH2 0x529 JUMPI POP DUP8 SWAP5 SWAP4 SWAP2 SWAP3 DUP6 SWAP4 DUP5 DUP1 SWAP4 PUSH2 0x46A CALLER PUSH2 0x13AB JUMP JUMPDEST PUSH2 0x473 DUP12 PUSH2 0x1678 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL SWAP14 AND DUP14 PUSH1 0x6B SLOAD AND OR PUSH1 0x6B SSTORE AND DUP12 PUSH1 0x6A SLOAD AND OR PUSH1 0x6A SSTORE DUP11 PUSH1 0x6C SLOAD AND OR PUSH1 0x6C SSTORE PUSH1 0x84 CALLDATALOAD PUSH1 0x6D SSTORE AND DUP9 PUSH1 0x70 SLOAD AND OR PUSH1 0x70 SSTORE AND DUP7 PUSH1 0x6E SLOAD AND OR PUSH1 0x6E SSTORE AND DUP5 PUSH1 0x6F SLOAD AND OR PUSH1 0x6F SSTORE DUP4 PUSH1 0x71 SLOAD AND OR PUSH1 0x71 SSTORE AND DUP2 PUSH1 0x65 SLOAD AND OR PUSH1 0x65 SSTORE CALLER SWAP1 PUSH1 0x67 SLOAD AND OR PUSH1 0x67 SSTORE PUSH1 0x2 PUSH1 0x77 SSTORE DUP3 PUSH1 0x78 SSTORE DUP3 PUSH1 0x79 SSTORE PUSH2 0x4F3 JUMPI POP DUP1 RETURN JUMPDEST PUSH1 0x20 PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP2 PUSH2 0xFF00 NOT DUP5 SLOAD AND DUP5 SSTORE MLOAD PUSH1 0x1 DUP2 MSTORE LOG1 DUP1 RETURN JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x20 DUP14 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH2 0xFFFF NOT AND PUSH2 0x101 OR DUP2 SSTORE CODESIZE PUSH2 0x413 JUMP JUMPDEST DUP13 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 DUP2 DUP5 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3F8 JUMPI POP PUSH1 0x1 PUSH1 0xFF DUP3 AND EQ PUSH2 0x3F8 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xFF DUP3 AND LT PUSH2 0x3F1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x1B7 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1B7 JUMPI PUSH1 0x6C SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP4 DUP4 DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1B7 JUMPI DUP1 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT CALLER PUSH1 0x60 SHL AND PUSH1 0x20 DUP1 DUP4 ADD SWAP2 DUP3 MSTORE TIMESTAMP PUSH1 0x34 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 MSTORE SWAP5 PUSH1 0x1F NOT SWAP4 SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0x682 PUSH1 0x54 DUP3 PUSH2 0x147E JUMP JUMPDEST MLOAD SWAP1 KECCAK256 PUSH1 0x66 SLOAD SWAP4 PUSH1 0x1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0xA0A JUMPI DUP4 MLOAD CALLER PUSH1 0x60 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP9 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x14 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH15 0x5AF43D82803E903D91602B57FD5BF3 SWAP3 SWAP2 PUSH2 0x6DE SWAP1 DUP3 PUSH1 0x34 DUP6 ADD SUB SWAP1 DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x147E JUMP JUMPDEST MLOAD SWAP1 KECCAK256 PUSH1 0x88 DUP6 SWAP1 SHR PUSH3 0xFFFFFF AND PUSH23 0x3D602D80600A3D3981F3363D3D373D3D3D363D73000000 OR DUP7 MSTORE PUSH1 0x78 SWAP5 SWAP1 SWAP5 SHL PUSH15 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND OR DUP6 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 SWAP1 PUSH1 0x37 PUSH1 0x9 DUP8 CREATE2 AND SWAP3 DUP4 ISZERO PUSH2 0x9C8 JUMPI DUP1 PUSH1 0x6B SLOAD AND PUSH1 0x77 SLOAD PUSH1 0x78 SLOAD SWAP2 PUSH1 0x79 SLOAD DUP8 EXTCODESIZE ISZERO PUSH2 0x9C4 JUMPI DUP7 MLOAD PUSH4 0x39466DE5 PUSH1 0xE1 SHL DUP2 MSTORE CALLER DUP8 DUP3 ADD SWAP1 DUP2 MSTORE ADDRESS PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x80 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0xA0 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP7 SWAP1 DUP3 SWAP1 DUP2 SWAP1 PUSH1 0xC0 ADD SUB DUP2 DUP4 DUP10 GAS CALL DUP1 ISZERO PUSH2 0x930 JUMPI SWAP1 DUP7 SWAP2 PUSH2 0x9AC JUMPI JUMPDEST POP POP PUSH1 0x24 DUP7 DUP3 PUSH1 0x6B SLOAD AND DUP6 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH4 0x122643F3 PUSH1 0xE2 SHL DUP3 MSTORE CALLER DUP9 DUP4 ADD MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x930 JUMPI DUP7 SWAP2 PUSH2 0x972 JUMPI JUMPDEST POP ISZERO PUSH2 0x93A JUMPI PUSH1 0x6A SLOAD AND DUP3 MLOAD PUSH4 0x91792D5B PUSH1 0xE0 SHL DUP2 MSTORE DUP7 DUP2 DUP5 DUP2 DUP6 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x930 JUMPI DUP7 SWAP2 PUSH2 0x903 JUMPI JUMPDEST POP CALLVALUE LT PUSH2 0x8D0 JUMPI DUP5 DUP1 DUP1 DUP1 SWAP4 CALLVALUE SWAP1 GAS CALL RETURNDATASIZE ISZERO PUSH2 0x8CB JUMPI RETURNDATASIZE PUSH2 0x829 DUP2 PUSH2 0x14C3 JUMP JUMPDEST SWAP1 PUSH2 0x836 DUP6 MLOAD SWAP3 DUP4 PUSH2 0x147E JUMP JUMPDEST DUP2 MSTORE DUP6 DUP8 RETURNDATASIZE SWAP3 ADD RETURNDATACOPY JUMPDEST ISZERO PUSH2 0x89C JUMPI POP PUSH32 0xB658664A46408E6670A38EC7EA8B7614C9E2916184DFF2FAD99D3A7A3491CA7D DUP3 SWAP2 PUSH2 0x873 PUSH1 0x76 SLOAD PUSH2 0x14DF JUMP JUMPDEST PUSH1 0x76 SSTORE PUSH2 0x87F DUP4 PUSH2 0x14EE JUMP JUMPDEST POP CALLER DUP6 MSTORE PUSH1 0x74 DUP7 MSTORE PUSH2 0x893 DUP4 DUP3 DUP8 KECCAK256 PUSH2 0x1586 JUMP JUMPDEST POP MLOAD SWAP4 DUP1 LOG2 DUP2 MSTORE RETURN JUMPDEST DUP5 PUSH1 0x64 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x10D0531317D19052531151 PUSH1 0xAA SHL PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH2 0x83F JUMP JUMPDEST POP DUP5 PUSH1 0x64 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x4E4F545F454E4F5547485F464545 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 POP DUP7 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x929 JUMPI JUMPDEST PUSH2 0x91A DUP2 DUP4 PUSH2 0x147E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x60A JUMPI MLOAD DUP8 PUSH2 0x809 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x910 JUMP JUMPDEST DUP5 MLOAD RETURNDATASIZE DUP9 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP DUP5 PUSH1 0x64 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x1D5CD95C88191BD95CC81B9BDD08195E1A5CDD PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 POP DUP7 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x9A5 JUMPI JUMPDEST PUSH2 0x989 DUP2 DUP4 PUSH2 0x147E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x9A1 JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x9A1 JUMPI DUP8 PUSH2 0x7DE JUMP JUMPDEST DUP6 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x97F JUMP JUMPDEST PUSH2 0x9B5 SWAP1 PUSH2 0x1454 JUMP JUMPDEST PUSH2 0x9C0 JUMPI DUP5 DUP8 PUSH2 0x7AF JUMP JUMPDEST DUP5 DUP1 REVERT JUMPDEST DUP9 DUP1 REVERT JUMPDEST POP DUP5 PUSH1 0x64 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313136373A2063726561746532206661696C6564000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x11 DUP4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x1B7 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1B7 JUMPI PUSH1 0x6F SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x1B7 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1B7 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x78 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x1B7 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1B7 JUMPI PUSH1 0x65 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x1B7 JUMPI PUSH1 0x20 SWAP1 DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x293 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xAB3 PUSH2 0x1139 JUMP JUMPDEST AND DUP4 MSTORE PUSH1 0x74 DUP3 MSTORE DUP1 DUP4 KECCAK256 SWAP3 DUP2 MLOAD DUP1 SWAP4 DUP1 DUP7 SLOAD SWAP3 DUP4 DUP2 MSTORE ADD SWAP6 DUP4 MSTORE DUP1 DUP4 KECCAK256 SWAP3 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0xAF5 JUMPI PUSH2 0x30C DUP7 DUP7 PUSH2 0xAEB DUP3 DUP12 SUB DUP4 PUSH2 0x147E JUMP JUMPDEST MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x10F5 JUMP JUMPDEST DUP4 SLOAD DUP8 MSTORE SWAP6 DUP7 ADD SWAP6 PUSH1 0x1 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP2 ADD SWAP1 PUSH2 0xAD3 JUMP JUMPDEST DUP4 DUP4 CALLVALUE PUSH2 0x1B7 JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1B7 JUMPI PUSH2 0xB27 PUSH2 0x1139 JUMP JUMPDEST SWAP1 PUSH1 0x24 CALLDATALOAD PUSH1 0x44 CALLDATALOAD SWAP1 PUSH1 0x64 CALLDATALOAD SWAP3 PUSH2 0xB3B PUSH2 0x1353 JUMP JUMPDEST DUP5 EXTCODESIZE ISZERO PUSH2 0xC6A JUMPI PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP6 AND SWAP5 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0x66 SLOAD AND OR PUSH1 0x66 SSTORE DUP3 PUSH1 0x77 SSTORE DUP4 PUSH1 0x78 SSTORE DUP5 PUSH1 0x79 SSTORE PUSH1 0x6B SLOAD AND DUP6 EXTCODESIZE ISZERO PUSH2 0xC66 JUMPI DUP2 MLOAD PUSH4 0x39466DE5 PUSH1 0xE1 SHL DUP2 MSTORE CALLER DUP2 DUP11 ADD SWAP1 DUP2 MSTORE ADDRESS PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD DUP6 SWAP1 MSTORE PUSH1 0xA0 DUP3 ADD DUP7 SWAP1 MSTORE SWAP2 SWAP1 DUP8 SWAP1 DUP4 SWAP1 DUP2 SWAP1 PUSH1 0xC0 ADD SUB DUP2 DUP4 DUP11 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0xC5D JUMPI POP PUSH2 0xC4A JUMPI JUMPDEST POP PUSH2 0x2710 SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0xC37 JUMPI PUSH1 0x64 DUP3 MUL SWAP2 DUP1 DUP4 DIV PUSH1 0x64 EQ SWAP1 ISZERO OR ISZERO PUSH2 0xC37 JUMPI PUSH2 0xC0F SWAP3 SWAP2 PUSH2 0xC0A SWAP2 PUSH2 0x14A0 JUMP JUMPDEST PUSH2 0x14A0 JUMP JUMPDEST SWAP1 PUSH32 0x5678AF47993F4856157DD819BEE3183B87C10EE1B3575A5128FE25896C073A28 DUP4 DUP1 LOG3 DUP1 RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x11 DUP7 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST PUSH2 0xC56 SWAP1 SWAP6 SWAP2 SWAP6 PUSH2 0x1454 JUMP JUMPDEST SWAP4 DUP7 PUSH2 0xBD4 JUMP JUMPDEST MLOAD RETURNDATASIZE DUP9 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP7 DUP1 REVERT JUMPDEST MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 DUP2 DUP9 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6E616C693A20696D706C656D656E746174696F6E206973206E6F74206120636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x1B7 JUMPI PUSH1 0x20 SWAP2 DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xD32 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xCE0 PUSH2 0x1139 JUMP JUMPDEST AND DUP2 MSTORE PUSH1 0x74 DUP4 MSTORE DUP2 DUP2 KECCAK256 SWAP1 DUP3 MLOAD DUP1 SWAP5 DUP1 DUP5 SLOAD SWAP3 DUP4 DUP2 MSTORE ADD SWAP4 DUP4 MSTORE DUP1 DUP4 KECCAK256 SWAP3 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0xD1B JUMPI PUSH2 0x30C DUP7 PUSH2 0x301 DUP10 PUSH2 0x2FC DUP2 DUP11 SUB DUP3 PUSH2 0x147E JUMP JUMPDEST DUP4 SLOAD DUP6 MSTORE SWAP4 DUP5 ADD SWAP4 PUSH1 0x1 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP2 ADD SWAP1 PUSH2 0xD00 JUMP JUMPDEST DUP1 REVERT JUMPDEST DUP4 CALLVALUE PUSH2 0xD32 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xD32 JUMPI PUSH2 0x23E PUSH2 0xD52 PUSH2 0x1139 JUMP JUMPDEST PUSH2 0xD5A PUSH2 0x1353 JUMP JUMPDEST PUSH2 0x1678 JUMP JUMPDEST DUP4 CALLVALUE PUSH2 0xD32 JUMPI PUSH2 0x100 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xD32 JUMPI PUSH2 0xD7A PUSH2 0x1139 JUMP JUMPDEST PUSH2 0xD82 PUSH2 0x114F JUMP JUMPDEST PUSH2 0xD8A PUSH2 0x1165 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 PUSH1 0x84 CALLDATALOAD DUP4 DUP2 AND SWAP2 SWAP1 DUP3 SWAP1 SUB PUSH2 0x9A1 JUMPI DUP4 DUP1 SWAP3 PUSH2 0xDAE PUSH2 0x117B JUMP JUMPDEST SWAP1 DUP3 PUSH2 0xDB8 PUSH2 0x1191 JUMP JUMPDEST SWAP5 DUP2 PUSH2 0xDC2 PUSH2 0x11A7 JUMP JUMPDEST SWAP9 PUSH2 0xDCB PUSH2 0x1353 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL SWAP13 AND DUP13 PUSH1 0x6A SLOAD AND OR PUSH1 0x6A SSTORE AND DUP11 PUSH1 0x6B SLOAD AND OR PUSH1 0x6B SSTORE AND DUP9 PUSH1 0x6C SLOAD AND OR PUSH1 0x6C SSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x6D SSTORE DUP8 PUSH1 0x70 SLOAD AND OR PUSH1 0x70 SSTORE AND DUP6 PUSH1 0x6E SLOAD AND OR PUSH1 0x6E SSTORE AND DUP4 PUSH1 0x6F SLOAD AND OR PUSH1 0x6F SSTORE AND SWAP1 PUSH1 0x71 SLOAD AND OR PUSH1 0x71 SSTORE DUP1 RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x1B7 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1B7 JUMPI PUSH1 0x33 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x1B7 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1B7 JUMPI PUSH1 0x67 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP3 DUP5 CALLVALUE PUSH2 0xD32 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xD32 JUMPI DUP2 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x68 SLOAD DUP1 DUP6 MSTORE PUSH1 0x20 DUP1 SWAP6 ADD SWAP5 PUSH1 0x68 DUP4 MSTORE PUSH32 0xA2153420D844928B4421650203C77BABC8B33D7F2E7B450E2966DB0C22097753 SWAP3 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0xEDB JUMPI PUSH2 0x30C DUP7 DUP7 PUSH2 0xAEB DUP3 DUP12 SUB DUP4 PUSH2 0x147E JUMP JUMPDEST DUP4 SLOAD DUP8 MSTORE SWAP6 DUP7 ADD SWAP6 PUSH1 0x1 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP2 ADD SWAP1 PUSH2 0xEC3 JUMP JUMPDEST DUP4 SWAP1 CALLVALUE PUSH2 0x1B7 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1B7 JUMPI CALLDATALOAD DUP1 ISZERO ISZERO DUP1 SWAP2 SUB PUSH2 0x1B7 JUMPI PUSH2 0xF18 PUSH2 0x1353 JUMP JUMPDEST PUSH1 0xFF DUP1 NOT PUSH1 0x75 SLOAD AND SWAP2 AND OR PUSH1 0x75 SSTORE DUP1 RETURN JUMPDEST DUP4 CALLVALUE PUSH2 0xD32 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xD32 JUMPI PUSH2 0xF42 PUSH2 0x1353 JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP1 LOG3 DUP1 RETURN JUMPDEST SWAP2 SWAP1 POP CALLVALUE PUSH2 0x293 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x293 JUMPI PUSH1 0x24 CALLDATALOAD SWAP2 PUSH3 0xFFFFFF DUP4 AND DUP1 SWAP4 SUB PUSH2 0xFCB JUMPI PUSH2 0xFB2 PUSH2 0x1353 JUMP JUMPDEST CALLDATALOAD DUP4 MSTORE PUSH1 0x73 PUSH1 0x20 MSTORE DUP3 KECCAK256 SWAP1 PUSH3 0xFFFFFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE DUP1 RETURN JUMPDEST DUP4 DUP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x1B7 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1B7 JUMPI PUSH1 0x20 SWAP1 PUSH1 0xFF PUSH1 0x75 SLOAD AND SWAP1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x1B7 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1B7 JUMPI PUSH1 0x66 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST SWAP1 POP CALLVALUE PUSH2 0x293 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x293 JUMPI DUP2 PUSH1 0x20 SWAP4 PUSH3 0xFFFFFF SWAP3 CALLDATALOAD DUP2 MSTORE PUSH1 0x73 DUP6 MSTORE KECCAK256 SLOAD AND SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x1B7 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1B7 JUMPI PUSH1 0x70 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x1B7 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1B7 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x79 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x1B7 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1B7 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x6D SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x1B7 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1B7 JUMPI PUSH1 0x6A SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP5 SWAP1 CALLVALUE PUSH2 0x1B7 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1B7 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x76 SLOAD DUP2 MSTORE RETURN JUMPDEST PUSH1 0x20 SWAP1 DUP2 PUSH1 0x40 DUP2 DUP4 ADD SWAP3 DUP3 DUP2 MSTORE DUP6 MLOAD DUP1 SWAP5 MSTORE ADD SWAP4 ADD SWAP2 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x111C JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x110E JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x60A JUMPI JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x60A JUMPI JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x60A JUMPI JUMP JUMPDEST PUSH1 0xA4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x60A JUMPI JUMP JUMPDEST PUSH1 0xC4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x60A JUMPI JUMP JUMPDEST PUSH1 0xE4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x60A JUMPI JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x11D0 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x11C0 JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP4 MLOAD AND DUP3 MSTORE PUSH1 0x20 DUP4 ADD MLOAD AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP3 ADD MLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP3 ADD MLOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP3 ADD MLOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 DUP1 DUP4 ADD MLOAD SWAP1 PUSH1 0x8 DUP3 LT ISZERO PUSH2 0x129F JUMPI DUP3 ADD MSTORE PUSH2 0x120 DUP1 DUP4 ADD MLOAD SWAP1 PUSH1 0x3 DUP3 LT ISZERO PUSH2 0x129F JUMPI DUP3 ADD MSTORE PUSH2 0x140 DUP1 DUP4 ADD MLOAD SWAP3 PUSH2 0x180 DUP1 SWAP3 DUP5 ADD MSTORE DUP4 MLOAD DUP1 SWAP3 DUP5 ADD MSTORE PUSH2 0x1288 DUP3 PUSH2 0x1A0 SWAP6 PUSH1 0x20 DUP8 DUP8 ADD SWAP2 ADD PUSH2 0x11BD JUMP JUMPDEST PUSH2 0x160 SWAP1 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 ADD SWAP1 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 SWAP3 MSTORE PUSH1 0x40 DUP4 ADD SWAP3 DUP2 PUSH1 0x40 DUP5 PUSH1 0x5 SHL DUP4 ADD ADD SWAP6 ADD SWAP4 PUSH1 0x0 SWAP2 JUMPDEST DUP5 DUP4 LT PUSH2 0x12E9 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 DUP5 DUP1 PUSH2 0x1307 PUSH1 0x1 SWAP4 PUSH1 0x3F NOT DUP7 DUP3 SUB ADD DUP8 MSTORE DUP11 MLOAD PUSH2 0x11E0 JUMP JUMPDEST SWAP9 ADD SWAP4 ADD SWAP4 ADD SWAP2 SWAP5 SWAP4 SWAP3 SWAP1 PUSH2 0x12D9 JUMP JUMPDEST CALLVALUE PUSH2 0x60A JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x60A JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1338 PUSH2 0x1139 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x69 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD ISZERO ISZERO PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x1367 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 AND DUP2 OR SWAP1 SWAP3 SSTORE SWAP1 SWAP2 AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x0 DUP1 LOG3 JUMP JUMPDEST ISZERO PUSH2 0x13FB JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x1468 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x1468 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x14AD JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x1468 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 NOT DUP2 EQ PUSH2 0x14AD JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x69 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x1581 JUMPI PUSH1 0x68 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 LT ISZERO PUSH2 0x156D JUMPI PUSH1 0x1 DUP2 ADD DUP1 PUSH1 0x68 SSTORE DUP2 LT ISZERO PUSH2 0x1559 JUMPI SWAP1 DUP3 PUSH1 0x40 SWAP3 PUSH32 0xA2153420D844928B4421650203C77BABC8B33D7F2E7B450E2966DB0C22097753 ADD SSTORE PUSH1 0x68 SLOAD SWAP3 DUP2 MSTORE PUSH1 0x69 PUSH1 0x20 MSTORE KECCAK256 SSTORE PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x1 DUP4 ADD PUSH1 0x0 SWAP1 DUP3 DUP3 MSTORE DUP1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 SLOAD ISZERO PUSH1 0x0 EQ PUSH2 0x1605 JUMPI DUP5 SLOAD SWAP5 PUSH1 0x1 PUSH1 0x40 SHL DUP7 LT ISZERO PUSH2 0x15F1 JUMPI PUSH1 0x1 DUP7 ADD DUP1 DUP3 SSTORE DUP7 LT ISZERO PUSH2 0x15DD JUMPI DUP4 PUSH1 0x40 SWAP5 SWAP6 SWAP7 DUP3 DUP6 MSTORE PUSH1 0x20 DUP6 KECCAK256 ADD SSTORE SLOAD SWAP4 DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SSTORE PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST POP SWAP3 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x180 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x1468 JUMPI PUSH1 0x40 MSTORE DUP2 PUSH2 0x160 PUSH1 0x0 SWAP2 DUP3 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE DUP3 PUSH1 0x80 DUP3 ADD MSTORE DUP3 PUSH1 0xA0 DUP3 ADD MSTORE DUP3 PUSH1 0xC0 DUP3 ADD MSTORE DUP3 PUSH1 0xE0 DUP3 ADD MSTORE DUP3 PUSH2 0x100 DUP3 ADD MSTORE DUP3 PUSH2 0x120 DUP3 ADD MSTORE PUSH1 0x60 PUSH2 0x140 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST DUP1 EXTCODESIZE ISZERO PUSH2 0x16C5 JUMPI PUSH1 0x65 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 DUP3 OR SWAP1 SSTORE PUSH32 0x7213E3D637E4EF4968F947D5F602103307355F708BFD5BFCE9D87DA7C78F8521 PUSH1 0x0 DUP1 LOG2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x464E44436F6C6C656374696F6E466163746F72793A2050726F78792063616C6C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x2061646472657373206973206E6F74206120636F6E7472616374000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH2 0x1738 PUSH2 0x160B JUMP JUMPDEST POP PUSH2 0x1741 PUSH2 0x160B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP1 DUP3 MSTORE PUSH1 0x40 DUP1 MLOAD PUSH4 0x8DA5CB5B PUSH1 0xE0 SHL DUP2 MSTORE SWAP3 SWAP4 PUSH1 0x4 SWAP4 SWAP2 SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP4 DUP2 DUP8 DUP2 DUP7 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x1BB7 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x1B81 JUMPI JUMPDEST POP AND DUP6 DUP4 ADD MSTORE DUP3 MLOAD PUSH4 0x5C63ED69 PUSH1 0xE0 SHL DUP2 MSTORE DUP3 DUP2 DUP7 DUP2 DUP6 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x19E7 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x1B54 JUMPI JUMPDEST POP DUP6 DUP5 ADD MSTORE DUP3 MLOAD PUSH4 0x4C38D877 PUSH1 0xE0 SHL DUP2 MSTORE DUP3 DUP2 DUP7 DUP2 DUP6 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x19E7 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x1B27 JUMPI JUMPDEST POP PUSH1 0x60 DUP7 ADD MSTORE DUP3 MLOAD PUSH4 0x48BF3BB PUSH1 0xE1 SHL DUP2 MSTORE DUP3 DUP2 DUP7 DUP2 DUP6 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x19E7 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x1AFA JUMPI JUMPDEST POP PUSH1 0x80 DUP7 ADD MSTORE DUP3 MLOAD PUSH4 0xBC83617 PUSH1 0xE1 SHL DUP2 MSTORE DUP3 DUP2 DUP7 DUP2 DUP6 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x19E7 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x1ACD JUMPI JUMPDEST POP PUSH1 0xA0 DUP7 ADD MSTORE DUP3 MLOAD PUSH4 0xD24E0C87 PUSH1 0xE0 SHL DUP2 MSTORE DUP3 DUP2 DUP7 DUP2 DUP6 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x19E7 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x1AA0 JUMPI JUMPDEST POP PUSH1 0xC0 DUP7 ADD MSTORE DUP3 MLOAD PUSH4 0xFAEB5E17 PUSH1 0xE0 SHL DUP2 MSTORE DUP3 DUP2 DUP7 DUP2 DUP6 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x19E7 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x1A73 JUMPI JUMPDEST POP PUSH1 0xE0 DUP7 ADD MSTORE DUP3 MLOAD PUSH4 0x2734EAB PUSH1 0xE5 SHL DUP2 MSTORE DUP3 DUP2 DUP7 DUP2 DUP6 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x19E7 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x1A3D JUMPI JUMPDEST POP PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x19F2 JUMPI PUSH2 0x100 DUP7 ADD MSTORE DUP3 MLOAD PUSH4 0x10A38F5 PUSH1 0xE0 SHL DUP2 MSTORE DUP3 DUP2 DUP7 DUP2 DUP6 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x19E7 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x1A07 JUMPI JUMPDEST POP PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x19F2 JUMPI PUSH2 0x120 DUP7 ADD MSTORE DUP3 MLOAD PUSH4 0x54FD4D5 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x0 DUP2 DUP7 DUP2 DUP6 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x19E7 JUMPI SWAP1 DUP4 SWAP3 SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x196B JUMPI JUMPDEST POP PUSH2 0x140 DUP8 ADD MSTORE DUP4 MLOAD PUSH4 0x32946A87 PUSH1 0xE0 SHL DUP2 MSTORE SWAP5 DUP6 SWAP2 DUP3 SWAP1 GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x1961 JUMPI POP PUSH1 0x0 SWAP2 PUSH2 0x1935 JUMPI JUMPDEST POP PUSH2 0x160 DUP4 ADD MSTORE POP SWAP1 JUMP JUMPDEST DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x195A JUMPI JUMPDEST PUSH2 0x1949 DUP2 DUP4 PUSH2 0x147E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0xD32 JUMPI POP MLOAD DUP1 CODESIZE PUSH2 0x192A JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x193F JUMP JUMPDEST MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP2 SWAP3 POP RETURNDATASIZE DUP1 DUP3 DUP5 RETURNDATACOPY PUSH2 0x197D DUP2 DUP5 PUSH2 0x147E JUMP JUMPDEST DUP3 ADD SWAP2 DUP5 DUP2 DUP5 SUB SLT PUSH2 0x1B7 JUMPI DUP1 MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x293 JUMPI ADD DUP3 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x1B7 JUMPI DUP1 MLOAD SWAP2 PUSH2 0x19B3 DUP4 PUSH2 0x14C3 JUMP JUMPDEST SWAP4 PUSH2 0x19C0 DUP9 MLOAD SWAP6 DUP7 PUSH2 0x147E JUMP JUMPDEST DUP4 DUP6 MSTORE DUP7 DUP5 DUP5 ADD ADD GT PUSH2 0xD32 JUMPI POP DUP3 SWAP2 PUSH2 0x19E1 SWAP2 DUP7 DUP1 DUP1 SWAP8 SWAP7 ADD SWAP2 ADD PUSH2 0x11BD JUMP JUMPDEST CODESIZE PUSH2 0x1900 JUMP JUMPDEST DUP5 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x21 DUP6 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP4 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x1A36 JUMPI JUMPDEST PUSH2 0x1A1C DUP2 DUP4 PUSH2 0x147E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x1B7 JUMPI MLOAD SWAP1 PUSH1 0x3 DUP3 LT ISZERO PUSH2 0xD32 JUMPI POP CODESIZE PUSH2 0x18C9 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1A12 JUMP JUMPDEST DUP4 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x1A6C JUMPI JUMPDEST PUSH2 0x1A52 DUP2 DUP4 PUSH2 0x147E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x1B7 JUMPI MLOAD SWAP1 PUSH1 0x8 DUP3 LT ISZERO PUSH2 0xD32 JUMPI POP CODESIZE PUSH2 0x1897 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1A48 JUMP JUMPDEST SWAP1 DUP4 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x1A99 JUMPI JUMPDEST PUSH2 0x1A89 DUP2 DUP4 PUSH2 0x147E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0xD32 JUMPI POP MLOAD CODESIZE PUSH2 0x186F JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1A7F JUMP JUMPDEST SWAP1 DUP4 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x1AC6 JUMPI JUMPDEST PUSH2 0x1AB6 DUP2 DUP4 PUSH2 0x147E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0xD32 JUMPI POP MLOAD CODESIZE PUSH2 0x1847 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1AAC JUMP JUMPDEST SWAP1 DUP4 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x1AF3 JUMPI JUMPDEST PUSH2 0x1AE3 DUP2 DUP4 PUSH2 0x147E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0xD32 JUMPI POP MLOAD CODESIZE PUSH2 0x181F JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1AD9 JUMP JUMPDEST SWAP1 DUP4 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x1B20 JUMPI JUMPDEST PUSH2 0x1B10 DUP2 DUP4 PUSH2 0x147E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0xD32 JUMPI POP MLOAD CODESIZE PUSH2 0x17F7 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1B06 JUMP JUMPDEST SWAP1 DUP4 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x1B4D JUMPI JUMPDEST PUSH2 0x1B3D DUP2 DUP4 PUSH2 0x147E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0xD32 JUMPI POP MLOAD CODESIZE PUSH2 0x17CF JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1B33 JUMP JUMPDEST SWAP1 DUP4 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x1B7A JUMPI JUMPDEST PUSH2 0x1B6A DUP2 DUP4 PUSH2 0x147E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0xD32 JUMPI POP MLOAD CODESIZE PUSH2 0x17A8 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1B60 JUMP JUMPDEST DUP5 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x1BB0 JUMPI JUMPDEST PUSH2 0x1B96 DUP2 DUP4 PUSH2 0x147E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x1B7 JUMPI MLOAD SWAP1 DUP3 DUP3 AND DUP3 SUB PUSH2 0xD32 JUMPI POP CODESIZE PUSH2 0x1780 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1B8C JUMP JUMPDEST DUP6 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x1468 JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x1BEE JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x1C0F DUP2 PUSH2 0x1BC2 JUMP JUMPDEST SWAP2 PUSH2 0x1C1D PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x147E JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x1F NOT PUSH2 0x1C2C DUP4 PUSH2 0x1BC2 JUMP JUMPDEST ADD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x1C89 JUMPI POP POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x1C49 JUMPI POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x1C84 SWAP1 PUSH2 0x1C69 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1C62 DUP4 DUP7 PUSH2 0x1BDA JUMP JUMPDEST MLOAD AND PUSH2 0x1730 JUMP JUMPDEST PUSH2 0x1C73 DUP3 DUP8 PUSH2 0x1BDA JUMP JUMPDEST MSTORE PUSH2 0x1C7E DUP2 DUP7 PUSH2 0x1BDA JUMP JUMPDEST POP PUSH2 0x14DF JUMP JUMPDEST PUSH2 0x1C3C JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH2 0x1C94 PUSH2 0x160B JUMP JUMPDEST DUP3 DUP3 DUP9 ADD ADD MSTORE ADD PUSH2 0x1C30 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ISZERO POP 0xA7 0xD1 0xC3 XOR EXTCODEHASH DUP3 0xD2 PUSH7 0xFEA7C3CA83126C 0x5E 0xE7 CREATE DUP16 SLT EXP 0xEC 0xB1 0xE8 0xCF DUP14 0x49 0x2F 0x2A 0x2A PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"732:7855:9:-:0;;;;;;;;;1482:5;732:7855;;1482:5;732:7855;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"abi_decode_address":{"entryPoint":4497,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_address_18831":{"entryPoint":4409,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_address_18832":{"entryPoint":4431,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_address_18833":{"entryPoint":4453,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_address_18835":{"entryPoint":4475,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_address_18837":{"entryPoint":4519,"id":null,"parameterSlots":0,"returnSlots":1},"abi_encode_address_address_address_uint256_uint256_uint256":{"entryPoint":null,"id":null,"parameterSlots":7,"returnSlots":1},"abi_encode_array_address_dyn":{"entryPoint":4341,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_array_struct_Feed_dyn":{"entryPoint":4789,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_packed_address_uint256":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_struct_Feed":{"entryPoint":4576,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_and_zero_memory_struct_struct_Feed":{"entryPoint":5643,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_array_struct_Feed_dyn":{"entryPoint":7106,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_bytes":{"entryPoint":5315,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_uint256":{"entryPoint":5280,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":4541,"id":null,"parameterSlots":3,"returnSlots":0},"external_fun_isContractCreated":{"entryPoint":4887,"id":null,"parameterSlots":0,"returnSlots":0},"finalize_allocation":{"entryPoint":5246,"id":null,"parameterSlots":2,"returnSlots":0},"finalize_allocation_18841":{"entryPoint":5204,"id":null,"parameterSlots":1,"returnSlots":0},"fun_add":{"entryPoint":5510,"id":2005,"parameterSlots":2,"returnSlots":1},"fun_add_18844":{"entryPoint":5358,"id":2005,"parameterSlots":1,"returnSlots":1},"fun_checkOwner":{"entryPoint":4947,"id":68,"parameterSlots":0,"returnSlots":0},"fun_getFeedInfo":{"entryPoint":5936,"id":3847,"parameterSlots":1,"returnSlots":1},"fun_getFeedsInfo":{"entryPoint":7172,"id":3900,"parameterSlots":1,"returnSlots":1},"fun_transferOwnership":{"entryPoint":5035,"id":125,"parameterSlots":1,"returnSlots":0},"fun_updateProxyCallContract":{"entryPoint":5752,"id":3228,"parameterSlots":1,"returnSlots":0},"increment_uint256":{"entryPoint":5343,"id":null,"parameterSlots":1,"returnSlots":1},"memory_array_index_access_address_dyn":{"entryPoint":7130,"id":null,"parameterSlots":2,"returnSlots":1},"require_helper_stringliteral_d688":{"entryPoint":5108,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"608060408181526004918236101561001657600080fd5b600092833560e01c918263067bd3b4146110d95750816318da0011146110b05781633ec4f23d1461109157816349975235146110725781634b57b0be146110495781635978e9b01461101c5781635c60da1b14610ff35781635dc96d1614610fcf5781636a3f9c3014610f86578163715018a614610f295781637b2c835f14610ef25781637fe955d414610e7857816380ca11fc14610e4f5781638da5cb5b14610e265781639496d7f114610d5f578163a17bb19914610d35578163ad86132414610cbb578163b19bcb5814610b0c578163b2a2e9ca14610a8e578163bb7e364814610a65578163bb834b0e14610a46578163be22f54614610a1d578163ca5b4e5c14610638578163cd77b52c1461060f578163cedf3ba214610327578163d024dda81461036f578163d570a66d1461032c578163e58fdd0414610327578163e86ef35314610297578163f2fde38b1461020157508063f77800e5146101d9578063f86d0b38146101bb5763f887ea401461019057600080fd5b346101b757816003193601126101b75760715490516001600160a01b039091168152602090f35b5080fd5b50346101b757816003193601126101b7576020906077549051908152f35b50346101b757816003193601126101b757606e5490516001600160a01b039091168152602090f35b9050346102935760203660031901126102935761021c611139565b91610225611353565b6001600160a01b03831615610241578361023e846113ab565b80f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b5050346101b757816003193601126101b75780518092606854808352602080930192606883527fa2153420d844928b4421650203c77babc8b33d7f2e7b450e2966db0c2209775392905b8282106103105761030c86610301896102fc818a038261147e565b611c04565b9051918291826112b5565b0390f35b8354855293840193600193840193909101906102e1565b611317565b5050346101b75760203660031901126101b75761030c9061035c61034e611139565b61035661160b565b50611730565b90519182916020835260208301906111e0565b905034610293576101203660031901126102935761038b611139565b61039361114f565b9061039c611165565b6001600160a01b0391906064358381169081900361060a576103bc61117b565b6103c4611191565b906103cd6111a7565b92610104359487861680960361060a578b549960ff8b60081c16159a8b809c6105fd575b80156105e6575b1561058c5760ff8e61043f928e60018419831617835561057b575b5061042c82825460081c16610427816113f4565b6113f4565b610435336113ab565b5460081c166113f4565b610448336113ab565b610450611353565b331561052957508794939192859384809361046a336113ab565b6104738b611678565b816001600160601b0360a01b9d168d606b541617606b55168b606a541617606a558a606c541617606c55608435606d55168860705416176070551686606e541617606e551684606f541617606f558360715416176071551681606554161760655533906067541617606755600260775582607855826079556104f3575080f35b60207f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989161ff001984541684555160018152a180f35b60849060208d519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b61ffff191661010117815538610413565b8c5162461bcd60e51b8152602081840152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156103f85750600160ff8216146103f8565b50600160ff8216106103f1565b600080fd5b5050346101b757816003193601126101b757606c5490516001600160a01b039091168152602090f35b8383816003193601126101b75780516bffffffffffffffffffffffff193360601b16602080830191825242603480850191909152835294601f19939290919061068260548261147e565b5190206066549360018201809211610a0a5783513360601b6bffffffffffffffffffffffff191688820190815260148101939093526e5af43d82803e903d91602b57fd5bf392916106de9082603485010390810183528261147e565b519020608885901c62ffffff16763d602d80600a3d3981f3363d3d373d3d3d363d7300000017865260789490941b6effffffffffffffffffffffffffffff19161785526001600160a01b039283906037600987f5169283156109c85780606b541660775460785491607954873b156109c45786516339466de560e11b8152338782019081523060208201526001600160a01b0390931660408401526060830193909352608082019390935260a08101929092529086908290819060c001038183895af18015610930579086916109ac575b505060248682606b541685519283809263122643f360e21b825233888301525afa908115610930578691610972575b501561093a57606a541682516391792d5b60e01b815286818481855afa908115610930578691610903575b5034106108d057848080809334905af13d156108cb573d610829816114c3565b906108368551928361147e565b815285873d92013e5b1561089c57507fb658664a46408e6670a38ec7ea8b7614c9e2916184dff2fad99d3a7a3491ca7d82916108736076546114df565b60765561087f836114ee565b503385526074865261089383828720611586565b50519380a28152f35b84606492519162461bcd60e51b8352820152600b60248201526a10d0531317d1905253115160aa1b6044820152fd5b61083f565b5084606492519162461bcd60e51b8352820152600e60248201526d4e4f545f454e4f5547485f46454560901b6044820152fd5b90508681813d8311610929575b61091a818361147e565b8101031261060a575187610809565b503d610910565b84513d88823e3d90fd5b5084606492519162461bcd60e51b835282015260136024820152721d5cd95c88191bd95cc81b9bdd08195e1a5cdd606a1b6044820152fd5b90508681813d83116109a5575b610989818361147e565b810103126109a1575180151581036109a157876107de565b8580fd5b503d61097f565b6109b590611454565b6109c05784876107af565b8480fd5b8880fd5b5084606492519162461bcd60e51b8352820152601760248201527f455243313136373a2063726561746532206661696c65640000000000000000006044820152fd5b634e487b7160e01b865260118352602486fd5b5050346101b757816003193601126101b757606f5490516001600160a01b039091168152602090f35b5050346101b757816003193601126101b7576020906078549051908152f35b5050346101b757816003193601126101b75760655490516001600160a01b039091168152602090f35b5050346101b75760209081600319360112610293576001600160a01b03610ab3611139565b168352607482528083209281518093808654928381520195835280832092905b828210610af55761030c8686610aeb828b038361147e565b51918291826110f5565b835487529586019560019384019390910190610ad3565b8383346101b75760803660031901126101b757610b27611139565b906024356044359060643592610b3b611353565b843b15610c6a5760018060a01b0380951694856001600160601b0360a01b6066541617606655826077558360785584607955606b5416853b15610c665781516339466de560e11b815233818a019081523060208201526001600160a01b039092166040830152606082018490526080820185905260a08201869052919087908390819060c0010381838a5af1908115610c5d5750610c4a575b5061271090818102918183041490151715610c3757606482029180830460641490151715610c3757610c0f9291610c0a916114a0565b6114a0565b907f5678af47993f4856157dd819bee3183b87c10ee1b3575a5128fe25896c073a288380a380f35b634e487b7160e01b855260118652602485fd5b610c5690959195611454565b9386610bd4565b513d88823e3d90fd5b8680fd5b5162461bcd60e51b8152602081880152602660248201527f6e616c693a20696d706c656d656e746174696f6e206973206e6f74206120636f6044820152651b9d1c9858dd60d21b6064820152608490fd5b5050346101b75760209182600319360112610d32576001600160a01b03610ce0611139565b168152607483528181209082518094808454928381520193835280832092905b828210610d1b5761030c86610301896102fc818a038261147e565b835485529384019360019384019390910190610d00565b80fd5b8334610d32576020366003190112610d325761023e610d52611139565b610d5a611353565b611678565b8334610d3257610100366003190112610d3257610d7a611139565b610d8261114f565b610d8a611165565b6001600160a01b03919060843583811691908290036109a157838092610dae61117b565b9082610db8611191565b9481610dc26111a7565b98610dcb611353565b816001600160601b0360a01b9c168c606a541617606a55168a606b541617606b551688606c541617606c55606435606d558760705416176070551685606e541617606e551683606f541617606f551690607154161760715580f35b5050346101b757816003193601126101b75760335490516001600160a01b039091168152602090f35b5050346101b757816003193601126101b75760675490516001600160a01b039091168152602090f35b828434610d325780600319360112610d32578151918291606854808552602080950194606883527fa2153420d844928b4421650203c77babc8b33d7f2e7b450e2966db0c2209775392905b828210610edb5761030c8686610aeb828b038361147e565b835487529586019560019384019390910190610ec3565b8390346101b75760203660031901126101b757358015158091036101b757610f18611353565b60ff80196075541691161760755580f35b8334610d325780600319360112610d3257610f42611353565b603380546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b919050346102935780600319360112610293576024359162ffffff8316809303610fcb57610fb2611353565b358352607360205282209062ffffff1982541617905580f35b8380fd5b5050346101b757816003193601126101b75760209060ff6075541690519015158152f35b5050346101b757816003193601126101b75760665490516001600160a01b039091168152602090f35b905034610293576020366003190112610293578160209362ffffff92358152607385522054169051908152f35b5050346101b757816003193601126101b75760705490516001600160a01b039091168152602090f35b5050346101b757816003193601126101b7576020906079549051908152f35b5050346101b757816003193601126101b757602090606d549051908152f35b5050346101b757816003193601126101b757606a5490516001600160a01b039091168152602090f35b8490346101b757816003193601126101b7576020906076548152f35b6020908160408183019282815285518094520193019160005b82811061111c575050505090565b83516001600160a01b03168552938101939281019260010161110e565b600435906001600160a01b038216820361060a57565b602435906001600160a01b038216820361060a57565b604435906001600160a01b038216820361060a57565b60a435906001600160a01b038216820361060a57565b60c435906001600160a01b038216820361060a57565b60e435906001600160a01b038216820361060a57565b60005b8381106111d05750506000910152565b81810151838201526020016111c0565b9060018060a01b03808351168252602083015116602082015260408201516040820152606082015160608201526080820151608082015260a082015160a082015260c082015160c082015260e082015160e08201526101008083015190600882101561129f578201526101208083015190600382101561129f578201526101408083015192610180809284015283518092840152611288826101a095602087870191016111bd565b6101609081015190830152601f01601f1916010190565b634e487b7160e01b600052602160045260246000fd5b602080820190808352835180925260408301928160408460051b8301019501936000915b8483106112e95750505050505090565b9091929394958480611307600193603f198682030187528a516111e0565b98019301930191949392906112d9565b3461060a57602036600319011261060a576001600160a01b03611338611139565b16600052606960205260206040600020541515604051908152f35b6033546001600160a01b0316330361136757565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b603380546001600160a01b039283166001600160a01b0319821681179092559091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b156113fb57565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b67ffffffffffffffff811161146857604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761146857604052565b919082018092116114ad57565b634e487b7160e01b600052601160045260246000fd5b67ffffffffffffffff811161146857601f01601f191660200190565b60001981146114ad5760010190565b60008181526069602052604081205461158157606854600160401b81101561156d5760018101806068558110156115595790826040927fa2153420d844928b4421650203c77babc8b33d7f2e7b450e2966db0c22097753015560685492815260696020522055600190565b634e487b7160e01b82526032600452602482fd5b634e487b7160e01b82526041600452602482fd5b905090565b9190600183016000908282528060205260408220541560001461160557845494600160401b8610156115f157600186018082558610156115dd57836040949596828552602085200155549382526020522055600190565b634e487b7160e01b83526032600452602483fd5b634e487b7160e01b83526041600452602483fd5b50925050565b60405190610180820182811067ffffffffffffffff82111761146857604052816101606000918281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e0820152826101008201528261012082015260606101408201520152565b803b156116c557606580546001600160a01b0319166001600160a01b039290921691821790557f7213e3d637e4ef4968f947d5f602103307355f708bfd5bfce9d87da7c78f8521600080a2565b60405162461bcd60e51b815260206004820152603a60248201527f464e44436f6c6c656374696f6e466163746f72793a2050726f78792063616c6c60448201527f2061646472657373206973206e6f74206120636f6e74726163740000000000006064820152608490fd5b61173861160b565b5061174161160b565b6001600160a01b0391821680825260408051638da5cb5b60e01b81529293600493919260209290919083818781865afa908115611bb757600091611b81575b5016858301528251635c63ed6960e01b815282818681855afa9081156119e757600091611b54575b50858401528251634c38d87760e01b815282818681855afa9081156119e757600091611b27575b506060860152825163048bf3bb60e11b815282818681855afa9081156119e757600091611afa575b5060808601528251630bc8361760e11b815282818681855afa9081156119e757600091611acd575b5060a0860152825163d24e0c8760e01b815282818681855afa9081156119e757600091611aa0575b5060c0860152825163faeb5e1760e01b815282818681855afa9081156119e757600091611a73575b5060e086015282516302734eab60e51b815282818681855afa9081156119e757600091611a3d575b5060088110156119f257610100860152825163010a38f560e01b815282818681855afa9081156119e757600091611a07575b5060038110156119f257610120860152825163054fd4d560e41b81526000818681855afa9081156119e7579083929160009161196b575b5061014087015283516332946a8760e01b815294859182905afa9182156119615750600091611935575b506101608301525090565b82813d831161195a575b611949818361147e565b81010312610d32575051803861192a565b503d61193f565b513d6000823e3d90fd5b9192503d8082843e61197d818461147e565b82019184818403126101b75780519067ffffffffffffffff8211610293570182601f820112156101b7578051916119b3836114c3565b936119c08851958661147e565b838552868484010111610d32575082916119e19186808097960191016111bd565b38611900565b84513d6000823e3d90fd5b602185634e487b7160e01b6000525260246000fd5b8381813d8311611a36575b611a1c818361147e565b810103126101b75751906003821015610d325750386118c9565b503d611a12565b8381813d8311611a6c575b611a52818361147e565b810103126101b75751906008821015610d32575038611897565b503d611a48565b908382813d8311611a99575b611a89818361147e565b81010312610d325750513861186f565b503d611a7f565b908382813d8311611ac6575b611ab6818361147e565b81010312610d3257505138611847565b503d611aac565b908382813d8311611af3575b611ae3818361147e565b81010312610d325750513861181f565b503d611ad9565b908382813d8311611b20575b611b10818361147e565b81010312610d32575051386117f7565b503d611b06565b908382813d8311611b4d575b611b3d818361147e565b81010312610d32575051386117cf565b503d611b33565b908382813d8311611b7a575b611b6a818361147e565b81010312610d32575051386117a8565b503d611b60565b8481813d8311611bb0575b611b96818361147e565b810103126101b75751908282168203610d32575038611780565b503d611b8c565b85513d6000823e3d90fd5b67ffffffffffffffff81116114685760051b60200190565b8051821015611bee5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b8051611c0f81611bc2565b91611c1d604051938461147e565b818352601f19611c2c83611bc2565b0160005b818110611c8957505060005b828110611c495750505090565b611c8490611c696001600160a01b03611c628386611bda565b5116611730565b611c738287611bda565b52611c7e8186611bda565b506114df565b611c3c565b602090611c9461160b565b82828801015201611c3056fea26469706673582212201550a7d1c3183f82d266fea7c3ca83126c5ee7f08f120aecb1e8cf8d492f2a2a64736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH1 0x4 SWAP2 DUP3 CALLDATASIZE LT ISZERO PUSH2 0x16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 DUP4 CALLDATALOAD PUSH1 0xE0 SHR SWAP2 DUP3 PUSH4 0x67BD3B4 EQ PUSH2 0x10D9 JUMPI POP DUP2 PUSH4 0x18DA0011 EQ PUSH2 0x10B0 JUMPI DUP2 PUSH4 0x3EC4F23D EQ PUSH2 0x1091 JUMPI DUP2 PUSH4 0x49975235 EQ PUSH2 0x1072 JUMPI DUP2 PUSH4 0x4B57B0BE EQ PUSH2 0x1049 JUMPI DUP2 PUSH4 0x5978E9B0 EQ PUSH2 0x101C JUMPI DUP2 PUSH4 0x5C60DA1B EQ PUSH2 0xFF3 JUMPI DUP2 PUSH4 0x5DC96D16 EQ PUSH2 0xFCF JUMPI DUP2 PUSH4 0x6A3F9C30 EQ PUSH2 0xF86 JUMPI DUP2 PUSH4 0x715018A6 EQ PUSH2 0xF29 JUMPI DUP2 PUSH4 0x7B2C835F EQ PUSH2 0xEF2 JUMPI DUP2 PUSH4 0x7FE955D4 EQ PUSH2 0xE78 JUMPI DUP2 PUSH4 0x80CA11FC EQ PUSH2 0xE4F JUMPI DUP2 PUSH4 0x8DA5CB5B EQ PUSH2 0xE26 JUMPI DUP2 PUSH4 0x9496D7F1 EQ PUSH2 0xD5F JUMPI DUP2 PUSH4 0xA17BB199 EQ PUSH2 0xD35 JUMPI DUP2 PUSH4 0xAD861324 EQ PUSH2 0xCBB JUMPI DUP2 PUSH4 0xB19BCB58 EQ PUSH2 0xB0C JUMPI DUP2 PUSH4 0xB2A2E9CA EQ PUSH2 0xA8E JUMPI DUP2 PUSH4 0xBB7E3648 EQ PUSH2 0xA65 JUMPI DUP2 PUSH4 0xBB834B0E EQ PUSH2 0xA46 JUMPI DUP2 PUSH4 0xBE22F546 EQ PUSH2 0xA1D JUMPI DUP2 PUSH4 0xCA5B4E5C EQ PUSH2 0x638 JUMPI DUP2 PUSH4 0xCD77B52C EQ PUSH2 0x60F JUMPI DUP2 PUSH4 0xCEDF3BA2 EQ PUSH2 0x327 JUMPI DUP2 PUSH4 0xD024DDA8 EQ PUSH2 0x36F JUMPI DUP2 PUSH4 0xD570A66D EQ PUSH2 0x32C JUMPI DUP2 PUSH4 0xE58FDD04 EQ PUSH2 0x327 JUMPI DUP2 PUSH4 0xE86EF353 EQ PUSH2 0x297 JUMPI DUP2 PUSH4 0xF2FDE38B EQ PUSH2 0x201 JUMPI POP DUP1 PUSH4 0xF77800E5 EQ PUSH2 0x1D9 JUMPI DUP1 PUSH4 0xF86D0B38 EQ PUSH2 0x1BB JUMPI PUSH4 0xF887EA40 EQ PUSH2 0x190 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x1B7 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1B7 JUMPI PUSH1 0x71 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x1B7 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1B7 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x77 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x1B7 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1B7 JUMPI PUSH1 0x6E SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST SWAP1 POP CALLVALUE PUSH2 0x293 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x293 JUMPI PUSH2 0x21C PUSH2 0x1139 JUMP JUMPDEST SWAP2 PUSH2 0x225 PUSH2 0x1353 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO PUSH2 0x241 JUMPI DUP4 PUSH2 0x23E DUP5 PUSH2 0x13AB JUMP JUMPDEST DUP1 RETURN JUMPDEST SWAP1 PUSH1 0x20 PUSH1 0x84 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x1B7 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1B7 JUMPI DUP1 MLOAD DUP1 SWAP3 PUSH1 0x68 SLOAD DUP1 DUP4 MSTORE PUSH1 0x20 DUP1 SWAP4 ADD SWAP3 PUSH1 0x68 DUP4 MSTORE PUSH32 0xA2153420D844928B4421650203C77BABC8B33D7F2E7B450E2966DB0C22097753 SWAP3 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x310 JUMPI PUSH2 0x30C DUP7 PUSH2 0x301 DUP10 PUSH2 0x2FC DUP2 DUP11 SUB DUP3 PUSH2 0x147E JUMP JUMPDEST PUSH2 0x1C04 JUMP JUMPDEST SWAP1 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x12B5 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST DUP4 SLOAD DUP6 MSTORE SWAP4 DUP5 ADD SWAP4 PUSH1 0x1 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x2E1 JUMP JUMPDEST PUSH2 0x1317 JUMP JUMPDEST POP POP CALLVALUE PUSH2 0x1B7 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1B7 JUMPI PUSH2 0x30C SWAP1 PUSH2 0x35C PUSH2 0x34E PUSH2 0x1139 JUMP JUMPDEST PUSH2 0x356 PUSH2 0x160B JUMP JUMPDEST POP PUSH2 0x1730 JUMP JUMPDEST SWAP1 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x11E0 JUMP JUMPDEST SWAP1 POP CALLVALUE PUSH2 0x293 JUMPI PUSH2 0x120 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x293 JUMPI PUSH2 0x38B PUSH2 0x1139 JUMP JUMPDEST PUSH2 0x393 PUSH2 0x114F JUMP JUMPDEST SWAP1 PUSH2 0x39C PUSH2 0x1165 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 PUSH1 0x64 CALLDATALOAD DUP4 DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x60A JUMPI PUSH2 0x3BC PUSH2 0x117B JUMP JUMPDEST PUSH2 0x3C4 PUSH2 0x1191 JUMP JUMPDEST SWAP1 PUSH2 0x3CD PUSH2 0x11A7 JUMP JUMPDEST SWAP3 PUSH2 0x104 CALLDATALOAD SWAP5 DUP8 DUP7 AND DUP1 SWAP7 SUB PUSH2 0x60A JUMPI DUP12 SLOAD SWAP10 PUSH1 0xFF DUP12 PUSH1 0x8 SHR AND ISZERO SWAP11 DUP12 DUP1 SWAP13 PUSH2 0x5FD JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x5E6 JUMPI JUMPDEST ISZERO PUSH2 0x58C JUMPI PUSH1 0xFF DUP15 PUSH2 0x43F SWAP3 DUP15 PUSH1 0x1 DUP5 NOT DUP4 AND OR DUP4 SSTORE PUSH2 0x57B JUMPI JUMPDEST POP PUSH2 0x42C DUP3 DUP3 SLOAD PUSH1 0x8 SHR AND PUSH2 0x427 DUP2 PUSH2 0x13F4 JUMP JUMPDEST PUSH2 0x13F4 JUMP JUMPDEST PUSH2 0x435 CALLER PUSH2 0x13AB JUMP JUMPDEST SLOAD PUSH1 0x8 SHR AND PUSH2 0x13F4 JUMP JUMPDEST PUSH2 0x448 CALLER PUSH2 0x13AB JUMP JUMPDEST PUSH2 0x450 PUSH2 0x1353 JUMP JUMPDEST CALLER ISZERO PUSH2 0x529 JUMPI POP DUP8 SWAP5 SWAP4 SWAP2 SWAP3 DUP6 SWAP4 DUP5 DUP1 SWAP4 PUSH2 0x46A CALLER PUSH2 0x13AB JUMP JUMPDEST PUSH2 0x473 DUP12 PUSH2 0x1678 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL SWAP14 AND DUP14 PUSH1 0x6B SLOAD AND OR PUSH1 0x6B SSTORE AND DUP12 PUSH1 0x6A SLOAD AND OR PUSH1 0x6A SSTORE DUP11 PUSH1 0x6C SLOAD AND OR PUSH1 0x6C SSTORE PUSH1 0x84 CALLDATALOAD PUSH1 0x6D SSTORE AND DUP9 PUSH1 0x70 SLOAD AND OR PUSH1 0x70 SSTORE AND DUP7 PUSH1 0x6E SLOAD AND OR PUSH1 0x6E SSTORE AND DUP5 PUSH1 0x6F SLOAD AND OR PUSH1 0x6F SSTORE DUP4 PUSH1 0x71 SLOAD AND OR PUSH1 0x71 SSTORE AND DUP2 PUSH1 0x65 SLOAD AND OR PUSH1 0x65 SSTORE CALLER SWAP1 PUSH1 0x67 SLOAD AND OR PUSH1 0x67 SSTORE PUSH1 0x2 PUSH1 0x77 SSTORE DUP3 PUSH1 0x78 SSTORE DUP3 PUSH1 0x79 SSTORE PUSH2 0x4F3 JUMPI POP DUP1 RETURN JUMPDEST PUSH1 0x20 PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP2 PUSH2 0xFF00 NOT DUP5 SLOAD AND DUP5 SSTORE MLOAD PUSH1 0x1 DUP2 MSTORE LOG1 DUP1 RETURN JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x20 DUP14 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH2 0xFFFF NOT AND PUSH2 0x101 OR DUP2 SSTORE CODESIZE PUSH2 0x413 JUMP JUMPDEST DUP13 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 DUP2 DUP5 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3F8 JUMPI POP PUSH1 0x1 PUSH1 0xFF DUP3 AND EQ PUSH2 0x3F8 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xFF DUP3 AND LT PUSH2 0x3F1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x1B7 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1B7 JUMPI PUSH1 0x6C SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP4 DUP4 DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1B7 JUMPI DUP1 MLOAD PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT CALLER PUSH1 0x60 SHL AND PUSH1 0x20 DUP1 DUP4 ADD SWAP2 DUP3 MSTORE TIMESTAMP PUSH1 0x34 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 MSTORE SWAP5 PUSH1 0x1F NOT SWAP4 SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0x682 PUSH1 0x54 DUP3 PUSH2 0x147E JUMP JUMPDEST MLOAD SWAP1 KECCAK256 PUSH1 0x66 SLOAD SWAP4 PUSH1 0x1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0xA0A JUMPI DUP4 MLOAD CALLER PUSH1 0x60 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP9 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x14 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH15 0x5AF43D82803E903D91602B57FD5BF3 SWAP3 SWAP2 PUSH2 0x6DE SWAP1 DUP3 PUSH1 0x34 DUP6 ADD SUB SWAP1 DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x147E JUMP JUMPDEST MLOAD SWAP1 KECCAK256 PUSH1 0x88 DUP6 SWAP1 SHR PUSH3 0xFFFFFF AND PUSH23 0x3D602D80600A3D3981F3363D3D373D3D3D363D73000000 OR DUP7 MSTORE PUSH1 0x78 SWAP5 SWAP1 SWAP5 SHL PUSH15 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND OR DUP6 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 SWAP1 PUSH1 0x37 PUSH1 0x9 DUP8 CREATE2 AND SWAP3 DUP4 ISZERO PUSH2 0x9C8 JUMPI DUP1 PUSH1 0x6B SLOAD AND PUSH1 0x77 SLOAD PUSH1 0x78 SLOAD SWAP2 PUSH1 0x79 SLOAD DUP8 EXTCODESIZE ISZERO PUSH2 0x9C4 JUMPI DUP7 MLOAD PUSH4 0x39466DE5 PUSH1 0xE1 SHL DUP2 MSTORE CALLER DUP8 DUP3 ADD SWAP1 DUP2 MSTORE ADDRESS PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x80 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0xA0 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP7 SWAP1 DUP3 SWAP1 DUP2 SWAP1 PUSH1 0xC0 ADD SUB DUP2 DUP4 DUP10 GAS CALL DUP1 ISZERO PUSH2 0x930 JUMPI SWAP1 DUP7 SWAP2 PUSH2 0x9AC JUMPI JUMPDEST POP POP PUSH1 0x24 DUP7 DUP3 PUSH1 0x6B SLOAD AND DUP6 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH4 0x122643F3 PUSH1 0xE2 SHL DUP3 MSTORE CALLER DUP9 DUP4 ADD MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x930 JUMPI DUP7 SWAP2 PUSH2 0x972 JUMPI JUMPDEST POP ISZERO PUSH2 0x93A JUMPI PUSH1 0x6A SLOAD AND DUP3 MLOAD PUSH4 0x91792D5B PUSH1 0xE0 SHL DUP2 MSTORE DUP7 DUP2 DUP5 DUP2 DUP6 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x930 JUMPI DUP7 SWAP2 PUSH2 0x903 JUMPI JUMPDEST POP CALLVALUE LT PUSH2 0x8D0 JUMPI DUP5 DUP1 DUP1 DUP1 SWAP4 CALLVALUE SWAP1 GAS CALL RETURNDATASIZE ISZERO PUSH2 0x8CB JUMPI RETURNDATASIZE PUSH2 0x829 DUP2 PUSH2 0x14C3 JUMP JUMPDEST SWAP1 PUSH2 0x836 DUP6 MLOAD SWAP3 DUP4 PUSH2 0x147E JUMP JUMPDEST DUP2 MSTORE DUP6 DUP8 RETURNDATASIZE SWAP3 ADD RETURNDATACOPY JUMPDEST ISZERO PUSH2 0x89C JUMPI POP PUSH32 0xB658664A46408E6670A38EC7EA8B7614C9E2916184DFF2FAD99D3A7A3491CA7D DUP3 SWAP2 PUSH2 0x873 PUSH1 0x76 SLOAD PUSH2 0x14DF JUMP JUMPDEST PUSH1 0x76 SSTORE PUSH2 0x87F DUP4 PUSH2 0x14EE JUMP JUMPDEST POP CALLER DUP6 MSTORE PUSH1 0x74 DUP7 MSTORE PUSH2 0x893 DUP4 DUP3 DUP8 KECCAK256 PUSH2 0x1586 JUMP JUMPDEST POP MLOAD SWAP4 DUP1 LOG2 DUP2 MSTORE RETURN JUMPDEST DUP5 PUSH1 0x64 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x10D0531317D19052531151 PUSH1 0xAA SHL PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH2 0x83F JUMP JUMPDEST POP DUP5 PUSH1 0x64 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x4E4F545F454E4F5547485F464545 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 POP DUP7 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x929 JUMPI JUMPDEST PUSH2 0x91A DUP2 DUP4 PUSH2 0x147E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x60A JUMPI MLOAD DUP8 PUSH2 0x809 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x910 JUMP JUMPDEST DUP5 MLOAD RETURNDATASIZE DUP9 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP DUP5 PUSH1 0x64 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x1D5CD95C88191BD95CC81B9BDD08195E1A5CDD PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 POP DUP7 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x9A5 JUMPI JUMPDEST PUSH2 0x989 DUP2 DUP4 PUSH2 0x147E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x9A1 JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x9A1 JUMPI DUP8 PUSH2 0x7DE JUMP JUMPDEST DUP6 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x97F JUMP JUMPDEST PUSH2 0x9B5 SWAP1 PUSH2 0x1454 JUMP JUMPDEST PUSH2 0x9C0 JUMPI DUP5 DUP8 PUSH2 0x7AF JUMP JUMPDEST DUP5 DUP1 REVERT JUMPDEST DUP9 DUP1 REVERT JUMPDEST POP DUP5 PUSH1 0x64 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x455243313136373A2063726561746532206661696C6564000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x11 DUP4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x1B7 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1B7 JUMPI PUSH1 0x6F SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x1B7 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1B7 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x78 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x1B7 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1B7 JUMPI PUSH1 0x65 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x1B7 JUMPI PUSH1 0x20 SWAP1 DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x293 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xAB3 PUSH2 0x1139 JUMP JUMPDEST AND DUP4 MSTORE PUSH1 0x74 DUP3 MSTORE DUP1 DUP4 KECCAK256 SWAP3 DUP2 MLOAD DUP1 SWAP4 DUP1 DUP7 SLOAD SWAP3 DUP4 DUP2 MSTORE ADD SWAP6 DUP4 MSTORE DUP1 DUP4 KECCAK256 SWAP3 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0xAF5 JUMPI PUSH2 0x30C DUP7 DUP7 PUSH2 0xAEB DUP3 DUP12 SUB DUP4 PUSH2 0x147E JUMP JUMPDEST MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x10F5 JUMP JUMPDEST DUP4 SLOAD DUP8 MSTORE SWAP6 DUP7 ADD SWAP6 PUSH1 0x1 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP2 ADD SWAP1 PUSH2 0xAD3 JUMP JUMPDEST DUP4 DUP4 CALLVALUE PUSH2 0x1B7 JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1B7 JUMPI PUSH2 0xB27 PUSH2 0x1139 JUMP JUMPDEST SWAP1 PUSH1 0x24 CALLDATALOAD PUSH1 0x44 CALLDATALOAD SWAP1 PUSH1 0x64 CALLDATALOAD SWAP3 PUSH2 0xB3B PUSH2 0x1353 JUMP JUMPDEST DUP5 EXTCODESIZE ISZERO PUSH2 0xC6A JUMPI PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP6 AND SWAP5 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0x66 SLOAD AND OR PUSH1 0x66 SSTORE DUP3 PUSH1 0x77 SSTORE DUP4 PUSH1 0x78 SSTORE DUP5 PUSH1 0x79 SSTORE PUSH1 0x6B SLOAD AND DUP6 EXTCODESIZE ISZERO PUSH2 0xC66 JUMPI DUP2 MLOAD PUSH4 0x39466DE5 PUSH1 0xE1 SHL DUP2 MSTORE CALLER DUP2 DUP11 ADD SWAP1 DUP2 MSTORE ADDRESS PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD DUP6 SWAP1 MSTORE PUSH1 0xA0 DUP3 ADD DUP7 SWAP1 MSTORE SWAP2 SWAP1 DUP8 SWAP1 DUP4 SWAP1 DUP2 SWAP1 PUSH1 0xC0 ADD SUB DUP2 DUP4 DUP11 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0xC5D JUMPI POP PUSH2 0xC4A JUMPI JUMPDEST POP PUSH2 0x2710 SWAP1 DUP2 DUP2 MUL SWAP2 DUP2 DUP4 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0xC37 JUMPI PUSH1 0x64 DUP3 MUL SWAP2 DUP1 DUP4 DIV PUSH1 0x64 EQ SWAP1 ISZERO OR ISZERO PUSH2 0xC37 JUMPI PUSH2 0xC0F SWAP3 SWAP2 PUSH2 0xC0A SWAP2 PUSH2 0x14A0 JUMP JUMPDEST PUSH2 0x14A0 JUMP JUMPDEST SWAP1 PUSH32 0x5678AF47993F4856157DD819BEE3183B87C10EE1B3575A5128FE25896C073A28 DUP4 DUP1 LOG3 DUP1 RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x11 DUP7 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST PUSH2 0xC56 SWAP1 SWAP6 SWAP2 SWAP6 PUSH2 0x1454 JUMP JUMPDEST SWAP4 DUP7 PUSH2 0xBD4 JUMP JUMPDEST MLOAD RETURNDATASIZE DUP9 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP7 DUP1 REVERT JUMPDEST MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 DUP2 DUP9 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6E616C693A20696D706C656D656E746174696F6E206973206E6F74206120636F PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x1B9D1C9858DD PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x1B7 JUMPI PUSH1 0x20 SWAP2 DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xD32 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xCE0 PUSH2 0x1139 JUMP JUMPDEST AND DUP2 MSTORE PUSH1 0x74 DUP4 MSTORE DUP2 DUP2 KECCAK256 SWAP1 DUP3 MLOAD DUP1 SWAP5 DUP1 DUP5 SLOAD SWAP3 DUP4 DUP2 MSTORE ADD SWAP4 DUP4 MSTORE DUP1 DUP4 KECCAK256 SWAP3 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0xD1B JUMPI PUSH2 0x30C DUP7 PUSH2 0x301 DUP10 PUSH2 0x2FC DUP2 DUP11 SUB DUP3 PUSH2 0x147E JUMP JUMPDEST DUP4 SLOAD DUP6 MSTORE SWAP4 DUP5 ADD SWAP4 PUSH1 0x1 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP2 ADD SWAP1 PUSH2 0xD00 JUMP JUMPDEST DUP1 REVERT JUMPDEST DUP4 CALLVALUE PUSH2 0xD32 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xD32 JUMPI PUSH2 0x23E PUSH2 0xD52 PUSH2 0x1139 JUMP JUMPDEST PUSH2 0xD5A PUSH2 0x1353 JUMP JUMPDEST PUSH2 0x1678 JUMP JUMPDEST DUP4 CALLVALUE PUSH2 0xD32 JUMPI PUSH2 0x100 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xD32 JUMPI PUSH2 0xD7A PUSH2 0x1139 JUMP JUMPDEST PUSH2 0xD82 PUSH2 0x114F JUMP JUMPDEST PUSH2 0xD8A PUSH2 0x1165 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 PUSH1 0x84 CALLDATALOAD DUP4 DUP2 AND SWAP2 SWAP1 DUP3 SWAP1 SUB PUSH2 0x9A1 JUMPI DUP4 DUP1 SWAP3 PUSH2 0xDAE PUSH2 0x117B JUMP JUMPDEST SWAP1 DUP3 PUSH2 0xDB8 PUSH2 0x1191 JUMP JUMPDEST SWAP5 DUP2 PUSH2 0xDC2 PUSH2 0x11A7 JUMP JUMPDEST SWAP9 PUSH2 0xDCB PUSH2 0x1353 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL SWAP13 AND DUP13 PUSH1 0x6A SLOAD AND OR PUSH1 0x6A SSTORE AND DUP11 PUSH1 0x6B SLOAD AND OR PUSH1 0x6B SSTORE AND DUP9 PUSH1 0x6C SLOAD AND OR PUSH1 0x6C SSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x6D SSTORE DUP8 PUSH1 0x70 SLOAD AND OR PUSH1 0x70 SSTORE AND DUP6 PUSH1 0x6E SLOAD AND OR PUSH1 0x6E SSTORE AND DUP4 PUSH1 0x6F SLOAD AND OR PUSH1 0x6F SSTORE AND SWAP1 PUSH1 0x71 SLOAD AND OR PUSH1 0x71 SSTORE DUP1 RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x1B7 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1B7 JUMPI PUSH1 0x33 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x1B7 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1B7 JUMPI PUSH1 0x67 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP3 DUP5 CALLVALUE PUSH2 0xD32 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xD32 JUMPI DUP2 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x68 SLOAD DUP1 DUP6 MSTORE PUSH1 0x20 DUP1 SWAP6 ADD SWAP5 PUSH1 0x68 DUP4 MSTORE PUSH32 0xA2153420D844928B4421650203C77BABC8B33D7F2E7B450E2966DB0C22097753 SWAP3 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0xEDB JUMPI PUSH2 0x30C DUP7 DUP7 PUSH2 0xAEB DUP3 DUP12 SUB DUP4 PUSH2 0x147E JUMP JUMPDEST DUP4 SLOAD DUP8 MSTORE SWAP6 DUP7 ADD SWAP6 PUSH1 0x1 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP2 ADD SWAP1 PUSH2 0xEC3 JUMP JUMPDEST DUP4 SWAP1 CALLVALUE PUSH2 0x1B7 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1B7 JUMPI CALLDATALOAD DUP1 ISZERO ISZERO DUP1 SWAP2 SUB PUSH2 0x1B7 JUMPI PUSH2 0xF18 PUSH2 0x1353 JUMP JUMPDEST PUSH1 0xFF DUP1 NOT PUSH1 0x75 SLOAD AND SWAP2 AND OR PUSH1 0x75 SSTORE DUP1 RETURN JUMPDEST DUP4 CALLVALUE PUSH2 0xD32 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xD32 JUMPI PUSH2 0xF42 PUSH2 0x1353 JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP1 LOG3 DUP1 RETURN JUMPDEST SWAP2 SWAP1 POP CALLVALUE PUSH2 0x293 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x293 JUMPI PUSH1 0x24 CALLDATALOAD SWAP2 PUSH3 0xFFFFFF DUP4 AND DUP1 SWAP4 SUB PUSH2 0xFCB JUMPI PUSH2 0xFB2 PUSH2 0x1353 JUMP JUMPDEST CALLDATALOAD DUP4 MSTORE PUSH1 0x73 PUSH1 0x20 MSTORE DUP3 KECCAK256 SWAP1 PUSH3 0xFFFFFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE DUP1 RETURN JUMPDEST DUP4 DUP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x1B7 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1B7 JUMPI PUSH1 0x20 SWAP1 PUSH1 0xFF PUSH1 0x75 SLOAD AND SWAP1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x1B7 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1B7 JUMPI PUSH1 0x66 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST SWAP1 POP CALLVALUE PUSH2 0x293 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x293 JUMPI DUP2 PUSH1 0x20 SWAP4 PUSH3 0xFFFFFF SWAP3 CALLDATALOAD DUP2 MSTORE PUSH1 0x73 DUP6 MSTORE KECCAK256 SLOAD AND SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x1B7 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1B7 JUMPI PUSH1 0x70 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x1B7 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1B7 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x79 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x1B7 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1B7 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x6D SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x1B7 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1B7 JUMPI PUSH1 0x6A SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST DUP5 SWAP1 CALLVALUE PUSH2 0x1B7 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1B7 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x76 SLOAD DUP2 MSTORE RETURN JUMPDEST PUSH1 0x20 SWAP1 DUP2 PUSH1 0x40 DUP2 DUP4 ADD SWAP3 DUP3 DUP2 MSTORE DUP6 MLOAD DUP1 SWAP5 MSTORE ADD SWAP4 ADD SWAP2 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x111C JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x110E JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x60A JUMPI JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x60A JUMPI JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x60A JUMPI JUMP JUMPDEST PUSH1 0xA4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x60A JUMPI JUMP JUMPDEST PUSH1 0xC4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x60A JUMPI JUMP JUMPDEST PUSH1 0xE4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x60A JUMPI JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x11D0 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x11C0 JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP4 MLOAD AND DUP3 MSTORE PUSH1 0x20 DUP4 ADD MLOAD AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP3 ADD MLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP3 ADD MLOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP3 ADD MLOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 DUP1 DUP4 ADD MLOAD SWAP1 PUSH1 0x8 DUP3 LT ISZERO PUSH2 0x129F JUMPI DUP3 ADD MSTORE PUSH2 0x120 DUP1 DUP4 ADD MLOAD SWAP1 PUSH1 0x3 DUP3 LT ISZERO PUSH2 0x129F JUMPI DUP3 ADD MSTORE PUSH2 0x140 DUP1 DUP4 ADD MLOAD SWAP3 PUSH2 0x180 DUP1 SWAP3 DUP5 ADD MSTORE DUP4 MLOAD DUP1 SWAP3 DUP5 ADD MSTORE PUSH2 0x1288 DUP3 PUSH2 0x1A0 SWAP6 PUSH1 0x20 DUP8 DUP8 ADD SWAP2 ADD PUSH2 0x11BD JUMP JUMPDEST PUSH2 0x160 SWAP1 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 ADD SWAP1 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 SWAP3 MSTORE PUSH1 0x40 DUP4 ADD SWAP3 DUP2 PUSH1 0x40 DUP5 PUSH1 0x5 SHL DUP4 ADD ADD SWAP6 ADD SWAP4 PUSH1 0x0 SWAP2 JUMPDEST DUP5 DUP4 LT PUSH2 0x12E9 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 DUP5 DUP1 PUSH2 0x1307 PUSH1 0x1 SWAP4 PUSH1 0x3F NOT DUP7 DUP3 SUB ADD DUP8 MSTORE DUP11 MLOAD PUSH2 0x11E0 JUMP JUMPDEST SWAP9 ADD SWAP4 ADD SWAP4 ADD SWAP2 SWAP5 SWAP4 SWAP3 SWAP1 PUSH2 0x12D9 JUMP JUMPDEST CALLVALUE PUSH2 0x60A JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x60A JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1338 PUSH2 0x1139 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x69 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD ISZERO ISZERO PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x1367 JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 AND DUP2 OR SWAP1 SWAP3 SSTORE SWAP1 SWAP2 AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x0 DUP1 LOG3 JUMP JUMPDEST ISZERO PUSH2 0x13FB JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x1468 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x1468 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x14AD JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x1468 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 NOT DUP2 EQ PUSH2 0x14AD JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x69 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x1581 JUMPI PUSH1 0x68 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 LT ISZERO PUSH2 0x156D JUMPI PUSH1 0x1 DUP2 ADD DUP1 PUSH1 0x68 SSTORE DUP2 LT ISZERO PUSH2 0x1559 JUMPI SWAP1 DUP3 PUSH1 0x40 SWAP3 PUSH32 0xA2153420D844928B4421650203C77BABC8B33D7F2E7B450E2966DB0C22097753 ADD SSTORE PUSH1 0x68 SLOAD SWAP3 DUP2 MSTORE PUSH1 0x69 PUSH1 0x20 MSTORE KECCAK256 SSTORE PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x1 DUP4 ADD PUSH1 0x0 SWAP1 DUP3 DUP3 MSTORE DUP1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 SLOAD ISZERO PUSH1 0x0 EQ PUSH2 0x1605 JUMPI DUP5 SLOAD SWAP5 PUSH1 0x1 PUSH1 0x40 SHL DUP7 LT ISZERO PUSH2 0x15F1 JUMPI PUSH1 0x1 DUP7 ADD DUP1 DUP3 SSTORE DUP7 LT ISZERO PUSH2 0x15DD JUMPI DUP4 PUSH1 0x40 SWAP5 SWAP6 SWAP7 DUP3 DUP6 MSTORE PUSH1 0x20 DUP6 KECCAK256 ADD SSTORE SLOAD SWAP4 DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SSTORE PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST POP SWAP3 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x180 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x1468 JUMPI PUSH1 0x40 MSTORE DUP2 PUSH2 0x160 PUSH1 0x0 SWAP2 DUP3 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE DUP3 PUSH1 0x80 DUP3 ADD MSTORE DUP3 PUSH1 0xA0 DUP3 ADD MSTORE DUP3 PUSH1 0xC0 DUP3 ADD MSTORE DUP3 PUSH1 0xE0 DUP3 ADD MSTORE DUP3 PUSH2 0x100 DUP3 ADD MSTORE DUP3 PUSH2 0x120 DUP3 ADD MSTORE PUSH1 0x60 PUSH2 0x140 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST DUP1 EXTCODESIZE ISZERO PUSH2 0x16C5 JUMPI PUSH1 0x65 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 DUP3 OR SWAP1 SSTORE PUSH32 0x7213E3D637E4EF4968F947D5F602103307355F708BFD5BFCE9D87DA7C78F8521 PUSH1 0x0 DUP1 LOG2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x464E44436F6C6C656374696F6E466163746F72793A2050726F78792063616C6C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x2061646472657373206973206E6F74206120636F6E7472616374000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH2 0x1738 PUSH2 0x160B JUMP JUMPDEST POP PUSH2 0x1741 PUSH2 0x160B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP1 DUP3 MSTORE PUSH1 0x40 DUP1 MLOAD PUSH4 0x8DA5CB5B PUSH1 0xE0 SHL DUP2 MSTORE SWAP3 SWAP4 PUSH1 0x4 SWAP4 SWAP2 SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP4 DUP2 DUP8 DUP2 DUP7 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x1BB7 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x1B81 JUMPI JUMPDEST POP AND DUP6 DUP4 ADD MSTORE DUP3 MLOAD PUSH4 0x5C63ED69 PUSH1 0xE0 SHL DUP2 MSTORE DUP3 DUP2 DUP7 DUP2 DUP6 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x19E7 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x1B54 JUMPI JUMPDEST POP DUP6 DUP5 ADD MSTORE DUP3 MLOAD PUSH4 0x4C38D877 PUSH1 0xE0 SHL DUP2 MSTORE DUP3 DUP2 DUP7 DUP2 DUP6 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x19E7 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x1B27 JUMPI JUMPDEST POP PUSH1 0x60 DUP7 ADD MSTORE DUP3 MLOAD PUSH4 0x48BF3BB PUSH1 0xE1 SHL DUP2 MSTORE DUP3 DUP2 DUP7 DUP2 DUP6 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x19E7 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x1AFA JUMPI JUMPDEST POP PUSH1 0x80 DUP7 ADD MSTORE DUP3 MLOAD PUSH4 0xBC83617 PUSH1 0xE1 SHL DUP2 MSTORE DUP3 DUP2 DUP7 DUP2 DUP6 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x19E7 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x1ACD JUMPI JUMPDEST POP PUSH1 0xA0 DUP7 ADD MSTORE DUP3 MLOAD PUSH4 0xD24E0C87 PUSH1 0xE0 SHL DUP2 MSTORE DUP3 DUP2 DUP7 DUP2 DUP6 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x19E7 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x1AA0 JUMPI JUMPDEST POP PUSH1 0xC0 DUP7 ADD MSTORE DUP3 MLOAD PUSH4 0xFAEB5E17 PUSH1 0xE0 SHL DUP2 MSTORE DUP3 DUP2 DUP7 DUP2 DUP6 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x19E7 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x1A73 JUMPI JUMPDEST POP PUSH1 0xE0 DUP7 ADD MSTORE DUP3 MLOAD PUSH4 0x2734EAB PUSH1 0xE5 SHL DUP2 MSTORE DUP3 DUP2 DUP7 DUP2 DUP6 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x19E7 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x1A3D JUMPI JUMPDEST POP PUSH1 0x8 DUP2 LT ISZERO PUSH2 0x19F2 JUMPI PUSH2 0x100 DUP7 ADD MSTORE DUP3 MLOAD PUSH4 0x10A38F5 PUSH1 0xE0 SHL DUP2 MSTORE DUP3 DUP2 DUP7 DUP2 DUP6 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x19E7 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x1A07 JUMPI JUMPDEST POP PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x19F2 JUMPI PUSH2 0x120 DUP7 ADD MSTORE DUP3 MLOAD PUSH4 0x54FD4D5 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x0 DUP2 DUP7 DUP2 DUP6 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x19E7 JUMPI SWAP1 DUP4 SWAP3 SWAP2 PUSH1 0x0 SWAP2 PUSH2 0x196B JUMPI JUMPDEST POP PUSH2 0x140 DUP8 ADD MSTORE DUP4 MLOAD PUSH4 0x32946A87 PUSH1 0xE0 SHL DUP2 MSTORE SWAP5 DUP6 SWAP2 DUP3 SWAP1 GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x1961 JUMPI POP PUSH1 0x0 SWAP2 PUSH2 0x1935 JUMPI JUMPDEST POP PUSH2 0x160 DUP4 ADD MSTORE POP SWAP1 JUMP JUMPDEST DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x195A JUMPI JUMPDEST PUSH2 0x1949 DUP2 DUP4 PUSH2 0x147E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0xD32 JUMPI POP MLOAD DUP1 CODESIZE PUSH2 0x192A JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x193F JUMP JUMPDEST MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP2 SWAP3 POP RETURNDATASIZE DUP1 DUP3 DUP5 RETURNDATACOPY PUSH2 0x197D DUP2 DUP5 PUSH2 0x147E JUMP JUMPDEST DUP3 ADD SWAP2 DUP5 DUP2 DUP5 SUB SLT PUSH2 0x1B7 JUMPI DUP1 MLOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x293 JUMPI ADD DUP3 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x1B7 JUMPI DUP1 MLOAD SWAP2 PUSH2 0x19B3 DUP4 PUSH2 0x14C3 JUMP JUMPDEST SWAP4 PUSH2 0x19C0 DUP9 MLOAD SWAP6 DUP7 PUSH2 0x147E JUMP JUMPDEST DUP4 DUP6 MSTORE DUP7 DUP5 DUP5 ADD ADD GT PUSH2 0xD32 JUMPI POP DUP3 SWAP2 PUSH2 0x19E1 SWAP2 DUP7 DUP1 DUP1 SWAP8 SWAP7 ADD SWAP2 ADD PUSH2 0x11BD JUMP JUMPDEST CODESIZE PUSH2 0x1900 JUMP JUMPDEST DUP5 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x21 DUP6 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP4 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x1A36 JUMPI JUMPDEST PUSH2 0x1A1C DUP2 DUP4 PUSH2 0x147E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x1B7 JUMPI MLOAD SWAP1 PUSH1 0x3 DUP3 LT ISZERO PUSH2 0xD32 JUMPI POP CODESIZE PUSH2 0x18C9 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1A12 JUMP JUMPDEST DUP4 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x1A6C JUMPI JUMPDEST PUSH2 0x1A52 DUP2 DUP4 PUSH2 0x147E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x1B7 JUMPI MLOAD SWAP1 PUSH1 0x8 DUP3 LT ISZERO PUSH2 0xD32 JUMPI POP CODESIZE PUSH2 0x1897 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1A48 JUMP JUMPDEST SWAP1 DUP4 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x1A99 JUMPI JUMPDEST PUSH2 0x1A89 DUP2 DUP4 PUSH2 0x147E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0xD32 JUMPI POP MLOAD CODESIZE PUSH2 0x186F JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1A7F JUMP JUMPDEST SWAP1 DUP4 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x1AC6 JUMPI JUMPDEST PUSH2 0x1AB6 DUP2 DUP4 PUSH2 0x147E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0xD32 JUMPI POP MLOAD CODESIZE PUSH2 0x1847 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1AAC JUMP JUMPDEST SWAP1 DUP4 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x1AF3 JUMPI JUMPDEST PUSH2 0x1AE3 DUP2 DUP4 PUSH2 0x147E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0xD32 JUMPI POP MLOAD CODESIZE PUSH2 0x181F JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1AD9 JUMP JUMPDEST SWAP1 DUP4 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x1B20 JUMPI JUMPDEST PUSH2 0x1B10 DUP2 DUP4 PUSH2 0x147E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0xD32 JUMPI POP MLOAD CODESIZE PUSH2 0x17F7 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1B06 JUMP JUMPDEST SWAP1 DUP4 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x1B4D JUMPI JUMPDEST PUSH2 0x1B3D DUP2 DUP4 PUSH2 0x147E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0xD32 JUMPI POP MLOAD CODESIZE PUSH2 0x17CF JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1B33 JUMP JUMPDEST SWAP1 DUP4 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x1B7A JUMPI JUMPDEST PUSH2 0x1B6A DUP2 DUP4 PUSH2 0x147E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0xD32 JUMPI POP MLOAD CODESIZE PUSH2 0x17A8 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1B60 JUMP JUMPDEST DUP5 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x1BB0 JUMPI JUMPDEST PUSH2 0x1B96 DUP2 DUP4 PUSH2 0x147E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x1B7 JUMPI MLOAD SWAP1 DUP3 DUP3 AND DUP3 SUB PUSH2 0xD32 JUMPI POP CODESIZE PUSH2 0x1780 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1B8C JUMP JUMPDEST DUP6 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x1468 JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x1BEE JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x1C0F DUP2 PUSH2 0x1BC2 JUMP JUMPDEST SWAP2 PUSH2 0x1C1D PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x147E JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x1F NOT PUSH2 0x1C2C DUP4 PUSH2 0x1BC2 JUMP JUMPDEST ADD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x1C89 JUMPI POP POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x1C49 JUMPI POP POP POP SWAP1 JUMP JUMPDEST PUSH2 0x1C84 SWAP1 PUSH2 0x1C69 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1C62 DUP4 DUP7 PUSH2 0x1BDA JUMP JUMPDEST MLOAD AND PUSH2 0x1730 JUMP JUMPDEST PUSH2 0x1C73 DUP3 DUP8 PUSH2 0x1BDA JUMP JUMPDEST MSTORE PUSH2 0x1C7E DUP2 DUP7 PUSH2 0x1BDA JUMP JUMPDEST POP PUSH2 0x14DF JUMP JUMPDEST PUSH2 0x1C3C JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH2 0x1C94 PUSH2 0x160B JUMP JUMPDEST DUP3 DUP3 DUP9 ADD ADD MSTORE ADD PUSH2 0x1C30 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ISZERO POP 0xA7 0xD1 0xC3 XOR EXTCODEHASH DUP3 0xD2 PUSH7 0xFEA7C3CA83126C 0x5E 0xE7 CREATE DUP16 SLT EXP 0xEC 0xB1 0xE8 0xCF DUP14 0x49 0x2F 0x2A 0x2A PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"732:7855:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5217:45;732:7855;5217:45;;;732:7855;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3944:15;732:7855;;;-1:-1:-1;;;;;732:7855:9;;;;;;;;;;;;;;;;;;;;;;;;;;;1531:20;732:7855;;;;;;;;;;;;;;;;;;;;3846:18;732:7855;;;-1:-1:-1;;;;;732:7855:9;;;;;;;;;;;;;;;;-1:-1:-1;;732:7855:9;;;;;;:::i;:::-;1303:62:0;;;:::i;:::-;-1:-1:-1;;;;;732:7855:9;;2402:22:0;732:7855:9;;2496:8:0;;;;:::i;:::-;732:7855:9;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;732:7855:9;;;;;;;;;;;;;;;;;;;;;;;;;;;6884:5;732:7855;;;;;;;;;6884:5;732:7855;;;;;;;;;;;;;6870:29;732:7855;;;;;;;:::i;:::-;6870:29;:::i;:::-;732:7855;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;732:7855:9;;;;;;6749:18;732:7855;;:::i;:::-;;;:::i;:::-;;6749:18;:::i;:::-;732:7855;;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;732:7855:9;;;;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;-1:-1:-1;;;;;732:7855:9;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;3301:14:2;3347:34;;;;;;732:7855:9;3346:108:2;;;;732:7855:9;;;;;;5366:69:2;732:7855:9;;;;;;;;;;3562:65:2;;732:7855:9;;5366:69:2;732:7855:9;;;;;;5366:69:2;;;:::i;:::-;;:::i;:::-;1195:12:0;929:10:4;1195:12:0;:::i;:::-;732:7855:9;;;;5366:69:2;:::i;:::-;1195:12:0;929:10:4;1195:12:0;:::i;:::-;1303:62;;:::i;:::-;929:10:4;2402:22:0;732:7855:9;;929:10:4;;;;;;;;;;;2496:8:0;929:10:4;2496:8:0;:::i;:::-;2299:18:9;;;:::i;:::-;732:7855;-1:-1:-1;;;;;732:7855:9;;;;;2329:28;732:7855;;;2329:28;732:7855;;;2329:8;732:7855;;;2329:8;732:7855;;2445:20;732:7855;;;2445:20;732:7855;;;2490:18;732:7855;;;2531:18;732:7855;;;2531:18;732:7855;;;2572:18;732:7855;;;2572:18;732:7855;;;2613:17;732:7855;;;2613:17;732:7855;;2652:15;732:7855;;;2652:15;732:7855;;;2687:50;732:7855;;;2687:50;732:7855;929:10:4;732:7855:9;2747:28;732:7855;;;2747:28;732:7855;2445:20;2785:9;732:7855;;2804:9;732:7855;;2823:9;732:7855;3647:99:2;;732:7855:9;;;3647:99:2;732:7855:9;3721:14:2;732:7855:9;;;;;;;;;;;;3721:14:2;732:7855:9;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;732:7855:9;;;;;3562:65:2;-1:-1:-1;;732:7855:9;;;;;3562:65:2;;;732:7855:9;;;-1:-1:-1;;;732:7855:9;;;;;;;;;;;;;;;;;-1:-1:-1;;;732:7855:9;;;;;;;3346:108:2;3426:4;;1713:19:3;:23;3387:66:2;;3346:108;3387:66;732:7855:9;;;;;3436:17:2;3346:108;;3347:34;732:7855:9;;;;;3365:16:2;3347:34;;732:7855:9;;;;;;;;;;;;;;;;;;3543:20;732:7855;;;-1:-1:-1;;;;;732:7855:9;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5234:10:9;732:7855;;;5217:45;;;;732:7855;;;5246:15;732:7855;;;;;;;;5217:45;;;-1:-1:-1;;;732:7855:9;5217:45;;;;732:7855;;5217:45;:::i;:::-;732:7855;5207:56;;5290:14;732:7855;;5366:1;732:7855;;;;;;;;;5234:10;732:7855;;-1:-1:-1;;732:7855:9;8545:32;;;732:7855;;;;;;;;;;2273:565:1;;8545:32:9;;;732:7855;;;;8545:32;;;;;;;;:::i;:::-;732:7855;8535:43;;2273:565:1;;;;;;;;;;;;;;;-1:-1:-1;;2273:565:1;;;;-1:-1:-1;;;;;732:7855:9;;;2273:565:1;;;;732:7855:9;2855:22:1;;;732:7855:9;;;5486:28;732:7855;;5528:5;732:7855;2273:565:1;732:7855:9;;5566:5;732:7855;5389:192;;;;;732:7855;;-1:-1:-1;;;5389:192:9;;5234:10;5389:192;;;732:7855;;;5467:4;732:7855;;;;-1:-1:-1;;;;;732:7855:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5389:192;;;;;;;;;;;;;;;732:7855;;;;;;5486:28;732:7855;;;;;;;;;;;5613:103;;5234:10;5613:103;;;732:7855;5613:103;;;;;;;;;;;732:7855;;;;;7161:8;732:7855;;;;;;;7143:55;;;;;;;;;;;;;;;;;;732:7855;5780:9;;:29;732:7855;;5780:9;;;;;;5858:83;;;732:7855;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;6142:26;732:7855;;5994:17;;732:7855;5994:17;:::i;:::-;;732:7855;8409:50:8;;;:::i;:::-;;5234:10:9;732:7855;;6086:9;732:7855;;8409:50:8;732:7855:9;;;;8409:50:8;:::i;:::-;;732:7855:9;6142:26;;;732:7855;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;732:7855:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;732:7855:9;;;;;7143:55;;;;;;;;;;;;;;;;:::i;:::-;;;732:7855;;;;;7143:55;;;;;;;;;732:7855;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;732:7855:9;;;;;5613:103;;;;;;;;;;;;;;;;:::i;:::-;;;732:7855;;;;;;;;;;;;5613:103;;;732:7855;;;;5613:103;;;;;5389:192;;;;:::i;:::-;732:7855;;5389:192;;;;732:7855;;;;5389:192;732:7855;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;732:7855:9;;;;;;;;;;;;;;;;;;;;;;3645:17;732:7855;;;-1:-1:-1;;;;;732:7855:9;;;;;;;;;;;;;;;;;;;;;;;;1557:20;732:7855;;;;;;;;;;;;;;;;;;;;;1069:35;732:7855;;;-1:-1:-1;;;;;732:7855:9;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;732:7855:9;;:::i;:::-;;;;6426:9;732:7855;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;732:7855:9;;;;;;:::i;:::-;;;;;;;;;1303:62:0;;;:::i;:::-;1713:19:3;;:23;732:7855:9;;;;;;;;;;;;-1:-1:-1;;;;;732:7855:9;;7850:32;732:7855;;;7850:32;732:7855;;7966:16;732:7855;;7996:16;732:7855;;8026:16;732:7855;8171:28;732:7855;;8063:203;;;;;732:7855;;-1:-1:-1;;;8063:203:9;;8120:10;8063:203;;;732:7855;;;8152:4;732:7855;;;;-1:-1:-1;;;;;732:7855:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8063:203;;;;;;;;;;;;;;732:7855;8306:5;;732:7855;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8295:44;:33;;;;;:::i;:::-;:44;:::i;:::-;8355:47;;;;;732:7855;;;-1:-1:-1;;;732:7855:9;;;;;;;;8063:203;;;;;;;:::i;:::-;;;;;;732:7855;;;;;;;;8063:203;732:7855;;;;;-1:-1:-1;;;732:7855:9;;;;;;;;;;;;;;;;;-1:-1:-1;;;732:7855:9;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;732:7855:9;;:::i;:::-;;;;6598:9;732:7855;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6584:39;732:7855;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;732:7855:9;;;;3223:18;732:7855;;:::i;:::-;1303:62:0;;:::i;:::-;3223:18:9;:::i;732:7855::-;;;;;;;-1:-1:-1;;732:7855:9;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;-1:-1:-1;;;;;732:7855:9;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;:::i;:::-;1303:62:0;;;:::i;:::-;732:7855:9;-1:-1:-1;;;;;732:7855:9;;;;;4741:8;732:7855;;;4741:8;732:7855;;;4787:28;732:7855;;;4787:28;732:7855;;;4839:20;732:7855;;;4839:20;732:7855;;;4886:18;732:7855;;4929:18;732:7855;;;4929:18;732:7855;;;4973:18;732:7855;;;4973:18;732:7855;;;5017:17;732:7855;;;5017:17;732:7855;;;5059:15;732:7855;;;5059:15;732:7855;;;;;;;;;;;;;;;;;1513:6:0;732:7855:9;;;-1:-1:-1;;;;;732:7855:9;;;;;;;;;;;;;;;;;;;;;;1146:30;732:7855;;;-1:-1:-1;;;;;732:7855:9;;;;;;;;;;;;;;;;;;;;;;;;;;;6290:5;732:7855;;;;;;;;;6290:5;732:7855;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;732:7855:9;;;;;;;;;;;;;1303:62:0;;:::i;:::-;732:7855:9;;;4281:28;732:7855;;;;;4281:28;732:7855;;;;;;;;;;;;;;;;1303:62:0;;:::i;:::-;2758:6;732:7855:9;;-1:-1:-1;;;;;;732:7855:9;;;;;;;-1:-1:-1;;;;;732:7855:9;2806:40:0;732:7855:9;;2806:40:0;732:7855:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;1303:62:0;;:::i;:::-;732:7855:9;;;4170:9;732:7855;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1456:31;732:7855;;;;;;;;;;;;;;;;;;;;;;;;1111:29;732:7855;;;-1:-1:-1;;;;;732:7855:9;;;;;;;;;;;;;;;;-1:-1:-1;;732:7855:9;;;;;;;;;;;;4059:9;732:7855;;;;;;;;;;;;;;;;;;;;;;;;;3745:18;732:7855;;;-1:-1:-1;;;;;732:7855:9;;;;;;;;;;;;;;;;;;;;;;;;1583:20;732:7855;;;;;;;;;;;;;;;;;;;;;;;3440:18;732:7855;;;;;;;;;;;;;;;;;;;;;3332:8;732:7855;;;-1:-1:-1;;;;;732:7855:9;;;;;;;;;;;;;;;;;;;;;;;;1494:30;732:7855;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;732:7855:9;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;732:7855:9;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;732:7855:9;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;732:7855:9;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;732:7855:9;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;732:7855:9;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;732:7855:9;;;;;;:::o;:::-;;;;;;;;-1:-1:-1;;732:7855:9;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;5217:45;732:7855;-1:-1:-1;;732:7855:9;;;;:::o;:::-;;;;-1:-1:-1;732:7855:9;;;;;-1:-1:-1;732:7855:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;732:7855:9;;;;-1:-1:-1;;;;;732:7855:9;;:::i;:::-;;-1:-1:-1;732:7855:9;4362:12:8;732:7855:9;;;;-1:-1:-1;732:7855:9;;4362:24:8;;732:7855:9;;;;;;1599:130:0;1513:6;732:7855:9;-1:-1:-1;;;;;732:7855:9;929:10:4;1662:23:0;732:7855:9;;1599:130:0:o;732:7855:9:-;;;;;;;;;;;;;;;;;;;;;;;;;2666:187:0;2758:6;732:7855:9;;-1:-1:-1;;;;;732:7855:9;;;-1:-1:-1;;;;;;732:7855:9;;;;;;;;;;2806:40:0;-1:-1:-1;;2806:40:0;2666:187::o;732:7855:9:-;;;;:::o;:::-;;;-1:-1:-1;;;732:7855:9;;;;;;;;;;;;;;;;;-1:-1:-1;;;732:7855:9;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;5217:45;;;732:7855;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;5217:45;732:7855;-1:-1:-1;;732:7855:9;;;;:::o;:::-;-1:-1:-1;;732:7855:9;;;;;;;:::o;2225:404:8:-;-1:-1:-1;732:7855:9;;;4362:12:8;732:7855:9;;;;;;;;6051:5;732:7855;-1:-1:-1;;;732:7855:9;;;;;4362:12:8;732:7855:9;;;6051:5;732:7855;;;;;;;;;;;;;6051:5;732:7855;;;;4362:12:8;732:7855:9;;;;4362:12:8;2558:11;:::o;732:7855:9:-;-1:-1:-1;;;732:7855:9;;;;;;;;;-1:-1:-1;;;732:7855:9;;;;;;;;2304:319:8;2600:12;;;:::o;2225:404::-;;;4362:12;;;-1:-1:-1;732:7855:9;;;;;;;;;;;4362:24:8;2304:319;732:7855:9;;;;;;-1:-1:-1;;;732:7855:9;;;;;4362:12:8;732:7855:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4362:12:8;2558:11;:::o;732:7855:9:-;-1:-1:-1;;;732:7855:9;;;;;;;;;-1:-1:-1;;;732:7855:9;;;;;;;;2304:319:8;-1:-1:-1;2600:12:8;-1:-1:-1;;2600:12:8:o;732:7855:9:-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;732:7855:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;7211:343::-;1713:19:3;;:23;732:7855:9;;7437:50;732:7855;;-1:-1:-1;;;;;;732:7855:9;-1:-1:-1;;;;;732:7855:9;;;;;;;;;7503:44;-1:-1:-1;;7503:44:9;7211:343::o;732:7855::-;;;-1:-1:-1;;;732:7855:9;;;;;;;;;;;;;;;;;;;;;;;;;162:808:17;732:7855:9;;:::i;:::-;;;;:::i;:::-;-1:-1:-1;;;;;732:7855:9;;;;;;;;;-1:-1:-1;;;407:20:17;;732:7855:9;;407:20:17;;732:7855:9;;407:20:17;;732:7855:9;;;407:20:17;732:7855:9;407:20:17;732:7855:9;;407:20:17;;;;;;;;;;;162:808;-1:-1:-1;732:7855:9;397:7:17;;;732:7855:9;;;-1:-1:-1;;;453:29:17;;397:7;732:7855:9;453:29:17;732:7855:9;453:29:17;;;;;;;;407:20;453:29;;;162:808;-1:-1:-1;437:13:17;;;732:7855:9;;;-1:-1:-1;;;507:28:17;;;732:7855:9;507:28:17;732:7855:9;507:28:17;;;;;;;;407:20;507:28;;;162:808;-1:-1:-1;492:12:17;;;732:7855:9;;;-1:-1:-1;;;560:29:17;;;732:7855:9;560:29:17;732:7855:9;560:29:17;;;;;;;;407:20;560:29;;;162:808;-1:-1:-1;545:12:17;;;732:7855:9;;;-1:-1:-1;;;613:24:17;;;732:7855:9;613:24:17;732:7855:9;613:24:17;;;;;;;;407:20;613:24;;;162:808;-1:-1:-1;732:7855:9;599:11:17;;732:7855:9;;;-1:-1:-1;;;668:34:17;;;732:7855:9;668:34:17;732:7855:9;668:34:17;;;;;;;;407:20;668:34;;;162:808;-1:-1:-1;647:18:17;;;732:7855:9;;;-1:-1:-1;;;731:32:17;;;732:7855:9;731:32:17;732:7855:9;731:32:17;;;;;;;;407:20;731:32;;;162:808;-1:-1:-1;732:7855:9;712:16:17;;732:7855:9;;;-1:-1:-1;;;784:24:17;;;732:7855:9;784:24:17;732:7855:9;784:24:17;;;;;;;;407:20;784:24;;;162:808;732:7855:9;;;;;;;773:8:17;;;732:7855:9;;;-1:-1:-1;;;830:25:17;;;732:7855:9;830:25:17;732:7855:9;830:25:17;;;;;;;;407:20;830:25;;;162:808;732:7855:9;;;;;;;818:9:17;;;732:7855:9;;;-1:-1:-1;;;877:22:17;;407:20;732:7855:9;877:22:17;732:7855:9;877:22:17;;;;;;;;;;;;407:20;877:22;;;162:808;-1:-1:-1;865:9:17;;;:34;732:7855:9;;-1:-1:-1;;;920:24:17;;732:7855:9;;;;;920:24:17;;;;;;;;407:20;920:24;;;162:808;-1:-1:-1;909:8:17;;;732:7855:9;-1:-1:-1;909:8:17;162:808::o;920:24::-;;;;;;;;;;;;;:::i;:::-;;;732:7855:9;;;;;;920:24:17;;;;;;;;;;732:7855:9;;407:20:17;732:7855:9;;;;;877:22:17;;;;;;;;;;;;;:::i;:::-;;;732:7855:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;877:22:17;;;;732:7855:9;;;407:20:17;732:7855:9;;;;;;;;;;;407:20:17;732:7855:9;;;407:20:17;732:7855:9;830:25:17;;;;;;;;;;;;;;:::i;:::-;;;732:7855:9;;;;;;;;;;;;830:25:17;;;;;;;;;784:24;;;;;;;;;;;;;;:::i;:::-;;;732:7855:9;;;;;;;;;;;;784:24:17;;;;;;;;;731:32;;;;;;;;;;;;;;;:::i;:::-;;;732:7855:9;;;;;;731:32:17;;;;;;;;668:34;;;;;;;;;;;;;;;:::i;:::-;;;732:7855:9;;;;;;668:34:17;;;;;;;;613:24;;;;;;;;;;;;;;;:::i;:::-;;;732:7855:9;;;;;;613:24:17;;;;;;;;560:29;;;;;;;;;;;;;;;:::i;:::-;;;732:7855:9;;;;;;560:29:17;;;;;;;;507:28;;;;;;;;;;;;;;;:::i;:::-;;;732:7855:9;;;;;;507:28:17;;;;;;;;453:29;;;;;;;;;;;;;;;:::i;:::-;;;732:7855:9;;;;;;453:29:17;;;;;;;;407:20;;;;;;;;;;;;;;:::i;:::-;;;732:7855:9;;;;;;;;;;;;;407:20:17;;;;;;;;;;732:7855:9;;;407:20:17;732:7855:9;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;976:338:17;732:7855:9;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;-1:-1:-1;;732:7855:9;;;:::i;:::-;;-1:-1:-1;732:7855:9;;;;;;1205:13:17;;-1:-1:-1;1220:7:17;;;;;;1299:8;;;976:338;:::o;1229:3::-;;;1255:23;-1:-1:-1;;;;;1268:9:17;732:7855:9;1268:9:17;;:::i;:::-;732:7855:9;;1255:23:17;:::i;:::-;1248:30;;;;:::i;:::-;;;;;;:::i;:::-;;1229:3;:::i;:::-;1205:13;;732:7855:9;;;;;:::i;:::-;;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"1476400","executionCost":"25765","totalCost":"1502165"},"external":{"adminUpdateImplementation(address,uint256,uint256,uint256)":"infinite","adminUpdateProxyCallContract(address)":"30761","buildFeed()":"infinite","burnEnabled()":"2446","changeMultipleSettings(address,address,address,bytes32,address,address,address,address)":"194808","contractCounter()":"2271","daiToken()":"2763","defaultOperator()":"2565","easContract()":"2807","easSchema()":"2324","getFeedInfo(address)":"infinite","getFeeds()":"infinite","getFeedsInfo()":"infinite","getFeedsInfoOwned(address)":"infinite","getFeedsOwned(address)":"infinite","getRouterFee(uint256)":"2460","implementation()":"2433","initialize(address,address,address,address,bytes32,address,address,address,address)":"infinite","isContractCreated(address)":"2970","isFeed(address)":"3036","major()":"2962","minor()":"2720","museToken()":"2961","owner()":"2587","patch()":"2346","proxyCallContract()":"2719","renounceOwnership()":"28282","router()":"3000","setBurnEnabled(bool)":"26799","setRouterFee(uint256,uint24)":"26820","transferOwnership(address)":"28882","treasuryContract()":"2323","wethToken()":"2389"},"internal":{"_getSalt(address,uint256)":"infinite","_updateImplementation(address,uint256,uint256,uint256)":"infinite","_updateProxyCallContract(address)":"infinite","getCreationFee()":"infinite"}},"methodIdentifiers":{"adminUpdateImplementation(address,uint256,uint256,uint256)":"b19bcb58","adminUpdateProxyCallContract(address)":"a17bb199","buildFeed()":"ca5b4e5c","burnEnabled()":"5dc96d16","changeMultipleSettings(address,address,address,bytes32,address,address,address,address)":"9496d7f1","contractCounter()":"067bd3b4","daiToken()":"be22f546","defaultOperator()":"80ca11fc","easContract()":"cd77b52c","easSchema()":"3ec4f23d","getFeedInfo(address)":"d570a66d","getFeeds()":"7fe955d4","getFeedsInfo()":"e86ef353","getFeedsInfoOwned(address)":"ad861324","getFeedsOwned(address)":"b2a2e9ca","getRouterFee(uint256)":"5978e9b0","implementation()":"5c60da1b","initialize(address,address,address,address,bytes32,address,address,address,address)":"d024dda8","isContractCreated(address)":"cedf3ba2","isFeed(address)":"e58fdd04","major()":"f86d0b38","minor()":"bb834b0e","museToken()":"f77800e5","owner()":"8da5cb5b","patch()":"49975235","proxyCallContract()":"bb7e3648","renounceOwnership()":"715018a6","router()":"f887ea40","setBurnEnabled(bool)":"7b2c835f","setRouterFee(uint256,uint24)":"6a3f9c30","transferOwnership(address)":"f2fde38b","treasuryContract()":"18da0011","wethToken()":"4b57b0be"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"FeedCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"ImplementationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_proxyCallContract\",\"type\":\"address\"}],\"name\":\"ProxyCallContractUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"major\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"patch\",\"type\":\"uint256\"}],\"name\":\"adminUpdateImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxyCallContract\",\"type\":\"address\"}],\"name\":\"adminUpdateProxyCallContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buildFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"ctx\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usersModule\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newEasContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"newEasSchema\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"wethTokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"museTokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiTokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"routerAddr\",\"type\":\"address\"}],\"name\":\"changeMultipleSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"easContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"easSchema\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getFeedInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellerStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentRequested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeRequested\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"postId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.Feed\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeds\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeedsInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellerStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentRequested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeRequested\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"postId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.Feed[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getFeedsInfoOwned\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellerStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentRequested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeRequested\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"postId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.Feed[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getFeedsOwned\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRouterFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxyCallContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usersModuleContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_easContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_easSchema\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_wethToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_museToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_daiToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"isContractCreated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeed\",\"type\":\"address\"}],\"name\":\"isFeed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"major\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"museToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"patch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyCallContract\",\"outputs\":[{\"internalType\":\"contract IProxyCall\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newBurnEnabled\",\"type\":\"bool\"}],\"name\":\"setBurnEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"setRouterFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/factories/MecenateFeedFactory.sol\":\"MecenateFeedFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary ClonesUpgradeable {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x3d98edeb5d5be8410fca707b73dabe7544d1dd11e35b73dd907c473fe43cc3ae\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x1c65595a26548a1b2263315b08a56334a2d7087319814437559c3c96025e939f\",\"license\":\"MIT\"},\"contracts/factories/MecenateFeedFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"../interfaces/IMecenateUsers.sol\\\";\\nimport \\\"../interfaces/IMecenateTreasury.sol\\\";\\nimport \\\"../modules/FeedViewer.sol\\\";\\nimport \\\"../interfaces/IProxyCall.sol\\\";\\nimport \\\"../interfaces/IFeedInitializer.sol\\\";\\n\\ncontract MecenateFeedFactory is Initializable, OwnableUpgradeable, FeedViewer {\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n    using ClonesUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    using AddressUpgradeable for address;\\n    using AddressUpgradeable for address payable;\\n\\n    IProxyCall public proxyCallContract;\\n\\n    address public implementation;\\n    address public defaultOperator;\\n\\n    EnumerableSetUpgradeable.AddressSet internal feeds;\\n    Structures.FactorySettings internal settings;\\n\\n    bytes internal feedByteCode;\\n\\n    mapping(uint256 => uint24) internal routerFee;\\n    mapping(address => EnumerableSetUpgradeable.AddressSet) internal feedStore;\\n\\n    bool public burnEnabled = false;\\n\\n    uint256 public contractCounter;\\n\\n    uint256 public major;\\n    uint256 public minor;\\n    uint256 public patch;\\n\\n    event FeedCreated(address indexed addr);\\n\\n    event ImplementationUpdated(\\n        address indexed implementation,\\n        uint256 indexed version\\n    );\\n\\n    event ProxyCallContractUpdated(address indexed _proxyCallContract);\\n\\n    function initialize(\\n        address _proxyCallContract,\\n        address _usersModuleContract,\\n        address _treasuryContract,\\n        address _easContract,\\n        bytes32 _easSchema,\\n        address _wethToken,\\n        address _museToken,\\n        address _daiToken,\\n        address _router\\n    ) public initializer {\\n        __Ownable_init();\\n        __Ownable_init_unchained();\\n\\n        transferOwnership(msg.sender);\\n        _updateProxyCallContract(_proxyCallContract);\\n\\n        settings.usersModuleContract = _usersModuleContract;\\n        settings.treasuryContract = _treasuryContract;\\n        settings.easContract = _easContract;\\n        settings.easSchema = _easSchema;\\n        settings.wethToken = _wethToken;\\n        settings.museToken = _museToken;\\n        settings.daiToken = _daiToken;\\n        settings.router = _router;\\n        proxyCallContract = IProxyCall(_proxyCallContract);\\n        defaultOperator = msg.sender;\\n        major = 2;\\n        minor = 0;\\n        patch = 0;\\n    }\\n\\n    function adminUpdateImplementation(\\n        address _implementation,\\n        uint256 major,\\n        uint256 minor,\\n        uint256 patch\\n    ) external onlyOwner {\\n        _updateImplementation(_implementation, major, minor, patch);\\n    }\\n\\n    function adminUpdateProxyCallContract(\\n        address _proxyCallContract\\n    ) external onlyOwner {\\n        _updateProxyCallContract(_proxyCallContract);\\n    }\\n\\n    function treasuryContract() external view returns (address) {\\n        return settings.treasuryContract;\\n    }\\n\\n    function easSchema() external view returns (bytes32) {\\n        return settings.easSchema;\\n    }\\n\\n    function easContract() external view returns (address) {\\n        return settings.easContract;\\n    }\\n\\n    function daiToken() external view returns (address) {\\n        return settings.daiToken;\\n    }\\n\\n    function wethToken() external view returns (address) {\\n        return settings.wethToken;\\n    }\\n\\n    function museToken() external view returns (address) {\\n        return settings.museToken;\\n    }\\n\\n    function router() external view returns (address) {\\n        return settings.router;\\n    }\\n\\n    function getRouterFee(uint256 tokenId) external view returns (uint24) {\\n        return routerFee[tokenId];\\n    }\\n\\n    function setRouterFee(uint256 tokenId, uint24 fee) external onlyOwner {\\n        routerFee[tokenId] = fee;\\n    }\\n\\n    function setBurnEnabled(bool newBurnEnabled) external onlyOwner {\\n        burnEnabled = newBurnEnabled;\\n    }\\n\\n    function isFeed(address newFeed) external view returns (bool) {\\n        return feeds.contains(newFeed);\\n    }\\n\\n    function changeMultipleSettings(\\n        address treasury,\\n        address usersModule,\\n        address newEasContract,\\n        bytes32 newEasSchema,\\n        address wethTokenAddr,\\n        address museTokenAddr,\\n        address daiTokenAddr,\\n        address routerAddr\\n    ) external onlyOwner {\\n        settings.treasuryContract = treasury;\\n        settings.usersModuleContract = usersModule;\\n        settings.easContract = newEasContract;\\n        settings.easSchema = newEasSchema;\\n        settings.wethToken = wethTokenAddr;\\n        settings.museToken = museTokenAddr;\\n        settings.daiToken = daiTokenAddr;\\n        settings.router = routerAddr;\\n    }\\n\\n    function buildFeed() external payable returns (address ctx) {\\n        uint256 nonce = uint256(\\n            keccak256(abi.encodePacked(msg.sender, block.timestamp))\\n        );\\n\\n        ctx = implementation.cloneDeterministic(\\n            _getSalt(msg.sender, nonce + 1)\\n        );\\n\\n        IFeedInitializer(ctx).initialize(\\n            msg.sender,\\n            address(this),\\n            settings.usersModuleContract,\\n            major,\\n            minor,\\n            patch\\n        );\\n\\n        require(\\n            IMecenateUsers(settings.usersModuleContract).checkifUserExist(\\n                msg.sender\\n            ),\\n            \\\"user does not exist\\\"\\n        );\\n\\n        require(msg.value >= getCreationFee(), \\\"NOT_ENOUGH_FEE\\\");\\n\\n        (bool _result, ) = payable(settings.treasuryContract).call{\\n            value: msg.value\\n        }(\\\"\\\");\\n\\n        require(_result, \\\"CALL_FAILED\\\");\\n\\n        contractCounter++;\\n\\n        address feed = ctx;\\n\\n        feeds.add(address(feed));\\n\\n        feedStore[msg.sender].add(address(feed));\\n\\n        emit FeedCreated(address(feed));\\n\\n        return address(feed);\\n    }\\n\\n    function getFeeds() external view returns (address[] memory) {\\n        return feeds.values();\\n    }\\n\\n    function getFeedsOwned(\\n        address user\\n    ) external view returns (address[] memory) {\\n        return feedStore[user].values();\\n    }\\n\\n    function getFeedsInfoOwned(\\n        address user\\n    ) external view returns (Structures.Feed[] memory) {\\n        return _getFeedsInfo(feedStore[user].values());\\n    }\\n\\n    function getFeedInfo(\\n        address user\\n    ) external view returns (Structures.Feed memory) {\\n        return _getFeedInfo(user);\\n    }\\n\\n    function getFeedsInfo() external view returns (Structures.Feed[] memory) {\\n        return _getFeedsInfo(feeds.values());\\n    }\\n\\n    function isContractCreated(\\n        address contractAddress\\n    ) external view returns (bool) {\\n        return feeds.contains(contractAddress);\\n    }\\n\\n    function getCreationFee() internal view returns (uint256) {\\n        return IMecenateTreasury(settings.treasuryContract).fixedFee();\\n    }\\n\\n    function _updateProxyCallContract(address _proxyCallContract) private {\\n        require(\\n            _proxyCallContract.isContract(),\\n            \\\"FNDCollectionFactory: Proxy call address is not a contract\\\"\\n        );\\n        proxyCallContract = IProxyCall(_proxyCallContract);\\n\\n        emit ProxyCallContractUpdated(_proxyCallContract);\\n    }\\n\\n    function _updateImplementation(\\n        address _implementation,\\n        uint256 majorNew,\\n        uint256 minorNew,\\n        uint256 patchNew\\n    ) private {\\n        require(\\n            _implementation.isContract(),\\n            \\\"nali: implementation is not a contract\\\"\\n        );\\n\\n        implementation = _implementation;\\n\\n        unchecked {\\n            // Version cannot overflow 256 bits.\\n            major = majorNew;\\n            minor = minorNew;\\n            patch = patchNew;\\n        }\\n\\n        IFeedInitializer(implementation).initialize(\\n            msg.sender,\\n            address(this),\\n            settings.usersModuleContract,\\n            major,\\n            minor,\\n            patch\\n        );\\n\\n        uint256 version = majorNew * 10000 + minorNew * 100 + patchNew;\\n\\n        emit ImplementationUpdated(_implementation, version);\\n    }\\n\\n    function _getSalt(\\n        address creator,\\n        uint256 nonce\\n    ) private pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(creator, nonce));\\n    }\\n}\\n\",\"keccak256\":\"0x310b2af53fcae7bd94fffdda28886e4623d2386acfa5e91d4f7005195e370686\",\"license\":\"MIT\"},\"contracts/interfaces/IFeedInitializer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IFeedInitializer {\\n    function initialize(\\n        address _owner,\\n        address _factoryContract,\\n        address _usersModuleContract,\\n        uint256 major,\\n        uint256 minor,\\n        uint256 patch\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0706ce7097e0459d901a53a5d3d9b0c26bea35b997538953760cc6b09eeda356\",\"license\":\"MIT\"},\"contracts/interfaces/IMecenateFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateFeed {\\n    function getPost() external view returns (Structures.Post memory);\\n\\n    function getTotalStaked() external view returns (uint256);\\n\\n    function postCount() external view returns (uint256);\\n\\n    function acceptPost(\\n        Structures.Tokens,\\n        uint256 _amount,\\n        address _funder,\\n        address _buyer\\n    ) external payable;\\n\\n    function getSellerStake() external view returns (uint256);\\n\\n    function getBuyerStake() external view returns (uint256);\\n\\n    function getPaymentRequested() external view returns (uint256);\\n\\n    function getStakeRequested() external view returns (uint256);\\n\\n    function getStatus() external view returns (Structures.PostStatus status);\\n\\n    function getTokenId() external view returns (Structures.Tokens tokenId);\\n\\n    function getPostId() external view returns (bytes32);\\n\\n    function getAllPostIds() external view returns (bytes32[] memory);\\n\\n    function getPostTimestamp(\\n        bytes32 postId\\n    ) external view returns (Structures.PostTimestamp memory);\\n\\n    function owner() external view returns (address);\\n\\n    function version() external view returns (string memory);\\n\\n    function getEncryptedPost() external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x9fde80b82450275cd4bb094147f4871fc8121d16bc448ff8319da7ce12d1abef\",\"license\":\"MIT\"},\"contracts/interfaces/IMecenateTreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IMecenateTreasury {\\n    function globalFee() external view returns (uint256);\\n\\n    function fixedFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9a8a12dbff92e474bb1ff16707a0c5616ecb4bbcd534d92651906ad82db5861f\",\"license\":\"MIT\"},\"contracts/interfaces/IMecenateUsers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateUsers {\\n    function registerUser(bytes memory metadata) external;\\n\\n    function getUsers() external view returns (address[] memory);\\n\\n    function getUserCount() external view returns (uint256);\\n\\n    function getUserAt(uint256 index) external view returns (address);\\n\\n    function checkifUserExist(address userAddress) external view returns (bool);\\n\\n    function getPaginatedUsers(\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) external view returns (address[] memory);\\n\\n    function getUserMetadata(\\n        address userAddress\\n    ) external view returns (Structures.User memory);\\n\\n    function getUserPublicKey(\\n        address userAddress\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xb5c5e94f0e2267f1baaa559142b499fd1eacde240569b537a0678e0fcf2021f6\",\"license\":\"MIT\"},\"contracts/interfaces/IProxyCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\r\\npragma solidity 0.8.19;\\r\\n\\r\\ninterface IProxyCall {\\r\\n    function proxyCallAndReturnAddress(\\r\\n        address externalContract,\\r\\n        bytes memory callData\\r\\n    ) external returns (address payable result);\\r\\n}\\r\\n\",\"keccak256\":\"0xb8d6e655bfbfae0148c0614530f2faf52a5401cd75b910fdc8f142f6c1cc853b\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/library/Structures.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @title Structures\\n * @dev This library defines various data structures used in the Mecenate platform.\\n */\\npragma solidity 0.8.19;\\n\\nlibrary Structures {\\n    enum PostStatus {\\n        Waiting,\\n        Proposed,\\n        Accepted,\\n        Submitted,\\n        Finalized,\\n        Punished,\\n        Revealed,\\n        Renounced\\n    }\\n\\n    enum PostResult {\\n        None,\\n        Valid,\\n        Punished\\n    }\\n\\n    enum Tokens {\\n        NaN,\\n        MUSE,\\n        DAI\\n    }\\n\\n    enum PostType {\\n        Text,\\n        Image,\\n        Video,\\n        Audio,\\n        File\\n    }\\n    enum PostDuration {\\n        OneDay,\\n        ThreeDays,\\n        OneWeek,\\n        TwoWeeks,\\n        OneMonth\\n    }\\n\\n    struct PostTimestamp {\\n        PostResult postResult;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n    }\\n\\n    struct FeedSettings {\\n        uint256 punishmentRatio;\\n        uint256 postCount;\\n        address usersModuleContract;\\n        address factoryContract;\\n        address router;\\n        string version;\\n    }\\n\\n    struct FactorySettings {\\n        address treasuryContract;\\n        address usersModuleContract;\\n        address easContract;\\n        bytes32 easSchema;\\n        address museToken;\\n        address daiToken;\\n        address wethToken;\\n        address router;\\n    }\\n\\n    /**\\n     * @dev Struct representing a post on the Mecenate platform.\\n     */\\n    struct Post {\\n        User creator;\\n        PostData postdata;\\n    }\\n\\n    /**\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\n     */\\n    struct PostData {\\n        PostSettings settings;\\n        PostEscrow escrow;\\n        PostEncryptedData data;\\n    }\\n\\n    /**\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\n     */\\n    struct PostEncryptedData {\\n        bytes encryptedData;\\n        bytes encryptedKey;\\n        bytes decryptedData;\\n    }\\n\\n    /**\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettings {\\n        PostStatus status;\\n        PostType postType;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n        uint256 duration;\\n        Tokens tokenId;\\n        bytes32 postId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\n     */\\n    struct PostEscrow {\\n        address buyer;\\n        address seller;\\n        uint256 stake;\\n        uint256 payment;\\n        uint256 punishment;\\n        uint256 penalty;\\n    }\\n\\n    /**\\n     * @dev Struct representing a user on the Mecenate platform.\\n     */\\n    struct User {\\n        address evmAddress;\\n        bytes sismoVaultId;\\n        bytes publicKey;\\n    }\\n\\n    /**\\n     * @dev Struct representing a feed on the Mecenate platform.\\n     */\\n    struct Feed {\\n        address contractAddress;\\n        address owner;\\n        uint256 sellerStake;\\n        uint256 buyerStake;\\n        uint256 totalStake;\\n        uint256 postCount;\\n        uint256 paymentRequested;\\n        uint256 stakeRequested;\\n        PostStatus status;\\n        Tokens tokenId;\\n        string version;\\n        bytes32 postId;\\n    }\\n\\n    /**\\n     * @dev Struct representing a bay request on the Mecenate platform.\\n     */\\n    struct BayRequest {\\n        bytes request;\\n        uint256 payment;\\n        uint256 stake;\\n        address postAddress;\\n        bool accepted;\\n        uint256 postCount;\\n        Tokens tokenId;\\n        address buyerAddress;\\n        bytes32 postId;\\n    }\\n}\\n\",\"keccak256\":\"0xe05441a5c2a661638f860772a3cafd66c583c6d759f3486dfee1d34da6934dc4\",\"license\":\"MIT\"},\"contracts/modules/FeedViewer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../library/Structures.sol\\\";\\nimport \\\"../interfaces/IMecenateFeed.sol\\\";\\n\\ncontract FeedViewer {\\n    function _getFeedInfo(\\n        address feed\\n    ) internal view returns (Structures.Feed memory) {\\n        Structures.Feed memory f;\\n\\n        IMecenateFeed mecenateFeed = IMecenateFeed(feed);\\n\\n        f.contractAddress = feed;\\n        f.owner = mecenateFeed.owner();\\n        f.sellerStake = mecenateFeed.getSellerStake();\\n        f.buyerStake = mecenateFeed.getBuyerStake();\\n        f.totalStake = mecenateFeed.getTotalStaked();\\n        f.postCount = mecenateFeed.postCount();\\n        f.paymentRequested = mecenateFeed.getPaymentRequested();\\n        f.stakeRequested = mecenateFeed.getStakeRequested();\\n        f.status = mecenateFeed.getStatus();\\n        f.tokenId = mecenateFeed.getTokenId();\\n        f.version = mecenateFeed.version();\\n        f.postId = mecenateFeed.getPostId();\\n\\n        return f;\\n    }\\n\\n    function _getFeedsInfo(\\n        address[] memory _feeds\\n    ) internal view returns (Structures.Feed[] memory) {\\n        uint256 len = _feeds.length;\\n        Structures.Feed[] memory f = new Structures.Feed[](len);\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            f[i] = _getFeedInfo(_feeds[i]);\\n        }\\n\\n        return f;\\n    }\\n}\\n\",\"keccak256\":\"0x3d86a409594e5b7bfdcfe52c2cb5148594ff0f5ecff4f2ab98fe69143a2a69a3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":218,"contract":"contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":221,"contract":"contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":751,"contract":"contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":10,"contract":"contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":130,"contract":"contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":2603,"contract":"contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory","label":"proxyCallContract","offset":0,"slot":"101","type":"t_contract(IProxyCall)3546"},{"astId":2605,"contract":"contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory","label":"implementation","offset":0,"slot":"102","type":"t_address"},{"astId":2607,"contract":"contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory","label":"defaultOperator","offset":0,"slot":"103","type":"t_address"},{"astId":2610,"contract":"contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory","label":"feeds","offset":0,"slot":"104","type":"t_struct(AddressSet)2278_storage"},{"astId":2613,"contract":"contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory","label":"settings","offset":0,"slot":"106","type":"t_struct(FactorySettings)3615_storage"},{"astId":2615,"contract":"contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory","label":"feedByteCode","offset":0,"slot":"114","type":"t_bytes_storage"},{"astId":2619,"contract":"contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory","label":"routerFee","offset":0,"slot":"115","type":"t_mapping(t_uint256,t_uint24)"},{"astId":2624,"contract":"contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory","label":"feedStore","offset":0,"slot":"116","type":"t_mapping(t_address,t_struct(AddressSet)2278_storage)"},{"astId":2627,"contract":"contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory","label":"burnEnabled","offset":0,"slot":"117","type":"t_bool"},{"astId":2629,"contract":"contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory","label":"contractCounter","offset":0,"slot":"118","type":"t_uint256"},{"astId":2631,"contract":"contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory","label":"major","offset":0,"slot":"119","type":"t_uint256"},{"astId":2633,"contract":"contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory","label":"minor","offset":0,"slot":"120","type":"t_uint256"},{"astId":2635,"contract":"contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory","label":"patch","offset":0,"slot":"121","type":"t_uint256"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_bytes32)dyn_storage":{"base":"t_bytes32","encoding":"dynamic_array","label":"bytes32[]","numberOfBytes":"32"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_contract(IProxyCall)3546":{"encoding":"inplace","label":"contract IProxyCall","numberOfBytes":"20"},"t_mapping(t_address,t_struct(AddressSet)2278_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct EnumerableSetUpgradeable.AddressSet)","numberOfBytes":"32","value":"t_struct(AddressSet)2278_storage"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_uint24)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint24)","numberOfBytes":"32","value":"t_uint24"},"t_struct(AddressSet)2278_storage":{"encoding":"inplace","label":"struct EnumerableSetUpgradeable.AddressSet","members":[{"astId":2277,"contract":"contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory","label":"_inner","offset":0,"slot":"0","type":"t_struct(Set)1963_storage"}],"numberOfBytes":"64"},"t_struct(FactorySettings)3615_storage":{"encoding":"inplace","label":"struct Structures.FactorySettings","members":[{"astId":3600,"contract":"contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory","label":"treasuryContract","offset":0,"slot":"0","type":"t_address"},{"astId":3602,"contract":"contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory","label":"usersModuleContract","offset":0,"slot":"1","type":"t_address"},{"astId":3604,"contract":"contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory","label":"easContract","offset":0,"slot":"2","type":"t_address"},{"astId":3606,"contract":"contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory","label":"easSchema","offset":0,"slot":"3","type":"t_bytes32"},{"astId":3608,"contract":"contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory","label":"museToken","offset":0,"slot":"4","type":"t_address"},{"astId":3610,"contract":"contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory","label":"daiToken","offset":0,"slot":"5","type":"t_address"},{"astId":3612,"contract":"contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory","label":"wethToken","offset":0,"slot":"6","type":"t_address"},{"astId":3614,"contract":"contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory","label":"router","offset":0,"slot":"7","type":"t_address"}],"numberOfBytes":"256"},"t_struct(Set)1963_storage":{"encoding":"inplace","label":"struct EnumerableSetUpgradeable.Set","members":[{"astId":1958,"contract":"contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory","label":"_values","offset":0,"slot":"0","type":"t_array(t_bytes32)dyn_storage"},{"astId":1962,"contract":"contracts/factories/MecenateFeedFactory.sol:MecenateFeedFactory","label":"_indexes","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_uint256)"}],"numberOfBytes":"64"},"t_uint24":{"encoding":"inplace","label":"uint24","numberOfBytes":"3"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/helpers/ExternalProxyCall.sol":{"ExternalProxyCall":{"abi":[{"inputs":[{"internalType":"address","name":"externalContract","type":"address"},{"internalType":"bytes","name":"callData","type":"bytes"}],"name":"proxyCallAndReturnAddress","outputs":[{"internalType":"address payable","name":"result","type":"address"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This is used so that the from address of the calling contract does not have any special permissions (e.g. ERC-20 transfer). Other return types and call structures may be added in the future.","kind":"dev","methods":{},"title":"Forwards arbitrary calls to an external contract.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234610016576102d9908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c63a1453b0e1461002857600080fd5b346100db5760403660031901126100db576004356001600160a01b03811681036100d7576024359067ffffffffffffffff82116100d357366023830112156100d357816004013561008061007b8261011f565b6100f4565b9281845236602483830101116100cf57916100cb9460208381969460246100af9701838701378401015261013b565b01516040516001600160a01b0390911681529081906020820190565b0390f35b8480fd5b8280fd5b5080fd5b80fd5b634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f1916820167ffffffffffffffff81118382101761011a57604052565b6100de565b67ffffffffffffffff811161011a57601f01601f191660200190565b60405190604082019282841067ffffffffffffffff85111761011a57600080916101ba95604052601e85527f416464726573733a206c6f772d6c6576656c2063616c6c206661696c65640000602086015260208151910182855af13d156101bd573d916101aa61007b8461011f565b9283523d6000602085013e610211565b90565b606091610211565b156101cc57565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b919290156102315750815115610225575090565b6101ba903b15156101c5565b8251909150156102445750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b82851061028a575050604492506000838284010152601f80199101168101030190fd5b848101820151868601604401529381019385935061026756fea26469706673582212205166b4cf3ba78e656933ebd9a0d05f07b68447521405f99c896a591fb551a22464736f6c63430008130033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x16 JUMPI PUSH2 0x2D9 SWAP1 DUP2 PUSH2 0x1C DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD PUSH1 0xE0 SHR PUSH4 0xA1453B0E EQ PUSH2 0x28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xDB JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xDB JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0xD7 JUMPI PUSH1 0x24 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0xD3 JUMPI CALLDATASIZE PUSH1 0x23 DUP4 ADD SLT ISZERO PUSH2 0xD3 JUMPI DUP2 PUSH1 0x4 ADD CALLDATALOAD PUSH2 0x80 PUSH2 0x7B DUP3 PUSH2 0x11F JUMP JUMPDEST PUSH2 0xF4 JUMP JUMPDEST SWAP3 DUP2 DUP5 MSTORE CALLDATASIZE PUSH1 0x24 DUP4 DUP4 ADD ADD GT PUSH2 0xCF JUMPI SWAP2 PUSH2 0xCB SWAP5 PUSH1 0x20 DUP4 DUP2 SWAP7 SWAP5 PUSH1 0x24 PUSH2 0xAF SWAP8 ADD DUP4 DUP8 ADD CALLDATACOPY DUP5 ADD ADD MSTORE PUSH2 0x13B JUMP JUMPDEST ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST DUP5 DUP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP DUP1 REVERT JUMPDEST DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP2 SWAP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP4 DUP3 LT OR PUSH2 0x11A JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0xDE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x11A JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x40 DUP3 ADD SWAP3 DUP3 DUP5 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP6 GT OR PUSH2 0x11A JUMPI PUSH1 0x0 DUP1 SWAP2 PUSH2 0x1BA SWAP6 PUSH1 0x40 MSTORE PUSH1 0x1E DUP6 MSTORE PUSH32 0x416464726573733A206C6F772D6C6576656C2063616C6C206661696C65640000 PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x20 DUP2 MLOAD SWAP2 ADD DUP3 DUP6 GAS CALL RETURNDATASIZE ISZERO PUSH2 0x1BD JUMPI RETURNDATASIZE SWAP2 PUSH2 0x1AA PUSH2 0x7B DUP5 PUSH2 0x11F JUMP JUMPDEST SWAP3 DUP4 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP6 ADD RETURNDATACOPY PUSH2 0x211 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP2 PUSH2 0x211 JUMP JUMPDEST ISZERO PUSH2 0x1CC JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP2 SWAP3 SWAP1 ISZERO PUSH2 0x231 JUMPI POP DUP2 MLOAD ISZERO PUSH2 0x225 JUMPI POP SWAP1 JUMP JUMPDEST PUSH2 0x1BA SWAP1 EXTCODESIZE ISZERO ISZERO PUSH2 0x1C5 JUMP JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x244 JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE DUP2 PUSH1 0x20 DUP1 PUSH1 0x4 DUP4 ADD MSTORE DUP3 MLOAD SWAP1 DUP2 PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x0 SWAP4 JUMPDEST DUP3 DUP6 LT PUSH2 0x28A JUMPI POP POP PUSH1 0x44 SWAP3 POP PUSH1 0x0 DUP4 DUP3 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SUB ADD SWAP1 REVERT JUMPDEST DUP5 DUP2 ADD DUP3 ADD MLOAD DUP7 DUP7 ADD PUSH1 0x44 ADD MSTORE SWAP4 DUP2 ADD SWAP4 DUP6 SWAP4 POP PUSH2 0x267 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MLOAD PUSH7 0xB4CF3BA78E6569 CALLER 0xEB 0xD9 LOG0 0xD0 0x5F SMOD 0xB6 DUP5 SELFBALANCE MSTORE EQ SDIV 0xF9 SWAP13 DUP10 PUSH11 0x591FB551A22464736F6C63 NUMBER STOP ADDMOD SGT STOP CALLER ","sourceMap":"606:582:10:-:0;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"abi_encode_address_payable":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":244,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_bytes":{"entryPoint":287,"id":null,"parameterSlots":1,"returnSlots":1},"fun_functionCall":{"entryPoint":315,"id":450,"parameterSlots":2,"returnSlots":1},"fun_verifyCallResultFromTarget":{"entryPoint":529,"id":665,"parameterSlots":4,"returnSlots":1},"panic_error_0x41":{"entryPoint":222,"id":null,"parameterSlots":0,"returnSlots":0},"require_helper_stringliteral_cc2e":{"entryPoint":453,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604052600436101561001257600080fd5b6000803560e01c63a1453b0e1461002857600080fd5b346100db5760403660031901126100db576004356001600160a01b03811681036100d7576024359067ffffffffffffffff82116100d357366023830112156100d357816004013561008061007b8261011f565b6100f4565b9281845236602483830101116100cf57916100cb9460208381969460246100af9701838701378401015261013b565b01516040516001600160a01b0390911681529081906020820190565b0390f35b8480fd5b8280fd5b5080fd5b80fd5b634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f1916820167ffffffffffffffff81118382101761011a57604052565b6100de565b67ffffffffffffffff811161011a57601f01601f191660200190565b60405190604082019282841067ffffffffffffffff85111761011a57600080916101ba95604052601e85527f416464726573733a206c6f772d6c6576656c2063616c6c206661696c65640000602086015260208151910182855af13d156101bd573d916101aa61007b8461011f565b9283523d6000602085013e610211565b90565b606091610211565b156101cc57565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b919290156102315750815115610225575090565b6101ba903b15156101c5565b8251909150156102445750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b82851061028a575050604492506000838284010152601f80199101168101030190fd5b848101820151868601604401529381019385935061026756fea26469706673582212205166b4cf3ba78e656933ebd9a0d05f07b68447521405f99c896a591fb551a22464736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 CALLDATALOAD PUSH1 0xE0 SHR PUSH4 0xA1453B0E EQ PUSH2 0x28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xDB JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xDB JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0xD7 JUMPI PUSH1 0x24 CALLDATALOAD SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0xD3 JUMPI CALLDATASIZE PUSH1 0x23 DUP4 ADD SLT ISZERO PUSH2 0xD3 JUMPI DUP2 PUSH1 0x4 ADD CALLDATALOAD PUSH2 0x80 PUSH2 0x7B DUP3 PUSH2 0x11F JUMP JUMPDEST PUSH2 0xF4 JUMP JUMPDEST SWAP3 DUP2 DUP5 MSTORE CALLDATASIZE PUSH1 0x24 DUP4 DUP4 ADD ADD GT PUSH2 0xCF JUMPI SWAP2 PUSH2 0xCB SWAP5 PUSH1 0x20 DUP4 DUP2 SWAP7 SWAP5 PUSH1 0x24 PUSH2 0xAF SWAP8 ADD DUP4 DUP8 ADD CALLDATACOPY DUP5 ADD ADD MSTORE PUSH2 0x13B JUMP JUMPDEST ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST DUP5 DUP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP DUP1 REVERT JUMPDEST DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP2 SWAP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP4 DUP3 LT OR PUSH2 0x11A JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0xDE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x11A JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x40 DUP3 ADD SWAP3 DUP3 DUP5 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP6 GT OR PUSH2 0x11A JUMPI PUSH1 0x0 DUP1 SWAP2 PUSH2 0x1BA SWAP6 PUSH1 0x40 MSTORE PUSH1 0x1E DUP6 MSTORE PUSH32 0x416464726573733A206C6F772D6C6576656C2063616C6C206661696C65640000 PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x20 DUP2 MLOAD SWAP2 ADD DUP3 DUP6 GAS CALL RETURNDATASIZE ISZERO PUSH2 0x1BD JUMPI RETURNDATASIZE SWAP2 PUSH2 0x1AA PUSH2 0x7B DUP5 PUSH2 0x11F JUMP JUMPDEST SWAP3 DUP4 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP6 ADD RETURNDATACOPY PUSH2 0x211 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP2 PUSH2 0x211 JUMP JUMPDEST ISZERO PUSH2 0x1CC JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP2 SWAP3 SWAP1 ISZERO PUSH2 0x231 JUMPI POP DUP2 MLOAD ISZERO PUSH2 0x225 JUMPI POP SWAP1 JUMP JUMPDEST PUSH2 0x1BA SWAP1 EXTCODESIZE ISZERO ISZERO PUSH2 0x1C5 JUMP JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x244 JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE DUP2 PUSH1 0x20 DUP1 PUSH1 0x4 DUP4 ADD MSTORE DUP3 MLOAD SWAP1 DUP2 PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x0 SWAP4 JUMPDEST DUP3 DUP6 LT PUSH2 0x28A JUMPI POP POP PUSH1 0x44 SWAP3 POP PUSH1 0x0 DUP4 DUP3 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SUB ADD SWAP1 REVERT JUMPDEST DUP5 DUP2 ADD DUP3 ADD MLOAD DUP7 DUP7 ADD PUSH1 0x44 ADD MSTORE SWAP4 DUP2 ADD SWAP4 DUP6 SWAP4 POP PUSH2 0x267 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MLOAD PUSH7 0xB4CF3BA78E6569 CALLER 0xEB 0xD9 LOG0 0xD0 0x5F SMOD 0xB6 DUP5 SELFBALANCE MSTORE EQ SDIV 0xF9 SWAP13 DUP10 PUSH11 0x591FB551A22464736F6C63 NUMBER STOP ADDMOD SGT STOP CALLER ","sourceMap":"606:582:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;606:582:10;;;;;;-1:-1:-1;;;;;606:582:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;896:39;606:582;;;;;;;;;;896:39;:::i;:::-;1107:71;;606:582;;-1:-1:-1;;;;;606:582:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;606:582:10;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;-1:-1:-1;;606:582:10;;;;:::o;3712:185:3:-;606:582:10;;;;;;;;;;;;;;;;-1:-1:-1;606:582:10;;5546:69:3;606:582:10;;;;;;;;;;;;5498:31:3;;;;;;;;606:582:10;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;606:582:10;;;;5546:69:3;:::i;:::-;3712:185;:::o;606:582:10:-;;;5546:69:3;:::i;606:582:10:-;;;;:::o;:::-;;;-1:-1:-1;;;606:582:10;;;;;;;;;;;;;;;;;;;;7682:628:3;;;;7886:418;;;606:582:10;;;7917:22:3;7913:286;;8212:17;;:::o;7913:286::-;8124:60;1713:19;;:23;;8124:60;:::i;7886:418::-;606:582:10;;;;-1:-1:-1;8991:21:3;:17;;9163:142;;;;;;;8987:379;606:582:10;;;;;;9335:20:3;;606:582:10;;9335:20:3;;;;606:582:10;;;;;;;;;9011:1:3;606:582:10;;;;;;;;;;;;9011:1:3;606:582:10;;;;;;;;;;;;;;9335:20:3;;;;606:582:10;;;;;;;;;;;;;;;;;;;-1:-1:-1;606:582:10;"},"gasEstimates":{"creation":{"codeDepositCost":"145800","executionCost":"196","totalCost":"145996"},"external":{"proxyCallAndReturnAddress(address,bytes)":"infinite"}},"methodIdentifiers":{"proxyCallAndReturnAddress(address,bytes)":"a1453b0e"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"externalContract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"name\":\"proxyCallAndReturnAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"result\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This is used so that the from address of the calling contract does not have any special permissions (e.g. ERC-20 transfer). Other return types and call structures may be added in the future.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Forwards arbitrary calls to an external contract.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"DO NOT approve this contract to transfer any ERC-20 or ERC-721, or grant any other permissions for another contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/helpers/ExternalProxyCall.sol\":\"ExternalProxyCall\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"contracts/helpers/ExternalProxyCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\r\\nimport \\\"../interfaces/IProxyCall.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Forwards arbitrary calls to an external contract.\\r\\n * @notice DO NOT approve this contract to transfer any ERC-20 or ERC-721,\\r\\n * or grant any other permissions for another contract.\\r\\n * @dev This is used so that the from address of the calling contract does not have\\r\\n * any special permissions (e.g. ERC-20 transfer).\\r\\n * Other return types and call structures may be added in the future.\\r\\n */\\r\\ncontract ExternalProxyCall is IProxyCall {\\r\\n    using AddressUpgradeable for address;\\r\\n\\r\\n    function proxyCallAndReturnAddress(\\r\\n        address externalContract,\\r\\n        bytes memory callData\\r\\n    ) external override returns (address payable result) {\\r\\n        bytes memory returnData = externalContract.functionCall(callData);\\r\\n\\r\\n        // Skip the length at the start of the bytes array and return the data, casted to an address\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            result := mload(add(returnData, 32))\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1bfd700e1b4378bed58719885be82ea4479198c9f836b0b08392bf51d5760e9a\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/interfaces/IProxyCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\r\\npragma solidity 0.8.19;\\r\\n\\r\\ninterface IProxyCall {\\r\\n    function proxyCallAndReturnAddress(\\r\\n        address externalContract,\\r\\n        bytes memory callData\\r\\n    ) external returns (address payable result);\\r\\n}\\r\\n\",\"keccak256\":\"0xb8d6e655bfbfae0148c0614530f2faf52a5401cd75b910fdc8f142f6c1cc853b\",\"license\":\"MIT OR Apache-2.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"DO NOT approve this contract to transfer any ERC-20 or ERC-721, or grant any other permissions for another contract.","version":1}}},"contracts/interfaces/IFeedInitializer.sol":{"IFeedInitializer":{"abi":[{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_factoryContract","type":"address"},{"internalType":"address","name":"_usersModuleContract","type":"address"},{"internalType":"uint256","name":"major","type":"uint256"},{"internalType":"uint256","name":"minor","type":"uint256"},{"internalType":"uint256","name":"patch","type":"uint256"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"initialize(address,address,address,uint256,uint256,uint256)":"728cdbca"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factoryContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usersModuleContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"major\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"patch\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IFeedInitializer.sol\":\"IFeedInitializer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/interfaces/IFeedInitializer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IFeedInitializer {\\n    function initialize(\\n        address _owner,\\n        address _factoryContract,\\n        address _usersModuleContract,\\n        uint256 major,\\n        uint256 minor,\\n        uint256 patch\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0706ce7097e0459d901a53a5d3d9b0c26bea35b997538953760cc6b09eeda356\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IMecenateFeed.sol":{"IMecenateFeed":{"abi":[{"inputs":[{"internalType":"enum Structures.Tokens","name":"","type":"uint8"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"address","name":"_funder","type":"address"},{"internalType":"address","name":"_buyer","type":"address"}],"name":"acceptPost","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"getAllPostIds","outputs":[{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBuyerStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getEncryptedPost","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPaymentRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPost","outputs":[{"components":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"creator","type":"tuple"},{"components":[{"components":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"},{"internalType":"enum Structures.PostType","name":"postType","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"},{"internalType":"bytes32","name":"postId","type":"bytes32"}],"internalType":"struct Structures.PostSettings","name":"settings","type":"tuple"},{"components":[{"internalType":"address","name":"buyer","type":"address"},{"internalType":"address","name":"seller","type":"address"},{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"payment","type":"uint256"},{"internalType":"uint256","name":"punishment","type":"uint256"},{"internalType":"uint256","name":"penalty","type":"uint256"}],"internalType":"struct Structures.PostEscrow","name":"escrow","type":"tuple"},{"components":[{"internalType":"bytes","name":"encryptedData","type":"bytes"},{"internalType":"bytes","name":"encryptedKey","type":"bytes"},{"internalType":"bytes","name":"decryptedData","type":"bytes"}],"internalType":"struct Structures.PostEncryptedData","name":"data","type":"tuple"}],"internalType":"struct Structures.PostData","name":"postdata","type":"tuple"}],"internalType":"struct Structures.Post","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPostId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"postId","type":"bytes32"}],"name":"getPostTimestamp","outputs":[{"components":[{"internalType":"enum Structures.PostResult","name":"postResult","type":"uint8"},{"internalType":"uint256","name":"creationTimeStamp","type":"uint256"},{"internalType":"uint256","name":"endTimeStamp","type":"uint256"}],"internalType":"struct Structures.PostTimestamp","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getSellerStake","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStakeRequested","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStatus","outputs":[{"internalType":"enum Structures.PostStatus","name":"status","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTokenId","outputs":[{"internalType":"enum Structures.Tokens","name":"tokenId","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTotalStaked","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"postCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"acceptPost(uint8,uint256,address,address)":"07388dba","getAllPostIds()":"8e25df9e","getBuyerStake()":"4c38d877","getEncryptedPost()":"729e2eb1","getPaymentRequested()":"d24e0c87","getPost()":"8c6838ba","getPostId()":"32946a87","getPostTimestamp(bytes32)":"825821fb","getSellerStake()":"5c63ed69","getStakeRequested()":"faeb5e17","getStatus()":"4e69d560","getTokenId()":"010a38f5","getTotalStaked()":"0917e776","owner()":"8da5cb5b","postCount()":"17906c2e","version()":"54fd4d50"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_funder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"acceptPost\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPostIds\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyerStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEncryptedPost\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPaymentRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPost\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"enum Structures.PostType\",\"name\":\"postType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"postId\",\"type\":\"bytes32\"}],\"internalType\":\"struct Structures.PostSettings\",\"name\":\"settings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"punishment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostEscrow\",\"name\":\"escrow\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"decryptedData\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.PostEncryptedData\",\"name\":\"data\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.PostData\",\"name\":\"postdata\",\"type\":\"tuple\"}],\"internalType\":\"struct Structures.Post\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPostId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"postId\",\"type\":\"bytes32\"}],\"name\":\"getPostTimestamp\",\"outputs\":[{\"components\":[{\"internalType\":\"enum Structures.PostResult\",\"name\":\"postResult\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimeStamp\",\"type\":\"uint256\"}],\"internalType\":\"struct Structures.PostTimestamp\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellerStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"enum Structures.PostStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"enum Structures.Tokens\",\"name\":\"tokenId\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IMecenateFeed.sol\":\"IMecenateFeed\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/interfaces/IMecenateFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateFeed {\\n    function getPost() external view returns (Structures.Post memory);\\n\\n    function getTotalStaked() external view returns (uint256);\\n\\n    function postCount() external view returns (uint256);\\n\\n    function acceptPost(\\n        Structures.Tokens,\\n        uint256 _amount,\\n        address _funder,\\n        address _buyer\\n    ) external payable;\\n\\n    function getSellerStake() external view returns (uint256);\\n\\n    function getBuyerStake() external view returns (uint256);\\n\\n    function getPaymentRequested() external view returns (uint256);\\n\\n    function getStakeRequested() external view returns (uint256);\\n\\n    function getStatus() external view returns (Structures.PostStatus status);\\n\\n    function getTokenId() external view returns (Structures.Tokens tokenId);\\n\\n    function getPostId() external view returns (bytes32);\\n\\n    function getAllPostIds() external view returns (bytes32[] memory);\\n\\n    function getPostTimestamp(\\n        bytes32 postId\\n    ) external view returns (Structures.PostTimestamp memory);\\n\\n    function owner() external view returns (address);\\n\\n    function version() external view returns (string memory);\\n\\n    function getEncryptedPost() external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x9fde80b82450275cd4bb094147f4871fc8121d16bc448ff8319da7ce12d1abef\",\"license\":\"MIT\"},\"contracts/library/Structures.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @title Structures\\n * @dev This library defines various data structures used in the Mecenate platform.\\n */\\npragma solidity 0.8.19;\\n\\nlibrary Structures {\\n    enum PostStatus {\\n        Waiting,\\n        Proposed,\\n        Accepted,\\n        Submitted,\\n        Finalized,\\n        Punished,\\n        Revealed,\\n        Renounced\\n    }\\n\\n    enum PostResult {\\n        None,\\n        Valid,\\n        Punished\\n    }\\n\\n    enum Tokens {\\n        NaN,\\n        MUSE,\\n        DAI\\n    }\\n\\n    enum PostType {\\n        Text,\\n        Image,\\n        Video,\\n        Audio,\\n        File\\n    }\\n    enum PostDuration {\\n        OneDay,\\n        ThreeDays,\\n        OneWeek,\\n        TwoWeeks,\\n        OneMonth\\n    }\\n\\n    struct PostTimestamp {\\n        PostResult postResult;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n    }\\n\\n    struct FeedSettings {\\n        uint256 punishmentRatio;\\n        uint256 postCount;\\n        address usersModuleContract;\\n        address factoryContract;\\n        address router;\\n        string version;\\n    }\\n\\n    struct FactorySettings {\\n        address treasuryContract;\\n        address usersModuleContract;\\n        address easContract;\\n        bytes32 easSchema;\\n        address museToken;\\n        address daiToken;\\n        address wethToken;\\n        address router;\\n    }\\n\\n    /**\\n     * @dev Struct representing a post on the Mecenate platform.\\n     */\\n    struct Post {\\n        User creator;\\n        PostData postdata;\\n    }\\n\\n    /**\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\n     */\\n    struct PostData {\\n        PostSettings settings;\\n        PostEscrow escrow;\\n        PostEncryptedData data;\\n    }\\n\\n    /**\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\n     */\\n    struct PostEncryptedData {\\n        bytes encryptedData;\\n        bytes encryptedKey;\\n        bytes decryptedData;\\n    }\\n\\n    /**\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettings {\\n        PostStatus status;\\n        PostType postType;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n        uint256 duration;\\n        Tokens tokenId;\\n        bytes32 postId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\n     */\\n    struct PostEscrow {\\n        address buyer;\\n        address seller;\\n        uint256 stake;\\n        uint256 payment;\\n        uint256 punishment;\\n        uint256 penalty;\\n    }\\n\\n    /**\\n     * @dev Struct representing a user on the Mecenate platform.\\n     */\\n    struct User {\\n        address evmAddress;\\n        bytes sismoVaultId;\\n        bytes publicKey;\\n    }\\n\\n    /**\\n     * @dev Struct representing a feed on the Mecenate platform.\\n     */\\n    struct Feed {\\n        address contractAddress;\\n        address owner;\\n        uint256 sellerStake;\\n        uint256 buyerStake;\\n        uint256 totalStake;\\n        uint256 postCount;\\n        uint256 paymentRequested;\\n        uint256 stakeRequested;\\n        PostStatus status;\\n        Tokens tokenId;\\n        string version;\\n        bytes32 postId;\\n    }\\n\\n    /**\\n     * @dev Struct representing a bay request on the Mecenate platform.\\n     */\\n    struct BayRequest {\\n        bytes request;\\n        uint256 payment;\\n        uint256 stake;\\n        address postAddress;\\n        bool accepted;\\n        uint256 postCount;\\n        Tokens tokenId;\\n        address buyerAddress;\\n        bytes32 postId;\\n    }\\n}\\n\",\"keccak256\":\"0xe05441a5c2a661638f860772a3cafd66c583c6d759f3486dfee1d34da6934dc4\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IMecenateTreasury.sol":{"IMecenateTreasury":{"abi":[{"inputs":[],"name":"fixedFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"globalFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"fixedFee()":"91792d5b","globalFee()":"808fc206"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"fixedFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IMecenateTreasury.sol\":\"IMecenateTreasury\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/interfaces/IMecenateTreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IMecenateTreasury {\\n    function globalFee() external view returns (uint256);\\n\\n    function fixedFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9a8a12dbff92e474bb1ff16707a0c5616ecb4bbcd534d92651906ad82db5861f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IMecenateUsers.sol":{"IMecenateUsers":{"abi":[{"inputs":[{"internalType":"address","name":"userAddress","type":"address"}],"name":"checkifUserExist","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"startIndex","type":"uint256"},{"internalType":"uint256","name":"endIndex","type":"uint256"}],"name":"getPaginatedUsers","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getUserAt","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getUserCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"}],"name":"getUserMetadata","outputs":[{"components":[{"internalType":"address","name":"evmAddress","type":"address"},{"internalType":"bytes","name":"sismoVaultId","type":"bytes"},{"internalType":"bytes","name":"publicKey","type":"bytes"}],"internalType":"struct Structures.User","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"userAddress","type":"address"}],"name":"getUserPublicKey","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getUsers","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"metadata","type":"bytes"}],"name":"registerUser","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"checkifUserExist(address)":"48990fcc","getPaginatedUsers(uint256,uint256)":"cf5caa12","getUserAt(uint256)":"c6e064ad","getUserCount()":"b5cb15f7","getUserMetadata(address)":"ef2a8764","getUserPublicKey(address)":"11231fe0","getUsers()":"00ce8e3e","registerUser(bytes)":"0a38178c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"checkifUserExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"getPaginatedUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"evmAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sismoVaultId\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"internalType\":\"struct Structures.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserPublicKey\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"registerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IMecenateUsers.sol\":\"IMecenateUsers\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/interfaces/IMecenateUsers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateUsers {\\n    function registerUser(bytes memory metadata) external;\\n\\n    function getUsers() external view returns (address[] memory);\\n\\n    function getUserCount() external view returns (uint256);\\n\\n    function getUserAt(uint256 index) external view returns (address);\\n\\n    function checkifUserExist(address userAddress) external view returns (bool);\\n\\n    function getPaginatedUsers(\\n        uint256 startIndex,\\n        uint256 endIndex\\n    ) external view returns (address[] memory);\\n\\n    function getUserMetadata(\\n        address userAddress\\n    ) external view returns (Structures.User memory);\\n\\n    function getUserPublicKey(\\n        address userAddress\\n    ) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xb5c5e94f0e2267f1baaa559142b499fd1eacde240569b537a0678e0fcf2021f6\",\"license\":\"MIT\"},\"contracts/library/Structures.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @title Structures\\n * @dev This library defines various data structures used in the Mecenate platform.\\n */\\npragma solidity 0.8.19;\\n\\nlibrary Structures {\\n    enum PostStatus {\\n        Waiting,\\n        Proposed,\\n        Accepted,\\n        Submitted,\\n        Finalized,\\n        Punished,\\n        Revealed,\\n        Renounced\\n    }\\n\\n    enum PostResult {\\n        None,\\n        Valid,\\n        Punished\\n    }\\n\\n    enum Tokens {\\n        NaN,\\n        MUSE,\\n        DAI\\n    }\\n\\n    enum PostType {\\n        Text,\\n        Image,\\n        Video,\\n        Audio,\\n        File\\n    }\\n    enum PostDuration {\\n        OneDay,\\n        ThreeDays,\\n        OneWeek,\\n        TwoWeeks,\\n        OneMonth\\n    }\\n\\n    struct PostTimestamp {\\n        PostResult postResult;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n    }\\n\\n    struct FeedSettings {\\n        uint256 punishmentRatio;\\n        uint256 postCount;\\n        address usersModuleContract;\\n        address factoryContract;\\n        address router;\\n        string version;\\n    }\\n\\n    struct FactorySettings {\\n        address treasuryContract;\\n        address usersModuleContract;\\n        address easContract;\\n        bytes32 easSchema;\\n        address museToken;\\n        address daiToken;\\n        address wethToken;\\n        address router;\\n    }\\n\\n    /**\\n     * @dev Struct representing a post on the Mecenate platform.\\n     */\\n    struct Post {\\n        User creator;\\n        PostData postdata;\\n    }\\n\\n    /**\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\n     */\\n    struct PostData {\\n        PostSettings settings;\\n        PostEscrow escrow;\\n        PostEncryptedData data;\\n    }\\n\\n    /**\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\n     */\\n    struct PostEncryptedData {\\n        bytes encryptedData;\\n        bytes encryptedKey;\\n        bytes decryptedData;\\n    }\\n\\n    /**\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettings {\\n        PostStatus status;\\n        PostType postType;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n        uint256 duration;\\n        Tokens tokenId;\\n        bytes32 postId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\n     */\\n    struct PostEscrow {\\n        address buyer;\\n        address seller;\\n        uint256 stake;\\n        uint256 payment;\\n        uint256 punishment;\\n        uint256 penalty;\\n    }\\n\\n    /**\\n     * @dev Struct representing a user on the Mecenate platform.\\n     */\\n    struct User {\\n        address evmAddress;\\n        bytes sismoVaultId;\\n        bytes publicKey;\\n    }\\n\\n    /**\\n     * @dev Struct representing a feed on the Mecenate platform.\\n     */\\n    struct Feed {\\n        address contractAddress;\\n        address owner;\\n        uint256 sellerStake;\\n        uint256 buyerStake;\\n        uint256 totalStake;\\n        uint256 postCount;\\n        uint256 paymentRequested;\\n        uint256 stakeRequested;\\n        PostStatus status;\\n        Tokens tokenId;\\n        string version;\\n        bytes32 postId;\\n    }\\n\\n    /**\\n     * @dev Struct representing a bay request on the Mecenate platform.\\n     */\\n    struct BayRequest {\\n        bytes request;\\n        uint256 payment;\\n        uint256 stake;\\n        address postAddress;\\n        bool accepted;\\n        uint256 postCount;\\n        Tokens tokenId;\\n        address buyerAddress;\\n        bytes32 postId;\\n    }\\n}\\n\",\"keccak256\":\"0xe05441a5c2a661638f860772a3cafd66c583c6d759f3486dfee1d34da6934dc4\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/IProxyCall.sol":{"IProxyCall":{"abi":[{"inputs":[{"internalType":"address","name":"externalContract","type":"address"},{"internalType":"bytes","name":"callData","type":"bytes"}],"name":"proxyCallAndReturnAddress","outputs":[{"internalType":"address payable","name":"result","type":"address"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"proxyCallAndReturnAddress(address,bytes)":"a1453b0e"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"externalContract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"name\":\"proxyCallAndReturnAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"result\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IProxyCall.sol\":\"IProxyCall\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/interfaces/IProxyCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\r\\npragma solidity 0.8.19;\\r\\n\\r\\ninterface IProxyCall {\\r\\n    function proxyCallAndReturnAddress(\\r\\n        address externalContract,\\r\\n        bytes memory callData\\r\\n    ) external returns (address payable result);\\r\\n}\\r\\n\",\"keccak256\":\"0xb8d6e655bfbfae0148c0614530f2faf52a5401cd75b910fdc8f142f6c1cc853b\",\"license\":\"MIT OR Apache-2.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/library/Structures.sol":{"Structures":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212207abfe76d0131213217a130564e4aa42951911e0fe4d404b9e71afe80c64b767664736f6c63430008130033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH27 0xBFE76D0131213217A130564E4AA42951911E0FE4D404B9E71AFE80 0xC6 0x4B PUSH23 0x7664736F6C634300081300330000000000000000000000 ","sourceMap":"171:3322:16:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea26469706673582212207abfe76d0131213217a130564e4aa42951911e0fe4d404b9e71afe80c64b767664736f6c63430008130033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH27 0xBFE76D0131213217A130564E4AA42951911E0FE4D404B9E71AFE80 0xC6 0x4B PUSH23 0x7664736F6C634300081300330000000000000000000000 ","sourceMap":"171:3322:16:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/library/Structures.sol\":\"Structures\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/library/Structures.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @title Structures\\n * @dev This library defines various data structures used in the Mecenate platform.\\n */\\npragma solidity 0.8.19;\\n\\nlibrary Structures {\\n    enum PostStatus {\\n        Waiting,\\n        Proposed,\\n        Accepted,\\n        Submitted,\\n        Finalized,\\n        Punished,\\n        Revealed,\\n        Renounced\\n    }\\n\\n    enum PostResult {\\n        None,\\n        Valid,\\n        Punished\\n    }\\n\\n    enum Tokens {\\n        NaN,\\n        MUSE,\\n        DAI\\n    }\\n\\n    enum PostType {\\n        Text,\\n        Image,\\n        Video,\\n        Audio,\\n        File\\n    }\\n    enum PostDuration {\\n        OneDay,\\n        ThreeDays,\\n        OneWeek,\\n        TwoWeeks,\\n        OneMonth\\n    }\\n\\n    struct PostTimestamp {\\n        PostResult postResult;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n    }\\n\\n    struct FeedSettings {\\n        uint256 punishmentRatio;\\n        uint256 postCount;\\n        address usersModuleContract;\\n        address factoryContract;\\n        address router;\\n        string version;\\n    }\\n\\n    struct FactorySettings {\\n        address treasuryContract;\\n        address usersModuleContract;\\n        address easContract;\\n        bytes32 easSchema;\\n        address museToken;\\n        address daiToken;\\n        address wethToken;\\n        address router;\\n    }\\n\\n    /**\\n     * @dev Struct representing a post on the Mecenate platform.\\n     */\\n    struct Post {\\n        User creator;\\n        PostData postdata;\\n    }\\n\\n    /**\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\n     */\\n    struct PostData {\\n        PostSettings settings;\\n        PostEscrow escrow;\\n        PostEncryptedData data;\\n    }\\n\\n    /**\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\n     */\\n    struct PostEncryptedData {\\n        bytes encryptedData;\\n        bytes encryptedKey;\\n        bytes decryptedData;\\n    }\\n\\n    /**\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettings {\\n        PostStatus status;\\n        PostType postType;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n        uint256 duration;\\n        Tokens tokenId;\\n        bytes32 postId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\n     */\\n    struct PostEscrow {\\n        address buyer;\\n        address seller;\\n        uint256 stake;\\n        uint256 payment;\\n        uint256 punishment;\\n        uint256 penalty;\\n    }\\n\\n    /**\\n     * @dev Struct representing a user on the Mecenate platform.\\n     */\\n    struct User {\\n        address evmAddress;\\n        bytes sismoVaultId;\\n        bytes publicKey;\\n    }\\n\\n    /**\\n     * @dev Struct representing a feed on the Mecenate platform.\\n     */\\n    struct Feed {\\n        address contractAddress;\\n        address owner;\\n        uint256 sellerStake;\\n        uint256 buyerStake;\\n        uint256 totalStake;\\n        uint256 postCount;\\n        uint256 paymentRequested;\\n        uint256 stakeRequested;\\n        PostStatus status;\\n        Tokens tokenId;\\n        string version;\\n        bytes32 postId;\\n    }\\n\\n    /**\\n     * @dev Struct representing a bay request on the Mecenate platform.\\n     */\\n    struct BayRequest {\\n        bytes request;\\n        uint256 payment;\\n        uint256 stake;\\n        address postAddress;\\n        bool accepted;\\n        uint256 postCount;\\n        Tokens tokenId;\\n        address buyerAddress;\\n        bytes32 postId;\\n    }\\n}\\n\",\"keccak256\":\"0xe05441a5c2a661638f860772a3cafd66c583c6d759f3486dfee1d34da6934dc4\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/modules/FeedViewer.sol":{"FeedViewer":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601357603a908160198239f35b600080fdfe600080fdfea26469706673582212205c493a25726ea95297a46f0413af4b37623eb3fead08eaaf1dbef28e586ed6f464736f6c63430008130033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x13 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x19 DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5C 0x49 GASPRICE 0x25 PUSH19 0x6EA95297A46F0413AF4B37623EB3FEAD08EAAF SAR 0xBE CALLCODE DUP15 PC PUSH15 0xD6F464736F6C634300081300330000 ","sourceMap":"136:1180:17:-:0;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea26469706673582212205c493a25726ea95297a46f0413af4b37623eb3fead08eaaf1dbef28e586ed6f464736f6c63430008130033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5C 0x49 GASPRICE 0x25 PUSH19 0x6EA95297A46F0413AF4B37623EB3FEAD08EAAF SAR 0xBE CALLCODE DUP15 PC PUSH15 0xD6F464736F6C634300081300330000 ","sourceMap":"136:1180:17:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"69","totalCost":"11669"},"internal":{"_getFeedInfo(address)":"infinite","_getFeedsInfo(address[] memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/FeedViewer.sol\":\"FeedViewer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/interfaces/IMecenateFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\nimport \\\"../library/Structures.sol\\\";\\n\\ninterface IMecenateFeed {\\n    function getPost() external view returns (Structures.Post memory);\\n\\n    function getTotalStaked() external view returns (uint256);\\n\\n    function postCount() external view returns (uint256);\\n\\n    function acceptPost(\\n        Structures.Tokens,\\n        uint256 _amount,\\n        address _funder,\\n        address _buyer\\n    ) external payable;\\n\\n    function getSellerStake() external view returns (uint256);\\n\\n    function getBuyerStake() external view returns (uint256);\\n\\n    function getPaymentRequested() external view returns (uint256);\\n\\n    function getStakeRequested() external view returns (uint256);\\n\\n    function getStatus() external view returns (Structures.PostStatus status);\\n\\n    function getTokenId() external view returns (Structures.Tokens tokenId);\\n\\n    function getPostId() external view returns (bytes32);\\n\\n    function getAllPostIds() external view returns (bytes32[] memory);\\n\\n    function getPostTimestamp(\\n        bytes32 postId\\n    ) external view returns (Structures.PostTimestamp memory);\\n\\n    function owner() external view returns (address);\\n\\n    function version() external view returns (string memory);\\n\\n    function getEncryptedPost() external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x9fde80b82450275cd4bb094147f4871fc8121d16bc448ff8319da7ce12d1abef\",\"license\":\"MIT\"},\"contracts/library/Structures.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @title Structures\\n * @dev This library defines various data structures used in the Mecenate platform.\\n */\\npragma solidity 0.8.19;\\n\\nlibrary Structures {\\n    enum PostStatus {\\n        Waiting,\\n        Proposed,\\n        Accepted,\\n        Submitted,\\n        Finalized,\\n        Punished,\\n        Revealed,\\n        Renounced\\n    }\\n\\n    enum PostResult {\\n        None,\\n        Valid,\\n        Punished\\n    }\\n\\n    enum Tokens {\\n        NaN,\\n        MUSE,\\n        DAI\\n    }\\n\\n    enum PostType {\\n        Text,\\n        Image,\\n        Video,\\n        Audio,\\n        File\\n    }\\n    enum PostDuration {\\n        OneDay,\\n        ThreeDays,\\n        OneWeek,\\n        TwoWeeks,\\n        OneMonth\\n    }\\n\\n    struct PostTimestamp {\\n        PostResult postResult;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n    }\\n\\n    struct FeedSettings {\\n        uint256 punishmentRatio;\\n        uint256 postCount;\\n        address usersModuleContract;\\n        address factoryContract;\\n        address router;\\n        string version;\\n    }\\n\\n    struct FactorySettings {\\n        address treasuryContract;\\n        address usersModuleContract;\\n        address easContract;\\n        bytes32 easSchema;\\n        address museToken;\\n        address daiToken;\\n        address wethToken;\\n        address router;\\n    }\\n\\n    /**\\n     * @dev Struct representing a post on the Mecenate platform.\\n     */\\n    struct Post {\\n        User creator;\\n        PostData postdata;\\n    }\\n\\n    /**\\n     * @dev Struct representing the data of a post on the Mecenate platform.\\n     */\\n    struct PostData {\\n        PostSettings settings;\\n        PostEscrow escrow;\\n        PostEncryptedData data;\\n    }\\n\\n    /**\\n     * @dev Struct representing the encrypted data of a post on the Mecenate platform.\\n     */\\n    struct PostEncryptedData {\\n        bytes encryptedData;\\n        bytes encryptedKey;\\n        bytes decryptedData;\\n    }\\n\\n    /**\\n     * @dev Struct representing the settings of a post on the Mecenate platform.\\n     */\\n    struct PostSettings {\\n        PostStatus status;\\n        PostType postType;\\n        uint256 creationTimeStamp;\\n        uint256 endTimeStamp;\\n        uint256 duration;\\n        Tokens tokenId;\\n        bytes32 postId;\\n    }\\n\\n    /**\\n     * @dev Struct representing the escrow of a post on the Mecenate platform.\\n     */\\n    struct PostEscrow {\\n        address buyer;\\n        address seller;\\n        uint256 stake;\\n        uint256 payment;\\n        uint256 punishment;\\n        uint256 penalty;\\n    }\\n\\n    /**\\n     * @dev Struct representing a user on the Mecenate platform.\\n     */\\n    struct User {\\n        address evmAddress;\\n        bytes sismoVaultId;\\n        bytes publicKey;\\n    }\\n\\n    /**\\n     * @dev Struct representing a feed on the Mecenate platform.\\n     */\\n    struct Feed {\\n        address contractAddress;\\n        address owner;\\n        uint256 sellerStake;\\n        uint256 buyerStake;\\n        uint256 totalStake;\\n        uint256 postCount;\\n        uint256 paymentRequested;\\n        uint256 stakeRequested;\\n        PostStatus status;\\n        Tokens tokenId;\\n        string version;\\n        bytes32 postId;\\n    }\\n\\n    /**\\n     * @dev Struct representing a bay request on the Mecenate platform.\\n     */\\n    struct BayRequest {\\n        bytes request;\\n        uint256 payment;\\n        uint256 stake;\\n        address postAddress;\\n        bool accepted;\\n        uint256 postCount;\\n        Tokens tokenId;\\n        address buyerAddress;\\n        bytes32 postId;\\n    }\\n}\\n\",\"keccak256\":\"0xe05441a5c2a661638f860772a3cafd66c583c6d759f3486dfee1d34da6934dc4\",\"license\":\"MIT\"},\"contracts/modules/FeedViewer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../library/Structures.sol\\\";\\nimport \\\"../interfaces/IMecenateFeed.sol\\\";\\n\\ncontract FeedViewer {\\n    function _getFeedInfo(\\n        address feed\\n    ) internal view returns (Structures.Feed memory) {\\n        Structures.Feed memory f;\\n\\n        IMecenateFeed mecenateFeed = IMecenateFeed(feed);\\n\\n        f.contractAddress = feed;\\n        f.owner = mecenateFeed.owner();\\n        f.sellerStake = mecenateFeed.getSellerStake();\\n        f.buyerStake = mecenateFeed.getBuyerStake();\\n        f.totalStake = mecenateFeed.getTotalStaked();\\n        f.postCount = mecenateFeed.postCount();\\n        f.paymentRequested = mecenateFeed.getPaymentRequested();\\n        f.stakeRequested = mecenateFeed.getStakeRequested();\\n        f.status = mecenateFeed.getStatus();\\n        f.tokenId = mecenateFeed.getTokenId();\\n        f.version = mecenateFeed.version();\\n        f.postId = mecenateFeed.getPostId();\\n\\n        return f;\\n    }\\n\\n    function _getFeedsInfo(\\n        address[] memory _feeds\\n    ) internal view returns (Structures.Feed[] memory) {\\n        uint256 len = _feeds.length;\\n        Structures.Feed[] memory f = new Structures.Feed[](len);\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            f[i] = _getFeedInfo(_feeds[i]);\\n        }\\n\\n        return f;\\n    }\\n}\\n\",\"keccak256\":\"0x3d86a409594e5b7bfdcfe52c2cb5148594ff0f5ecff4f2ab98fe69143a2a69a3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}